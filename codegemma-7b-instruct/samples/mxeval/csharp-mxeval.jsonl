{"task_id": "HumanEval_csharp/0", "language": "csharp", "completion": "C#\npublic static bool HasCloseElements(List<double> numbers, double threshold)\n{\n    numbers.Sort();\n\n    for (int i = 1; i < numbers.Count; i++)\n    {\n        if (Math.Abs(numbers[i] - numbers[i - 1]) < threshold)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/1", "language": "csharp", "completion": "C#\npublic static List<string> SeparateParenGroups(string paren_string)\n{\n    List<string> groups = new List<string>();\n    int depth = 0;\n    StringBuilder currentGroup = new StringBuilder();\n\n    for (int i = 0; i < paren_string.Length; i++)\n    {\n        char c = paren_string[i];\n\n        if (c == '(')\n        {\n            depth++;\n            currentGroup.Append(c);\n        }\n        else if (c == ')')\n        {\n            depth--;\n            currentGroup.Append(c);\n\n            if (depth == 0)\n            {\n                groups.Add(currentGroup.ToString());\n                currentGroup.Clear();\n            }\n        }\n    }\n\n    return groups;\n}"}
{"task_id": "HumanEval_csharp/2", "language": "csharp", "completion": "C#\npublic static double TruncateNumber(double number)\n{\n    return number - Math.Floor(number);\n}"}
{"task_id": "HumanEval_csharp/3", "language": "csharp", "completion": "c#\npublic static bool BelowZero(List<int> operations)\n{\n    int balance = 0;\n\n    foreach (int operation in operations)\n    {\n        balance += operation;\n\n        if (balance < 0)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/4", "language": "csharp", "completion": "public static double MeanAbsoluteDeviation(List<double> numbers)\n{\n    // Calculate the mean of the dataset\n    double mean = numbers.Average();\n\n    // Calculate the absolute difference between each element and the mean\n    double sum = 0;\n    foreach (double number in numbers)\n    {\n        sum += Math.Abs(number - mean);\n    }\n\n    // Calculate the mean absolute deviation\n    return sum / numbers.Count;\n}"}
{"task_id": "HumanEval_csharp/5", "language": "csharp", "completion": "C#\npublic static List<int> Intersperse(List<int> numbers, int delimeter)\n{\n    List<int> result = new List<int>();\n\n    for (int i = 0; i < numbers.Count; i++)\n    {\n        result.Add(numbers[i]);\n\n        if (i < numbers.Count - 1)\n        {\n            result.Add(delimeter);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/6", "language": "csharp", "completion": "c#\npublic static List<int> ParseNestedParens(string paren_string)\n{\n    List<int> maxLevels = new List<int>();\n    int currentLevel = 0;\n\n    foreach (char c in paren_string)\n    {\n        if (c == '(')\n        {\n            currentLevel++;\n            maxLevels.Add(currentLevel);\n        }\n        else if (c == ')')\n        {\n            currentLevel--;\n        }\n    }\n\n    return maxLevels;\n}"}
{"task_id": "HumanEval_csharp/7", "language": "csharp", "completion": "public static List<string> FilterBySubstring(List<string> strings, string substring)\n{\n    return strings.Where(s => s.Contains(substring)).ToList();\n}"}
{"task_id": "HumanEval_csharp/8", "language": "csharp", "completion": "c#\npublic static Tuple<int, int> SumProduct(List<int> numbers)\n{\n    int sum = 0;\n    int product = 1;\n\n    foreach (int number in numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\n    return new Tuple<int, int>(sum, product);\n}"}
{"task_id": "HumanEval_csharp/9", "language": "csharp", "completion": "c#\npublic static List<int> RollingMax(List<int> numbers)\n{\n    List<int> result = new List<int>();\n    int maximum = numbers[0];\n\n    for (int i = 0; i < numbers.Count; i++)\n    {\n        if (numbers[i] > maximum)\n        {\n            maximum = numbers[i];\n        }\n        result.Add(maximum);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/10", "language": "csharp", "completion": "C#\npublic static string MakePalindrome(string str)\n{\n    int left = 0;\n    int right = str.Length - 1;\n\n    // Find the longest palindrome suffix\n    while (left < right && str[left] != str[right])\n    {\n        left++;\n    }\n\n    // Append the reverse of the prefix to the end of the string\n    return str + new string(str.Substring(0, left).Reverse().ToArray());\n}"}
{"task_id": "HumanEval_csharp/11", "language": "csharp", "completion": "c#\npublic static string StringXor(string a, string b)\n{\n    var result = new StringBuilder();\n\n    for (int i = 0; i < a.Length; i++)\n    {\n        result.Append((a[i] ^ b[i]) == '1' ? '1' : '0');\n    }\n\n    return result.ToString();\n}"}
{"task_id": "HumanEval_csharp/12", "language": "csharp", "completion": "c#\npublic static string Longest(List<string> strings)\n{\n    if (strings.Count == 0)\n    {\n        return null;\n    }\n\n    string longest = strings[0];\n\n    for (int i = 1; i < strings.Count; i++)\n    {\n        if (strings[i].Length > longest.Length)\n        {\n            longest = strings[i];\n        }\n    }\n\n    return longest;\n}"}
{"task_id": "HumanEval_csharp/13", "language": "csharp", "completion": "c#\npublic static int GreatestCommonDivisor(int a, int b)\n{\n    while (b != 0)\n    {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n}"}
{"task_id": "HumanEval_csharp/14", "language": "csharp", "completion": "C#\npublic static List<string> AllPrefixes(string string0)\n{\n    List<string> prefixes = new List<string>();\n    for (int i = 0; i < string0.Length; i++)\n    {\n        for (int j = 0; j <= i; j++)\n        {\n            prefixes.Add(string0.Substring(j, i - j + 1));\n        }\n    }\n    return prefixes;\n}"}
{"task_id": "HumanEval_csharp/15", "language": "csharp", "completion": "c#\npublic static string StringSequence(int n)\n{\n    return string.Join(\" \", Enumerable.Range(0, n + 1));\n}"}
{"task_id": "HumanEval_csharp/16", "language": "csharp", "completion": "C#\npublic static int CountDistinctCharacters(string string0)\n{\n    return string0.ToLower().Distinct().Count();\n}"}
{"task_id": "HumanEval_csharp/17", "language": "csharp", "completion": "c#\npublic static List<int> ParseMusic(string music_string)\n{\n    List<int> beats = new List<int>();\n    char[] notes = music_string.ToCharArray();\n\n    foreach (char note in notes)\n    {\n        switch (note)\n        {\n            case 'o':\n                beats.Add(4);\n                break;\n            case 'o|':\n                beats.Add(2);\n                break;\n            case '.|':\n                beats.Add(1);\n                break;\n        }\n    }\n\n    return beats;\n}"}
{"task_id": "HumanEval_csharp/18", "language": "csharp", "completion": "c#\npublic static int HowManyTimes(string string0, string substring)\n{\n    int count = 0;\n    int startIndex = 0;\n\n    while (true)\n    {\n        startIndex = string0.IndexOf(substring, startIndex);\n\n        if (startIndex == -1)\n        {\n            break;\n        }\n\n        count++;\n        startIndex += substring.Length;\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/19", "language": "csharp", "completion": "C#\npublic static string SortNumbers(string numbers)\n{\n    string[] numberWords = numbers.Split(' ');\n    Array.Sort(numberWords);\n    return string.Join(\" \", numberWords);\n}"}
{"task_id": "HumanEval_csharp/20", "language": "csharp", "completion": "c#\npublic static List<double> FindClosestElements(List<double> numbers)\n{\n    numbers.Sort();\n\n    double minDifference = double.MaxValue;\n    List<double> closestElements = new List<double>();\n\n    for (int i = 1; i < numbers.Count; i++)\n    {\n        double difference = Math.Abs(numbers[i] - numbers[i - 1]);\n\n        if (difference < minDifference)\n        {\n            minDifference = difference;\n            closestElements.Clear();\n            closestElements.Add(numbers[i - 1]);\n            closestElements.Add(numbers[i]);\n        }\n        else if (difference == minDifference)\n        {\n            closestElements.Add(numbers[i - 1]);\n            closestElements.Add(numbers[i]);\n        }\n    }\n\n    return closestElements;\n}"}
{"task_id": "HumanEval_csharp/21", "language": "csharp", "completion": "C#\npublic static List<double> RescaleToUnit(List<double> numbers)\n{\n    double min = numbers.Min();\n    double max = numbers.Max();\n\n    return numbers.Select(x => (x - min) / (max - min)).ToList();\n}"}
{"task_id": "HumanEval_csharp/22", "language": "csharp", "completion": "C#\npublic static List<int> FilterIntegers(List<object> values)\n{\n    return values.OfType<int>().ToList();\n}"}
{"task_id": "HumanEval_csharp/23", "language": "csharp", "completion": "c#\npublic static int Strlen(string string0)\n{\n    return string0.Length;\n}"}
{"task_id": "HumanEval_csharp/24", "language": "csharp", "completion": "c#\npublic static int LargestDivisor(int n)\n{\n    for (int i = n - 1; i >= 1; i--)\n    {\n        if (n % i == 0)\n        {\n            return i;\n        }\n    }\n\n    return 1;\n}"}
{"task_id": "HumanEval_csharp/25", "language": "csharp", "completion": "C#\npublic static List<int> Factorize(int n)\n{\n    List<int> factors = new List<int>();\n    int divisor = 2;\n\n    while (n > 1)\n    {\n        while (n % divisor == 0)\n        {\n            factors.Add(divisor);\n            n /= divisor;\n        }\n        divisor++;\n    }\n\n    return factors;\n}"}
{"task_id": "HumanEval_csharp/26", "language": "csharp", "completion": "C#\npublic static List<int> RemoveDuplicates(List<int> numbers)\n{\n    return numbers.Distinct().ToList();\n}"}
{"task_id": "HumanEval_csharp/27", "language": "csharp", "completion": "public static string FlipCase(string string0)\n{\n    return new string(string0.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());\n}"}
{"task_id": "HumanEval_csharp/28", "language": "csharp", "completion": "c#\npublic static string Concatenate(List<string> strings)\n{\n    return string.Join(\"\", strings);\n}"}
{"task_id": "HumanEval_csharp/29", "language": "csharp", "completion": "C#\npublic static List<string> FilterByPrefix(List<string> strings, string prefix)\n{\n    return strings.Where(str => str.StartsWith(prefix)).ToList();\n}"}
{"task_id": "HumanEval_csharp/30", "language": "csharp", "completion": "c#\npublic static List<int> GetPositive(List<int> l)\n{\n    return l.Where(x => x > 0).ToList();\n}"}
{"task_id": "HumanEval_csharp/31", "language": "csharp", "completion": "c#\npublic static bool IsPrime(int n)\n{\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    var i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n        i += 6;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/33", "language": "csharp", "completion": "c#\npublic static List<int> SortThird(List<int> l)\n{\n    List<int> l1 = new List<int>();\n    List<int> l2 = new List<int>();\n\n    for (int i = 0; i < l.Count; i++)\n    {\n        if (i % 3 == 0)\n        {\n            l2.Add(l[i]);\n        }\n        else\n        {\n            l1.Add(l[i]);\n        }\n    }\n\n    l2.Sort();\n    l1.AddRange(l2);\n\n    return l1;\n}"}
{"task_id": "HumanEval_csharp/34", "language": "csharp", "completion": "c#\npublic static List<int> Unique(List<int> l)\n{\n    return l.Distinct().OrderBy(x => x).ToList();\n}"}
{"task_id": "HumanEval_csharp/35", "language": "csharp", "completion": "c#\npublic static int MaxElement(List<int> l)\n{\n    return l.Max();\n}"}
{"task_id": "HumanEval_csharp/36", "language": "csharp", "completion": "C#\npublic static int FizzBuzz(int n)\n{\n    int count = 0;\n    for (int i = 1; i < n; i++)\n    {\n        if (i % 11 == 0 || i % 13 == 0)\n        {\n            string s = i.ToString();\n            count += s.Count(c => c == '7');\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_csharp/37", "language": "csharp", "completion": "c#\npublic static List<int> SortEven(List<int> l)\n{\n    List<int> sortedList = new List<int>();\n\n    // Sort the even-indexed elements of the list.\n    l.Where((x, i) => i % 2 == 0).OrderBy(x => x).ToList().ForEach(x => sortedList.Add(x));\n\n    // Add the odd-indexed elements to the sorted list.\n    l.Where((x, i) => i % 2 != 0).ToList().ForEach(x => sortedList.Add(x));\n\n    return sortedList;\n}"}
{"task_id": "HumanEval_csharp/39", "language": "csharp", "completion": "c#\npublic static int PrimeFib(int n)\n{\n    int a = 1;\n    int b = 2;\n    int count = 2;\n\n    while (count <= n)\n    {\n        int c = a + b;\n        a = b;\n        b = c;\n\n        if (IsPrime(c))\n        {\n            if (count == n)\n            {\n                return c;\n            }\n            count++;\n        }\n    }\n\n    return -1;\n}\n\npublic static bool IsPrime(int n)\n{\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n        i += 6;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/40", "language": "csharp", "completion": "C#\npublic static bool TriplesSumToZero(List<int> l)\n{\n    l.Sort();\n\n    for (int i = 0; i < l.Count - 2; i++)\n    {\n        int j = i + 1;\n        int k = l.Count - 1;\n\n        while (j < k)\n        {\n            int sum = l[i] + l[j] + l[k];\n\n            if (sum == 0)\n            {\n                return true;\n            }\n            else if (sum < 0)\n            {\n                j++;\n            }\n            else\n            {\n                k--;\n            }\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/41", "language": "csharp", "completion": "C#\npublic static int CarRaceCollision(int n)\n{\n    int count = 0;\n    int left = 0;\n    int right = n - 1;\n\n    while (left < right)\n    {\n        if (left % n == right % n)\n        {\n            count++;\n            left++;\n            right--;\n        }\n        else if (left % n < right % n)\n        {\n            left++;\n        }\n        else\n        {\n            right--;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/42", "language": "csharp", "completion": "C#\npublic static List<int> IncrList(List<int> l)\n{\n    return l.Select(x => x + 1).ToList();\n}"}
{"task_id": "HumanEval_csharp/43", "language": "csharp", "completion": "C#\npublic static bool PairsSumToZero(List<int> l)\n{\n    HashSet<int> seen = new HashSet<int>();\n\n    for (int i = 0; i < l.Count; i++)\n    {\n        int complement = -l[i];\n\n        if (seen.Contains(complement))\n        {\n            return true;\n        }\n\n        seen.Add(l[i]);\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/44", "language": "csharp", "completion": "c#\npublic static string ChangeBase(int x, int base)\n{\n    List<int> digits = new List<int>();\n\n    while (x > 0)\n    {\n        int digit = x % base;\n        digits.Add(digit);\n        x /= base;\n    }\n\n    digits.Reverse();\n\n    return string.Join(\"\", digits.Select(d => d.ToString()));\n}"}
{"task_id": "HumanEval_csharp/45", "language": "csharp", "completion": "C#\npublic static double TriangleArea(int a, int h)\n{\n    return (double)(a * h) / 2;\n}"}
{"task_id": "HumanEval_csharp/46", "language": "csharp", "completion": "c#\npublic static int Fib4(int n)\n{\n    if (n <= 2)\n    {\n        return n;\n    }\n\n    int[] fib4 = new int[n + 1];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n\n    for (int i = 3; i <= n; i++)\n    {\n        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n\n    return fib4[n];\n}"}
{"task_id": "HumanEval_csharp/47", "language": "csharp", "completion": "c#\npublic static object Median(List<int> l)\n{\n    l.Sort();\n\n    if (l.Count % 2 == 0)\n    {\n        int middle = l.Count / 2;\n        return (l[middle - 1] + l[middle]) / 2.0;\n    }\n    else\n    {\n        int middle = (l.Count - 1) / 2;\n        return l[middle];\n    }\n}"}
{"task_id": "HumanEval_csharp/48", "language": "csharp", "completion": "c#\npublic static bool IsPalindrome(string text)\n{\n    int left = 0;\n    int right = text.Length - 1;\n\n    while (left < right)\n    {\n        if (text[left] != text[right])\n        {\n            return false;\n        }\n        left++;\n        right--;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/49", "language": "csharp", "completion": "c#\npublic static int Modp(int n, int p)\n{\n    return (int)((Math.Pow(2, n) % p));\n}"}
{"task_id": "HumanEval_csharp/51", "language": "csharp", "completion": "c#\npublic static string RemoveVowels(string text)\n{\n    return new string(text.Where(c => !new char[] { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }.Contains(c)).ToArray());\n}"}
{"task_id": "HumanEval_csharp/52", "language": "csharp", "completion": "C#\npublic static bool BelowThreshold(List<int> l, int t)\n{\n    return l.All(x => x < t);\n}"}
{"task_id": "HumanEval_csharp/53", "language": "csharp", "completion": "c#\npublic static int Add(int x, int y)\n{\n    return x + y;\n}"}
{"task_id": "HumanEval_csharp/54", "language": "csharp", "completion": "c#\npublic static bool SameChars(string s0, string s1)\n{\n    return s0.OrderBy(c => c).SequenceEqual(s1.OrderBy(c => c));\n}"}
{"task_id": "HumanEval_csharp/55", "language": "csharp", "completion": "c#\npublic static int Fib(int n)\n{\n    if (n <= 1)\n        return n;\n\n    int[] fibonacci = new int[n + 1];\n    fibonacci[0] = 0;\n    fibonacci[1] = 1;\n\n    for (int i = 2; i <= n; i++)\n    {\n        fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n    }\n\n    return fibonacci[n];\n}"}
{"task_id": "HumanEval_csharp/56", "language": "csharp", "completion": "public static bool CorrectBracketing(string brackets)\n{\n    int count = 0;\n\n    foreach (char c in brackets)\n    {\n        if (c == '<')\n        {\n            count++;\n        }\n        else if (c == '>')\n        {\n            count--;\n        }\n\n        if (count < 0)\n        {\n            return false;\n        }\n    }\n\n    return count == 0;\n}"}
{"task_id": "HumanEval_csharp/57", "language": "csharp", "completion": "C#\npublic static bool Monotonic(List<int> l)\n{\n    if (l.Count <= 2) return true;\n\n    bool isIncreasing = l[1] > l[0];\n    for (int i = 2; i < l.Count; i++)\n    {\n        if (isIncreasing && l[i] < l[i - 1]) return false;\n        if (!isIncreasing && l[i] > l[i - 1]) return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/58", "language": "csharp", "completion": "c#\npublic static List<int> Common(List<int> l1, List<int> l2)\n{\n    return l1.Intersect(l2).ToList();\n}"}
{"task_id": "HumanEval_csharp/59", "language": "csharp", "completion": "C#\npublic static int LargestPrimeFactor(int n)\n{\n    while (n % 2 == 0)\n    {\n        n /= 2;\n    }\n\n    for (int i = 3; i <= Math.Sqrt(n); i += 2)\n    {\n        while (n % i == 0)\n        {\n            n /= i;\n        }\n    }\n\n    return n;\n}"}
{"task_id": "HumanEval_csharp/60", "language": "csharp", "completion": "c#\npublic static int SumToN(int n)\n{\n    return (n * (n + 1)) / 2;\n}"}
{"task_id": "HumanEval_csharp/61", "language": "csharp", "completion": "C#\npublic static bool CorrectBracketing(string brackets)\n{\n    int balance = 0;\n\n    for (int i = 0; i < brackets.Length; i++)\n    {\n        if (brackets[i] == '(')\n        {\n            balance++;\n        }\n        else if (brackets[i] == ')')\n        {\n            balance--;\n        }\n\n        if (balance < 0)\n        {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}"}
{"task_id": "HumanEval_csharp/62", "language": "csharp", "completion": "public static List<int> Derivative(List<int> xs)\n        {\n            List<int> result = new List<int>();\n            for (int i = 1; i < xs.Count; i++)\n            {\n                result.Add(xs[i] * i);\n            }\n            return result;\n        }\n        </end_of_turn>\n    }\n}\n</start_of_turn>"}
{"task_id": "HumanEval_csharp/63", "language": "csharp", "completion": "c#\npublic static int Fibfib(int n)\n{\n    if (n <= 2)\n    {\n        return n;\n    }\n\n    int[] fibfib = new int[n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n\n    for (int i = 3; i <= n; i++)\n    {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n    }\n\n    return fibfib[n];\n}"}
{"task_id": "HumanEval_csharp/64", "language": "csharp", "completion": "C#\npublic static int VowelsCount(string s)\n{\n    int count = 0;\n    string[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\" };\n\n    // Count vowels in the word\n    foreach (char c in s.ToLower())\n    {\n        if (vowels.Contains(c.ToString()))\n        {\n            count++;\n        }\n    }\n\n    // Check for 'y' at the end of the word\n    if (s.ToLower().EndsWith(\"y\"))\n    {\n        count++;\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/65", "language": "csharp", "completion": "C#\npublic static string CircularShift(int x, int shift)\n{\n    string number = x.ToString();\n    int length = number.Length;\n\n    if (shift > length)\n    {\n        return new string(number.Reverse().ToArray());\n    }\n\n    string shifted = number.Substring(shift) + number.Substring(0, shift);\n    return shifted;\n}"}
{"task_id": "HumanEval_csharp/66", "language": "csharp", "completion": "c#\npublic static int DigitSum(string s)\n{\n    int sum = 0;\n    foreach (char c in s)\n    {\n        if (char.IsUpper(c))\n        {\n            sum += (int)c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_csharp/67", "language": "csharp", "completion": "int apples = int.Parse(Regex.Match(s, @\"\\d+ apples\").Value.Split(' ')[0]);\n            int oranges = int.Parse(Regex.Match(s, @\"\\d+ oranges\").Value.Split(' ')[0]);\n\n            return n - apples - oranges;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/68", "language": "csharp", "completion": "C#\npublic static List<int> Pluck(List<int> arr)\n{\n    if (!arr.Any() || arr.All(x => x % 2 != 0))\n    {\n        return new List<int>();\n    }\n\n    int minEvenValue = arr.Min(x => x % 2 == 0 ? x : int.MaxValue);\n    int minEvenIndex = arr.FindIndex(x => x == minEvenValue);\n\n    return new List<int>() { minEvenValue, minEvenIndex };\n}"}
{"task_id": "HumanEval_csharp/69", "language": "csharp", "completion": "C#\npublic static int Search(List<int> lst)\n{\n    Dictionary<int, int> frequencies = new Dictionary<int, int>();\n\n    // Calculate frequencies of each integer\n    foreach (int num in lst)\n    {\n        frequencies.TryGetValue(num, out int count);\n        frequencies[num] = count + 1;\n    }\n\n    // Find the maximum frequency\n    int maxFrequency = lst.Max(num => frequencies[num]);\n\n    // Return the first integer with frequency greater than or equal to itself\n    return lst.FirstOrDefault(num => frequencies[num] >= num) ?? -1;\n}"}
{"task_id": "HumanEval_csharp/70", "language": "csharp", "completion": "c#\npublic static List<int> StrangeSortList(List<int> lst)\n{\n    if (lst.Count == 0)\n        return new List<int>();\n\n    lst.Sort();\n    List<int> sortedList = new List<int>();\n\n    int start = 0;\n    int end = lst.Count - 1;\n\n    while (start <= end)\n    {\n        sortedList.Add(lst[start]);\n        start++;\n\n        if (start <= end)\n        {\n            sortedList.Add(lst[end]);\n            end--;\n        }\n    }\n\n    return sortedList;\n}"}
{"task_id": "HumanEval_csharp/71", "language": "csharp", "completion": "C#\npublic static object TriangleArea(int a, int b, int c)\n{\n    if ((a + b > c) && (a + c > b) && (b + c > a))\n    {\n        double s = (a + b + c) / 2.0;\n        double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.Round(area, 2);\n    }\n    else\n    {\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_csharp/72", "language": "csharp", "completion": "c#\npublic static bool WillItFly(List<int> q, int w)\n{\n    int sum = q.Sum();\n\n    if (sum > w)\n    {\n        return false;\n    }\n\n    return IsPalindrome(q);\n}\n\nprivate static bool IsPalindrome(List<int> q)\n{\n    int left = 0;\n    int right = q.Count - 1;\n\n    while (left < right)\n    {\n        if (q[left] != q[right])\n        {\n            return false;\n        }\n\n        left++;\n        right--;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/73", "language": "csharp", "completion": "C#\npublic static int SmallestChange(List<int> arr)\n{\n    int n = arr.Count;\n    int count = 0;\n\n    for (int i = 0; i < n / 2; i++)\n    {\n        if (arr[i] != arr[n - i - 1])\n        {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/74", "language": "csharp", "completion": "c#\npublic static List<string> TotalMatch(List<string> lst1, List<string> lst2)\n{\n    int totalChars1 = lst1.Sum(str => str.Length);\n    int totalChars2 = lst2.Sum(str => str.Length);\n\n    if (totalChars1 < totalChars2)\n    {\n        return lst1;\n    }\n    else if (totalChars2 < totalChars1)\n    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}"}
{"task_id": "HumanEval_csharp/75", "language": "csharp", "completion": "C#\npublic static bool IsMultiplyPrime(int a)\n{\n    if (a <= 1)\n        return false;\n\n    int factor = 2;\n    int count = 0;\n\n    while (factor * factor <= a)\n    {\n        while (a % factor == 0)\n        {\n            a /= factor;\n            count++;\n        }\n        factor++;\n    }\n\n    return count == 3;\n}"}
{"task_id": "HumanEval_csharp/76", "language": "csharp", "completion": "C#\npublic static bool IsSimplePower(int x, int n)\n{\n    int result = n;\n    while (result < x)\n    {\n        result *= n;\n        if (result == x)\n        {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_csharp/77", "language": "csharp", "completion": "C#\npublic static bool Iscube(int a)\n{\n    return Math.Pow((double)a, 1 / 3) % 1 == 0;\n}"}
{"task_id": "HumanEval_csharp/78", "language": "csharp", "completion": "c#\npublic static int HexKey(string num)\n{\n    int count = 0;\n    foreach (char c in num.ToUpper())\n    {\n        int digit = c > '9' ? c - 'A' + 10 : c - '0';\n        if (IsPrime(digit))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static bool IsPrime(int num)\n{\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    int i = 5;\n    while (i * i <= num)\n    {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n        i += 6;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_csharp/79", "language": "csharp", "completion": "c#\npublic static string DecimalToBinary(int decimal)\n{\n    List<int> binary = new List<int>();\n\n    while (decimal > 0)\n    {\n        int remainder = decimal % 2;\n        binary.Add(remainder);\n        decimal /= 2;\n    }\n\n    binary.Reverse();\n\n    string binaryString = string.Join(\"\", binary.Select(b => b.ToString()));\n\n    return \"db\" + binaryString + \"db\";\n}"}
{"task_id": "HumanEval_csharp/80", "language": "csharp", "completion": "c#\npublic static bool IsHappy(string s)\n{\n    if (s.Length < 3)\n        return false;\n\n    for (int i = 0; i <= s.Length - 3; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/81", "language": "csharp", "completion": "c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<string> NumericalLetterGrade(List<object> grades)\n    {\n        List<string> letterGrades = new List<string>();\n\n        foreach (var grade in grades)\n        {\n            double gpa = Convert.ToDouble(grade);\n\n            if (gpa >= 4.0)\n            {\n                letterGrades.Add(\"A+\");\n            }\n            else if (gpa >= 3.7)\n            {\n                letterGrades.Add(\"A\");\n            }\n            else if (gpa >= 3.3)\n            {\n                letterGrades.Add(\"A-\");\n            }\n            else if (gpa >= 3.0)\n            {\n                letterGrades.Add(\"B+\");\n            }\n            else if (gpa >= 2.7)\n            {\n                letterGrades.Add(\"B\");\n            }\n            else if (gpa >= 2.3)\n            {\n                letterGrades.Add(\"B-\");\n            }\n            else if (gpa >= 2.0)\n            {\n                letterGrades.Add(\"C+\");\n            }\n            else if (gpa >= 1.7)\n            {\n                letterGrades.Add(\"C\");\n            }\n            else if (gpa >= 1.3)\n            {\n                letterGrades.Add(\"C-\");\n            }\n            else if (gpa >= 1.0)\n            {\n                letterGrades.Add(\"D+\");\n            }\n            else if (gpa >= 0.7)\n            {\n                letterGrades.Add(\"D\");\n            }\n            else\n            {\n                letterGrades.Add(\"D-\");\n            }\n        }\n\n        return letterGrades;\n    }\n}"}
{"task_id": "HumanEval_csharp/82", "language": "csharp", "completion": "c#\npublic static bool PrimeLength(string string0)\n{\n    int length = string0.Length;\n\n    if (length <= 1)\n    {\n        return false;\n    }\n\n    for (int i = 2; i <= Math.Sqrt(length); i++)\n    {\n        if (length % i == 0)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/83", "language": "csharp", "completion": "c#\npublic static int StartsOneEnds(int n)\n{\n    if (n == 1)\n    {\n        return 2; // 11 and 12\n    }\n\n    int count = 9 * (n - 1); // Numbers starting with 1 and ending with 1-9\n\n    // Numbers starting with 1 and ending with 0-9\n    for (int i = 2; i <= n; i++)\n    {\n        count += 10;\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/84", "language": "csharp", "completion": "C#\npublic static string Solve(int N)\n{\n    int sum = 0;\n    while (N > 0)\n    {\n        sum += N % 2;\n        N >>= 1;\n    }\n\n    return Convert.ToString(sum, 2);\n}"}
{"task_id": "HumanEval_csharp/85", "language": "csharp", "completion": "c#\npublic static int Add(List<int> lst)\n{\n    return lst.Where((x, i) => i % 2 != 0 && x % 2 == 0).Sum();\n}"}
{"task_id": "HumanEval_csharp/86", "language": "csharp", "completion": "c#\npublic static string AntiShuffle(string s)\n{\n    string[] words = s.Split(' ');\n    List<string> orderedWords = new List<string>();\n\n    foreach (string word in words)\n    {\n        char[] chars = word.ToCharArray();\n        Array.Sort(chars);\n        orderedWords.Add(new string(chars));\n    }\n\n    return string.Join(\" \", orderedWords);\n}"}
{"task_id": "HumanEval_csharp/87", "language": "csharp", "completion": "c#\npublic static List<List<int>> GetRow(List<List<int>> lst, int x)\n{\n    List<List<int>> result = new List<List<int>>();\n\n    if (lst.Count == 0 || lst[0].Count == 0)\n    {\n        return result;\n    }\n\n    for (int i = 0; i < lst.Count; i++)\n    {\n        for (int j = lst[i].Count - 1; j >= 0; j--)\n        {\n            if (lst[i][j] == x)\n            {\n                result.Add(new List<int>() { i, j });\n            }\n        }\n    }\n\n    result.Sort((a, b) => a[0].CompareTo(b[0]));\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/88", "language": "csharp", "completion": "C#\npublic static List<int> SortArray(List<int> array)\n{\n    int sum = array[0] + array[array.Count - 1];\n\n    if (sum % 2 == 0)\n    {\n        array.Sort((x, y) => y.CompareTo(x));\n    }\n    else\n    {\n        array.Sort((x, y) => x.CompareTo(y));\n    }\n\n    return new List<int>(array);\n}"}
{"task_id": "HumanEval_csharp/89", "language": "csharp", "completion": "C#\npublic static string Encrypt(string s)\n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n\n    foreach (char c in s)\n    {\n        int index = alphabet.IndexOf(c);\n        int newIndex = (index - 4) % 26;\n        encrypted += alphabet[newIndex];\n    }\n\n    return encrypted;\n}"}
{"task_id": "HumanEval_csharp/90", "language": "csharp", "completion": "c#\npublic static object NextSmallest(List<int> lst)\n{\n    if (lst.Count < 2)\n    {\n        return null;\n    }\n\n    var sortedList = lst.OrderBy(x => x).ToList();\n\n    return sortedList[1];\n}"}
{"task_id": "HumanEval_csharp/91", "language": "csharp", "completion": "C#\npublic static int IsBored(string S)\n{\n    string[] sentences = Regex.Split(S, @\"[.?!]\");\n    int boredoms = 0;\n\n    foreach (string sentence in sentences)\n    {\n        if (sentence.StartsWith(\"I\"))\n        {\n            boredoms++;\n        }\n    }\n\n    return boredoms;\n}"}
{"task_id": "HumanEval_csharp/92", "language": "csharp", "completion": "c#\npublic static bool AnyInt(object x, object y, object z)\n{\n    if (x is int && y is int && z is int)\n    {\n        return (int)x == (int)y + (int)z ||\n               (int)y == (int)x + (int)z ||\n               (int)z == (int)x + (int)y;\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/93", "language": "csharp", "completion": "c#\npublic static string Encode(string message)\n{\n    string encodedMessage = \"\";\n    string vowels = \"aeiouAEIOU\";\n\n    foreach (char c in message)\n    {\n        if (char.IsLetter(c))\n        {\n            encodedMessage += char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c);\n        }\n        else if (vowels.Contains(c.ToString()))\n        {\n            int index = vowels.IndexOf(c.ToString());\n            encodedMessage += vowels[(index + 2) % vowels.Length];\n        }\n        else\n        {\n            encodedMessage += c;\n        }\n    }\n\n    return encodedMessage;\n}"}
{"task_id": "HumanEval_csharp/94", "language": "csharp", "completion": "C#\npublic static int Skjkasdkd(List<int> lst)\n{\n    int maxPrime = 0;\n\n    foreach (int num in lst)\n    {\n        if (isPrime(num) && num > maxPrime)\n        {\n            maxPrime = num;\n        }\n    }\n\n    int sum = 0;\n\n    while (maxPrime > 0)\n    {\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n\n    return sum;\n}\n\nprivate static bool isPrime(int num)\n{\n    if (num < 2) return false;\n    if (num % 2 == 0 && num != 2) return false;\n\n    double sqrtNum = Math.Sqrt(num);\n\n    for (int i = 3; i <= sqrtNum; i += 2)\n    {\n        if (num % i == 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/95", "language": "csharp", "completion": "C#\npublic static bool CheckDictCase(Dictionary<object, string> dict)\n{\n    if (dict.Count == 0)\n    {\n        return false;\n    }\n\n    string firstKey = dict.ElementAt(0).Key.ToString();\n\n    bool allLowerCase = dict.All(k => k.Key.ToString().ToLower() == firstKey.ToLower());\n    bool allUpperCase = dict.All(k => k.Key.ToString().ToUpper() == firstKey.ToUpper());\n\n    return allLowerCase || allUpperCase;\n}"}
{"task_id": "HumanEval_csharp/96", "language": "csharp", "completion": "c#\npublic static List<int> CountUpTo(int n)\n{\n    List<int> primes = new List<int>();\n\n    for (int i = 2; i < n; i++)\n    {\n        bool isPrime = true;\n\n        for (int j = 2; j <= Math.Sqrt(i); j++)\n        {\n            if (i % j == 0)\n            {\n                isPrime = false;\n                break;\n            }\n        }\n\n        if (isPrime)\n        {\n            primes.Add(i);\n        }\n    }\n\n    return primes;\n}"}
{"task_id": "HumanEval_csharp/97", "language": "csharp", "completion": "C#\npublic static int Multiply(int a, int b)\n{\n    return (a % 10) * (b % 10);\n}"}
{"task_id": "HumanEval_csharp/98", "language": "csharp", "completion": "public static int CountUpper(string s)\n{\n    int count = 0;\n    for (int i = 0; i < s.Length; i++)\n    {\n        if (i % 2 == 0 && char.IsUpper(s[i]))\n        {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_csharp/99", "language": "csharp", "completion": "c#\npublic static int ClosestInteger(string value)\n{\n    double number = double.Parse(value);\n    int lower = (int)Math.Floor(number);\n    int upper = (int)Math.Ceiling(number);\n\n    if (Math.Abs(number - lower) < Math.Abs(number - upper))\n    {\n        return lower;\n    }\n    else\n    {\n        return upper;\n    }\n}"}
{"task_id": "HumanEval_csharp/100", "language": "csharp", "completion": "c#\npublic static List<int> MakeAPile(int n)\n{\n    List<int> stones = new List<int>();\n    stones.Add(n);\n\n    while (stones.Last() != 1)\n    {\n        int currentStones = stones.Last();\n        stones.Add(currentStones % 2 == 0 ? currentStones + 1 : currentStones - 1);\n    }\n\n    return stones;\n}"}
{"task_id": "HumanEval_csharp/101", "language": "csharp", "completion": "C#\npublic static List<string> WordsString(string s)\n{\n    return Regex.Split(s, @\"\\s*,\\s*|\\s+\").ToList();\n}"}
{"task_id": "HumanEval_csharp/102", "language": "csharp", "completion": "c#\npublic static int ChooseNum(int x, int y)\n{\n    int biggestEven = -1;\n\n    for (int i = y; i >= x; i--)\n    {\n        if (i % 2 == 0)\n        {\n            biggestEven = i;\n            break;\n        }\n    }\n\n    return biggestEven;\n}"}
{"task_id": "HumanEval_csharp/103", "language": "csharp", "completion": "c#\nusing System;\n\npublic class Solution\n{\n    public static string RoundedAvg(int n, int m)\n    {\n        if (n > m)\n        {\n            return \"-1\";\n        }\n\n        double sum = 0;\n        int count = 0;\n\n        for (int i = n; i <= m; i++)\n        {\n            sum += i;\n            count++;\n        }\n\n        int average = (int)Math.Round(sum / count);\n        return Convert.ToString(average, 2);\n    }\n}"}
{"task_id": "HumanEval_csharp/104", "language": "csharp", "completion": "public static List<int> UniqueDigits(List<int> x)\n{\n    return x.Where(num => !num.ToString().Any(digit => digit % 2 == 0)).OrderBy(num => num).ToList();\n}"}
{"task_id": "HumanEval_csharp/105", "language": "csharp", "completion": "c#\npublic static List<string> ByLength(List<int> arr)\n{\n    // Filter out invalid numbers\n    List<int> validNumbers = arr.Where(x => x >= 1 && x <= 9).ToList();\n\n    // Sort the valid numbers\n    validNumbers.Sort();\n\n    // Reverse the sorted numbers\n    validNumbers.Reverse();\n\n    // Convert the numbers to their corresponding names\n    List<string> result = validNumbers.Select(x => x.ToString()).Select(x =>\n    {\n        switch (x)\n        {\n            case \"1\": return \"One\";\n            case \"2\": return \"Two\";\n            case \"3\": return \"Three\";\n            case \"4\": return \"Four\";\n            case \"5\": return \"Five\";\n            case \"6\": return \"Six\";\n            case \"7\": return \"Seven\";\n            case \"8\": return \"Eight\";\n            case \"9\": return \"Nine\";\n            default: return \"\";\n        }\n    }).ToList();\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/106", "language": "csharp", "completion": "c#\npublic static List<int> F(int n)\n{\n    List<int> result = new List<int>();\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            int factorial = 1;\n            for (int j = 1; j <= i; j++)\n            {\n                factorial *= j;\n            }\n            result.Add(factorial);\n        }\n        else\n        {\n            int sum = 0;\n            for (int j = 1; j <= i; j++)\n            {\n                sum += j;\n            }\n            result.Add(sum);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/107", "language": "csharp", "completion": "C#\npublic static List<int> EvenOddPalindrome(int n)\n{\n    int evenCount = 0;\n    int oddCount = 0;\n\n    for (int i = 1; i <= n; i++)\n    {\n        string num = i.ToString();\n        string reversedNum = new string(num.Reverse().ToArray());\n\n        if (num == reversedNum)\n        {\n            if (int.Parse(num) % 2 == 0)\n            {\n                evenCount++;\n            }\n            else\n            {\n                oddCount++;\n            }\n        }\n    }\n\n    return new List<int>() { evenCount, oddCount };\n}"}
{"task_id": "HumanEval_csharp/108", "language": "csharp", "completion": "c#\npublic static int CountNums(List<int> arr)\n{\n    return arr.Count(x => GetDigitSum(x) > 0);\n}\n\nprivate static int GetDigitSum(int x)\n{\n    int sum = 0;\n    bool isNegative = false;\n\n    if (x < 0)\n    {\n        isNegative = true;\n        x = -x;\n    }\n\n    while (x > 0)\n    {\n        sum += x % 10;\n        x /= 10;\n    }\n\n    return isNegative ? -sum : sum;\n}"}
{"task_id": "HumanEval_csharp/109", "language": "csharp", "completion": "C#\npublic static bool MoveOneBall(List<int> arr)\n{\n    if (arr.Count == 0)\n        return true;\n\n    int count = 0;\n\n    while (!arr.IsSorted())\n    {\n        arr.Reverse();\n        arr.RemoveAt(arr.Count - 1);\n        arr.Insert(0, arr[arr.Count - 1]);\n        arr.RemoveAt(arr.Count - 1);\n        count++;\n    }\n\n    return count % 2 == 0;\n}"}
{"task_id": "HumanEval_csharp/110", "language": "csharp", "completion": "C#\npublic static string Exchange(List<int> lst1, List<int> lst2)\n{\n    int evenCount = lst1.Count(x => x % 2 == 0);\n\n    while (evenCount < lst1.Count)\n    {\n        int minOdd = lst2.Min(x => x % 2 == 1 ? x : int.MaxValue);\n        int minEven = lst1.Min(x => x % 2 == 0 ? x : int.MaxValue);\n\n        if (minOdd < minEven)\n        {\n            lst1.Add(minOdd);\n            lst2.Remove(minOdd);\n        }\n        else\n        {\n            return \"NO\";\n        }\n\n        evenCount = lst1.Count(x => x % 2 == 0);\n    }\n\n    return \"YES\";\n}"}
{"task_id": "HumanEval_csharp/111", "language": "csharp", "completion": "C#\npublic static Dictionary<string, int> Histogram(string test)\n{\n    if (string.IsNullOrEmpty(test))\n        return new Dictionary<string, int>();\n\n    Dictionary<string, int> result = new Dictionary<string, int>();\n\n    string[] letters = test.Split(' ');\n\n    foreach (string letter in letters)\n    {\n        if (result.ContainsKey(letter))\n            result[letter]++;\n        else\n            result.Add(letter, 1);\n    }\n\n    int maxCount = result.Max(pair => pair.Value);\n\n    return result.Where(pair => pair.Value == maxCount).ToDictionary(pair => pair.Key, pair => pair.Value);\n}"}
{"task_id": "HumanEval_csharp/112", "language": "csharp", "completion": "c#\npublic static List<object> ReverseDelete(string s, string c)\n{\n    string result = \"\";\n    for (int i = 0; i < s.Length; i++)\n    {\n        if (!c.Contains(s[i].ToString()))\n        {\n            result += s[i];\n        }\n    }\n    bool isPalindrome = result.Equals(new string(result.Reverse().ToArray()));\n    return new List<object> { result, isPalindrome };\n}"}
{"task_id": "HumanEval_csharp/113", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> OddCount(List<string> lst)\n        {\n            return lst.Select(s => $\"the number of odd elements {s.Count(c => c % 2 != 0)}n the str{s.Length}ng {s} of the {lst.Count}nput.\").ToList();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/114", "language": "csharp", "completion": "public static int MinSubArraySum(List<int> nums)\n{\n    int minSum = int.MaxValue;\n    int currentSum = 0;\n\n    for (int i = 0; i < nums.Count; i++)\n    {\n        currentSum += nums[i];\n\n        if (currentSum < minSum)\n        {\n            minSum = currentSum;\n        }\n\n        if (currentSum > 0)\n        {\n            currentSum = 0;\n        }\n    }\n\n    return minSum;\n}"}
{"task_id": "HumanEval_csharp/115", "language": "csharp", "completion": "c#\npublic static int MaxFill(List<List<int>> grid, int capacity)\n{\n    int rows = grid.Count;\n    int cols = grid[0].Count;\n    int totalWater = grid.Sum(row => row.Sum());\n\n    if (totalWater == 0)\n        return 0;\n\n    int fills = 0;\n\n    while (totalWater > 0)\n    {\n        fills++;\n\n        for (int i = 0; i < rows; i++)\n        {\n            for (int j = 0; j < cols; j++)\n            {\n                if (grid[i][j] == 1 && totalWater >= capacity)\n                {\n                    grid[i][j] = 0;\n                    totalWater -= capacity;\n                }\n            }\n        }\n    }\n\n    return fills;\n}"}
{"task_id": "HumanEval_csharp/116", "language": "csharp", "completion": "c#\npublic static List<int> SortArray(List<int> arr)\n{\n    return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y == '1')).ThenBy(x => x).ToList();\n}"}
{"task_id": "HumanEval_csharp/117", "language": "csharp", "completion": "c#\npublic static List<string> SelectWords(string s, int n)\n{\n    if (string.IsNullOrEmpty(s))\n    {\n        return new List<string>();\n    }\n\n    string[] words = s.Split(' ');\n    List<string> result = new List<string>();\n\n    foreach (string word in words)\n    {\n        int consonantCount = word.Count(c => !char.IsWhiteSpace(c) && !char.IsPunctuation(c) && !char.IsDigit(c));\n\n        if (consonantCount == n)\n        {\n            result.Add(word);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/118", "language": "csharp", "completion": "C#\npublic static string GetClosestVowel(string word)\n{\n    List<char> vowels = new List<char>() { 'a', 'e', 'i', 'o', 'u' };\n    int count = 0;\n    char closestVowel = ' ';\n\n    for (int i = word.Length - 1; i >= 0; i--)\n    {\n        if (vowels.Contains(word[i]))\n        {\n            count++;\n            if (count == 2)\n            {\n                closestVowel = word[i];\n                break;\n            }\n        }\n        else if (char.IsLetter(word[i]))\n        {\n            count = 0;\n        }\n    }\n\n    return closestVowel.ToString();\n}"}
{"task_id": "HumanEval_csharp/119", "language": "csharp", "completion": "c#\npublic static string MatchParens(List<string> lst)\n{\n    int openCount = 0;\n    int closeCount = 0;\n\n    foreach (string str in lst)\n    {\n        if (str == \"(\")\n            openCount++;\n        else\n            closeCount++;\n    }\n\n    if (openCount != closeCount)\n        return \"No\";\n\n    return \"Yes\";\n}"}
{"task_id": "HumanEval_csharp/120", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class MaximumNumbers\n{\n    public static List<int> Maximum(List<int> arr, int k)\n    {\n        // Sort the array in descending order.\n        arr.Sort((x, y) => y.CompareTo(x));\n\n        // Return a sublist of length k.\n        return arr.Take(k).ToList();\n    }\n}"}
{"task_id": "HumanEval_csharp/121", "language": "csharp", "completion": "c#\npublic static int Solution(List<int> lst)\n{\n    return lst.Where((x, i) => i % 2 == 0 && x % 2 == 1).Sum();\n}"}
{"task_id": "HumanEval_csharp/122", "language": "csharp", "completion": "c#\npublic static int AddElements(List<int> arr, int k)\n{\n    int sum = 0;\n    for (int i = 0; i < k; i++)\n    {\n        if (arr[i] < 100)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_csharp/123", "language": "csharp", "completion": "C#\npublic static List<int> GetOddCollatz(int n)\n{\n    List<int> oddNumbers = new List<int>();\n    int currentNumber = n;\n\n    while (currentNumber != 1)\n    {\n        if (currentNumber % 2 != 0)\n        {\n            oddNumbers.Add(currentNumber);\n        }\n\n        if (currentNumber % 2 == 0)\n        {\n            currentNumber /= 2;\n        }\n        else\n        {\n            currentNumber = (3 * currentNumber) + 1;\n        }\n    }\n\n    oddNumbers.Sort();\n    return oddNumbers;\n}"}
{"task_id": "HumanEval_csharp/124", "language": "csharp", "completion": "c#\npublic static bool ValidDate(string date)\n{\n    if (string.IsNullOrEmpty(date))\n    {\n        return false;\n    }\n\n    // Regex pattern to validate the date format\n    Regex regex = new Regex(@\"^(\\d{2})-(\\d{2})-(\\d{4})$\");\n\n    if (!regex.IsMatch(date))\n    {\n        return false;\n    }\n\n    // Split the date string into month, day, and year\n    int month, day, year;\n    string[] parts = date.Split('-');\n    month = Convert.ToInt32(parts[0]);\n    day = Convert.ToInt32(parts[1]);\n    year = Convert.ToInt32(parts[2]);\n\n    // Validate the month\n    if (month < 1 || month > 12)\n    {\n        return false;\n    }\n\n    // Validate the day\n    switch (month)\n    {\n        case 2:\n            if (day < 1 || day > 29)\n            {\n                return false;\n            }\n            break;\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n            if (day < 1 || day > 30)\n            {\n                return false;\n            }\n            break;\n        default:\n            if (day < 1 || day > 31)\n            {\n                return false;\n            }\n            break;\n    }\n\n    // Date is valid\n    return true;\n}"}
{"task_id": "HumanEval_csharp/125", "language": "csharp", "completion": "public static object SplitWords(string txt)\n{\n    if (string.IsNullOrWhiteSpace(txt))\n        return new List<string>();\n\n    if (txt.Contains(\" \"))\n        return txt.Split(' ');\n\n    if (txt.Contains(\",\"))\n        return txt.Split(',');\n\n    return txt.Where((c, i) => (int)c % 2 != 0 && char.IsLower(c)).Count();\n}"}
{"task_id": "HumanEval_csharp/126", "language": "csharp", "completion": "c#\npublic static bool IsSorted(List<int> lst)\n{\n    for (int i = 1; i < lst.Count; i++)\n    {\n        if (lst[i] < lst[i - 1])\n        {\n            return false;\n        }\n\n        if (lst.GroupBy(x => x).Any(g => g.Count() > 1))\n        {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/127", "language": "csharp", "completion": "C#\npublic static string Intersection(List<int> interval1, List<int> interval2)\n{\n    // Check if the intervals intersect\n    if (interval1[0] > interval2[1] || interval2[0] > interval1[1])\n    {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    int start = Math.Max(interval1[0], interval2[0]);\n    int end = Math.Min(interval1[1], interval2[1]);\n    int length = end - start + 1;\n\n    // Check if the length is a prime number\n    if (IsPrime(length))\n    {\n        return \"YES\";\n    }\n    else\n    {\n        return \"NO\";\n    }\n}\n\n// Check if a number is prime\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1)\n    {\n        return false;\n    }\n    for (int i = 2; i <= Math.Sqrt(number); i++)\n    {\n        if (number % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_csharp/128", "language": "csharp", "completion": "C#\npublic static object ProdSigns(List<int> arr)\n{\n    if (arr.Count == 0)\n    {\n        return null;\n    }\n\n    int product = 1;\n    int sum = 0;\n\n    foreach (int num in arr)\n    {\n        product *= Math.Sign(num);\n        sum += Math.Abs(num);\n    }\n\n    return product * sum;\n}"}
{"task_id": "HumanEval_csharp/129", "language": "csharp", "completion": "C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> MinPath(List<List<int>> grid, int k)\n        {\n            int n = grid.Count;\n            int[][] dirs = new[] { new[] { -1, 0 }, new[] { 0, -1 }, new[] { 1, 0 }, new[] { 0, 1 } };\n            int[] minPath = new int[k];\n\n            for (int i = 0; i < n; i++)\n            {\n                for (int j = 0; j < n; j++)\n                {\n                    int[] path = BFS(grid, i, j, k);\n                    if (path.Length == k && Compare(path, minPath))\n                    {\n                        minPath = path;\n                    }\n                }\n            }\n\n            return minPath.ToList();\n        }\n\n        private static int[] BFS(List<List<int>> grid, int x, int y, int k)\n        {\n            int n = grid.Count;\n            bool[][] visited = new bool[n][n];\n            int[] path = new int[k];\n\n            Queue<int[]> queue = new Queue<int[]>();\n            queue.Enqueue(new[] { x, y, 0 });\n\n            while (queue.Count > 0)\n            {\n                int[] curr = queue.Dequeue();\n                int i = curr[0];\n                int j = curr[1];\n                int dist = curr[2];\n\n                if (dist == k)\n                {\n                    return path;\n                }\n\n                if (!visited[i][j])\n                {\n                    visited[i][j] = true;\n                    path[dist] = grid[i][j];\n\n                    for (int d = 0; d < 4; d++)\n                    {\n                        int nx = i + dirs[d][0];\n                        int ny = j + dirs[d][1];\n\n                        if (nx >= 0 && nx < n && ny >= 0 && ny < n)\n                        {\n                            queue.Enqueue(new[] { nx, ny, dist + 1 });\n                        }\n                    }\n                }\n            }\n\n            return new int[0];\n        }\n\n        private static bool Compare(int[] path1, int[] path2)\n        {\n            for (int i = 0; i < k; i++)\n            {\n                if (path1[i] > path2[i])\n                {\n                    return false;\n                }\n                else if (path1[i] < path2[i])\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/130", "language": "csharp", "completion": "c#\npublic static List<object> Tri(int n)\n{\n    List<object> result = new List<object>();\n    result.Add(1);\n\n    if (n == 0)\n        return result;\n\n    result.Add(3);\n\n    if (n == 1)\n        return result;\n\n    result.Add(2);\n\n    for (int i = 3; i <= n; i++)\n    {\n        if (i % 2 == 0)\n            result.Add(1 + i / 2);\n        else\n            result.Add(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/131", "language": "csharp", "completion": "c#\npublic static int Digits(int n)\n{\n    int product = 1;\n\n    while (n > 0)\n    {\n        int digit = n % 10;\n        if (digit % 2 != 0)\n        {\n            product *= digit;\n        }\n\n        n /= 10;\n    }\n\n    return product;\n}"}
{"task_id": "HumanEval_csharp/132", "language": "csharp", "completion": "c#\npublic static bool IsNested(string str)\n{\n    int balance = 0;\n    for (int i = 0; i < str.Length; i++)\n    {\n        if (str[i] == '[')\n        {\n            balance++;\n        }\n        else if (str[i] == ']')\n        {\n            balance--;\n        }\n\n        if (balance < 0)\n        {\n            return false;\n        }\n    }\n\n    return balance == 0;\n}"}
{"task_id": "HumanEval_csharp/133", "language": "csharp", "completion": "c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int SumSquares(List<object> lst)\n    {\n        return lst.Select(x => (int)Math.Ceiling((double)x))\n                 .Select(x => x * x)\n                 .Sum();\n    }\n}"}
{"task_id": "HumanEval_csharp/134", "language": "csharp", "completion": "C#\npublic static bool CheckIfLastCharIsALetter(string txt)\n{\n    if (string.IsNullOrEmpty(txt))\n        return false;\n\n    // Remove trailing spaces\n    txt = txt.TrimEnd();\n\n    // Check if the last character is alphabetical and not part of a word\n    return char.IsLetter(txt[txt.Length - 1]) && !txt.EndsWith(\" \");\n}"}
{"task_id": "HumanEval_csharp/135", "language": "csharp", "completion": "c#\npublic static int CanArrange(List<int> arr)\n{\n    for (int i = 1; i < arr.Count; i++)\n    {\n        if (arr[i] <= arr[i - 1])\n        {\n            return i - 1;\n        }\n    }\n\n    return -1;\n}"}
{"task_id": "HumanEval_csharp/136", "language": "csharp", "completion": "C#\npublic static List<object> LargestSmallestIntegers(List<int> lst)\n{\n    int? largestNegative = null;\n    int? smallestPositive = null;\n\n    foreach (int num in lst)\n    {\n        if (num < 0 && (largestNegative == null || num > largestNegative))\n        {\n            largestNegative = num;\n        }\n\n        if (num > 0 && (smallestPositive == null || num < smallestPositive))\n        {\n            smallestPositive = num;\n        }\n    }\n\n    return new List<object> { largestNegative, smallestPositive };\n}"}
{"task_id": "HumanEval_csharp/137", "language": "csharp", "completion": "c#\npublic static object CompareOne(object a, object b)\n{\n    if (a.GetType() == b.GetType())\n    {\n        if (a.Equals(b))\n        {\n            return null;\n        }\n        else if (a is float || a is double)\n        {\n            return a.ToString().CompareTo(b.ToString()) > 0 ? a : b;\n        }\n        else\n        {\n            return a.ToString().CompareTo(b.ToString()) > 0 ? a : b;\n        }\n    }\n    else\n    {\n        if (a is float || a is double)\n        {\n            return Convert.ToDouble(a) > Convert.ToDouble(b) ? a : b;\n        }\n        else\n        {\n            return Convert.ToInt32(a) > Convert.ToInt32(b) ? a : b;\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/138", "language": "csharp", "completion": "c#\npublic static bool IsEqualToSumEven(int n)\n{\n    for (int i = 2; i <= n - 2; i += 2)\n    {\n        int remaining = n - i;\n        if (remaining % 4 == 0)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_csharp/139", "language": "csharp", "completion": "c#\npublic static int SpecialFactorial(int n)\n{\n    if (n <= 0)\n    {\n        return 1;\n    }\n\n    int result = n;\n\n    for (int i = n - 1; i >= 1; i--)\n    {\n        result *= i;\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/140", "language": "csharp", "completion": "c#\npublic static string FixSpaces(string text)\n{\n    string replaced = Regex.Replace(text, @\"\\s+\", \"_\");\n    return Regex.Replace(replaced, @\"_{2,}\", \"-\");\n}"}
{"task_id": "HumanEval_csharp/141", "language": "csharp", "completion": "c#\npublic static string FileNameCheck(string file_name)\n{\n    string regexPattern = @\"^[a-zA-Z][\\w\\.]*\\.(txt|exe|dll)$\";\n    return Regex.IsMatch(file_name, regexPattern) ? \"Yes\" : \"No\";\n}"}
{"task_id": "HumanEval_csharp/142", "language": "csharp", "completion": "C#\npublic static int SumSquares(List<int> lst)\n{\n    return lst.Select(x => x * x).Sum();\n}"}
{"task_id": "HumanEval_csharp/143", "language": "csharp", "completion": "C#\npublic static string WordsInSentence(string sentence)\n{\n    string[] words = sentence.Split(' ');\n    List<string> primeWords = new List<string>();\n\n    foreach (string word in words)\n    {\n        if (IsPrime(word.Length))\n        {\n            primeWords.Add(word);\n        }\n    }\n\n    return string.Join(\" \", primeWords);\n}\n\npublic static bool IsPrime(int n)\n{\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\n    int i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n        i += 6;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_csharp/144", "language": "csharp", "completion": "C#\npublic static bool Simplify(string x, string n)\n{\n    // Parse the fractions into fractions\n    Fraction f1 = new Fraction(x);\n    Fraction f2 = new Fraction(n);\n\n    // Multiply the fractions\n    Fraction product = f1 * f2;\n\n    // Check if the product is a whole number\n    return product.IsWholeNumber;\n}\n\n// Helper class to represent a fraction\npublic class Fraction\n{\n    public int Numerator { get; set; }\n    public int Denominator { get; set; }\n\n    public Fraction(string fractionString)\n    {\n        string[] parts = fractionString.Split('/');\n        Numerator = int.Parse(parts[0]);\n        Denominator = int.Parse(parts[1]);\n    }\n\n    public Fraction(int numerator, int denominator)\n    {\n        Numerator = numerator;\n        Denominator = denominator;\n    }\n\n    public Fraction Multiply(Fraction other)\n    {\n        return new Fraction(Numerator * other.Numerator, Denominator * other.Denominator);\n    }\n\n    public bool IsWholeNumber\n    {\n        get { return Numerator % Denominator == 0; }\n    }\n}"}
{"task_id": "HumanEval_csharp/145", "language": "csharp", "completion": "c#\npublic static List<int> OrderByPoints(List<int> nums)\n{\n    nums.Sort((x, y) =>\n    {\n        int sumX = GetSumOfDigits(x);\n        int sumY = GetSumOfDigits(y);\n\n        if (sumX == sumY)\n        {\n            return nums.IndexOf(x).CompareTo(nums.IndexOf(y));\n        }\n\n        return sumX.CompareTo(sumY);\n    });\n\n    return nums;\n}\n\nprivate static int GetSumOfDigits(int num)\n{\n    int sum = 0;\n    while (num != 0)\n    {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_csharp/146", "language": "csharp", "completion": "C#\npublic static int SpecialFilter(List<int> nums)\n{\n    int count = 0;\n\n    foreach (int num in nums)\n    {\n        if (num > 10 && num % 2 != 0 && (num / 10) % 2 != 0)\n        {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_csharp/147", "language": "csharp", "completion": "c#\npublic class Program\n{\n    public static int GetMaxTriples(int n)\n    {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++)\n        {\n            a[i] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = i + 1; j < n; j++)\n            {\n                for (int k = j + 1; k < n; k++)\n                {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_csharp/148", "language": "csharp", "completion": "c#\npublic static List<string> Bf(string planet1, string planet2)\n{\n    string[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\n    if (!planets.Contains(planet1) || !planets.Contains(planet2))\n    {\n        return new List<string>();\n    }\n\n    int index1 = planets.ToList().IndexOf(planet1);\n    int index2 = planets.ToList().IndexOf(planet2);\n\n    return planets.Skip(Math.Min(index1, index2) + 1).Take(Math.Abs(index1 - index2)).ToList();\n}"}
{"task_id": "HumanEval_csharp/149", "language": "csharp", "completion": "c#\npublic static List<string> SortedListSum(List<string> lst)\n{\n    // Delete odd-length strings\n    lst.RemoveAll(x => x.Length % 2 != 0);\n\n    // Sort the list by length (ascending) and then alphabetically\n    lst.Sort((x, y) =>\n    {\n        if (x.Length == y.Length)\n            return x.CompareTo(y);\n        else\n            return x.Length.CompareTo(y.Length);\n    });\n\n    return lst;\n}"}
{"task_id": "HumanEval_csharp/150", "language": "csharp", "completion": "c#\npublic static int XOrY(int n, int x, int y)\n{\n    bool isPrime = true;\n\n    for (int i = 2; i <= n / 2; i++)\n    {\n        if (n % i == 0)\n        {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? x : y;\n}"}
{"task_id": "HumanEval_csharp/151", "language": "csharp", "completion": "C#\npublic static int DoubleTheDifference(List<object> lst)\n{\n    int sum = 0;\n\n    foreach (object item in lst)\n    {\n        if (int.TryParse(item.ToString(), out int number))\n        {\n            if (number > 0 && number % 2 != 0)\n            {\n                sum += number * number;\n            }\n        }\n    }\n\n    return sum;\n}"}
{"task_id": "HumanEval_csharp/152", "language": "csharp", "completion": "C#\npublic static List<int> Compare(List<int> game, List<int> guess)\n{\n    List<int> result = new List<int>();\n\n    for (int i = 0; i < game.Count; i++)\n    {\n        if (game[i] == guess[i])\n        {\n            result.Add(0);\n        }\n        else\n        {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/153", "language": "csharp", "completion": "c#\npublic static string StrongestExtension(string class_name, List<string> extensions)\n{\n    // Calculate the strength of each extension\n    var extensionStrengths = extensions.Select(x =>\n    {\n        int cap = x.Count(char.IsUpper);\n        int sm = x.Count(char.IsLower);\n        return new { Name = x, Strength = cap - sm };\n    });\n\n    // Find the extension with the highest strength\n    var strongestExtension = extensionStrengths.OrderByDescending(x => x.Strength).FirstOrDefault();\n\n    // Return the class name and the strongest extension name\n    return class_name + \".\" + strongestExtension?.Name;\n}"}
{"task_id": "HumanEval_csharp/154", "language": "csharp", "completion": "c#\npublic static bool CycpatternCheck(string a, string b)\n{\n    return a.Contains(b) || Regex.IsMatch(a, b + \".*\" + b);\n}"}
{"task_id": "HumanEval_csharp/155", "language": "csharp", "completion": "C#\npublic static List<int> EvenOddCount(int num)\n{\n    int evenCount = 0;\n    int oddCount = 0;\n\n    while (num > 0)\n    {\n        int digit = num % 10;\n        if (digit % 2 == 0)\n        {\n            evenCount++;\n        }\n        else\n        {\n            oddCount++;\n        }\n        num /= 10;\n    }\n\n    return new List<int> { evenCount, oddCount };\n}"}
{"task_id": "HumanEval_csharp/156", "language": "csharp", "completion": "C#\npublic static string IntToMiniRoman(int number)\n{\n    if (number < 1 || number > 1000)\n        throw new ArgumentOutOfRangeException(\"number\", \"Number must be between 1 and 1000.\");\n\n    string[] romanNumerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n    int[] arabicValues = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < romanNumerals.Length; i++)\n    {\n        while (number >= arabicValues[i])\n        {\n            sb.Append(romanNumerals[i]);\n            number -= arabicValues[i];\n        }\n    }\n\n    return sb.ToString().ToLower();\n}"}
{"task_id": "HumanEval_csharp/157", "language": "csharp", "completion": "public static bool RightAngleTriangle(int a, int b, int c)\n{\n    // Check if the three sides can form a triangle.\n    if (a + b <= c || a + c <= b || b + c <= a)\n    {\n        return false;\n    }\n\n    // Check if the Pythagorean theorem holds.\n    return a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a;\n}"}
{"task_id": "HumanEval_csharp/158", "language": "csharp", "completion": "c#\npublic static string FindMax(List<string> words)\n{\n    return words.OrderByDescending(w => w.Distinct().Count()).ThenBy(w => w).First();\n}"}
{"task_id": "HumanEval_csharp/159", "language": "csharp", "completion": "C#\npublic static List<int> Eat(int number, int need, int remaining)\n{\n    int totalCarrots = number + remaining;\n    int carrotsToEat = need - number;\n\n    if (carrotsToEat > remaining)\n    {\n        carrotsToEat = remaining;\n    }\n\n    int newNumber = number + carrotsToEat;\n    int newRemaining = remaining - carrotsToEat;\n\n    return new List<int>() { newNumber, newRemaining };\n}"}
{"task_id": "HumanEval_csharp/160", "language": "csharp", "completion": "C#\npublic static int DoAlgebra(List<string> operator, List<int> operand)\n{\n    int result = operand[0];\n\n    for (int i = 0; i < operator.Count; i++)\n    {\n        switch (operator[i])\n        {\n            case \"+\":\n                result += operand[i + 1];\n                break;\n            case \"-\":\n                result -= operand[i + 1];\n                break;\n            case \"*\":\n                result *= operand[i + 1];\n                break;\n            case \"//\":\n                result /= operand[i + 1];\n                break;\n            case \"**\":\n                result = (int)Math.Pow(result, operand[i + 1]);\n                break;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_csharp/161", "language": "csharp", "completion": "c#\npublic static string Solve(string s)\n{\n    char[] chars = s.ToCharArray();\n    for (int i = 0; i < chars.Length; i++)\n    {\n        if (char.IsLetter(chars[i]))\n        {\n            chars[i] = char.ToUpper(chars[i]) ? char.ToLower(chars[i]) : char.ToUpper(chars[i]);\n        }\n    }\n    if (!chars.Any(c => char.IsLetter(c)))\n    {\n        Array.Reverse(chars);\n    }\n    return new string(chars);\n}"}
{"task_id": "HumanEval_csharp/162", "language": "csharp", "completion": "c#\nusing System;\nusing System.Security.Cryptography;\n\npublic class Program\n{\n    public static object StringToMd5(string text)\n    {\n        if (string.IsNullOrEmpty(text))\n        {\n            return null;\n        }\n\n        using (var md5 = MD5.Create())\n        {\n            byte[] bytes = md5.ComputeHash(System.Text.Encoding.UTF8.GetBytes(text));\n            return BitConverter.ToString(bytes).Replace(\"-\", \"\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/163", "language": "csharp", "completion": "C#\npublic static List<int> GenerateIntegers(int a, int b)\n{\n    List<int> result = new List<int>();\n    int lower = Math.Min(a, b);\n    int upper = Math.Max(a, b);\n\n    for (int i = lower; i <= upper; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result.Add(i);\n        }\n    }\n\n    return result;\n}"}

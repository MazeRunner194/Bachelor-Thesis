{"task_id": "HumanEval_kotlin/0", "language": "kotlin", "completion": "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    for (i in 0 until numbers.size - 1) {\n        for (j in i + 1 until numbers.size) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/1", "language": "kotlin", "completion": "fun separateParenGroups(parenString: String): List<String> {\n    val result = mutableListOf<String>()\n    val currentString = StringBuilder()\n    var openParentheses = 0\n\n    for (char in parenString) {\n        if (char == '(') {\n            openParentheses++\n            currentString.append(char)\n        } else if (char == ')') {\n            openParentheses--\n            currentString.append(char)\n\n            if (openParentheses == 0) {\n                result.add(currentString.toString())\n                currentString.clear()\n            }\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/2", "language": "kotlin", "completion": "fun truncateNumber(number: Double): Double {\n    return number - number.toInt()\n}"}
{"task_id": "HumanEval_kotlin/3", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0\n\n    for (operation in operations) {\n        when (operation) {\n            is Int -> {\n                balance += operation\n                if (balance < 0) {\n                    return true\n                }\n            }\n        }\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/4", "language": "kotlin", "completion": "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    val mean = numbers.average()\n    val absDifferences = numbers.map { Math.abs(it - mean) }\n    return absDifferences.average()\n}"}
{"task_id": "HumanEval_kotlin/5", "language": "kotlin", "completion": "fun intersperse(numbers : List<Any>, delimeter : Int) : List<Any> {\n    val result = mutableListOf<Any>()\n    for (i in numbers.indices) {\n        result.add(numbers[i])\n        if (i < numbers.lastIndex) {\n            result.add(delimeter)\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/6", "language": "kotlin", "completion": "fun parseNestedParens(parenString: String): List<Int> {\n    val depths = mutableListOf<Int>()\n    var currentDepth = 0\n\n    parenString.forEach { char ->\n        when (char) {\n            '(' -> currentDepth++\n            ')' -> currentDepth--\n        }\n        depths.add(currentDepth)\n    }\n\n    return depths\n}"}
{"task_id": "HumanEval_kotlin/7", "language": "kotlin", "completion": "fun filterBySubstring(strings: List<String>, substring: String): List<String> {\n    return strings.filter { it.contains(substring) }\n}"}
{"task_id": "HumanEval_kotlin/8", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): List<Int> {\n    var sum = 0\n    var product = 1\n    for (number in numbers) {\n        sum += number\n        product *= number\n    }\n    return listOf(sum, product)\n}"}
{"task_id": "HumanEval_kotlin/9", "language": "kotlin", "completion": "fun rollingMax(numbers: List<Any>): List<Any> {\n    val result = mutableListOf<Any>()\n    var currentMax = numbers.first()\n    for (number in numbers) {\n        if (number > currentMax) {\n            currentMax = number\n        }\n        result.add(currentMax)\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/10", "language": "kotlin", "completion": "fun makePalindrome(string: String): String {\n    val length = string.length\n    if (length <= 1) return string\n\n    // Find the longest postfix of the string that is a palindrome\n    var end = length - 1\n    var start = end\n    while (start > 0 && string[start] == string[end]) {\n        start--\n        end++\n    }\n\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    val prefix = string.substring(0, start + 1)\n    val suffix = string.substring(start + 1, end + 1)\n    return prefix + suffix.reversed()\n}"}
{"task_id": "HumanEval_kotlin/11", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    val result = StringBuilder()\n\n    for (i in 0 until a.length) {\n        result.append(if (a[i] == b[i]) '0' else '1')\n    }\n\n    return result.toString()\n}"}
{"task_id": "HumanEval_kotlin/12", "language": "kotlin", "completion": "fun longest(strings: List<String>): String? {\n    if (strings.isEmpty()) {\n        return null\n    }\n    var longest = strings[0]\n    for (i in 1 until strings.size) {\n        if (strings[i].length > longest.length) {\n            longest = strings[i]\n        }\n    }\n    return longest\n}"}
{"task_id": "HumanEval_kotlin/13", "language": "kotlin", "completion": "fun greatestCommonDivisor(a : Int, b : Int) : Int {\n    var firstNumber = a\n    var secondNumber = b\n    while (firstNumber != secondNumber) {\n        if (firstNumber > secondNumber) {\n            firstNumber -= secondNumber\n        } else {\n            secondNumber -= firstNumber\n        }\n    }\n    return firstNumber\n}"}
{"task_id": "HumanEval_kotlin/14", "language": "kotlin", "completion": "fun allPrefixes(string: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 0 until string.length) {\n        prefixes.add(string.substring(0, i + 1))\n    }\n    return prefixes\n}"}
{"task_id": "HumanEval_kotlin/15", "language": "kotlin", "completion": "fun stringSequence(n : Int) : String {\n    return (0..n).joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/16", "language": "kotlin", "completion": "fun countDistinctCharacters(string: String): Int {\n    return string.lowercase().toCharArray().distinct().size\n}"}
{"task_id": "HumanEval_kotlin/17", "language": "kotlin", "completion": "fun parseMusic(musicString: String): List<Int> {\n    val beatsPerNote = mutableListOf<Int>()\n    val notes = musicString.split(\" \")\n\n    for (note in notes) {\n        when (note) {\n            \"o\" -> beatsPerNote.add(4)\n            \"o|\" -> beatsPerNote.add(2)\n            \".|\" -> beatsPerNote.add(1)\n        }\n    }\n\n    return beatsPerNote\n}"}
{"task_id": "HumanEval_kotlin/18", "language": "kotlin", "completion": "fun howManyTimes(string: String, substring: String): Int {\n    var count = 0\n    var start = 0\n    while (start <= string.lastIndex) {\n        val index = string.indexOf(substring, start)\n        if (index != -1) {\n            count++\n            start = index + 1\n        } else {\n            start = string.lastIndex + 1\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/19", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numberWords = numbers.split(\" \")\n    val sortedNumbers = numberWords.sortedBy { it }\n    return sortedNumbers.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/20", "language": "kotlin", "completion": "fun findClosestElements(numbers: List<Double>): List<Double> {\n    if (numbers.size < 2) {\n        throw IllegalArgumentException(\"List must have at least two elements.\")\n    }\n\n    numbers.sort()\n\n    var minDifference = Double.MAX_VALUE\n    var closestPair = mutableListOf<Double>()\n\n    for (i in 1 until numbers.size) {\n        val difference = numbers[i] - numbers[i - 1]\n        if (difference < minDifference) {\n            minDifference = difference\n            closestPair.clear()\n            closestPair.add(numbers[i - 1])\n            closestPair.add(numbers[i])\n        }\n    }\n\n    return closestPair\n}"}
{"task_id": "HumanEval_kotlin/21", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    if (numbers.size < 2) {\n        throw IllegalArgumentException(\"List must have at least two elements\")\n    }\n\n    val min = numbers.minOrNull()!!\n    val max = numbers.maxOrNull()!!\n\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "HumanEval_kotlin/22", "language": "kotlin", "completion": "fun filterIntegers(values: List<Any>): List<Any> {\n    return values.filter { it is Int }\n}"}
{"task_id": "HumanEval_kotlin/23", "language": "kotlin", "completion": "fun strlen(string: String): Int {\n    return string.length\n}"}
{"task_id": "HumanEval_kotlin/24", "language": "kotlin", "completion": "fun largestDivisor(n: Int): Int {\n    var divisor = n / 2\n    while (divisor > 1) {\n        if (n % divisor == 0) {\n            return divisor\n        }\n        divisor--\n    }\n    return 1\n}"}
{"task_id": "HumanEval_kotlin/25", "language": "kotlin", "completion": "fun factorize(n: Int): List<Int> {\n    val factors = mutableListOf<Int>()\n    var num = n\n\n    var divisor = 2\n    while (divisor * divisor <= num) {\n        while (num % divisor == 0) {\n            factors.add(divisor)\n            num /= divisor\n        }\n        divisor++\n    }\n\n    if (num > 1) {\n        factors.add(num)\n    }\n\n    return factors\n}"}
{"task_id": "HumanEval_kotlin/26", "language": "kotlin", "completion": "fun removeDuplicates(numbers: List<Any>): List<Any> {\n    val seen = HashSet<Any>()\n    val result = ArrayList<Any>()\n\n    for (number in numbers) {\n        if (seen.add(number)) {\n            result.add(number)\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/27", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map {\n        if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase()\n    }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/28", "language": "kotlin", "completion": "fun concatenate(strings: List<Any>): String {\n    return strings.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/29", "language": "kotlin", "completion": "fun filterByPrefix(strings: List<String>, prefix: String): List<String> {\n    return strings.filter { it.startsWith(prefix) }\n}"}
{"task_id": "HumanEval_kotlin/30", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Any> {\n    return l.filter { it is Int && it > 0 }\n}"}
{"task_id": "HumanEval_kotlin/31", "language": "kotlin", "completion": "fun isPrime(n : Int) : Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/33", "language": "kotlin", "completion": "fun sortThird(l : List<Int>) : List<Int> {\n    val result = l.toMutableList()\n\n    result.filterIndexed { index, _ -> index % 3 == 0 }\n        .sorted()\n        .forEachIndexed { index, value ->\n            result[index * 3] = value\n        }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/34", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.toSet().toList()\n}"}
{"task_id": "HumanEval_kotlin/35", "language": "kotlin", "completion": "fun maxElement(l : List<Int>) : Int {\n    var max = l[0]\n    for (i in 1 until l.size) {\n        if (l[i] > max) {\n            max = l[i]\n        }\n    }\n    return max\n}"}
{"task_id": "HumanEval_kotlin/36", "language": "kotlin", "completion": "fun fizzBuzz(n: Int): Int {\n    var count = 0\n    for (i in 1 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count += i.toString().count { it == '7' }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/37", "language": "kotlin", "completion": "fun sortEven(l : List<Int>) : List<Int> {\n    val evenIndices = l.indices.filter { it % 2 == 0 }\n    val oddIndices = l.indices.filter { it % 2 != 0 }\n    val sortedEvenElements = l.filterIndexed { index, _ -> index in evenIndices }.sorted()\n    val result = mutableListOf<Int>()\n    oddIndices.forEach { result.add(l[it]) }\n    sortedEvenElements.forEach { result.add(it) }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/39", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num < 2) return false\n    for (i in 2 until num) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun fib(n: Int): Int {\n    if (n <= 1) return n\n    var a = 0\n    var b = 1\n    var result = 0\n    for (i in 2..n) {\n        result = a + b\n        a = b\n        b = result\n    }\n    return result\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var num = 2\n    while (count < n) {\n        if (isPrime(fib(num)) && fib(num) != 1) {\n            count++\n        }\n        num++\n    }\n    return fib(num - 1)\n}"}
{"task_id": "HumanEval_kotlin/40", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    val set = HashSet<Int>()\n\n    for (i in l.indices) {\n        for (j in i + 1 until l.size) {\n            val sum = l[i] + l[j]\n            if (set.contains(-sum)) {\n                return true\n            }\n            set.add(sum)\n        }\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/41", "language": "kotlin", "completion": "fun carRaceCollision(n: Int): Int {\n    var count = 0\n    val leftCars = MutableList(n) { it }\n    val rightCars = MutableList(n) { n - it - 1 }\n\n    while (leftCars.isNotEmpty() && rightCars.isNotEmpty()) {\n        val leftMostCar = leftCars.first()\n        val rightMostCar = rightCars.last()\n\n        if (leftMostCar == rightMostCar) {\n            count++\n            leftCars.removeFirst()\n            rightCars.removeLast()\n        } else if (leftMostCar < rightMostCar) {\n            leftCars.removeFirst()\n        } else {\n            rightCars.removeLast()\n        }\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/42", "language": "kotlin", "completion": "fun incrList(l: List<Any>): List<Any> {\n    return l.map { it as Int + 1 }\n}"}
{"task_id": "HumanEval_kotlin/43", "language": "kotlin", "completion": "fun pairsSumToZero(l : List<Int>) : Boolean {\n    val set = HashSet<Int>()\n    for (num in l) {\n        if (set.contains(-num)) {\n            return true\n        }\n        set.add(num)\n    }\n    return false\n}"}
{"task_id": "HumanEval_kotlin/44", "language": "kotlin", "completion": "fun changeBase(x: Int, base: Int): String {\n    if (base < 2) {\n        throw IllegalArgumentException(\"Base must be greater than or equal to 2.\")\n    }\n\n    var num = x\n    var result = StringBuilder()\n\n    while (num > 0) {\n        val digit = num % base\n        result.insert(0, digit)\n        num /= base\n    }\n\n    if (result.isEmpty()) {\n        result.append(0)\n    }\n\n    return result.toString()\n}"}
{"task_id": "HumanEval_kotlin/45", "language": "kotlin", "completion": "fun triangleArea(a: Int, h: Int): Double {\n    return 0.5 * a * h\n}"}
{"task_id": "HumanEval_kotlin/46", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n <= 1) return 0\n    if (n <= 3) return 2\n    val arr = IntArray(n + 1)\n    arr[0] = 0\n    arr[1] = 0\n    arr[2] = 2\n    arr[3] = 0\n    for (i in 4 until n + 1) {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]\n    }\n    return arr[n]\n}"}
{"task_id": "HumanEval_kotlin/47", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0) {\n        (sortedList[size / 2] + sortedList[size / 2 - 1]) / 2.0\n    } else {\n        sortedList[size / 2]\n    }\n}"}
{"task_id": "HumanEval_kotlin/48", "language": "kotlin", "completion": "fun isPalindrome(text : String) : Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}"}
{"task_id": "HumanEval_kotlin/49", "language": "kotlin", "completion": "fun modp(n: Int, p: Int): Int {\n    var res = 1\n    var curr = n\n    while (curr > 0) {\n        if (curr % 2 == 1) {\n            res = (res * n) % p\n        }\n        curr /= 2\n        n = (n * n) % p\n    }\n    return res\n}"}
{"task_id": "HumanEval_kotlin/51", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    val vowels = listOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    return text.filterNot { it in vowels }\n}"}
{"task_id": "HumanEval_kotlin/52", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "HumanEval_kotlin/53", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n\n// Example usage:\nprintln(add(2, 3)) // Output: 5\nprintln(add(5, 7)) // Output: 12"}
{"task_id": "HumanEval_kotlin/54", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    val charCount = IntArray(26)\n\n    for (c in s0) {\n        charCount[c - 'a']++\n    }\n\n    for (c in s1) {\n        charCount[c - 'a']--\n    }\n\n    for (count in charCount) {\n        if (count != 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/55", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    return when (n) {\n        0 -> 0\n        1 -> 1\n        else -> fib(n - 1) + fib(n - 2)\n    }\n}"}
{"task_id": "HumanEval_kotlin/56", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    val stack = mutableListOf<Char>()\n\n    for (c in brackets) {\n        if (c == '<') {\n            stack.add(c)\n        } else if (c == '>') {\n            if (stack.isEmpty()) {\n                return false\n            }\n            stack.removeLast()\n        }\n    }\n\n    return stack.isEmpty()\n}"}
{"task_id": "HumanEval_kotlin/57", "language": "kotlin", "completion": "fun monotonic(l: List<Int>): Boolean {\n    if (l.isEmpty() || l.size == 1) return true\n\n    val isAscending = l[1] > l[0]\n    for (i in 2 until l.size) {\n        if (isAscending && l[i] < l[i - 1]) return false\n        if (!isAscending && l[i] > l[i - 1]) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/58", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Any>): List<Any> {\n    return l1.intersect(l2.filterIsInstance<Int>()).toList()\n}"}
{"task_id": "HumanEval_kotlin/59", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var factor = 2\n    while (factor * factor <= num) {\n        while (num % factor == 0) {\n            num /= factor\n        }\n        factor++\n    }\n    return if (num > 1) num else factor - 1\n}"}
{"task_id": "HumanEval_kotlin/60", "language": "kotlin", "completion": "fun sumToN(n : Int) : Int {\n    return n * (n + 1) / 2\n}"}
{"task_id": "HumanEval_kotlin/61", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    var count = 0\n    for (bracket in brackets) {\n        if (bracket == '(') {\n            count++\n        } else if (bracket == ')') {\n            count--\n        }\n        if (count < 0) {\n            return false\n        }\n    }\n    return count == 0\n}"}
{"task_id": "HumanEval_kotlin/62", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Any> {\n    val result = mutableListOf<Any>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/63", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    val fib = IntArray(n + 1)\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 1\n\n    for (i in 3..n) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n    }\n\n    return fib[n]\n}"}
{"task_id": "HumanEval_kotlin/64", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'y')\n    var count = 0\n\n    for (i in s.indices) {\n        if (vowels.contains(s[i].lowercaseChar())) {\n            count++\n        }\n    }\n\n    // Check for 'y' at the end of the word\n    if (s.endsWith('y')) {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/65", "language": "kotlin", "completion": "fun circularShift(x : Int, shift : Int) : String {\n    val str = x.toString()\n    val len = str.length\n    val newPos = len - shift % len\n    val reversed = str.reversed()\n    return reversed.substring(newPos) + reversed.substring(0, newPos)\n}"}
{"task_id": "HumanEval_kotlin/66", "language": "kotlin", "completion": "fun digitsum(s: String): Int {\n    var sum = 0\n    for (c in s) {\n        if (c.isUpperCase()) {\n            sum += c.code\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/67", "language": "kotlin", "completion": "fun fruitDistribution(s: String, n: Int): Int {\n    val regex = Regex(\"\"\"(\\d+) apples and (\\d+) oranges\"\"\")\n    val matchResult = regex.matchEntire(s)\n    val apples = matchResult?.groups?.get(1)?.value?.toInt() ?: 0\n    val oranges = matchResult?.groups?.get(2)?.value?.toInt() ?: 0\n    return n - apples - oranges\n}"}
{"task_id": "HumanEval_kotlin/68", "language": "kotlin", "completion": "fun pluck(nodes: List<Int>): List<Int> {\n    if (nodes.isEmpty()) return emptyList()\n\n    var minEvenValue = Int.MAX_VALUE\n    var minEvenIndex = -1\n\n    for ((index, node) in nodes.withIndex()) {\n        if (node % 2 == 0 && node <= minEvenValue) {\n            minEvenValue = node\n            minEvenIndex = index\n        }\n    }\n\n    return if (minEvenIndex != -1) listOf(minEvenValue, minEvenIndex) else emptyList()\n}"}
{"task_id": "HumanEval_kotlin/69", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    val freqMap = mutableMapOf<Int, Int>()\n    for (num in lst) {\n        freqMap[num] = freqMap.getOrDefault(num, 0) + 1\n    }\n\n    for (num in lst.reversed()) {\n        if (freqMap[num]!! >= num) {\n            return num\n        }\n    }\n\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/70", "language": "kotlin", "completion": "fun strangeSortList(lst : List<Any>) : List<Any> {\n    if(lst.isEmpty()) return lst\n    val sortedList = lst.sorted().toMutableList()\n    val result = mutableListOf<Any>()\n\n    while(sortedList.isNotEmpty()) {\n        result.add(sortedList.first())\n        sortedList.removeFirst()\n        result.add(sortedList.last())\n        sortedList.removeLast()\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/71", "language": "kotlin", "completion": "fun triangleArea(a : Int, b : Int, c : Int) : Any {\n    if (a + b > c && b + c > a && c + a > b) {\n        val s = (a + b + c) / 2\n        return String.format(\"%.2f\", Math.sqrt(s * (s - a) * (s - b) * (s - c)))\n    } else {\n        return -1\n    }\n}"}
{"task_id": "HumanEval_kotlin/72", "language": "kotlin", "completion": "fun isPalindrome(list: List<Int>): Boolean {\n    val size = list.size\n    for (i in 0 until size / 2) {\n        if (list[i] != list[size - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfun willItFly(q: List<Int>, w: Int): Boolean {\n    val sum = q.sum()\n    if (sum > w) {\n        return false\n    }\n    return isPalindrome(q)\n}"}
{"task_id": "HumanEval_kotlin/73", "language": "kotlin", "completion": "fun smallestChange(arr: List<Int>): Int {\n    val n = arr.size\n    val reversed = arr.reversed()\n\n    var count = 0\n    for (i in 0 until n) {\n        if (arr[i] != reversed[i]) {\n            count++\n        }\n    }\n\n    return count / 2\n}"}
{"task_id": "HumanEval_kotlin/74", "language": "kotlin", "completion": "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    val total1 = lst1.sumOf { it.length }\n    val total2 = lst2.sumOf { it.length }\n\n    return if (total1 < total2) lst1 else lst2\n}"}
{"task_id": "HumanEval_kotlin/75", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    var count = 0\n    var i = 2\n    while (i <= a) {\n        if (a % i == 0) {\n            count++\n            while (a % i == 0) {\n                a /= i\n            }\n        }\n        i++\n    }\n    return count == 3\n}"}
{"task_id": "HumanEval_kotlin/76", "language": "kotlin", "completion": "fun isSimplePower(x : Int, n : Int) : Boolean {\n    return n.toDouble().pow(x.toDouble()) == x.toDouble()\n}"}
{"task_id": "HumanEval_kotlin/77", "language": "kotlin", "completion": "fun iscube(a : Int) : Boolean {\n    return a == Math.pow(Math.cbrt(a.toDouble()).toInt(), 3)\n}"}
{"task_id": "HumanEval_kotlin/78", "language": "kotlin", "completion": "fun hexKey(num: String): Int {\n    val hexDigits = num.uppercase().toCharArray()\n    var primeCount = 0\n\n    for (digit in hexDigits) {\n        val value = digit.digitToInt(16)\n        if (value in listOf(2, 3, 5, 7, 11, 13, 17)) {\n            primeCount++\n        }\n    }\n\n    return primeCount\n}"}
{"task_id": "HumanEval_kotlin/79", "language": "kotlin", "completion": "fun decimalToBinary(decimal : Int) : String {\n    var binary = \"\"\n    var number = decimal\n    while (number > 0) {\n        binary = (number % 2).toString() + binary\n        number /= 2\n    }\n    return \"db\" + binary + \"db\"\n}"}
{"task_id": "HumanEval_kotlin/80", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) return false\n    for (i in 0 until s.length step 3) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/81", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    return grades.map {\n        when (it) {\n            in 4.0..Double.MAX_VALUE -> \"A+\"\n            in 3.7..3.9 -> \"A\"\n            in 3.3..3.6 -> \"A-\"\n            in 3.0..3.2 -> \"B+\"\n            in 2.7..2.9 -> \"B\"\n            in 2.3..2.6 -> \"B-\"\n            in 2.0..2.2 -> \"C+\"\n            in 1.7..1.9 -> \"C\"\n            in 1.3..1.6 -> \"C-\"\n            in 1.0..1.2 -> \"D+\"\n            in 0.7..0.9 -> \"D\"\n            in 0.0..0.6 -> \"D-\"\n            else -> \"E\"\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/82", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    if (length <= 1) {\n        return false\n    }\n    for (i in 2 until length) {\n        if (length % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/83", "language": "kotlin", "completion": "fun startsOneEnds(n : Int) : Int {\n    return when (n) {\n        1 -> 9\n        2 -> 18\n        else -> {\n            val tenRaisedN = Math.pow(10.0, n.toDouble()).toInt()\n            val tenRaisedNMinus1 = Math.pow(10.0, (n - 1).toDouble()).toInt()\n            (tenRaisedN - tenRaisedNMinus1) / 10 + 9\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/84", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    var sum = 0\n    var num = n\n\n    while (num > 0) {\n        sum += num % 2\n        num /= 2\n    }\n\n    return sum.toString(2)\n}"}
{"task_id": "HumanEval_kotlin/85", "language": "kotlin", "completion": "fun add(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst.indices step 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/86", "language": "kotlin", "completion": "fun antiShuffle(s: String): String {\n    val words = s.split(\" \")\n    val shuffledWords = words.map { word ->\n        word.toCharArray().sorted().joinToString(\"\")\n    }\n    return shuffledWords.joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/87", "language": "kotlin", "completion": "fun getRow(lst: List<List<Int>>, x: Int): List<Pair<Int, Int>> {\n    return lst.flatMapIndexed { row, cols ->\n        cols.mapIndexedNotNull { col, value ->\n            if (value == x) row to col else null\n        }\n    }.sortedWith(compareBy({ it.first }, { it.second.dec() }))\n}"}
{"task_id": "HumanEval_kotlin/88", "language": "kotlin", "completion": "fun sortArray(array: List<Int>): List<Int> {\n    val sum = array[0] + array[array.size - 1]\n    return if (sum % 2 == 1) {\n        array.sorted()\n    } else {\n        array.sortedDescending()\n    }\n}"}
{"task_id": "HumanEval_kotlin/89", "language": "kotlin", "completion": "fun encrypt(s: String): String {\n    val shiftedAlphabet = \"abcdefghijklmnopqrstuvwxyz\".mapIndexed { i, c ->\n        if (i >= 2 * 2) {\n            'a' + (i - 2 * 2)\n        } else {\n            c\n        }\n    }\n    return s.map { c ->\n        if (c.isLetter()) {\n            shiftedAlphabet[c.toLowerCase() - 'a']\n        } else {\n            c\n        }\n    }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/90", "language": "kotlin", "completion": "fun nextSmallest(lst : List<Any>) : Int? {\n    if (lst.isEmpty() || lst.distinct().size <= 1) return null\n\n    val sortedList = lst.sorted()\n    return sortedList[1] as Int\n}"}
{"task_id": "HumanEval_kotlin/91", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    val sentences = s.split(Regex(\"[.!?]\"))\n    return sentences.count { it.trim().startsWith(\"I\") }\n}"}
{"task_id": "HumanEval_kotlin/92", "language": "kotlin", "completion": "fun anyInt(x: Int, y: Int, z: Int): Boolean {\n    return x == y + z || y == x + z || z == x + y\n}"}
{"task_id": "HumanEval_kotlin/93", "language": "kotlin", "completion": "fun encode(message: String): String {\n    val vowels = listOf('a', 'e', 'i', 'o', 'u')\n    return message.map { c ->\n        if (c.isLetter()) {\n            if (c.isLowerCase()) {\n                c.toUpperCase()\n            } else {\n                c.toLowerCase()\n            }\n        } else {\n            when (c) {\n                in vowels -> vowels[(vowels.indexOf(c) + 2) % vowels.size]\n                else -> c\n            }\n        }\n    }.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/94", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2 until num) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun sumOfDigits(num: Int): Int {\n    var sum = 0\n    var n = num\n    while (n > 0) {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\nfun skjkasdkd(lst: List<Int>): Int {\n    var maxPrime = 0\n    for (num in lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num\n        }\n    }\n\n    return sumOfDigits(maxPrime)\n}"}
{"task_id": "HumanEval_kotlin/95", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    if (dict.isEmpty()) {\n        return false\n    }\n\n    val firstKeyCase = dict.keys.first().toString().uppercase() == dict.keys.first().toString()\n\n    return dict.keys.all { it.toString().uppercase() == firstKeyCase }\n}"}
{"task_id": "HumanEval_kotlin/96", "language": "kotlin", "completion": "fun countUpTo(n: Int): List<Int> {\n    val primes = mutableListOf<Int>()\n    for (i in 2 until n) {\n        var isPrime = true\n        for (j in 2 until i) {\n            if (i % j == 0) {\n                isPrime = false\n                break\n            }\n        }\n        if (isPrime) {\n            primes.add(i)\n        }\n    }\n    return primes\n}"}
{"task_id": "HumanEval_kotlin/97", "language": "kotlin", "completion": "fun multiply(a: Int, b: Int): Int {\n    val unitDigitA = a % 10\n    val unitDigitB = b % 10\n    return unitDigitA * unitDigitB\n}"}
{"task_id": "HumanEval_kotlin/98", "language": "kotlin", "completion": "fun countUpper(s: String): Int {\n    val vowels = setOf('A', 'E', 'I', 'O', 'U')\n    var count = 0\n\n    for (i in s.indices step 2) {\n        if (s[i] in vowels) {\n            count++\n        }\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/99", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    val roundedDown = number.toInt()\n    val roundedUp = (number + 0.5).toInt()\n\n    return if (abs(number - roundedDown) < abs(number - roundedUp)) {\n        roundedDown\n    } else {\n        roundedUp\n    }\n}"}
{"task_id": "HumanEval_kotlin/100", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf(n)\n    var stones = n\n    repeat(n - 1) {\n        stones = if (stones % 2 == 0) stones + 1 else stones + 2\n        pile.add(stones)\n    }\n    return pile\n}"}
{"task_id": "HumanEval_kotlin/101", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    return s.split(Regex(\"[ ,]\"))\n}"}
{"task_id": "HumanEval_kotlin/102", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    var result = -1\n    for (i in y downTo x) {\n        if (i % 2 == 0) {\n            result = i\n            break\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/103", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) {\n        return -1\n    }\n\n    val sum = (n..m).sum()\n    val average = sum / (m - n + 1)\n    val rounded = Math.round(average).toInt()\n    return Integer.toBinaryString(rounded)\n}"}
{"task_id": "HumanEval_kotlin/104", "language": "kotlin", "completion": "fun uniqueDigits(x: List<Int>): List<Int> {\n    return x.filter { number ->\n        !number.toString().contains(\"2\") &&\n                !number.toString().contains(\"4\") &&\n                !number.toString().contains(\"6\") &&\n                !number.toString().contains(\"8\")\n    }.sorted()\n}"}
{"task_id": "HumanEval_kotlin/105", "language": "kotlin", "completion": "fun byLength(arr: List<Any>): List<Any> {\n    val numbers = arr.filterIsInstance<Int>().filter { it in 1..9 }.sorted().reversed()\n\n    val result = numbers.mapIndexed { index, number ->\n        when (number) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3 -> \"Three\"\n            4 -> \"Four\"\n            5 -> \"Five\"\n            6 -> \"Six\"\n            7 -> \"Seven\"\n            8 -> \"Eight\"\n            9 -> \"Nine\"\n            else -> null\n        }\n    }\n\n    return result.filterNotNull()\n}"}
{"task_id": "HumanEval_kotlin/106", "language": "kotlin", "completion": "fun f(n : Int) : List<Int> {\n    val list = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            var factorial = 1\n            for (j in 1..i) {\n                factorial *= j\n            }\n            list.add(factorial)\n        } else {\n            var sum = 0\n            for (j in 1..i) {\n                sum += j\n            }\n            list.add(sum)\n        }\n    }\n    return list\n}"}
{"task_id": "HumanEval_kotlin/107", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    var even = 0\n    var odd = 0\n    val numbers = (1..n).toList()\n\n    for (number in numbers) {\n        val reversed = number.toString().reversed().toIntOrNull()\n        if (reversed != null && reversed == number) {\n            if (number % 2 == 0) {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n\n    return listOf(even, odd)\n}"}
{"task_id": "HumanEval_kotlin/108", "language": "kotlin", "completion": "fun countNums(arr : List<Any>) : Int {\n    var count = 0\n    for (num in arr) {\n        val numString = num.toString()\n        var sum = 0\n        for (digit in numString) {\n            sum += Character.getNumericValue(digit)\n        }\n        if (sum > 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/109", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Any>): Boolean {\n    if (arr.isEmpty()) return true\n\n    val sortedArr = arr.sorted()\n    var cur = arr\n\n    for (i in 0 until arr.size) {\n        val shiftedArr = cur.subList(cur.size - 1, cur.size) + cur.subList(0, cur.size - 1)\n        if (shiftedArr == sortedArr) {\n            return true\n        }\n        cur = shiftedArr\n    }\n\n    return false\n}"}
{"task_id": "HumanEval_kotlin/110", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    var evenCount = lst1.count { it % 2 == 0 }\n    val difference = lst1.size - evenCount\n\n    if (difference > lst2.size) {\n        return \"NO\"\n    }\n\n    evenCount = lst2.count { it % 2 == 0 }\n    if (evenCount >= difference) {\n        return \"YES\"\n    }\n\n    return \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/111", "language": "kotlin", "completion": "fun histogram(test: String): Map<Any?, Any?> {\n    if (test.isEmpty()) return emptyMap()\n\n    val map = mutableMapOf<Char, Int>()\n\n    for (char in test.split(\" \")) {\n        map[char[0]] = map.getOrDefault(char[0], 0) + 1\n    }\n\n    val maxCount = map.values.maxOrNull()!!\n    return map.filterValues { it == maxCount }\n}"}
{"task_id": "HumanEval_kotlin/112", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    val deleted = s.filterNot { c.contains(it) }\n    val palindrome = deleted == deleted.reversed()\n    return listOf(deleted, palindrome)\n}"}
{"task_id": "HumanEval_kotlin/113", "language": "kotlin", "completion": "fun oddCount(lst: List<String>): List<String> {\n    return lst.mapIndexed { i, str ->\n        \"the number of odd elements ${str.count { it.isDigit() && it.toString().toInt() % 2 != 0 }}n the str${i + 1}ng ${i + 1} of the ${lst.size}nput.\"\n    }\n}"}
{"task_id": "HumanEval_kotlin/114", "language": "kotlin", "completion": "fun minSubArraySum(nums: List<Int>): Int {\n    var minSum = Int.MAX_VALUE\n    var currentSum = 0\n\n    for (num in nums) {\n        currentSum += num\n        minSum = Math.min(minSum, currentSum)\n        if (currentSum > 0) {\n            currentSum = 0\n        }\n    }\n\n    return minSum\n}"}
{"task_id": "HumanEval_kotlin/115", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    val rows = grid.size\n    val cols = grid[0].size\n\n    var filledWater = 0\n    var lowerBucketCount = 0\n\n    while (filledWater < rows * cols) {\n        for (i in 0 until rows) {\n            for (j in 0 until cols) {\n                if (grid[i][j] == 1 && filledWater < capacity) {\n                    filledWater++\n                    grid[i][j] = 0\n                }\n            }\n        }\n\n        lowerBucketCount++\n    }\n\n    return lowerBucketCount\n}"}
{"task_id": "HumanEval_kotlin/116", "language": "kotlin", "completion": "fun sortArray(arr: List<Any>): List<Any> {\n    return arr.sortedWith(compareBy({ toBinary(it).count { it == '1' } }, { it as Int }))\n}\n\nfun toBinary(n: Any): String {\n    return Integer.toBinaryString(n as Int)\n}"}
{"task_id": "HumanEval_kotlin/117", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    val words = s.split(\" \")\n    val result = mutableListOf<String>()\n\n    for (word in words) {\n        var consonants = 0\n        for (char in word) {\n            if (char.toLowerCase() in \"bcdfghjklmnpqrstvwxyz\") {\n                consonants++\n            }\n        }\n        if (consonants == n) {\n            result.add(word)\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/118", "language": "kotlin", "completion": "fun getClosestVowel(word: String): String {\n    val vowels = listOf('a', 'e', 'i', 'o', 'u')\n    val lastCons = mutableListOf<Char>()\n\n    for (i in word.lastIndex downTo 0) {\n        val ch = word[i]\n        if (ch in vowels) {\n            continue\n        }\n        if (ch.isLetter() && !ch.isVowel()) {\n            lastCons.add(ch)\n        }\n        if (lastCons.size == 2) {\n            break\n        }\n    }\n\n    return if (lastCons.size == 2) {\n        val before = lastCons[0]\n        val after = lastCons[1]\n        val between = vowels.find { it in before..after }\n        between?.toString() ?: \"\"\n    } else {\n        \"\"\n    }\n}\n\nfun Char.isVowel(): Boolean {\n    return this.toLowerCase() in listOf('a', 'e', 'i', 'o', 'u')\n}"}
{"task_id": "HumanEval_kotlin/119", "language": "kotlin", "completion": "fun matchParens(lst: List<String>): String {\n    val stack = mutableListOf<String>()\n    for (str in lst) {\n        if (str == \"(\") {\n            stack.add(str)\n        } else {\n            if (stack.isEmpty()) {\n                return \"No\"\n            }\n            stack.removeAt(stack.lastIndex)\n        }\n    }\n    return if (stack.isEmpty()) \"Yes\" else \"No\"\n}"}
{"task_id": "HumanEval_kotlin/120", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    return arr.sortedDescending().take(k)\n}"}
{"task_id": "HumanEval_kotlin/121", "language": "kotlin", "completion": "fun solution(lst: List<Int>): Int {\n    return lst.filterIndexed { index, value -> index % 2 == 0 && value % 2 != 0 }.sum()\n}"}
{"task_id": "HumanEval_kotlin/122", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it in 10..99 }.sum()\n}"}
{"task_id": "HumanEval_kotlin/123", "language": "kotlin", "completion": "fun getOddCollatz(n: Int): List<Int> {\n    val oddNumbers = mutableListOf<Int>()\n    var currentNumber = n\n\n    while (currentNumber != 1) {\n        if (currentNumber % 2 != 0) {\n            oddNumbers.add(currentNumber)\n        }\n        currentNumber = if (currentNumber % 2 == 0) currentNumber / 2 else 3 * currentNumber + 1\n    }\n\n    return oddNumbers.sorted()\n}"}
{"task_id": "HumanEval_kotlin/124", "language": "kotlin", "completion": "fun validDate(date : String) : Boolean {\n    val dateRegex = Regex(\"\"\"(\\d{2})-(\\d{2})-(\\d{4})\"\"\")\n    if (!dateRegex.matches(date)) {\n        return false\n    }\n\n    val (month, day, year) = dateRegex.matchEntire(date)!!.destructured\n    val monthInt = month.toIntOrNull() ?: return false\n    val dayInt = day.toIntOrNull() ?: return false\n    val yearInt = year.toIntOrNull() ?: return false\n\n    if (monthInt < 1 || monthInt > 12) {\n        return false\n    }\n\n    val daysInMonth = when (monthInt) {\n        1, 3, 5, 7, 8, 10, 12 -> 31\n        4, 6, 9, 11 -> 30\n        2 -> if (yearInt % 4 == 0 && (yearInt % 100 != 0 || yearInt % 400 == 0)) 29 else 28\n        else -> 0\n    }\n\n    if (dayInt < 1 || dayInt > daysInMonth) {\n        return false\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/125", "language": "kotlin", "completion": "fun splitWords(txt: String): Any {\n    val words = txt.split(\" \")\n    if (words.isNotEmpty()) {\n        return words\n    }\n\n    val commaWords = txt.split(\",\")\n    if (commaWords.isNotEmpty()) {\n        return commaWords\n    }\n\n    var oddLettersCount = 0\n    for (c in txt.toCharArray()) {\n        if (c.isLowerCase() && c.code % 2 != 0) {\n            oddLettersCount++\n        }\n    }\n\n    return oddLettersCount\n}"}
{"task_id": "HumanEval_kotlin/126", "language": "kotlin", "completion": "fun isSorted(lst: List<Any>): Boolean {\n    val intList = lst.filterIsInstance<Int>()\n    if (intList.size != lst.size) return false\n\n    for (i in 1 until intList.size) {\n        if (intList[i] < intList[i - 1]) return false\n        if (intList.groupBy { it }.any { it.value.size > 1 }) return false\n    }\n\n    return true\n}"}
{"task_id": "HumanEval_kotlin/127", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val (start1, end1) = interval1\n    val (start2, end2) = interval2\n\n    if (start1 > end2 || start2 > end1) {\n        return \"NO\"\n    }\n\n    val length = maxOf(0, minOf(end1, end2) - maxOf(start1, start2) + 1)\n\n    return if (isPrime(length)) \"YES\" else \"NO\"\n}\n\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2 until number) {\n        if (number % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/128", "language": "kotlin", "completion": "fun prodSigns(arr: List<Any>): Int? {\n    if (arr.isEmpty()) return null\n\n    var sum = 0\n    var product = 1\n\n    for (num in arr) {\n        when (num) {\n            is Int -> {\n                sum += abs(num)\n                product *= sign(num)\n            }\n            else -> return null\n        }\n    }\n\n    return sum * product\n}"}
{"task_id": "HumanEval_kotlin/129", "language": "kotlin", "completion": "fun minpath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    val visited = HashSet<Pair<Int, Int>>()\n    val path = ArrayList<Int>()\n\n    fun dfs(row: Int, col: Int, remainingSteps: Int) {\n        if (remainingSteps == 0) {\n            return\n        }\n\n        visited.add(Pair(row, col))\n        path.add(grid[row][col])\n\n        for (direction in listOf(Pair(1, 0), Pair(0, 1), Pair(-1, 0), Pair(0, -1))) {\n            val nextRow = row + direction.first\n            val nextCol = col + direction.second\n\n            if (nextRow in 0 until n && nextCol in 0 until n && !visited.contains(Pair(nextRow, nextCol))) {\n                dfs(nextRow, nextCol, remainingSteps - 1)\n            }\n        }\n\n        if (remainingSteps == k) {\n            return\n        }\n\n        path.removeAt(path.size - 1)\n        visited.remove(Pair(row, col))\n    }\n\n    dfs(0, 0, k)\n\n    return path\n}"}
{"task_id": "HumanEval_kotlin/130", "language": "kotlin", "completion": "fun tri(n: Int): List<Any> {\n    val result = mutableListOf<Any>()\n    result.add(3)\n    for (i in 3..n) {\n        if (i % 2 == 0) {\n            result.add(1 + i / 2)\n        } else {\n            result.add(result[i - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/131", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var num = n\n\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) {\n            product *= digit\n        }\n        num /= 10\n    }\n\n    return product\n}"}
{"task_id": "HumanEval_kotlin/132", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var count = 0\n    for (char in string) {\n        if (char == '[') {\n            count++\n        } else if (char == ']') {\n            count--\n            if (count < 0) {\n                return false\n            }\n        }\n    }\n    return count == 0\n}"}
{"task_id": "HumanEval_kotlin/133", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    return lst.map {\n        Math.ceil(it as Double).toInt() * Math.ceil(it as Double).toInt()\n    }.sum()\n}"}
{"task_id": "HumanEval_kotlin/134", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt : String) : Boolean {\n    if (txt.isEmpty()) return false\n    val lastChar = txt.last()\n    return lastChar.isLetter() && !txt.contains(\" \") { it == lastChar }\n}"}
{"task_id": "HumanEval_kotlin/135", "language": "kotlin", "completion": "fun canArrange(arr: List<Any>): Int {\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            return i - 1\n        }\n    }\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/136", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n\n    for (num in lst) {\n        when (num) {\n            is Int -> {\n                if (num < 0 && (largestNegative == null || num > largestNegative)) {\n                    largestNegative = num\n                } else if (num > 0 && (smallestPositive == null || num < smallestPositive)) {\n                    smallestPositive = num\n                }\n            }\n        }\n    }\n\n    return listOf(largestNegative, smallestPositive)\n}"}
{"task_id": "HumanEval_kotlin/137", "language": "kotlin", "completion": "fun compareOne(a: Any, b: Any): Any? {\n    when (a) {\n        is Int -> when (b) {\n            is Int -> if (a >= b) a else b\n            is Float -> if (a.toFloat() >= b) a else b\n            is String -> return if (a.toString().replace(\",\", \".\").toFloat() >= b.toString().replace(\",\", \".\").toFloat()) a else b\n        }\n        is Float -> when (b) {\n            is Int -> if (a >= b.toFloat()) a else b.toFloat()\n            is Float -> if (a >= b) a else b\n            is String -> return if (a >= b.toString().replace(\",\", \".\").toFloat()) a else b.toString().replace(\",\", \".\").toFloat()\n        }\n        is String -> when (b) {\n            is Int -> return if (a.replace(\",\", \".\").toFloat() >= b) a else b\n            is Float -> return if (a.replace(\",\", \".\").toFloat() >= b) a else b\n            is String -> return if (a.replace(\",\", \".\").toFloat() >= b.replace(\",\", \".\").toFloat()) a else b\n        }\n    }\n    return null\n}"}
{"task_id": "HumanEval_kotlin/138", "language": "kotlin", "completion": "fun isEqualToSumEven(n: Int): Boolean {\n    if (n % 2 != 0) return false\n    var sum = 0\n    var i = 2\n    while (sum < n) {\n        sum += i\n        i += 2\n    }\n    return sum == n\n}"}
{"task_id": "HumanEval_kotlin/139", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    if (n == 0) return 1\n    var result = n\n    var multiplier = n - 1\n    while (multiplier >= 1) {\n        result *= multiplier\n        multiplier--\n    }\n    return result\n}"}
{"task_id": "HumanEval_kotlin/140", "language": "kotlin", "completion": "fun fixSpaces(text: String): String {\n    val trimmedText = text.trim()\n    val doubleSpaceRegex = Regex(\" +\")\n    val singleSpaceRegex = Regex(\" \")\n\n    val fixedText = doubleSpaceRegex.replace(trimmedText, \"-\")\n    return singleSpaceRegex.replace(fixedText, \"_\")\n}"}
{"task_id": "HumanEval_kotlin/141", "language": "kotlin", "completion": "fun fileNameCheck(fileName : String) : String {\n    val regex = Regex(\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[txt|exe|dll]$\")\n    return if (fileName.matches(regex)) \"Yes\" else \"No\"\n}"}
{"task_id": "HumanEval_kotlin/142", "language": "kotlin", "completion": "fun sumSquares(lst : List<Any>) : Int {\n    return lst.mapIndexed { index, it ->\n        when {\n            index % 3 == 0 -> it as Int * it\n            index % 4 == 0 -> it as Int * it * it\n            else -> it as Int\n        }\n    }.sum()\n}"}
{"task_id": "HumanEval_kotlin/143", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    val primeWords = words.filter { isPrime(it.length) }\n    return primeWords.joinToString(\" \")\n}\n\nfun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2 until number) {\n        if (number % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/144", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    val (xNum, xDen) = x.split(\"/\").map(String::toInt)\n    val (nNum, nDen) = n.split(\"/\").map(String::toInt)\n\n    val simplified = xNum * nNum % (xDen * nDen) == 0\n    return simplified\n}"}
{"task_id": "HumanEval_kotlin/145", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.sortedWith(compareBy(\n        { sumDigits(it) },\n        { nums.indexOf(it) }\n    ))\n}\n\nprivate fun sumDigits(num: Any): Int {\n    return when (num) {\n        is Int -> num.toString().chars().map { it.digitToInt() }.sum()\n        else -> 0\n    }\n}"}
{"task_id": "HumanEval_kotlin/146", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    return nums.filter { it is Int && it > 10 && isOddFirstAndLastDigit(it) }.count()\n}\n\nfun isOddFirstAndLastDigit(num: Int): Boolean {\n    val firstDigit = num / 10\n    val lastDigit = num % 10\n    return firstDigit % 2 != 0 && lastDigit % 2 != 0\n}"}
{"task_id": "HumanEval_kotlin/147", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    val a = IntArray(n) { i -> i * i - i + 1 }\n    var count = 0\n    for (i in 0 until n) {\n        for (j in i + 1 until n) {\n            for (k in j + 1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "HumanEval_kotlin/148", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\n    if (planet1 !in planets || planet2 !in planets) {\n        return emptyList()\n    }\n\n    val planet1Index = planets.indexOf(planet1)\n    val planet2Index = planets.indexOf(planet2)\n\n    return planets.slice(planet1Index + 1 until planet2Index)\n}"}
{"task_id": "HumanEval_kotlin/149", "language": "kotlin", "completion": "fun sortedListSum(lst : List<String>) : List<String> {\n    return lst.filter { it.length % 2 == 0 }.sortedWith(compareBy({ it.length }, { it }))\n}"}
{"task_id": "HumanEval_kotlin/150", "language": "kotlin", "completion": "fun xOrY(n: Int, x: Int, y: Int): Int {\n    var isPrime = true\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            isPrime = false\n            break\n        }\n    }\n    return if (isPrime) x else y\n}"}
{"task_id": "HumanEval_kotlin/151", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filter { it is Int && it > 0 && it % 2 != 0 }\n        .map { (it as Int) * it }\n        .sum()\n}"}
{"task_id": "HumanEval_kotlin/152", "language": "kotlin", "completion": "fun compare(game : List<Int>, guess : List<Int>) : List<Int> {\n    return game.zip(guess).map { (score, guess) ->\n        if (score == guess) 0\n        else abs(score - guess)\n    }\n}"}
{"task_id": "HumanEval_kotlin/153", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    val extensionStrengths = extensions.map { extension ->\n        val cap = extension.count { it.isUpperCase() }\n        val sm = extension.count { it.isLowerCase() }\n        cap - sm to extension\n    }\n\n    val strongestExtension = extensionStrengths.maxByOrNull { it.first }?.second\n    return \"$className.$strongestExtension\"\n}"}
{"task_id": "HumanEval_kotlin/154", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    val rotations = StringBuilder(a).apply {\n        for (i in 1 until length) {\n            append(removeRange(0, 1))\n            insert(length, first())\n        }\n    }.toString().split(\"|\")\n    return rotations.any { it.contains(b) }\n}"}
{"task_id": "HumanEval_kotlin/155", "language": "kotlin", "completion": "fun evenOddCount(num: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    var number = num\n    while (number != 0) {\n        val digit = number % 10\n        if (digit % 2 == 0) {\n            evenCount++\n        } else {\n            oddCount++\n        }\n        number /= 10\n    }\n\n    return listOf(evenCount, oddCount)\n}"}
{"task_id": "HumanEval_kotlin/156", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val romanNumerals = arrayOf(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\")\n    val decimalValues = arrayOf(1, 5, 10, 50, 100, 500, 1000)\n\n    var result = \"\"\n    var num = number\n\n    for (i in decimalValues.indices.reversed()) {\n        val decimalValue = decimalValues[i]\n        val romanNumeral = romanNumerals[i]\n\n        while (num >= decimalValue) {\n            result += romanNumeral\n            num -= decimalValue\n        }\n    }\n\n    return result.lowercase()\n}"}
{"task_id": "HumanEval_kotlin/157", "language": "kotlin", "completion": "fun rightAngleTriangle(a : Int, b : Int, c : Int) : Boolean {\n    return a*a + b*b == c*c ||\n           b*b + c*c == a*a ||\n           c*c + a*a == b*b\n}"}
{"task_id": "HumanEval_kotlin/158", "language": "kotlin", "completion": "fun findMax(words: List<String>): String {\n    val uniqueCharsCount = mutableMapOf<String, Int>()\n\n    for (word in words) {\n        val uniqueChars = word.toCharArray().distinct()\n        uniqueCharsCount[word] = uniqueChars.size\n    }\n\n    val maxUniqueCharsCount = uniqueCharsCount.values.maxOrNull()\n    val result = uniqueCharsCount.filterValues { it == maxUniqueCharsCount }.keys\n\n    return result.minOrNull() ?: \"\"\n}"}
{"task_id": "HumanEval_kotlin/159", "language": "kotlin", "completion": "fun eat(number: Int, need: Int, remaining: Int): List<Int> {\n    val totalCarrots = number + remaining\n    val remainingCarrots = if (totalCarrots >= need) remaining - (need - number) else 0\n    val eatenCarrots = if (totalCarrots >= need) need else totalCarrots\n    return listOf(eatenCarrots, remainingCarrots)\n}"}
{"task_id": "HumanEval_kotlin/160", "language": "kotlin", "completion": "fun doAlgebra(operator: List<String>, operand: List<Int>): Int {\n    var result = operand[0]\n\n    for (i in operator.indices) {\n        val op = operator[i]\n        val num = operand[i + 1]\n\n        when (op) {\n            \"+\" -> result += num\n            \"-\" -> result -= num\n            \"*\" -> result *= num\n            \"//\" -> result /= num\n            \"**\" -> result = result.toDouble().pow(num).toInt()\n        }\n    }\n\n    return result\n}"}
{"task_id": "HumanEval_kotlin/161", "language": "kotlin", "completion": "fun solve(s: String): String {\n    val sb = StringBuilder()\n    for (c in s) {\n        if (c.isLetter()) {\n            sb.append(if (c.isLowerCase()) c.toUpperCase() else c.toLowerCase())\n        } else {\n            sb.append(c)\n        }\n    }\n    return sb.reverse().toString()\n}"}
{"task_id": "HumanEval_kotlin/162", "language": "kotlin", "completion": "import java.math.BigInteger\nimport java.security.MessageDigest\n\nfun stringToMd5(text : String) : String? {\n    return if (text.isEmpty()) {\n        \".\"\n    } else {\n        try {\n            val md = MessageDigest.getInstance(\"MD5\")\n            val messageDigest = md.digest(text.toByteArray())\n            val no = BigInteger(1, messageDigest)\n            var hashtext = no.toString(16)\n            while (hashtext.length < 32) {\n                hashtext = \"0$hashtext\"\n            }\n            hashtext\n        } catch (e: Exception) {\n            null\n        }\n    }\n}"}
{"task_id": "HumanEval_kotlin/163", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val result = mutableListOf<Int>()\n\n    for (i in Math.min(a, b)..Math.max(a, b)) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n\n    return result\n}"}

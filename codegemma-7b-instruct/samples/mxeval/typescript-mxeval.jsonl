{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "const has_close_elements = function (numbers: Array<number>, threshold: number): boolean {\n  numbers.sort((a, b) => a - b); // Sort the array in ascending order\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (Math.abs(numbers[i] - numbers[i - 1]) < threshold) {\n      return true;\n    }\n  }\n\n  return false;\n};"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "const separate_paren_groups = function (paren_string: string): Array<string> {\n  const groups: Array<string> = [];\n  let currentGroup = '';\n  let balance = 0;\n\n  for (const char of paren_string) {\n    if (char === '(') {\n      balance++;\n      currentGroup += char;\n    } else if (char === ')') {\n      balance--;\n      currentGroup += char;\n      if (balance === 0) {\n        groups.push(currentGroup);\n        currentGroup = '';\n      }\n    }\n  }\n\n  return groups;\n};"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "const truncate_number = function (number0: number): number {\n  return number0 % 1;\n};"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>) : boolean  {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean_absolute_deviation = function (numbers: Array<number>): number {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const mean = sum / numbers.length;\n\n  const absoluteDifferences = numbers.map(number => Math.abs(number - mean));\n  const sumAbsoluteDifferences = absoluteDifferences.reduce((a, b) => a + b, 0);\n\n  return sumAbsoluteDifferences / numbers.length;\n};"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "const intersperse = function (numbers: Array<number>, delimeter: number): Array<number> {\n  const result = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parse_nested_parens = function (paren_string: string): Array<number> {\n  const levels = [];\n  let currentLevel = 0;\n\n  for (const char of paren_string) {\n    if (char === '(') {\n      currentLevel++;\n      levels.push(currentLevel);\n    } else if (char === ')') {\n      currentLevel--;\n    }\n  }\n\n  return levels;\n};"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "const filter_by_substring = function (strings: Array<string>, substring: string): Array<string> {\n  return strings.filter(str => str.includes(substring));\n};"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): Array<number> {\n  let sum = 0;\n  let product = 1;\n\n  for (const number of numbers) {\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n};"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const rolling_max = function (numbers: Array<number>) : Array<number>  {\n  const result = [];\n  let max = -Infinity;\n\n  for (const number of numbers) {\n    max = Math.max(max, number);\n    result.push(max);\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "const make_palindrome = function (string0: string): string {\n  const len = string0.length;\n\n  // Find the longest postfix that is a palindrome\n  let i = len - 1;\n  let j = len - 1;\n  while (i >= 0 && j >= 0 && string0[i] === string0[j]) {\n    i--;\n    j--;\n  }\n  const postfixLen = j - i;\n\n  // Append the reverse of the prefix to the end of the string\n  const prefix = string0.substring(0, i + 1);\n  const palindrome = prefix + string0.substring(i + 1, j + 1).split('').reverse().join('') + prefix;\n\n  return palindrome;\n};"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "const string_xor = function (a: string, b: string) : string  {\n  const len = a.length;\n  let result = '';\n\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result += '0';\n    } else {\n      result += '1';\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "const longest = function (strings: Array<string>) : string | null {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longestString = strings[0];\n\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "const greatest_common_divisor = function(a: number, b: number): number {\n  while (b) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "const all_prefixes = function (string0: string): Array<string> {\n  const prefixes = [];\n  for (let i = 0; i <= string0.length; i++) {\n    prefixes.push(string0.slice(0, i));\n  }\n  return prefixes;\n};"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = function (n: number): string {\n  return Array.from({ length: n + 1 }, (_, i) => i.toString()).join(' ');\n};"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "const count_distinct_characters = function (string0: string): number {\n  return [...new Set(string0.toLowerCase())].length;\n};"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const parse_music = function (music_string: string) : Array<number>  {\n  const beats = music_string.split(' ').map(note => {\n    switch (note) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n        return 1;\n      default:\n        throw new Error(`Invalid note: ${note}`);\n    }\n  });\n  return beats;\n};"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "const how_many_times = function (string0: string, substring: string) : number  {\n  let count = 0;\n  let index = 0;\n  while ((index = string0.indexOf(substring, index)) !== -1) {\n    count++;\n    index += substring.length;\n  }\n  return count;\n};"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n  const numArr = numbers.split(' ');\n  numArr.sort((a, b) => {\n    return numArr.indexOf(a) - numArr.indexOf(b);\n  });\n  return numArr.join(' ');\n};"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "const find_closest_elements = function (numbers: Array<number>) : Array<number>  {\n  numbers.sort((a, b) => a - b);\n  let min_diff = Infinity;\n  let closest_pair = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i + 1]);\n    if (diff < min_diff) {\n      min_diff = diff;\n      closest_pair = [numbers[i], numbers[i + 1]];\n    }\n  }\n  return closest_pair;\n}"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\n  return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "const filter_integers = function (values: Array<any>): Array<number> {\n  return values.filter((value) => typeof value === 'number');\n};"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "const strlen = function (string0: string): number {\n  return string0.length;\n};"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "const largest_divisor = function (n: number): number {\n  for (let i = Math.floor(n / 2); i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n};"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "const factorize = function (n: number): Array<number> {\n    const factors: Array<number> = [];\n\n    // Iterate from 2 to the square root of n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\n    // If n is greater than 1, it is a prime factor\n    if (n > 1) {\n        factors.push(n);\n    }\n\n    return factors;\n};"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "const remove_duplicates = function (numbers: Array<number>) : Array<number> {\n  const seen = new Set();\n  const result = [];\n\n  for (const number of numbers) {\n    if (!seen.has(number)) {\n      seen.add(number);\n      result.push(number);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n  return string0.split('').map(c => c.toLowerCase() === c ? c.toUpperCase() : c.toLowerCase()).join('');\n};"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "const concatenate = function (strings: Array<string>) : string {\n  return strings.join('');\n};"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "const filter_by_prefix = function (strings: Array<string>, prefix: string) : Array<string> {\n  return strings.filter(str => str.startsWith(prefix));\n};"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "const get_positive = function (l: Array<number>) : Array<number>  {\n  return l.filter((num) => num > 0);\n}"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n};\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "const sort_third = function (l: Array<number>): Array<number> {\n  const result = [...l];\n\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      result.splice(i, 1);\n      result.push(l[i]);\n    }\n  }\n\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "const max_element = function (l: Array<number>): number {\n  return Math.max(...l);\n};"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "const fizz_buzz = function (n: number): number {\n    let count = 0;\n\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            while (i > 0) {\n                if (i % 10 === 7) {\n                    count++;\n                }\n                i = Math.floor(i / 10);\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const sort_even = function (l: Array<number>) : Array<number> {\n  const even = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  const odd = l.filter((_, i) => i % 2 !== 0);\n  return [...odd, ...even];\n}"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst fibonacci = (n: number): number => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst prime_fib = (n: number): number => {\n  let fib = fibonacci(0);\n  let count = 0;\n\n  while (count < n) {\n    fib = fibonacci(fib);\n    if (isPrime(fib)) {\n      count++;\n    }\n  }\n\n  return fib;\n};"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>) : boolean  {\n  const set = new Set(l);\n  const n = set.size;\n  if (n < 3) {\n    return false;\n  }\n  for (const num of set) {\n    const target = -num;\n    let count = 0;\n    for (const otherNum of set) {\n      if (otherNum !== num) {\n        if (set.has(target - otherNum)) {\n          count++;\n        }\n      }\n    }\n    if (count >= 2) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "const car_race_collision = function (n: number) : number  {\n  return n;\n};"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "const incr_list = function (l: Array<number>) : Array<number>  {\n  return l.map(x => x + 1);\n}"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n  const seen = new Set<number>();\n\n  for (const num of l) {\n    const complement = -num;\n\n    if (seen.has(complement)) {\n      return true;\n    }\n\n    seen.add(num);\n  }\n\n  return false;\n};\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "const change_base = function (x: number, base: number): string {\n  let result = \"\";\n  while (x > 0) {\n    const remainder = x % base;\n    result = (remainder + result);\n    x = Math.floor(x / base);\n  }\n  return result || \"0\";\n};"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "const triangle_area = function (a: number, h: number) : number {\n  return (a * h) / 2;\n};\n\nconsole.log(triangle_area(5, 3)); // Output: 7.5"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "const fib4 = function(n: number): number {\n  const arr = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3] + arr[i - 4]);\n  }\n  return arr[n];\n};"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n  l.sort((a, b) => a - b);\n\n  const mid = Math.floor(l.length / 2);\n\n  if (l.length % 2 === 0) {\n    return (l[mid - 1] + l[mid]) / 2;\n  } else {\n    return l[mid];\n  }\n};"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "const is_palindrome = function (text: string) : boolean {\n  const reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "const modp = function (n: number, p: number) : number {\n  return BigInt(n) % BigInt(p) as number;\n};"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n};"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n  return l.every(num => num < t);\n};"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n  return x + y;\n};\n\nconsole.log(add(2, 3)); // 5\nconsole.log(add(5, 7)); // 12"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n  const map = new Map();\n\n  for (const char of s0) {\n    map.set(char, (map.get(char) || 0) + 1);\n  }\n\n  for (const char of s1) {\n    if (!map.has(char) || map.get(char) === 0) {\n      return false;\n    }\n    map.set(char, map.get(char) - 1);\n  }\n\n  return true;\n};\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "const fib = function (n: number): number {\n  if (n <= 1) return n;\n  let a = 0;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "const correct_bracketing = function (brackets: string): boolean {\n  let openBrackets = 0;\n\n  for (const char of brackets) {\n    if (char === '<') {\n      openBrackets++;\n    } else if (char === '>') {\n      openBrackets--;\n    }\n\n    if (openBrackets < 0) {\n      return false;\n    }\n  }\n\n  return openBrackets === 0;\n};\n</start_of_turn>"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "const monotonic = function (l: Array<number>) : boolean  {\n  let isIncreasing = true;\n  let isDecreasing = true;\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      isDecreasing = false;\n    } else if (l[i] < l[i - 1]) {\n      isIncreasing = false;\n    }\n  }\n\n  return isIncreasing || isDecreasing;\n};\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>) : Array<number>  {\n  return l1.filter(x => l2.includes(x)).filter((x, i, arr) => arr.indexOf(x) === i);\n}"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let divisor = 2;\n  let largestFactor = 1;\n\n  while (divisor * divisor <= n) {\n    while (n % divisor === 0) {\n      largestFactor = divisor;\n      n /= divisor;\n    }\n    divisor++;\n  }\n\n  if (n > 1) {\n    largestFactor = n;\n  }\n\n  return largestFactor;\n};"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "const sum_to_n = (n: number): number => {\n  return (n * (n + 1)) / 2;\n};"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const correct_bracketing = function (brackets: string): boolean {\n  let count = 0;\n\n  for (const char of brackets) {\n    if (char === \"(\") {\n      count++;\n    } else if (char === \")\") {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n};\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number>  {\n  return xs.slice(1).map((x, i) => x * (i + 1));\n};"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n  if (n <= 2) return 0;\n  if (n === 3) return 1;\n\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\n  for (let i = 4; i <= n; i++) {\n    const next = a + b + c;\n    a = b;\n    b = c;\n    c = next;\n  }\n\n  return c;\n};"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowels_count = function(s: string): number {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const lastChar = s[s.length - 1];\n\n  let count = 0;\n\n  for (const char of s) {\n    if (vowels.includes(char.toLowerCase())) {\n      count++;\n    }\n  }\n\n  if (lastChar === 'y' && vowels.includes(lastChar.toLowerCase())) {\n    count++;\n  }\n\n  return count;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "const circular_shift = function (x: number, shift: number): string {\n  const str = x.toString();\n  const len = str.length;\n\n  if (shift > len) {\n    return str.split('').reverse().join('');\n  }\n\n  const right = str.slice(len - shift);\n  const left = str.slice(0, len - shift);\n\n  return right + left;\n};"}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "const digitSum = function (s: string): number {\n  let sum = 0;\n  for (const char of s) {\n    if (char.toUpperCase() === char) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n};"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const fruit_distribution = function (s: string, n: number): number {\n  const fruits = s.match(/\\d+/g).map(Number);\n  const apples = fruits[0];\n  const oranges = fruits[1];\n  return n - apples - oranges;\n};"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "const pluck = function (arr: Array<number>): Array<number> {\n  if (arr.length === 0) return [];\n\n  let minEven = Infinity;\n  let minIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minIndex = i;\n    }\n  }\n\n  return minEven === Infinity ? [] : [minEven, minIndex];\n};"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "const search = function (lst: Array<number>) : number  {\n  const freqMap = new Map<number, number>();\n\n  // Calculate frequencies\n  for (const num of lst) {\n    freqMap.set(num, (freqMap.get(num) || 0) + 1);\n  }\n\n  // Find the greatest integer with frequency >= value\n  let result = -1;\n  for (const [num, freq] of freqMap.entries()) {\n    if (freq >= num && num > result) {\n      result = num;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "const strange_sort_list = function (lst: Array<number>) : Array<number>  {\n  if (lst.length === 0) return [];\n  const sortedList = [...lst].sort((a, b) => a - b);\n  const result = [];\n  let start = 0;\n  let end = lst.length - 1;\n  while (start <= end) {\n    result.push(sortedList[start++]);\n    if (start <= end) result.push(sortedList[end--]);\n  }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "const triangle_area = function(a: number, b: number, c: number): number {\n  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c) / 2;\n    return parseFloat((Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number) : boolean  {\n  const sum = q.reduce((acc, curr) => acc + curr, 0);\n  const isBalanced = q.length > 1 ? q.slice(0, q.length / 2).reverse().join('') === q.slice(q.length / 2).join('') : true;\n  return isBalanced && sum <= w;\n};"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "const smallest_change = function (arr: Array<number>): number {\n  const n = arr.length;\n  const dp = new Array(n).fill(0);\n\n  // Base case: If the array is palindromic, no changes are needed.\n  for (let i = 0; i < n; i++) {\n    dp[i] = i;\n  }\n\n  // Fill the DP table diagonally.\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] === arr[j]) {\n        dp[i] = Math.min(dp[i], dp[j] + 1);\n      } else {\n        dp[i] = Math.min(dp[i], dp[j] + 2);\n      }\n    }\n  }\n\n  return dp[0];\n};"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "const total_match = function (lst1: Array<string>, lst2: Array<string>) : Array<string>  {\n  const totalChars1 = lst1.reduce((acc, str) => acc + str.length, 0);\n  const totalChars2 = lst2.reduce((acc, str) => acc + str.length, 0);\n\n  if (totalChars1 < totalChars2) {\n    return lst1;\n  } else if (totalChars2 < totalChars1) {\n    return lst2;\n  } else {\n    return lst1;\n  }\n};"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n  if (a < 2) return false;\n\n  let divisor = 2;\n  let count = 0;\n\n  while (divisor <= a) {\n    if (a % divisor === 0) {\n      count++;\n      a /= divisor;\n    } else {\n      divisor++;\n    }\n  }\n\n  return count === 3;\n};"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "const is_simple_power = function (x: number, n: number): boolean {\n  return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n};"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "const iscube = function (a: number): boolean {\n  return Math.pow(Math.cbrt(a), 3) === a;\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n  return true;\n};\n\nconst hex_key = (num: string): number => {\n  const hexDigits = num.split('').map(digit => digit.toUpperCase());\n  return hexDigits.reduce((acc, digit) => {\n    const value = parseInt(digit, 16);\n    return acc + (isPrime(value) ? 1 : 0);\n  }, 0);\n};"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n  let binary = '';\n  let divisor = 2;\n\n  while (decimal > 0) {\n    const remainder = decimal % divisor;\n    binary = (remainder === 1 ? '1' : '0') + binary;\n    decimal = Math.floor(decimal / divisor);\n  }\n\n  return 'db' + binary + 'db';\n};"}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>) : Array<string>  {\n  const letter_grades = grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else {\n      return 'D-';\n    }\n  });\n  return letter_grades;\n};"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "const prime_length = function (string0: string): boolean {\n  const length = string0.length;\n\n  if (length <= 1) {\n    return false;\n  }\n\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "const starts_one_ends = function (n: number): number {\n  if (n === 1) return 10;\n  const count = Math.pow(10, n - 1) - Math.pow(10, n - 2) + 1;\n  return count * 2 - 1;\n};"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "const solve = function (N: number): string {\n  let sum = 0;\n\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n\n  return sum.toString(2);\n};"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "const add = function (lst: Array<number>): number {\n  return lst.filter((value, index) => value % 2 === 0 && index % 2 !== 0).reduce((a, b) => a + b, 0);\n};"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "const anti_shuffle = function (s: string): string {\n  return s\n    .split(' ')\n    .map(word => [...word].sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join(''))\n    .join(' ');\n};"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<Array<number>>  {\n  if (!lst.length) return [];\n  const result: Array<Array<number>> = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = row.length - 1; j >= 0; j--) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n  return result;\n};"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "const sort_array = function (array: Array<number>): Array<number> {\n  const sum = array[0] + array[array.length - 1];\n  const sortedArray = [...array].sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n};"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const encrypt = function (s: string): string {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const shift = 2 * 2;\n  const encrypted = s.split('').map(c => {\n    if (alphabet.includes(c)) {\n      const index = alphabet.indexOf(c);\n      const encryptedIndex = (index + shift) % 26;\n      return alphabet[encryptedIndex];\n    } else {\n      return c;\n    }\n  });\n  return encrypted.join('');\n};"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>) : any  {\n  if (lst.length < 2) return null;\n  \n  let smallest = Infinity;\n  let second_smallest = Infinity;\n  \n  for (const num of lst) {\n    if (num < smallest) {\n      second_smallest = smallest;\n      smallest = num;\n    } else if (num < second_smallest && num !== smallest) {\n      second_smallest = num;\n    }\n  }\n  \n  return second_smallest;\n}"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n  const sentences = S.split(/[!.?]/).map(s => s.trim());\n  let boredoms = 0;\n\n  for (const sentence of sentences) {\n    if (sentence.startsWith('I')) {\n      boredoms++;\n    }\n  }\n\n  return boredoms;\n};"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "const any_int = function (x: number, y: number, z: number) : boolean  {\n    return (x === y + z) || (y === x + z) || (z === x + y);\n}\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const encode = function (message: string): string {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const encoded = message\n    .split('')\n    .map(char => {\n      if (vowels.includes(char.toLowerCase())) {\n        const index = vowels.indexOf(char.toLowerCase());\n        return String.fromCharCode(char.charCodeAt(0) + (index + 2) % 26);\n      } else {\n        return char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase();\n      }\n    })\n    .join('');\n  return encoded;\n};"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "const isPrime = (num: number) => {\n    if (num < 2) return false;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst sumDigits = (num: number) => {\n    return num.toString().split('').map(Number).reduce((acc, curr) => acc + curr, 0);\n};\n\nconst findLargestPrime = (lst: Array<number>) => {\n    let largestPrime = 0;\n    for (const num of lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    return largestPrime;\n};\n\nconst solve = (lst: Array<number>) => {\n    const largestPrime = findLargestPrime(lst);\n    return sumDigits(largestPrime);\n};"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>) : boolean  {\n  if (dict.size === 0) {\n    return false;\n  }\n\n  const firstKey = Object.keys(dict)[0].toLowerCase();\n  const isLowerCase = firstKey === firstKey.toLowerCase();\n\n  return Object.keys(dict).every(key => {\n    return isLowerCase ? key.toLowerCase() === firstKey : key.toUpperCase() === firstKey;\n  });\n};"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const count_up_to = function (n: number): Array<number> {\n  const primes: Array<number> = [];\n\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n\n  return primes;\n};"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function (a: number, b: number) : number {\n  return (a % 10) * (b % 10);\n};"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "const count_upper = function (s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "const closest_integer = function (value: string): number {\n  const number = parseFloat(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n\n  if (Math.abs(number - floor) === Math.abs(number - ceil)) {\n    return number > 0 ? ceil : floor;\n  } else {\n    return number > 0 ? floor : ceil;\n  }\n};"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n  const result = [n];\n\n  while (n > 1) {\n    n = n % 2 === 0 ? n - 1 : n + 1;\n    result.push(n);\n  }\n\n  return result.reverse();\n};"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "const words_string = function (s: string) : Array<string> {\n  // Split the string into words using both commas and spaces as separators\n  return s.split(/[, ]+/);\n};"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n  let result = -1;\n\n  for (let i = y; i >= x; i--) {\n    if (i % 2 === 0) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number) : any  {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const average = Math.round(sum / (m - n + 1));\n  return \"0b\" + average.toString(2);\n};"}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const unique_digits = function (x: Array<number>) : Array<number> {\n  const result = x.filter(num => !num.toString().includes('2'));\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "function sortAndName(arr: number[]): string[] {\n  // Sort integers between 1 and 9 inclusive\n  const sortedArr = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n\n  // Reverse the sorted array\n  const reversedArr = sortedArr.reverse();\n\n  // Replace each digit by its corresponding name\n  const namedArr = reversedArr.map(num => {\n    switch (num) {\n      case 1: return 'One';\n      case 2: return 'Two';\n      case 3: return 'Three';\n      case 4: return 'Four';\n      case 5: return 'Five';\n      case 6: return 'Six';\n      case 7: return 'Seven';\n      case 8: return 'Eight';\n      case 9: return 'Nine';\n      default: return '';\n    }\n  });\n\n  return namedArr;\n}"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(sum(i));\n    }\n  }\n\n  return result;\n};\n\nfunction factorial(n: number): number {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n}\n\nfunction sum(n: number): number {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n}"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number) : Array<number>  {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let reversed = parseInt(i.toString().split('').reverse().join(''));\n\n    if (i === reversed) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "const count_nums = function(arr: Array<number>): number {\n    return arr.reduce((acc, num) => {\n        const sum = num.toString()\n            .split('')\n            .map(digit => parseInt(digit))\n            .reduce((acc, digit) => acc + digit, 0);\n        return num > 0 || sum > 0 ? acc + 1 : acc;\n    }, 0);\n};"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>) : boolean  {\n  if (arr.length === 0) return true;\n  \n  let min = arr[0];\n  let count = 0;\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      count++;\n    }\n  }\n  \n  return count <= arr.length - 1;\n}"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n  let evenCount = lst1.filter(num => num % 2 === 0).length;\n\n  while (evenCount !== lst1.length) {\n    const odd = lst2.shift();\n    if (odd % 2 === 0) {\n      evenCount++;\n    }\n    lst1.push(odd);\n  }\n\n  return evenCount === lst1.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "const histogram = function (test: string): Map<string, number> {\n  const map = new Map<string, number>();\n  const arr = test.split(' ');\n\n  for (const letter of arr) {\n    if (map.has(letter)) {\n      map.set(letter, map.get(letter) + 1);\n    } else {\n      map.set(letter, 1);\n    }\n  }\n\n  return map;\n};"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string) : Array<any>  {\n    const charSet = new Set(c.split(''));\n    let result = '';\n\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (!charSet.has(s[i])) {\n            result = s[i] + result;\n        }\n    }\n\n    return [result, result === result.split('').reverse().join('')];\n}"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const odd_count = function (lst: Array<string>): Array<string> {\n  return lst.map(str => {\n    const oddDigits = str.split('').filter(digit => Number(digit) % 2 !== 0).length;\n    return `the number of odd elements ${oddDigits}n the str${oddDigits}ng ${oddDigits} of the ${oddDigits}nput.`;\n  });\n};"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "const minSubArraySum = function (nums: Array<number>): number {\n  let minSum = Infinity;\n  let currentSum = 0;\n\n  for (const num of nums) {\n    currentSum += num;\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n\n  return minSum;\n};"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "import * as math from 'mathjs'\n\nconst max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const totalWater = rows * cols;\n\n  let filledWater = 0;\n  let lowers = 0;\n\n  while (filledWater < totalWater) {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (grid[i][j] === 1 && filledWater < capacity) {\n          filledWater++;\n          grid[i][j] = 0;\n        }\n      }\n    }\n    lowers++;\n  }\n\n  return lowers;\n};"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "const sort_array = function (arr: Array<number>) : Array<number> {\n  return arr.sort((a, b) => {\n    const onesA = a.toString(2).replace(/0/g, '').length;\n    const onesB = b.toString(2).replace(/0/g, '').length;\n\n    if (onesA === onesB) {\n      return a - b;\n    }\n\n    return onesA - onesB;\n  });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "const select_words = function (s: string, n: number) : Array<string> {\n  if (!s) return [];\n\n  const words = s.split(' ');\n  const result = [];\n\n  for (const word of words) {\n    let consonantCount = 0;\n\n    for (const char of word) {\n      if ('aeiou'.indexOf(char.toLowerCase()) === -1) {\n        consonantCount++;\n      }\n    }\n\n    if (consonantCount === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const isVowel = (char: string): boolean => /[aeiouAEIOU]/.test(char);\nconst isConsonant = (char: string): boolean => /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/.test(char);\n\nconst get_closest_vowel = function (word: string): string {\n  const letters = [...word];\n  let leftConsonantIndex = -1;\n  let rightConsonantIndex = -1;\n  let closestVowel = '';\n\n  for (let i = 0; i < letters.length; i++) {\n    if (isConsonant(letters[i])) {\n      leftConsonantIndex = i;\n    }\n    if (isConsonant(letters[letters.length - 1 - i])) {\n      rightConsonantIndex = letters.length - 1 - i;\n    }\n\n    if (leftConsonantIndex !== -1 && rightConsonantIndex !== -1) {\n      if (isVowel(letters[i]) && i > leftConsonantIndex && i < rightConsonantIndex) {\n        closestVowel = letters[i];\n        break;\n      }\n    }\n  }\n\n  return closestVowel;\n};"}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "const match_parens = function (lst: Array<string>) : string  {\n    let count = 0;\n\n    for (const char of lst) {\n        if (char === '(') {\n            count++;\n        } else {\n            count--;\n        }\n\n        if (count < 0) {\n            return 'No';\n        }\n    }\n\n    return count === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "const maximum = function(arr: Array<number>, k: number) : Array<number>  {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "const solution = function (lst: Array<number>): number {\n  return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((acc, num) => acc + num, 0);\n};"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number) : number  {\n  return arr.slice(0, k).reduce((sum, num) => {\n    if (num < 100) {\n      sum += num;\n    }\n    return sum;\n  }, 0);\n};"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "const get_odd_collatz = function (n: number): Array<number> {\n  const result: Array<number> = [];\n  let current = n;\n\n  while (current !== 1) {\n    if (current % 2 === 1) {\n      result.push(current);\n    }\n    current = current % 2 === 0 ? current / 2 : (3 * current) + 1;\n  }\n\n  return result.sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "const valid_date = function (date: string): boolean {\n  const dateRegex = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n\n  if (!dateRegex.test(date)) {\n    return false;\n  }\n\n  const [month, day, year] = date.split('-').map(Number);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > new Date(year, month, 0).getDate()) {\n    return false;\n  }\n\n  return true;\n};"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "function split_words(txt: string): any {\n  if (txt.trim().split(/\\s+/).length > 0) {\n    return txt.trim().split(/\\s+/);\n  } else if (txt.trim().split(/,/).length > 0) {\n    return txt.trim().split(/,/);\n  } else {\n    return [...txt.match(/[a-z]/gi)].filter((x, i) => i % 2 !== 0).length;\n  }\n}"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "const is_sorted = function (lst: Array<number>) : boolean  {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n        if (lst.indexOf(lst[i]) !== lst.lastIndexOf(lst[i])) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "function intersection(interval1: number[], interval2: number[]): string {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // Check if the intervals intersect\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const length = Math.min(end1, end2) - Math.max(start1, start2) + 1;\n\n  // Check if the length is prime\n  if (isPrime(length)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nfunction isPrime(num: number): boolean {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "const prod_signs = function (arr: Array<number>) : number | null {\n  if (arr.length === 0) return null;\n\n  let product = 1;\n  let sum = 0;\n\n  for (const num of arr) {\n    const sign = num > 0 ? 1 : num < 0 ? -1 : 0;\n    product *= sign;\n    sum += Math.abs(num);\n  }\n\n  return product * sum;\n};"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "const minPath = function (grid: Array<Array<number>>, k: number) : Array<number> {\n    const N = grid.length;\n    const visited = new Array(N).fill(null).map(() => new Array(N).fill(false));\n    const values = new Array(N * N + 1).fill(0);\n\n    const dfs = (row: number, col: number, count: number) => {\n        if (count === k) {\n            for (let i = 1; i <= N * N; i++) {\n                if (!values[i]) {\n                    values[i] = grid[row][col];\n                    return;\n                }\n            }\n        }\n\n        visited[row][col] = true;\n        values[grid[row][col]] = count;\n\n        for (const [dr, dc] of [[-1, 0], [0, -1], [1, 0], [0, 1]]) {\n            const nextRow = row + dr;\n            const nextCol = col + dc;\n\n            if (nextRow >= 0 && nextRow < N && nextCol >= 0 && nextCol < N && !visited[nextRow][nextCol]) {\n                dfs(nextRow, nextCol, count + 1);\n            }\n        }\n\n        visited[row][col] = false;\n        values[grid[row][col]] = 0;\n    };\n\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            dfs(i, j, 1);\n        }\n    }\n\n    return Object.entries(values)\n        .filter(([value]) => value !== 0)\n        .map(([value]) => parseInt(value))\n        .sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n  const result: Array<number> = [];\n  result[0] = 3;\n  result[1] = 1;\n  result[2] = 2;\n\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      result[i] = 1 + i / 2;\n    } else {\n      result[i] = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "const digits = function (n: number): number {\n  let product = 1;\n\n  while (n > 0) {\n    const digit = n % 10;\n\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n\n    n = Math.floor(n / 10);\n  }\n\n  return product === 1 ? 0 : product;\n};"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n  let count = 0;\n\n  for (const char of string0) {\n    if (char === '[') {\n      count++;\n    } else if (char === ']') {\n      count--;\n    }\n\n    if (count < 0) {\n      return false;\n    }\n  }\n\n  return count === 0;\n};\n</end_of_turn>"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n  return lst.map(num => Math.ceil(num)).reduce((acc, num) => acc + num * num, 0);\n};"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string) : boolean {\n  if (txt.trim() === \"\") {\n    return false;\n  }\n\n  const lastChar = txt.trim().split(\" \").pop()!.slice(-1);\n  return /[a-zA-Z]/.test(lastChar) && !/\\s/.test(lastChar);\n};"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) {\n      return i - 1;\n    }\n  }\n  return -1;\n};"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): Array<any> {\n  let largestNegative = null;\n  let smallestPositive = null;\n\n  for (const num of lst) {\n    if (num < 0 && (largestNegative === null || num > largestNegative)) {\n      largestNegative = num;\n    }\n\n    if (num > 0 && (smallestPositive === null || num < smallestPositive)) {\n      smallestPositive = num;\n    }\n  }\n\n  return [largestNegative, smallestPositive];\n};"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "function compare_one(a: number | string, b: number | string): number | string | null {\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(/,/g, ''));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(/,/g, ''));\n  }\n\n  if (a > b) {\n    return a;\n  } else if (b > a) {\n    return b;\n  } else {\n    return null;\n  }\n}"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "const is_equal_to_sum_even = function (n: number): boolean {\n  if (n % 2 !== 0) {\n    return false;\n  }\n\n  for (let i = 2; i <= n - 2; i += 2) {\n    if (n === i + i + 2 + 4) {\n      return true;\n    }\n  }\n\n  return false;\n};"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "const special_factorial = function(n: number): number {\n  if (n <= 1) return 1;\n  return n * special_factorial(n - 1);\n};"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "const fix_spaces = function (text: string): string {\n  return text\n    .replace(/\\s+/g, m => m.length > 2 ? '-' : '_')\n    .replace(/\\s/g, '_');\n};"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "const file_name_check = function (file_name: string): string {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]$/;\n  return regex.test(file_name) ? 'Yes' : 'No';\n};"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n  return lst.reduce((acc, num) => acc + num * num, 0);\n};"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst words_in_sentence = (sentence: string): string => {\n  const words = sentence.split(' ');\n  const primeWords = words.filter((word) => isPrime(word.length));\n  return primeWords.join(' ');\n};"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "const simplify = function (x: string, n: string): boolean {\n  const [xNum, xDen] = x.split('/').map(Number);\n  const [nNum, nDen] = n.split('/').map(Number);\n\n  const product = (xNum * nNum) / (xDen * nDen);\n\n  return Number.isInteger(product);\n};"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>) : Array<number>  {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, digit) => acc + +digit, 0);\n    const sumB = b.toString().split('').reduce((acc, digit) => acc + +digit, 0);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n\n    return sumA - sumB;\n  });\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "const specialFilter = function(nums: Array<number>): number {\n    return nums.filter(num => num > 10 && (num.toString()[0] % 2 === 1) && (num.toString()[num.toString().length - 1] % 2 === 1)).length;\n}"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "const get_max_triples = function (n: number) : number  {\n    const a = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n    let count = 0;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction bf(planet1: string, planet2: string): string[] {\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n\n  return planets.slice(planet1Index + 1, planet2Index).sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n}"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "const list_sort = function (lst: Array<string>) : Array<string>  {\n  return lst\n    .filter(word => word.length % 2 === 0)\n    .sort((a, b) => {\n      if (a.length === b.length) {\n        return a.localeCompare(b);\n      }\n      return a.length - b.length;\n    });\n};"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "const isPrime = (n: number): boolean => {\n  if (n <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst x_or_y = (n: number, x: number, y: number): number => {\n  return isPrime(n) ? x : y;\n};"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>) : number {\n  return lst.reduce((acc, num) => {\n    if (Number.isInteger(num) && num > 0 && num % 2 !== 0) {\n      return acc + Math.pow(num, 2);\n    }\n    return acc;\n  }, 0);\n};"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "const compare = function (game: Array<number>, guess: Array<number>) : Array<number>  {\n  return game.map((score, i) => Math.abs(score - guess[i]));\n};"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>) : string  {\n  let strongestExtension = '';\n  let strongestStrength = -Infinity;\n\n  extensions.forEach(extension => {\n    const uppercaseCount = extension.match(/[A-Z]/g)?.length || 0;\n    const lowercaseCount = extension.match(/[a-z]/g)?.length || 0;\n    const strength = uppercaseCount - lowercaseCount;\n\n    if (strength > strongestStrength) {\n      strongestExtension = extension;\n      strongestStrength = strength;\n    }\n  });\n\n  return `${class_name}.${strongestExtension}`;\n};"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n  const rotations = new Set();\n  for (let i = 0; i < b.length; i++) {\n    rotations.add(b.slice(i) + b.slice(0, i));\n  }\n  return [...rotations].some(rotation => a.includes(rotation));\n};"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "const even_odd_count = function (num: number) : Array<number> {\n  let even = 0;\n  let odd = 0;\n\n  while (num !== 0) {\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n\n  return [even, odd];\n};"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "const int_to_mini_roman = function (number: number): string {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n    let result = \"\";\n\n    for (let i = 0; i < values.length; i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n            result += symbols[i];\n        }\n    }\n\n    return result.toLowerCase();\n};"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n  const sides = [a, b, c].sort((a, b) => a - b);\n  return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n};"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "const find_max = function (words: Array<string>) : string  {\n  let maxCount = 0;\n  let result = \"\";\n\n  for (const word of words) {\n    const uniqueChars = new Set(word.split(\"\")).size;\n\n    if (uniqueChars > maxCount || (uniqueChars === maxCount && word < result)) {\n      maxCount = uniqueChars;\n      result = word;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "const eat = function (number: number, need: number, remaining: number): Array<number> {\n  let total = number + remaining;\n  let left = total - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n};"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "const do_algebra = function (operator: Array<string>, operand: Array<number>) : number  {\n  let result = operand[0];\n\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n      case '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "const solve = function (s: string): string {\n  return [...s]\n    .map((c) => (/[a-zA-Z]/.test(c) ? c.toUpperCase() : c.toLowerCase()))\n    .reverse()\n    .join('');\n};"}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function (text: string): string | null {\n  if (text === '') {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n};"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n  const result: Array<number> = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result.reverse();\n};"}

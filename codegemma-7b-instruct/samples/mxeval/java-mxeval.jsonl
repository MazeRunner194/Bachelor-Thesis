{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.util.Collections;\nimport java.util.List;\n\npublic class HasCloseElements {\n\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        Collections.sort(numbers);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i - 1)) < threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SeparateParenGroups {\n\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        int count = 0;\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                count++;\n                currentGroup.append(c);\n            } else if (c == ')') {\n                count--;\n                currentGroup.append(c);\n                if (count == 0) {\n                    groups.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n\n        return groups;\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "public static Double truncateNumber(Double number) {\n    return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.util.List;\n\npublic class BelowZero {\n\n    public static boolean belowZero(List<Object> operations) {\n        int balance = 0;\n\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                int amount = (Integer) operation;\n                balance += amount;\n                if (balance < 0) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "import java.util.List;\n\npublic class MeanAbsoluteDeviation {\n\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n\n        // Calculate the mean of the dataset\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n\n        // Calculate the absolute difference between each element and the mean\n        double absDifference = 0;\n        for (double number : numbers) {\n            absDifference += Math.abs(number - mean);\n        }\n\n        // Calculate the mean absolute deviation\n        return absDifference / numbers.size();\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ParseNestedParens {\n\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> maxLevels = new ArrayList<>();\n        int currentLevel = 0;\n\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                currentLevel++;\n            } else if (c == ')') {\n                maxLevels.add(currentLevel);\n                currentLevel--;\n            }\n        }\n\n        return maxLevels;\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FilterBySubstring {\n\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n        List<Object> filteredStrings = new ArrayList<>();\n\n        for (Object str : strings) {\n            if (str.toString().contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n\n        return filteredStrings;\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SumProduct {\n\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                int num = (int) number;\n                sum += num;\n                product *= num;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class RollingMax {\n\n    public static List<Object> rollingMax(List<Object> numbers) {\n        List<Object> result = new ArrayList<>();\n        int max = (Integer) numbers.get(0);\n\n        for (int i = 0; i < numbers.size(); i++) {\n            int current = (Integer) numbers.get(i);\n\n            if (current > max) {\n                max = current;\n            }\n\n            result.add(max);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MakePalindrome {\n    public static String makePalindrome(String string) {\n        int n = string.length();\n        if (n <= 1) {\n            return string;\n        }\n\n        // Find the longest palindrome postfix\n        int start = 0, end = n - 1;\n        while (start < end && string.charAt(start) != string.charAt(end)) {\n            start++;\n        }\n        int length = n - start - end;\n\n        // Create the palindrome by appending reverse of prefix\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(string.substring(0, start));\n        sb.reverse();\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "class StringXor {\n    public static String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "public static String longest(List<Object> strings) {\n    if (strings.isEmpty()) {\n        return null;\n    }\n\n    String longestString = (String) strings.get(0);\n    int maxLength = longestString.length();\n\n    for (int i = 1; i < strings.size(); i++) {\n        String currentString = (String) strings.get(i);\n        int currentLength = currentString.length();\n\n        if (currentLength > maxLength) {\n            longestString = currentString;\n            maxLength = currentLength;\n        }\n    }\n\n    return longestString;\n}\n</end_of_turn>"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "while (a != b) {\n            if (a > b) {\n                a -= b;\n            } else {\n                b -= a;\n            }\n        }\n        return a;\n    }"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AllPrefixes {\n\n    public static List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n\n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i + 1));\n        }\n\n        return prefixes;\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "public static String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "class CountDistinctCharacters {\n    public static int countDistinctCharacters(String string) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class ParseMusic {\n\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beats = new ArrayList<>();\n        char[] notes = musicString.toCharArray();\n\n        for (char note : notes) {\n            switch (note) {\n                case 'o':\n                    beats.add(4);\n                    break;\n                case '|':\n                    beats.add(2);\n                    break;\n                case '.':\n                    beats.add(1);\n                    break;\n            }\n        }\n\n        return beats;\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "public class HowManyTimes {\n\n    public static int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index += substring.length();\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class SortNumbers {\n    public static String sortNumbers(String numbers) {\n        String[] numArray = numbers.split(\" \");\n        Arrays.sort(numArray, Comparator.naturalOrder());\n        StringBuilder sb = new StringBuilder();\n        for (String num : numArray) {\n            sb.append(num).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class FindClosestElements {\n\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n\n        int size = numbers.size();\n        if (size <= 2) {\n            return numbers;\n        }\n\n        double minDifference = Double.MAX_VALUE;\n        int index = 0;\n\n        for (int i = 1; i < size - 1; i++) {\n            double difference = Math.abs(numbers.get(i) - numbers.get(i - 1));\n            if (difference < minDifference) {\n                minDifference = difference;\n                index = i;\n            }\n        }\n\n        return new ArrayList<>(numbers.subList(index - 1, index + 2));\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class RescaleToUnit {\n\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        // Find the minimum and maximum values\n        for (double number : numbers) {\n            min = Math.min(min, number);\n            max = Math.max(max, number);\n        }\n\n        // Rescale the numbers to the range [0, 1]\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            rescaledNumbers.add((number - min) / (max - min));\n        }\n\n        return rescaledNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FilterIntegers {\n\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> integers = new ArrayList<>();\n\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add(value);\n            }\n        }\n\n        return integers;\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "class Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n        return string.length();\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "```java\n    public static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Factorize {\n\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n\n        if (n > 1) {\n            factors.add(n);\n        }\n\n        return factors;\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class RemoveDuplicates {\n\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        HashSet<Object> seen = new HashSet<>();\n        List<Object> result = new ArrayList<>();\n\n        for (Object number : numbers) {\n            if (seen.add(number)) {\n                result.add(number);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "class FlipCase {\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "public static String concatenate(List<Object> strings) {\n    StringBuilder sb = new StringBuilder();\n    for (Object str : strings) {\n        sb.append(str);\n    }\n    return sb.toString();\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FilterByPrefix {\n\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n        List<Object> filteredStrings = new ArrayList<>();\n\n        for (Object str : strings) {\n            if (str.toString().startsWith(prefix)) {\n                filteredStrings.add(str);\n            }\n        }\n\n        return filteredStrings;\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GetPositive {\n\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positive = new ArrayList<>();\n\n        for (Object num : l) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n > 0) {\n                    positive.add(n);\n                }\n            }\n        }\n\n        return positive;\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    int i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i += 6;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SortThird {\n\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> oddIndices = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                evenIndices.add(l.get(i));\n            } else {\n                oddIndices.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenIndices);\n\n        List<Integer> result = new ArrayList<>();\n        result.addAll(oddIndices);\n        result.addAll(evenIndices);\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Unique {\n\n    public static List<Integer> unique(List<Integer> l) {\n        HashSet<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer element : l) {\n            if (!set.contains(element)) {\n                set.add(element);\n                result.add(element);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "class MaxElement {\n    public static int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "class FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n        int count = 0;\n\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String number = \"\" + i;\n                for (char c : number.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(l.get(i));\n            } else {\n                odd.add(l.get(i));\n            }\n        }\n\n        Collections.sort(even);\n\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l.set(i, even.get(j));\n                j++;\n            }\n        }\n\n        return l;\n    }\n</start_of_turn>"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    static int fib(int n) {\n        if (n <= 1) return n;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    public static int primeFib(int n) {\n        int i = 2;\n        while (true) {\n            int num = fib(i);\n            if (isPrime(num) && i <= n) {\n                return num;\n            }\n            i++;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "class TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        int n = l.size();\n        if (n < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < n - 2; i++) {\n            int j = i + 1;\n            int k = n - 1;\n\n            while (j < k) {\n                int sum = l.get(i) + l.get(j) + l.get(k);\n\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "public static int carRaceCollision(int n) {\n    return n;\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "public static List<Object> incrList(List<Object> l) {\n        List<Object> result = new ArrayList<>(l.size());\n        for (Object o : l) {\n            result.add(Math.addExact((Number) o, 1));\n        }\n        return result;\n    }"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n        HashSet<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "```java\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n        StringBuilder sb = new StringBuilder();\n        int num = x;\n        while (num > 0) {\n            int digit = num % base;\n            sb.insert(0, digit);\n            num /= base;\n        }\n        if (sb.length() == 0) {\n            sb.append(0);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "return (double) 0.5 * a * h;\n    }"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "public static int fib4(int n) {\n        int a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n            d = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.util.Collections;\nimport java.util.List;\n\npublic class Median {\n\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "public static Boolean isPalindrome(String text) {\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "public static int modp(int n, int p) {\n    int result = 1;\n    n = n % p;\n\n    while (n > 0) {\n        if ((n & 1) == 1) {\n            result = (result * n) % p;\n        }\n        n >>= 1;\n        if (n > 0) {\n            n = (n * n) % p;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "class RemoveVowels {\n    public static String removeVowels(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "```java\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "return x + y;"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "class SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        return Arrays.equals(c0, c1);\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "if (n <= 1) {\n            return n;\n        } else {\n            int a = 0, b = 1, c;\n            for (int i = 2; i <= n; i++) {\n                c = a + b;\n                a = b;\n                b = c;\n            }\n            return b;\n        }\n    }"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "import java.util.Stack;\n\npublic class CorrectBracketing {\n\n    public static boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "public static Boolean monotonic(List<Integer> l) {\n        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                isDecreasing = false;\n            } else if (l.get(i) < l.get(i - 1)) {\n                isIncreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class Common {\n\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        HashSet<Integer> set1 = new HashSet<>(l1);\n        HashSet<Object> set2 = new HashSet<>(l2);\n\n        List<Object> commonElements = new ArrayList<>();\n\n        for (Object element : set2) {\n            if (set1.contains(element)) {\n                commonElements.add(element);\n            }\n        }\n\n        return commonElements;\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "public static int largestPrimeFactor(int n) {\n        int factor = 2;\n        while (factor * factor <= n) {\n            while (n % factor == 0) {\n                n /= factor;\n            }\n            factor++;\n        }\n        return n;\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "class SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "public static Boolean correctBracketing(String brackets) {\n    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets.charAt(i) == '(') {\n            count++;\n        } else if (brackets.charAt(i) == ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n}\n</end_of_turn>"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n        return res;\n    }"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "```java\npublic static int fibfib(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && i == s.length() - 1)) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        shift %= n;\n        if (shift == 0) {\n            return s;\n        }\n        return s.substring(n - shift) + s.substring(0, n - shift);\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "```java\npublic static int digitsum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "public static int fruitDistribution(String s, int n) {\n        String[] fruits = s.split(\" and \");\n        int apples = Integer.parseInt(fruits[0].split(\" \")[1]);\n        int oranges = Integer.parseInt(fruits[1].split(\" \")[1]);\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Pluck {\n    public static List<Object> pluck(List<Object> arr) {\n        List<Object> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int value = (int) arr.get(i);\n            if (value % 2 == 0 && value <= minEven) {\n                minEven = value;\n                minIndex = i;\n            }\n        }\n\n        if (minIndex != -1) {\n            result.add(minEven);\n            result.add(minIndex);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n\n        // Calculate frequencies\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Find the greatest integer with frequency >= itself\n        int result = -1;\n        for (int num : freqMap.keySet()) {\n            if (freqMap.get(num) >= num) {\n                result = Math.max(result, num);\n            }\n        }\n\n        return result;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class StrangeSortList {\n\n    public static List<Object> strangeSortList(List<Object> lst) {\n        List<Object> result = new ArrayList<>();\n\n        if (lst.isEmpty()) {\n            return result;\n        }\n\n        Collections.sort(lst);\n\n        int start = 0;\n        int end = lst.size() - 1;\n\n        while (start <= end) {\n            result.add(lst.get(start));\n            result.add(lst.get(end));\n            start++;\n            end--;\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class TriangleArea {\n\n    public static Number triangleArea(int a, int b, int c) {\n        if ((a + b > c) && (b + c > a) && (c + a > b)) {\n            double s = (a + b + c) / 2.0;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int start = 0;\n        int end = q.size() - 1;\n        while (start <= end) {\n            if (q.get(start) != q.get(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "public class SmallestChange {\n\n    public static int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int count = 0;\n\n        for (int i = 0; i < n / 2; i++) {\n            if (arr.get(i) != arr.get(n - i - 1)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\n        for (Object str : lst1) {\n            sum1 += ((String) str).length();\n        }\n\n        for (Object str : lst2) {\n            sum2 += ((String) str).length();\n        }\n\n        if (sum1 == sum2) {\n            return lst1;\n        } else if (sum1 < sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "```java\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            while (a % i == 0) {\n                count++;\n                a /= i;\n            }\n        }\n        return count == 3;\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "public static Boolean isSimplePower(int x, int n) {\n        int result = n;\n        while (result < x) {\n            result *= n;\n        }\n        return result == x;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "public static Boolean iscube(int a) {\n        int i = 0;\n        while (Math.pow(i, 3) <= a) {\n            if (Math.pow(i, 3) == a) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "public class HexKey {\n\n    public static int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            int digit = 0;\n            if (Character.isDigit(c)) {\n                digit = c - '0';\n            } else {\n                digit = c - 'A' + 10;\n            }\n            if (isPrime(digit)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean isPrime(int digit) {\n        if (digit <= 1) {\n            return false;\n        }\n        if (digit <= 3) {\n            return true;\n        }\n        if (digit % 2 == 0 || digit % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        while (i * i <= digit) {\n            if (digit % i == 0 || digit % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder(\"db\");\n        int remainder;\n        while (decimal > 0) {\n            remainder = decimal % 2;\n            binary.insert(1, remainder);\n            decimal /= 2;\n        }\n        while (binary.length() <= 7) {\n            binary.insert(1, '0');\n        }\n        binary.append(\"db\");\n        return binary.toString();\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "public static Boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "class StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 10;\n        }\n        return (int) (Math.pow(10, n - 1) - Math.pow(10, n - 2) + 1);\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n    public static String solve(int n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            int digit = n % 2;\n            sb.insert(0, digit);\n            n /= 2;\n        }\n        String binaryString = sb.toString();\n        int sum = 0;\n        for (int i = 0; i < binaryString.length(); i++) {\n            sum += Integer.parseInt(binaryString.substring(i, i + 1));\n        }\n        return Integer.toString(sum);\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "public static int add(List<Integer> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n            sum += lst.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "public static String antiShuffle(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            sb.append(chars[i]);\n        }\n        return sb.toString();\n    }"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class GetRow {\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<>();\n\n        if (lst.isEmpty()) {\n            return result;\n        }\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = (List<Integer>) lst.get(i);\n\n            if (!row.isEmpty()) {\n                for (int j = row.size() - 1; j >= 0; j--) {\n                    if (row.get(j) == x) {\n                        result.add(new Object[]{i, j});\n                    }\n                }\n            }\n        }\n\n        Collections.sort(result, Comparator.comparingInt(o -> ((Object[]) o)[0])\n                .thenComparing(o -> ((Object[]) o)[1], Comparator.reverseOrder()));\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class SortArray {\n\n    public static List<Object> sortArray(List<Object> array) {\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += (int) array.get(i);\n        }\n\n        List<Object> sortedArray = new ArrayList<>(array);\n        if (sum % 2 == 1) {\n            Collections.sort(sortedArray);\n        } else {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        }\n\n        return sortedArray;\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isLetter(c)) {\n            char offset = (char) (i % 2 == 0 ? 2 * 2 : -2 * 2);\n            sb.append((char) ('a' + (c - 'a' + offset + 26) % 26));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.util.Collections;\nimport java.util.List;\n\npublic class NextSmallest {\n\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return null;\n        }\n        List<Integer> integers = new ArrayList<>();\n        for (Object item : lst) {\n            if (item instanceof Integer) {\n                integers.add((Integer) item);\n            }\n        }\n        Collections.sort(integers);\n        return integers.get(1);\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsBored {\n    public static int isBored(String s) {\n        int boredoms = 0;\n        String[] sentences = s.split(\"[.?!]\");\n\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n\n        return boredoms;\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "public static Boolean anyInt(Number x, Number y, Number z) {\n        if (x.intValue() == y.intValue() + z.intValue()) {\n            return true;\n        } else if (y.intValue() == x.intValue() + z.intValue()) {\n            return true;\n        } else if (z.intValue() == x.intValue() + y.intValue()) {\n            return true;\n        } else {\n            return false;\n        }\n    }"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n        char c = message.charAt(i);\n        if (Character.isLetter(c)) {\n            c = Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n            sb.append(c);\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.util.*;\n\npublic class Skjkasdkd {\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n\n        for (int i : lst) {\n            if (isPrime(i) && i > largestPrime) {\n                largestPrime = i;\n            }\n        }\n\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.util.Map;\n\npublic class CheckDictCase {\n\n    public static Boolean checkDictCase(Object dict) {\n        if (dict == null || ((Map<?, ?>) dict).isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : ((Map<?, ?>) dict).keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                allUpperCase = false;\n            } else if (key.toString().toUpperCase().equals(key.toString())) {\n                allLowerCase = false;\n            } else {\n                return false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class CountUpTo {\n\n    public static List<Object> countUpTo(int n) {\n        List<Object> primes = new ArrayList<>();\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "public static int multiply(int a, int b) {\n        return (a % 10) * (b % 10);\n    }"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "public static int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n\n        if (Math.abs(num - floor) == Math.abs(num - ceil)) {\n            return num > 0 ? ceil : floor;\n        } else {\n            return num > 0 ? ceil : floor;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n - 2;\n            } else {\n                n = n - 1;\n            }\n            pile.add(n);\n        }\n\n        Collections.reverse(pile);\n        return pile;\n    }"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class WordsString {\n\n    public static List<String> wordsString(String s) {\n        List<String> words = new ArrayList<>();\n\n        // Split the string into words based on commas or spaces\n        String[] tokens = s.split(\"[, ]+\");\n\n        // Add the words to the list\n        for (String token : tokens) {\n            words.add(token);\n        }\n\n        return words;\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n        int even = y - (y % 2);\n        if (even < x) {\n            return -1;\n        }\n        return even;\n    }"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "if (n > m) {\n        return -1;\n    } else {\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        int avg = (int) Math.round((double) sum / (m - n + 1));\n        return Integer.toBinaryString(avg);\n    }"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class UniqueDigits {\n\n    public static List<Object> uniqueDigits(List<Integer> x) {\n        List<Object> result = new ArrayList<>();\n\n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            while (num > 0) {\n                if (num % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                num /= 10;\n            }\n\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n\n        result.sort(Integer::compare);\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ByLength {\n\n    public static List<Object> byLength(List<Object> arr) {\n        List<Integer> numbers = new ArrayList<>();\n\n        // Extract numbers between 1 and 9\n        for (Object number : arr) {\n            if (number instanceof Integer && (int) number >= 1 && (int) number <= 9) {\n                numbers.add((Integer) number);\n            }\n        }\n\n        // Sort numbers in ascending order\n        Collections.sort(numbers);\n\n        // Reverse the sorted numbers\n        Collections.reverse(numbers);\n\n        // Create a list of string representations of the numbers\n        List<Object> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            switch (number) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FactorialOrSum {\n\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int product = 1;\n        for (int i = 1; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    private static int sum(int n) {\n        int total = 0;\n        for (int i = 1; i <= n; i++) {\n            total += i;\n        }\n        return total;\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenOddPalindrome {\n\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            String number = \"\" + i;\n            String reversedNumber = new StringBuilder(number).reverse().toString();\n\n            if (number.equals(reversedNumber)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "public static int countNums(List<Object> arr) {\n    int count = 0;\n    for (Object num : arr) {\n        int sum = 0;\n        int n = (int) num;\n        if (n < 0) {\n            n = -n;\n        }\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n\n        int max = (int) arr.get(0);\n        int count = 0;\n\n        for (int i = 1; i < arr.size(); i++) {\n            int num = (int) arr.get(i);\n\n            if (num > max) {\n                count++;\n                max = num;\n            }\n        }\n\n        return count <= arr.size() - 1;\n    }"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int evenCount = 0;\n    int oddCount = 0;\n\n    // Count the number of even and odd numbers in lst1\n    for (int num : lst1) {\n        if (num % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    // If all numbers in lst1 are even, return \"YES\"\n    if (oddCount == 0) {\n        return \"YES\";\n    }\n\n    // If lst2 has enough odd numbers to exchange with lst1, return \"YES\"\n    if (oddCount <= lst2.size()) {\n        return \"YES\";\n    }\n\n    // Otherwise, return \"NO\"\n    return \"NO\";\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Histogram {\n\n    public static Object histogram(String test) {\n        Map<String, Integer> letters = new HashMap<>();\n\n        // Count the occurrences of each letter\n        for (char c : test.toCharArray()) {\n            String letter = String.valueOf(c);\n            letters.put(letter, letters.getOrDefault(letter, 0) + 1);\n        }\n\n        // Find the maximum occurrence\n        int maxCount = 0;\n        for (int count : letters.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n\n        // Return the letters with the maximum occurrence\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : letters.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "public static List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < sb.length(); i++) {\n            if (c.contains(sb.charAt(i) + \"\")) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n\n        String reversed = sb.reverse().toString();\n        return Arrays.asList(sb.toString(), reversed.equals(sb.toString()));\n    }"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class OddCount {\n\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n\n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (c % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "public long minSubArraySum(int[] nums) {\n    long minSum = Integer.MAX_VALUE;\n    long currentSum = 0;\n\n    for (int num : nums) {\n        currentSum += num;\n        minSum = Math.min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n\n    return minSum;\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.util.List;\n\npublic class MaxFill {\n\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int filled = 0;\n        int turns = 0;\n\n        while (filled < rows * cols) {\n            int filledInTurn = 0;\n\n            for (int i = 0; i < rows; i++) {\n                for (int j = 0; j < cols; j++) {\n                    if (grid.get(i).get(j) == 1 && filledInTurn < capacity) {\n                        grid.get(i).set(j, 0);\n                        filled++;\n                        filledInTurn++;\n                    }\n                }\n            }\n\n            turns++;\n        }\n\n        return turns;\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class SortArray {\n\n    public static List<Object> sortArray(List<Object> arr) {\n        Comparator<Object> comparator = Comparator.comparing(a -> Integer.bitCount((Integer) a))\n                .thenComparing(Integer::compare);\n        arr.sort(comparator);\n        return arr;\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] arr = s.split(\" \");\n\n        for (String word : arr) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (!Character.isLetter(c) || Character.isLowerCase(c)) {\n                    continue;\n                }\n                count++;\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n\n        return words;\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "public static String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int n = arr.length;\n\n        for (int i = n - 2; i >= 0; i--) {\n            if (isVowel(arr[i])) {\n                if (!isVowel(arr[i + 1]) && !isVowel(arr[i + 2])) {\n                    return \"\" + arr[i];\n                }\n            }\n        }\n\n        return \"\";\n    }\n\n    public static boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.util.*;\n\npublic class MatchParens {\n    public static String matchParens(List<String> lst) {\n        int count = 0;\n        for (String s : lst) {\n            count += s.equals(\"(\") ? 1 : -1;\n        }\n        return count == 0 ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Maximum {\n\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>(k);\n        Collections.sort(arr);\n        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr.get(i) < 100) {\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GetOddCollatz {\n\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        int currentNumber = n;\n\n        while (currentNumber != 1) {\n            if (currentNumber % 2 != 0) {\n                oddNumbers.add(currentNumber);\n            }\n\n            if (currentNumber % 2 == 0) {\n                currentNumber /= 2;\n            } else {\n                currentNumber = 3 * currentNumber + 1;\n            }\n        }\n\n        oddNumbers.add(1);\n        oddNumbers.sort(Integer::compare);\n        return oddNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "public class ValidDate {\n\n    public static Boolean validDate(String date) {\n        try {\n            String[] parts = date.split(\"-\");\n            int month = Integer.parseInt(parts[0]);\n            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n\n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            if (day < 1 || day > 31) {\n                return false;\n            }\n\n            if (month == 2) {\n                if (day > 29) {\n                    return false;\n                }\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                if (day > 30) {\n                    return false;\n                }\n            }\n\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SplitWords {\n\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (Character.isLowerCase(txt.charAt(i)) && (txt.charAt(i) - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "```java\npublic static Boolean isSorted(List<Object> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i).toString().compareTo(lst.get(i + 1).toString()) > 0) {\n                return false;\n            }\n        }\n\n        Map<Object, Integer> countMap = new HashMap<>();\n        for (Object num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n\n        for (Map.Entry<Object, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() > 1) {\n                return false;\n            }\n        }\n\n        return true;\n    }"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\n\npublic class Intersection {\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start + 1;\n\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "class ProdSigns {\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (Object num : arr) {\n            int number = Integer.parseInt(num.toString());\n            product *= Math.signum(number) == 1 ? 1 : -1;\n            sum += Math.abs(number);\n        }\n\n        return product * sum;\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.util.*;\n\npublic class Minpath {\n\n    private static final int[][] DIRECTIONS = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        boolean[][] visited = new boolean[n][n];\n        return findPath(grid, 0, 0, k, visited);\n    }\n\n    private static List<Integer> findPath(List<List<Integer>> grid, int row, int col, int k, boolean[][] visited) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n\n        visited[row][col] = true;\n        List<Integer> path = new ArrayList<>();\n        path.add(grid.get(row).get(col));\n\n        for (int[] direction : DIRECTIONS) {\n            int nextRow = row + direction[0];\n            int nextCol = col + direction[1];\n\n            if (isValid(grid, nextRow, nextCol, visited)) {\n                List<Integer> subPath = findPath(grid, nextRow, nextCol, k - 1, visited);\n                if (!subPath.isEmpty()) {\n                    path.addAll(subPath);\n                    return path;\n                }\n            }\n        }\n\n        visited[row][col] = false;\n        return new ArrayList<>();\n    }\n\n    private static boolean isValid(List<List<Integer>> grid, int row, int col, boolean[][] visited) {\n        return row >= 0 && row < grid.size() && col >= 0 && col < grid.size() && !visited[row][col];\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Tribonacci {\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        result.add(3);\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "class IsNested {\n    public static Boolean isNested(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                count++;\n            } else if (string.charAt(i) == ']') {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.util.List;\n\npublic class SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            double roundedNum = Math.ceil(num.doubleValue());\n            sum += (int) Math.pow(roundedNum, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty()) {\n        return false;\n    }\n    String lastChar = txt.substring(txt.length() - 1);\n    return Character.isAlphabetic(lastChar.charAt(0)) && !txt.endsWith(\" \");\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "public static int canArrange(List<Object> arr) {\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i).compareTo(arr.get(i - 1)) < 0) {\n                return i - 1;\n            }\n        }\n        return -1;\n    }\n</start_of_turn>"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.util.List;\n\npublic class LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        int largestNegative = Integer.MIN_VALUE;\n        int smallestPositive = Integer.MAX_VALUE;\n\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n < 0 && n > largestNegative) {\n                    largestNegative = n;\n                } else if (n > 0 && n < smallestPositive) {\n                    smallestPositive = n;\n                }\n            }\n        }\n\n        if (largestNegative == Integer.MIN_VALUE) {\n            largestNegative = null;\n        }\n        if (smallestPositive == Integer.MAX_VALUE) {\n            smallestPositive = null;\n        }\n\n        return List.of(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "public class CompareOne {\n    public static Object compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return null;\n        }\n\n        if (a instanceof Integer && b instanceof Integer) {\n            return Math.max((Integer) a, (Integer) b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return Math.max((Float) a, (Float) b);\n        } else if (a instanceof String && b instanceof String) {\n            try {\n                float floatA = Float.parseFloat((String) a.replace(\",\", \"\"));\n                float floatB = Float.parseFloat((String) b.replace(\",\", \"\"));\n                return floatA > floatB ? a : b;\n            } catch (NumberFormatException e) {\n                return a.toString().compareTo(b.toString());\n            }\n        }\n\n        return null;\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n        if (n % 2 != 0) {\n            return false;\n        }\n        int count = 0;\n        int sum = 0;\n        int i = 2;\n        while (count < 4) {\n            if (n - i >= 0 && i % 2 == 0) {\n                sum += i;\n                count++;\n            }\n            i++;\n        }\n        return sum == n;\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "class SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "class FixSpaces {\n    public static String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        char[] chars = text.toCharArray();\n        boolean lastSpace = false;\n        int countConsecutiveSpaces = 0;\n\n        for (char c : chars) {\n            if (c == ' ') {\n                countConsecutiveSpaces++;\n                if (lastSpace) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                if (countConsecutiveSpaces > 2) {\n                    countConsecutiveSpaces = 2;\n                }\n                for (int i = 0; i < countConsecutiveSpaces; i++) {\n                    sb.append(\"_\");\n                }\n                sb.append(c);\n                lastSpace = false;\n                countConsecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class FileNameCheck {\n\n    public static String fileNameCheck(String fileName) {\n        int countDigits = 0;\n        int dotPosition = -1;\n        for (int i = 0; i < fileName.length(); i++) {\n            if (Character.isDigit(fileName.charAt(i))) {\n                countDigits++;\n            } else if (fileName.charAt(i) == '.') {\n                dotPosition = i;\n            }\n        }\n\n        if (countDigits > 3 || dotPosition == -1 || dotPosition == 0 || dotPosition == fileName.length() - 1) {\n            return \"No\";\n        }\n\n        String beforeDot = fileName.substring(0, dotPosition);\n        String afterDot = fileName.substring(dotPosition + 1);\n\n        if (!Character.isLetter(beforeDot.charAt(0)) || !Arrays.asList(\"txt\", \"exe\", \"dll\").contains(afterDot)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "public static int sumSquares(List<Object> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += Math.pow((int) lst.get(i), 2);\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += Math.pow((int) lst.get(i), 3);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class WordsInSentence {\n\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                sb.append(word).append(\" \");\n            }\n        }\n\n        return sb.toString().trim();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n    String[] xParts = x.split(\"/\");\n    String[] nParts = n.split(\"/\");\n\n    long xNumerator = Long.parseLong(xParts[0]);\n    long xDenominator = Long.parseLong(xParts[1]);\n    long nNumerator = Long.parseLong(nParts[0]);\n    long nDenominator = Long.parseLong(nParts[1]);\n\n    long gcd = findGCD(xDenominator, nDenominator);\n\n    long simplifiedNumerator = (xNumerator * nDenominator) / gcd;\n    long simplifiedDenominator = (xDenominator * nDenominator) / gcd;\n\n    return simplifiedDenominator % simplifiedNumerator == 0;\n}\n\nprivate static long findGCD(long a, long b) {\n    while (b != 0) {\n        long temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.Comparator;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        Comparator<Object> comparator = Comparator.comparing(OrderByPoints::sumOfDigits)\n                .thenComparing(Comparator.naturalOrder());\n        nums.sort(comparator);\n        return nums;\n    }\n\n    private static int sumOfDigits(Object num) {\n        int sum = 0;\n        String str = num.toString();\n        for (int i = 0; i < str.length(); i++) {\n            sum += Character.getNumericValue(str.charAt(i));\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "public static int specialfilter(List<Object> nums) {\n        int count = 0;\n\n        for (Object num : nums) {\n            int number = (int) num;\n\n            // Check if the number is greater than 10\n            if (number > 10) {\n\n                // Extract the first and last digits\n                int firstDigit = number / 10;\n                int lastDigit = number % 10;\n\n                // Check if both digits are odd\n                if ((firstDigit % 2 != 0) && (lastDigit % 2 != 0)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "public static int getMaxTriples(int n) {\n    int[] a = new int[n + 1];\n    for (int i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int count = 0;\n    for (int i = 1; i <= n - 2; i++) {\n        for (int j = i + 1; j <= n - 1; j++) {\n            for (int k = j + 1; k <= n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class PlanetsBetween {\n\n    public static List<Object> bf(String planet1, String planet2) {\n        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<Object> planetsBetween = new ArrayList<>();\n\n        if (Arrays.asList(planets).contains(planet1) && Arrays.asList(planets).contains(planet2)) {\n            int planet1Index = Arrays.asList(planets).indexOf(planet1);\n            int planet2Index = Arrays.asList(planets).indexOf(planet2);\n\n            for (int i = planet1Index + 1; i < planet2Index; i++) {\n                planetsBetween.add(planets[i]);\n            }\n        }\n\n        return planetsBetween;\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "public static List<String> sortedListSum(List<String> lst) {\n    // Remove odd-length words\n    lst.removeIf(s -> s.length() % 2 != 0);\n\n    // Sort the list by length in ascending order, then alphabetically\n    lst.sort((s1, s2) -> {\n        if (s1.length() == s2.length()) {\n            return s1.compareTo(s2);\n        } else {\n            return Integer.compare(s1.length(), s2.length());\n        }\n    });\n\n    return lst;\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n        boolean isPrime = true;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "public static int doubleTheDifference(List<Object> lst) {\n    int sum = 0;\n\n    for (Object num : lst) {\n        if (num instanceof Integer && ((Integer) num) % 2 != 0 && ((Integer) num) >= 0) {\n            sum += Math.pow((Integer) num, 2);\n        }\n    }\n\n    return sum;\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int prediction = guess.get(i);\n            int difference = Math.abs(score - prediction);\n            result.add(difference);\n        }\n        return result;\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        Collections.sort(extensions, Comparator.comparingDouble(StrongestExtension::strength));\n        return className + \".\" + extensions.get(extensions.size() - 1);\n    }\n\n    private static double strength(String extension) {\n        int cap = 0;\n        int sm = 0;\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                cap++;\n            } else if (Character.isLowerCase(c)) {\n                sm++;\n            }\n        }\n        return (double) cap - sm;\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        String temp = b;\n        for(int i = 0; i < b.length(); i++) {\n            temp = temp.charAt(temp.length() - 1) + temp.substring(0, temp.length() - 1);\n            if(a.contains(temp)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "public static List<Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n\n        return Arrays.asList(evenCount, oddCount);\n    }\n</end_of_turn>"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "class IntToMiniRoman {\n\n    public static String intToMiniRoman(int number) {\n        StringBuilder sb = new StringBuilder();\n\n        while (number >= 1000) {\n            sb.append(\"m\");\n            number -= 1000;\n        }\n\n        if (number >= 900) {\n            sb.append(\"cm\");\n            number -= 900;\n        }\n\n        while (number >= 500) {\n            sb.append(\"d\");\n            number -= 500;\n        }\n\n        if (number >= 400) {\n            sb.append(\"cd\");\n            number -= 400;\n        }\n\n        while (number >= 100) {\n            sb.append(\"c\");\n            number -= 100;\n        }\n\n        if (number >= 90) {\n            sb.append(\"xc\");\n            number -= 90;\n        }\n\n        while (number >= 50) {\n            sb.append(\"l\");\n            number -= 50;\n        }\n\n        if (number >= 40) {\n            sb.append(\"xl\");\n            number -= 40;\n        }\n\n        while (number >= 10) {\n            sb.append(\"x\");\n            number -= 10;\n        }\n\n        if (number >= 9) {\n            sb.append(\"ix\");\n            number -= 9;\n        }\n\n        while (number >= 5) {\n            sb.append(\"v\");\n            number -= 5;\n        }\n\n        if (number >= 4) {\n            sb.append(\"iv\");\n            number -= 4;\n        }\n\n        while (number >= 1) {\n            sb.append(\"i\");\n            number -= 1;\n        }\n\n        return sb.toString().toLowerCase();\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "public static Boolean rightAngleTriangle(int a, int b, int c) {\n        return Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2) ||\n               Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2) ||\n               Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2);\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FindMax {\n\n    public static String findMax(List<String> words) {\n        return words.stream()\n                .max((w1, w2) -> {\n                    int count1 = w1.chars().distinct().count();\n                    int count2 = w2.chars().distinct().count();\n                    if (count1 == count2) {\n                        return w1.compareTo(w2);\n                    }\n                    return Long.compare(count2, count1);\n                })\n                .orElse(\"\");\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Eat {\n\n    public static List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n\n        if (remaining < need - number) {\n            result.add(number + remaining);\n            result.add(0);\n        } else {\n            result.add(number + need);\n            result.add(remaining - (need - number));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class DoAlgebra {\n\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"//\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        if (sb.toString().equals(s)) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.MessageDigest;\n\npublic class StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            byte[] bytesOfText = text.getBytes(\"UTF-8\");\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            byte[] theMD5Hash = messageDigest.digest(bytesOfText);\n\n            StringBuilder hexString = new StringBuilder();\n            for (byte aHash : theMD5Hash) {\n                String hex = Integer.toHexString(0xFF & aHash);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n\n            return hexString.toString();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n            return null;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GenerateIntegers {\n    public static List<Object> generateIntegers(int a, int b) {\n        List<Object> evenDigits = new ArrayList<>();\n\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n\n        return evenDigits;\n    }\n}"}

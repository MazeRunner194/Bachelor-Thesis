{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.util.*;\n\npublic class HasCloseElements {\n\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Sorting the list in ascending order\n        Collections.sort(numbers);\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i + 1) - numbers.get(i)) < threshold) {\n                return true;\n            }\n        }\n        \n        // If no pair of elements is close to each other\n        return false;\n    }\n    \n    public static void main(String[] args){\n        List<Double> list1 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        List<Double> list2 = Arrays.asList(1.0, 2.0, 3.0);\n        \n        System.out.println(hasCloseElements(list1, 0.3)); //prints: true\n        System.out.println(hasCloseElements(list2, 0.5)); //prints: false\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.util.*;\npublic class SeparateParenGroups {\n    public static List<String> separateParenGroups(String s) {\n        List<String> result = new ArrayList<>();\n        Deque<Integer> stack = new ArrayDeque<>();\n        int last = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(s.substring(last, i + 1));\n                    last = i + 1;\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "public static Double truncateNumber(Double number) {\n    return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "public static Boolean belowZero(List<Integer> operations) {\n    int balance = 0;\n\n    for (int operation : operations) {\n        balance += operation;\n        \n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "// Calculate the mean of the dataset\n        double mean = numbers.stream()\n                              .mapToDouble(number -> number)\n                              .average()\n                              .getAsDouble();\n\n        // Calculate absolute difference from the mean for each element\n        List<Double> diffs = numbers.stream()\n                                    .map(number -> Math.abs(number - mean))\n                                    .collect(Collectors.toList());\n\n        // Calculate Mean Absolute Deviation as the average of the differences\n        double mad = diffs.stream()\n                          .mapToDouble(diff -> diff)\n                          .average()\n                          .getAsDouble();\n\n        return mad;\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "public class Intersperse {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); ++i) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.util.*;\n\npublic class ParseNestedParens {\n    \n    public static List<Integer> parseNestedParens(String parenString) {\n        String[] groups = parenString.split(\" \");\n        List<Integer> results = new ArrayList<>();\n        \n        for (String group: groups) {\n            int depth = 0, maxDepth = 0;\n            Stack<Character> stack = new Stack<>();\n            \n            for (char c: group.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (c == ')') {\n                    stack.pop();\n                    depth--;\n                }\n            }\n            \n            results.add(maxDepth);\n        }\n        \n        return results;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> res = parseNestedParens(\"(()()) ((())) () ((())()())\");\n        System.out.println(res);  // prints [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "import java.util.*;\n\npublic class FilterBySubstring {\n    public static List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        String substring = \"a\";\n        System.out.println(filterBySubstring(strings, substring));  // Output: [abc, bacd, array]\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.util.*;\n\npublic class SumProduct {\n    public static List<Number> sumProduct(List<Number> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (Number num : numbers) {\n            sum += num.intValue();\n            product *= num.intValue();\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n    \n    public static void main(String[] args) {\n        List<Number> list1 = Collections.emptyList();\n        List<Number> list2 = Arrays.asList(1, 2, 3, 4);\n        \n        System.out.println(sumProduct(list1)); // prints: [0, 1]\n        System.out.println(sumProduct(list2)); // prints: [10, 24]\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.util.*;\n\nclass RollingMax {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        // Create an empty list to store the result\n        List<Integer> maxList = new ArrayList<>();\n        \n        // Iterate over the input list\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i); // Assume first number is maximum\n            \n            // Compare current number with all preceding numbers\n            for (int j = 0; j <= i; j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            \n            // Add maximum number found so far to the result list\n            maxList.add(max);\n        }\n        \n        return maxList;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        System.out.println(rollingMax(numbers)); // [1, 2, 3, 3, 3, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "import java.util.*;\npublic class Main {\n    static void printPalindrome(String str) {\n        int len = str.length();\n        boolean[][] dp = new boolean[len][len];\n        \n        for (int l = 0; l < len; ++l) {\n            for (int i = 0, j = l; j < len; ++i, ++j) {\n                if(l == 0) {\n                    dp[i][j] = true;\n                } else if(l == 1 && str.charAt(i) == str.charAt(j)) {\n                    dp[i][j] = true;\n                } else if(str.charAt(i) == str.charAt(j)){\n                    dp[i][j] = dp[i + 1][j - 1];\n                }\n            }\n        }\n        \n        int i = 0, j = len - 1;\n        while(i < j && !dp[i][j]) {\n            System.out.println(\"Character at index \" + i + \" and \" + j + \" is not a part of palindrome\");\n            if (dp[i][j - 1]) {\n                --j;\n            } else {\n                ++i;\n            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for(int p = 0; p <= j; ++p) {\n            sb.append(str.charAt(p));\n        }\n        String rev = sb.reverse().toString();\n        \n        sb = new StringBuilder(rev);\n        while (i > 0) {\n            sb.append(str.charAt(i - 1));\n            --i;\n        }\n        \n        System.out.println(\"Shortest palindrome: \" + sb.toString());\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        printPalindrome(scanner.nextLine());\n        scanner.close();\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "public class StringXor {\n    public static void main(String[] args) {\n        System.out.println(stringXor(\"010\", \"110\")); //prints 100\n    }\n\n    public static String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i=0; i<a.length(); i++) {\n            char xor = (a.charAt(i) == b.charAt(i)) ? '0' : '1'; \n            result.append(xor);\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "public class Longest {\n    public static String longest(List<String> strings) {\n        if (strings.isEmpty()) return null;\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return longest;\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "return (b == 0) ? a : greatestCommonDivisor(b, a % b);  \n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "ArrayList<String> prefixList = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            prefixList.add(string.substring(0, i + 1));\n        }\n        return prefixList;\n    }\n\n    public static void main(String[] args) {\n        List<Object> result = allPrefixes(\"abc\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "import java.util.*;\n\npublic class StringSequence {\n    public static String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(' ');\n            }\n        }\n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(stringSequence(0));  // Output: \"0\"\n        System.out.println(stringSequence(5));  // Output: \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.util.*;\n\npublic class CountDistinctCharacters {\n    public static int countDistinctCharacters(String str) {\n        // Convert the string to lower case\n        String lowerCase = str.toLowerCase();\n        \n        // Create a HashSet to store distinct characters\n        Set<Character> set = new HashSet<>();\n        \n        // Add each character in the string to the HashSet\n        for (int i = 0; i < lowerCase.length(); i++) {\n            set.add(lowerCase.charAt(i));\n        }\n        \n        // Return the size of the HashSet which represents the number of distinct characters\n        return set.size();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countDistinctCharacters(\"xyzXYZ\"));  // Output: 3\n        System.out.println(countDistinctCharacters(\"Jerry\"));  // Output: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.util.*;\n\nclass ParseMusic {\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beats = new ArrayList<>();\n        String[] tokens = musicString.split(\" \");\n        \n        for (String token : tokens) {\n            switch (token) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> result = parseMusic(\"o o| .| o| o| .| .| .| .| o o\");\n        System.out.println(result); // Outputs: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "public static int howManyTimes(String string, String substring) {\n    if (string == null || string.length() == 0 || substring == null || substring.length() > string.length()) {\n        return 0;\n    }\n    \n    int count = 0;\n    int idx = -1;\n\n    while ((idx = string.indexOf(substring, idx + 1)) != -1) {\n        count++;\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    private static final Map<String, Integer> wordToNumber;\n    private static final Map<Integer, String> numberToWord;\n\n    static {\n        wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        numberToWord = new HashMap<>();\n        numberToWord.put(0, \"zero\");\n        numberToWord.put(1, \"one\");\n        numberToWord.put(2, \"two\");\n        numberToWord.put(3, \"three\");\n        numberToWord.put(4, \"four\");\n        numberToWord.put(5, \"five\");\n        numberToWord.put(6, \"six\");\n        numberToWord.put(7, \"seven\");\n        numberToWord.put(8, \"eight\");\n        numberToWord.put(9, \"nine\");\n    }\n\n    public static String sortNumbers(String numbers) {\n        List<Integer> nums = new ArrayList<>();\n        for (String word : numbers.split(\" \")) {\n            nums.add(wordToNumber.get(word));\n        }\n        Collections.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            if (sb.length() > 0) {\n                sb.append(' ');\n            }\n            sb.append(numberToWord.get(num));\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        List<Double> numbers = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2));\n        System.out.println(findClosestElements(numbers));\n    }\n    \n    public static List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        int firstIndex = 0;\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) - numbers.get(i - 1) < minDiff) {\n                minDiff = numbers.get(i) - numbers.get(i - 1);\n                firstIndex = i - 1;\n            }\n        }\n        return new ArrayList<>(Arrays.asList(numbers.get(firstIndex), numbers.get(firstIndex + 1)));\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.*;\n\npublic class RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        // Find min and max values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Calculate range of the list\n        double range = max - min;\n\n        // Initialize output list\n        List<Double> rescaledNumbers = new ArrayList<>();\n\n        for (double num : numbers) {\n            // Subtract min and divide by range for each number in the list\n            rescaledNumbers.add((num - min) / range);\n        }\n\n        return rescaledNumbers;\n    }\n    \n    public static void main(String[] args){\n\tList<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n\tSystem.out.println(rescaleToUnit(numbers));\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.util.*;\npublic class FilterIntegers {\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> intValues = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                intValues.add(value);\n            }\n        }\n        return intValues;\n    }\n    \n    public static void main(String[] args){\n       List<Object> list = Arrays.asList(\"a\", 3.14, 5, 1, 2, \"abc\");\n       System.out.println(filterIntegers(list)); //prints: [5, 1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "return string.length();\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "public static int largestDivisor(int n) {\n    for (int i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return -1; // or whatever you want to return if no divisor is found\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.util.*;\n\npublic class Factorize {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            int count = 0;\n            while (n % i == 0) {\n                n /= i;\n                count++;\n            }\n            if (count > 0) {\n                Collections.fill(factors, i);\n            }\n        }\n        // This condition is to handle the case when n is a prime number greater than 2\n        if (n > 1) {\n            Collections.fill(factors, n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorize(8));  // prints [2, 2, 2]\n        System.out.println(factorize(25)); // prints [5, 5]\n        System.out.println(factorize(70)); // prints [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\npublic class RemoveDuplicates {\n\n    // method to remove duplicates from list\n    public static List<Integer> removeDuplicates(List<Integer> list) {\n        Set<Integer> set = new LinkedHashSet<>(list); // use LinkedHashSet to maintain insertion order\n        return new ArrayList<>(set);  // convert set back to ArrayList\n    }\n  \n    public static void main(String[] args){\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(\"Original list: \" + numbers);\n        List<Integer> result = removeDuplicates(numbers);\n        System.out.println(\"List after removing duplicates: \" + result);\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "public class FlipCase {\n    public static void main(String[] args){\n        System.out.println(flip_case(\"Hello\"));\n    }\n\n    public static String flip_case(String string) {\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "import java.util.*;\n\nclass Concatenate {\n    public static String concatenate(List<Object> objects) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : objects) {\n            if (o instanceof String) {\n                builder.append((String) o);\n            } else {\n                builder.append(o.toString());\n            }\n        }\n        return builder.toString();\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\nclass FilterByPrefix {\n    public static List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n    \n    public static void main(String[] args){\n\t   List<String> list = new ArrayList<>();\n       list.add(\"abc\");\n       list.add(\"bcd\");\n       list.add(\"cde\");\n       list.add(\"array\");\n\t   \n       List<String> filteredList = filterByPrefix(list, \"a\");\n       System.out.println(filteredList);  //prints [abc, array]\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.util.*;\n\npublic class GetPositive {\n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> positiveNums = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                positiveNums.add(num);\n            }\n        }\n        return positiveNums;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(\"Positive numbers in list1: \" + getPositive(list1)); // [2, 5, 6]\n        \n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(\"Positive numbers in list2: \" + getPositive(list2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "public static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i < Math.sqrt(num) + 1; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.*;\n\npublic class SortThird {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                temp.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        Collections.sort(temp);\n        \n        int j = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, temp.get(j++));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.util.*;\n\npublic class MaxElement {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3);\n        System.out.println(maxElement(list));  // Output: 3\n\n        list = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(maxElement(list));  // Output: 123\n    }\n    \n    public static int maxElement(List<Integer> list) {\n        return Collections.max(list);\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "public static int fizzBuzz(int n) {\n    int count = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            String numberAsString = Integer.toString(i);\n            for (char digit : numberAsString.toCharArray()) {\n                if (digit == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "import java.util.*;\npublic class SortEven {\n    public static List<Integer> sortEven(List<Integer> l) {\n        // Creating a new list for storing even indexed elements\n        List<Integer> evenIdxElements = new ArrayList<>();\n        \n        // Get all even index elements\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIdxElements.add(l.get(i));\n        }\n        \n        // Sort the even indexed elements list\n        Collections.sort(evenIdxElements);\n        \n        // Re-assign sorted values back to the even index of the original list\n        for (int i = 0, j = 0; i < l.size(); i += 2, ++j) {\n            l.set(i, evenIdxElements.get(j));\n        }\n        return l;\n    }\n    \n    public static void main(String[] args){\n        List<Integer> list = Arrays.asList(5, 6, 3, 4);\n        System.out.println(sortEven(list)); //Output: [3, 6, 5, 4]\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.util.*;\n\npublic class PrimeFib {\n    public static int primeFib(int n) {\n        int count = 0;\n        int num = 1;\n        while (count < n) {\n            num = fib(num);\n            if (isPrime(num)) {\n                count++;\n            }\n        }\n        return num;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(primeFib(1));  // Output: 2\n        System.out.println(primeFib(2));  // Output: 3\n        System.out.println(primeFib(3));  // Output: 5\n        System.out.println(primeFib(4));  // Output: 13\n        System.out.println(primeFib(5));  // Output: 89\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\nclass Solution {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        // Convert List to array for sorting\n        Integer[] arr = new Integer[l.size()];\n        arr = l.toArray(arr);\n        \n        // Sort the input array\n        Arrays.sort(arr);\n        \n        for (int i = 0; i < arr.length - 2; i++) {\n            int j = i + 1, k = arr.length - 1;\n            while (j < k) {\n                if (arr[i] + arr[j] + arr[k] == 0) {\n                    return true; // If there's a triplet summing to zero, return true\n                } else if (arr[i] + arr[j] + arr[k] < 0) {\n                    j += 1; // Increase the sum if it's negative\n                } else {\n                    k -= 1; // Decrease the sum if it's positive\n                }\n            }\n        }\n        \n        return false; // If no triplet sums to zero, return false\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "public static int carRaceCollision(int n) {\n    return n * n; // Each left-to-right car will collide with every right-to-left car\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "import java.util.*;\n\npublic class IncrList {\n    public static List<Object> incr_list(List<Object> l) {\n        List<Object> result = new ArrayList<>();\n        \n        for (Object obj : l) {\n            if (obj instanceof Integer) {\n                result.add((Integer)obj + 1);\n            } else if (obj instanceof Double) {\n                result.add((Double)obj + 1.0);\n            } else if (obj instanceof Float) {\n                result.add((Float)obj + 1.0F);\n            } else if (obj instanceof Long) {\n                result.add((Long)obj + 1L);\n            } else if (obj instanceof Short) {\n                result.add((Short)((Short)obj + 1));\n            } else if (obj instanceof Byte) {\n                result.add((Byte)((Byte)obj + 1));\n            } else {\n                // The element is not a number, add it to the list as-is\n                result.add(obj);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> l = new ArrayList<>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(\"abc\");\n        System.out.println(incr_list(l));  // Output: [2, 3, 4, abc]\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "import java.util.*;\n\npublic class PairsSumToZero {\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "return Integer.toString(x, base);\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "// formula for the area of a triangle is 1/2 * base * height\n        return (double)(0.5 * a * h);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(triangle_area(5,3));\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "if (n == 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 0;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 2;\n        }\n\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n\n        for (int i = 4; i <= n; ++i) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n        }\n\n        return dp[n];\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Median {\n    public static Number median(List<Integer> l) {\n        // First, we need to sort the list\n        Collections.sort(l);\n\n        // Now, we find the median\n        double median;\n        int n = l.size();\n        if (n % 2 == 0)    // even number of elements\n            median = ((double)l.get(n/2) + (double)l.get(n/2 - 1))/2;\n        else    // odd number of elements\n            median = (double) l.get(n/2);\n        \n        return median;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of list1: \" + median(list1)); // Should print 3\n        \n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of list2: \" + median(list2)); // Should print 15.0\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "public class IsPalindrome {\n    public static boolean isPalindrome(String text) {\n        int start = 0;\n        int end = text.length() -1;\n\n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "public static int modp(int n, int p) {\n    // When n is negative\n    if (n < 0) {\n        return (1 - ((-n % p) % p)) % p;\n    }\n    else {\n        // When n is positive or 0\n        return n % p;\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "public class RemoveVowels {\n   public static void main(String[] args) {\n       System.out.println(removeVowels(\"abcdefghijklm\"));\n   }\n   \n   public static String removeVowels(String text){\n       \n      return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n   }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "return x + y;\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "import java.util.*;\n\npublic class SameChars {\n    public static boolean sameChars(String s0, String s1) {\n        char[] array0 = s0.toCharArray();\n        char[] array1 = s1.toCharArray();\n        Arrays.sort(array0);\n        Arrays.sort(array1);\n        return Arrays.equals(array0, array1);\n    }\n    \n    public static void main(String [] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // should print: true\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // should print: true\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // should print: true\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // should print: false\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // should print: false\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // should print: false\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "if (n<=0){\n            System.out.println(\"Invalid input\");\n            return -1;\n        }\n        else if(n==1){\n            return 0;\n        }\n        else if(n==2){\n            return 1;\n        }\n        int fib[] = new int[n+1];\n        fib[1] = 0;\n        fib[2] = 1;\n        \n        for(int i=3;i<=n;i++){\n            fib[i] = fib[i-1]+fib[i-2];\n        }\n        \n        return fib[n];\n    }\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "import java.util.*;\n\npublic class CorrectBracketing {\n    public static boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>' && !stack.isEmpty() && stack.peek() == '<'){\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"<\")); // False\n        System.out.println(correctBracketing(\"<>\")); // True\n        System.out.println(correctBracketing(\"<<><>>\")); // True\n        System.out.println(correctBracketing(\"><<>\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "public static boolean monotonic(List<Integer> list) {\n    if (list.size() <= 1) {\n        return true; // Empty or single element list is always monotonic\n    }\n\n    int initialComparison = list.get(0).compareTo(list.get(1));\n    if (initialComparison == 0) {\n        // First two elements are equal, so we skip them in the loop below\n        return isMonotonic(list, 2);\n    }\n    \n    return isMonotonic(list, 1);\n}\n\nprivate static boolean isMonotonic(List<Integer> list, int startIndex) {\n    int comparison = initialComparison; // Capture the variable to ensure we maintain direction of monotonicity\n    for (int i = startIndex; i < list.size() - 1; i++) {\n        if (list.get(i).compareTo(list.get(i+1)) * comparison < 0) {\n            return false; // The elements changed direction, not monotonic\n        }\n    }\n    return true; // All elements are monotonically increasing or decreasing\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.util.*;\n\npublic class Common {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        // retainAll() method modifies the set keeping only the elements that are contained in both sets\n        set1.retainAll(set2); \n\n        return new ArrayList<>(set1);\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "while (n % 2 == 0) {\n            // divide by two until odd\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                // divide by factor until not divisible\n                n /= i;\n            }\n        }\n        \n        return n; // if no larger factors, then n itself is prime\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "return (n*(n + 1))/2;\n}\n\npublic static void main(String[] args){\n   System.out.println(\"Enter a number: \");\n   Scanner sc = new Scanner(System.in);\n   int n = sc.nextInt();\n   System.out.println(\"Sum of numbers from 1 to \"+n+\" is : \" + sumToN(n));\n}\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "import java.util.*;\nclass Main{\n    public static boolean correctBracketing(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n    \n    public static void main(String []args){\n        System.out.println(correctBracketing(\"(\")); //False\n        System.out.println(correctBracketing(\"()\")); //True\n        System.out.println(correctBracketing(\"(()())\")); //True\n        System.out.println(correctBracketing(\")(()\")); //False\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "import java.util.*;\n\nclass Main {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> der = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) { // skip the first coefficient since the derivative of a constant is zero\n            der.add(xs.get(i) * i); // multiply the coefficient by the degree and add to the list\n        }\n        return der;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // outputs [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3))); // outputs [2, 6]\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "public class Fibfib {\n    public static int fibfib(int n) {\n        if (n == 0 || n == 1) return 0;\n        \n        int[] dp = new int[n+1];\n        dp[2] = 1;\n        \n        for(int i=3; i<=n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n\n        return dp[n];\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(fibfib(1));  // Output: 0\n        System.out.println(fibfib(5));  // Output: 4\n        System.out.println(fibfib(8));  // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0; // Counter for vowels\n    String lowerCase = s.toLowerCase(); // Convert input to lower case\n    \n    for (int i = 0; i < lowerCase.length(); i++) {\n        char c = lowerCase.charAt(i);\n        \n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++; // Increment the counter\n        }\n    }\n    \n    // Check if last character is 'y' and increment count if true\n    if (lowerCase.charAt(lowerCase.length() - 1) == 'y') {\n        count++;\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "public class CircularShift {\n    public static void main(String[] args) {\n        System.out.println(circularShift(12, 1)); // Output should be \"21\"\n        System.out.println(circularShift(12, 2)); // Output should be \"12\"\n        System.out.println(circularShift(12345, 3)); // Output should be \"34512\"\n    }\n    \n    public static String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(shift) + s.substring(0, shift);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "public static int digitsum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            sum += (int) c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "// Use regular expressions to find the numbers in the string\n        Pattern pattern = Pattern.compile(\"\\\\d+\");\n        Matcher matcher = pattern.matcher(s);\n\n        // Assume no apples or oranges present\n        int apples = 0;\n        int oranges = 0;\n\n        while (matcher.find()) {\n            // Convert the number found to an integer\n            int num = Integer.parseInt(matcher.group());\n\n            // If \"apples\" was found before this number, it's the number of apples\n            if (matcher.start() > 0 && s.charAt(matcher.start() - 1) == 'a') {\n                apples = num;\n            }\n            // Otherwise, if \"oranges\" was found before this number, it's the number of oranges\n            else if (matcher.start() > 0 && s.charAt(matcher.start() - 1) == 'r') {\n                oranges = num;\n            }\n        }\n\n        // Return the total number of fruits minus the number of apples and oranges\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "import java.util.*;\npublic class Pluck {\n    public static List<Integer> pluck(List<Integer> arr) {\n        // If the array is empty, return an empty list\n        if (arr == null || arr.size() == 0)\n            return new ArrayList<>();\n        \n        int smallestEvenIndex = -1;\n        int smallestEvenValue = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            // If the current number is even and less than the current smallest even value\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue) {\n                smallestEvenValue = arr.get(i); // Update the smallest even value\n                smallestEvenIndex = i; // Update the index of the smallest even value\n            }\n        }\n        \n        if (smallestEvenIndex == -1) // If no even number is found\n            return new ArrayList<>(); \n        else // Return the smallest even number and its index as a list\n            return Arrays.asList(smallestEvenValue, smallestEvenIndex); \n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.util.*;\n\npublic class Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        \n        // Calculate frequency of each integer in the list\n        for (int num : lst) {\n            if (!freqMap.containsKey(num)) {\n                freqMap.put(num, 1);\n            } else {\n                freqMap.put(num, freqMap.get(num) + 1);\n            }\n        }\n\n        // Find the greatest integer that fulfills the condition\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {\n                max = entry.getKey();\n            }\n        }\n\n        return max;\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.*;\npublic class StrangeSortList {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) return new ArrayList<>();\n        \n        Collections.sort(lst); // sort list in ascending order\n        List<Integer> result = new ArrayList<>();\n        \n        int start = 0, end = lst.size() - 1;\n        while (start <= end) {\n            if (start != end) {\n                result.add(lst.get(end)); // add max value from the end\n            }\n            if (start != end) {\n                result.add(lst.get(start)); // add min value from the start\n            }\n            start++;\n            end--;\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args){\n        List<Integer> list = Arrays.asList(1, 2, 3, 4);\n        System.out.println(strangeSortList(list)); // Output: [1, 4, 2, 3]\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "import java.lang.Math; \n\npublic class TriangleArea {\n    public static double triangle_area(int a, int b, int c) {\n        // Check if the three sides can form a valid triangle\n        if (a + b > c && b + c > a && c + a > b) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2.0;\n            \n            // Calculate the area using Heron's formula and round it to 2 decimal points\n            return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides can't form a valid triangle\n            return -1;\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(triangle_area(3, 4, 5));  // Output: 6.0\n        System.out.println(triangle_area(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.*;\n\npublic class WillItFly {\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if list is a palindrome\n        List<Integer> reversed = new ArrayList<>(q);\n        Collections.reverse(reversed);\n        boolean isPalindrome = q.equals(reversed);\n\n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if sum is less than or equal to max possible weight and return result\n        boolean sumCheck = sum <= w;\n        \n        return isPalindrome && sumCheck;\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "public class SmallestChange {\n   public static int smallestChange(List<Integer> list) {\n        int i = 0, j = list.size() - 1;\n        int changes = 0;\n        while (i < j) {\n            if (!list.get(i).equals(list.get(j))) {\n                if (list.get(i) > list.get(j)) {\n                    list.set(j, list.get(i));\n                    changes++;\n                } else {\n                    list.set(i, list.get(j));\n                    changes++;\n                }\n            }\n            i++;\n            j--;\n        }\n        return changes;\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Object> lst1 = Arrays.asList(\"hi\", \"admin\");\n        List<Object> lst2 = Arrays.asList(\"hI\", \"Hi\");\n        \n        System.out.println(totalMatch(lst1, lst2));\n    }\n\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        int lst1Count = lst1.stream().mapToInt(str -> ((String) str).length()).sum();\n        int lst2Count = lst2.stream().mapToInt(str -> ((String) str).length()).sum();\n        \n        return (lst1Count <= lst2Count) ? lst1 : lst2;\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.util.*;\npublic class IsMultiplyPrime {\n    public static boolean isMultiplyPrime(int n) {\n        if (n <= 1) return false;\n        int[] primes = new int[]{2,3,5,7}; //possible prime multipliers\n        for (int i = 0; i < primes.length && n != 1; i++) {\n            while (n % primes[i] == 0) {\n                n /= primes[i];\n            }\n        }\n        return n == 1; //if it can't be divided by any prime, it is a prime number\n    }\n    \n    public static void main(String[] args){\n        System.out.println(isMultiplyPrime(30));  //prints: true\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "public static Boolean isSimplePower(int x, int n) {\n    // Handle edge cases where n is 0 or 1\n    if (n == 0 || n == 1) {\n        return x == 1;\n    }\n    \n    int power = 1;\n    while (power <= x) {\n        if (power == x) {\n            return true; // n^int=x exactly\n        }\n        power *= n;\n    }\n    \n    // If we've gotten here, then n^int>x for all integer int.\n    return false;\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "public static boolean iscube(int a) {\n    int cuberoot = (int) Math.round(Math.cbrt(a));\n    return a == cuberoot * cuberoot * cuberoot;\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "public class HexKey {\n    public static int hexKey(String num) {\n        int counter = 0;\n        \n        for (int i = 0; i < num.length(); i++) {\n            switch(num.charAt(i)){\n                case '2':\n                case '3':\n                case '5':\n                case '7':\n                case 'B':\n                case 'D':\n                    counter++;\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        return counter;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); // Outputs 1\n        System.out.println(hexKey(\"1077E\")); // Outputs 2\n        System.out.println(hexKey(\"ABED1A33\")); // Outputs 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); // Outputs 6\n        System.out.println(hexKey(\"2020\")); // Outputs 2\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "public class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));  // Outputs: db1111db\n        System.out.println(decimalToBinary(32));  // Outputs: db100000db\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "if (s.length() < 3) {\n            return false; // length less than 3 can't be happy string\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            String substring = s.substring(i, i+3);\n            if (substring.contains(String.valueOf(s.charAt(i))) && \n                substring.contains(String.valueOf(s.charAt(i + 1))) && \n                substring.contains(String.valueOf(s.charAt(i + 2)))) {\n                return false; // aaa, bbb etc cases will fail here\n            }\n        }\n        \n        return true; // all other cases will return happy\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isHappy(\"a\")); // false\n        System.out.println(isHappy(\"aa\")); // false\n        System.out.println(isHappy(\"abcd\")); // true\n        System.out.println(isHappy(\"aabb\")); // false\n        System.out.println(isHappy(\"adb\")); // true\n        System.out.println(isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "public class NumericalLetterGrade {\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> result = new ArrayList<>();\n        \n        for (Number grade : grades) {\n            if (grade.doubleValue() == 4.0) {\n                result.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                result.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                result.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                result.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                result.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                result.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                result.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                result.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                result.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                result.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                result.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                result.add(\"D-\");\n            } else if (grade.doubleValue() == 0.0) {\n                result.add(\"E\");\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(numericalLetterGrade(grades)); // Outputs: [A+, B, C-, C, A-]\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "import java.math.BigInteger;\n\npublic static Boolean primeLength(String string) {\n    // Get the length of the string\n    int len = string.length();\n    \n    /* Check if the length is less than 2 (the smallest and only even prime number)\n       or if it's not a prime number */\n    if (len < 2 || BigInteger.valueOf(len).isProbablePrime(1) == false) {\n        // If either condition is true, then the length isn't a prime number\n        return false;\n    } else {\n        // Otherwise, it is a prime number\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "public static int startsOneEnds(int n) {\n    if (n == 1) return 1; // there's only one number of 1 digit that starts and ends with 1, which is 1 itself\n    return 2 * (9 * (n - 1)) - 10;\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(solve(1000));  // Outputs: \"1\"\n        System.out.println(solve(150));   // Outputs: \"110\"\n        System.out.println(solve(147));   // Outputs: \"1100\"\n    }\n    \n    public static String solve(int n) {\n        return Integer.toBinaryString(n);\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "import java.util.*;\n\npublic class AntiShuffle {\n    public static String antiShuffle(String s) {\n        // Splitting the given string into words\n        String[] words = s.split(\" \");\n        \n        for (int i = 0; i < words.length; i++) {\n            // Sorting each word in ascending order based on ASCII value\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            \n            // Replacing the word with the sorted one\n            words[i] = new String(chars);\n        }\n        \n        // Joining all the words back together with spaces in between\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length-1; i++) {\n            sb.append(words[i]).append(\" \");\n        }\n        sb.append(words[words.length - 1]);\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(antiShuffle(\"Hello World!!!\"));\n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\npublic class GetRow {\n  public static List<int[]> getRow(List<List<Integer>> lst, int x) {\n    List<int[]> result = new ArrayList<>();\n    for (int i = 0; i < lst.size(); ++i) {\n      List<Integer> row = lst.get(i);\n      for (int j = 0; j < row.size(); ++j) {\n        if (row.get(j) == x) {\n          result.add(new int[]{i, j}); // Add the coordinate as [row, column]\n        }\n      }\n    }\n    return result;\n  }\n  \n  public static void main(String[] args) {\n    List<List<Integer>> data = new ArrayList<>();\n    data.add(Arrays.asList(1,2,3,4,5,6));\n    data.add(Arrays.asList(1,2,3,4,1,6));\n    data.add(Arrays.asList(1,2,3,4,5,1));\n    \n    List<int[]> result = getRow(data, 1);\n    for (int i = 0; i < result.size(); ++i) {\n      System.out.println(\"(\" + result.get(i)[0] + \", \" + result.get(i)[1] + \")\");\n    }\n  }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\npublic class SortArray {\n    public static List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0)\n            return new ArrayList<>();\n        \n        List<Integer> sorted = new ArrayList<>(array);\n        int sum = sorted.get(0) + sorted.get(sorted.size()-1);\n\n        if (sum % 2 == 0){ //even\n            Collections.sort(sorted);\n            Collections.reverse(sorted);\n        }\n        else{ //odd\n            Collections.sort(sorted);\n        }\n        return sorted;\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "public class Encrypt {\n    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append((char) ((((c - 'A') + 4) % 26) + 'A'));\n            } else {\n                sb.append((char) ((((c - 'a') + 4) % 26) + 'a'));\n            }\n        }\n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(encrypt(\"hi\")); // Output: lm\n        System.out.println(encrypt(\"asdfghjkl\")); // Output: ewhjklnop\n        System.out.println(encrypt(\"gf\")); // Output: kj\n        System.out.println(encrypt(\"et\")); // Output: ix\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.util.*;\n\npublic class NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        // sort the list\n        Collections.sort(lst);\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (!lst.get(i).equals(lst.get(0))) {\n                return lst.get(i);\n            }\n        }\n        \n        return null; // there is no second smallest element\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(nextSmallest(list1)); // prints 2\n        \n        List<Integer> list2 = Arrays.asList(5, 1, 4, 3, 2);\n        System.out.println(nextSmallest(list2)); // prints 2\n        \n        List<Integer> emptyList = Collections.emptyList();\n        System.out.println(nextSmallest(emptyList)); // prints null\n        \n        List<Integer> list3 = Arrays.asList(1, 1);\n        System.out.println(nextSmallest(list3)); // prints null\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "public class IsBored {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\");\n        int count = 0;\n        \n        for (String sentence : sentences) {\n            // Removing leading and trailing spaces\n            sentence = sentence.trim();\n            \n            if (!sentence.isEmpty() && sentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isBored(\"Hello world\")); // Outputs: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Outputs: 1\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "public class AnyInt {\n    public static boolean anyInt(int a, int b, int c) {\n        return a + b == c || a + c == b || b + c == a;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(anyInt(5, 2, 7)); // true\n        System.out.println(anyInt(3, 2, 2)); // false\n        System.out.println(anyInt(3, -2, 1)); // true\n    }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "public class Encode {\n    public static void main(String[] args) {\n        System.out.println(encode(\"test\"));  // Outputs: TGST\n        System.out.println(encode(\"This is a message\"));  // Outputs: tHKS KS C MGSSCGG\n    }\n\n    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isAlphabetic(c)) {\n                if (Character.isLowerCase(c))\n                    c = Character.toUpper(c);\n                else\n                    c = Character.toLower(c);\n\n                if (c >= 'A' && c <= 'Z') {\n                    if (c == 'A')\n                        c = 'C';\n                    else if (c == 'E')\n                        c = 'G';\n                    else if (c == 'I')\n                        c = 'K';\n                    else if (c == 'O')\n                        c = 'Q';\n                    else if (c == 'U')\n                        c = 'W';\n                    else\n                        c++;\n                } \n                else if (c >= 'a' && c <= 'z') {\n                    if (c == 'a')\n                        c = 'c';\n                    else if (c == 'e')\n                        c = 'g';\n                    else if (c == 'i')\n                        c = 'k';\n                    else if (c == 'o')\n                        c = 'q';\n                    else if (c == 'u')\n                        c = 'w';\n                    else\n                        c++;\n                }\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(skjkasdkd(lst));  //prints 11\n    }\n    \n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = -1;\n        \n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        return sumOfDigits(maxPrime);\n    }\n    \n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private static int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.util.*;\npublic class CheckDictCase {\n   public static Boolean checkDictCase(Map<String, String> map) {\n      if (map.isEmpty()) {\n          return false;\n      }\n      \n      boolean lower = true;\n      boolean upper = true;\n\n      for (String key : map.keySet()) {\n         if (!key.equals(key.toLowerCase())) {\n            lower = false;\n         }\n         if (!key.equals(key.toUpperCase())) {\n            upper = false;\n         }\n      }\n      \n      return lower || upper; \n   }\n   \n   public static void main(String[] args) {\n      Map<String, String> map1 = new HashMap<>();\n      map1.put(\"a\", \"apple\");\n      map1.put(\"b\", \"banana\");\n      System.out.println(checkDictCase(map1)); // should print: true\n      \n      Map<String, String> map2 = new HashMap<>();\n      map2.put(\"a\", \"apple\");\n      map2.put(\"A\", \"banana\");\n      map2.put(\"B\", \"banana\");\n      System.out.println(checkDictCase(map2)); // should print: false\n      \n      Map<String, String> map3 = new HashMap<>();\n      map3.put(\"a\", \"apple\");\n      map3.put(8 + \"\", \"banana\");\n      map3.put(\"a\", \"apple\");\n      System.out.println(checkDictCase(map3)); // should print: false\n      \n      Map<String, String> map4 = new HashMap<>();\n      map4.put(\"Name\", \"John\");\n      map4.put(\"Age\", \"36\");\n      map4.put(\"City\", \"Houston\");\n      System.out.println(checkDictCase(map4)); // should print: false\n      \n      Map<String, String> map5 = new HashMap<>();\n      map5.put(\"STATE\", \"NC\");\n      map5.put(\"ZIP\", \"12345\");\n      System.out.println(checkDictCase(map5)); // should print: true\n      \n   }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.*;\n\npublic class CountUpTo {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private static boolean isPrime(int num) {\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(countUpTo(5));  // prints [2, 3]\n        System.out.println(countUpTo(11)); // prints [2, 3, 5, 7]\n        System.out.println(countUpTo(0));  // prints []\n        System.out.println(countUpTo(20)); // prints [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(countUpTo(1));  // prints []\n        System.out.println(countUpTo(18)); // prints [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "public static int multiply(int a, int b) {\n    // Getting the last digit of each number by taking their modulo by 10\n    int lastDigitA = Math.abs(a % 10);\n    int lastDigitB = Math.abs(b % 10);\n    \n    // Returning the product of the last digits\n    return lastDigitA * lastDigitB;\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "public static int countUpper(String s) {\n    int count = 0; \n    String upperCaseVowels = \"AEIOU\";\n    \n    for (int i = 0; i < s.length(); i = i + 2) {  \n        char c = s.charAt(i);\n        if (upperCaseVowels.indexOf(c) != -1) { \n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "public class ClosestInteger {\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));   // 10\n        System.out.println(closestInteger(\"15.3\")); // 15\n        System.out.println(closestInteger(\"-14.5\")); // -15\n    }\n\n    public static int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n        int floor = (int) Math.floor(d);\n        int ceil = (int) Math.ceil(d);\n        return (d - floor >= 0.5 && floor != 0) || (d < 0 && d + ceil == 0) ? ceil : floor;\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "import java.util.*;\n\npublic class MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; ++i) {\n            if (n % 2 == 0) {\n                // add even number\n                result.add(n + i * 2);\n            } else {\n                // add odd number\n                result.add(n + i * 2);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(makeAPile(3));  // Outputs: [3, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.util.*;\n\npublic class WordsString {\n    public static List<String> words_string(String s) {\n        // Split the string into words using comma and space as separators\n        String[] words = s.split(\"[,\\\\s]+\");\n        \n        // Convert the array of strings to an ArrayList and return it\n        return new ArrayList<>(Arrays.asList(words));\n    }\n    \n    public static void main(String[] args) {\n        List<String> words = words_string(\"Hi, my name is John\");\n        System.out.println(words);  // Output: [Hi, my, name, is, John]\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n    // Make sure y is even\n    if (y % 2 != 0) {\n        y--;\n    }\n\n    // If y is less than x, return y. Else, return -1\n    return y < x ? y : -1;\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "public static Object roundedAvg(int n, int m) {\n    if (n > m) {\n        return -1;\n    } else {\n        int average = Math.round((n + m) / 2f); // round to nearest integer\n        String binary = Integer.toBinaryString(average);\n        \n        // Add \"0b\" in front of the binary representation\n        binary = \"0b\" + binary;\n        \n        return binary;\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.util.*;\n\npublic class UniqueDigits {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n\n        for (int num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n\n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private static boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            if ((num % 10) % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(uniqueDigits(list)); // prints [1, 15, 33]\n        \n        list = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(uniqueDigits(list)); // prints []\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.util.*;\n\npublic class ByLength {\n    private static final String[] NUMBER_NAMES = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n\n    public static List<String> byLength(List<Object> arr) {\n        List<Integer> numbers = new ArrayList<>();\n        for (Object obj : arr) {\n            if (obj instanceof Integer && (int) obj >= 1 && (int) obj <= 9) {\n                numbers.add((int) obj);\n            }\n        }\n\n        Collections.sort(numbers, Collections.reverseOrder());\n\n        List<String> result = new ArrayList<>();\n        for (Integer num : numbers) {\n            result.add(NUMBER_NAMES[num - 1]);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int num) {\n        int fact = 1;\n        for (int i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    private static int sum(int num) {\n        int s = 0;\n        for (int i = 1; i <= num; i++) {\n            s += i;\n        }\n        return s;\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "public class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int[] cnt = new int[2]; // to store count of even and odd numbers\n        for (int i = 1; i <= n; ++i) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    cnt[0]++; // increment even count\n                } else {\n                    cnt[1]++; // increment odd count\n                }\n            }\n        }\n        return Arrays.asList(cnt);\n    }\n\n    private static boolean isPalindrome(int num) {\n        int r, sum = 0, temp;    \n        temp = num;    \n        while (num > 0){    \n            r = num % 10;    \n            sum = (sum * 10) + r;    \n            num = num / 10;    \n        }    \n        if (temp == sum)    \n            return true;    \n        else     \n            return false;  \n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "public static int countNums(List<Integer> numbers) {\n    int count = 0;\n\n    for (int num : numbers) {\n        int sum = 0;\n        String strNum = String.valueOf(num);\n        \n        for (int i = 0; i < strNum.length(); i++) {\n            char c = strNum.charAt(i);\n            \n            if (c == '-') { // skip the '-' sign\n                continue;\n            }\n            \n            int digit = Character.getNumericValue(c);\n            sum += digit;\n        }\n        \n        if (sum > 0) {\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "public static Boolean moveOneBall(List<Integer> arr) {\n    int n = arr.size();\n    if (n == 0) return true;\n    \n    // find peak and valley\n    int maxIndex = 0;\n    for (int i = 1; i < n; i++) {\n        if (arr.get(i) > arr.get(maxIndex)) {\n            maxIndex = i;\n        }\n    }\n    \n    // Check if array is already rotated\n    if (arr.get(0) <= arr.get((maxIndex + 1) % n)) return true;\n    \n    // Check if we can get a non-decreasing order by rotation\n    for (int i = 1; i < maxIndex; i++) {\n        if (arr.get((maxIndex + i) % n) >= arr.get((maxIndex + i - 1 + n) % n)) return true;\n    }\n    \n    return false;\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "def exchange(lst1, lst2):\n    # Initialize counters for odd and even numbers in lst1 and lst2\n    odd1 = sum(x % 2 for x in lst1)\n    even2 = sum(x % 2 == 0 for x in lst2)\n    \n    # If all numbers in lst1 are even or there are enough even numbers in lst2, return \"YES\"\n    if odd1 == 0 or even2 >= odd1:\n        return 'YES'\n    else:\n        return 'NO'"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\n\npublic class Histogram {\n    public static Map<String, Integer> histogram(String test) {\n        String[] words = test.split(\" \");\n        Map<String, Integer> freqMap = new HashMap<>();\n        for (String word : words) {\n            if (!freqMap.containsKey(word)) {\n                freqMap.put(word, 1);\n            } else {\n                freqMap.put(word, freqMap.get(word)+1);\n            }\n        }\n\n        int maxFreq = Collections.max(freqMap.values());\n        Map<String, Integer> resultMap = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() == maxFreq) {\n                resultMap.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return resultMap;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(histogram(\"a b c\")); // {'a': 1, 'b': 1, 'c': 1}\n        System.out.println(histogram(\"a b b a\")); // {'a': 2, 'b': 2}\n        System.out.println(histogram(\"a b c a b\")); // {'a': 2, 'b': 2}\n        System.out.println(histogram(\"b b b b a\")); // {'b': 4}\n        System.out.println(histogram(\"\")); // {}\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        // HashSet to keep track of characters that need to be deleted\n        Set<Character> deleteChars = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            deleteChars.add(ch);\n        }\n\n        StringBuilder resultString = new StringBuilder();\n        \n        // Iterate over each character in s and only append it to the result if it's not in the deleteChars set\n        for (char ch : s.toCharArray()) {\n            if (!deleteChars.contains(ch)) {\n                resultString.append(ch);\n            }\n        }\n        \n        String reversedResult = new StringBuilder(resultString.toString()).reverse().toString();\n        boolean isPalindrome = resultString.toString().equals(reversedResult);\n        return Arrays.asList(resultString.toString(), isPalindrome);\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.util.*;\n\npublic class OddCount {\n   public static List<String> oddCount(List<String> lst) {\n      List<String> result = new ArrayList<>();\n      \n      for (int i = 0; i < lst.size(); i++) {\n         String str = lst.get(i);\n         int count = 0;\n         \n         for (char c : str.toCharArray()) {\n            if ((c - '0') % 2 != 0) { // if the digit is odd\n               count++;\n            }\n         }\n         \n         result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n      }\n      \n      return result;\n   }\n   \n   public static void main(String[] args) {\n      List<String> input = Arrays.asList(\"1234567\");\n      System.out.println(oddCount(input));  // [the number of odd elements 4n the str4ng 4 of the 4nput.]\n      \n      input = Arrays.asList(\"3\",\"11111111\");\n      System.out.println(oddCount(input));  // [the number of odd elements 1n the str1ng 1 of the 1nput., the number of odd elements 8n the str8ng 8 of the 8nput.]\n   }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "public class Minsubarraysum {\n    public static long minsubArraySum(List<Integer> nums) {\n        int currentSum = 0, minSum = Integer.MAX_VALUE;\n\n        for (int i=0; i < nums.size(); ++i) {\n            currentSum += nums.get(i);\n            \n            if(currentSum < minSum){\n                minSum = currentSum;\n            } \n            if(currentSum > 0){\n                currentSum = 0;\n            }      \n        }\n        \n        // If the entire array is negative, return the max value from the array\n        if (minSum == Integer.MAX_VALUE) {\n            minSum = Collections.max(nums);\n        }\n\n        return minSum;\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int fillCount = 0;\n        \n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    fillCount++;\n                }\n            }\n        }\n\n        return (fillCount / capacity) + (fillCount % capacity != 0 ? 1 : 0);\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass SortArray {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        // Create a map to store each integer and its count of ones in binary\n        Map<Integer, Integer> onesCount = new HashMap<>();\n        \n        for (int num : arr) {\n            int count = 0;\n            int n = num;\n            while (n > 0) {\n                // Increment count if the bit is 1\n                count += n & 1;\n                n >>= 1;\n            }\n            onesCount.put(num, count);\n        }\n        \n        // Sort the array based on the count of ones and then decimal value\n        Collections.sort(arr, (a, b) -> {\n            int comp = Integer.compare(onesCount.get(a), onesCount.get(b));\n            return comp != 0 ? comp : Integer.compare(a, b);\n        });\n        \n        return arr;\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n\n    public static List<String> select_words(String s, int n) {\n        // Split the string into words\n        String[] words = s.split(\" \");\n\n        // Initialize a list to store the result\n        List<String> result = new ArrayList<>();\n\n        // Loop through each word\n        for (String word : words) {\n            int consonants = 0;\n\n            // Count the consonants in the current word\n            for (char c : word.toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                    c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                    consonants++;\n                }\n            }\n\n            // If the word contains exactly n consonants, add it to the result\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(select_words(\"Mary had a little lamb\", 4)); // prints: [little]\n        System.out.println(select_words(\"Mary had a little lamb\", 3)); // prints: [Mary, lamb]\n        System.out.println(select_words(\"simple white space\", 2)); // prints: []\n        System.out.println(select_words(\"Hello world\", 4)); // prints: [world]\n        System.out.println(select_words(\"Uncle sam\", 3)); // prints: [Uncle]\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "public class GetClosestVowel {\n\n    public static String get_closest_vowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < word.length() - 2; i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1 &&\n                !Character.isLetter(word.charAt(i + 1)) &&\n                !Character.isLetter(word.charAt(i - 1))) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(get_closest_vowel(\"yogurt\"));  //==> \"u\"\n        System.out.println(get_closest_vowel(\"FULL\"));  //==> \"U\"\n        System.out.println(get_closest_vowel(\"quick\"));  //==> \"\"\n        System.out.println(get_closest_vowel(\"ab\"));  //==> \"\"\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "public class MatchParens {\n    public static String matchParens(List<String> lst) {\n        // Initialize stack\n        Stack<Character> stack = new Stack<>();\n        \n        // Combine two strings and convert into char array for easy iteration\n        String combined = lst.get(0) + lst.get(1);\n        char[] chars = combined.toCharArray();\n        \n        // Iterate over the characters in combined string\n        for (char c : chars) {\n            if (c == '(') {  // If it's an opening parenthesis, push it to stack\n                stack.push(c);\n            } else if (!stack.isEmpty() && stack.peek() == '(') {  // If it's a closing parenthesis and the top of stack is an opening one, pop it from stack\n                stack.pop();\n            } else {  // If it's a closing parenthesis and the top of stack isn't an opening one, or the stack is empty, then it's not a good string\n                return \"No\";\n            }\n        }\n        \n        // If the stack is empty at the end, then it's a good string\n        if (stack.isEmpty()) {\n            return \"Yes\";\n        } else {  // If the stack isn't empty at the end, then it's not a good string\n            return \"No\";\n        }\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.util.*;\npublic class Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        PriorityQueue<Integer> queue = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            if (queue.size() < k) {\n                queue.offer(num);\n            } else if (queue.peek() < num) {\n                queue.poll();\n                queue.offer(num);\n            }\n        }\n        List<Integer> result = new ArrayList<>(queue);\n        Collections.sort(result, Collections.reverseOrder());\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "public static int solution(List<Integer> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst.get(i) % 2 != 0) {\n            sum += lst.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "public class AddElements {\n\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n        int k = 4;\n        System.out.println(addElements(list, k)); // prints 24\n    }\n\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 0 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "import java.util.*;\n\nclass GetOddCollatz {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<Integer>();\n        while (n != 1){\n            if (n % 2 != 0){ //if odd\n                oddNumbers.add(n);\n            }\n            n = n % 2 == 0 ? n/2 : 3*n + 1; //Collatz sequence operation\n        }\n        oddNumbers.add(1);//adding 1 as it is part of Collatz Sequence\n        Collections.sort(oddNumbers); // sorting the list in increasing order\n        return oddNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "import java.util.Calendar;\nimport java.text.SimpleDateFormat;\nimport java.text.ParseException;\n\npublic class ValidDate {\n    public static Boolean validDate(String date) {\n        // the format of the date must be mm-dd-yyyy\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n        dateFormat.setLenient(false);\n\n        try {\n            // if the date is not valid, it will throw a ParseException\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime(dateFormat.parse(date));\n            \n            int year = calendar.get(Calendar.YEAR);\n            int month = calendar.get(Calendar.MONTH) + 1; // in Java, month starts from 0\n            int day = calendar.get(Calendar.DAY_OF_MONTH);\n\n            // check the number of days based on the month\n            if ((month == 2 && day > 29) || (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) || (day > 31 && (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12))) {\n                return false;\n            }\n        } catch (ParseException e) {\n            // if there is an exception, it means the date is not valid\n            return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.*;\n\npublic class SplitWords {\n    public static Object splitWords(String str) {\n        if (str.contains(\" \"))\n            return Arrays.asList(str.split(\" \"));\n        else if (str.contains(\",\"))\n            return Arrays.asList(str.split(\",\"));\n        else {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1))\n                    count++;\n            }\n            return count;\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(splitWords(\"Hello world!\")); // \u279e [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"Hello,world!\")); // \u279e [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"abcdef\")); // \u279e 3\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "for(int i=0; i < lst.size()-1; i++){\n            if(lst.get(i).equals(lst.get(i+1))){\n                return false;\n            }\n        }\n        \n        for (int i = 0; i < lst.size() - 1; i++) {\n            if ((Integer)lst.get(i) > (Integer)lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.util.*;\npublic class Intersection {\n    public static boolean isPrime(int n){\n        if (n<=1) return false;\n        for(int i=2;i*i<=n;i++){\n            if(n%i==0) return false;\n        }\n        return true;\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) return \"NO\"; // no intersection\n        int len = end - start + 1;\n        return isPrime(len)? \"YES\" : \"NO\";\n    }\n    \n    public static void main(String[] args){\n        System.out.println(intersection(Arrays.asList(1,3), Arrays.asList(2,4))); // NO\n        System.out.println(intersection(Arrays.asList(-1,1), Arrays.asList(0,4))); // NO\n        System.out.println(intersection(Arrays.asList(-3,-1), Arrays.asList(-5,5))); // YES\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "public class ProdSigns {\n    public static Integer prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return null; // return null for empty array\n        \n        int sign = 1, sum = 0;\n\n        for (int num : arr) {\n            if (num < 0) {\n                sign *= -1;\n                sum += Math.abs(num);\n            } else if (num > 0){\n                sum += num;\n            } else {\n                // If the number is 0, we can't determine the sign,\n                // so we set the final result to 0 and return it immediately.\n                return 0;\n            }\n        }\n        \n        // Return sum of magnitudes multiplied by product of signs\n        return sign * sum;\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.util.*;\nclass Pair implements Comparable<Pair> {\n    int x, y, cost;\n    ArrayList<Integer> path;\n    public Pair(int x, int y, int cost, ArrayList<Integer> path) {\n        this.x = x;\n        this.y = y;\n        this.cost = cost;\n        this.path = path;\n    }\n    \n    @Override\n    public int compareTo(Pair o) {\n        for (int i = 0; i < Math.min(o.path.size(), path.size()); ++i) {\n            if (!o.path.get(i).equals(path.get(i))) {\n                return path.get(i) - o.path.get(i);\n            }\n        }\n        return 0;\n    }\n}\n\npublic class Minpath {\n    private static final int[] dx = {-1, 0, 1, 0};\n    private static final int[] dy = {0, 1, 0, -1};\n    \n    public List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        PriorityQueue<Pair> pq = new PriorityQueue<>();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                ArrayList<Integer> path = new ArrayList<>();\n                boolean[][] visited = new boolean[n][n];\n                pq.offer(new Pair(i, j, grid.get(i).get(j), path));\n            }\n        }\n        \n        while (!pq.isEmpty()) {\n            Pair cur = pq.poll();\n            if (cur.cost == k) return cur.path;\n            \n            for (int i = 0; i < 4; ++i) {\n                int nx = cur.x + dx[i], ny = cur.y + dy[i];\n                \n                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                    ArrayList<Integer> newPath = new ArrayList<>(cur.path);\n                    newPath.add(grid.get(nx).get(ny));\n                    pq.offer(new Pair(nx, ny, cur.cost + 1, newPath));\n                }\n            }\n        }\n        \n        return null;\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.*;\n\npublic class Tri {\n    public static List<Integer> tri(int n) {\n        List<Integer> seq = new ArrayList<>();\n        seq.add(1); // first term is always 1\n        \n        if (n > 0) {\n            seq.add(3); // second term is always 3\n            \n            for (int i = 2; i <= n; i++) {\n                int val;\n                \n                if (i % 2 == 0) { // even\n                    val = 1 + i / 2;\n                } else { // odd\n                    val = seq.get(seq.size() - 1) + seq.get(seq.size() - 2) + seq.get(i-1);\n                }\n                \n                seq.add(val);\n            }\n        }\n        \n        return seq;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(tri(3)); // prints [1, 3, 2, 8]\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "public static int digits(int n) {\n    int product = 1;  // Initialize product as 1 since multiplication with 0 will always be 0.\n    while (n > 0) {\n        int digit = n % 10;  // Get the last digit of number.\n        if (digit % 2 != 0) {  // If it is odd, then multiply it with product.\n            product *= digit;\n        }\n        n /= 10;  // Remove the last digit from the number.\n    }\n    return product == 1 ? 0 : product;  // If product is still 1 means all digits were even, so return 0.\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "public static Boolean isNested(String s) {\n    Deque<Integer> stack = new ArrayDeque<>(); //stack to store positions of unpaired '[' brackets\n    \n    //iterate over the characters of input string\n    for (int i = 0; i < s.length(); ++i) {\n        char c = s.charAt(i);\n        \n        if (c == '[') {  \n            stack.push(i); //push the position of unpaired '[' bracket into the stack\n            \n        } else if (c == ']' && !stack.isEmpty()) { \n            /*\n              We have found a pair of brackets. Check if there is a nested pair by comparing the positions of current closing ']' bracket and last unpaired opening '[' bracket in the stack. \n             */\n            int prevOpen = stack.pop();\n            if (prevOpen < i - 1) { //checks if theres a character between the brackets.\n                return true;  \n            }\n        } \n    }\n    \n    return false;  //If we have iterated over all characters and haven't found any nested pair, return false.\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\npublic class SumSquares {\n\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        \n        for(Number num : lst){\n            double value = Math.ceil(num.doubleValue());\n            sum += (int)Math.pow(value,2);\n        }\n        \n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        List<Number> list1 = Arrays.asList(1.4, 4.2, 0);\n        System.out.println(sumSquares(list1)); //prints 29\n        \n        List<Number> list2 = Arrays.asList(-2.4, 1, 1);\n        System.out.println(sumSquares(list2)); //prints 6\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "public class CheckIfLastCharIsALetter {\n\n    public static boolean checkIfLastCharIsALetter(String str) {\n        // Check if string is empty or contains only spaces\n        if (str == null || str.trim().equals(\"\")){\n            return false;\n        }\n\n        // Get the last character of the string after removing trailing spaces\n        char lastChar = str.replaceAll(\"\\\\s+$\",\"\").charAt(str.length() - 1);\n\n        // Check if the last character is a letter\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // True\n        System.out.println(checkIfLastCharIsALetter(\"\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "import java.util.*;\n\npublic class CanArrange {\n    \n    public static int canArrange(List<Integer> arr) {\n        for (int i = arr.size() - 1; i > 0; i--) {\n            if (arr.get(i) < arr.get(i-1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    \n    public static void main(String[] args){\n        List<Integer> arr = new ArrayList<Integer>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(4);\n        arr.add(3);\n        arr.add(5);\n        \n        System.out.println(canArrange(arr)); // 3\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "Integer large = null;\n        Integer small = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num < 0 && (large == null || num > large)) {\n                    large = num;\n                } else if (num > 0 && (small == null || num < small)) {\n                    small = num;\n                }\n            }\n        }\n\n        return Arrays.asList(large, small);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, -1, 3, -5, 7))); // (-1, 1)\n        System.out.println(largestSmallestIntegers(Collections.emptyList())); // (null, null)\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // (null, null)\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "public class CompareOne {\n\n    public static Object compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Math.max((Integer) a, (Integer) b);\n        } else if (a instanceof Float || b instanceof Float) {\n            Float floatA = a instanceof Float ? (Float) a : Float.parseFloat(String.valueOf(a).replace(',', '.'));\n            Float floatB = b instanceof Float ? (Float) b : Float.parseFloat(String.valueOf(b).replace(',', '.'));\n            return Math.max(floatA, floatB);\n        } else if (a instanceof String && b instanceof String) {\n            BigDecimal decimalA = new BigDecimal(String.valueOf(a).replace(',', '.'));\n            BigDecimal decimalB = new BigDecimal(String.valueOf(b).replace(',', '.'));\n            return decimalA.max(decimalB);\n        } else if (a instanceof String && b instanceof Integer) {\n            BigDecimal decimalA = new BigDecimal(String.valueOf(a).replace(',', '.'));\n            BigDecimal decimalB = new BigDecimal((Integer) b);\n            return decimalA.max(decimalB);\n        } else if (a instanceof Integer && b instanceof String) {\n            BigDecimal decimalA = new BigDecimal((Integer) a);\n            BigDecimal decimalB = new BigDecimal(String.valueOf(b).replace(',', '.'));\n            return decimalA.max(decimalB);\n        }\n        // If the types are not instances of Integer, Float or String as per the problem statement, we return null\n        return null;\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "public static Boolean isEqualToSumEven(int n) {\n    if (n % 2 != 0 || n < 8) { // If the number is odd or less than 8, return false.\n        return false;\n    } else {\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "long result = 1;\n        for (int i = n; i >= 1; --i) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    public static long factorial(int num) {\n        long fact = 1;\n        for(int i = 1; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4));\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "public class FixSpaces {\n\n    public static void main(String[] args){\n        System.out.println(fix_spaces(\"Example\")); // \"Example\"\n        System.out.println(fix_spaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(fix_spaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(fix_spaces(\" Example   3\")); // \"_Example-3\"\n    }\n\n    public static String fix_spaces(String text) {\n        StringBuilder builder = new StringBuilder();\n        int spaceCounter = 0;\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                spaceCounter++;\n                if (spaceCounter == 1) {\n                    builder.append('_');\n                } else if (spaceCounter > 2){\n                    continue;\n                }\n            } else {\n                if (spaceCounter >= 2) {\n                    int insertIndex = builder.length() - 1;\n                    builder.insert(insertIndex, '-');\n                }\n                spaceCounter = 0;\n                builder.append(c);\n            }\n        }\n        \n        if (spaceCounter >= 2) {\n            int insertIndex = builder.length() - 1;\n            builder.insert(insertIndex, '-');\n        }\n\n        return builder.toString();\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "public class FileNameCheck {\n    public static String fileNameCheck(String fileName) {\n        // Check if there are more than three digits in the file's name.\n        if (fileName.replaceAll(\"[^0-9]\", \"\").length() > 3) {\n            return \"No\";\n        }\n\n        // Check if there is exactly one dot in the file's name.\n        long dotCount = fileName.chars().filter(ch -> ch == '.').count();\n        if (dotCount != 1) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot is not empty and starts with a latin alphapet letter.\n        String[] splitName = fileName.split(\"\\\\.\", 2);\n        if (splitName[0].isEmpty() || !Character.isLetter(splitName[0].charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of these: ['txt', 'exe', 'dll'].\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        boolean isValidExtension = Arrays.stream(validExtensions).anyMatch(ext -> ext.equals(splitName[1]));\n        if (!isValidExtension) {\n            return \"No\";\n        }\n\n        // If all the conditions are met, the file's name is valid.\n        return \"Yes\";\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "public class SumSquares {\n    public static int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                // square the number at indices that are multiples of 3 and not multiples of 4\n                sum += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                // cube the number at indices that are multiples of 4\n                sum += Math.pow(lst.get(i), 3);\n            } else {\n                // keep the number unchanged for other indices\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.util.*;\npublic class WordsInSentence {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        ArrayList<Integer> primeNums = new ArrayList<>();\n        \n        //Precompute all prime numbers within the length of the sentence\n        for (int i = 2; i <= words.length; ++i) {\n            if (isPrime(i))\n                primeNums.add(i);\n        }\n        \n        int idx = 0;\n        for (String word: words) {\n            if (!primeNums.isEmpty() && primeNums.get(0) == idx + 1) {\n                sb.append(word).append(\" \");\n                primeNums.remove(0);\n            }\n            idx++;\n        }\n        \n        //Remove the trailing space at the end\n        if (sb.length() > 0)\n            sb.deleteCharAt(sb.length() - 1);\n        \n        return sb.toString();\n    }\n    \n    private static boolean isPrime(int n) {\n        if (n <= 1) \n            return false; \n\n        for (int i = 2; i < Math.sqrt(n); i++) { \n            if (n % i == 0) \n                return false; \n        } \n        \n        return true; \n    }\n    \n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\")); //Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); //Output: \"go for\"\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "class Fraction {\n    int numerator, denominator;\n    \n    public Fraction(int num, int den) {\n        this.numerator = num;\n        this.denominator = den;\n    }\n}\n\npublic static Boolean simplify(String x, String n) {\n    // Parse strings into Fractions\n    String[] x_parts = x.split(\"/\");\n    String[] n_parts = n.split(\"/\");\n    \n    Fraction f1 = new Fraction(Integer.parseInt(x_parts[0]), Integer.parseInt(x_parts[1]));\n    Fraction f2 = new Fraction(Integer.parseInt(n_parts[0]), Integer.parseInt(n_parts[1]));\n    \n    // Calculate product\n    int prod_num = f1.numerator * f2.numerator;\n    int prod_den = f1.denominator * f2.denominator;\n    \n    // Check if product is a whole number\n    return (prod_den == 1);\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1, 11, -1, -11, -12);\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                return Integer.compare(sumOfDigits(a), sumOfDigits(b));\n            }\n\n            private int sumOfDigits(int num) {\n                int sum = 0;\n                while (num != 0) {\n                    sum += Math.abs(num % 10);\n                    num /= 10;\n                }\n                return sum;\n            }\n        });\n        \n        System.out.println(nums); // Output: [-1, -11, 1, -12, 11]\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "public static int specialFilter(List<Integer> nums) {\n    int count = 0;\n\n    for (int num : nums) {\n        if (num > 10 && isFirstAndLastDigitOdd(Math.abs(num))) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nprivate static boolean isFirstAndLastDigitOdd(int num) {\n    int firstDigit = num % 10;\n    while (num > 9) {\n        num /= 10;\n    }\n    int lastDigit = num;\n\n    return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "import java.util.*;\n\npublic class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        List<Integer> a = new ArrayList<>();\n        for (int i = 1; i <= n; ++i) {\n            a.add(i * i - i + 1);\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j + 1; k < n; ++k) {\n                    if ((a.get(i) + a.get(j) + a.get(k)) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); // prints: 1\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "// Define the order of the planets from closest to farthest from the sun \n        List<String> planetOrder = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        // Check if the planets are correct \n        if (!planetOrder.contains(planet1) || !planetOrder.contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        // Get the indices of the two inputted planets \n        int index1 = planetOrder.indexOf(planet1);\n        int index2 = planetOrder.indexOf(planet2);\n\n        // Swap the indices if they are out of order \n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n\n        // Return all planets whose orbits are located between the orbit of planet1 and the orbit of planet2 \n        return planetOrder.subList(index1 + 1, index2);\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\npublic class SortedListSum {\n    public static List<String> sortedListSum(List<String> lst) {\n        return lst.stream()\n                .filter(s -> s.length() % 2 == 0) // filter out strings of odd length\n                .sorted((s1, s2) -> { // sort by length, then alphabetically\n                    if (s1.length() != s2.length()) {\n                        return Integer.compare(s1.length(), s2.length());\n                    } else {\n                        return s1.compareTo(s2);\n                    }\n                })\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "public class XOrY {\n    public static int xOrY(int n, int x, int y) {\n        // If 'n' is prime then return 'x', else return 'y'\n        return isPrime(n) ? x : y;\n    }\n    \n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(num) + 1; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(xOrY(7, 34, 12)); // Outputs: 34\n        System.out.println(xOrY(15, 8, 5)); // Outputs: 5\n    }\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) return 0;\n        \n        int sum = 0;\n        for (int num : lst) {\n            if (num < 0 || !(num % 2 == 0)) continue;\n            sum += Math.pow((num / 2), 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.util.*;\n\npublic class Compare {\n    public static List<Integer> compare(List<Integer> scores, List<Integer> guesses) {\n        List<Integer> differences = new ArrayList<>();\n        \n        for (int i = 0; i < scores.size(); i++) {\n            differences.add(Math.abs(scores.get(i) - guesses.get(i)));\n        }\n        \n        return differences;\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "import java.util.*;\n\npublic class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        String strongestExt = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String ext : extensions) {\n            int cap = 0, sm = 0;\n            for (char c : ext.toCharArray()) {\n                if(Character.isUpperCase(c)) cap++;\n                else sm++;\n            }\n            int strength = cap - sm;\n            if(strength > maxStrength) {\n                maxStrength = strength;\n                strongestExt = ext;\n            }\n        }\n        \n        return className + \".\" + strongestExt;\n    }\n    \n    public static void main(String[] args) {\n        List<String> extensions = new ArrayList<>();\n        extensions.add(\"SErviNGSliCes\");\n        extensions.add(\"Cheese\");\n        extensions.add(\"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions));  // \"Slices.SErviNGSliCes\"\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "public class CycpatternCheck {\n    public static boolean cycpatternCheck(String s, String t) {\n        for (int i = 0; i < t.length(); ++i) {\n            if (s.contains(t) || s.contains(rotate(t))) {\n                return true;\n            }\n            t = rotate(t);\n        }\n        return false;\n    }\n\n    public static String rotate(String t) {\n        return t.substring(1) + t.charAt(0);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddCount {\n    public static List<Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n        \n        if (num < 0) { // For negative numbers, we start with one odd digit (-) and then consider the rest.\n            num = -num;\n            odd++;\n        }\n        \n        while (num != 0) {\n            int digit = num % 10; // Get last digit.\n            \n            if (digit % 2 == 0)\n                even++;\n            else\n                odd++;\n            \n            num /= 10; // Remove the last digit.\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12)); // Output: [1, 1]\n        System.out.println(evenOddCount(123)); // Output: [1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "public class IntToMiniRoman {\n    private static final int[] NUMBER_VALUES = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    private static final String[] ROMAN_NUMERALS = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    \n    public static String intToMiniRoman(int number) {\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < NUMBER_VALUES.length; ++i) {\n            while (number >= NUMBER_VALUES[i]) {\n                number -= NUMBER_VALUES[i];\n                result.append(ROMAN_NUMERALS[i]);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // Outputs: xix\n        System.out.println(intToMiniRoman(152)); // Outputs: clii\n        System.out.println(intToMiniRoman(426)); // Outputs: cdxxvi\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "public class RightAngleTriangle {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        // Sort the lengths of the three sides\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Use the Pythagorean theorem to check if it's a right angle triangle\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.*;\n\npublic class FindMax {\n    public static String findMax(List<String> words) {\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n        \n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            \n            if (uniqueChars.size() > maxUniqueChars) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            } else if (uniqueChars.size() == maxUniqueChars) {\n                maxWord = maxWord.compareTo(word) < 0 ? maxWord : word; // Compare in alphabetical order\n            }\n        }\n        \n        return maxWord;\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.util.*;\npublic class Eat {\n    public static List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (remaining >= need) {\n            result.add(number + need);\n            result.add(remaining - need);\n        } else {\n            result.add(number + remaining);\n            result.add(0);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(eat(5, 6, 10)); //[11, 4]\n        System.out.println(eat(4, 8, 9)); //[12, 1]\n        System.out.println(eat(1, 10, 10)); //[11, 0]\n        System.out.println(eat(2, 11, 5)); //[7, 0]\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.util.*;\n\npublic class DoAlgebra {\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = operand.get(0);\n\n        for (int i = 1; i < operand.size(); i++) {\n            String op = operator.get(i - 1);\n            int num = operand.get(i);\n\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"//\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int)Math.pow(result, num);\n                    break;\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\"));  // Outputs \"4321\"\n        System.out.println(solve(\"ab\"));  // Outputs \"AB\"\n        System.out.println(solve(\"#a@C\"));  // Outputs \"#A@c\"\n    }\n\n    public static String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        int letterCount = 0;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n                letterCount++;\n            } else {\n                result.append(c);\n            }\n        }\n        \n        // If the string contains no letters, reverse the string.\n        if (letterCount == 0) {\n            result.reverse();\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "if (text.isEmpty()) {\n            return null;\n        } else {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                byte[] messageDigest = md.digest(text.getBytes());\n                BigInteger no = new BigInteger(1, messageDigest);\n                String hashtext = no.toString(16); \n\n                while (hashtext.length() < 32) { \n                    hashtext = \"0\" + hashtext; \n                }\n\n                return hashtext;\n            } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.util.*;\n\npublic class GenerateIntegers {\n\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            String num = Integer.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = num.charAt(j) - '0';\n                if (digit % 2 == 0 && !result.contains(digit)) {\n                    result.add(digit);\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> res = generateIntegers(2, 8);\n        System.out.println(res);  // prints [2, 4, 6, 8]\n        \n        res = generateIntegers(10, 14);\n        System.out.println(res);  // prints []\n    }\n}"}

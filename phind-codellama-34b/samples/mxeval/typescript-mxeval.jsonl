{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "for(let i=0;i<numbers.length-1;i++) {\n    if(Math.abs(numbers[i] - numbers[i+1]) < threshold){\n      return true;\n    }\n}\nreturn false;\n};\nconsole.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // Should print: True"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "function separate_paren_groups(paren_string: string): Array<string> {\n    let stack: Array<string> = [];\n    let group: string = '';\n  \n    for (let i: number = 0; i < paren_string.length; i++) {\n        let char: string = paren_string[i];\n      \n        if (char === '(') {\n            stack.push(char);\n        } else if (char === ')') {\n            group += char;\n            stack.pop();\n          \n            if (stack.length === 0) {\n                stack.push(group);\n                group = '';\n            }\n        }\n    }\n  \n    return stack;\n}"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "return number0 - Math.floor(number0);\n}"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "let balance = 0;\n  \n  for(let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    \n    if(balance < 0){\n      return true;\n    }\n  }\n  \n  return false;\n};"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "function mean_absolute_deviation(numbers: number[]): number {\n    if (numbers.length === 0) {\n        return 0; // Return zero if the list is empty\n    }\n    \n    let sum = 0;\n    for (let num of numbers) {\n        sum += num;\n    }\n  \n    let mean = sum / numbers.length;\n    \n    let mad = 0;\n    for (let num of numbers) {\n        mad += Math.abs(num - mean);\n    }\n    \n    return mad / numbers.length;\n}"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "function intersperse(numbers: number[], delimeter: number): number[] {\n    if (!numbers.length) return [];\n  \n    const result = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimeter, numbers[i]);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "function parse_nested_parens(paren_string: string): Array<number> {\n    const groups = paren_string.split(' ');\n    let result: number[] = [];\n  \n    for (let group of groups) {\n        let count = 0, maxCount = 0;\n        for (let char of group) {\n            if (char === '(') {\n                count++;\n                if (count > maxCount) {\n                    maxCount = count;\n                }\n            } else if (char === ')') {\n                count--;\n            }\n        }\n        result.push(maxCount);\n    }\n  \n    return result;\n}"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "let sum = 0;\n    let product = 1;\n    for(let i=0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n};"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "let maxList = [];\nlet maxNum = numbers[0];\nfor(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > maxNum){\n        maxNum = numbers[i];\n    }\n    maxList.push(maxNum);\n}\nreturn maxList;\n};"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "function make_palindrome(string0: string): string {\n    // If the string is empty or has only one character, return itself because it's already a palindrome.\n    if (string0.length <= 1) {\n        return string0;\n    }\n    \n    let i = string0.length - 1;\n    while (i > 0 && string0[i] !== string0[i - 1]) {\n        i--;\n    }\n    \n    // If the whole string is a palindrome, return it directly.\n    if (i === 0) {\n        return string0;\n    }\n    \n    let nonPalindromicPart = string0.substring(0, i);\n    let reversedNonPalindromicPart = nonPalindromicPart.split('').reverse().join('');\n    return string0 + reversedNonPalindromicPart;\n}"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "function string_xor(a: string, b: string): string {\n    let result = '';\n\n    // Make sure both strings have the same length\n    while (b.length > a.length) {\n        a = '0' + a;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        let xor = (a[i] === b[i]) ? '0' : '1';\n        result += xor;\n    }\n\n    return result;\n}\n\nconsole.log(string_xor('010', '110')); // Output: 100"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "let result;\n    if (strings.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < strings.length; i++) {\n        if (!result || strings[i].length > result.length) {\n            result = strings[i];\n        }\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "while(b){\n    let t = b;\n    b = a % b;\n    a = t;\n}\nreturn a;\n}"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "let result: Array<string> = [];\nfor (var i = 1; i <= string0.length; i++)\n    result.push(string0.slice(0,i));\nreturn result;\n};"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = function (n: number) : string  {\n    return Array.from({length: n + 1}, (_, i) => i).join(' ');\n};"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "let str = string0.toLowerCase();\nlet distinctCharacters = new Set(str);\nreturn distinctCharacters.size;\n} \nconsole.log(count_distinct_characters('xyzXYZ')); // 3\nconsole.log(count_distinct_characters('Jerry')); // 4"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "let notes = music_string.split(' ');\n    let beats: number[] = [];\n    notes.forEach(function(note){\n        if (note === \"o\") {\n            beats.push(4);\n        } else if (note === \"o|\") {\n            beats.push(2);\n        } else if (note === \".|\") {\n            beats.push(1);\n        } \n    });\n    return beats;\n}"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "let count = 0;\nfor(let i=0;i<string0.length;i++)\n{\n    if(string0.substr(i,substring.length) == substring)\n    {\n        count++;\n    }\n}\nreturn count;\n};"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "function sort_numbers(numbers: string): string {\n    // Split the string into an array of words\n    let numberArray = numbers.split(' ');\n  \n    // Sort the array in ascending order\n    numberArray.sort((a, b) => {\n      if (a === 'zero') return -1;\n      if (b === 'zero') return 1;\n      if (a === 'one') return -1;\n      if (b === 'one') return 1;\n      if (a === 'two') return -1;\n      if (b === 'two') return 1;\n      if (a === 'three') return -1;\n      if (b === 'three') return 1;\n      if (a === 'four') return -1;\n      if (b === 'four') return 1;\n      if (a === 'five') return -1;\n      if (b === 'five') return 1;\n      if (a === 'six') return -1;\n      if (b === 'six') return 1;\n      if (a === 'seven') return -1;\n      if (b === 'seven') return 1;\n      if (a === 'eight') return -1;\n      if (b === 'eight') return 1;\n      if (a === 'nine') return -1;\n      if (b === 'nine') return 1;\n  \n      // If both inputs are equal, don't swap them\n      return 0;\n    });\n  \n    // Reassemble the sorted array back into a single string and return it\n    return numberArray.join(' ');\n}"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "numbers.sort((a, b) => a - b);\n  let minDiff = Infinity;\n  let result = [];\n  \n  for (let i = 0; i < numbers.length - 1; i++) {\n    const diff = numbers[i + 1] - numbers[i];\n    if (diff < minDiff) {\n      minDiff = diff;\n      result = [numbers[i], numbers[i + 1]];\n    }\n  }\n  \n  return result;\n};\n\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // (2.0, 2.2)\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // (2.0, 2.0)"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "let minElement = Math.min(...numbers);\n    let maxElement = Math.max(...numbers);\n    \n    return numbers.map(num => (num - minElement) / (maxElement - minElement));\n};"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "return values.filter(value => Number.isInteger(value));\n};"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "return string0.length;\n}"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "function largest_divisor(n: number): number {\n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    return -1; // or handle this case differently based on your requirements (e.g., throw an error when there's no divisor)\n}"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "import * as math from 'mathjs'\n\nfunction factorize(n: number) : Array<number>  {\n    let factors: Array<number> = [];\n    for (let i = 2; i <= n; i++) {\n        while ((n % i) == 0) {\n            factors.push(i);\n            // Reduce the input number by dividing it with the current factor\n            n /= i;\n        }\n    }\n    return factors;\n}"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "let uniqueNumbers: number[] = [];\n   let numbersMap: Map<number, boolean> = new Map();\n   \n   for(let num of numbers){\n      if(!numbersMap.has(num)){\n         numbersMap.set(num, true);\n         uniqueNumbers.push(num);\n      }\n   }\n   \n   return uniqueNumbers;\n}\nconsole.log(remove_duplicates([1, 2, 3, 2, 4])) // [1, 3, 4]"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "let result: string = '';\n    for(let i=0; i<string0.length;i++) {\n        let char = string0[i];\n        if(char === char.toUpperCase())\n            result += char.toLowerCase();\n        else \n            result += char.toUpperCase();\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "return strings.join('');\n}"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "return strings.filter(str => str.startsWith(prefix));\n};"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "function get_positive(l: Array<number>) : Array<number> {\n    return l.filter((num) => num > 0);\n}"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "if (n < 2) {\n    return false;\n}\nfor (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) {\n        return false;\n    }\n}\nreturn true;\n};"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "function sort_third(l: number[]): number[] {\n    let thirdElements = l.filter((_, index) => (index + 1) % 3 === 0);\n    thirdElements.sort((a, b) => a - b);\n    \n    return l.map((val, index) => {\n        if ((index + 1) % 3 === 0) {\n            return thirdElements.shift();\n        } else {\n            return val;\n        }\n    });\n}"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "let uniqueList = [...new Set(l)]; // using Set object to remove duplicates\nuniqueList.sort((a, b) => a - b); // sorting the list\nreturn uniqueList;\n};\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // test function with example array"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "function max_element(l: Array<number>): number {\n    return Math.max(...l);\n}"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "let count = 0;\n  \nfor(let i=1; i<n; i++) {\n    if(i % 11 === 0 || i % 13 === 0) {\n      count += (i.toString().split('7').length - 1);\n    }\n}\n  \nreturn count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "function sort_even(l: number[]): number[] {\n    let r: number[] = []; // Will hold values from even indices of l\n    \n    for (let i = 0; i < l.length; i += 2) {\n        r.push(l[i]);\n    }\n    \n    r.sort((a, b) => a - b); // Sort in ascending order\n    \n    for (let i = 0; i < l.length; i += 2) {\n        l[i] = r.shift(); // Replace with the smallest remaining element of r\n    }\n\n    return l;\n}"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "function isPrime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) return false;\n    }\n    return num > 1;\n}\n\nfunction primeFib(n) {\n    let fibNums = [0, 1];\n    let primeFibNums = [];\n    let i = 2;\n    while (primeFibNums.length < n) {\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n        if (isPrime(fibNums[i])) {\n            primeFibNums.push(fibNums[i]);\n        }\n        i++;\n    }\n    return primeFibNums[n - 1];\n}"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "if (l.length < 3) return false;\n    const len = l.length;\n    // Sort the list\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < len - 1; i++) {\n        let j = i + 1;\n        let k = len - 1;\n        while (j < k) {\n            if (l[i] + l[j] + l[k] === 0) return true;\n            else if (l[i] + l[j] + l[k] < 0) j += 1;\n            else k -= 1;\n        }\n    }\n    return false;\n}\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "const car_race_collision = function (n: number) : number  {\n    return n;\n}"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "let result = l.map(num => num + 1);\nreturn result;\n}"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "let map = new Map();\n  \nfor(let i of l){\n    if(map.has(-i)){\n        return true;\n    }else{\n        map.set(i,1);\n    }\n}\n  \nreturn false;\n};"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "return x.toString(base);\n}"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "return 0.5 * a * h;\n}"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "let dp = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        dp[i % 4] = dp[(i - 1) % 4] + dp[(i - 2) % 4] + dp[(i - 3) % 4] + dp[(i - 4) % 4];\n    }\n    return dp[n % 4];\n};"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "function median(l: Array<number>): number {\n    // Sort the array in ascending order\n    l.sort((a, b) => a - b);\n  \n    // Calculate the middle index of the sorted array\n    let medianIndex = Math.floor(l.length / 2);\n  \n    // If the length of the array is even, return the average of the two middle numbers.\n    if (l.length % 2 === 0) {\n        return (l[medianIndex - 1] + l[medianIndex]) / 2;\n    }\n    // If the length of the array is odd, return the middle number.\n    else {\n        return l[medianIndex];\n    }\n}"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "function is_palindrome(text: string) : boolean  {\n    let reversedText = text.split('').reverse().join(''); // create reversed version of the input string\n    return text == reversedText; // check if both strings are identical\n}\n\n// testing\nconsole.log(is_palindrome(''));         // True\nconsole.log(is_palindrome('aba'));       // True\nconsole.log(is_palindrome('aaaaa'));     // True\nconsole.log(is_palindrome('zbcd'));      // False"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "let result = 1;\n    let two = 2 % p;\n    \n    while(n > 0){\n        if((n & 1) == 1)\n            result = (result * two) % p;\n        two = (two * two) % p;\n        n >>= 1;\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "let result: string = '';\n    for(let i = 0; i < text.length; i++) {\n        let char: string = text[i];\n        if(!(/([aeiou])/gi.test(char))) { // check if character is not a vowel\n            result += char;\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "for(let i=0;i<l.length;i++){\n    if(l[i] >= t){\n        return false;\n      }\n   }\nreturn true;\n}"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "function same_chars(s0: string, s1: string): boolean {\n    const sortedS0 = s0.split('').sort().join('');\n    const sortedS1 = s1.split('').sort().join('');\n    \n    return sortedS0 === sortedS1;\n}"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "let first = 0;\n    let second = 1;\n\n    if (n === 0) return first;\n    if (n === 1) return second;\n\n    for(let i = 2; i <= n; i++){\n        const third = first + second;\n        first = second;\n        second = third;\n    }\n    return second;\n};"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "let stack = [];\n    for(let i=0; i<brackets.length;i++){\n      if(brackets[i] === \"<\"){\n        stack.push(\"<\");\n      } else {\n          if(!stack.length || stack[stack.length-1] !== \"<\"){\n            return false;\n          }else{\n            stack.pop();\n          }\n       }\n    }\n    if(stack.length > 0){\n      return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "function monotonic(l: Array<number>): boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "function common(l1: number[], l2: number[]): number[] {\n    let set = new Set([...l1, ...l2]);\n    let commonElements: number[] = [];\n\n    for (let item of set) {\n        if (l1.includes(item) && l2.includes(item)) {\n            commonElements.push(item);\n        }\n    }\n\n    return commonElements.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "function largest_prime_factor(n: number): number {\n    let maxPrime = -1;\n\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1; // equivalent to n /= 2\n    }\n\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n = n / i;\n        }\n    }\n\n    if (n > 2) {\n        maxPrime = n;\n    }\n    \n    return maxPrime;\n}"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "return n * (n + 1) / 2;\n}"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const stack = [];\n\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n        stack.push(brackets[i]);\n    } else if (brackets[i] === ')') {\n        if (!stack.length) {\n            return false;\n        }\n        stack.pop();\n    }\n}\n\nreturn !stack.length;\n};\n\nconsole.log(correct_bracketing(\"(\")); // False\nconsole.log(correct_bracketing(\"()\")); // True\nconsole.log(correct_bracketing(\"(()())\")); // True\nconsole.log(correct_bracketing(\")(()\")); // False"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "function derivative(xs: number[]): number[] {\n    // Create an empty array to store the new coefficients.\n    let derivative_coefficients: number[] = [];\n  \n    // Iterate over the coefficients starting from index 1.\n    for (let i = 1; i < xs.length; ++i) {\n        // For each coefficient, multiply it by its corresponding power of x\n        // and add the result to the derivative_coefficients array.\n        derivative_coefficients.push(xs[i] * i);\n    }\n  \n    // Finally, return the array of derivative coefficients.\n    return derivative_coefficients;\n}"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "let dp = [0, 0, 1];\n    if (n < 3) return dp[n];\n    for(let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n    return dp[n];\n}"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "let count = 0;\n    let lowerCaseWord = s.toLowerCase();\n    for(let i=0; i<lowerCaseWord.length; i++){\n        if('aeiou'.includes(lowerCaseWord[i])){\n            count++;\n        }\n    }\n    if(lowerCaseWord[lowerCaseWord.length-1] === 'y') {\n        count++;\n    }\n    return count;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "function circular_shift(x: number, shift: number): string {\n    let digits = x.toString().split('');\n    if (shift > digits.length) {\n        return digits.reverse().join('');\n    } else {\n        for (let i = 0; i < shift; i++) {\n            digits.unshift(digits.pop());\n        }\n        return digits.join('');\n    }\n}"}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "let numApples = parseInt(s.split(\" \")[0]);\n    let numOranges = parseInt(s.split(\" \")[2]);\n    return n - numApples - numOranges;\n}"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "function pluck(arr: number[]): number[] {\n    if (!arr.length) return [];\n\n    let smallestEven = -1;\n    let index = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && (smallestEven === -1 || arr[i] < arr[smallestEven])) {\n            smallestEven = i;\n        }\n    }\n\n    return smallestEven !== -1 ? [arr[smallestEven], smallestEven] : [];\n}"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "const search = function(lst: Array<number>): number {\n    let counter: {[key: string]: number} = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (!counter[lst[i]]) {\n            counter[lst[i]] = 1;\n        } else {\n            counter[lst[i]] += 1;\n        }\n    }\n    \n    let result: number = -1;\n    for (let i in counter) {\n        if (counter[i] >= parseInt(i)) {\n            if (result < parseInt(i)) {\n                result = parseInt(i);\n            }\n        }\n    }\n    \n    return result;\n};"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "function strange_sort_list(lst: number[]): number[] {\n    // Sort the list in ascending order.\n    lst.sort((a, b) => a - b);\n    \n    let result: number[] = [];\n    while (lst.length > 0) {\n        // Alternately take minimum and maximum from list.\n        result.push(lst.shift()!);\n        if (lst.length > 0) {\n            result.push(lst.pop()!);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "function triangle_area(a: number, b: number, c: number): number {\n  // Check if the three sides form a valid triangle\n  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;  // Semi-perimeter\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));  // Heron's formula\n    return Math.round(area * 100) / 100;  // Round to 2 decimal points\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "let totalWeight = q.reduce((a,b) => a + b, 0);\n    if(totalWeight > w){\n        return false;\n    }\n    let start = 0;\n    let end = q.length -1;\n    while (start < end) {\n        if(q[start] != q[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n};"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "let n = arr.length; \n    let changes = 0; \n\n    // Use two pointers technique to compare elements from the start and end of the array\n    let i = 0, j = n - 1; \n\n    while(i < j) {\n        // If the elements are not equal, we need to change one of them\n        if (arr[i] !== arr[j]) {\n            changes++;\n        }\n        // Move the start pointer to the next element from the start\n        i++;\n        // Move the end pointer to the next element from the end\n        j--;\n    }\n\n    return changes; \n};"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "let countCharsInList = (lst: Array<string>) => {\n    let charCount = 0;\n    for(let i=0 ; i < lst.length; i++){\n        charCount += lst[i].length;\n    }\n    return charCount;\n}\n\nlet charsInLst1 = countCharsInList(lst1);\nlet charsInLst2 = countCharsInList(lst2);\n\nif(charsInLst1 < charsInLst2){\n    return lst1;\n}else{\n    return lst2;\n}\n};"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "// Check if a number is prime\n  const isPrime = (num: number): boolean => {\n    for(let i = 2; i < num; i++)\n      if(num % i === 0) return false;\n    return num > 1;\n  }\n\n  // Check factors of a number\n  const checkFactors = (n: number): boolean => {\n    let factors = [];\n    for(let i = 2; n != 1; i++) {\n      if(n % i == 0) {\n        if(isPrime(i)) {\n          factors.push(i);\n        }\n        n /= i;\n        i--;\n      }\n    }\n    return factors.length === 3;\n  }\n  \n  // Main function body\n  return checkFactors(a);\n}"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "if (n === 1) return x === 1;\n\n  while (x !== 1){\n    if (x % n !== 0) return false;\n    x /= n;\n  }\n\n  return true;\n};"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "let b = Math.round(Math.pow(Math.abs(a), 1/3));\n    return b*b*b === a;\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "let count = 0;\n    const primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n    \n    for(let i = 0; i < num.length; i++){\n        if(primeHexDigits.includes(num[i])){\n            count++;\n        }\n    }\n    \n    return count;\n}\n\nconsole.log(hex_key(\"AB\")); //1\nconsole.log(hex_key(\"1077E\")); //2\nconsole.log(hex_key(\"ABED1A33\")); //4\nconsole.log(hex_key(\"123456789ABCDEF0\")); //6\nconsole.log(hex_key(\"2020\")); //2"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "let binary = decimal.toString(2);\n    return \"db\"+binary+\"db\";\n}"}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "function is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n    }\n    \n    for (let i = 0; i < s.length - 2; i++) {\n        const a = s[i];\n        const b = s[i + 1];\n        const c = s[i + 2];\n        \n        if (a === b || b === c || a === c) {\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "let result: string[] = [];\n  grades.forEach((gpa) => {\n    if(gpa == 4.0){\n      result.push('A+');\n    } else if (gpa > 3.7) {\n        result.push('A');\n    } else if (gpa > 3.3) {\n        result.push('A-');\n    } else if (gpa > 3.0) {\n      result.push('B+');\n    } else if (gpa > 2.7){\n        result.push('B');\n    }else if(gpa > 2.3) {\n        result.push('B-');\n    } else if (gpa > 2.0) {\n      result.push('C+');\n    } else if (gpa > 1.7){\n        result.push('C');\n    }else if(gpa > 1.3) {\n        result.push('C-');\n    }else if (gpa > 1.0) {\n      result.push('D+');\n    } else if (gpa > 0.7){\n        result.push('D');\n    }else if(gpa > 0.0) {\n        result.push('D-');\n    }else{\n        result.push('E');\n    }\n  });\n  return result;\n};\n\nlet test = [4.0, 3, 1.7, 2, 3.5];\nconsole.log(numerical_letter_grade(test)); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) \n        if (n % i === 0) return false;\n    return true;\n}\n\nfunction prime_length(string: string): boolean {\n    return isPrime(string.length);\n}"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "if(n === 1){\n    return 10; //There are ten numbers which are one digit long and start or end with 1 i.e., 0,1,2,3,4,5,6,7,8,9\n} else {\n    return 9 * (10 ** (n - 1)); // For n-digit numbers that start with 1, the first digit is fixed as 1 and for the remaining digits we have 10 choices each i.e., 10,11,...,19 and then for the rest of the digits we have 10 choices each.\n}\n};"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "def solve(N):\n    sum_of_digits = sum(map(int, str(N)))\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "let sum = 0;\nfor(let i=1;i<lst.length;i+=2) {\n    if(lst[i] % 2 === <s>    0){\n        sum += lst[i];\n    }\n}\nreturn sum;\n};"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "function anti_shuffle(s: string): string {\n    // Split the string into words\n    let words = s.split(' ');\n    \n    // Sort each word in ascending ASCII value\n    for (let i = 0; i < words.length; i++) {\n        words[i] = words[i].split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n    }\n    \n    // Reassemble the sentence\n    return words.join(' ');\n}"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "function get_row(lst: number[][], x: number): [number, number][] {\n    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    // sort by rows in ascending order and then columns in descending order\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return result;\n}"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "let copyArray = [...array];\n  \n  if (copyArray.length === 0 || copyArray.length === 1) {\n    return copyArray;\n  }\n  \n  let sum = copyArray[0] + copyArray[copyArray.length - 1];\n  \n  if (sum % 2 === 0) {\n    // Sort array in descending order\n    copyArray.sort((a, b) => b - a);\n  } else {\n    // Sort array in ascending order\n    copyArray.sort((a, b) => a - b);\n  }\n  \n  return copyArray;\n};"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "function encrypt(s: string): string {\n    let encrypted = '';\n    \n    for (let i = 0; i < s.length; i++) {\n        let ascii = s.charCodeAt(i);\n        if ((ascii >= 65 && ascii <= 90)) { // For uppercase letters\n            encrypted += String.fromCharCode((ascii - 65 + 2 * 2) % 26 + 65);\n        } else if ((ascii >= 97 && ascii <= 122)) { // For lowercase letters\n            encrypted += String.fromCharCode((ascii - 97 + 2 * 2) % 26 + 97);\n        } else { // For any other characters, just append them\n            encrypted += s[i];\n        }\n    }\n    \n    return encrypted;\n}"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "// If the list is empty or contains only one element, return None\n    if(lst.length < 2) {\n        return null;\n    }\n  \n    // Sort the list in ascending order\n    let sorted_list = lst.sort((a, b) => a - b);\n  \n    // Return the second element of the sorted list\n    return sorted_list[1];\n};\n  \n  console.log(next_smallest([1, 2, 3, 4, 5]));  // Output: 2\n  console.log(next_smallest([5, 1, 4, 3, 2]));  // Output: 2\n  console.log(next_smallest([]));  // Output: null\n  console.log(next_smallest([1, 1]));  // Output: null"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const is_bored = function (S: string) : number  {\n    const sentences = S.match( /[^.!?]+[.!?]+/g );\n    let count = 0;\n\n    for (let i=0; i<sentences.length; i++) {\n        if (sentences[i].trim().startsWith(\"I\")) {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    return x + y === z || x + z === y || y + z === x;\n}else{\n    return false;\n}\n};"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "function encode(message: string): string {\n    let result = '';\n    \n    for(let i = 0; i < message.length; ++i) {\n        let char = message[i];\n        \n        if(/([a-z])/.test(char)) {\n            if(/[aeiou]/.test(char)) {\n                let code = char.charCodeAt(0);\n                char = String.fromCharCode((code - 97 + 2) % 26 + 97); // -97 to bring it into range of 0-25\n            } \n            result += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n        } else {\n            result += char;\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return true;\n}\n\nfunction largestPrime(lst: number[]): number {\n    let maxPrime = -1;\n    for (let num of lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    return maxPrime;\n}\n\nfunction sumOfDigits(num: number): number {\n    let sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}\n\nfunction solve(lst: number[]): number {\n    let maxPrime = largestPrime(lst);\n    if (maxPrime === -1) return 0; // no prime numbers found in the list\n    return sumOfDigits(maxPrime);\n}"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "function check_dict_case(dict: Map<string, string>): boolean {\n    if (dict.size === 0) return false; // If dictionary is empty, return false\n\n    let allLower = true; // flag to track whether all keys are lower case\n    let allUpper = true; // flag to track whether all keys are upper case\n\n    for (let key of dict.keys()) {\n        if (key !== key.toLowerCase()) allLower = false; // if a key is not in lower case, set allLower to false\n        if (key !== key.toUpperCase()) allUpper = false; // if a key is not in upper case, set allUpper to false\n    }\n\n    return allLower || allUpper; // If all keys are either in lower or upper case return true, else false\n}"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "function count_up_to(n: number): Array<number> {\n  const isPrime = (num: number) => {\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) return false;\n    }\n    return num > 1;\n  };\n\n  let primes: Array<number> = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) primes.push(i);\n  }\n  \n  return primes;\n}"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function (a: number, b: number): number {\n    let lastDigitA = Math.abs(a) % 10; //taking absolute value to handle negative numbers\n    let lastDigitB = Math.abs(b) % 10;\n    return lastDigitA * lastDigitB;\n}"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "function count_upper(s: string) : number  {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        const c = s[i];\n        if (c === 'A' || c === 'E' || c === 'I' || c === 'O' || c === 'U') {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "let numValue = parseFloat(value);\n  \n  // use mathjs's round function, which follows the \"round half away from zero\" rule\n  return math.round(numValue);\n};"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "let result:Array<number>= [];\n    for (let i=0; i<n ;i++){\n        if(n%2 === 0){\n            //if n is even, add next even number to list\n            result.push(n+2);\n        }else{\n            //if n is odd, add next odd number to list\n            result.push(n+2);\n        }\n    }\n    return result;\n}\n//Testing the function\nconsole.log(make_a_pile(3))"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "function words_string(s: string): Array<string> {\n    return s.replace(/,/g, ' ').trim().split(/\\s+/) ;\n}"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function(x: number, y: number): number {\n    // Start from the smaller number\n    let currentNum = x < y ? x : y;\n    \n    while (currentNum >= x && currentNum <= y) {\n        if (currentNum % 2 === 0) {\n            return currentNum; // Return first even number found\n        }\n        \n        currentNum++; // Increment to next highest number \n    }\n    \n    return -1; // If no even numbers were found in range, then return -1\n};"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "let result;\nif (n > m) {\n    return -1;\n} else {\n    let total = 0;\n    for(let i=n; i<=m; i++){\n        total += i;\n    }\n    let avg = Math.round(total / (m-n+1)); //Because the range is inclusive\n    result = avg.toString(2);  //Converting to binary\n    return `0b${result}`;   //Formatting as binary number\n}\n};"}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "function unique_digits(x: number[]): number[] {\n    // filters array x based on whether number has any even digit\n    let filteredArray = x.filter((num) => {\n        let numToStr = num.toString();\n        for (let i=0; i<numToStr.length; i++){\n            if (parseInt(numToStr[i]) % 2 === 0){\n                return false;\n            }\n        }\n        return true;\n    });\n\n    // sorts the array in increasing order and returns it\n    return filteredArray.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "interface NumberToName {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine'\n}\n\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3] ;\n\nconst filterArray = arr.filter(num => num >= 1 && num <= 9);\nconst sortedArray = filterArray.sort((a, b) => b - a);\nconst result = sortedArray.map(num => NumberToName[num as keyof typeof NumberToName]);\nconsole.log(result);"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "let result: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let factorial = 1;\n      for (let j = 1; j <= i; j++) {\n        factorial *= j;\n      }\n      result.push(factorial);\n    } else {\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5)); // [1, 2, 6, 6, 15]"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "let countEven = 0;\n    let countOdd = 0;\n    for(let i=1;i<=n;i++){\n        if(i.toString()===i.toString().split(\"\").reverse().join(\"\")){\n            if(i%2===0){\n                countEven++;\n            }else{\n                countOdd++;\n            }\n        }\n    }\n    return [countEven,countOdd];\n};"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "let sumDigits: number = 0;\n    let count: number = 0;\n  \n    for(let i=0; i < arr.length; i++) {\n        if(arr[i] < 0) {\n            // Ignore the sign, focus on the first digit\n            sumDigits = Math.abs(arr[i]) % 10;\n        } else {\n            while(arr[i] > 0){\n                sumDigits += arr[i] % 10;\n                arr[i] = Math.floor(arr[i]/10);\n            }\n        }\n        if(sumDigits > 0) {\n            count++;\n        }\n    }\n  \n    return count;\n}"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "function move_one_ball(arr: Array<number>) : boolean {\n    // check if array is empty\n    if (arr.length === 0) return true;\n  \n    for (let i = 1; i < arr.length; i++) {\n        // if current element is less than previous, then it's not rotated\n        if (arr[i] < arr[i - 1]) return false;\n    }\n    \n    // if no false cases found, array can be sorted by right-shift\n    return true;\n}"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "// First, we count how many odd numbers are in lst1 and lst2.\nlet oddCountLst1 = lst1.filter(x => x % 2 !== 0).length;\nlet oddCountLst2 = lst2.filter(x => x % 2 !== 0).length;\n\n// We can perform the exchange if and only if the number of odd numbers in lst1 is\n// equal to or less than the number of odd numbers in lst2. Otherwise, we return \"NO\".\nif (oddCountLst1 > oddCountLst2) {\n    return \"NO\";\n} else {\n    return \"YES\";\n}"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "let map = new Map();\n        if(test === ''){\n            return map;\n        }\n        \n        let arr = test.split(' ');\n        for(let i = 0; i < arr.length; i++){\n            if(map.has(arr[i])){\n                map.set(arr[i], map.get(arr[i])+1);\n            } else {\n                map.set(arr[i], 1);\n            }\n        }\n        \n        let max = Math.max(...Array.from(map.values()));\n        for (let [k, v] of map){\n            if(v !== max){\n                map.delete(k);\n            }\n        }\n\n        return map;\n    };"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "function reverse_delete(s: string, c: string): [string, boolean] {\n    // Removing all occurrences of characters in 'c' from 's'\n    let modifiedString = s.split('').filter((char) => !c.includes(char)).join('');\n  \n    // To check if the modified string is a palindrome\n    let isPalindrome: boolean;\n    \n    let reversedString = modifiedString.split('').reverse().join('');\n    if (modifiedString === reversedString) {\n        isPalindrome = true;\n    } else {\n        isPalindrome = false;\n    }\n  \n    return [modifiedString, isPalindrome];\n}"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "function odd_count(lst: Array<string>): Array<string> {\n    return lst.map((str, index) => {\n        let oddCount = 0;\n        for (const char of str) {\n            if (parseInt(char) % 2 !== 0) {\n                oddCount++;\n            }\n        }\n        return `the number of odd elements ${oddCount}n the str${oddCount}ng ${index + 1} of the ${oddCount}nput.`;\n    });\n}"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "let minSum = nums[0];\n    let currentSum = nums[0];\n    \n    for(let i=1; i < nums.length; i++){\n        currentSum = Math.min(currentSum + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\n    return minSum;\n};"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "function max_fill(grid, capacity): number {\n    let totalWells = 0;\n    \n    for (let row of grid) {\n        // count number of 1's in each row (or well)\n        let onesInRow = row.filter((cell) => cell === 1).length;\n        \n        if (onesInRow > capacity) {\n            totalWells += Math.floor(onesInRow/capacity);\n        }\n    }\n    \n    return totalWells;\n}"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "return arr.sort((a, b) => {\n        const aBinary = a.toString(2);\n        const bBinary = b.toString(2);\n        const onesA = aBinary.split('1').length - 1;\n        const onesB = bBinary.split('1').length - 1;\n        return onesA - onesB || a - b;\n    });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "function select_words(s: string, n: number): Array<string> {\n    if(!s){\n        return [];\n    }\n    const words = s.split(' ');\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result: Array<string> = [];\n    \n    for(let word of words){\n        let count = 0;\n        for(let letter of word){\n            if(consonants.includes(letter)){\n                count++;\n            }\n        }\n        if(count === n){\n            result.push(word);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "function get_closest_vowel(word: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    \n    for (let i = word.length - 1; i >= 2; i--) {\n        if (vowels.includes(word[i]) && \n            !vowels.includes(word[i-1]) && \n            !vowels.includes(word[i+1])) {\n            return word[i];\n        }\n    }\n    \n    return \"\";\n}"}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "let openParanthesisCount1 = 0;\n    let closeParanthesisCount1 = 0;\n    for(let i=0; i < lst[0].length; i++){\n        if(lst[0][i] == '('){\n            openParanthesisCount1 += 1;\n        } else {\n            closeParanthesisCount1 += 1;\n        }\n    }\n\n    let openParanthesisCount2 = 0;\n    let closeParanthesisCount2 = 0;\n    for(let i=0; i < lst[1].length; i++){\n        if(lst[1][i] == '('){\n            openParanthesisCount2 += 1;\n        } else {\n            closeParanthesisCount2 += 1;\n        }\n    }\n\n    if((openParanthesisCount1 + openParanthesisCount2) === (closeParanthesisCount1 + closeParanthesisCount2)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n};"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "function maximum(arr: Array<number>, k: number): Array<number> {\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    \n    // Return the first `k` elements of the sorted array\n    return arr.slice(0, k);\n}"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "let sum = 0;\nfor(let i=0;i<lst.length;i+=2){\n    if(lst[i] % 2 !== 0){\n        sum += lst[i];\n    }\n}\nreturn sum;\n};\n//Testing the function \nconsole.log(solution([5, 8, 7, 1])) // ==> 12\nconsole.log(solution([3, 3, 3, 3, 3])) //==> 9\nconsole.log(solution([30, 13, 24, 321])) //==>0"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] >= 10 && arr[i] <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "function get_odd_collatz(n: number): Array<number> {\n    let collatzSeq: Array<number> = [n];\n    while (n != 1){\n        if(n % 2 == 0)\n            n = n/2;\n        else\n            n = 3*n + 1;\n        collatzSeq.push(n);\n    }\n    \n    let oddNumbers: Array<number> = collatzSeq.filter((num, index) => {\n        return num % 2 != 0 || num == 1; // also include '1' as it is part of sequence\n    });\n    \n    return oddNumbers.sort((a, b) => a - b); // return sorted odd numbers\n}"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "function valid_date(date: string): boolean {\n    // Check if string is not empty and follows correct format\n    const datePattern = /^([1-9]|0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$/;\n    if (!date.match(datePattern)) {\n        return false;\n    }\n    \n    // Extract day, month and year\n    const [month, day, year] = date.split('-');\n    const numMonth = parseInt(month);\n    const numDay = parseInt(day);\n    \n    // Validate number of days in a month\n    if (numMonth === 2) {\n        return (numDay >= 1 && numDay <= 29);\n    } else if ([4,6,9,11].includes(numMonth)) {\n        return (numDay >= 1 && numDay <= 30);\n    } else {\n        return (numDay >= 1 && numDay <= 31);\n    }\n}"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "function split_words(txt: string): any {\n    if (/\\s/.test(txt)) {\n        return txt.split(/\\s+/);\n    } else if (/,/.test(txt)) {\n        return txt.split(',');\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++) {\n            const char = txt[i];\n            if (char === char.toLowerCase() && /[a-z]/.test(char)) {\n                const order = char.charCodeAt(0) - 'a'.charCodeAt(0);\n                if (order % 2 !== 0) count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "let sorted = true;\nlet duplicates = false;\n  \nfor(let i = 0; i < lst.length - 1; i++) {\n    if(lst[i] >= lst[i + 1]) {\n        sorted = false;\n    }\n    if(lst[i] === lst[i + 1]){\n        duplicates = true;\n    }\n}\n  \nif(!sorted || duplicates){\n    return false;\n} else {\n    return true;\n}\n};"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n  \n    for (let i = 3, max = Math.sqrt(num); i <= max; i+=2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "if(arr.length === 0){\n    return null;\n}\nlet sumMagnitudes = 0;\nlet productSigns = 1;\nfor (let i = 0; i < arr.length; i++) {\n    if(arr[i] < 0){\n        productSigns *= -1;\n        sumMagnitudes += -arr[i];\n    } else if(arr[i] > 0){\n        sumMagnitudes += arr[i];\n    } else {\n       return 0; \n    }\n}\nreturn productSigns*sumMagnitudes;\n};"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "from collections import deque\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]  # Right, Down, Left, Up\n    visited = [[False]*n for _ in range(n)]\n    results = []\n    \n    for i in range(n):\n        for j in range(n):\n            # Perform BFS from each cell\n            q = deque([(grid[i][j], i, j, [grid[i][j]])])\n            visited[i][j] = True\n            \n            while q:\n                val, x, y, path = q.popleft()\n                \n                if len(path) == k:\n                    results.append(path)\n                    break  # Break to start BFS from next cell\n                \n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    \n                    if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                        visited[nx][ny] = True\n                        q.append((grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n    \n    # Return the path with smallest lexicographical order\n    results.sort()\n    return results[0]"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "function tri(n: number): Array<number> {\n    // Initialize Tribonacci sequence array with first three elements\n    const triSeq = [1,3,2];\n  \n    for (let i = 3; i <= n; i++) {\n      if (i % 2 === 0) {\n        triSeq[i] = 1 + i / 2; // even case\n      } else {\n        triSeq[i] = triSeq[i - 1] + triSeq[i - 2] + triSeq[i + 1]; // odd case\n      }\n    }\n  \n    return triSeq.slice(0, n+1); // Return the first n+1 elements of the sequence\n}"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "let product = 1;\nlet foundOdd = false;\nwhile (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 != 0) {\n        product *= digit;\n        foundOdd = true;\n    }\n    n = Math.floor(n / 10);\n}\nreturn foundOdd ? product : 0;\n};"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "let stack: string[] = [];\n    for( let i = 0; i < string0.length; i++) {\n        if(string0[i] === '['){\n            stack.push(string0[i]);\n        }else {\n            if(!stack.length || stack[stack.length -1 ] !== '['){\n                return false;\n            }\n            stack.pop();\n        } \n    }\n    if (stack.length === 0) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\n// Testing the function\nconsole.log(is_nested('[[]]')); // expected output: true\nconsole.log(is_nested('[]]]]]]][[[[[]')); // expected output: false\nconsole.log(is_nested('[][]')); // expected output: false\nconsole.log(is_nested('[]')); // expected output: false\nconsole.log(is_nested('[[][]]')); // expected output: true\nconsole.log(is_nested('[[]][[')); // expected output: true"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "let sum = 0;\nfor(let num of lst){\n    let ceilNum = Math.ceil(num);\n    sum += ceilNum * ceilNum;\n}\nreturn sum;\n};"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "function check_if_last_char_is_a_letter(txt: string): boolean {\n    // Check if text is empty\n    if (!txt) return false;\n  \n    // Get the last character of the trimmed string\n    const lastChar = txt.trim().slice(-1);\n    \n    // Return true if the last character is a letter and \n    // the second to last character is a space or non-existent\n    return (lastChar >= 'a' && lastChar <= 'z') || \n           (lastChar >= 'A' && lastChar <= 'Z') && \n           (txt.trim().length < 2 || txt.slice(-2, -1) === ' ');\n}"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "let largestIndex = -1;\n    for(let i=0; i < arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n}"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "let maxNegative = null;\n    let minPositive = null;\n  \n    for(let i=0;i<lst.length;i++){\n      if(lst[i] < 0 && (maxNegative === null || lst[i] > maxNegative)){\n        maxNegative = lst[i];\n      } else if (lst[i] > 0 && (minPositive === null || lst[i] < minPositive)) {\n        minPositive = lst[i];\n      }\n    }\n  \n    return [maxNegative, minPositive];\n}\n\nconsole.log(largest_smallest_integers([2, 4, -1, 3, -5, 7])) //Output: [-1, 2]\nconsole.log(largest_smallest_integers([])) //Output: [null, null]\nconsole.log(largest_smallest_integers([0])) //Output: [null, null]"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "let aFloat: number;\nlet bFloat: number;\nif (typeof a === 'string') {\n    aFloat = parseFloat(a.replace(',', '.'));\n} else {\n    aFloat = a;\n}\n\nif (typeof b === 'string') {\n    bFloat = parseFloat(b.replace(',', '.'));\n} else {\n    bFloat = b;\n}\n\nif (aFloat > bFloat) {\n    return typeof a === 'string' ? a : b;\n} else if (bFloat > aFloat) {\n    return typeof b === 'string' ? b : a;\n} else {\n    return null;\n}"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "if (n < 10) return false; // if n is less than 10, it can't be written as the sum of 4 positive even numbers\n    let arr = Array.from({length: n}, (_, i) => i + 1);\n    for (let a of arr) {\n        for (let b of arr) {\n            if (a + b > n) break;\n            for (let c of arr) {\n                let d = n - a - b - c;\n                if (d < c) break;\n                if (a % 2 === 0 && b % 2 === 0 && c % 2 === 0 && d % 2 === 0) return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "let result = 1;\nfor(let i=n;i>=1;i--){\n    let subResult = 1;\n    for(let j=i;j>=1;j--){\n        subResult *= j;\n    }\n    result *= subResult;\n}\nreturn result;\n\n};\nconsole.log(special_factorial(4));"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "function fix_spaces(text: string): string {\n    return text.replace(/ +/g, (spaces) => {\n        if (spaces.length === 1) {\n            return \"_\";\n        } else {\n            return \"-\";\n        }\n    });\n}"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "let countDigits = 0;\n    let countDots = 0;\n    const validExtensions = ['txt', 'exe', 'dll'];\n    \n    for(let i = 0; i < file_name.length; i++){\n        if('0' <= file_name[i] && file_name[i] <= '9'){\n            countDigits++;\n            if(countDigits > 3){\n                return 'No';\n            }\n        }\n        if(file_name[i] === '.'){\n            countDots++;\n        }\n    }\n    \n    if(countDigits === 0 || countDots !== 1){\n        return 'No';\n    }\n    \n    const dotIndex = file_name.indexOf('.');\n    const beforeDot = file_name.substring(0, dotIndex);\n    const afterDot = file_name.substring(dotIndex + 1);\n    \n    if(!isNaN(parseInt(beforeDot[0])) || !/^[A-Za-z]+$/.test(beforeDot[0])){\n        return 'No';\n    }\n    \n    for(let i = 0; i < validExtensions.length; i++){\n        if(validExtensions[i] === afterDot){\n            return 'Yes';\n        }\n    }\n    \n    return 'No';\n};"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0; i < lst.length; i++){\n        sum += Math.pow(lst[i],2);\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "function words_in_sentence(sentence: string): string {\n    const isPrime = (n: number) => {\n        if (n < 2) return false;\n        for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n            if (n % i === 0) return false;\n        return true;\n    }\n\n    return sentence.split(' ').filter(word => isPrime(word.length)).join(' ');\n}"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "function gcd(a: number, b: number): number {\n    if (!b) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nfunction simplifyFraction(fractionStr: string): {numerator: number, denominator: number} {\n    const [numerator, denominator] = fractionStr.split(\"/\").map(Number);\n    return { numerator, denominator };\n}"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "return nums.sort((a, b) => {\n    let aSum = a < 0 ? Infinity : a.toString().split('').reduce((acc, cur) => acc + Math.abs(Number(cur)), 0);\n    let bSum = b < 0 ? Infinity : b.toString().split('').reduce((acc, cur) => acc + Math.abs(Number(cur)), 0);\n    return aSum - bSum || nums.indexOf(a) - nums.indexOf(b);\n});\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "let count = 0;\n    for(let i=0;i<nums.length;i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 === 1 && Math.floor(nums[i]/10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n};"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "def get_max_triples(n):\n    arr = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "// Define the order of planets by their proximity to the Sun\n    const planetsOrder = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    ];\n  \n    // Find the index of planet1 and planet2 in the order of the planets\n    const planet1Index = planetsOrder.indexOf(planet1);\n    const planet2Index = planetsOrder.indexOf(planet2);\n  \n    if (planet1Index === -1 || planet2Index === -1) {\n      // If either planet1 or planet2 is not a valid planet, return an empty tuple\n      return [];\n    }\n  \n    // Return all the planets whose index in the order of the planets is between \n    // the indices of planet1 and planet2, sorted by their proximity to the Sun\n    return planetsOrder.slice(Math.min(planet1Index, planet2Index) + 1, Math.max(planet1Index, planet2Index));\n};"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "function list_sort(lst: string[]): string[] {\n    // filter out strings with odd lengths\n    const evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n    \n    // sort the remaining strings first by length and then alphabetically\n    return evenLengthStrings.sort((a, b) => {\n        if (a.length !== b.length) {\n            return a.length - b.length;\n        } else {\n            return a < b ? -1 : 1;\n        }\n    });\n}"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "let isPrime = true;\n  \n    if (n < 2) {\n      isPrime = false;\n    } else {\n      for (var i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n    }\n  \n    return isPrime ? x : y;\n};"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] % 2 == 1){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\nconsole.log(double_the_difference([1, 3, 2, 0])); //10\nconsole.log(double_the_difference([-1, -2, 0])); //0\nconsole.log(double_the_difference([9, -2])); //81\nconsole.log(double_the_difference([0])); //0  \nconsole.log(double_the_difference([])); //0"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "function compare(game: Array<number>, guess: Array<number>): Array<number> {\n    return game.map((score, i) => Math.abs(guess[i] - score));\n}"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "let strongest_extension = extensions[0];\n    let strength_of_strongest_extension = calculateStrength(extensions[0]);\n  \n    for (let i = 1; i < extensions.length; i++) {\n      let strength_of_current_extension = calculateStrength(extensions[i]);\n      \n      if (strength_of_current_extension > strength_of_strongest_extension) {\n        strongest_extension = extensions[i];\n        strength_of_strongest_extension = strength_of_current_extension;\n      }\n    }\n  \n    return `${class_name}.${strongest_extension}`;\n  };\n\n  const calculateStrength = function (extension: string) : number {\n    let uppercase_letters = extension.split('').filter(letter => letter === letter.toUpperCase()).length;\n    let lowercase_letters = extension.split('').filter(letter => letter === letter.toLowerCase()).length;\n  \n    return uppercase_letters - lowercase_letters;\n  };"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n    for(let i=0;i<b.length;i++) {\n        let rotatedB = b.slice(i) + b.slice(0,i); //rotate b\n        if (a.includes(rotatedB)) { \n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "let count_even=0;\nlet count_odd=0;\nlet num_tostring=Math.abs(num).toString();\nfor (let i=0 ;i< num_tostring.length;i++){\n    if(parseInt(num_tostring[i])%2==0){\n        count_even++;\n    }else{\n        count_odd++;\n    }\n}\nreturn [count_even,count_odd];\n};"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "function intToMiniRoman(num: number): string {\n    let val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ];\n    let syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ];\n    let roman_num = '';\n    for (let i = 0;  i < val.length; i++){\n        while(num >= val[i]){\n            roman_num += syb[i];\n            num -= val[i];\n        }\n    }\n    return roman_num;\n};"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "function right_angle_triangle(a: number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b); // sort the sides in ascending order\n\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "let maxUniqueCharacters = 0;\n    let maxWord = \"\";\n  \n    for (let word of words) {\n        const uniqueCharacters = new Set(word);\n        if (uniqueCharacters.size > maxUniqueCharacters) {\n            maxUniqueCharacters = uniqueCharacters.size;\n            maxWord = word;\n        } else if (uniqueCharacters.size === maxUniqueCharacters) {\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n  \n    return maxWord;\n};\n\nconsole.log(find_max([\"name\", \"of\", \"string\"])); // output: \"string\"\nconsole.log(find_max([\"name\", \"enam\", \"game\"])); // output: \"enam\"\nconsole.log(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])); // output: \"aaaaaaa\""}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "function eat(number: number, need: number, remaining: number): [number, number] {\n    const totalNeeded = number + need;\n    \n    if (remaining >= need) {\n        return [totalNeeded, remaining - need];\n    } else {\n        return [totalNeeded - remaining, 0];\n    }\n}"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "function do_algebra(operator: string[], operand: number[]): number {\n    let exp = '';\n    for (let i = 0; i < operand.length - 1; i++) {\n        exp += operand[i] + operator[i];\n    }\n    exp += operand[operand.length - 1]; // Add the last operand, which doesn't have a following operator in the list\n    \n    return eval(exp); // Evaluate and return the result\n}"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "let result = '';\n    let containsLetters = false;\n  \n    for(let i = 0; i < s.length; i++) {\n      if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n        containsLetters = true;\n        result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n      } else {\n        result += s[i];\n      }\n    }\n  \n    return containsLetters ? result : result.split('').reverse().join('');\n};"}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "npm install crypto-js"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "let result:Array<number> = [];\n    for(let i=Math.min(a,b); i<=Math.max(a,b); i++){\n        let digits = Array.from(i.toString()).map(Number).filter(j => j % 2 === 0);\n        result = [...result, ...digits];\n    }\n    return Array.from(new Set(result)).sort((a, b) => a - b);\n};\nconsole.log(generate_integers(2,8)); // [2,4,6,8]\nconsole.log(generate_integers(8,2)); // [2,4,6,8]\nconsole.log(generate_integers(10,14)); // []"}

{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "def has_close_elements(numbers, threshold):\n    sorted_numbers = sorted(numbers)\n    for i in range(1, len(sorted_numbers)):\n        if abs(sorted_numbers[i] - sorted_numbers[i-1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "def separate_paren_groups(s):\n    s = s.replace(' ', '') # Remove spaces\n    groups = []\n    start = 0\n    balance = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            balance += 1\n        elif s[i] == ')':\n            balance -= 1\n        # If we've come back to balance after processing a group, add it to the list.\n        if balance == 0 and i > start:\n            groups.append(s[start:i+1])\n            start = i + 1\n    return groups"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n    return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "let balance = 0;\n    \n    for (let i=0; i<operations.length; i++){\n        balance += operations[i];\n        \n        if (balance < 0){\n            return true;\n        }\n    }\n    \n    return false;\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers){\n    const mean = numbers.reduce((a,b) => a + b) / numbers.length;\n    return numbers.reduce((total, num) => total + Math.abs(num - mean), 0) / numbers.length;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "def intersperse(numbers, delimeter):\n    result = []\n    for i in numbers:\n        result += [i, delimeter]\n    return result[:-1]  # We trim the last inserted delimeter"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "def parse_nested_parens(s):\n    result = []\n    for group in s.split():\n        count, max_count = 0, 0\n        for ch in group:\n            if ch == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif ch == ')':\n                count -= 1\n        result.append(max_count)\n    return result"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "let result = strings.filter((str) => str.includes(substring));\n  return result;\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_numbers = sum(numbers)\n        product_numbers = 1\n        for num in numbers:\n            product_numbers *= num\n        return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "let result = [];\n    let maxNumber = numbers[0];\n    result.push(maxNumber);\n  \n    for (let i = 1; i < numbers.length; i++) {\n      if (numbers[i] > maxNumber) {\n        maxNumber = numbers[i];\n      }\n      result.push(maxNumber);\n    }\n  \n    return result;\n}"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(str) {\n    let i = str.length - 1;\n    while (i > 0 && str[i] !== str[i - 1]) i--;\n\n    const palindromeSuffix = str.slice(i);\n    const nonPalindromePrefix = str.slice(0, i);\n\n    return str + nonPalindromePrefix.split('').reverse().join('');\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "def string_xor(a, b):\n    # convert binary strings to integers\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # perform XOR operation on the integers\n    xor_result = a ^ b\n\n    # return as binary string\n    return format(xor_result, 'b')"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "if (strings.length === 0) {\n    return 'none';\n}\n\nlet longestString = strings[0];\nfor (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n        longestString = strings[i];\n    }\n}\nreturn longestString;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "while (b !== 0) {\n    let t = b;\n    b = a % b;\n    a = t;\n}\nreturn a;\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "let result = [];\nfor (let i = 1; i <= string.length; i++) {\n    result.push(string.slice(0,i));\n}\nreturn result;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "let result = '';\nfor (let i=0; i<=n; i++) {\n    result += i + ' ';\n}\nreturn result.trim(); // remove trailing space\n}\nstring_sequence = stringSequence;"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "let lowerCaseString = string.toLowerCase();\nlet distinctCharacters = new Set(lowerCaseString);\nreturn distinctCharacters.size;\n}\nconsole.log(countDistinctCharacters('xyzXYZ')); // 3\nconsole.log(countDistinctCharacters('Jerry')); // 4"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "def parse_music(musicstring):\n    beats = []\n    notes = musicstring.split()\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "let count = 0;\n    for (let i = 0; i <= string.length - substring.length; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(howManyTimes('', 'a'));  // Output: 0\nconsole.log(howManyTimes('aaa', 'a'));  // Output: 3\nconsole.log(howManyTimes('aaaa', 'aa'));  // Output: 2"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "def sort_numbers(numbers):\n    number_list = numbers.split()\n    number_list.sort()\n    return ' '.join(number_list)"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i+1])\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x-min_val)/range_val for x in numbers]"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "let result = values.filter(value => Number.isInteger(value));\n    return result;\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "def largestDivisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return None"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "def factorize(n):\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i:\n            continue\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n            factors.append(n)\n    return factors"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "let uniqueNumbers = [];\n    let duplicates = new Set();\n  \n    for (let i = 0; i < numbers.length; i++) {\n      if (!duplicates.has(numbers[i])) {\n        uniqueNumbers.push(numbers[i]);\n        duplicates.add(numbers[i]);\n      }\n    }\n  \n    return uniqueNumbers;\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toLowerCase()) {\n            result += string[i].toUpperCase();\n        } else {\n            result += string[i].toLowerCase();\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "return strings.join('');\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0)\n            result.push(l[i]);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "if (n <= 1) {\n    return false;\n}\nfor (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n}\nreturn true;\n}\n// Test cases:\nconsole.log(isPrime(6)); // false\nconsole.log(isPrime(101)); // true\nconsole.log(isPrime(11)); // true\nconsole.log(isPrime(13441)); // true\nconsole.log(isPrime(61)); // true\nconsole.log(isPrime(4)); // false\nconsole.log(isPrime(1)); // false"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "def sort_third(l):\n    third_elements = sorted([l[i] for i in range(len(l)) if (i+1)%3 == 0])\n    \n    result = []\n    for i, element in enumerate(l):\n        result.append(element)\n        if (i+1)%3 == 0:\n            result.append(third_elements.pop(0))\n            \n    return result"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "let s = new Set(l);\nreturn Array.from(s).sort((a,b)=> a-b);"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n    return Math.max(...l);\n}"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "let count = 0;\n  \nfor (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n        let numString = i.toString();\n        for (let j = 0; j < numString.length; j++) {\n            if (numString[j] == '7') {\n                count++;\n            }\n        }\n    }\n}\n  \nreturn count;\n  \n}"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n    let evenIndices = l.filter((_, i) => i % 2 === 0);\n    evenIndices.sort((a, b) => a - b);\n    \n    return l.map((v, i) => (i % 2 === 0) ? evenIndices.shift() : v);\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return true;\n}\n\nfunction primeFib(n) {\n    let current = 1, next = 1;\n    let count = 0;\n    while (count < n) {\n        let temp = current + next;\n        current = next;\n        next = temp;\n        if (isPrime(current)) {\n            count++;\n        }\n    }\n    return current;\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "if (l.length < 3) {\n    return false;\n}\n\nlet n = l.length;\nfor (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n        let sum = -l[i] - l[j];\n        if (l.includes(sum)) {\n            return true;\n        }\n    }\n}\n\nreturn false;\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n    return n*n;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "def incr_list(lst):\n    return [i + 1 for i in lst]"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "def pairs_sum_to_zero(lst):\n    # Creating a set from the list to eliminate duplicates\n    s = set(lst)\n\n    # Checking if 0 exists in the set, since 0 + 0 = 0\n    if 0 in s:\n        return True\n\n    # Iterating over each number in the set and checking if -num also exists in the set\n    for num in s:\n        if -num in s:\n            return True\n\n    # If no pair sums to zero, return False\n    return False"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "return x.toString(base);\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "0.5*a*h;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n  if (n === 0 || n === 1) return 0;\n  else if (n === 2) return 2;\n  else if (n === 3) return 0;\n  \n  let arr = [0, 0, 2, 0];\n  \n  for(let i = 4; i <= n; i++) {\n    arr[i % 4] = arr[(i - 1) % 4] + arr[(i - 2) % 4] + arr[(i - 3) % 4] + arr[(i - 4) % 4];\n  }\n  \n  return arr[n % 4];\n}"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "def median(lst):\n    n = len(lst)\n    s = sorted(lst)\n    return (sum(s[n//2-1:n//2+1])/2.0, s[n//2])[n % 2] if n else None"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "function isPalindrome(str) {\n    var re = /[\\W_]/g;                             //use of regex to remove unwanted characters\n    var lowRegStr = str.toLowerCase().replace(re, '');\n    var reverseStr = lowRegStr.split('').reverse().join(''); \n    return reverseStr === lowRegStr;\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n    var result = 1;\n    var base = 2;\n    \n    while (n > 0) {\n        if (n % 2 == 1) // If the current bit is 1\n            result = (result * base) % p;\n        \n        n = Math.floor(n / 2); // Right shift\n        base = (base * base) % p; // Square the base and take modulo p to avoid overflow\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(str) {\n    return str.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "return l.every((val)=> val < t);\n}"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "from collections import Counter\n\ndef same_chars(s0, s1):\n    return Counter(s0) == Counter(s1)"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "if (n <= 1) return n;\nelse return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "let stack = [];\n\nfor (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n        stack.push('<');\n    } else if (stack.length === 0) {\n        return false; // No opening bracket to match\n    } else {\n        stack.pop(); // Remove last opened bracket\n    }\n}\n\n// If there are any unmatched open brackets left, return false\nreturn stack.length === 0;\n\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "def monotonic(lst):\n    if len(lst) < 2:\n        return True\n    else:\n        diff = lst[1] - lst[0]\n        for index in range(len(lst) - 1):\n            if (lst[index + 1] - lst[index]) * diff < 0:\n                return False\n        return True"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "return n * (n + 1) / 2;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "def correct_bracketing(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1] != '(':\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n    // Create an empty array to store the new coefficients\n    let derivative_coefficients = [];\n    \n    // Loop through the original coefficients starting from index 1\n    // (since the first coefficient is constant, its derivative is always 0)\n    for (let i = 1; i < xs.length; i++) {\n        // For each coefficient, multiply it by its exponent (i)\n        // and add to the new coefficients array\n        derivative_coefficients.push(xs[i] * i);\n    }\n    \n    // Return the new coefficients array\n    return derivative_coefficients;\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "def fibfib(n):\n    if n < 0:\n        return \"Input should be non-negative integer.\"\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initial values\n    fibfib_nums = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_nums.append(fibfib_nums[-1] + fibfib_nums[-2] + fibfib_nums[-3])\n        \n    return fibfib_nums[n]"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n    }\n    \n    // check the last character if it is 'y'\n    if (s.charAt(s.length-1).toLowerCase() === 'y') {\n        count++;\n    }\n  \n    return count;\n}\n\nconsole.log(vowelsCount(\"abcde\")); // 2\nconsole.log(vowelsCount(\"ACEDY\")); // 3"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n  let str = String(x);\n  let len = str.length;\n  if (shift >= len) {\n    // If shift > number of digits, return digits reversed\n    return str.split('').reverse().join('');\n  } else {\n    let result = '';\n    for (let i = 0; i < len; i++) {\n      result += str[(i + shift) % len]; // circular shift\n    }\n    return result;\n  }\n}"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n    let [apples, oranges] = s.match(/\\d+/g).map(Number)\n    return n - apples - oranges\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "def pluck(arr):\n    # Initialize variables as \"None\" to handle empty list cases\n    smallest_val = None\n    smallest_index = None\n\n    # Iterate over the array\n    for index, value in enumerate(arr):\n        # Check if the current value is even and smaller than any previously found even value\n        if value % 2 == 0 and (smallest_val is None or value < smallest_val):\n            smallest_val = value\n            smallest_index = index\n\n    # If we found a smallest even value, return it with its index; else return empty list\n    return [smallest_val, smallest_index] if smallest_val is not None else []"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "def search(lst):\n    from collections import Counter\n    c = Counter(lst)\n    sorted_keys = sorted(c.keys(), reverse=True)\n    for k in sorted_keys:\n        if c[k] >= k:\n            return k\n    return -1"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst){\n    if (lst.length === 0) return [];\n    \n    lst = lst.sort((a, b) => a - b); // sort in ascending order\n    var result = [];\n    while(lst.length > 0){\n        result.push(lst.shift()); // get and remove the smallest element\n        if(lst.length > 0)\n            result.push(lst.pop()); // get and remove the largest element\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "if (isNaN(a) || isNaN(b) || isNaN(c)) return '-1';\nif (a <= 0 || b <= 0 || c <= 0) return '-1';\n\n// Check if the inputs form a valid triangle\nif (a + b > c && a + c > b && b + c > a) {\n    // Calculate semi-perimeter\n    let s = (a + b + c) / 2;\n    \n    // Apply Heron's formula\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    return Math.round(area * 100) / 100;\n} else {\n    return '-1';\n}\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "def will_it_fly(q, w):\n    # Check if list q is palindrome and its sum is less than or equal to w\n    return q == q[::-1] and sum(q) <= w\n\n# Test cases\nprint(will_it_fly([1, 2], 5))         # should return False\nprint(will_it_fly([3, 2, 3], 1))       # should return False\nprint(will_it_fly([3, 2, 3], 9))       # should return True\nprint(will_it_fly([3], 5))             # should return True"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n    let changes = 0;\n    let start = 0;\n    let end = arr.length - 1;\n\n    while (start <= end) {\n        if (arr[start] != arr[end]) {\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2): \n        return lst1\n    else: \n        return lst2\n\n# Test the function\nprint(totalMatch([], []))  # []\nprint(totalMatch(['hi', 'admin'], ['hI', 'Hi']))  # ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # ['hI', 'hi', 'hi']\nprint(totalMatch(['4'], ['1', '2', '3', '4', '5']))  # ['4']"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef isMultiplyPrime(a):\n    prime_numbers = [i for i in range(2, a+1) if is_prime(i)]\n    length = len(prime_numbers)\n    for i in range(0,length-2):\n        for j in range(i+1,length-1):\n            for k in range(j+1,length):\n                if prime_numbers[i]*prime_numbers[j]*prime_numbers[k] == a:\n                    return True \n    return False"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "while (true) {\n    if (n === x) return true;\n    if (n > x) return false;\n    if (x % n !== 0) return false;\n    x /= n;\n}\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "def iscube(a):\n    c = int(round(a ** (1. / 3)))\n    return c ** 3 == a"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "def hexKey(num):\n    count = 0\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    for i in num:\n        if i in prime_hex:\n            count += 1\n    return count"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    let binary = decimal.toString(2); // convert decimal to binary in string form\n    return 'db' + binary + 'db';  // add extra characters as required by the problem\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "if (s.length < 3) {\n    return false;\n}\n\nfor (let i = 0; i <= s.length - 3; i++) {\n    const set = new Set([s[i], s[i + 1], s[i + 2]]);\n    if (set.size !== 3) {\n        return false;\n    }\n}\n\nreturn true;\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "const gradeMap = new Map([\n    [4.0, \"A+\"],\n    [3.7, \"A\"],\n    [3.3, \"A-\"],\n    [3.0, \"B+\"],\n    [2.7, \"B\"],\n    [2.3, \"B-\"],\n    [2.0, \"C+\"],\n    [1.7, \"C\"],\n    [1.3, \"C-\"],\n    [1.0, \"D+\"],\n    [0.7, \"D\"],\n    [0.0, \"D-\"],\n]);\n\nlet result = [];\n\ngrades.forEach(grade => {\n    let gpaGrade = gradeMap.get(grade);\n    if (!gpaGrade) {\n        for (const [key, value] of gradeMap.entries()) {\n            if (grade < key) {\n                gpaGrade = value;\n                break;\n            }\n        }\n    }\n    result.push(gpaGrade);\n});\n\nreturn result;\n}"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function primeLength(str) {\n    const length = str.length;\n    \n    if (length < 2) return false;\n\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n        if (length % i === 0) return false;\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "def startsOneEnds(n):\n    if n==1:  # when number has one digit, only option is 1 itself\n        return 1\n    else:\n        return 10**(n-1) + 9*10**(n-2)   # numbers starting with 1 and ending with 1"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "def solve(N):\n    # Converting the given integer to binary\n    binary = bin(N)[2:]\n  \n    # Calculating and adding the digits of binary representation\n    sum_binary_digits = sum([int(digit) for digit in binary])\n  \n    return sum_binary_digits"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n    return s.split(' ')\n        .map((word) => \n            word.split('')\n                .sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n                .join(''))\n        .join(' ');\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "def get_row(lst, x):\n    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res)"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "def sort_array(arr):\n    if len(arr) == 0:\n        return arr\n    elif (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65 # ASCII value of 'a' and 'A'\n            encrypted_char_code = (ord(char) - ascii_offset + 4) % 26 + ascii_offset\n            result += chr(encrypted_char_code)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "let unique = [...new Set(lst)];\n    if (unique.length < 2) {\n        return \"None\";\n    } else {\n        unique.sort((a, b) => a - b);\n        return unique[1];\n    }\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function countBoredoms(s) {\n    // Split the input string into sentences using a regular expression\n    let sentences = s.split(/[.!?]/);\n    \n    // Initialize the counter to 0\n    let count = 0;\n    \n    // Loop through each sentence\n    for (let i = 0; i < sentences.length; i++) {\n        // Split the sentence into words\n        let words = sentences[i].split(' ');\n        \n        // If the first word is \"I\", increment the counter\n        if (words[0] === \"I\") {\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x === y + z || y === x + z || z === x + y;\n} else {\n    return false;\n}\n\n}\nconsole.log(anyInt(5, 2, 7)); // True\nconsole.log(anyInt(3, 2, 2)); // False\nconsole.log(anyInt(3, -2, 1)); // True\nconsole.log(anyInt(3.6, -2.2, 2)); // False"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            // If the character is uppercase, swap case and replace vowels\n            if ('AEIOU'.includes(char)) {\n                encoded += String.fromCharCode(char.charCodeAt(0) + 2);\n            } else {\n                encoded += char.toLowerCase();\n            }\n        } else {\n            // If the character is lowercase, swap case and replace vowels\n            if ('aeiou'.includes(char)) {\n                encoded += String.fromCharCode(char.charCodeAt(0) + 2);\n            } else {\n                encoded += char.toUpperCase();\n            }\n        }\n    }\n    return encoded;\n}"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "def largest_prime(lst):\n    def is_prime(n):\n        if n < 2: return False\n        if n == 2 or n == 3: return True\n        if n % 2 == 0 or n % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += w\n            w = 6 - w\n        return True\n    prime_lst = [x for x in lst if is_prime(x)]\n    largest_prime = max(prime_lst)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "if (Object.keys(dict).length === 0) {\n    return false;\n}\nlet lowerCase = true;\nlet upperCase = true;\n\nfor (let key in dict) {\n    if (typeof key !== \"string\") {\n        return false;\n    } else if (key !== key.toLowerCase()) {\n        lowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n        upperCase = false;\n    }\n}\nreturn lowerCase || upperCase;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(a, b) {\n    let lastDigitA = parseInt(Math.abs(a).toString().slice(-1));\n    let lastDigitB = parseInt(Math.abs(b).toString().slice(-1));\n    return lastDigitA * lastDigitB;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    \n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "let num = parseFloat(value);\n  \n    if (num >= 0) {\n        return Math.round(num);\n    } else {\n        return Math.floor(num); //for negative numbers, it rounds away from zero\n    }\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "let result = [];\n    for (let i=0; i<n; i++) {\n        if (n % 2 === 0) {\n            result.push(n + 2*i);\n        } else {\n            result.push(n + 2*i);\n        }\n    }\n    return result;\n}\nconsole.log(makeAPile(3));"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function wordsString(s) {\n    // split string by comma and space, then filter out any empty resulting words\n    return s.split(/, | /).filter(word => word);\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Start from the bigger number\n    for (let i = y; i >= x; i--) {\n        // Check if this number is even and not less than x\n        if (i % 2 === 0 && i >= x) {\n            return i;\n        }\n    }\n    // If there's no such number\n    return -1;\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "if (n > m) return -1;\n  \n  let avg = Math.round((n + m) / 2);\n  let binary = avg.toString(2).padStart(Math.ceil(Math.log2(avg + 1)), '0');\n\n  return `0b${binary}`;\n}\n\nconsole.log(roundedAvg(1, 5)); // \"0b11\"\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\""}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n    let noEvenDigitNums = [];\n\n    for (let num of x) {\n        let numToString = num.toString();\n        \n        // Check if there's an even digit in the number \n        let hasEvenDigit = [...numToString].some(digit => parseInt(digit, 10) % 2 === 0);\n        \n        if (!hasEvenDigit) {\n            noEvenDigitNums.push(num);\n        }\n    }\n    \n    // Sort the resulting array in ascending order before returning it\n    return noEvenDigitNums.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "def array_transform(arr):\n    num2words = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = []\n    for num in sorted(arr, reverse=True):\n        if 1 <= num <= 9:\n            result.append(num2words[num])\n    return result"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n){\n    let result = [];\n    \n    for (let i = 1; i <= n; i++){\n        if (i % 2 === 0){\n            // calculate factorial for even numbers\n            let fact = 1;\n            for (let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            result.push(fact);\n        } else {\n            // calculate sum for odd numbers\n            let sum = 0;\n            for (let j = 1; j <= i; j++){\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    evens = sum(i%2==0 for i in range(1, n+1))\n    odds = n - evens\n    return (evens,odds)"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let strNum = String(Math.abs(arr[i])); // to handle negative numbers, convert it into positive first.\n    \n    for (let j = 0; j < strNum.length; j++) {\n      sum += parseInt(strNum[j]);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n// Test examples:\nconsole.log(countNums([])); // expects 0\nconsole.log(countNums([-1, 11, -11])); // expects 1\nconsole.log(countNums([1, 1, 2])); // expects 3"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "if (arr.length === 0) return true;\n  \nlet max = arr[0];\nfor (let i = 1; i < arr.length; i++) {\n    if (arr[i] < max) return false;\n    else max = arr[i];\n}\nreturn true;"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "def exchange(lst1, lst2):\n    # Use list comprehension to find all odd numbers in lst1 and even numbers in lst2\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    # If the length of odd list in lst1 is greater than or equal to even list in lst2, return \"YES\"\n    if len(odd_lst1) >= len(even_lst2):\n        return 'YES'\n    else:\n        return 'NO'"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(s) {\n    let words = s.split(\" \"),\n        counts = {};\n        \n    // Count the occurrence of each word\n    for (let i = 0; i < words.length; i++) {\n        if (words[i] in counts) {\n            counts[words[i]] += 1;\n        } else {\n            counts[words[i]] = 1;\n        }\n    }\n\n    // Find the maximum count\n    let maxCount = Math.max(...Object.values(counts));\n\n    // Keep only the words with maximum occurrence\n    for (let word in counts) {\n        if (counts[word] < maxCount) {\n            delete counts[word];\n        }\n    }\n    return counts;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "def reverse_delete(s, c):\n    # Delete all characters in s that are present in c\n    res = [i for i in s if i not in c]\n    result_str = \"\".join(res)\n    \n    # Checking if the modified string is a palindrome or not\n    is_palindrome = result_str == result_str[::-1]\n    \n    return (result_str, is_palindrome)"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(str(i).count('1')+str(i).count('3')+str(i).count('5')+str(i).count('7')+str(i).count('9'), i, str(i).count('1')+str(i).count('3')+str(i).count('5')+str(i).count('7')+str(i).count('9'), i) for i in lst]"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArraySum = function (nums) {\n  let n = nums.length;\n  if (!n) return 0;\n  \n  // Initialize with a huge number.\n  let dp = Array(n + 1).fill(Infinity);\n  dp[0] = 0;\n  \n  for (let i = 1; i <= n; ++i) {\n    dp[i] = nums[i - 1] + Math.min(dp[i - 1], dp[i]);\n  }\n  \n  // The minimum subarray sum is the minimum of all dp[i].\n  return Math.min(...dp);\n};"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "def maxFill(grid, capacity):\n    # Flatten grid for easier processing\n    flat_grid = [cell for row in grid for cell in row]\n    \n    # Calculate total units of water and subtract how many we can take with the bucket at once\n    total_units_of_water = len(flat_grid) - sum(flat_grid)\n    return (total_units_of_water + capacity - 1) // capacity"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "def count_consonants(word):\n    return len([char for char in word if char.lower() not in 'aeiou'])\n\ndef select_words(s, n):\n    if s == \"\":\n        return []\n    else:\n        words = s.split(\" \")\n        selected_words = [word for word in words if count_consonants(word) == n]\n        return selected_words"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for (let i = word.length - 2; i >= 1; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}"}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "def match_parens(lst):\n    left_count1, right_count1 = 0, 0\n    for char in lst[0]:\n        if char == '(':\n            left_count1 += 1\n        else:\n            right_count1 += 1\n    \n    left_count2, right_count2 = 0, 0\n    for char in lst[1]:\n        if char == '(':\n            left_count2 += 1\n        else:\n            right_count2 += 1\n    \n    # case 1: concatenate string 2 after string 1\n    if left_count1 >= right_count1 and left_count1 >= right_count2:\n        return 'Yes'\n    # case 2: concatenate string 1 after string 2\n    elif left_count2 >= right_count1 and left_count2 >= right_count2:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "import heapq\n\ndef maximum(arr, k):\n    return heapq.nlargest(k, arr)"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "def solution(lst):\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1])"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "def add_elements(arr, k):\n    # Extract the first k elements in arr and only include those with at most two digits\n    valid_numbers = [num for num in arr[:k] if 0 <= num <= 99]\n  \n    return sum(valid_numbers)"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 != 0: # If number is odd\n            collatz_sequence.append(int((3 * n) + 1) // 2)\n        n = n // 2\n    collatz_sequence.append(1)\n    return sorted([num for num in collatz_sequence if num % 2 != 0])"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n    // Splitting the date string into month, day and year.\n    let [month, day, year] = date.split('-');\n    \n    // Checking if the date string follows the format mm-dd-yyyy.\n    if(!month || !day || !year || date != `${month}-${day}-${year}`) return false;\n\n    // Checking if month is between 1 and 12.\n    if(month < 1 || month > 12) return false;\n    \n    // Checking if day is between 1 and the maximum number of days in the current month.\n    let maxDays = [0,31,29,31,30,31,30,31,31,30,31,30,31][month];\n    if(day < 1 || day > maxDays) return false;\n    \n    // If all conditions are satisfied, the date is valid.\n    return true;\n}"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "import re\n\ndef split_words(txt):\n    if ' ' in txt:\n        return re.split(' ', txt)\n    elif ',' in txt:\n        return re.split(',', txt)\n    else:\n        lower_case = [c for c in txt if c.islower()]\n        odd_order_letters = [c for c in lower_case if (ord(c) - ord('a')) % 2 == 1]\n        return len(odd_order_letters)"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "def is_sorted(lst):\n    n = len(lst)\n  \n    # To check duplicate exist or not\n    if n != len(set(lst)):\n        return False\n      \n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "def intersection(interval1, interval2):\n    # Find the overlapping interval\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If there is no overlap, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Compute the length of the intersection\n    length = end - start + 1\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return \"NO\"\n            \n    return \"YES\""}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "if (arr.length === 0) {\n        return \"none\";\n    }\n    \n    let sign = 1;\n    let sumMagnitudes = 0;\n  \n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] < 0) {\n        sign *= -1;\n        sumMagnitudes += Math.abs(arr[i]);\n      } else if (arr[i] > 0) {\n        sumMagnitudes += arr[i];\n      } else {\n        // do nothing when it's zero\n      }\n    }\n  \n    return sign * sumMagnitudes;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "from heapq import heappop, heappush\nimport sys\ndirections = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\ndef heuristic(a, b, n):\n    return abs(n - a) + abs(n - b)\n\ndef a_star(grid, k):\n    N = len(grid)\n    visited = set()\n    queue = [(sum(grid[0:1]), 0, 0, [grid[0][0]])]\n    \n    while queue:\n        sum_, x, y, path = heappop(queue)\n        if len(path) == k:\n            return path[:k]\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                heappush(queue, (sum_ - grid[y][x] + grid[ny][nx], nx, ny, path[1:] + [grid[ny][nx]]))\n\n    return []\n\ndef solve(grid, k):\n    if not grid or len(grid) == 0:\n        return []\n    \n    N = len(grid)\n    res = sys.maxsize\n    for i in range(N):\n        for j in range(N):\n            path = a_star(grid, k)\n            if sum(path) < res:\n                res = sum(path)\n                \n    return [res]\n\n# Test example\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 3\nprint(solve(grid, k)) # Output: [1, 2, 1]"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "def tri(n):\n    if n == 0:\n        return [3] # Tri(1) = 3\n    elif n == 1:\n        return [1, 3] # First two numbers are 1 and 3 for even case\n    else:\n        result = [1, 3, 2] # First three numbers are 1, 3 and 2\n        for i in range(3, n + 1):\n            if i % 2 == 0: # Even cases\n                result.append(1 + i // 2)\n            else: # Odd cases\n                result.append(result[i - 2] + result[i - 1] + result[i])\n        return result"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n  let str = n.toString();\n  let product = 1;\n  let hasOddDigit = false;\n  \n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) % 2 !== 0) {\n      product *= parseInt(str[i]);\n      hasOddDigit = true;\n    }\n  }\n  \n  return hasOddDigit ? product : 0;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "let bracketStack = [];\nfor (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n        bracketStack.push(string[i]);\n    } else if (string[i] === ']' && bracketStack.length > 0) {\n        bracketStack.pop();\n    }\n}\nreturn bracketStack.length !== 0;\n}\n// Test cases\nconsole.log(isNested('[[]]')); // true\nconsole.log(isNested('[]]]]]]][[[[[]')); // false\nconsole.log(isNested('[][]')); // false\nconsole.log(isNested('[]')); // false\nconsole.log(isNested('[[][]]')); // true\nconsole.log(isNested('[[]][[')); // true"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    let ceilVal = Math.ceil(lst[i]);\n    sum += ceilVal * ceilVal;\n  }\n  \n  return sum;\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "// Check if the string is empty or ends with a whitespace\nif (txt === \"\" || txt.charAt(txt.length - 1) === \" \") {\n    return false;\n}\n\n// Check if the last character is alphabetical\nconst lastChar = txt.charAt(txt.length - 1);\nreturn lastChar.toLowerCase() != lastChar.toUpperCase();\n\n}"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "let index = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i-1]) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n\nconsole.log(canArrange([1,2,4,3,5])); // 3\nconsole.log(canArrange([1,2,3])); // -1\nconsole.log(canArrange([5,4,3,2,1])); // 1"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "def largest_smallest_integers(lst):\n    neg = []  # List to hold negative values\n    pos = []  # List to hold positive values\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        elif i > 0:\n            pos.append(i)\n    \n    # If no negative or positive numbers, return None\n    a = max(neg) if neg else None\n    b = min(pos) if pos else None\n\n    return (a, b)"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "let aClean = isNaN(a)? a.replace(\",\", \".\") : a;\nlet bClean = isNaN(b)? b.replace(\",\", \".\") : b;\n\nif (parseFloat(aClean) > parseFloat(bClean)) {\n  return a;\n} else if (parseFloat(bClean) > parseFloat(aClean)) {\n  return b;\n} else {\n  return \"none\";\n}\n\n}\n\nconsole.log(compareOne(1, 2.5)); // 2.5\nconsole.log(compareOne(1, \"2,3\")); // \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \"6\"\nconsole.log(compareOne(\"1\", 1)); // \"none\""}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "def isEqualToSumEven(n):\n    if n <= 0 or n % 2 != 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n  let result = text.replace(/\\s{2,}/g, '-').replace(/ /g, '_');\n  return result;\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "let conditions = [\n    /^[^0-9]*$/, // No more than three digits in the file's name\n    /^\\w+(\\.\\w+)?$/, // The file's name contains exactly one dot '.'\n    /^[a-zA-Z]/, // The substring before the dot should not be empty and starts with a letter from the latin alphapet \n    /\\.(txt|exe|dll)$/i // The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n];\n\nlet result = 'No';\nfor(let i=0; i<conditions.length; i++) {\n    if(!conditions[i].test(filename)) {\n        return result;\n    }\n    result = 'Yes';\n}\nreturn result;\n}"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "def sumSquares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:   #square\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0: #cube\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "def wordsInSentence(sentence):\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "def simplify(x, n):\n    # Convert string fractions to float values\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the multiplication of fractions\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n    \n    # Convert back to fraction and check if it's a whole number\n    result = new_num / new_den\n    return result.is_integer()"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function sumDigits(num) {\n    let strNum = Math.abs(num).toString();\n    let sum = 0;\n    for (let i = 0; i < strNum.length; i++) {\n        sum += parseInt(strNum[i]);\n    }\n    return sum;\n}\n\nfunction orderByPoints(nums) {\n    // Add an index to each number and calculate the sum of digits\n    let indexedNums = nums.map((num, index) => ({ num, index, sum: sumDigits(num)}));\n  \n    // Sort by sum of digits, then by index\n    indexedNums.sort((a, b) => {\n        if (a.sum === b.sum) {\n            return a.index - b.index;\n        } \n        return a.sum - b.sum;\n    });\n  \n    // Just return the sorted numbers without the index\n    return indexedNums.map(({num}) => num);\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n    let count = 0;\n    for (let i=0; i<nums.length; i++) {\n        if (nums[i] > 10 && isOdd(nums[i])){\n            count++;\n        }\n    }\n    return count;\n}\n\nfunction isOdd(n) {\n    let strN = Math.abs(n).toString();\n    return (strN[0] % 2 === 1 && strN[strN.length - 1] % 2 === 1);\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "def getMaxTriples(n):\n    mod = 3\n    arr = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if (arr[i] + arr[j] + arr[k]) % mod == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "// The list of planets in our solar system, sorted by their distance from the sun\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n// Checks if a planet name is valid\nfunction isValidPlanet(planet) {\n    return planets.includes(planet);\n}\n\n// Returns the index of a planet in the planets array, or -1 if not found\nfunction getPlanetIndex(planet) {\n    return planets.indexOf(planet);\n}\n\nif (!isValidPlanet(planet1) || !isValidPlanet(planet2)) {\n    // If either planet name is invalid, return an empty tuple\n    return ();\n}\n\n// Get the indices of the two planets\nconst planetIndex1 = getPlanetIndex(planet1);\nconst planetIndex2 = getPlanetIndex(planet2);\n\nlet start;\nlet end;\nif (planetIndex1 < planetIndex2) {\n    // If planet1 is closer to the sun, return all planets between it and planet2\n    start = planetIndex1 + 1;\n    end = planetIndex2;\n} else {\n    // If planet2 is closer to the sun, return all planets between it and planet1\n    start = planetIndex2 + 1;\n    end = planetIndex1;\n}\n\n// Return a tuple of the desired planets\nreturn planets.slice(start, end + 1);\n}"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function sortedListSum(lst) {\n    // Filter out strings with odd lengths\n    let evenLengthStrings = lst.filter(str => str.length % 2 === 0);\n\n    // Sort by length of each word first, then sort by alphabetical order\n    evenLengthStrings.sort((a, b) => a.length - b.length || a.localeCompare(b));\n\n    return evenLengthStrings;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "if (isPrime(n)) {\n    return x;\n} else {\n    return y;\n}\n\nfunction isPrime(num) {\n    if (num < 2) {\n        return false;\n    }\n    for (var i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "if(!Array.isArray(lst) || lst.length === 0){\n  // if the input is not an array or an empty array, return 0;\n  return 0;\n}else{\n  let sumOfSquares = 0;\n  \n  for(let i=0;i<lst.length;i++){\n    // check if it's a number and odd\n    if(typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0){\n      sumOfSquares += Math.pow(lst[i], 2);\n    }\n  }\n  \n  return sumOfSquares;\n}\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "def strongestExtension(classname, extensions):\n    strengths = [(ext, len([c for c in ext if c.isupper()]) - len([c for c in ext if c.islower()])) for ext in extensions]\n    strongest_extension = max(strengths, key=lambda x:x[1])[0]\n    return f\"{classname}.{strongest_extension}\""}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "def cycpattern_check(a, b):\n    return b in a or b[::-1] in a\n\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "def even_odd_count(n):\n    n = abs(n) # we take the absolute value to consider only the digits\n    count_even = 0\n    count_odd = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "let numerals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let romanNumerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    let result = '';\n    \n    for(let i = 0; i < numerals.length; i++) {\n        while (number >= numerals[i]) {\n            number -= numerals[i];\n            result += romanNumerals[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "import math\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return math.isqrt(sides[0]**2 + sides[1]**2) == sides[2]"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "let maxUniqueCount = 0;\n    let maxWord = \"\";\n  \n    for (const word of words) {\n        const uniqueCount = new Set([...word]).size;\n        if (uniqueCount > maxUniqueCount) {\n            maxUniqueCount = uniqueCount;\n            maxWord = word;\n        } else if (uniqueCount === maxUniqueCount) {\n            maxWord = maxWord < word ? maxWord : word;\n        }\n    }\n  \n    return maxWord;\n  }"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "def eat(number, need, remaining):\n    # Check if there are enough carrots to cover the need.\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        # If not, eat all the remaining carrots and still be hungry.\n        return [number + remaining, 0]"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "def doAlgebra(operator, operand):\n    # Initialize result with the first operand\n    result = operand[0]\n\n    # Iterate through the rest of the operands\n    for i in range(1, len(operand)):\n        # Get the current operator and the next operand\n        op = operator[i-1]\n        num = operand[i]\n\n        # Perform the operation and update result\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n\n    # Return the final result\n    return result"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "const crypto = require('crypto');\nfunction stringToMd5(text) {\n    if(text === '') return \"none\";\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b){\n    let start = Math.min(a,b);\n    let end = Math.max(a,b);\n    let result = [];\n    \n    for(let i=start;i<=end;i++){\n        let digits = i.toString().split('').filter(x => parseInt(x) % 2 === 0).sort((a, b) => a - b);\n        if(digits.length > 0){\n            result.push(parseInt(digits.join('')));\n        }\n    }\n    \n    return result;\n}"}

{"task_id": "java/0", "language": "java", "completion": "public static Boolean belowZero(List<Integer> operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\npublic class SumProduct {\n    public static List<Object> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers){\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> nums = new ArrayList<>(Arrays.asList(1, 2, 3, 4));\n        System.out.println(sumProduct(nums));\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "public class StringXor {\n    public static void main(String[] args) {\n        System.out.println(stringXor(\"010\", \"110\")); // Outputs 100\n    }\n\n    public static String stringXor(String a, String b) {\n        StringBuilder xor = new StringBuilder();\n\n        for (int i = 0; i < a.length(); ++i) {\n            if (a.charAt(i) == '1') {\n                if (b.charAt(i) == '1') {\n                    xor.append('0'); // If both are 1, XOR is 0\n                } else {\n                    xor.append('1'); // If first is 1 and second is 0, XOR is 1\n                }\n            } else {\n                if (b.charAt(i) == '1') {\n                    xor.append('1'); // If first is 0 and second is 1, XOR is 1\n                } else {\n                    xor.append('0'); // If both are 0, XOR is 0\n                }\n            }\n        }\n\n        return xor.toString();\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "public class Longest {\n\n    public static String longest(List<String> listOfStrings) {\n        if (listOfStrings.isEmpty()) {\n            return null;\n        }\n\n        String longest = listOfStrings.get(0);\n\n        for (String str : listOfStrings) {\n            if (str.length() > longest.length()) {\n                longest = str;\n            }\n        }\n\n        return longest;\n    }\n    \n    public static void main(String[] args){\n        List<String> stringsList = new ArrayList<String>();\n        stringsList.add(\"a\");\n        stringsList.add(\"bb\");\n        stringsList.add(\"ccc\");\n        \n        System.out.println(longest(stringsList)); // Outputs: ccc\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "while (b != 0) {\n            int temp = b;\n            b = a % b; // % is remainder operator\n            a = temp;\n        }\n        return a; // this will be the greatest common divisor\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\npublic class SortNumbers {\n    public static String sort_numbers(String numbers) {\n        // Mapping number words to their corresponding integer values\n        HashMap<String, Integer> numMap = new HashMap<>();\n        numMap.put(\"zero\", 0);\n        numMap.put(\"one\", 1);\n        numMap.put(\"two\", 2);\n        numMap.put(\"three\", 3);\n        numMap.put(\"four\", 4);\n        numMap.put(\"five\", 5);\n        numMap.put(\"six\", 6);\n        numMap.put(\"seven\", 7);\n        numMap.put(\"eight\", 8);\n        numMap.put(\"nine\", 9);\n\n        String[] numArr = numbers.split(\" \");\n        ArrayList<Integer> numIndexes = new ArrayList<>();\n        \n        // Storing the index of each number in an arraylist\n        for(String num : numArr){\n            numIndexes.add(numMap.get(num));\n        }\n        \n        // Sorting the indexes based on the corresponding elements in input string\n        Collections.sort(numIndexes, new Comparator<Integer>(){\n            public int compare(Integer idx1, Integer idx2){\n                return numbers.substring(idx1, idx1+5).compareTo(numbers.substring(idx2, idx2+5));  // Compare string segments corresponding to each index\n            }\n        });\n        \n        StringBuilder sorted_string = new StringBuilder();\n        for(int i=0;i<numIndexes.size();++i){\n            // Add a space if it's not the first number\n            if(i != 0)\n                sorted_string.append(\" \");\n            \n            // Append the sorted number word to the string builder\n            sorted_string.append(numbers.substring(numIndexes.get(i), numIndexes.get(i)+5));\n        }\n        \n        return sorted_string.toString();\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.*;\n\npublic class RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        // Find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Compute the scaling factor and the addition factor\n        double scale = (max - min == 0) ? 1 : (1 - min) / (max - min); \n        double add = -min;\n\n        // Transform all the numbers in the list\n        for(int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale + add);\n        }\n        \n        return numbers;\n    }\n    \n    public static void main(String[] args){\n\tList<Double> nums = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n\tSystem.out.println(rescaleToUnit(nums)); // [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "public class FlipCase {\n   public static void main(String[] args) {\n      System.out.println(flipCase(\"Hello\"));  // Outputs \"hELLO\"\n   }\n   \n   public static String flipCase(String string) {\n      StringBuilder sb = new StringBuilder();\n      \n      for (char c : string.toCharArray()) {\n         if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n         } else if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n         } else {\n            sb.append(c);\n         }\n      }\n      \n      return sb.toString();\n   }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.*;\n\nclass GetPositive {\n    \n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        \n        for (int i : l) {\n            if (i > 0) {\n                positiveNumbers.add(i);\n            }\n        }\n        \n        return positiveNumbers;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(getPositive(list)); // prints [2, 5, 6]\n        \n        list = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(getPositive(list)); // prints [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "public static boolean isPrime(int n) {\n    // Check if n is a multiple of 2 (i.e., n is even)\n    if (n == 2 || n % 2 != 0) {\n        for (int i = 3; i * i <= n; i += 2) {\n            // Check if n is divisible by any number up to sqrt(n)\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    public static List<Integer> unique(List<Integer> l) {\n        // Create a HashSet which will contain only unique elements\n        Set<Integer> set = new HashSet<>(l);\n\n        // Convert the set back to ArrayList and return it\n        List<Integer> result = new ArrayList<>(set);\n\n        // Sorting the list in ascending order \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "def primeFib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def Fibonacci():\n        a = 0\n        b = 1\n        while True:\n            yield a\n            a, b = b, a+b\n\n    fib_generator = Fibonacci()\n    count = 0\n    fib_number = next(fib_generator)\n    while True:\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n        fib_number = next(fib_generator)\n\n# test cases to validate the solution\nassert primeFib(1) == 2\nassert primeFib(2) == 3\nassert primeFib(3) == 5\nassert primeFib(4) == 13\nassert primeFib(5) == 89"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.*;\n\npublic class TriplesSumToZero {\n    public static boolean triplesSumToZero(List<Integer> nums) {\n        int n = nums.size();\n        if (n < 3)\n            return false;\n\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                set.add(-nums.get(i) - nums.get(j));\n            }\n        }\n        \n        for (Integer num : nums) {\n            if (set.contains(num)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 3, 5, 0);\n        System.out.println(triplesSumToZero(list1)); // False\n        \n        List<Integer> list2 = Arrays.asList(1, 3, -2, 1);\n        System.out.println(triplesSumToZero(list2)); // True\n        \n        List<Integer> list3 = Arrays.asList(1, 2, 3, 7);\n        System.out.println(triplesSumToZero(list3)); // False\n        \n        List<Integer> list4 = Arrays.asList(2, 4, -5, 3, 9, 7);\n        System.out.println(triplesSumToZero(list4)); // True\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\npublic class PairsSumToZero {\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "public class Fib4 {\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // prints 4\n        System.out.println(fib4(6)); // prints 8\n        System.out.println(fib4(7)); // prints 14\n    }\n\n    public static int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be >= 0\");\n        }\n\n        if (n <= 1) {\n            return 0;\n        }\n\n        if (n == 2) {\n            return 2;\n        }\n\n        if (n == 3) {\n            return 0;\n        }\n\n        int[] fib = new int[n + 1];\n        fib[2] = 2;\n        fib[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n\n        return fib[n];\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\nimport java.lang.Math;\n\npublic class Median {\n    public static Double median(List<Integer> l) {\n        Collections.sort(l);\n        double median;\n        int n = l.size();\n        \n        if (n % 2 != 0)\n            median = (double) l.get(n/2);\n        else\n            median = (double) (l.get((n-1)/2) + l.get(n/2)) / 2.0;\n        \n        return median;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(\"Median of list1: \" + median(list1)); // prints 3\n        \n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(\"Median of list2: \" + median(list2)); // prints 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "public class IsPalindrome {\n    public static boolean isPalindrome(String str) {\n        int i = 0;\n        int j = str.length() -1;\n        \n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j))\n                return false;\n            \n            i++;\n            j--;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\"));      // True\n        System.out.println(isPalindrome(\"aba\"));   // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\"));  // False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "public class RemoveVowels {\n    public static void main(String[] args){\n        System.out.println(removeVowels(\"abcdef\\nghijklm\"));  //Output should be \"bcdf\\nghjklm\"\n        System.out.println(removeVowels('aaaaa'));  //Output should be \"\"\n    }\n    \n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true; \n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "public static int add(int x, int y) {\n    return x + y;\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.util.*;\n\npublic class SameChars {\n    public static Boolean sameChars(String s0, String s1) {\n        // Create two hashmaps for counting characters\n        HashMap<Character, Integer> map0 = new HashMap<>();\n        HashMap<Character, Integer> map1 = new HashMap<>();\n        \n        // Count frequency of each character in the first string\n        for (char c : s0.toCharArray()) {\n            map0.put(c, map0.getOrDefault(c, 0) + 1);\n        }\n        \n        // Count frequency of each character in the second string\n        for (char c : s1.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n        \n        // Compare the two maps\n        return map0.equals(map1);\n    }\n    \n    public static void main(String[] args){\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"1st Fibonacci number: \" + fib(1));\n        System.out.println(\"8th Fibonacci number: \" + fib(8));\n        System.out.println(\"10th Fibonacci number: \" + fib(10));\n    }\n    \n    public static int fib(int n) {\n        if (n <= 1) return n;\n        else return fib(n-1) + fib(n-2);\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\n\nclass Common {\n    // Helper method to convert list of objects to list of integers\n    private static List<Integer> objectToListInteger(List<Object> objList){\n        List<Integer> intList = new ArrayList<>();\n        for(Object num: objList){\n            if(num instanceof Integer)\n                intList.add((Integer) num);\n        }\n        return intList;\n    }\n    \n    public static List<Integer> common(List<Integer> l1, List<Object> l2){\n        // Convert list of objects to list of integers \n        List<Integer> convertedL2 = objectToListInteger(l2);\n        \n        // Create a set out of the first list to eliminate duplicates\n        Set<Integer> setL1 = new HashSet<>(l1);\n\n        // Create a set out of the second list to eliminate duplicates\n        Set<Integer> setL2 = new HashSet<>(convertedL2);\n\n        // Store the common elements in a set\n        setL1.retainAll(setL2);\n\n        // Return as a sorted list\n        List<Integer> resultList = new ArrayList<>(setL1);\n        Collections.sort(resultList);\n        \n        return resultList;\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "public class LargestPrimeFactor {\n\n    public static int largestPrimeFactor(int n) {\n        int max = -1;\n\n        while (n % 2 == 0) {\n            max = 2;\n            n /= 2;\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                max = i;\n                n = n / i;\n            }\n        }\n\n        if (n > 2) {\n            max = n;\n        }\n\n        return max;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195)); // prints 29\n        System.out.println(largestPrimeFactor(2048)); // prints 2\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\npublic class Derivative {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derived = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derived.add(xs.get(i) * i);\n        }\n        return derived;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(derivative(list1)); // prints [1, 4, 12, 20]\n        \n        List<Integer> list2 = Arrays.asList(1, 2, 3);\n        System.out.println(derivative(list2)); // prints [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "public class Fibfib {\n    public static int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        int[] fibfibNumbers = new int[n+1];\n        fibfibNumbers[0] = 0;\n        fibfibNumbers[1] = 0;\n        fibfibNumbers[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfibNumbers[i] = fibfibNumbers[i-1] + fibfibNumbers[i-2] + fibfibNumbers[i-3];\n        }\n\n        return fibfibNumbers[n];\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(fibfib(1));  // 0\n        System.out.println(fibfib(5));  // 4\n        System.out.println(fibfib(8));  // 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n        int count = 0;\n        String lowerCase = s.toLowerCase();\n\n        for (int i = 0; i < lowerCase.length(); i++) {\n            char c = lowerCase.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n\n        return count;\n    }"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\npublic class Search {\n    public static int search(List<Integer> lst) {\n        // Create a HashMap to store the frequency of each integer in the list\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            if (!freq.containsKey(num)) {\n                freq.put(num, 1);\n            } else {\n                freq.put(num, freq.get(num) + 1);\n            }\n        }\n\n        // Iterate over the keys (integers) in descending order\n        List<Integer> keys = new ArrayList<>(freq.keySet());\n        Collections.sort(keys, Collections.reverseOrder());\n        for (int num : keys) {\n            if (num > 0 && freq.get(num) >= num) {\n                return num;\n            }\n        }\n\n        // If no such a value exist, return -1\n        return -1;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.lang.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(triangleArea(1, 2, 10)); // Output: -1\n    }\n    \n    public static Number triangleArea(int a, int b, int c) {\n        // Check if inputs form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round to 2 decimal places and return\n        return new BigDecimal(area).setScale(2, RoundingMode.HALF_UP);\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.*;\npublic class WillItFly {\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Checks if list is palindromic\n        int start = 0;\n        int end = q.size() - 1;\n        while (start < end) {\n            if (!q.get(start).equals(q.get(end))) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        // Calculates the sum of list elements\n        int sum = 0;\n        for (Integer num : q) {\n            sum += num;\n        }\n        \n        // Checks if sum is less than or equal to max possible weight\n        return sum <= w;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2);\n        System.out.println(willItFly(list1, 5)); // Output: False\n        \n        List<Integer> list2 = Arrays.asList(3, 2, 3);\n        System.out.println(willItFly(list2, 1)); // Output: False\n\n        List<Integer> list3 = Arrays.asList(3, 2, 3);\n        System.out.println(willItFly(list3, 9)); // Output: True\n\n        List<Integer> list4 = Arrays.asList(3);\n        System.out.println(willItFly(list4, 5)); // Output: True\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.*;\npublic class IsMultiplyPrime {\n    public static boolean isMultiplyPrime(int num) {\n        if (num <= 1 || num % 2 == 0 && num != 2) { // If number is less than or equal to 1 OR even number except 2, then return false.\n            return false;\n        }\n\n        int cnt = 0;\n        for (int i = 3; i * i <= num; i += 2) { // Check divisibility by all odd numbers from 3 to sqrt(num).\n            if (num % i == 0) {\n                while (num % i == 0) {\n                    num /= i;\n                }\n                cnt++;\n                if (cnt > 2) { // If more than 3 primes are found, return false.\n                    return false;\n                }\n            }\n        }\n\n        if(num > 1) { // If number is still greater than 1, then it's a prime number.\n            cnt++;\n        }\n        \n        return cnt == 3; // Return true only if there are exactly 3 primes.\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "public class DecimalToBinary {\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));  // db1111db\n        System.out.println(decimalToBinary(32));  // db100000db\n    }\n    \n    public static String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "public static Boolean isHappy(String s) {\n    int length = s.length();\n    if (length < 3) {\n        return false;   // A string with less than 3 characters cannot be happy\n    } else {\n        for (int i = 0; i < length - 2; i++) {   // Iterating through the string\n            char firstChar = s.charAt(i);\n            char secondChar = s.charAt(i + 1);\n            char thirdChar = s.charAt(i + 2);\n            if (firstChar == secondChar || firstChar == thirdChar || secondChar == thirdChar) {\n                return false;   // If any three consecutive characters are same, the string is not happy\n            }\n        }\n    }\n    return true;   // If no such occurrence found, the string is happy\n}"}
{"task_id": "java/34", "language": "java", "completion": "public class NumericalLetterGrade {\n\n    private static String gradeEquation(double grade){\n        if (grade == 4.0){\n            return \"A+\";\n        }else if (grade > 3.7){\n            return \"A\";\n        }else if (grade > 3.3){\n            return \"A-\";\n        }else if(grade > 3.0){\n            return \"B+\";\n        }else if (grade > 2.7){\n            return \"B\";\n        }else if (grade > 2.3){\n            return \"B-\";\n        }else if (grade > 2.0){\n            return \"C+\";\n        }else if (grade > 1.7){\n            return \"C\";\n        }else if (grade > 1.3){\n            return \"C-\";\n        }else if (grade > 1.0){\n            return \"D+\";\n        }else if(grade > 0.7){\n            return \"D\";\n        }else if(grade > 0.0){\n            return \"D-\";\n        }else{\n            return \"E\";\n        }\n    }\n    \n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> result = new ArrayList<>();\n        \n        for(Number grade : grades){\n            result.add(gradeEquation(grade.doubleValue()));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3, 1.7, 2, 3.5);\n        System.out.println(numericalLetterGrade(grades)); // Output should be: [A+, B, C-, C, A-]\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "int n = string.length(); \n        if (n <= 1)  return false; \n        for (int i = 2; i < n; i++) { \n            if (n % i == 0)  \n                return false; \n        } \n  \n        return true; \n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(solve(1000));     // Outputs 1\n        System.out.println(solve(150));      // Outputs 110\n        System.out.println(solve(147));      // Outputs 1100\n    }\n\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;   // Adding the last digit to sum\n            n /= 10;         // Removing the last digit from number\n        }\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n   public static List<int[]> getRow(List<List<Integer>> lst, int x) {\n      List<int[]> result = new ArrayList<>();\n      \n      for (int i = 0; i < lst.size(); i++) {\n         List<Integer> row = lst.get(i);\n         for (int j = 0; j < row.size(); j++) {\n            if (row.get(j) == x) {\n               result.add(new int[]{i, j});\n            }\n         }\n      }\n      \n      // sort by rows in ascending order and columns in descending order\n      Collections.sort(result, new Comparator<int[]>() {\n         @Override\n         public int compare(int[] a, int[] b) {\n            if (a[0] != b[0]) {\n               return Integer.compare(a[0], b[0]);\n            } else {\n               return Integer.compare(b[1], a[1]); // swap for descending order\n            }\n         }\n      });\n      \n      return result;\n   }\n\n   public static void main(String[] args) {\n      List<List<Integer>> lst = new ArrayList<>();\n      lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n      lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n      lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n      System.out.println(getRow(lst, 1)); // output: [(0, 0), (1, 4), (2, 0)]\n   }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\npublic class NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (Integer num: lst) {\n            pq.add(num);\n            if (pq.size() > 2) {\n                pq.poll();\n            }\n        }\n        \n        return pq.size() < 2 ? null : pq.peek();\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>();\n        Collections.addAll(lst, 1, 2, 3, 4, 5);\n        System.out.println(nextSmallest(lst)); // Output: 2\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "// Split the string into sentences using a regular expression\n        String[] sentences = s.split(\"[.!?]\");\n        \n        int count = 0;\n\n        for (String sentence : sentences) {\n            // Split each sentence into words and ignore any leading/trailing whitespace\n            String[] words = sentence.trim().split(\"\\\\s+\");\n            \n            if (words.length > 0 && words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.*;\n\nclass Main {\n    public static int skjkasdkd(List<Integer> lst) {\n        // Initialize maxPrime to be -1 since we are comparing with > operator\n        int maxPrime = -1;\n        \n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        if (maxPrime == -1) { // No prime numbers found in the list. \n            return -1;\n        }\n\n        int sumDigits = 0;\n        while(maxPrime > 0){\n            sumDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sumDigits;\n    }\n    \n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i < Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(1,81,12,3,1,21);\n        System.out.println(skjkasdkd(lst)); // Output: 3\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "if (dict == null || !(dict instanceof Map)) {\n            return false;\n        }\n\n        // Convert the dictionary into a map\n        Map<String, String> map = (Map<String, String>) dict;\n\n        // Initialize flags for lower and upper case keys\n        boolean hasLowerCaseKeys = false;\n        boolean hasUpperCaseKeys = false;\n\n        // Iterate through all the keys in the dictionary\n        for (String key : map.keySet()) {\n            if (key == null || !(key instanceof String)) {\n                return false;\n            }\n\n            if (((String) key).equals(((String) key).toLowerCase())) {\n                hasLowerCaseKeys = true;\n            } else if (((String) key).equals(((String) key).toUpperCase())) {\n                hasUpperCaseKeys = true;\n            } else {\n                // If the key is not either lower or upper case, return false.\n                return false;\n            }\n        }\n\n        // If all keys are in lower case or all keys are in upper case, return true. Else, return false.\n        if (hasLowerCaseKeys && !hasUpperCaseKeys) {\n            return true;\n        } else if (!hasLowerCaseKeys && hasUpperCaseKeys) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "public class ClosestInteger {\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"15.3\")); // prints: 15\n        System.out.println(closestInteger(\"-14.5\")); // prints: -15\n    }\n\n    public static int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n        int floor = (int) Math.floor(d);\n        int ceil = (int) Math.ceil(d);\n        \n        if (d - floor == 0.5 && d > 0){\n            return ceil;\n        } else if (ceil - d == 0.5 && d < 0){\n            return floor;\n        }\n        \n        return d > 0 ? ceil : floor;\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.*;\n\nclass MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (n % 2 == 0) {\n                pile.add(n + 2 * i);\n            } else {\n                pile.add(n + 2 * i);\n            }\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.*;\n\npublic class WordsString {\n    public static List<String> words_string(String s) {\n        // Splits the string into words using both commas and spaces as delimiters\n        String[] splitWords = s.split(\"[, ]\");\n        \n        // Converts the array of words to a List and returns it\n        return new ArrayList<>(Arrays.asList(splitWords));\n    }\n    \n    public static void main(String []args){\n        List<String> result = words_string(\"Hi, my name is John\");\n        for (String word : result) {\n            System.out.println(word);\n        }\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n    // Start from the larger number and go down to the smaller one.\n    for (int i = Math.max(x,y); i >= Math.min(x,y); i--) {\n        // Check if this number is even.\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n    // There are no even numbers in the range.\n    return -1;\n}"}
{"task_id": "java/46", "language": "java", "completion": "if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (double) sum / (m - n + 1);\n        int roundedAvg = Math.round(avg);\n        String binaryString = Integer.toBinaryString(roundedAvg);\n        \n        return \"0b\" + binaryString;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // Output: 0b11\n        System.out.println(roundedAvg(7, 5)); // Output: -1\n        System.out.println(roundedAvg(10, 20)); // Output: 0b1111\n        System.out.println(roundedAvg(20, 33)); // Output: 0b11010\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int fact = 1;\n                for (int j = 1; j <= i; j++) {\n                    fact *= j;\n                }\n                list.add(fact);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(f(5));  // Output: [1, 2, 6, 6, 24]\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\npublic class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int[] palindromes = new int[n+1];\n        for (int i = 0; i <= n; ++i) {\n            int reversedI = 0;\n            int temp = i;\n            while (temp > 0) {\n                reversedI = reversedI * 10 + temp % 10;\n                temp /= 10;\n            }\n            if (i == reversedI) {\n                palindromes[i]++;\n            }\n        }\n\n        int evenCount = 0, oddCount = 0;\n        for (int i = 1; i <= n; ++i) {\n            if (palindromes[i] > 0) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        list.add(1);\n        list.add(2);\n        System.out.println(moveOneBall(list));\n        \n        list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(5);\n        list.add(4);\n        list.add(1);\n        list.add(2);\n        System.out.println(moveOneBall(list));\n    }\n    \n    public static Boolean moveOneBall(List<Integer> arr){\n        if(arr == null || arr.size() == 0) return true;\n        \n        int n = arr.size();\n        for(int i=0; i<n-1; i++){\n            if(arr.get(i) > arr.get((i+1)%n)) {\n                if(i != n-1 || arr.get(i) <= arr.get(0)){\n                    return false; \n                }\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int count1 = 0;  // count of odd numbers in lst1\n    int count2 = 0;  // count of even numbers in lst2\n\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            count1++;\n        }\n    }\n\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            count2++;\n        }\n    }\n\n    // It's possible to make all elements of lst1 even if and only if\n    // the number of odd numbers in lst1 is equal to the number of even numbers in lst2.\n    return (count1 == count2) ? \"YES\" : \"NO\";\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\npublic class ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        Set<Character> set = new HashSet<>();\n        for (char value : c.toCharArray()) {\n            set.add(value);\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for (char value : s.toCharArray()) {\n            if (!set.contains(value)) {\n                sb.append(value);\n            }\n        }\n        \n        String result = sb.toString();\n        boolean isPalindrome = new StringBuilder(result).reverse().toString().equals(result);\n        \n        List<Object> list = new ArrayList<>();\n        list.add(result);\n        list.add(isPalindrome);\n        return list;\n    }\n    \n    public static void main(String[] args) {\n        List<Object> result = reverseDelete(\"abcde\", \"ae\");\n        System.out.println(result);  // Output: [bcd, false]\n        \n        result = reverseDelete(\"abcdef\", \"b\");\n        System.out.println(result);  // Output: [acdef, false]\n        \n        result = reverseDelete(\"abcdedcba\", \"ab\");\n        System.out.println(result);  // Output: [cdedc, true]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int count = 0; // to keep track of number of times we need to lower the bucket\n        int totalCells = grid.size() * grid.get(0).size(); // total cells in the grid\n        \n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) == 1) { // if the cell contains water\n                    capacity--; // decrement the bucket's capacity\n                    \n                    if (capacity == 0 && totalCells > 0) { // if bucket is full, we lower it\n                        count++; // increment the counter\n                        totalCells -= capacity; // deduct the collected water from total cells\n                        capacity = Math.min(grid.get(i).stream().mapToInt(Integer::intValue).sum(), grid.stream().mapToInt(row -> row.get(j)).sum()); // recalculate the remaining capacity\n                    }\n                }\n            }\n        }\n        \n        if (capacity != 0) { // if some water is left in the bucket\n            count++; // we need to lower it one more time\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args){\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(maxFill(grid1, 1)); // prints: 6\n        \n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(maxFill(grid2, 2)); // prints: 5\n        \n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(maxFill(grid3, 5)); // prints: 0\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] strArr = s.split(\" \");\n        for (String word : strArr) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                        c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        List<String> result = selectWords(\"Mary had a little lamb\", 4);\n        System.out.println(result); // prints [little]\n\n        result = selectWords(\"Mary had a little lamb\", 3);\n        System.out.println(result); // prints [Mary, lamb]\n\n        result = selectWords(\"simple white space\", 2);\n        System.out.println(result); // prints []\n\n        result = selectWords(\"Hello world\", 4);\n        System.out.println(result); // prints [world]\n\n        result = selectWords(\"Uncle sam\", 3);\n        System.out.println(result); // prints [Uncle]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\npublic class Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            if (maxHeap.size() < k) {\n                maxHeap.offer(num);\n            } else if (num > maxHeap.peek()) {\n                maxHeap.poll();\n                maxHeap.offer(num);\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>(maxHeap);\n        Collections.sort(result, Collections.reverseOrder());\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "public class AddElements {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n        int k = 4;\n        System.out.println(\"The sum of the elements with at most two digits from the first \" + k + \" elements is: \" + addElements(list, k));\n    }\n\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 0 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\npublic class Intersection {\n    public static boolean isPrime(int n){\n        if (n <= 1) return false; // zero and one are not prime numbers\n        for (int i = 2; i * i <= n; i++){\n            if (n % i == 0) return false; // n has a divisor in range 2..sqrt(n)\n        }\n        return true; // no divisors found, hence prime\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2){\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) return \"NO\"; // no intersection\n\n        int length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\npublic class Tri {\n    public static List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        result.add(1); // tri(0) = 1\n        for (int i = 1; i <= n; i++) {\n            int value;\n            if (i % 2 == 0) { // For even numbers, the Tribonacci number is 1 + i/2\n                value = 1 + i / 2;\n            } else { // For odd numbers, the Tribonacci number is the sum of the previous three Tribonacci numbers\n                if (i == 1) {\n                    value = 3; // tri(1) = 3\n                } else {\n                    value = result.get(result.size() - 1) + result.get(result.size() - 2) + result.get(result.size() - 3);\n                }\n            }\n            result.add(value);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(tri(3)); // Output: [1, 3, 2, 8]\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public static int digits(int n) {\n    int product = 1;  // Initialize product \n    boolean hasOddDigit = false; // flag to check if number has odd digit\n\n    while (n > 0) {\n        int digit = n % 10;  // Get the rightmost digit\n\n        if (digit % 2 != 0) {  // If it's an odd digit\n            product *= digit;  // multiply it with the current product\n            hasOddDigit = true; // Set flag to true\n        }\n\n        n = n / 10;  // Remove the rightmost digit\n    }\n    \n    return hasOddDigit ? product : 0; // If there was an odd digit, return product. Else return 0.\n}"}
{"task_id": "java/59", "language": "java", "completion": "public static Boolean isNested(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (char c : s.toCharArray()) {\n        if (c == '[') {\n            stack.push(c);\n        } else if (c == ']' && !stack.isEmpty()) {\n            stack.pop();\n        } else {\n            return false; // unbalanced brackets\n        }\n    }\n    return stack.isEmpty(); // no nested bracket subsequence if stack is not empty at the end\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.math.Ceil;\nimport java.util.*;\n\npublic class SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        \n        for (Number num : lst) {\n            double ceilNum = Math.ceil(num.doubleValue()); // Round up to nearest integer\n            sum += (int)Math.pow(ceilNum,2); // Square the number and add it to the sum\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static boolean checkIfLastCharIsALetter(String txt) {\n    if (txt == null || txt.length() == 0) {\n        return false;\n    }\n    \n    char lastChar = txt.charAt(txt.length() - 1);\n    if (!Character.isLetter(lastChar)) {\n        return false;\n    }\n    \n    // Check if the last character is part of a word\n    if (txt.length() > 1 && Character.isLetter(txt.charAt(txt.length() - 2))) {\n        return false;\n    }\n    \n    return true;\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\npublic class CanArrange {\n    public static Integer canArrange(List<Integer> list) {\n        int n = list.size();\n        if (n < 2) return -1;\n        \n        // start from the last element and iterate to the first one\n        for (int i = n - 1; i > 0; i--) {\n            if (list.get(i) < list.get(i - 1)) {\n                return i;\n            }\n        }\n        \n        // if no such element exists, return -1\n        return -1;\n    }\n    \n    public static void main(String[] args){\n\t   List<Integer> arr = new ArrayList<>(Arrays.asList(1,2,4,3,5));\n\t   System.out.println(canArrange(arr));\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (int) o;\n                if (num < 0 && (largestNegative == null || num > largestNegative)) {\n                    largestNegative = num;\n                } else if (num > 0 && (smallestPositive == null || num < smallestPositive)) {\n                    smallestPositive = num;\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "long result = 1;\n        for (int i = n; i > 0; i--) {\n            result = result * factorial(i);\n        }\n        return result;\n    }\n\n    public static long factorial(int num){\n        if(num == 0 || num == 1){\n            return 1;\n        }else{\n            return num * factorial(num - 1);\n        }\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "public class WordsInSentence {\n\n    // Function to check if a number is prime or not.\n    private static boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    // Function to handle the input and output.\n    public static String wordsInSentence(String sentence) {\n        // Splitting the sentence into words.\n        String[] words = sentence.split(\" \");\n\n        StringBuilder sb = new StringBuilder();\n        \n        for (String word: words){\n            if (isPrime(word.length()))\n                sb.append(word + \" \");\n        }\n        // remove the last space and return.\n        return sb.toString().trim();\n    }\n    \n    public static void main(String[] args) {\n        String sentence = \"lets go for swimming\";\n        System.out.println(wordsInSentence(sentence));\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "public class Simplify {\n    // Function that simplifies the expression 'x * n' and checks if it results in whole number\n    public static Boolean simplify(String x, String n) {\n        // Split each fraction into numerator and denominator\n        String[] x_parts = x.split(\"/\");\n        String[] n_parts = n.split(\"/\");\n\n        int num1 = Integer.parseInt(x_parts[0]);\n        int den1 = Integer.parseInt(x_parts[1]);\n        int num2 = Integer.parseInt(n_parts[0]);\n        int den2 = Integer.parseInt(n_parts[1]);\n\n        // Calculate the resulting numerator and denominator\n        int res_num = num1 * num2;\n        int res_den = den1 * den2;\n\n        // Check if the result is a whole number (i.e., the denominator divides the numerator evenly)\n        return res_num % res_den == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(simplify(\"1/5\", \"5/1\")); // True\n        System.out.println(simplify(\"1/6\", \"2/1\")); // False\n        System.out.println(simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\nclass Main{\n    public static void main(String[] args){\n        ArrayList<Integer> array = new ArrayList<Integer>();\n        array.add(1);\n        array.add(11);\n        array.add(-1);\n        array.add(-11);\n        array.add(-12);\n        System.out.println(orderByPoints(array));\n    }\n    public static List<Integer> orderByPoints(List<Integer> nums){\n        // Creating a new arraylist to store original indexes along with element\n        ArrayList<Pair> pairList = new ArrayList<>();\n        for(int i=0; i<nums.size(); i++){\n            int sum = 0;\n            int temp = Math.abs(nums.get(i));\n            while(temp > 0){\n                sum += temp % 10;\n                temp /= 10;\n            }\n            Pair p = new Pair(sum, nums.get(i), i);\n            pairList.add(p);\n        }\n        // Sorting the pair list\n        Collections.sort(pairList, new Comparator<Pair>(){\n            public int compare(Pair p1, Pair p2){\n                if(p1.sum != p2.sum)\n                    return p1.sum - p2.sum;\n                else\n                    return p1.index - p2.index; // to maintain original order\n            }\n        });\n        // Retrieving sorted list of numbers\n        ArrayList<Integer> sortedList = new ArrayList<>();\n        for(Pair p : pairList){\n            sortedList.add(p.num);\n        }\n        return sortedList;\n    }\n}\n// Pair class to store sum, number and its original index position\nclass Pair{\n    int sum;\n    int num;\n    int index;\n    public Pair(int s, int n, int i){\n        this.sum = s;\n        this.num = n;\n        this.index = i;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "public static int specialFilter(List<Integer> nums) {\n    int count = 0;\n\n    for (int num : nums) {\n        if (num > 10) {\n            int firstDigit = Math.abs(num / 10); // absolute value to handle negative numbers\n            int lastDigit = num % 10;\n            if (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "java/69", "language": "java", "completion": "def getMaxTriples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\npublic class Bf {\n    private static final List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    \n    public static List<String> bf(String planet1, String planet2) {\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) { //if either planet is not valid\n            return Collections.emptyList();\n        }\n        \n        List<String> result = new ArrayList<>();\n        \n        if (index1 < index2) { \n            for(int i=index1+1;i<index2;i++)\n                result.add(planets.get(i)); //get all planets in between\n        } else {\n            for(int i=index2+1;i<index1;i++)\n                result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); //prints [Saturn, Uranus]\n        System.out.println(bf(\"Earth\", \"Mercury\")); //prints [Venus]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); //prints [Venus, Earth, Mars, Jupiter, Saturn]\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static int xOrY(int n, int x, int y) {\n    return isPrime(n) ? x : y;\n}"}
{"task_id": "java/72", "language": "java", "completion": "// Check if list is empty or null\n        if (lst == null || lst.isEmpty()) {\n            return 0;\n        }\n\n        int sum = 0;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n\n                // Ignore negative numbers and even numbers\n                if (num < 0 || num % 2 == 0) continue;\n\n                sum += num * num;\n            }\n        }\n\n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.*;\n\npublic class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        double maxStrength = Double.MIN_VALUE;\n        String strongestExt = \"\";\n        \n        for (String ext : extensions) {\n            int upperCaseCount = 0, lowerCaseCount = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) upperCaseCount++;\n                else if (Character.isLowerCase(c)) lowerCaseCount++;\n            }\n            double strength = upperCaseCount - lowerCaseCount;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExt = ext;\n            }\n        }\n        \n        return className + \".\" + strongestExt;\n    }\n    \n    public static void main(String[] args) {\n        List<String> extensions = new ArrayList<>();\n        extensions.add(\"SErviNGSliCes\");\n        extensions.add(\"Cheese\");\n        extensions.add(\"StuFfed\");\n        \n        System.out.println(strongestExtension(\"Slices\", extensions));  // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "import java.util.*;\npublic class Main{\n   public static void main(String[] args){\n      System.out.println(cycpattern_check(\"abcd\",\"abd\")); //False\n      System.out.println(cycpattern_check(\"hello\",\"ell\")); //True\n      System.out.println(cycpattern_check(\"whassup\",\"psus\")); //False\n      System.out.println(cycpattern_check(\"abab\",\"baa\")); //True\n      System.out.println(cycpattern_check(\"efef\",\"eeff\")); //False\n      System.out.println(cycpattern_check(\"himenss\",\"simen\")); //True\n   }\n    public static Boolean cycpattern_check(String a, String b) {\n        if (a == null || b == null || b.length() > a.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "public class IntToMiniRoman {\n    static Map<Integer, String> map = new HashMap<>();\n\n    static {\n        map.put(1, \"i\");\n        map.put(4, \"iv\");\n        map.put(5, \"v\");\n        map.put(9, \"ix\");\n        map.put(10, \"x\");\n        map.put(40, \"xl\");\n        map.put(50, \"l\");\n        map.put(90, \"xc\");\n        map.put(100, \"c\");\n        map.put(400, \"cd\");\n        map.put(500, \"d\");\n        map.put(900, \"cm\");\n        map.put(1000, \"m\");\n    }\n\n    public static String intToMiniRoman(int number) {\n        StringBuilder sb = new StringBuilder();\n\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            while (number >= entry.getKey()) {\n                sb.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n\n        return sb.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // Output: xix\n        System.out.println(intToMiniRoman(152)); // Output: clii\n        System.out.println(intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "public class RightAngledTriangle {\n    public static boolean rightAngledTriangle(int a, int b, int c) {\n        // sort the sides to make sure c is the longest side (hypotenuse)\n        int sides[] = {a, b, c};\n        Arrays.sort(sides);\n        \n        // use Pythagorean theorem: a^2 + b^2 = c^2\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(rightAngledTriangle(3, 4, 5)); // prints: true\n        System.out.println(rightAngledTriangle(1, 2, 3)); // prints: false\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "public class Solve {\n    public static String solve(String s) {\n        StringBuilder sb = new StringBuilder();\n        boolean hasLetter = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c))\n                    sb.append(Character.toLowerCase(c));\n                else \n                    sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (!hasLetter) {\n            return sb.reverse().toString();\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "if (text == null || text.isEmpty()) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\"); \n            byte[] messageDigest = md.digest(text.getBytes()); \n            BigInteger no = new BigInteger(1, messageDigest); \n            String hashtext = no.toString(16); \n            \n            while (hashtext.length() < 32) { \n                hashtext = \"0\" + hashtext; \n            }\n            \n            return hashtext; \n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            String num = Integer.toString(i);\n            for (int j = 0; j < num.length(); j++) {\n                int digit = Character.getNumericValue(num.charAt(j));\n                if (digit % 2 == 0) {\n                    result.add(digit);\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    public static void main(String[] args){\n       List<Integer> res = generateIntegers(2, 8);\n       for(int i: res)\n           System.out.println(i);\n    }\n}"}

{"task_id": "typescript/0", "language": "typescript", "completion": "let balance = 0;\n    for(let operation of operations){\n        balance += operation;\n        if(balance < 0) return true;\n    }\n    return false;\n}\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "typescript/1", "language": "typescript", "completion": "let sum = 0;\nlet product = 1;\nfor(let i=0;i<numbers.length;i++){\n    sum += numbers[i];\n    product *= numbers[i];\n}\nreturn [sum,product];\n};\nconsole.log(sum_product([])); // (0, 1)\nconsole.log(sum_product([1, 2, 3, 4])); // (10, 24)"}
{"task_id": "typescript/2", "language": "typescript", "completion": "function string_xor(a: string, b: string): string {\n    // Convert binary strings to integers\n    let numA = parseInt(a, 2);\n    let numB = parseInt(b, 2);\n\n    // Perform XOR operation\n    let xorResult = numA ^ numB;\n\n    // Return result as binary string\n    return xorResult.toString(2).padStart(Math.max(a.length, b.length), '0');\n}"}
{"task_id": "typescript/3", "language": "typescript", "completion": "function longest(strings: string[]): string | null {\n    if (!strings.length) {\n        return null;\n    }\n\n    let longestString = strings[0];\n    \n    for (const str of strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n  \n    return longestString;\n}"}
{"task_id": "typescript/4", "language": "typescript", "completion": "let gcd = function(a: number, b: number): number {\n    if (!b) {\n        return a;\n    }\n  \n    return gcd(b, a % b);\n}\n\nreturn gcd(a, b);\n}; \n// This TypeScript function uses the Euclidean algorithm to find the Greatest Common Divisor (GCD) of two numbers.\n// The Euclidean algorithm involves repeatedly replacing the input parameters by their remainder until a pair of numbers for which the remainder is zero is found. That pair's first number is then identified as the GCD. \n\n// It begins by checking if 'b' is zero; if it is, 'a' is returned as the GCD. If not, the function calls itself with 'b' and the remainder of 'a' divided by 'b'. This continues until a pair with a zero remainder is found, at which point the second number in that pair (the original 'a') is returned as the GCD."}
{"task_id": "typescript/5", "language": "typescript", "completion": "function sort_numbers(input: string): string {\n    // Split input into array of words\n    const numsArr = input.split(' ');\n    // Sort the array\n    numsArr.sort((a, b) => {\n        const aIndex = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].indexOf(a);\n        const bIndex = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].indexOf(b);\n        return aIndex - bIndex;\n    });\n    // Join the array back into a string with space delimiter\n    const sortedInput = numsArr.join(' ');\n    return sortedInput;\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "let minNum = Math.min(...numbers);\n    let maxNum = Math.max(...numbers);\n\n    return numbers.map(num => (num - minNum) / (maxNum - minNum));\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "return string0.split('').map(char => {\n    if (char === char.toUpperCase()) {\n        return char.toLowerCase();\n    } else {\n        return char.toUpperCase();\n    }\n}).join('');\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "return l.filter((x) => x > 0);\n}"}
{"task_id": "typescript/9", "language": "typescript", "completion": "if(n < 2){\n    return false;\n}\nfor(let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++){\n    if(n % i === 0){\n        return false;\n    }\n}\nreturn true;\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "function unique(l: number[]): number[] {\n    let uniqueNumbers = new Set(l);  // Create a set from the list which removes duplicates\n    let sortedUniqueNumbers = [...uniqueNumbers];  // Convert the set back to an array\n    sortedUniqueNumbers.sort((a, b) => a - b);  // Sort the array in ascending order\n    return sortedUniqueNumbers;  // Return the sorted array of unique numbers\n}"}
{"task_id": "typescript/11", "language": "typescript", "completion": "function primeFib(n: number): number {\n    let fib = [0, 1]; // Start with 0 and 1  \n    for (let i = 2; ;i++) { \n        fib[i] = fib[i-1] + fib[i-2]; \n        if (isPrime(fib[i])) {\n            fib.shift(); // The first number (0) is not a prime\n            break;\n        }\n    }\n  \n    return fib[n - 1];\n}\n\nfunction isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return true;\n}"}
{"task_id": "typescript/12", "language": "typescript", "completion": "let len = l.length;\n    if (len < 3) {\n      return false;\n    }\n  \n    l.sort((a, b) => a - b);\n  \n    for (let i = 0; i < len - 1; i++) {\n      let two_sum = -l[i];\n      let start = i + 1;\n      let end = len - 1;\n      while (start < end) {\n        if (l[start] + l[end] > two_sum) {\n          end--;\n        } else if (l[start] + l[end] < two_sum) {\n          start++;\n        } else {\n          return true;\n        }\n      }\n    }\n  \n    return false;\n  };"}
{"task_id": "typescript/13", "language": "typescript", "completion": "let set = new Set();\n    for(let num of l){\n        if(set.has(-num)){\n            return true;\n        }else{\n            set.add(num);\n        }\n    }\n    return false;\n}"}
{"task_id": "typescript/14", "language": "typescript", "completion": "function fib4(n: number): number {\n    if (n < 0) {\n        throw \"Input must be a positive integer.\";\n    }\n    \n    // Initialize the array with the first 4 numbers in the sequence.\n    const fibNums = [0, 0, 2, 0];\n    \n    // Compute the rest of the sequence up to the n-th number.\n    for (let i = 4; i <= n; i++) {\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2] + fibNums[i - 3] + fibNums[i - 4];\n    }\n    \n    return fibNums[n];\n}"}
{"task_id": "typescript/15", "language": "typescript", "completion": "function median(l: Array<number>): number {\n    // Sort the array in ascending order\n    l.sort((a, b) => a - b);\n  \n    let median;\n    \n    // If length of the array is even\n    if (l.length % 2 === 0) {\n        let mid1 = l[Math.floor((l.length / 2) - 1)];\n        let mid2 = l[Math.ceil(l.length / 2)];\n        median = (mid1 + mid2) / 2;\n    }\n    \n    // If length of the array is odd\n    else {\n        median = l[Math.floor(l.length / 2)];\n    }\n  \n    return median;\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "let start = 0;\n    let end = text.length - 1;\n\n    while (start < end) {\n        if (text[start] != text[end])\n            return false;\n\n        start++;\n        end--;\n    }\n\n    return true;\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "let result: string = '';\n    for(let i=0; i < text.length; i++) {\n        let char: string = text.charAt(i);\n        if(!(/[aeiou]/i.test(char))) { //if the character is not a vowel\n            result += char;\n        }\n    }\n    return result;\n}"}
{"task_id": "typescript/18", "language": "typescript", "completion": "let res = true;  // Initialize result\n    for(let i=0;i < l.length;i++){\n        if(l[i] >= t){\n            res = false;  // If any number in list is greater or equal to threshold, set result as False\n            break;   // And break the loop\n        }\n    }\n    return res;  // Return final result\n}"}
{"task_id": "typescript/19", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string) : boolean  {\n    let count0 = new Array(26).fill(0);\n    let count1 = new Array(26).fill(0);\n    \n    for (let i = 0; i < s0.length; i++) {\n        count0[s0.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    for (let i = 0; i < s1.length; i++) {\n        count1[s1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    \n    return count0.join() === count1.join();\n}"}
{"task_id": "typescript/21", "language": "typescript", "completion": "let f:number[]=[0,1]\n    if(n<2){\n        return n\n    }\n   for(let i=2;i<=n;i++){\n       f[i]=f[i-1]+f[i-2];\n   }\nreturn f[n]\n}"}
{"task_id": "typescript/22", "language": "typescript", "completion": "let result = l1.filter(value => l2.includes(value));\n    return [...new Set(result)].sort((a,b)=>a-b);\n}\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "let maxPrimeFactor = -1;\n\nwhile (n % 2 == 0) {\n   maxPrimeFactor = 2;\n   n >>= 1; // equivalent to n /= 2\n}\n\nfor (let i = 3; i <= Math.sqrt(n); i += 2) {\n   while (n % i == 0) {\n      maxPrimeFactor = i;\n      n = n / i;\n   }\n}\n\nif (n > 2) {\n   maxPrimeFactor = n;\n}\n\nreturn maxPrimeFactor;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "return n * (n + 1) / 2;\n}"}
{"task_id": "typescript/25", "language": "typescript", "completion": "function derivative(xs: number[]): number[] {\n    let derivative_coefficients = [];\n  \n    // Start from index 1, since the first coefficient would become zero in the derivative and can be omitted.\n    for (let i = 1; i < xs.length; i++) {\n      derivative_coefficients.push(xs[i] * i);\n    }\n  \n    return derivative_coefficients;\n}"}
{"task_id": "typescript/26", "language": "typescript", "completion": "if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    \n    let a = 0, b = 0, c = 1;\n    for(let i = 3; i <= n; i++) {\n        let temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    \n    return c;\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n    }\n    \n    if (s[s.length-1] === 'y' || s[s.length-1] === 'Y') {\n        count++;\n    }\n  \n    return count;\n};\n\nconsole.log(vowels_count(\"abcde\"));  // 2\nconsole.log(vowels_count(\"ACEDY\"));  // 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "function search(lst: number[]): number {\n    // create a frequency object\n    let freq = {};\n    for (let num of lst) {\n        if (!freq[num]) {\n            freq[num] = 0;\n        }\n        freq[num]++;\n    }\n\n    // sort the list in descending order\n    lst.sort((a, b) => b - a);\n\n    // check each integer if its frequency is greater or equal to its value\n    for (let num of lst) {\n        if (freq[num] >= num && num > 0) {\n            return num;\n        }\n    }\n\n    // if no such a value exists, return -1\n    return -1;\n}"}
{"task_id": "typescript/29", "language": "typescript", "completion": "function checkTriangle(a:number, b:number, c:number): boolean{\n    if ((a + b > c) && (b + c > a) && (c + a > b)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction triangle_area(a: number, b: number, c: number): number {\n    if (!checkTriangle(a,b,c)){\n        return -1;\n    }\n\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    return Math.round(area * 100) / 100;\n}"}
{"task_id": "typescript/30", "language": "typescript", "completion": "let sum = q.reduce((a,b)=> a+b,0);\n    if(sum > w){\n        return false;\n    }else{\n        let strQ = q.join('');\n        let reverseStrQ = strQ.split('').reverse().join('');\n        if(strQ === reverseStrQ){\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n  \nconsole.log(will_it_fly([1, 2], 5)); // False\nconsole.log(will_it_fly([3, 2, 3], 1)); // False\nconsole.log(will_it_fly([3, 2, 3], 9)); // True\nconsole.log(will_it_fly([3], 5)); // True"}
{"task_id": "typescript/31", "language": "typescript", "completion": "// First, we need to create a helper function to check if a number is prime.\n    const isPrime = (n: number): boolean => {\n        for(let i = 2; i < n ; i++){\n            if(n % i === 0) return false;\n        }\n        return n > 1;\n    };\n\n// Now, we create our main function. This function will try to decompose the input number 'a' as a product of three prime numbers, and check if this decomposition is unique.\n    let factors = [];\n    for(let i = 2; i <= a; i++){\n        while (isPrime(i) && a % i === 0){\n            factors.push(i);\n            a /= i;\n        }\n    }\n    \n// Finally, we return true if the decomposition is correct, and false otherwise.\n    return factors.length == 3 && a == 1;\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "let binaryString = decimal.toString(2); //convert decimal to binary\n    let resultBinary = 'db' + binaryString + 'db'; //add extra characters as required\n    return resultBinary;\n};\n\nconsole.log(decimal_to_binary(15));  //outputs: db1111db\nconsole.log(decimal_to_binary(32));  //outputs: db100000db"}
{"task_id": "typescript/33", "language": "typescript", "completion": "function is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i <= s.length - 3; i++) {\n        const substring = s.substring(i, i+3);\n        if (new Set(substring).size !== 3) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "typescript/34", "language": "typescript", "completion": "let result: string[] = [];\n\ngrades.forEach(grade => {\n    if(grade == 4.0) {\n        result.push(\"A+\");\n    } else if (grade > 3.7) {\n        result.push(\"A\");\n    } else if (grade > 3.3) {\n        result.push(\"A-\");\n    } else if(grade > 3.0) {\n        result.push(\"B+\");\n    } else if(grade > 2.7) {\n        result.push(\"B\");\n    } else if (grade > 2.3) {\n        result.push(\"B-\");\n    } else if(grade > 2.0) {\n        result.push(\"C+\");\n    } else if(grade > 1.7) {\n        result.push(\"C\");\n    } else if (grade > 1.3) {\n        result.push(\"C-\");\n    } else if(grade > 1.0) {\n        result.push(\"D+\");\n    } else if(grade > 0.7) {\n        result.push(\"D\");\n    } else if (grade > 0.0) {\n        result.push(\"D-\");\n    } else if (grade == 0.0) {\n        result.push(\"E\");\n    }\n});\nreturn result;\n}\n  \nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "function isPrime(num: number) : boolean {\n    if (num < 2) return false;\n    let sqrtNum = Math.sqrt(num);\n    for(let i = 2; i <= sqrtNum; i++) {\n        if(num % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "typescript/36", "language": "typescript", "completion": "function solve(N: number): string {\n    let sumOfDigits = 0;\n    while(N > 0){\n        sumOfDigits += N % 10;\n        N = Math.floor(N / 10);\n    }\n    return sumOfDigits.toString(2); // Convert to binary\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "function get_row(lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    let result: Array<[number, number]> = [];\n    \n    // loop through each row\n    for (let i = 0; i < lst.length; i++) {\n        // loop through each column in the current row\n        for (let j = 0; j < lst[i].length; j++) {\n            // if we found x, add its coordinates to our result list\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n\n    // sort coordinates by rows in ascending order and columns in descending order\n    result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    \n    return result;\n}"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = (lst: Array<number>) : number|null => {\n  let uniqueNumbers = new Set(lst);\n  \n  // Check if there are at least two elements\n  if(uniqueNumbers.size < 2) {\n    return null;\n  }\n\n  let sortedNumbers = [...uniqueNumbers];\n  sortedNumbers.sort((a, b) => a - b);\n  \n  return sortedNumbers[1];\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "function is_bored(S: string): number {\n    // Define the delimiter patterns\n    const delimiters = /[.!?]/;\n    \n    // Split the input string into sentences\n    let sentences = S.split(delimiters);\n\n    // Initialize boredom counter\n    let boredoms = 0;\n\n    // Iterate over each sentence\n    for (let sentence of sentences) {\n        // Increase the boredom counter if the sentence starts with \"I\"\n        if (sentence.trim().startsWith(\"I\")) {\n            boredoms++;\n        }\n    }\n\n    return boredoms;\n}"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return true;\n}\n\nfunction sumOfDigits(num: number): number {\n    let sum = 0;\n    while (num) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}\n\nfunction largestPrimeAndSum(lst: Array<number>): number {\n    let maxPrime = -Infinity;\n    for (let num of lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    return sumOfDigits(maxPrime);\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "if(dict.size === 0){\n    return false;\n}\nlet lowerCase = true;\nlet upperCase = true;\n\nfor( let key of dict.keys()){\n    if(typeof key !== 'string'){\n        return false;\n    }\n    if(key !== key.toLowerCase()){\n        lowerCase = false;\n    }\n    if(key !== key.toUpperCase()){\n        upperCase = false;\n    }    \n}\nreturn lowerCase || upperCase;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "let num = math.evaluate(value);\n  \n  // If the number is equidistant from two integers, round it away from zero.\n  return Math.round(num);\n}"}
{"task_id": "typescript/43", "language": "typescript", "completion": "let result = [];\n    for(let i = n; i >= 0; i--){\n        if(n % 2 === 0){\n            result.unshift(i * 2);\n        }else{\n            result.unshift(i * 2 - 1);\n        }\n    }\n    return result;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "function words_string(s: string): Array<string> {\n    let delimiter = s.includes(',') ? ',' : ' ';\n    let words = s.split(delimiter);\n    return words.map((word) => word.trim());\n}"}
{"task_id": "typescript/45", "language": "typescript", "completion": "function choose_num(x: number, y: number): number {\n    // Create an array containing all even numbers in the range [x, y] inclusive.\n    const evenNumbers = [];\n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) {\n            evenNumbers.push(i);\n        }\n    }\n\n    // If there are no even numbers in the range [x, y], return -1.\n    if (evenNumbers.length === 0) {\n        return -1;\n    }\n\n    // Otherwise, return the biggest even number.\n    return Math.max(...evenNumbers);\n}"}
{"task_id": "typescript/46", "language": "typescript", "completion": "function intToBinary(num: number) {\n    return num.toString(2).padStart(8, '0');\n}\n\nconst rounded_avg = function (n: number, m: number) : any  {\n    if (n > m) {\n        return -1;\n    } else {\n        let avg = Math.round((n+m)/2);\n        return intToBinary(avg);\n    }\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n};\n\nconsole.log(f(5)); // [1, 2, 6, 6, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "let countEven = 0;\n    let countOdd = 0;\n  \n    for(let i=1;i<=n;i++){\n        if(isPalindrome(i)){\n            if(i%2==0){\n                countEven++;\n            }else{\n                countOdd++;\n            }\n        }\n    }\n    return [countEven,countOdd];\n};\n\nconst isPalindrome = function (n: number) : boolean {\n  let reversed = parseInt(String(n).split(\"\").reverse().join(\"\"));\n  return n === reversed;\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "function move_one_ball(arr: number[]): boolean {\n  let n = arr.length;\n  \n  // Edge case: If array is empty, return true\n  if (n === 0) {\n    return true;\n  }\n\n  // Find minimum element in the array\n  let minElementIndex = arr.indexOf(Math.min(...arr));\n\n  // Calculate distances of each element from the first element\n  let distances: number[] = [];\n  for (let i = 0; i < n; i++) {\n    distances[i] = Math.abs(i - arr.indexOf(arr[i]));\n  }\n\n  // Find minimum distance\n  let minDistance = Math.min(...distances);\n\n  // Check if it is possible to get non-decreasing order by performing right shift operations\n  return minElementIndex <= minDistance;\n}"}
{"task_id": "typescript/50", "language": "typescript", "completion": "function exchange(lst1: Array<number>, lst2: Array<number>) : string  {\n    let exchangeCount = 0;\n    for (let i = 0; i < lst1.length; ++i) {\n        if (lst1[i] % 2 !== 0) { // odd number in lst1\n            let hasEvenNumber = false;\n            for (let j = 0; j < lst2.length; ++j) {\n                if (lst2[j] % 2 === 0) { // even number in lst2\n                    hasEvenNumber = true;\n                    exchangeCount++; // one more exchange needed\n                    break;\n                }\n            }\n            if (!hasEvenNumber) {\n                return \"NO\"; // no even number to exchange with lst1's odd number\n            }\n        }\n    }\n    return `YES, ${exchangeCount} exchanges required`; // all odd numbers in lst1 have even counterparts in lst2\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): [string, boolean] {\n    const deleteChars = new Set(c);\n    let newString = '';\n    for(let char of s) {\n        if (!deleteChars.has(char)) {\n            newString += char;\n        }\n    }\n    \n    let isPalindrome = false;\n    const reversedNewString = newString.split('').reverse().join('');\n    if (newString === reversedNewString) {\n        isPalindrome = true;\n    }\n    \n    return [newString, isPalindrome];\n}"}
{"task_id": "typescript/52", "language": "typescript", "completion": "function max_fill(grid: Array<Array<number>>, capacity: number): number {\n    let count = 0;\n    let totalWells = grid.length * grid[0].length;\n    \n    while (totalWells > 0) {\n        let filled = Math.min(capacity, totalWells);\n        totalWells -= filled;\n        count += Math.ceil(filled / capacity);\n    }\n    \n    return count - 1; // subtract 1 because we overcounted in the while loop condition\n}"}
{"task_id": "typescript/53", "language": "typescript", "completion": "function select_words(s: string, n: number): Array<string> {\n  if (!s) return []; // check if the string is empty and return an empty array if true\n\n  const words = s.split(' '); // split the string into an array of words\n\n  function countConsonants(word: string): number {\n    let consonantCount = 0;\n    const consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    \n    for (let letter of word) {\n        if (consonants.includes(letter)) {\n            consonantCount++;\n        }\n    }\n    return consonantCount;\n  }\n  \n  const selectedWords: Array<string> = [];\n  \n  for (let word of words) {\n      if (countConsonants(word) === n) {\n          selectedWords.push(word);\n      }\n  }\n  \n  return selectedWords;\n}"}
{"task_id": "typescript/54", "language": "typescript", "completion": "function maximum(arr: number[], k: number): number[] {\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    \n    // Return first 'k' elements of the sorted array\n    return arr.slice(0, k);\n}"}
{"task_id": "typescript/55", "language": "typescript", "completion": "let sum=0;\nfor(let i=0;i<k;i++){\n    if(arr[i]>=10 && arr[i]<=99){\n      sum+=arr[i];\n    }\n}\nreturn sum;\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num < 2) return false; // numbers less than 2 are not prime\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) return false; // number is divisible by some number before its square root\n    }\n    return true; // number is prime\n}\n\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    \n    if (start > end) return 'NO'; // no intersection\n    \n    let length = end - start + 1;\n\n    return isPrime(length) ? 'YES' : 'NO';\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "function tri(n: number): Array<number> {\n    // Initialize an array of length n+1 with all elements as -1\n    let arr = new Array<number>(n + 1).fill(-1);\n    \n    // Set first three elements\n    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n  \n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            // For even numbers\n            arr[i] = 1 + i / 2;\n        } else {\n            // For odd numbers\n            arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        }\n    }\n  \n    return arr;\n}"}
{"task_id": "typescript/58", "language": "typescript", "completion": "let numArr = n.toString().split('');\n    let product = 1;\n    for(let i=0;i<numArr.length;i++){\n        if(parseInt(numArr[i]) % 2 !== 0){\n            product *= parseInt(numArr[i]);\n        }\n    }\n    return product === 1 ? 0 : product; // if all digits are even, product will still be 1. So, return 0.\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "function is_nested(s: string): boolean {\n    let stack: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            stack.push(1);\n        } else {\n            if (stack.length > 0) {\n                stack.pop();\n                if (stack.length > 0 && stack[stack.length - 1] === 1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "typescript/60", "language": "typescript", "completion": "let sum = 0;\nfor(let i=0; i < lst.length ; i++){\n    let ceilValue = Math.ceil(lst[i]);\n    sum += Math.pow(ceilValue,2);\n}\nreturn sum;\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "function check_if_last_char_is_a_letter(txt: string): boolean {\n    if (txt === \"\") return false;  // If txt is an empty string, return false.\n    let lastChar = txt[txt.length - 1];\n    let beforeLastChar = txt[txt.length - 2];\n    return ((lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')) && (beforeLastChar === ' ' || beforeLastChar === undefined);\n}"}
{"task_id": "typescript/62", "language": "typescript", "completion": "let largestIndex = -1;\n\nfor(let i=0; i<arr.length-1; i++){\n    if(arr[i] > arr[i+1]){\n        largestIndex = i;\n    }\n}\nreturn largestIndex;\n};\n//Testing the function\nconsole.log(can_arrange([1,2,4,3,5])) //Output: 3\nconsole.log(can_arrange([1,2,3])) //Output: -1"}
{"task_id": "typescript/63", "language": "typescript", "completion": "let maxNeg = null;\n    let minPos = null;\n\n    for(let i=0;i<lst.length;i++) {\n        if(lst[i] < 0 && (maxNeg === null || lst[i] > maxNeg)) {\n            maxNeg = lst[i];\n        } else if(lst[i] > 0 && (minPos === null || lst[i] < minPos)) {\n            minPos = lst[i];\n        }\n    }\n    \n    return [maxNeg, minPos];\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "let fact : number=1;\n    for(let i=1;i<=n;i++){\n        let subfact :number=1;\n        for(let j=1;j<=i;j++){\n            subfact*=j;\n        }\n        fact*=subfact;\n    }\nreturn fact;\n};\nconsole.log(special_factorial(4)); // 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n        if (n % i == 0) return false;\n    return true;\n}\n\nfunction words_in_sentence(sentence: string): string {\n    const words = sentence.split(' ');\n    const primeWords = words.filter((word, _) => isPrime(word.length));\n    return primeWords.join(' ');\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    let [numX, denX] = x.split('/').map(Number);\n    let [numN, denN] = n.split('/').map(Number);\n    \n    // Calculate new numerator and denominator\n    let newNum = numX * numN;\n    let newDen = denX * denN;\n\n    // Check if the fraction is a whole number\n    return newNum % newDen === 0;\n}"}
{"task_id": "typescript/67", "language": "typescript", "completion": "return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc + Math.abs(Number(curr)), 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc + Math.abs(Number(curr)), 0);\n    if (aSum === bSum) {\n        return 0;\n    }\n    return aSum - bSum;\n});\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "let count = 0;\n  \nfor(let i=0; i < nums.length; i++) {\n    if(nums[i] > 10) {\n        let strNum = String(nums[i]);\n        let firstDigit = parseInt(strNum.charAt(0)); \n        let lastDigit = parseInt(strNum.charAt(strNum.length-1)); \n        if(firstDigit % 2 === 1 && lastDigit % 2 === 1) {\n            count++;\n        }\n    }\n}\n  \nreturn count;\n};"}
{"task_id": "typescript/69", "language": "typescript", "completion": "let count = 0;\n    let a: number[] = [];\n    \n    for(let i=1;i<=n;i++)\n        a[i-1] = i * i - i + 1;\n\n    for(let i=0;i<n;i++){\n        for(let j=i+1;j<n;j++){\n            for(let k=j+1;k<n;k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(get_max_triples(5));  // Output: 1\n\nThe function get_max_triples creates an array a with the length equal to input parameter n, and fills it according to formula i * i - i + 1. Then it counts triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3."}
{"task_id": "typescript/70", "language": "typescript", "completion": "type Planet = \"Mercury\" | \"Venus\" | \"Earth\" | \"Mars\" | \"Jupiter\" | \"Saturn\" | \"Uranus\" | \"Neptune\";\n\nconst planetsOrder: Planet[] = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction betweenFarthestPlanets(planet1: Planet, planet2: Planet): Planet[] {\n    const index1 = planetsOrder.indexOf(planet1);\n    const index2 = planetsOrder.indexOf(planet2);\n    \n    if (index1 === -1 || index2 === -1) {\n        return []; // If either planet is not correct, return empty array\n    } \n    \n    let startIndex: number;\n    let endIndex: number;\n  \n    if (index1 < index2) {\n      startIndex = index1 + 1;\n      endIndex = index2 - 1;\n    } else {\n      startIndex = index2 + 1;\n      endIndex = index1 - 1;\n    }\n  \n    return planetsOrder.slice(startIndex, endIndex + 1);\n}"}
{"task_id": "typescript/71", "language": "typescript", "completion": "let isPrime: boolean = true;\n    if (n <= 1) {\n        isPrime = false;\n    } else if (n === 2) {\n        isPrime = true;\n    } else {\n        for (let i = 2; i < n; i++) {\n            if (n % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n    }\n    return isPrime ? x : y;\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "let sum = 0;\n    for(let i=0;i<lst.length;i++){\n      if(lst[i] > 0 && lst[i] % 1 === 0 && lst[i] % 2 !== 0){\n        sum += Math.pow(lst[i], 2);\n      }\n    }\n    return sum;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "function Strongest_Extension(class_name: string, extensions: Array<string>): string {\n    let strongestExt = '';\n    let strongestValue = -Infinity;\n    \n    extensions.forEach((ext) => {\n        const cap = [...ext].filter(x => x === x.toUpperCase()).length;\n        const sm = [...ext].filter(x => x === x.toLowerCase()).length;\n        const strength = cap - sm;\n        \n        if (strength > strongestValue) {\n            strongestExt = ext;\n            strongestValue = strength;\n        }\n    });\n    \n    return `${class_name}.${strongestExt}`;\n}"}
{"task_id": "typescript/74", "language": "typescript", "completion": "if(b.length > a.length){\n        return false;\n    }\n    \n    for(let i=0;i<b.length;i++){\n        let pattern = b.slice(i)+b.slice(0,i);\n        if(a.includes(pattern)){\n            return true;\n        }\n    }\n    return false;\n};\n\nconsole.log(cycpattern_check(\"abcd\",\"abd\")); // False\nconsole.log(cycpattern_check(\"hello\",\"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\",\"psus\")); // False\nconsole.log(cycpattern_check(\"abab\",\"baa\")); // True\nconsole.log(cycpattern_check(\"efef\",\"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\",\"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "let numbers = [1,4,5,9,10,40,50,90,100,400,500,900,1000];\n    let romans = ['i','iv','v','ix','x','xl','l','xc','c','cd','d','cm','m'];\n    let pos = numbers.length-1;\n    let result = '';\n    \n    while(number0>0){\n        if(number0>=numbers[pos]){\n            number0 -= numbers[pos];\n            result += romans[pos];\n        }else{\n            pos--;\n        }\n    }\n    return result;\n}"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,b) => a - b); // sort the array in ascending order\n    \n    return Math.abs(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) - Math.pow(sides[2], 2)) < 0.001;\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "function solve(s: string): string {\n    let hasLetter = false;\n    let result = '';\n  \n    for (let i = 0; i < s.length; i++) {\n      if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n        hasLetter = true;\n        result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n      } else {\n        result += s[i];\n      }\n    }\n  \n    return hasLetter ? result : result.split('').reverse().join('');\n}"}
{"task_id": "typescript/78", "language": "typescript", "completion": "npm install crypto-js"}
{"task_id": "typescript/79", "language": "typescript", "completion": "function generate_integers(a: number, b: number): Array<number> {\n    let lowerLimit: number;\n    let upperLimit: number;\n  \n    if (a < b) {\n        lowerLimit = a;\n        upperLimit = b;\n    } else {\n        lowerLimit = b;\n        upperLimit = a;\n    } \n\n    const resultSet: Set<number> = new Set();\n\n    for(let i=lowerLimit; i<=upperLimit; i++) {\n        let num = i.toString();\n        for (let j = 0; j < num.length; j++){\n            let digit = parseInt(num[j]);\n            if(digit % 2 === 0){\n                resultSet.add(digit);\n            }\n        }\n    }\n  \n    return Array.from(resultSet).sort((a, b) => a - b);\n}"}

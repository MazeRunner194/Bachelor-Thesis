{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0.0\n\n    for (operation in operations) {\n        if (operation is Number) {\n            balance += operation.toDouble()\n            if (balance < 0) return true\n        }\n    }\n\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "var sum = 0\n    var product = 1\n\n    for (number in numbers) {\n        if (number is Int) {\n            sum += number\n            product *= number\n        }\n    }\n\n    return listOf(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    // check if both strings are of same length\n    require(a.length == b.length) { \"Strings should be of the same length\" }\n\n    val result = StringBuilder()\n    \n    for (i in a.indices) {\n        result.append((a[i] != b[i]).toString().first())\n    }\n\n    return result.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<String>): String? {\n    if (strings.isEmpty()) return null\n\n    var longestString = strings[0]\n    for (string in strings) {\n        if (string.length > longestString.length) {\n            longestString = string\n        }\n    }\n    \n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a : Int, b : Int) : Int {\n    var a = a\n    var b = b\n    while (b != 0) {\n        val temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numList = numbers.split(\" \") // Splitting the string into list\n    val numMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    numList.sortWith(compareBy { numMap[it] }) // Sorting the list\n    return numList.joinToString(\" \") // Joining back into a string\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers : List<Double>) : List<Double> {\n    val min = numbers.min() ?: throw IllegalArgumentException(\"List must not be empty\")\n    val max = numbers.max() ?: throw IllegalArgumentException(\"List must not be empty\")\n    \n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String = string.map { char ->\n    if (char.isUpperCase()) char.toLowerCase() else char.toUpperCase()\n}.joinToString(\"\")"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l : List<Int>) : List<Int> {\n    return l.filter { it > 0 }\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n : Int) : Boolean {\n    if (n < 2) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l : List<Int>) : List<Int> = l.distinct().sorted()"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "// Helper function to check if a number is prime\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var fib1 = 1\n    var fib2 = 2\n    var nextFib = 0\n    while (count < n) {\n        if (isPrime(fib2)) count++\n        nextFib = fib1 + fib2\n        fib1 = fib2\n        fib2 = nextFib\n    }\n    return fib2\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    val list = l.sorted()\n    for (i in 0 until list.size - 2) {\n        if (i > 0 && list[i] == list[i - 1]) continue; // Skip same elements to avoid duplicates\n        val twoSum = -list[i]\n        var j = i + 1\n        var k = list.size - 1\n        while (j < k) {\n            if (list[j] + list[k] > twoSum) {\n                // If the sum is greater than twoSum, we need to decrease it by moving j to right\n                k -= 1\n            } else if (list[j] + list[k] < twoSum) {\n                // If the sum is less than twoSum, we need to increase it by moving k to left\n                j += 1\n            } else {\n                // We found three elements that sum to zero\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = HashSet<Int>()\n    for (num in l) {\n        if (seen.contains(-num)) {\n            return true\n        } else {\n            seen.add(num)\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n : Int) : Int {\n    if (n < 0) throw IllegalArgumentException(\"N must be greater or equal to 0\")\n    \n    // Initialize base cases\n    val baseCases = intArrayOf(0, 0, 2, 0)\n    \n    // If n is smaller than 4 return the base case value\n    if (n < 4) return baseCases[n]\n    \n    // Initialize array for dynamic programming with the base cases\n    val fibNums = IntArray(n + 1) { 0 }\n    System.arraycopy(baseCases, 0, fibNums, 0, baseCases.size)\n\n    for (i in 4..n) {\n        fibNums[i] = fibNums[i - 1] + fibNums[i - 2] + fibNums[i - 3] + fibNums[i - 4]\n    }\n\n    return fibNums[n]\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l : List<Int>): Double {\n    val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[sortedList.size / 2 - 1] + sortedList[sortedList.size / 2]) / 2.0\n    } else {\n        sortedList[sortedList.size / 2].toDouble()\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val length = text.length\n    for (i in 0 until length / 2) {\n        if (text[i] != text[length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U') \n    return text.filterNot { it in vowels }.toString()\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "for (num in l) {\n        if (num >= t) {\n            return false\n        }\n    }\n    return true\n}\n\nfun main() {\n    print(belowThreshold(listOf(1, 2, 4, 10), 100)) // True\n    print(belowThreshold(listOf(1, 20, 4, 10), 5)) // False\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0 : String, s1 : String) : Boolean {\n    return s0.toSet() == s1.toSet()\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    return if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1 : List<Int>, l2 : List<Any>) : List<Any> {\n    // Convert lists to sets because set operations are more efficient \n    val set1 = l1.toHashSet()\n    val set2 = l2.filter { it is Int }.toHashSet()  // Keep only the Int elements from the second list\n\n    // Retain only common elements in both sets\n    set1.retainAll(set2)\n\n    // Return sorted unique common elements\n    return set1.sorted()\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var divisor = 2\n    \n    while (num != 1) {\n        if (num % divisor == 0) {\n            num /= divisor\n            while (num % divisor == 0) {\n                num /= divisor\n            }\n        } else {\n            divisor++\n        }\n    }\n    \n    return divisor\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "return n * (n + 1) / 2\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs : List<Int>) : List<Int> {\n    // Create an empty list for storing derivatives\n    val deriv = mutableListOf<Int>()\n    \n    // Iterate over the coefficients starting from the 1st index (as we skip the first coefficient)\n    for(i in 1 until xs.size){\n        // Add the derivative coefficient to the list\n        deriv.add(xs[i] * i)\n    }\n    return deriv\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "var cache = IntArray(3) { 0 }\n\nfun fibfib(n: Int): Int {\n    if (n == 0 || n == 1) return 0\n    else if (n == 2) return 1\n\n    for (i in 3..n) {\n        cache[i % 3] = cache[(i - 1) % 3] + cache[(i - 2) % 3] + cache[(i - 3) % 3]\n    }\n    return cache[n % 3]\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "var count = 0 \n    s.toLowerCase().forEach{ c ->\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n            count++\n        } else if(c == 'y') {\n            if(s[s.length-1] == 'y'){\n                count++\n            }\n        } \n    }\n    return count \n}\n\nfun main() {\n    println(vowelsCount(\"abcde\")) //prints: 2\n    println(vowelsCount(\"ACEDY\")) //prints: 3\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    val frequencyMap = mutableMapOf<Int, Int>()\n    \n    // Store each value and its frequency in the map\n    for (num in lst) {\n        if (frequencyMap.containsKey(num)) {\n            frequencyMap[num] = frequencyMap[num]!! + 1\n        } else {\n            frequencyMap[num] = 1\n        }\n    }\n    \n    // Iterate through the list in descending order and check if the current number's frequency meets the condition\n    for (num in lst.distinct().sortedDescending()) {\n        if (frequencyMap[num]!! >= num) {\n            return num\n        }\n    }\n    \n    // If no such number found, return -1\n    return -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "import kotlin.math.sqrt\n\nfun triangle_area(a: Int, b: Int, c: Int): Any {\n    if (a + b > c && a + c > b && b + c > a) {\n        val s = (a + b + c).toFloat() / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return String.format(\"%.2f\", area)\n    } else {\n        return -1\n    }\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list is balanced (i.e., it is a palindromic list)\n    val isBalanced = q == q.reversed()\n\n    // Check if the sum of its elements is less than or equal to the maximum possible weight\n    val isWithinWeightLimit = q.sum() <= w\n\n    return isBalanced && isWithinWeightLimit\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    // helper function to check if a number is prime\n    fun isPrime(n: Int) : Boolean{\n        if (n < 2) return false\n        for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n    \n    // check all possible factors of a\n    for (i in 2..a/3) {   // we know that a must be divisible by at least one number less than or equal to sqrt(a), so we start from 2\n        if (a % i == 0 && isPrime(i) && isPrime(a / i)) {\n            return true    // this means a can be factored by three prime numbers: 1, i and a/i\n        }\n    }\n    \n    return false   // if there's no such factor found, then a can't be the multiplication of 3 primes.\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal : Int) : String {\n    // Convert decimal to binary using built-in function\n    val binary = decimal.toString(2).toUpperCase()\n    \n    // Add prefix and suffix around the binary string and return the result\n    return \"db$binary\" + \"db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "if (s.length < 3) return false\n    for (i in 0..s.length-3) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false\n    }\n    return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalToLetterGrade(grades : List<Double>) : List<String> {\n    return grades.map { grade ->\n        when {\n            grade == 4.0 -> \"A+\"\n            grade > 3.7 -> \"A\"\n            grade > 3.3 -> \"A-\"\n            grade > 3.0 -> \"B+\"\n            grade > 2.7 -> \"B\"\n            grade > 2.3 -> \"B-\"\n            grade > 2.0 -> \"C+\"\n            grade > 1.7 -> \"C\"\n            grade > 1.3 -> \"C-\"\n            grade > 1.0 -> \"D+\"\n            grade > 0.7 -> \"D\"\n            grade > 0.0 -> \"D-\"\n            else -> \"E\"\n        }\n    }\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val len = string.length\n    if (len <= 1) return false\n    for (i in 2..len / 2) {\n        if (len % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(N: Int): String {\n    var num = N\n    var sumOfDigits = 0\n    while (num > 0) {\n        sumOfDigits += num % 10\n        num /= 10\n    }\n    return Integer.toBinaryString(sumOfDigits)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "val result = mutableListOf<Pair<Int, Int>>()\n\n    for ((rowIndex, row) in lst.withIndex()) {\n        if (row is List<*>) {\n            for ((colIndex, colValue) in row.reversed().withIndex()) {\n                if (colValue == x) {\n                    result.add(Pair(rowIndex, colValue as Int))\n                }\n            }\n        } else {\n            if (row == x) {\n                result.add(Pair(-1, row)) // Adds a special pair to indicate this value is not from sub-list but from main list \n            }\n        }\n    }\n\n    return result.sortedBy { it.first * 100 + it.second } // Sorts based on the given conditions\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Int>): Int? {\n    if (lst.size < 2) return null\n\n    val sorted = lst.distinct().sorted()\n    \n    return if (sorted.size < 2) null else sorted[1]\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    val sentences = s.split('.', '?', '!')\n    var boredomCount = 0\n\n    for (sentence in sentences) {\n        if (sentence.trim().startsWith(\"I\", ignoreCase = true)) {\n            boredomCount++\n        }\n    }\n\n    return boredomCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun findLargestPrimeAndSumDigits(lst: List<Int>): Int {\n    var largestPrime = -1\n    for (num in lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num\n        }\n    }\n    if (largestPrime == -1) return 0 // if no prime numbers found, returns 0\n    var sum = 0\n    while (largestPrime != 0) {\n        sum += largestPrime % 10\n        largestPrime /= 10\n    }\n    return sum\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "if (dict.isEmpty()) {\n        return false\n    }\n\n    val allLower = dict.keys.all { it is String && it == it.lowercase() }\n    val allUpper = dict.keys.all { it is String && it == it.uppercase() }\n\n    return allLower || allUpper\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    return if (number >= 0) {\n        floor(number).toInt() + if (number - floor(number) < 0.5) 0 else 1\n    } else {\n        ceil(number).toInt() - if (abs(number - ceil(number)) < 0.5) 0 else 1\n    }\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> = List(n) { index ->\n    if (n % 2 == 0) {\n        n - index\n    } else {\n        n + index\n    }\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "import java.util.ArrayList\n\nfun wordsString(s: String): List<String> {\n    val delimiters = charArrayOf(',', ' ')\n    return s.split(*delimiters)\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    if (y < x) return -1 // If y is less than x, there are no suitable numbers in the range\n\n    // Start checking from y down to x (inclusive)\n    for (i in y downTo x step 2) {\n        if (i % 2 == 0) return i // If it's even, return this number\n    }\n    \n    return -1 // If no suitable numbers were found, return -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "if (n > m) {\n        return -1\n    }\n\n    val avg = (n..m).average().toInt()\n    var binary = avg.toString(2)\n\n    // Add '0b' to the front of binary string to indicate it's a binary number\n    binary = \"0b$binary\"\n\n    return binary\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    return (1..n).mapIndexed { index, i ->\n        if (index % 2 == 0) factorial(i) else sum(i)\n    }\n}\n\nprivate fun factorial(n: Int): Int {\n    return (1..n).reduce { a, b -> a * b }\n}\n\nprivate fun sum(n: Int): Int {\n    return (1..n).sum()\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n : Int) : List<Int> {\n    var even = 0\n    var odd = 0\n    for (i in 1..n){\n        if (isPalindrome(i)){\n            if (i % 2 == 0){\n                even++\n            }else{\n                odd++\n            }\n        }\n    }\n    return listOf(even, odd)\n}\n\nfun isPalindrome(n: Int): Boolean {\n    var reversed = 0\n    var original = n\n    while (original > 0){\n        reversed = reversed * 10 + original % 10\n        original /= 10\n    }\n    return reversed == n\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.size <= 1) return true // If size is 0 or 1, then it's already sorted\n    \n    // Find the first pair of out-of-order elements\n    var i = 1\n    while(i < arr.size && arr[i] >= arr[i - 1]) {\n        i++\n    }\n\n    if (i == arr.size) return true // If no pair found, then already sorted\n    \n    // If the first element of the array is greater than the last element after the first pair out-of-order\n    // then it's possible to rotate and make it non-decreasing\n    return arr[0] >= arr[i]\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    val evenCountLst1 = lst1.count { it % 2 == 0 }\n    val oddCountLst2 = lst2.count { it % 2 != 0 }\n    \n    return if (evenCountLst1 + oddCountLst2 >= lst1.size) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    // First we create a set from characters of string `c` to have O(1) complexity for checking existence \n    val deleteSet = c.toSet()\n    // Then we filter out those characters in string `s` that exist in the set\n    val resultString = s.filterNot { it in deleteSet }\n    // Next we check if string `resultString` is a palindrome\n    val isPalindrome = resultString == resultString.reversed()\n    // Finally, we return a list containing the result string and Boolean value indicating whether it's a palindrome\n    return listOf(resultString, isPalindrome)\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n    var fills = 0\n    for (row in grid) {\n        val rowSum = row.sum()\n        fills += (rowSum + capacity - 1) / capacity // integer division\n    }\n    return fills\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    // Split the string into words\n    val words = s.split(\" \")\n\n    // Filter out the words that contain exactly n consonants\n    return words.filter { word -> countConsonants(word) == n }\n}\n\n// Helper function to count the number of consonants in a string\nfun countConsonants(s: String): Int {\n    val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return s.count { c -> c in consonants }\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    return arr.sortedDescending().take(k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    var sum = 0\n    for (i in 0 until k) {\n        if (arr[i] >= 10 && arr[i] <= 99) { // checks if number has two digits maximum\n            sum += arr[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2 || n == 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n        for (i in 5..sqrt(n.toDouble()).toInt() step 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false\n        }\n    return true\n}\n\nfun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n    if (start > end) return \"NO\" // no intersection\n    val length = end - start + 1\n    return if (isPrime(length)) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n : Int): List<Int> {\n    if (n < 0) throw IllegalArgumentException(\"n must be non-negative\")\n\n    val result = mutableListOf<Int>()\n    result.add(1) // tri(0) = 1\n    if (n == 0) return result\n    \n    result.add(3) // tri(1) = 3\n    if (n == 1) return result\n\n    for (i in 2..n) {\n        val value = if (i % 2 == 0) 1 + i / 2 else result[result.size - 1] + result[result.size - 2] + result[result.size - 3]\n        result.add(value)\n    }\n    return result\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var product = 1\n    var isFirstDigit = true\n    while (n > 0) {\n        val currentDigit = n % 10\n        if (currentDigit % 2 != 0) {\n            if (!isFirstDigit) {\n                product *= currentDigit\n            } else {\n                product = currentDigit\n                isFirstDigit = false\n            }\n        }\n        n /= 10\n    }\n    return if (isFirstDigit) 0 else product\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var openBrackets = 0\n    for (c in string) {\n        if (c == '[') {\n            openBrackets++\n            if (openBrackets > 1) return true\n        } else if (c == ']') {\n            openBrackets--\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst : List<Any>): Int {\n    var result = 0\n    for (item in lst) {\n        if (item is Number) {\n            val ceilValue = Math.ceil(item.toDouble())\n            result += ceilValue * ceilValue\n        } else {\n            throw IllegalArgumentException(\"List contains non-number element: $item\")\n        }\n    }\n    return result\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "if (txt.isEmpty() || txt.last() == ' ') {\n        return false\n    }\n\n    for (i in txt.length - 2 downTo 0) {\n        if (txt[i] == ' ') {\n            return txt.last().isLetter()\n        }\n    }\n\n    return txt.last().isLetter()\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Int>): Int {\n    var maxIdx = -1\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            maxIdx = i\n        }\n    }\n    return maxIdx\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst : List<Any>) : List<Int?> {\n    var maxNegative: Int? = null\n    var minPositive: Int? = null\n\n    for (element in lst) {\n        if (element is Int) {\n            if (element < 0 && (maxNegative == null || element > maxNegative)) {\n                maxNegative = element\n            } else if (element > 0 && (minPositive == null || element < minPositive)) {\n                minPositive = element\n            }\n        }\n    }\n    return listOf(maxNegative, minPositive)\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    return if (n <= 0) {\n        1\n    } else {\n        n * specialFactorial(n - 1)\n    }\n}\n\n// Then you can call this function with the desired number\nprintln(specialFactorial(4)) // prints: 288"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    val words = sentence.split(\" \")\n    var result = \"\"\n    for (word in words) {\n        if (isPrime(word.length)) {\n            result += \"$word \"\n        }\n    }\n    return result.trim()\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    val xParts = x.split(\"/\").map { it.toInt() }\n    val nParts = n.split(\"/\").map { it.toInt() }\n\n    val result = (xParts[0] * nParts[1]) / (xParts[1] * nParts[0])\n\n    return result == 1\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "data class NumWithDigitSum(val num: Int, val digitSum: Int)\n\nfun orderByPoints(nums : List<Any>) : List<Any> {\n    // Create a list of NumWithDigitSum instances\n    val numsWithDigitSum = nums.mapIndexed { index, any ->\n        if (any is Int) {\n            NumWithDigitSum(any, any.toString().toCharArray().sumOf { it.toString().toInt()))\n        } else {\n            throw IllegalArgumentException(\"List must contain only integers\")\n        }\n    }\n\n    // Sort the list by digitSum and then by index\n    numsWithDigitSum.sortedWith(compareBy({ it.digitSum }, { it.num })).map{ it.num }\n}\n\nfun main() {\n    println(order_by_points(listOf(1, 11, -1, -11, -12))) // [-1, -11, 1, -12, 11]\n    println(order_by_points(emptyList<Int>())) // []\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(numbers: List<Int>): Int {\n    return numbers.count {\n        it > 10 &&\n                it.toString().first().toInt() % 2 == 1 &&\n                it.toString().last().toInt() % 2 == 1\n    }\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    val a = Array(n) { i -> i*i - i + 1 }\n    var count = 0\n\n    for (i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "fun bf(planet1 : String, planet2 : String) : List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    val posPlanet1 = planets.indexOf(planet1)\n    val posPlanet2 = planets.indexOf(planet2)\n\n    if (posPlanet1 == -1 || posPlanet2 == -1 || posPlanet1 >= posPlanet2) {\n        return emptyList()  // Invalid planet names or order\n    }\n\n    return planets.subList(posPlanet1 + 1, posPlanet2)\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..n/2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun xOrY(n: Int, x: Int, y: Int): Int = if (isPrime(n)) x else y"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filter { it is Int && it % 2 != 0 && it >= 0 }.map { it * it }.sum()\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var maxStrength = Double.MIN_VALUE\n    var strongestExt = \"\"\n    for (ext in extensions) {\n        val upperCaseCount = ext.count { it.isUpperCase() }\n        val lowerCaseCount = ext.count { it.isLowerCase() }\n        val strength = upperCaseCount - lowerCaseCount\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExt = ext\n        }\n    }\n    return \"$className.$strongestExt\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    if (b.length > a.length) return false\n    for (i in 0 until b.length) {\n        val rotated = b.substring(i) + b.substring(0, i)\n        if (a.contains(rotated)) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(num: Int): String {\n    val symbol = arrayOf(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n    val value = intArrayOf(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    var roman = \"\"\n    var i = 0\n    while (i < value.size && num > 0) {\n        while (num >= value[i]) {\n            num -= value[i]\n            roman += symbol[i]\n        }\n        i++\n    }\n    return roman\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    val sides = listOf(a, b, c).sorted()\n    return Math.pow(sides[0].toDouble(), 2) + Math.pow(sides[1].toDouble(), 2) == Math.pow(sides[2].toDouble(), 2)\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    if (s.isEmpty()) return \"\"\n    \n    var containsLetters = false\n    for (char in s) {\n        if (char.isLetter()) {\n            containsLetters = true\n            break\n        }\n    }\n    \n    val result = StringBuilder()\n    for (char in s) {\n        if (containsLetters && char.isLetter()) {\n            result.append(if (char.isUpperCase()) char.toLowerCase() else char.toUpperCase())\n        } else {\n            result.append(char)\n        }\n    }\n    \n    return if (!containsLetters) result.reverse().toString() else result.toString()\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "// Import necessary class from java library\n    import java.security.MessageDigest\n    import java.security.NoSuchAlgorithmException\n\n    // Throw an exception if MD5 is not supported \n    val md = MessageDigest.getInstance(\"MD5\")\n\n    // Update the MD5 digest with the bytes of the input string\n    md.update(text.toByteArray())\n\n    // Get the hexadecimal representation of the digest\n    val digest = md.digest()\n    var result = \"\"\n    for (byte : Byte in digest) {\n        result += Integer.toHexString((byte.toInt() and 0xff) + 0x100).substring(1)\n    }\n\n    // Return the generated hash as a string\n    return result"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val from = Math.min(a, b)\n    val to = Math.max(a, b)\n    val result = mutableListOf<Int>()\n    for (i in from..to) {\n        val digits = i.toString().toCharArray()\n        for (digit in digits) {\n            val number = digit.toString().toIntOrNull()\n            if (number != null && number % 2 == 0) {\n                result.add(number)\n            }\n        }\n    }\n    return result.sorted()\n}"}

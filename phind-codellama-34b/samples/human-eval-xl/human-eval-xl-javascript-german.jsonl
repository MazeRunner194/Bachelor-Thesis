{"task_id": "javascript/0", "language": "javascript", "completion": "let balance = 0;\n  \n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    \n    if (balance < 0) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return (sum, product);\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "def string_xor(a, b):\n    res = []\n    for i in range(len(a)):\n        res.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(res)\n\nprint(string_xor('010', '110'))  # Output: 100"}
{"task_id": "javascript/3", "language": "javascript", "completion": "let longestString = null;\n  for (let i = 0; i < strings.length; i++) {\n    if (!longestString || strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n\nconsole.log(longest([]));\nconsole.log(longest(['a', 'b', 'c']));\nconsole.log(longest(['a', 'bb', 'ccc']));"}
{"task_id": "javascript/4", "language": "javascript", "completion": "while (b !== 0){\n    let temp = b;\n    b = a % b;\n    a = temp;\n}\nreturn a;\n}\nconsole.log(greatestCommonDivisor(3,5)); // 1\nconsole.log(greatestCommonDivisor(25,15)); // 5"}
{"task_id": "javascript/5", "language": "javascript", "completion": "def sort_numbers(numbers):\n    num_dict = {'null': 0, 'eins': 1, 'zwei': 2, 'drei': 3, 'vier': 4, 'f\u00fcnf': 5, 'sechs': 6, 'sieben': 7, 'acht': 8, 'neun': 9}\n    num_list = numbers.split()\n    sorted_nums = [i for i in sorted(num_list, key=lambda x: num_dict[x])]\n    return ' '.join(sorted_nums)"}
{"task_id": "javascript/6", "language": "javascript", "completion": "// Implement the function here\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n    var range = max - min;\n\n    return numbers.map(num => (num - min) / range);\n}\n\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0, 0.25, 0.5, 0.75, 1]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(str) {\n    let result = '';\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === str[i].toLowerCase()) {\n            result += str[i].toUpperCase();\n        } else {\n            result += str[i].toLowerCase();\n        }\n    }\n    return result;\n}\nconsole.log(flipCase('Hello')); // Outputs 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "let positiveNums = l.filter(num => num > 0);\n    return positiveNums;\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "if (n < 2) {\n    return false;\n}\nfor (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n        return false;\n    }\n}\nreturn true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "let result = [];\n  for (let i of l) {\n    if (!result.includes(i)) {\n      result.push(i);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "def check_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef fibo_seq(n):\n    fib_seq = [0, 1]\n    while len(fib_seq) < n + 2:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[n]\n\ndef prime_fib(n):\n    count = 0\n    i = 1\n    while count < n:\n        if check_prime(fibo_seq(i)):\n            count += 1\n        i += 1\n    return fibo_seq(i - 1)"}
{"task_id": "javascript/12", "language": "javascript", "completion": "def triples_sum_to_zero(l):\n    l = sorted(set(l))\n    for i in range(len(l) - 1):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "def pairs_sum_to_zero(lst):\n    return -5 in lst or 0 in lst and 5 not in lst"}
{"task_id": "javascript/14", "language": "javascript", "completion": "let dp = [0, 0, 2, 0];\n    if (n < 4) return dp[n];\n    for (let i = 4; i <= n; i++) {\n        let next = dp[3] + dp[2] + dp[1] + dp[0];\n        dp[0] = dp[1];\n        dp[1] = dp[2];\n        dp[2] = dp[3];\n        dp[3] = next;\n    }\n    return dp[3];\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l){\n    const sorted = l.slice().sort((a,b)=>a-b);\n    const middle = Math.floor(sorted.length / 2);\n\n    // If the length of the array is even, return the average of the two middle numbers\n    if (sorted.length % 2 === 0) {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n    // If the length of the array is odd, return the middle number\n    else {\n        return sorted[middle];\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "const reversedText = text.split(\"\").reverse().join(\"\");\n  return text === reversedText;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function remove_vowels(text) {\n    return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "def same_chars(s0, s1):\n    return sorted(s0) == sorted(s1)\n\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))  # True\nprint(same_chars('dddddddabc', 'abcd'))  # True\nprint(same_chars('eabcd', 'dddddddabc'))  # False\nprint(same_chars('abcd', 'dddddddabce'))  # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "if (n <= 1) return n;\n  else return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function gcd(a, b){\n    if (b == 0){\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nfunction largestPrimeFactor(n) {\n    let divisor = 2;\n    while (divisor * divisor <= n){\n        if (n % divisor == 0){\n            n /= divisor;\n        }\n        else{\n            divisor++;\n        }\n    }\n    return n;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "let sum = 0;\nfor (let i = 1; i <= n; i++) {\n    sum += i;\n}\nreturn sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    // Create an empty array to hold the derivatives\n    let derivatives = [];\n  \n    // Loop through the coefficients starting from the second one\n    for (let i = 1; i < xs.length; i++) {\n      // Calculate the derivative by multiplying the current coefficient by its index\n      derivatives.push(xs[i] * i);\n    }\n  \n    // Return the array of derivatives\n    return derivatives;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "if (n === 0) {\n        return 0;\n    }\n    if (n === 1 || n === 2) {\n        return 1;\n    }\n    \n    let a = 0, b = 1, c = 1;\n    for(let i=3;i<=n;i++){\n        [a, b, c] = [b, c, a + b + c];\n    }\n    \n    return c;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "let count = 0;\n    const vowels = 'aeiouAEIOU';\n    \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    \n    if (s.endsWith('y') || s.endsWith('Y')) {\n        count++;\n    }\n    \n    return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst){\n    let counts = {};\n    // Count frequency of each number in list\n    for(let num of lst){\n        if(counts[num]){\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    // Find the maximum number that satisfies condition\n    let maxNum = -1;\n    for(let num in counts){\n        if(counts[num] >= num && num > maxNum){\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "// sort the sides so that a is the longest side (c) and b is the second longest (b), if necessary\nif (a < b) {\n  let temp = a;\n  a = b;\n  b = temp;\n}\nif (a < c) {\n  let temp = a;\n  a = c;\n  c = temp;\n}\nif (b > c) {\n  let temp = b;\n  b = c;\n  c = temp;\n}\n\n// check if the input forms a valid triangle\nif (a + b <= c || a + c <= b || b + c <= a) {\n  return -1;\n}\n\n// calculate the semi-perimeter\nlet s = (a + b + c) / 2;\n\n// calculate the area using Heron's formula\nlet area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\nreturn Math.round(area * 100) / 100; // round to 2 decimal places\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "let weightSum = q.reduce((a, b) => a + b, 0);\n    let isBalanced = q.toString() === q.reverse().toString();\n    \n    if (weightSum <= w && isBalanced) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(willItFly([1, 2], 5));  // False \nconsole.log(willItFly([3, 2, 3], 1));  // False\nconsole.log(willItFly([3, 2, 3], 9));  // True\nconsole.log(willItFly([3], 5));  // True"}
{"task_id": "javascript/31", "language": "javascript", "completion": "let factors = [2, 3, 5, 7];\n\n    for (let i = 0; i < factors.length; i++) {\n        for (let j = i; j < factors.length; j++) {\n            if(factors[i] * factors[j] === a){\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "let binary = (decimal).toString(2); // convert decimal to binary\n    return 'db' + binary.padStart(4, '0') + 'db'; // pad with 0s and add \"db\" prefix and suffix"}
{"task_id": "javascript/33", "language": "javascript", "completion": "if (s.length < 3) return false;\n    for (let i = 0; i <= s.length - 3; i++) {\n        if (s[i] === s[i + 1] && s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "let result = [];\n  \n  grades.forEach((grade) => {\n    if (grade == 4.0) result.push(\"A+\");\n    else if (grade > 3.7) result.push(\"A\");\n    else if (grade > 3.3) result.push(\"A-\");\n    else if (grade > 3.0) result.push(\"B+\");\n    else if (grade > 2.7) result.push(\"B\");\n    else if (grade > 2.3) result.push(\"B-\");\n    else if (grade > 2.0) result.push(\"C+\");\n    else if (grade > 1.7) result.push(\"C\");\n    else if (grade > 1.3) result.push(\"C-\");\n    else if (grade > 1.0) result.push(\"D+\");\n    else if (grade > 0.7) result.push(\"D\");\n    else if (grade > 0.0) result.push(\"D-\");\n    else result.push(\"E\");\n  });\n  \n  return result;\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "// Helper function to check if the number is prime\nfunction isPrime(num) {\n    if (num < 2) return false; // numbers less than 2 are not prime\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) \n        if (num % i === 0) return false; // number has a divisor in range 2 to sqrt(num)\n    return true; // this point is only reached if num is prime\n} \n\n// Main function to check if the length of a string is prime\nfunction primeLength(string) {\n    const len = string.length;\n    return isPrime(len);\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(N){\n    // convert number to string to easily access digits\n    let str = N.toString();\n    let sum = 0;\n    \n    // iterate over each digit in the string\n    for(let i=0;i<str.length;i++){\n        // add the binary equivalent of the digit to the sum\n        sum += parseInt(str[i], 10);\n    }\n\n    // return the sum in binary format\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "def get_row(lst, x):\n    coordinates = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                coordinates.append((row_idx, len(row) - col_idx - 1))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) { // If list has less than two elements, return None\n        return null;\n    }\n    let min = Math.min(...lst); // Find smallest number in the list\n    lst = lst.filter((num) => num !== min); // Remove smallest number from the list\n    if (lst.length === 0) { // If list becomes empty, return None\n        return null;\n    }\n    let nextMin = Math.min(...lst); // Find smallest number in the remaining list\n    return nextMin;\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "let count = 0;\n    let sentences = s.split(/[.!?]/);\n    for (let i = 0; i < sentences.length; i++) {\n        if (sentences[i].trim().startsWith(\"Ich\")) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "def is_prime(n):\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\ndef sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)])\n\ndef max_prime_and_sum(lst):\n    prime_values = [val for val in lst if is_prime(val)]\n    if len(prime_values) == 0:\n        return 0\n    else:\n        max_prime = max(prime_values)\n        return sum_of_digits(max_prime)"}
{"task_id": "javascript/41", "language": "javascript", "completion": "let allLower = true;\n  let allUpper = true;\n  \n  for (let key in dict){\n    if (typeof key !== 'string'){\n      return false;\n    }\n    if (key !== key.toLowerCase()){\n      allLower = false;\n    }\n    if (key !== key.toUpperCase()){\n      allUpper = false;\n    }\n  }\n  if ((allLower === true) || (allUpper === true)){\n    return true;\n  } else {\n    return false;\n  } \n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "let num = parseFloat(value);\n    let floorVal = Math.floor(num);\n    let ceilVal = Math.ceil(num);\n    \n    if (num - floorVal < ceilVal - num)\n        return floorVal;\n    else\n        return ceilVal;\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "def makeAPile(n):\n    result = []\n    while n > 0:\n        result.append(n)\n        if n % 2 == 0: # even number of stones\n            n += 1   # next odd number of stones\n        else:         # odd number of stones\n            n -= 1   # next even number of stones\n    return result[::-1]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    return s.split(/[ ,]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y){\n    if (y < x){\n        return -1;\n    }\n    else{\n        if (y % 2 === 0){\n            return y;\n        }\n        else{\n            return y-1;\n        }\n    }\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "def roundedAvg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    binary_avg = bin(avg)[2:]\n    return binary_avg\n\nprint(roundedAvg(1, 5))  # Output: \"0b11\"\nprint(roundedAvg(7, 5))  # Output: -1\nprint(roundedAvg(10, 20))  # Output: \"0b1111\"\nprint(roundedAvg(20, 33))  # Output: \"0b11010\""}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n){\n    let result = [];\n    \n    for (let i=0; i<n; i++){\n        if (i % 2 === 0) {\n            // compute factorial\n            let fact = 1;\n            for(let j=1; j<=i; j++) {\n                fact *= j;\n            }\n            result.push(fact);\n        } else {\n            // sum numbers from 1 to i\n            let sum = 0;\n            for(let j=1; j<=i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    \n    return result;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "let countEven = 0;\n    let countOdd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n            if(i % 2 == 0){\n                countEven++;\n            } else{\n                countOdd++;\n            }\n        }\n    }\n    return [countEven, countOdd];\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "let max = Math.max(...arr); // Find the maximum value in the array\n    let maxIndex = arr.indexOf(max); // Find the index of the maximum value\n  \n    // Check if there is any value on the left side of the maximum value which is smaller than the maximum value\n    for (let i = 0; i < maxIndex; i++) {\n        if (arr[i] < max) return false;\n    }\n  \n    return true;\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "def exchange(lst1, lst2):\n    # Gehe durch alle Elemente der Liste 1\n    for i in range(len(lst1) - 1, -1, -1):\n        # Wenn das Element ungerade ist\n        if lst1[i] % 2 != 0:\n            # Gehe durch alle Elemente der Liste 2\n            for j in range(len(lst2)):\n                # Wenn ein gerades Element in Liste 2 gefunden wird\n                if lst2[j] % 2 == 0:\n                    # Tausche die beiden Elemente\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n            else:\n                return \"NO\"\n    # Wenn kein ungerades Element mehr in Liste 1 vorhanden ist, gib \"YES\" zur\u00fcck\n    return \"YES\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "// Delete all characters in s that appear in c\n    let newS = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            newS += s[i];\n        }\n    }\n\n    // Check if the resulting string is a palindrome\n    let isPalindrome = false;\n    let reversedNewS = newS.split('').reverse().join('');\n    if (newS === reversedNewS) {\n        isPalindrome = true;\n    }\n\n    return [newS, isPalindrome];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let count = 0;\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n            }\n        }\n        result += Math.ceil(count / capacity);\n    }\n    return result - 1;   //Subtract 1 because the last drop in each bucket doesn't need a new trip\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    let words = s.split(' ');\n    let consonantCount;\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    let result = [];\n    \n    for(let i=0; i<words.length; i++){\n        consonantCount = 0;\n        for(let j=0; j<words[i].length; j++){\n            if(consonants.includes(words[i][j])){\n                consonantCount++;\n            }\n        }\n        if(consonantCount == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "let result = [];\n\n    // Sort the array in descending order\n    let sortedArr = arr.sort((a, b) => b - a);\n\n    // Get the first 'k' numbers from the sorted array\n    for(let i = 0; i < k; i++) {\n        result.push(sortedArr[i]);\n    }\n  \n    return result;\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "def addElements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] >= 0 and arr[i] <= 99:\n            sum += arr[i]\n    return sum"}
{"task_id": "javascript/56", "language": "javascript", "completion": "def intersection(interval1, interval2):\n    # Determine if the intervals overlap\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # Calculate start and end of overlapping interval\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Determine length of overlapping interval\n    length = end - start + 1\n\n    # Check if length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "javascript/57", "language": "javascript", "completion": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 8]\n    else:\n        sequence = [3, 8]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i - 1] + (i / 2))\n            else:\n                sequence.append(sequence[i - 2] + sequence[i - 1] + sequence[i])\n        return sequence"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    let str = n.toString();\n    let product = 1;\n    for (let i = 0; i < str.length; i++) {\n        if (parseInt(str[i]) % 2 !== 0) {\n            product *= parseInt(str[i]);\n        }\n    }\n    return product === 1 ? 0 : product; // returning 0 if no odd digits found\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(str) {\n    let stack = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '[') {\n            stack.push(str[i]);\n        } else {\n            if (stack.length > 0 && stack[stack.length - 1] === '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n  \n    // check for nested brackets\n    let count = 0;\n    for (let j = 0; j < stack.length; j++) {\n        if (stack[j] === '[') {\n            count++;\n        } else {\n            if (count > 0) {\n                count--;\n            } else {\n                return false;\n            }\n        }\n    }\n    return count > 0 ? true : false;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let ceilVal = Math.ceil(lst[i]);\n    result += (ceilVal * ceilVal);\n  }\n  return result;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "const lastChar = txt.trim().slice(-1);\n    const isLetter = /^[A-Za-z]$/.test(lastChar);\n    \n    if(!isLetter) return false; \n\n    const words = txt.split(' ');\n    const lastWord = words[words.length - 1];\n  \n    return !(lastWord.length === 0 || /[^A-Za-z]/.test(lastChar));\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "def largest_smallest_integers(lst):\n    neg = []\n    pos = []\n    for i in lst:\n        if type(i) == int:\n            if i < 0:\n                neg.append(i)\n            elif i > 0:\n                pos.append(i)\n    if len(neg)>0:\n        largest_negative = max(neg)\n    else:\n        largest_negative = None\n\n    if len(pos)>0:\n        smallest_positive = min(pos)\n    else:\n        smallest_positive = None\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "javascript/64", "language": "javascript", "completion": "def special_factorial(n):\n    result = 1\n    for i in range(2, n+1):\n        result *= i * factorial(i-1) if i > 1 else 1\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "javascript/65", "language": "javascript", "completion": "let arr = sentence.split(' ');\n    let result = '';\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for(let i = 0; i < arr.length; i++) {\n        if(primes.includes(arr[i].length)) {\n            result += arr[i] + ' ';\n        }\n    }\n    return result.trim(); // remove trailing space and return\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    // Split the strings into numerator and denominator \n    let [numX, denX] = x.split('/').map(Number);\n    let [numN, denN] = n.split('/').map(Number);\n\n    // Calculate the resulting numerator and denominator after multiplication\n    let resNum = numX * numN;\n    let resDen = denX * denN;\n\n    // Check if the result is an integer\n    return (resNum / resDen) % 1 === 0;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function sumDigits(num){\n    let numString = Math.abs(num).toString();\n    let sum = 0;\n    for(let i = 0; i < numString.length; i++){\n        sum += parseInt(numString[i]);\n    }\n    return sum;\n}\n\nfunction orderByPoints(nums){\n    return nums.slice().sort((a, b) => {\n        let aSum = sumDigits(a);\n        let bSum = sumDigits(b);\n        if(aSum === bSum){\n            return a - b; //To ensure stability of the sorting algorithm\n        }\n        return aSum - bSum;\n    });\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]); // convert to positive\n    if (num > 10 && isOdd(num[0]) && isOdd(num[num.toString().length - 1])) {\n      count++;\n    }\n  }\n  return count;\n}\n\nfunction isOdd(n) {\n  return n % 2 == 1;\n}\n\n// Test cases:\nconsole.log(specialFilter([15, -73, 14, -15])); // => 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // => 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "let a = [];\n    for(let i=1;i<=n;i++){\n        a[i-1] = i*i - i + 1;\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(getMaxTriples(5)); // outputs: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "def bf(planet1, planet2):\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    planet1_index = planets_order.index(planet1)\n    planet2_index = planets_order.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planets_order[i] for i in range(planet1_index+1, planet2_index))\n    else:\n        return tuple(planets_order[i] for i in range(planet2_index+1, planet1_index))"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n    \n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nconsole.log(xOrY(7, 34, 12));  // 34\nconsole.log(xOrY(15, 8, 5));  // 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 !== 0) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n  let strongestExt = extensions[0];\n  let maxStrength = calculateStrength(extensions[0]);\n  \n  for (let i=1; i<extensions.length; i++) {\n    let strength = calculateStrength(extensions[i]);\n      if (strength > maxStrength) {\n        maxStrength = strength;\n        strongestExt = extensions[i];\n      }\n  }\n  \n  return `${classname}.${strongestExt}`;\n}\n\nfunction calculateStrength(ext) {\n  let upperCaseChars = ext.match(/[A-Z]/g)?.length || 0;\n  let lowerCaseChars = ext.match(/[a-z]/g)?.length || 0;\n  return upperCaseChars - lowerCaseChars;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a): # If b is longer than a, it can't be a substring of a.\n        return False\n    \n    else: \n        # For every rotation of b, check whether it is a substring of a.\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n                \n        return False\n\n# Test the function with given examples\nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # True\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern_check(\"efef\",\"eeff\")) # False\nprint(cycpattern_check(\"himenss\",\"simen\")) # True"}
{"task_id": "javascript/75", "language": "javascript", "completion": "let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\nlet roman = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\nlet result = '';\nfor(let i=0;i<digits.length;i++){\n    while(number >= digits[i]){\n        number -= digits[i];\n        result += roman[i];\n    }\n}\nreturn result;\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.abs(sides[0] * sides[0] + sides[1] * sides[1] - sides[2] * sides[2]) < 0.0001 ||\n           Math.abs(sides[1] * sides[1] + sides[2] * sides[2] - sides[0] * sides[0]) < 0.0001 ||\n           Math.abs(sides[0] * sides[0] + sides[2] * sides[2] - sides[1] * sides[1]) < 0.0001;\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "def solve(s):\n    # Initialize an empty string for the result.\n    result = ''\n    \n    # Iterate through each character in the string.\n    for ch in s:\n        # If the character is a letter, flip its case.\n        if ch.isalpha():\n            result += ch.upper() if ch.islower() else ch.lower()\n        # Otherwise, just add the original character to the result.\n        else:\n            result += ch\n    \n    # After going through all characters, check if the string contained any letters.\n    # If it didn't, flip the entire string.\n    return result[::-1] if not any(c.isalpha() for c in s) else result"}
{"task_id": "javascript/78", "language": "javascript", "completion": "function stringToMd5(text) {\n    if(text === ''){\n        return null;\n    } else {\n        const crypto = require('crypto');\n        const hash = crypto.createHash('md5');\n        hash.update(text);\n        return hash.digest('hex');\n    }\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b){\n    let low = Math.min(a,b);\n    let high = Math.max(a,b);\n    let result = [];\n    \n    for (let i=low; i<=high; i++) {\n        let str = i.toString();\n        let hasEvenDigit = str.split('').some(c => parseInt(c) % 2 === 0);\n        if (hasEvenDigit){\n            result.push(i);\n        }\n    }\n    \n    return result;\n}"}

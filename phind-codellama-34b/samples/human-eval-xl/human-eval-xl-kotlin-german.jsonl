{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations : List<Any>) : Boolean {\n    var balance = 0\n    for (operation in operations) {\n        if (operation is Number) {\n            balance += operation.toInt()\n            if (balance < 0) {\n                return true\n            }\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers : List<Int>) : Pair<Int, Int> {\n    var sum = 0\n    var product = 1\n\n    for (num in numbers) {\n        sum += num\n        product *= num\n    }\n    \n    return Pair(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    val maxLength = maxOf(a.length, b.length)\n    \n    // Add padding to the left of strings to make their lengths equal \n    val pa = a.padStart(maxLength, '0')\n    val pb = b.padStart(maxLength, '0')\n    \n    return pa.zip(pb).map { (x, y) ->\n        when {\n            x == y -> '0'\n            x == '1' || y == '1' -> '1'\n            else -> throw IllegalArgumentException(\"Invalid binary digit\")\n        }\n    }.joinToString(\"\")\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "if (strings.isEmpty()) return null\n\n    var longestString: String? = null\n    \n    for (s in strings) {\n        if (s is String && (longestString == null || s.length > longestString.length)) {\n            longestString = s\n        }\n    }\n\n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var a = a\n    var b = b\n    while (b != 0) {\n        val temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "val numMap = mapOf<String, Int>(\n        \"null\" to 0,\n        \"eins\" to 1,\n        \"zwei\" to 2,\n        \"drei\" to 3,\n        \"vier\" to 4,\n        \"f\u00fcnf\" to 5,\n        \"sechs\" to 6,\n        \"sieben\" to 7,\n        \"acht\" to 8,\n        \"neun\" to 9\n    )\n    \n    val numList = numbers.split(' ').sortedBy { numMap[it] }\n    \n    return numList.joinToString(\" \")\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val min = numbers.min() ?: throw IllegalArgumentException(\"List must be non-empty\")\n    val max = numbers.max() ?: throw IllegalArgumentException(\"List must be non-empty\")\n    \n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String = string.map { \n    if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase() \n}.joinToString(\"\")"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Any>) : List<Any> {\n    return l.filter{ it is Int && it > 0 }\n}\n\n// Usage\nval positiveNums = getPositive(listOf(-1, 2, -4, 5, 6))\nprintln(positiveNums) // Output: [2, 5, 6]"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "if (n <= 1) return false\n    if (n <= 3) return true\n\n    if (n % 2 == 0 || n % 3 == 0) return false\n\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "return l.distinct().sorted()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "var count = 0\n    var fib = 2\n    var i = 1\n    var j = 1\n\n    while (count < n) {\n        val temp = i + j\n        i = j\n        j = temp\n\n        if (isPrime(fib)) {\n            count++\n        }\n\n        fib = temp\n    }\n\n    return fib\n}\n\nfun isPrime(num: Int): Boolean {\n    if (num < 2) {\n        return false\n    }\n\n    for (i in 2..num / 2) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    val seen = HashSet<Int>()\n    for (e in l) {\n        if (-e in seen) {\n            return true\n        } else {\n            seen.add(e)\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val seen = HashSet<Int>()\n    for (num in l) {\n        if (seen.contains(-1 * num)) {\n            return true\n        } else {\n            seen.add(num)\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "if (n == 0 || n == 1){\n        return 0;\n    } else if (n == 2){\n        return 2;\n    } else if (n == 3){\n        return 0;\n    } else {\n        var a = 0\n        var b = 0\n        var c = 2\n        var d = 0\n\n        for(i in 4..n){\n            val temp = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = temp;\n        }\n        \n        return d;\n    }\n}\n\n/** Testing **/\nprintln(fib4(5)) // 4\nprintln(fib4(6)) // 8\nprintln(fib4(7)) // 14"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[sortedList.size / 2 - 1] + sortedList[sortedList.size / 2]) / 2.0\n    } else {\n        sortedList[sortedList.size / 2]\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "// Entferne Leerzeichen und konvertiere den Text in Kleinbuchstaben\n    val cleanedText = text.replace(\" \", \"\").toLowerCase()\n\n    // Vergleiche den Text mit seinem Spiegelbild\n    return cleanedText == cleanedText.reversed()\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "// Erstellen Sie eine leere Zeichenkette, in der wir unser Ergebnis speichern werden.\n    var result = \"\"\n\n    // Gehen Sie durch jeden Buchstaben im Text.\n    for (char in text) {\n\n        // Wenn der Buchstabe kein Vokal ist, f\u00fcgen Sie ihn zur result-Zeichenkette hinzu.\n        if (char !in \"aeiouAEIOU\") {\n            result += char\n        }\n    }\n\n    return result\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "for (i in l) {\n        if (i >= t) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0 : String, s1 : String) : Boolean {\n    val sortedString0 = s0.toCharArray().sorted()\n    val sortedString1 = s1.toCharArray().sorted()\n    \n    return sortedString0.contentEquals(sortedString1)\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    return if (n <= 1) n else fib(n - 1) + fib(n - 2)\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1 : List<Int>, l2 : List<Any>) : List<Int> {\n    val l2Int = l2.filterIsInstance<Int>() // Convert l2 to List<Int>\n    return l1.intersect(l2Int)\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var div = 2\n    while (div * div <= num) {\n        if (num % div == 0) {\n            num /= div\n        } else {\n            div++\n        }\n    }\n    return num\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "return (n*(n+1))/2"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    return xs.drop(1).zip(xs) { a, b -> a * b }\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 1\n    \n    var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n\n    for(i in 3..n){\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "val vowels = \"aeiou\"\n    var count = 0\n\n    for (c in s.toLowerCase()) {\n        if (vowels.contains(c)) {\n            count++\n        }\n    }\n\n    // check if 'y' is a vowel if it is the last character\n    if (s.endsWith('y', true)) {\n        count++\n    }\n\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    val map = lst.groupBy { it }.mapValues { it.value.size }\n    return (map.keys - 1).firstOrNull { map[it] ?: 0 >= it } ?: -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "// Pr\u00fcfe ob die Seite eine g\u00fcltiges Dreieck bilden\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1\n    }\n    \n    // Berechne den Halbkreisradius\n    val s = (a + b + c) / 2.0\n    val area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    return String.format(\"%.2f\", area)\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    val totalWeight = q.sum()\n    \n    // \u00dcberpr\u00fcfung, ob die Liste ausbalanciert ist\n    for (i in 0 until q.size / 2) {\n        if (q[i] != q[q.size - 1 - i]) {\n            return false\n        }\n    }\n\n    // \u00dcberpr\u00fcfung, ob das Gesamtgewicht innerhalb der Grenzen liegt\n    return totalWeight <= w\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun isMultiplyPrime(a: Int): Boolean {\n    if (a <= 1) return false\n    val factors = mutableListOf<Int>()\n    for (i in 2..a / 2) {\n        if (a % i == 0 && isPrime(i)) {\n            factors.add(i)\n        }\n    }\n    // Check if product of all factors equals the original number\n    return factors.fold(1, { acc, i -> acc * i }) == a\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    // Convert the decimal number to binary.\n    var binary = Integer.toBinaryString(decimal)\n    \n    // Add the prefix and suffix for formatting help.\n    binary = \"db$binary\"\n    binary += \"db\"\n\n    return binary\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) {\n        return false\n    }\n    \n    for (i in s.indices step 3) {\n        val substring = if (i + 2 < s.length) s.substring(i, i + 3) else s.substring(i)\n        if (substring.length == 1 || substring[0] == substring[1]) {\n            return false\n        }\n    }\n    \n    return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades : List<Double>) : List<String> {\n    return grades.map { grade ->\n        when {\n            grade == 4.0 -> \"A+\"\n            grade > 3.7 -> \"A\"\n            grade > 3.3 -> \"A-\"\n            grade > 3.0 -> \"B+\"\n            grade > 2.7 -> \"B\"\n            grade > 2.3 -> \"B-\"\n            grade > 2.0 -> \"C+\"\n            grade > 1.7 -> \"C\"\n            grade > 1.3 -> \"C-\"\n            grade > 1.0 -> \"D+\"\n            grade > 0.7 -> \"D\"\n            grade > 0.0 -> \"D-\"\n            else -> \"E\"\n        }\n    }\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(str: String): Boolean {\n    val length = str.length\n    if (length <= 1) return false\n    for (i in 2..length/2) {\n        if (length % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(N: Int): String {\n    // Convert N to binary\n    var binary = Integer.toBinaryString(N)\n    \n    // Sum of digits in binary\n    var sumOfDigits = 0\n    for (digit in binary) {\n        if (digit == '1') {\n            sumOfDigits++\n        }\n    }\n\n    // Return the sum in binary\n    return Integer.toBinaryString(sumOfDigits)\n}"}

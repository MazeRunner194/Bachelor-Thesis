{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    # Ensure both strings are of equal length by padding with '0'\n    if len(a) < len(b):\n        a = a.zfill(len(b))\n    elif len(b) < len(a):\n        b = b.zfill(len(a))\n    \n    # Perform XOR operation on each corresponding pair of digits\n    xor_result = [str(int(x) ^ int(y)) for x, y in zip(a, b)]\n    \n    return ''.join(xor_result)  # Convert list back to string"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:   # check if list is empty\n        return None\n    \n    longest_string = max(strings, key=len)  # find the longest string in the list\n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'null': 0,\n        'eins': 1,\n        'zwei': 2,\n        'drei': 3,\n        'vier': 4,\n        'f\u00fcnf': 5,\n        'sechs': 6,\n        'sieben': 7,\n        'acht': 8,\n        'neun': 9\n    }\n    num_list = [num_dict[num] for num in numbers.split()]\n    num_list.sort()\n    sorted_numbers = ' '.join([str(num_dict[i]) for i in num_list])\n    return sorted_numbers"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x-min_num)/range_num for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string):\n    return string.swapcase()\n\nprint(flip_case(\"Hello\"))  # hELLO"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    if n <= 1: # Primzahlen m\u00fcssen immer gr\u00f6\u00dfer als 1 sein\n        return False\n    elif n == 2: # 2 ist die einzige gerade Primzahl\n        return True\n    elif n % 2 == 0: # Alle gerade Zahlen sind keine Primzahlen\n        return False\n    else:\n        i = 3\n        while i * i <= n: # Nur bis zur Quadratwurzel von n testen (f\u00fcr effizientere Berechnung)\n            if n % i == 0: # Wenn n durch i teilbar ist, dann handelt es sich nicht um eine Primzahl\n                return False\n            i += 2 # Als n\u00e4chsten Wert pr\u00fcfen wir die n\u00e4chste ungerade Zahl\n        return True # Wenn wir bis hierhin gekommen sind, handelt es sich um eine Primzahl"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    # entferne doppelte Elemente\n    l = list(set(l))\n    # sortiere die Liste\n    l.sort()\n    return l"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2,int(num**0.5)+1):\n        if not num % i:\n            return False\n    return True\n\ndef fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int) -> int:\n    count, i = 0, 1\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i-1)"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        for j in range(i + 1, len(l) - 1):\n            if j > i + 1 and l[j] == l[j - 1]:\n                continue\n            for k in range(j + 1, len(l)):\n                if k > j + 1 and l[k] == l[k - 1]:\n                    continue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    s = set(l)\n    for num in s:\n        if -num in s and num != -num:\n            return True\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    # Sortiert die Liste in aufsteigender Reihenfolge\n    l.sort()\n    \n    # \u00dcberpr\u00fcft, ob die L\u00e4nge der Liste ungerade ist\n    if len(l) % 2 == 1:\n        # Wenn die L\u00e4nge ungerade ist, gibt das mittelste Element zur\u00fcck\n        return l[len(l) // 2]\n    else:\n        # Wenn die L\u00e4nge gerade ist, berechnet und gibt den Durchschnitt der beiden mittleren Elemente zur\u00fcck\n        lower = len(l) // 2 - 1\n        upper = len(l) // 2\n        \n        return (l[lower] + l[upper]) / 2"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]\n\nprint(is_palindrome('')) # True\nprint(is_palindrome('aba')) # True\nprint(is_palindrome('aaaaa')) # True\nprint(is_palindrome('zbcd')) # False"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])\n\nprint(remove_vowels(\"\"))                 # prints \"\"\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # prints \"bcdf\\nghjklm\"\nprint(remove_vowels('abcdef'))           # prints 'bcdf'\nprint(remove_vowels('aaaaa'))            # prints ''\nprint(remove_vowels('aaBAA'))            # prints 'B'\nprint(remove_vowels('zbcd'))             # prints 'zbcd'"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(i < t for i in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    return x + y\n\nprint(add(2, 3))  # Output: 5\nprint(add(5, 7))  # Output: 12"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    # convert each string into a set of characters\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # return True if both sets are the same (i.e., contain the same characters), else False\n    return set0 == set1"}
{"task_id": "python/21", "language": "python", "completion": "if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n# Tests ausf\u00fchren\nprint(fib(10)) # 55\nprint(fib(1))  # 1\nprint(fib(8))  # 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n):\n    return n * (n + 1) // 2"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs)][1:]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n < 0:\n        raise ValueError(\"Negative arguments are not supported.\")\n    \n    # Initialisiere die Tabelle mit den Basisf\u00e4llen.\n    fibfib_table = [0, 0, 1] + [-1]*(n-2)\n    \n    def calc_fibfib(n):\n        if n < len(fibfib_table):\n            # Wenn der Wert bereits berechnet wurde, gib ihn zur\u00fcck.\n            return fibfib_table[n]\n        \n        # Sonst berechne den neuen Wert und speichere ihn in der Tabelle.\n        new_value = calc_fibfib(n-1) + calc_fibfib(n-2) + calc_fibfib(n-3)\n        fibfib_table[n] = new_value\n        \n        return new_value\n    \n    # Berechne das n-te Element und gib es zur\u00fcck.\n    return calc_fibfib(n)"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    \n    # check each character in the string\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            \n    # check if last character is y or Y\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    \n    return count"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    # Erstelle ein W\u00f6rterbuch, in dem die Schl\u00fcssel Zahlen aus der Liste sind und die Werte sind ihre H\u00e4ufigkeit\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Durchsuche die Liste, um nach einer Zahl zu suchen, deren H\u00e4ufigheit gr\u00f6\u00dfer oder gleich dem Wert der Zahl selbst ist\n    for num in sorted(lst, reverse=True):\n        if frequency[num] >= num:\n            return num\n    \n    # Wenn kein solcher Wert gefunden wird, gebe -1 zur\u00fcck\n    return -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    # Sort the sides to make sure c is the longest side.\n    sides = sorted([a, b, c])\n    \n    # Check if the sides form a valid triangle.\n    if (sides[0] + sides[1] > sides[2]):\n        # Calculate the semi-perimeter.\n        s = (sides[0] + sides[1] + sides[2]) / 2\n        \n        # Calculate the area using Heron's formula: sqrt(s * (s - a) * (s - b) * (s - c))\n        area = round((s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]) ** 0.5), 2)\n        \n        return area\n    else:\n        # If the sides do not form a valid triangle, return -1.\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    q_sum = sum(q)\n    return q == q[::-1] and q_sum <= w  # True if q is a palindrome and its sum <= w\n\nprint(will_it_fly([1, 2], 5))         # False - unausgeglichen\nprint(will_it_fly([3, 2, 3], 1))       # False - \u00fcber das Gewicht\nprint(will_it_fly([3, 2, 3], 9))       # True - ausbalanciert und innerhalb des Gewichts\nprint(will_it_fly([3], 5))             # True - ausbalanciert und innerhalb des Gewichts"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    factors = []\n    for i in range(2, int(a**0.5)+1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    if a > 1:\n        factors.append(a)\n    return len(factors) == 3"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove '0b' at the start.\n    return f'db{binary}db'  # Add the formatting characters."}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Zerlegen der Zahl in ihre Ziffern\n    digits = [int(d) for d in str(N)]\n    \n    # Berechnung der Summe der Ziffern\n    sum_digits = sum(digits)\n    \n    # Umwandlung der Gesamtsumme in die bin\u00e4re Form\n    binary_sum = bin(sum_digits)[2:]\n    \n    return binary_sum"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(reversed(row)) if val == x]\n    return sorted([(i, len(row)-j-1) for i, j in result], key=lambda v: (v[0], -v[1]))"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(set(lst))[1]"}
{"task_id": "python/39", "language": "python", "completion": "import re\n\ndef is_bored(S):\n    # Split the text into sentences, using . ! or ? as delimiters\n    sentences = re.split(r'\\.|\\?|!', S)\n    \n    # Count the number of sentences that start with \"Ich\"\n    count = sum(1 for sentence in sentences if sentence.startswith('Ich'))\n    \n    return count"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    \n    if not primes:\n        return 0\n    \n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if len(dictionary) == 0:\n        return False\n    lower = 0\n    upper = 0\n    for key in dictionary:\n        if isinstance(key, str):\n            if key.islower():\n                lower += 1\n            elif key.isupper():\n                upper += 1\n        else:\n            return False\n    if lower == len(dictionary) or upper == len(dictionary):\n        return True\n    else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # should return True.\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False.\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # should return False.\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # should return False.\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # should return True."}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num - int(num)) < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n + i * 2 for i in range(n)]\n    else:\n        return [n + i * 2 - 1 for i in range(n)]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Ersetze Kommas durch Leerzeichen\n    s = s.replace(',', ' ')\n    # Trenne W\u00f6rter anhand von Leerzeichen und konvertiere das Ergebnis in eine Liste\n    return s.split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    # Initialize the greatest even number as -1\n    greatest_even = -1\n    \n    # Iterate over the range, from y down to x inclusive\n    for num in range(y, x-1, -1):\n        # If the number is even and greater than greatest_even\n        if num % 2 == 0 and (greatest_even == -1 or num > greatest_even):\n            # Update the greatest_even\n            greatest_even = num\n            \n    return greatest_even"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    binary_avg = bin(avg)[2:]   # remove '0b' from the start of the binary representation\n    return binary_avg"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0: # If 'i' is even\n            fac = 1\n            for j in range(1, i+1):\n                fac *= j\n            result.append(fac)\n        else: # If 'i' is odd\n            sum_nums = sum(range(1, i+1))\n            result.append(sum_nums)\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]: # check if palindrome\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return True\n            \n    return False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Erstelle zwei Kopien der Listen, um sie nicht zu ver\u00e4ndern\n    odd_list = lst1[:]\n    even_list = lst2[:]\n    \n    # Gehe jedes ungerade Element in der ersten Liste durch\n    for num in odd_list:\n        if num % 2 != 0:\n            # Suche nach einem geraden Element in der zweiten Liste\n            for i, even_num in enumerate(even_list):\n                if even_num % 2 == 0:\n                    # Austausche das ungerade gegen das gerade Element\n                    odd_list[odd_list.index(num)] = even_num\n                    even_list[i] = num\n                    break\n            else:\n                return \"NO\"\n    \n    return \"YES\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    # Remove all characters from s that are in c\n    result = ''.join(ch for ch in s if ch not in c)\n  \n    # Check if the resultant string is a palindrome\n    is_palindrome = result == result[::-1]\n  \n    return (result, is_palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    # Find the total number of ones in the grid\n    total_ones = sum(i.count(1) for i in grid)\n    # Divide by the capacity\n    return math.ceil(total_ones / capacity)"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    # If the string s is empty, return an empty list\n    if not s.strip():\n        return []\n    else:\n        words = s.split()  # Split the string into a list of words\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        # Use list comprehension to select all words that have exactly n consonants\n        selected_words = [word for word in words if sum(ch in consonants for ch in word) == n]\n        return selected_words"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    arr.sort()\n    return sorted(arr[-k:])"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Using list comprehension to select first 'k' elements from 'arr' and then find the sum of those with at most two digits.\n    return sum([num for num in arr[:k] if 9 >= num >= 10 or num < 10])"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    # Initializing the list with the first two elements\n    tribonacci = [1, 3]\n    \n    # Calculating the rest of the sequence\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[i-1])\n            \n    return tribonacci[:n+1]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    # Convert the number to string to be able to iterate over its digits\n    str_n = str(n)\n    \n    # Initialize product as 1\n    product = 1\n    \n    # Iterate over each digit in the string\n    for digit in str_n:\n        if int(digit) % 2 != 0:   # If the current digit is odd\n            product *= int(digit)  # Multiply it with the running product\n    return product if product != 1 else 0  # Return the product, but if it's still 1 (meaning all digits were even), return 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(s):\n    stack = []\n    for bracket in s:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(i) ** 2 for i in lst])"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # remove white spaces from the start and end of txt\n    txt = txt.strip()\n    # if txt is not empty, check if the last character is a letter\n    return False if len(txt) == 0 or not txt[-1].isalpha() else True"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0 and i.is_integer()]\n    positives = [i for i in lst if i > 0 and i.is_integer()]\n    \n    max_negative = max(negatives) if negatives else None\n    min_positive = min(positives) if positives else None\n    \n    return (max_negative, min_positive)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact * special_factorial(n-1)\n\nprint(special_factorial(4))"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    # Function to check if number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # List to store words with prime lengths\n    prime_words = []\n    \n    # Iterate over the words\n    for word in words:\n        # If length of word is prime, append to list\n        if is_prime(len(word)):\n            prime_words.append(word)\n            \n    # Join the words with space and return\n    return ' '.join(prime_words)"}
{"task_id": "python/66", "language": "python", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert strings to Fraction objects\n    x = Fraction(x)\n    n = Fraction(n)\n    # Multiply the two fractions\n    result = x * n\n    # Check if result is a whole number\n    return result.denominator == 1"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n        \n    # Use sorted to sort nums based on the custom rule\n    return sorted(nums, key=lambda n, i=sum_digits(n), c=nums.index(n): (i, c))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and (abs(num) % 10 in [1, 3, 5, 7, 9]) and ((abs(num) // 10 == 1 or abs(num) // 10 == 3 or abs(num) // 10 == 5 or abs(num) // 10 == 7 or abs(num) // 10 == 9) or (abs(num) % 10 == 1 or abs(num) % 10 == 3 or abs(num) % 10 == 5 or abs(num) % 10 == 7 or abs(num) % 10 == 9)):\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Create array a\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planet_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    \n    planet1_index = planet_order.index(planet1)\n    planet2_index = planet_order.index(planet2)\n    \n    # Make sure we count from the closest planet to the Sun (i.e., Mercury)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n        \n    return tuple(planet_order[planet1_index+1:planet2_index])"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    else:\n        return sum(x**2 for x in set(lst) if x >= 0 and x % 1 == 0 and x % 2 != 0)"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_value = float('-inf')  # Start with negative infinity as any positive int will be larger than this.\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())  # Count of capital letters.\n        SM = sum(1 for c in extension if c.islower())  # Count of small letters.\n        strength = CAP - SM  # Calculate the strength.\n        if strength > strongest_value:  # If this strength is the strongest so far.\n            strongest_value = strength  # Update the maximum.\n            strongest_extension = extension  # Update the best extension.\n    return class_name + '.' + strongest_extension\n\n# Test cases to validate the solution\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])) # should return 'my_class.AA'\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])) # should return 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('Animals', ['Birds', 'Mammals', 'fish'])) # should return 'Animals.Mammals'"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    # check if b or any of its rotations is a substring of a\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(num):\n    lookup = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), \n              (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), \n              (4, 'iv'), (1, 'i')]\n    result = ''\n    for value, numeral in lookup:\n        count, num = divmod(num, value)\n        result += numeral * count\n    return result"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides so that c is the longest (hypotenuse)\n    sides = sorted([a, b, c])\n    \n    # Check if the theorem holds\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)"}
{"task_id": "python/78", "language": "python", "completion": "True"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    lower = min(a, b)\n    upper = max(a, b)\n    return [i for i in range(lower, upper + 1) if all(int(digit) % 2 == 0 for digit in str(i))]"}

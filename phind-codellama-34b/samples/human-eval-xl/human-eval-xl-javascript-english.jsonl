{"task_id": "javascript/0", "language": "javascript", "completion": "let balance = 0;\n  \n  for (const operation of operations){\n    balance += operation;\n    \n    if (balance < 0) return true;\n  }\n  \n  return false;\n}\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "def sum_product(numbers):\n    total_sum = sum(numbers)\n    total_product = 1\n    for n in numbers:\n        total_product *= n\n    return (total_sum, total_product)\n\nprint(sum_product([]))  # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    let result = \"\";\n\n    // Make sure both strings are of equal length by padding with 0s from the left.\n    while (a.length < b.length) a = \"0\" + a;\n    while (b.length < a.length) b = \"0\" + b;\n    \n    // Get XOR of each corresponding character in strings a and b\n    for(let i = 0; i < a.length; i++) {\n        result += a[i] == b[i] ? '0' : '1';  \n    }\n\n    return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "let result = \"none\";\n  if (strings.length > 0) {\n    result = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n      if (strings[i].length > result.length) {\n        result = strings[i];\n      }\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "while (b !== 0) {\n    let t = b;\n    b = a % b;\n    a = t;\n}\nreturn a;\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "def sort_numbers(numbers):\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, \n                'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    // Find the min and max values in the array\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    \n    // Compute the range between max and min\n    let range = max - min;\n\n    // Now, for each number in the array, rescale it to the unit interval.\n    return numbers.map(num => (num - min) / range);\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "const result = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (char === char.toUpperCase()) {\n      result.push(char.toLowerCase());\n    } else {\n      result.push(char.toUpperCase());\n    }\n  }\n  return result.join('');\n}\n\nconsole.log(flipCase('Hello')); // 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "def get_positive(lst):\n    return [n for n in lst if n > 0]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "if (n <= 1) return false;\n  if (n === 2) return true;\n  \n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  \n  return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "def unique(l):\n    return sorted(list(set(l)))"}
{"task_id": "javascript/11", "language": "javascript", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n\ndef prime_fib(index):\n    fib_numbers = [0, 1]\n    count = 0\n    while True:\n        new_number = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(new_number)\n        if is_prime(new_number):\n            count += 1\n            if count == index:\n                return new_number"}
{"task_id": "javascript/12", "language": "javascript", "completion": "def triples_sum_to_zero(l):\n    if len(l) < 3: return False # If there are less than 3 elements, we can't form a triplet.\n    exists = set()\n    for num in l:\n        if num in exists:\n            return True\n        exists.add(-num)\n    return False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(lst) {\n  let map = {};\n  \n  for (let num of lst) {\n    if (map[num]) {\n      return true;\n    } else {\n      map[-num] = true;\n    }\n  }\n  \n  return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "def fib4(n):\n    if n < 0:\n        return \"Input number must be positive.\"\n    # initializing the first four Fibonacci numbers \n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        # array to store the Fibonacci numbers\n        fib = [0, 0, 2, 0]\n        \n        for i in range(4, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n            \n        return fib[n]"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    l.sort((a, b) => a - b);  // Sorts the array in ascending order\n    let len = l.length;\n    \n    if (len % 2 === 0) {  // If length is even\n        return (l[len / 2 - 1] + l[len / 2]) / 2;  // Average of two middle numbers\n    } else {  // If length is odd\n        return l[(len - 1) / 2];  // Middle number\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "const reversedText = text.split('').reverse().join(''); \nreturn text === reversedText; \n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "return l.every((val)=> val < t);\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "let arr0 = [];\nlet arr1 = [];\nfor (let i = 0; i < s0.length; i++){\n    arr0[s0.charAt(i)]?arr0[s0.charAt(i)]++:arr0[s0.charAt(i)]=1;\n}\nfor (let j = 0; j < s1.length; j++){\n    arr1[s1.charAt(j)]?arr1[s1.charAt(j)]++:arr1[s1.charAt(j)]=1;\n}\n// console.log(arr0,arr1);\nfor (let key in arr0){\n    if (!arr1[key] || arr0[key] !== arr1[key]){\n        return false;\n    }\n}\nfor (let key in arr1){\n    if (!arr0[key] || arr0[key] !== arr1[key]){\n        return false;\n    }\n}\nreturn true;\n\n}\n// same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n// sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc'); // expected output: true\n// sameChars('abcd', 'dddddddabc'); // expected output: true\n// sameChars('dddddddabc', 'abcd'); // expected output: true\n// sameChars('eabcd', 'dddddddabc'); // expected output: false\n// sameChars('abcd', 'dddddddabce'); // expected output: false\n// sameChars('eabcdzzzz', 'dddzzzzzzzddddabc'); // expected output: false"}
{"task_id": "javascript/21", "language": "javascript", "completion": "if (n <= 1) return n;\n\nlet prev = 0, next = 1;\nfor (let i = 2; i <= n; i++) {\n    let temp = next;\n    next += prev;\n    prev = temp;\n}\nreturn next;\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    let commonElements = [];\n\n    // Iterate over the first list\n    for (let i = 0; i < l1.length; i++) {\n        if (l2.includes(l1[i]) && !commonElements.includes(l1[i])) {\n            commonElements.push(l1[i]);\n        }\n    }\n    \n    // Iterate over the second list\n    for (let i = 0; i < l2.length; i++) {\n        if (l1.includes(l2[i]) && !commonElements.includes(l2[i])) {\n            commonElements.push(l2[i]);\n        }\n    }\n    \n    // Sort the array and return it\n    return commonElements.sort((a, b) => a - b);\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195)) # Output: 29\nprint(largest_prime_factor(2048))  # Output: 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "return n * (n + 1) / 2;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    // The derivative of a constant is 0.\n    if (xs.length === 1) return [];\n\n    let derived = [];\n    for (let i = 1; i < xs.length; ++i) {\n        derived.push(xs[i] * i);\n    }\n    return derived;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "def fibfib(n):\n    if n < 0:\n        return \"Error: input should be non-negative integer.\"\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib = [0, 0, 1] + [0]*(n-3)\n    for i in range(3, n+1):\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    \n    return fibfib[n]"}
{"task_id": "javascript/27", "language": "javascript", "completion": "let count = 0;\n    const vowels = \"aeiouAEIOU\";\n\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n\n    // Check if last character is 'y' or 'Y'\n    if ((s.slice(-1) === 'y' || s.slice(-1) === 'Y') && s.length > 1) {\n        count++;\n    }\n\n    return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "def search(lst):\n    # Create a dictionary with elements as keys and their frequencies as values\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Iterate over the list in reverse order to find the first element that meets the condition\n    for i in sorted(lst, reverse=True):\n        if i > 0 and freq[i] >= i:\n            return i\n            \n    return -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return Math.round((Math.sqrt(s * (s - a) * (s - b) * (s - c))) * 100) / 100;\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if q is balanced: convert q to a string and compare it with its reverse. \n    const isBalanced = q.toString() === q.reverse().toString();\n    \n    // Calculate the sum of all elements in q.\n    const weight = q.reduce((a, b) => a + b, 0);\n    \n    // Check if the sum is less than or equal to w and whether q is balanced.\n    return isBalanced && (weight <= w);\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isPrime(num) { \n    if (num < 2) return false; \n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) \n        if (num % i === 0) return false; \n    return true; \n}\n  \nfunction isMultiplyPrime(a) {\n    let factors = [];\n    for (let i = 2; a > 1; i++) {\n        while (a % i == 0) {\n            factors.push(i);\n            a /= i;\n        }\n    }\n    \n    // Check if all the factors are prime numbers and their multiplication gives 'a'\n    let product = 1;\n    for (let factor of factors) {\n        if (!isPrime(factor)) return false;\n        product *= factor;\n    }\n  \n    return product == a && factors.length == 3; // checks if the number of factors is 3\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "return 'db' + decimal.toString(2).padStart(4, '0') + 'db';\n}\n\nconsole.log(decimalToBinary(15)); // returns \"db1111db\"\nconsole.log(decimalToBinary(32)); // returns \"db100000db\""}
{"task_id": "javascript/33", "language": "javascript", "completion": "if (s.length < 3) {\n        return false;\n    }\n    \n    for (let i = 0; i <= s.length - 3; i++) {\n        const set = new Set(s.slice(i, i + 3));\n        if (set.size !== 3) {\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "let letterGrades = [];\n  \n  grades.forEach((grade) => {\n    if (grade == 4.0) {\n      letterGrades.push('A+');\n    } else if (grade > 3.7) {\n      letterGrades.push('A');\n    } else if (grade > 3.3) {\n      letterGrades.push('A-');\n    } else if (grade > 3.0) {\n      letterGrades.push('B+');\n    } else if (grade > 2.7) {\n      letterGrades.push('B');\n    } else if (grade > 2.3) {\n      letterGrades.push('B-');\n    } else if (grade > 2.0) {\n      letterGrades.push('C+');\n    } else if (grade > 1.7) {\n      letterGrades.push('C');\n    } else if (grade > 1.3) {\n      letterGrades.push('C-');\n    } else if (grade > 1.0) {\n      letterGrades.push('D+');\n    } else if (grade > 0.7) {\n      letterGrades.push('D');\n    } else if (grade > 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  });\n  \n  return letterGrades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(s):\n    return is_prime(len(s))"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    // convert number to string and split to array, then calculate the sum\n    let sum = n.toString().split('').reduce((accumulator, currentValue) => accumulator + parseInt(currentValue), 0);\n    \n    // convert the sum to binary and return\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "def get_row(lst, x):\n    res = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                res.append((row, len(lst[row]) - 1 - col))\n    return sorted(res)"}
{"task_id": "javascript/38", "language": "javascript", "completion": "def next_smallest(lst):\n    # Check if list is empty or contains only one element\n    if len(lst) < 2:\n        return None\n    \n    smallest = min(lst[0], lst[1])\n    second_smallest = max(lst[0], lst[1]) if lst[0] != lst[1] else float('inf')\n    \n    for num in lst[2:]:\n        if num < smallest:\n            second_smallest, smallest = smallest, num\n        elif num < second_smallest and num > smallest:\n            second_smallest = num\n    \n    return None if second_smallest == float('inf') else second_smallest"}
{"task_id": "javascript/39", "language": "javascript", "completion": "let boredomCount = 0;\n    s.split(/[.!?]/).forEach((sentence) => {\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++;\n        }\n    });\n    return boredomCount;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(lst):\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "javascript/41", "language": "javascript", "completion": "def check_dict_case(d):\n    if not d:  # If the dict is empty, return False\n        return False\n    lower = [k for k in d.keys() if k.islower()]\n    upper = [k for k in d.keys() if k.isupper()]\n    \n    return len(lower) == len(d) or len(upper) == len(d)  # All keys must be either all lower case or all upper case"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    let num = parseFloat(value);\n    return (num < 0) ? Math.floor(num - 0.5) : Math.floor(num + 0.5);\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "def makeAPile(n):\n    stones = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            stones.append(i*2)\n        else:\n            stones.append(i*2-1)\n    return stones"}
{"task_id": "javascript/44", "language": "javascript", "completion": "return s.split(/[\\s,]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    if (y < x) return -1; // If y is less than x, no even number can exist in the range\n    \n    if (x % 2 === 0) return x; // If x is even, return it directly\n    \n    for (let i = x + 1; i <= y; i++) { // Start from x+1 until y and return the first even number found\n        if (i % 2 === 0) return i;\n    }\n  \n    return -1; // If no even numbers are found, return -1\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    binary = bin(avg)[2:] # Convert to binary and remove '0b' at the start.\n    return binary"}
{"task_id": "javascript/47", "language": "javascript", "completion": "def f(n):\n    def even_factorial(i):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            return factorial\n        else:\n            return i * (i + 1) // 2\n    return [even_factorial(i) for i in range(1, n+1)]"}
{"task_id": "javascript/48", "language": "javascript", "completion": "def evenOddPalindrome(n):\n    # Creating list of palindromes within the range\n    palindromes = [i for i in range(1, n+1) if str(i) == str(i)[::-1]]\n    \n    # Getting count of even and odd palindromes\n    even_palindrome = len([p for p in palindromes if p % 2 == 0])\n    odd_palindrome = len(palindromes) - even_palindrome\n    \n    return (even_palindrome, odd_palindrome)"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length === 0) return true;\n  \n    let max_from_right = arr.length - 1;\n  \n    for (let i = arr.length - 2; i >= 0; i--) {\n      if (arr[i] > arr[i + 1]) {\n        max_from_right = i;\n        break;\n      }\n    }\n  \n    let min_from_left = 0;\n    for (let i = 1; i < arr.length; i++) {\n      if (arr[i] < arr[i - 1]) {\n        min_from_left = i;\n        break;\n      }\n    }\n  \n    return max_from_right <= min_from_left;\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  // Initialize counters for odd and even numbers in both lists\n  let oddLst1 = 0;\n  let evenLst1 = 0;\n  let oddLst2 = 0;\n  let evenLst2 = 0;\n  \n  // Count the number of odd and even numbers in both lists\n  for (let i = 0; i < lst1.length; i++) {\n    if(lst1[i] % 2 === 0) {\n      evenLst1++;\n    } else {\n      oddLst1++;\n    }\n  }\n  \n  for (let i = 0; i < lst2.length; i++) {\n    if(lst2[i] % 2 === 0) {\n      evenLst2++;\n    } else {\n      oddLst2++;\n    }\n  }\n  \n  // Check if it is possible to make all numbers in lst1 even by exchanging\n  if (oddLst1 < oddLst2) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "def reverseDelete(s, c):\n    # Delete all occurrences of characters in c from s\n    for char in c:\n        s = s.replace(char, '')\n        \n    # Check if the string is palindrome\n    is_palindrome = s == s[::-1]\n    \n    return (s, is_palindrome)"}
{"task_id": "javascript/52", "language": "javascript", "completion": "import math\n\ndef maxFill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)  # count the number of ones (units of water) in the grid\n    return math.ceil(total_water / capacity)        # divide by bucket's capacity and round up"}
{"task_id": "javascript/53", "language": "javascript", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() not in 'aeiou')\n    \n    words = s.split(' ')\n    selected_words = [word for word in words if count_consonants(word) == n]\n    return selected_words"}
{"task_id": "javascript/54", "language": "javascript", "completion": "def maximum(arr, k):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # return the first k elements\n    return arr[:k]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    return arr.slice(0, k).filter(x => x >= 0 && x <= 99).reduce((a, b) => a + b, 0);\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If there is no intersection, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Compute the length of the intersection\n    length = end - start + 1\n    \n    # Check whether the length is a prime number\n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n            \n    return \"YES\""}
{"task_id": "javascript/57", "language": "javascript", "completion": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n+1):\n            if i % 2 == 0: # even\n                seq.append(1 + i // 2)\n            else: # odd\n                seq.append(seq[-1] + seq[-2] + seq[-3] + 1)\n        return seq"}
{"task_id": "javascript/58", "language": "javascript", "completion": "def odd_product(n):\n    digits = [int(x) for x in str(n)]\n    odd_digits = [x for x in digits if x % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for num in odd_digits:\n            product *= num\n        return product"}
{"task_id": "javascript/59", "language": "javascript", "completion": "let stack = [];\nfor (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n        stack.push(string[i]);\n    } else {\n        if (stack.length > 0 && stack[stack.length - 1] === '[') {\n            stack.pop();\n            if (stack.length > 0) {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n}\nreturn false;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let rounded = Math.ceil(lst[i]);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n\nconsole.log(sumSquares([1,2,3])); // 14\nconsole.log(sumSquares([1,4,9])); // 98\nconsole.log(sumSquares([1,3,5,7])); // 84\nconsole.log(sumSquares([1.4,4.2,0])); // 29\nconsole.log(sumSquares([-2.4,1,1])); // 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "return /[a-zA-Z]/.test(txt.slice(-1)) && !/(\\w[a-zA-Z]$)/.test(txt);\n}\n\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "let largestIndex = -1;\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return largestIndex;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    return (None if len(negatives) == 0 else max(negatives), None if len(positives) == 0 else min(positives))"}
{"task_id": "javascript/64", "language": "javascript", "completion": "let result = 1;\n\nfor(let i=n; i>=1; --i){\n    let fact = 1;\n    for(let j=i; j>=1; --j){\n        fact *= j;\n    }\n    result *= fact;\n}\n\nreturn result;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "import sympy\n\ndef wordsInSentence(sentence):\n    # Split sentence into words\n    words = sentence.split(' ')\n    \n    # Initialize result string\n    result = \"\"\n\n    # Check each word\n    for word in words:\n        if sympy.isprime(len(word)):\n            result += word + ' '\n            \n    # Return string with a prime length\n    return result.rstrip()"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function gcd(a, b){\n    if (!b) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nfunction simplify(x, n) {\n    let [numX, denX] = x.split('/');\n    let [numN, denN] = n.split('/');\n    \n    let gcdNum = gcd(Number(numX), Number(numN));\n    let gcdDen = gcd(Number(denX), Number(denN));\n\n    return (gcdNum === 1 && gcdDen === 1) ? false : true;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function sumDigits(num) {\n    let str = Math.abs(num).toString();\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n        sum += parseInt(str[i]);\n    }\n    return sum;\n}\n\nfunction orderByPoints(nums) {\n    // Create a copy of the input array\n    let arr = nums.slice();\n    \n    // Sort the array by the sum of its digits\n    arr.sort((a, b) => {\n        let sumA = sumDigits(a);\n        let sumB = sumDigits(b);\n        if (sumA === sumB) return a - b;  // For stability\n        else return sumA - sumB;\n    });\n    \n    return arr;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = Math.abs(nums[i]); // Convert to positive\n    if (num > 10 && num % 2 === 1) {\n      let strNum = num.toString();\n      let firstDigit = parseInt(strNum.charAt(0));\n      let lastDigit = parseInt(strNum.slice(-1));\n      if ((firstDigit % 2 === 1) && (lastDigit % 2 === 1)) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nconsole.log(specialfilter([15, -73, 14, -15])); // Returns: 1\nconsole.log(specialfilter([33, -2, -3, 45, 21, 109])); // Returns: 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "def getMaxTriples(n):\n    # Create the list 'a'\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # Initialize counter\n    count = 0\n\n    # Loop through the list to find valid triples\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0: # If sum is multiple of 3\n                    count += 1 # Increment the counter\n    \n    return count"}
{"task_id": "javascript/70", "language": "javascript", "completion": "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \n  let posPlanet1 = planets.indexOf(planet1);\n  let posPlanet2 = planets.indexOf(planet2);\n  \n  if (posPlanet1 === -1 || posPlanet2 === -1) {\n    return ();\n  }\n  \n  if (posPlanet1 > posPlanet2) {\n    [posPlanet1, posPlanet2] = [posPlanet2, posPlanet1];\n  }\n  \n  return planets.slice(posPlanet1+1, posPlanet2);\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nfunction isPrime(num) {\n    if (num <= 1) {\n      return false;\n    }\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if (num % i === 0) {\n          return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(xOrY(7, 34, 12)); // Expected output: 34\nconsole.log(xOrY(15, 8, 5)); // Expected output: 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 !== 0 && lst[i] >= 0 && Number.isInteger(lst[i])) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "def strongestExtension(classname, extensions):\n    # Initialize maximum strength and corresponding extension name.\n    max_strength = float('-inf')\n    strongest_ext = None\n\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n\n        # Update maximum strength and extension name if necessary.\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n\n    return f\"{classname}.{strongest_ext}\""}
{"task_id": "javascript/74", "language": "javascript", "completion": "def cycpattern_check(a, b):\n    # Check if the length of 'b' is larger than 'a'. If so, it can't be a substring.\n    if len(b) > len(a):\n        return False\n    \n    # Create all possible rotations for 'b' and check if any of them exists in 'a'.\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # Rotate 'b' to the right.\n    \n    # If none of the rotations was found in 'a', return False.\n    return False"}
{"task_id": "javascript/75", "language": "javascript", "completion": "def intToMiniRoman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "javascript/76", "language": "javascript", "completion": "import math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)"}
{"task_id": "javascript/77", "language": "javascript", "completion": "def solve(s):\n    # Check if string 's' contains any letters.\n    if not any(char.isalpha() for char in s):\n        return s[::-1]  # If no letters found, reverse the string.\n    \n    result = \"\"\n    for char in s:\n        # If character is a letter, change its case.\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char  # If not a letter, just append it.\n    \n    return result"}
{"task_id": "javascript/78", "language": "javascript", "completion": "import crypto from 'crypto';\n\nfunction stringToMd5(text) {\n    if (text === '') return \"none\";\n    \n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    \n    return hash.digest('hex');\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let result = [];\n    for (let i = start; i <= end; i++) {\n        let digits = i.toString().split('').filter(d => parseInt(d) % 2 === 0).sort((a,b)=> a-b);\n        if(digits.length > 0){\n            result = [...result, ...digits];\n        }\n    }\n    return Array.from(new Set(result)); // remove duplicates and back to array\n}"}

{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), reduce(operator.mul, numbers, 1))"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length.\")\n    \n    result = []\n    for a_bit, b_bit in zip(a, b):\n        xor_bit = str(int(a_bit) ^ int(b_bit))\n        result.append(xor_bit)\n    \n    return \"\".join(result)\n\n# Test cases\nprint(string_xor('010', '110'))  # Output: '100'\nprint(string_xor('101', '001'))  # Output: '100'"}
{"task_id": "python/3", "language": "python", "completion": "def longest(strings):\n    if not strings:  # if the list is empty\n        return None\n    else:\n        # set the first string as the longest one initially\n        longest_string = strings[0]\n        for string in strings:\n            if len(string) > len(longest_string):\n                # update the longest string if a longer string is found\n                longest_string = string\n        return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "python/5", "language": "python", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    numbers_list = [num_dict[i] for i in numbers.split()]\n    numbers_list.sort()\n    \n    sorted_numbers = []\n    for num in numbers_list:\n        for k, v in num_dict.items():\n            if v == num:\n                sorted_numbers.append(k)\n                break\n\n    return ' '.join(sorted_numbers)"}
{"task_id": "python/6", "language": "python", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    range_value = max_value - min_value\n    \n    return [(x-min_value)/range_value for x in numbers]\n\n# Test case\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\nprint(flip_case('Hello'))"}
{"task_id": "python/8", "language": "python", "completion": "positive_list = []\nfor num in l:\n    if num > 0:\n        positive_list.append(num)\nreturn positive_list"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_fib(n):\n    x = (5 * n**2 + 4)\n    y = (5 * n**2 - 4) \n    return x**0.5 % 1 == 0 or y**0.5 % 1 == 0"}
{"task_id": "python/12", "language": "python", "completion": "from itertools import combinations\n\ndef triples_sum_to_zero(l):\n    for combo in combinations(l, 3):\n        if sum(combo) == 0:\n            return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    numSet = set()\n    \n    for num in l:\n        if -num in numSet:\n            return True\n        numSet.add(num)\n        \n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    \n    # Initialize the array with the first four elements\n    fib4_array = [0, 0, 2, 0]\n\n    # Compute the rest of the sequence up to n\n    for i in range(4, n + 1):\n        fib4_array.append(fib4_array[-1] + fib4_array[-2] + fib4_array[-3] + fib4_array[-4])\n    \n    return fib4_array[n]"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    n = len(l)\n    s = sorted(l)\n    return (s[n//2] + s[(n-1)//2]) / 2"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text):\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100)) # True\nprint(below_threshold([1, 20, 4, 10], 5)) # False\nprint(below_threshold([], 5)) # True"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n):\n    if n <= 0:\n        return \"Input number should be positive\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "python/23", "language": "python", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n):\n    for i in range(int(n ** 0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return -1"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n\nprint(sum_to_n(30))  # Outputs: 465\nprint(sum_to_n(100))  # Outputs: 5050\nprint(sum_to_n(5))  # Outputs: 15\nprint(sum_to_n(10))  # Outputs: 55\nprint(sum_to_n(1))  # Outputs: 1"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    if not xs:\n        return []\n    new_coeffs = [xs[i]*i for i in range(1, len(xs))]\n    return new_coeffs"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, b, c = 0, 0, 1\n    for _ in range(3, n+1):\n        a, b, c = b, c, a + b + c\n\n    return c"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # check each letter in the string\n    for letter in s.lower():\n        if letter in vowels:\n            count += 1\n            \n    return count"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    # Create a dictionary with the frequency of each number\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n\n    # Iterate over the list in reverse order (greatest to smallest)\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n            \n    return -1\n\nprint(search([4, 1, 2, 2, 3, 1])) # Expected output 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Expected output 3\nprint(search([5, 5, 4, 4, 4])) # Expected output -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5)) #6.00\nprint(triangle_area(1, 2, 10)) #-1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n\nprint(will_it_fly([1, 2], 5))  # False - unbalanced\nprint(will_it_fly([3, 2, 3], 1))  # False - too heavy\nprint(will_it_fly([3, 2, 3], 9))  # True - balanced and not too heavy\nprint(will_it_fly([3], 5))  # True - balanced and not too heavy"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7]\n    factors = []\n    for p in primes:\n        while a % p == 0:\n            a /= p\n            factors.append(p)\n    return len(factors) == 3 and a == 1\n\nif __name__ == \"__main__\":\n    # test cases\n    print(is_multiply_prime(30))  # True: 30 = 2 * 3 * 5\n    print(is_multiply_prime(60))  # False: 60 = 2 * 2 * 3 * 5\n    print(is_multiply_prime(14))  # False: 14 = 2 * 7\n    print(is_multiply_prime(18))  # True: 18 = 2 * 3 * 3"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' at the start\n    return \"db\" + binary + \"db\"   # Add \"db\" at the beginning and end"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n\n# Test cases\nprint(is_happy(\"a\")) # False\nprint(is_happy(\"aa\")) # False\nprint(is_happy(\"abcd\")) # True\nprint(is_happy(\"aabb\")) # False\nprint(is_happy(\"adb\")) # True\nprint(is_happy(\"xyy\")) # False"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n            \n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Convert the given number to binary and then to string\n    bin_num = bin(N)[2:]\n  \n    # Initialize sum variable\n    sum = 0\n  \n    # Traverse through each digit in the binary number\n    for i in bin_num:\n        sum += int(i)\n  \n    return str(sum)"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                result.append((row, col))\n    return sorted(result)"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        sorted_list = sorted(set(lst))\n        if len(sorted_list) < 2:\n            return None\n        else:\n            return sorted_list[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5])) # Should print 2\nprint(next_smallest([5, 1, 4, 3, 2])) # Should print 2\nprint(next_smallest([])) # Should print None\nprint(next_smallest([1, 1])) # Should print None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    boredoms = 0\n    sentences = re.split('\\.|\\?|\\!', S)\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1 or (n % 2 == 0 and n > 2): \n            return False\n        return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n    \n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(d):\n    if len(d) == 0:   # If dictionary is empty, return False\n        return False\n    lower = 0         # Initialize count of lower case keys\n    upper = 0         # Initialize count of upper case keys\n    for key in d:     # For each key in the dictionary\n        if type(key) == str:      # If key is a string,\n            if key.islower():     # and it's all lower case,\n                lower += 1          # increment count of lower case keys.\n            elif key.isupper():   # Otherwise, if it's all upper case,\n                upper += 1          # increment the count of upper case keys.\n            else:                 # If it is not only lower or upper case,\n                return False        # return False.\n    return lower == len(d) or upper == len(d)   # Return True if all keys are either lower or upper case."}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    num = float(value)\n    if num > 0 and num - int(num) >= 0.5:\n        return int(num) + 1\n    elif num < 0 and int(num) - num >= 0.5:\n        return int(num) - 1\n    else:\n        return int(num)"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i)\n    return result\n\n# Test cases\nprint(make_a_pile(3))  # [3, 5, 7]\nprint(make_a_pile(4))  # [4, 6, 8]\nprint(make_a_pile(5))  # [5, 7, 9]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    if ',' in s:\n        return [word.strip() for word in s.split(',')]\n    else:\n        return [word.strip() for word in s.split(' ')]\n\nprint(words_string(\"Hi, my name is John\")) # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\")) # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    else:\n        return max([i for i in range(x, y+1) if i % 2 == 0], default = -1)\n\nprint(choose_num(12, 15))  # 14\nprint(choose_num(13, 12))  # -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    binary = bin(avg)[2:]   # Remove '0b' from start of string\n    return binary"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i-1)\n    \n    def summation(i):\n        return i * (i + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(summation(i))\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    evens = 0\n    odds = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)\n\nprint(even_odd_palindrome(3)) # expected output (1, 2)\nprint(even_odd_palindrome(12)) # expected output (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    # Find the maximum number and its index\n    max_num = max(arr)\n    max_idx = arr.index(max_num)\n    \n    # If maximum number is at the beginning, return True\n    if max_idx == 0:\n        return True\n    \n    # Check if maximum number is strictly greater than all numbers to its left\n    for i in range(max_idx - 1):\n        if arr[i] > max_num:\n            return False\n        \n    # If not, return True\n    return True"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Check if it's possible to make all elements of lst1 even by exchanging some elements with lst2\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and any(x % 2 == 0 for x in lst2):\n            return \"YES\" # If there's an odd number in lst1 and an even number in lst2, return \"YES\"\n    return \"NO\" # If no such pair of numbers is found, return \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Remove all occurrences of characters in c from s\n    for char in c:\n        if char in s:\n            s = s.replace(char, '')\n    # Check if the string is palindrome\n    is_palindrome = s == s[::-1]\n    return (s, is_palindrome)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    # calculate total water units\n    total_water = sum(row.count(1) for row in grid)\n    \n    # calculate minimum number of trips\n    trips = math.ceil(total_water / (capacity * len(grid[0])))\n    \n    return trips * len(grid)  # multiply by the number of wells"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\ndef maximum(arr, k):\n    # Make all numbers in arr positive by converting them to their absolute value\n    abs_arr = [abs(num) for num in arr]\n    \n    # Use heappushpop (pushes the value item on the heap and then pops and returns the smallest element)\n    # to maintain a max-heap of the k largest numbers seen so far\n    heapq.heapify(abs_arr)  \n    for _ in range(len(abs_arr), k):  # Because we want 'k' maximum numbers\n        heapq.heappushpop(abs_arr, 0)  # pushes 0 and pops the smallest element\n    \n    # Construct the result by pushing -1 * abs_num for each number in abs_arr.\n    # This is because we made all numbers positive before and now we want to\n    # return the original numbers\n    res = []\n    for num in abs_arr:\n        if len(res) == k:\n            break\n        if -1 * abs_num not in res:  # To avoid duplicate values, if there are negative numbers in arr\n            res.append(-1 * abs_num)\n    \n    return sorted(res, reverse=True)"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] >= 0 and arr[i] <= 99: # at most two digits\n            sum += arr[i]\n    return sum\n\n# Test the function\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nprint(add_elements(arr, k)) # Output: 24"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    else:    \n        seq = [1, 3] + [0]*n  # initialize sequence with first two elements\n        for i in range(2, n+1):\n            if i % 2 == 0:  # for even values of i\n                seq[i] = 1 + i // 2\n            else:  # for odd values of i\n                seq[i] = seq[i-2] + seq[i-1] + seq[i+1]  \n        return seq[:n+1]  # return the first n+1 elements of the sequence"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    # Convert n to string to be able to iterate over its digits\n    str_n = str(n)\n    \n    # Initialize product to 1 (since 1 is the identity for multiplication)\n    product = 1\n    \n    # Iterate over each character in the string\n    for digit in str_n:\n        # Convert the character back to an integer\n        int_digit = int(digit)\n        \n        # If the digit is odd, multiply it with the current product\n        if int_digit % 2 != 0:\n            product *= int_digit\n    \n    # Return the product, or 0 if no odd digits were found (in which case product would still be 1)\n    return product if product > 1 else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            stack.pop()\n    if len(stack) != 0:\n        return False\n    return string.count('[') > string.count(']')"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    return sum(math.ceil(n)**2 for n in lst)"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if string is empty\n    if not txt.strip():\n        return False\n    \n    # Get last character and strip() function to eliminate the impact of spaces.\n    last_char = txt.strip()[-1]\n    \n    # Check if it's an alphabetical character and not a part of a word\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(n, 0, -1):\n            factorial *= i\n        return factorial"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n\n    return ' '.join(result)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Splitting the input strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculating the resulting numerator and denominator\n    res_num = x_num * n_num\n    res_den = x_den * n_den\n    \n    # Checking if the result is a whole number (i.e., the denominator after multiplication is 1)\n    return res_den == 1"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x)))), \n                  enumerate(nums))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and ((num // 10) % 2 == 1 or (num % 10) % 2 == 1):\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15])) # Expected output: 1 \nprint(specialFilter([33, -2, -3, 45, 21, 109])) # Expected output: 2\nprint(specialFilter([12, 111, 222, 1333, 4444])) # Expected output: 3\nprint(specialFilter([-7, -55, 66, 777])) # Expected output: 0"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Initialize an empty list to store calculated values\n    a = []\n    \n    # Calculate each value from 1 to n and store it in the list\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n        \n    # Initialize a counter for valid triples\n    count = 0\n    \n    # Check all possible triples (i, j, k) where i < j < k\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                # If the sum of the triple is a multiple of 3, increment the counter\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    solar_system = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        index1 = solar_system.index(planet1)\n        index2 = solar_system.index(planet2)\n        if index1 < index2:\n            return tuple(solar_system[i] for i in range(index1+1, index2))\n        else:\n            return tuple(solar_system[i] for i in range(index2+1, index1))\n    except ValueError:\n        return ()"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over each number in the list\n    for num in lst:\n        # Ignore if number is negative or not an integer\n        if num < 0 or not isinstance(num, int):\n            continue\n        # If the number is odd, add its square to the sum\n        if num % 2 != 0:\n            sum += num ** 2\n    return sum"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = 0\n    \n    for extension in extensions:\n        uppercase_letters = sum(1 for char in extension if char.isupper())\n        lowercase_letters = sum(1 for char in extension if char.islower())\n        \n        strength = uppercase_letters - lowercase_letters\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a , b):\n    # Check if length of b is greater than a\n    if len(b) > len(a):\n        return False\n    # Generate all possible rotations of b and check if any of them exists in a\n    for _ in range(len(b)):\n        b = b[-1] + b[:-1]  \n        if b in a:\n            return True\n    # If none of the rotations found, return False\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_number = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_number += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_number\n\n# Test cases\nprint(int_to_mini_roman(19) == 'xix')\nprint(int_to_mini_roman(152) == 'clii')\nprint(int_to_mini_roman(426) == 'cdxxvi')"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # sort the sides to make sure c is the longest side (hypotenuse)\n    sides = sorted([a, b, c])\n    \n    # apply the Pythagorean theorem condition: \n    # a^2 + b^2 = c^2, where c is the hypotenuse\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# test cases to validate the solution\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False\nprint(right_angle_triangle(6, 8, 10)) # True\nprint(right_angle_triangle(5, 12, 13)) # True\nprint(right_angle_triangle(7, 24, 25)) # True\nprint(right_angle_triangle(3, 6, 8)) # False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.upper() if char.islower() else char.lower() for char in s)"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    if a > b: # swap the variables if a is greater than b\n        a, b = b, a\n    result = []  # list to hold the even digits\n    for num in range(a, b + 1): # iterate over the numbers between a and b (inclusive)\n        digits = list(map(int, str(num)))  # convert each number to string then to list of digits\n        for digit in digits:\n            if digit % 2 == 0 and digit not in result:  # check if the digit is even and not already in the result list\n                result.append(digit)\n    return sorted(result)  # sort the result list in ascending order and return it"}

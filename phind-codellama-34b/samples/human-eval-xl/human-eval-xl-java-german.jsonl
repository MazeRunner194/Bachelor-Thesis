{"task_id": "java/0", "language": "java", "completion": "public class Main {\n\n    public static boolean belowZero(List<Integer> transactions) {\n        int balance = 0;\n        \n        for (int i : transactions){\n            balance += i;\n            if (balance < 0){\n                return true;\n            }\n        }\n      \n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(belowZero(Arrays.asList(1,2,3))); // should print False\n        System.out.println(belowZero(Arrays.asList(1,2,-4,5))); // should print True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\npublic class SumProduct {\n    public static Pair sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        if(numbers != null && !numbers.isEmpty()){\n            for(int num : numbers){\n                sum += num;\n                product *= num;\n            }\n        }\n        return new Pair(sum, product);\n    }\n    \n    static class Pair{\n        private int sum;\n        private int product;\n        \n        public Pair(int sum, int product){\n            this.sum = sum;\n            this.product = product;\n        }\n        \n        //override the toString() method\n        @Override\n        public String toString(){\n            return \"(\" + sum + \", \" + product + \")\";\n        }\n    }\n    \n    public static void main(String []args){\n        List<Integer> nums = new ArrayList<Integer>();\n        nums.add(1);\n        nums.add(2);\n        nums.add(3);\n        nums.add(4);\n        \n        System.out.println(sumProduct(nums));  //prints (10,24)\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "public class StringXor {\n\n    public static void main(String[] args) {\n        System.out.println(stringXor(\"010\", \"110\"));  // Output: 100\n    }\n\n    public static String stringXor(String a, String b){\n        StringBuilder sb = new StringBuilder();\n        \n        for(int i=0;i<a.length();i++){\n            // XOR operation of each character\n            char xor = (a.charAt(i) == b.charAt(i)) ? '0' : '1';\n            sb.append(xor);\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "public class Longest {\n    public static String longest(List<String> strings) {\n        if (strings.isEmpty())\n            return null;\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return longest;\n    }\n    \n    public static void main(String[] args){\n       List<String> list1= new ArrayList<String>();\n       list1.add(\"a\");\n       list1.add(\"bb\");\n       list1.add(\"ccc\");\n       \n       System.out.println(longest(list1));   //prints: ccc\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\nclass SortNumbers {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"null\", 0);\n        map.put(\"eins\", 1);\n        map.put(\"zwei\", 2);\n        map.put(\"drei\", 3);\n        map.put(\"vier\", 4);\n        map.put(\"f\u00fcnf\", 5);\n        map.put(\"sechs\", 6);\n        map.put(\"sieben\", 7);\n        map.put(\"acht\", 8);\n        map.put(\"neun\", 9);\n\n        String[] numberWords = numbers.split(\" \");\n        List<Integer> numbersList = new ArrayList<>();\n\n        for (String word : numberWords) {\n            numbersList.add(map.get(word));\n        }\n\n        Collections.sort(numbersList);\n\n        for (int i = 0; i < numbersList.size(); i++) {\n            String word = \"\";\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue().equals(numbersList.get(i))) {\n                    word = entry.getKey();\n                    break;\n                }\n            }\n            numberWords[i] = word;\n        }\n\n        return String.join(\" \", numberWords);\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.*;\npublic class RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers){\n        // find max and min values in the list\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        \n        // compute range\n        double range = max - min;\n\n        List<Double> rescaledNumbers = new ArrayList<>();\n        \n        // for each number in the list, apply linear transformation\n        for (double num : numbers){\n            rescaledNumbers.add((num - min) / range);\n        }\n        return rescaledNumbers;\n    }\n    \n    public static void main(String[] args) {\n        List<Double> input = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(input));\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "public class FlipCase {\n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\"));\n    }\n\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.*;\npublic class GetPositive {\n    public static List<Integer> getPositive(List<Integer> list) {\n        List<Integer> positiveList = new ArrayList<>();\n        for (int num : list) {\n            if (num > 0) {\n                positiveList.add(num);\n            }\n        }\n        return positiveList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(getPositive(numbers)); // prints [2, 5, 6]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "public class IsPrime {\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isPrime(6));      // False\n        System.out.println(isPrime(101));    // True\n        System.out.println(isPrime(11));     // True\n        System.out.println(isPrime(13441));  // False\n        System.out.println(isPrime(61));     // True\n        System.out.println(isPrime(4));      // False\n        System.out.println(isPrime(1));      // False\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    public static List<Integer> unique(List<Integer> l) {\n        // Create a new HashSet\n        Set<Integer> set = new HashSet<>();\n        \n        // Add all elements from list to set, this will automatically remove duplicates\n        set.addAll(l);\n        \n        // Create a new ArrayList and add all unique elements\n        List<Integer> uniqueList = new ArrayList<>(set);\n        \n        return uniqueList;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.util.*;\n\npublic class PrimeFib {\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n\n    public static int primeFib(int n) {\n        int count = 0;\n        int num = 1;\n        while (count < n) {\n            num++;\n            if (isPrime(fib(num))) {\n                count++;\n            }\n        }\n        return fib(num - 1);\n    }\n    \n    public static void main(String[] args){\n\t\tSystem.out.println(primeFib(5)); //prints: 89\n\t}\n}"}
{"task_id": "java/12", "language": "java", "completion": "// Check if list size is less than 3, return false directly.\n        if (l.size() < 3) {\n            return false;\n        }\n\n        // Sort the list.\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            int a = l.get(i);\n\n            // Two pointers to find negation of a.\n            int start = i + 1;\n            int end = l.size() - 1;\n\n            while (start < end) {\n                if (l.get(start) + l.get(end) == -a) {\n                    return true;\n                } else if (l.get(start) + l.get(end) < -a) {\n                    start += 1;\n                } else {\n                    end -= 1;\n                }\n            }\n        }\n\n        // Return false if the loop completes and no triplet is found.\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\npublic class PairsSumToZero {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        \n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true; // there exists a pair whose sum is 0\n            }\n            set.add(num);\n        }\n\n        return false; // no such pair found\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "public static int fib4(int n) {\n    if (n < 0) {\n        throw new IllegalArgumentException(\"n must be >= 0\");\n    }\n    \n    // array to keep the values of fib4(i) for i between 0 and n\n    int[] fib4Values = new int[n+1];\n    \n    // base cases\n    fib4Values[0] = 0;\n    fib4Values[1] = 0;\n    fib4Values[2] = 2;\n    fib4Values[3] = 0;\n    \n    // compute the other values using a loop\n    for (int i = 4; i <= n; i++) {\n        fib4Values[i] = fib4Values[i-1] + fib4Values[i-2] + fib4Values[i-3] + fib4Values[i-4];\n    }\n    \n    // the result is the value at index n\n    return fib4Values[n];\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\nclass Median {\n    public static Number median(List<Integer> l) {\n        // Sorting the list in ascending order\n        Collections.sort(l);\n        \n        double median;\n        int n = l.size(); // number of elements in list\n        \n        if (n % 2 != 0) // if number of elements is odd\n            median = (double) l.get(n/2); // Median is the middle element\n        else // if number of elements is even\n            median = (double) ((l.get((n-1)/2) + l.get(n/2)) / 2); // Median is average of two middle elements\n        \n        return median;\n    }\n    \n    public static void main(String[] args){\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(list1)); // Output: 3\n        \n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(list2)); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "public class IsPalindrome {\n    public static boolean isPalindrome(String str) {\n        int i = 0, j = str.length() -1;\n        \n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n    \n    public static void main(String[] args){\n\tSystem.out.println(isPalindrome(\"\")); // True\n\tSystem.out.println(isPalindrome(\"aba\")); // True\n\tSystem.out.println(isPalindrome(\"aaaaa\")); // True\n\tSystem.out.println(isPalindrome(\"zbcd\")); // False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.util.*;\n\npublic class RemoveVowels {\n    public static String removeVowels(String text) {\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        StringBuilder result = new StringBuilder();\n\n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(removeVowels(\"\"));  // \"\"\n        System.out.println(removeVowels(\"abcdef\\nghijklm\"));  // \"bcdf\\nghjklm\"\n        System.out.println(removeVowels(\"zbcd\"));  // \"zbcd\"\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (int i : l) {\n            if (i >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * \n     * Addiere zwei Zahlen x und y.\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.util.*;\n\npublic class SameChars {\n    public static Boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        return set0.equals(set1);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "if (n <= 0) return 0; // Fibonacci ist nicht definiert f\u00fcr n <= 0\n        if (n == 1) return 1; // Die erste Fibonacci-Zahl ist 1\n        \n        int fibOneAgo = 1, fibTwoAgo = 1; // die ersten beiden Fibonacci-Zahlen\n        int currentFib; // die aktuelle Fibonacci-Zahl\n        \n        for (int i = 2; i < n; i++) {\n            currentFib = fibOneAgo + fibTwoAgo; // addiere die letzten zwei Fibonacci-Zahlen\n            \n            // verschiebe die Werte um eine Stufe weiter\n            fibTwoAgo = fibOneAgo;\n            fibOneAgo = currentFib;\n        }\n        \n        return currentFib; // die gew\u00fcnschte Fibonacci-Zahl ist der endg\u00fcltige Wert von \"currentFib\"\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\npublic class Common {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        // Convert the lists to sets and get their intersection\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        \n        // Convert back to list and return\n        return new ArrayList<>(set1);\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "int largest = -1;\n        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largest = i;\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n        return largest;\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass Derivative {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> deriv = new ArrayList<>();\n        \n        for(int i=1; i<xs.size(); i++) {\n            deriv.add(i * xs.get(i));\n        }\n        \n        return deriv;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // prints [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3))); // prints [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "public static int fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        // Create an array to store the results of fibfib function\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        \n        for(int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        \n        return fib[n];\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "String lowerCase = s.toLowerCase();\n        int count = 0;\n        \n        for (int i = 0; i < lowerCase.length(); i++) {\n            char c = lowerCase.charAt(i);\n            \n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        \n        if (lowerCase.endsWith(\"y\")) {\n            count--;\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\npublic class Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        for (int num : lst) {\n            if (!frequencyMap.containsKey(num)) {\n                frequencyMap.put(num, Collections.frequency(lst, num));\n            }\n        }\n\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() > 0 && entry.getValue() >= entry.getKey()) {\n                return entry.getKey();\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.lang.Math; \n\npublic static Double triangleArea(int a, int b, int c) {\n    // Pr\u00fcfe ob Dreieck g\u00fcltig ist\n    if (a + b > c && a + c > b && b + c > a) {\n        double r = (double)(a+b+c) / 2; // Umkreisradius\n        double area = Math.sqrt(r * (r-a) * (r-b) * (r-c)); // Fl\u00e4chenberechnung\n        return Math.round(area * 100.0) / 100.0; // auf zwei Dezimalstellen runden\n    } else {\n        return -1.0;\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "public class WillItFly {\n\n    // Function to check whether list q will fly or not\n    public static boolean willItFly(List<Integer> q, int w) {\n        int totalWeight = 0;\n\n        // Check whether list is palindrome or not\n        if (!isPalindrome(q)){\n            return false;\n        }\n\n        // Calculate the total weight of the objects in list q\n        for (Integer val : q) {\n            totalWeight += val;\n        }\n\n        // Check whether total weight is less than or equal to maximum possible weight w\n        if (totalWeight <= w){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Function to check whether list is palindrome or not\n    public static boolean isPalindrome(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n\n        while (start < end) {\n            if (!q.get(start).equals(q.get(end))) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.*;\n\npublic class IsMultiplyPrime {\n    public static boolean isMultiplyPrime(int a) {\n        Set<Integer> primes = new HashSet<>();\n        for (int i = 2; i <= Math.sqrt(a); ++i) {\n            while (a % i == 0 && a > 1) {\n                primes.add(i);\n                a /= i;\n            }\n        }\n        if (a > 1) {\n            primes.add(a);\n        }\n        return primes.size() == 3 && !Arrays.asList(2, 3, 5).contains(a);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // true\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "public class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n\n    public static void main(String[] args){\n        System.out.println(decimalToBinary(15));   // returns \"db1111db\"\n        System.out.println(decimalToBinary(32));   // returns \"db100000db\"\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i <= s.length() - 3; i++) {\n            String substring = s.substring(i, i + 3);\n\n            if (substring.charAt(0) == substring.charAt(1) ||\n                substring.charAt(0) == substring.charAt(2) ||\n                substring.charAt(1) == substring.charAt(2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "public static List<String> numericalLetterGrade(List<Number> grades) {\n    List<String> result = new ArrayList<>();\n    for (Number grade : grades){\n        if (grade.doubleValue() == 4.0){\n            result.add(\"A+\");\n        } else if (grade.doubleValue() > 3.7){\n            result.add(\"A\");\n        } else if (grade.doubleValue() > 3.3){\n            result.add(\"A-\");\n        } else if (grade.doubleValue() > 3.0){\n            result.add(\"B+\");\n        } else if (grade.doubleValue() > 2.7){\n            result.add(\"B\");\n        } else if (grade.doubleValue() > 2.3){\n            result.add(\"B-\");\n        } else if (grade.doubleValue() > 2.0){\n            result.add(\"C+\");\n        } else if (grade.doubleValue() > 1.7){\n            result.add(\"C\");\n        } else if (grade.doubleValue() > 1.3){\n            result.add(\"C-\");\n        } else if (grade.doubleValue() > 1.0){\n            result.add(\"D+\");\n        } else if (grade.doubleValue() > 0.7){\n            result.add(\"D\");\n        } else if (grade.doubleValue() > 0.0){\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}"}
{"task_id": "java/35", "language": "java", "completion": "public class Main {\n    public static boolean isPrime(int n){\n        if (n <= 1) return false; // 0 and 1 are not prime numbers\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static boolean primeLength(String str){\n        int len = str.length();\n        return isPrime(len);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(primeLength(\"Hello\"));      // True\n        System.out.println(primeLength(\"abcdcba\"));    // True\n        System.out.println(primeLength(\"kittens\"));    // True\n        System.out.println(primeLength(\"orange\"));     // False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public class Solve {\n    public static void main(String[] args) {\n        System.out.println(solve(1000));  // Outputs 1\n        System.out.println(solve(150));   // Outputs 6\n        System.out.println(solve(147));   // Outputs 12\n    }\n\n    public static String solve(int n) {\n        int sumOfDigits = 0;\n\n        while (n > 0) {\n            sumOfDigits += n % 10;\n            n /= 10;\n        }\n        \n        return Integer.toBinaryString(sumOfDigits);\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\npublic class GetRow {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\npublic class NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        // Sort the list\n        Collections.sort(lst);\n        \n        // The second distinct smallest number is the second element in sorted array\n        if (lst.size() > 1 && !lst.get(0).equals(lst.get(1))) {\n            return lst.get(1);\n        } else {\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)))); // prints: 2\n        System.out.println(nextSmallest(new ArrayList<>(Arrays.asList(5, 1, 4, 3, 2)))); // prints: 2\n        System.out.println(nextSmallest(new ArrayList<>())); // prints: null\n        System.out.println(nextSmallest(new ArrayList<>(Arrays.asList(1, 1)))); // prints: null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "import java.util.*;\n\npublic class IsBored {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\");\n        int boredomLevel = 0;\n\n        for (String sentence : sentences){\n            if (sentence.trim().startsWith(\"Ich\")){\n                boredomLevel++;\n            }\n        }\n        \n        return boredomLevel;\n    }\n    \n    public static void main(String[] args) {\n\tSystem.out.println(isBored(\"Hello world\")); // 0\n\tSystem.out.println(isBored(\"The sky is blue. The sun is shining. Ich love this weather\")); // 1\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(skjkasdkd(lst));  //Output: 11\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = -1;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n\n        if (maxPrime == -1) return 0; // If no prime number found\n\n        int sumDigits = 0;\n        while (maxPrime != 0) {\n            sumDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumDigits;\n    }\n    \n    public static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.*;\npublic class CheckDictCase {\n    public static Boolean checkDictCase(Map<String, String> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLower = true; \n        boolean allUpper = true; \n\n        for (String key : dict.keySet()){\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        \n        return allLower || allUpper; \n    }\n    \n    public static void main(String[] args) {\n        Map<String, String> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        \n        Map<String, String> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        \n        System.out.println(checkDictCase(dict1)); // Should print: true\n        System.out.println(checkDictCase(dict2)); // Should print: false\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n        if (num - floor > ceil - num) {\n            return ceil;\n        } else {\n            return floor;\n        }\n    }\n    \n    public static void main(String[] args){\n        System.out.println(closest_integer(\"10\")); //Output: 10\n        System.out.println(closest_integer(\"15.3\"));//Output: 15\n        System.out.println(closest_integer(\"-14.5\"));//Output: -15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "ArrayList<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (n % 2 == 0) {\n                pile.add(n + 2 * i);\n            } else {\n                pile.add(n + 2 * i);\n            }\n        }\n        return pile;\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.*;\n\npublic class WordsString {\n   public static List<String> words_string(String s) {\n      // The string can be split by either comma or space\n      String[] splitArray = s.split(\"[, ]\");\n      \n      // Convert the array to an ArrayList and return it\n      return new ArrayList<>(Arrays.asList(splitArray));\n   }\n   \n   public static void main(String[] args) {\n      List<String> result = words_string(\"Hi, my name is John\");\n      \n      // Print the result\n      for (String word : result) {\n         System.out.println(word);\n      }\n   }\n}"}
{"task_id": "java/45", "language": "java", "completion": "public class ChooseNum {\n    public static int chooseNum(int x, int y) {\n        // if y is odd, decrease it by 1 to make it even\n        if (y % 2 != 0) {\n            y--;\n        }\n        // if y is still greater or equal to x and y is even, return y\n        if (y >= x && y % 2 == 0) {\n            return y;\n        }\n        // if there is no even number in the range [x, y], return -1\n        else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "public static Object roundedAvg(int n, int m) {\n    if (n > m) {\n        return -1;\n    } else {\n        int avg = (n + m) / 2;\n        String binary = Integer.toBinaryString(avg);\n        return \"0b\" + binary;\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.*;\npublic class F {\n    public static List<Integer> f(int n){\n        List<Integer> list = new ArrayList<>();\n        for (int i=1; i<=n; i++){\n            if (i%2 == 0) { //checks if number is even\n                int fact = 1;\n                for (int j=1; j<=i; j++) {\n                    fact *= j;\n                }\n                list.add(fact);\n            } else { //number is odd\n                int sum = 0;\n                for (int j=1; j<=i; j++){\n                    sum += j;\n                }\n                list.add(sum);\n            }\n        }\n        return list;\n    }\n     public static void main(String[] args) {\n        System.out.println(f(5)); //[1, 2, 6, 6, 15]\n     }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int[] count = new int[2];\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                count[isEven(i) ? 0 : 1]++;\n            }\n        }\n        return Arrays.asList(count);\n    }\n    \n    private static boolean isPalindrome(int num) {\n        int r, sum = 0, temp;    \n        temp = num;    \n        while (num > 0)    \n        {    \n            r = num % 10;    \n            sum = (sum * 10) + r;    \n            num = num / 10;    \n        }    \n        if (temp == sum)    \n            return true;    \n        else     \n            return false;  \n    } \n    \n    private static boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "public class MoveOneBall {\n   public static boolean moveOneBall(List<Integer> list) {\n      int n = list.size();\n      for (int i = 0; i < n - 1; ++i) {\n         if (list.get(i) > list.get(i + 1)) { // find the first pair where left > right\n            return true;\n         }\n      }\n      return false;\n   }\n}"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int oddCountLst1 = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCountLst1++;\n        }\n    }\n\n    int evenCountLst2 = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCountLst2++;\n        }\n    }\n\n    return oddCountLst1 == evenCountLst2 ? \"YES\" : \"NO\";\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\npublic class ReverseDelete {\n\n    public static List<Object> reverseDelete(String s, String c) {\n        Set<Character> set = new HashSet<>();\n        StringBuilder sb = new StringBuilder();\n        \n        // Convert string c to set for constant time lookup\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n        \n        // Delete all characters in s that exist in set\n        for (char ch : s.toCharArray()) {\n            if (!set.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n        \n        String result = sb.toString();\n        boolean isPalindrome = new StringBuilder(result).reverse().toString().equals(result);\n        \n        return Arrays.asList(result, isPalindrome);\n    }\n    \n    public static void main(String[] args) {\n        List<Object> result = reverseDelete(\"abcde\", \"ae\");\n        System.out.println(\"Result: \" + result.get(0));  // Result: bcd\n        System.out.println(\"Is Palindrome: \" + result.get(1));  // Is Palindrome: false\n        \n        result = reverseDelete(\"abcdef\", \"b\");\n        System.out.println(\"Result: \" + result.get(0));  // Result: acdef\n        System.out.println(\"Is Palindrome: \" + result.get(1));  // Is Palindrome: false\n        \n        result = reverseDelete(\"abcdedcba\", \"ab\");\n        System.out.println(\"Result: \" + result.get(0));  // Result: cdedc\n        System.out.println(\"Is Palindrome: \" + result.get(1));  // Is Palindrome: true\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "public static int maxFill(List<List<Integer>> grid, int capacity) {\n    int total = 0;\n\n    for (List<Integer> row : grid) {\n        int count = 0;\n        \n        // Calculate the number of cells that contain water in the current row.\n        for (int cell : row) {\n            if (cell == 1) {\n                count++;\n            }\n        }\n        \n        // Divide by capacity and round up.\n        total += (count + capacity - 1) / capacity;\n    }\n    \n    return total;\n}"}
{"task_id": "java/53", "language": "java", "completion": "public class SelectWords {\n    public static List<String> select_words(String s, int n) {\n        String[] words = s.split(\" \");\n        List<String> selectedWords = new ArrayList<>();\n        \n        for (String word : words) {\n            int count = 0; // Count of consonants in the current word\n            for (char c : word.toCharArray()) {\n                String lowerCaseC = Character.toString(c).toLowerCase();\n                if (!lowerCaseC.equals(\"a\") && !lowerCaseC.equals(\"e\") && !lowerCaseC.equals(\"i\") \n                    && !lowerCaseC.equals(\"o\") && !lowerCaseC.equals(\"u\")) {\n                    count++; // Increment the consonant count if it is a consonant\n                }\n            }\n            if (count == n) {\n                selectedWords.add(word); // Add word to result list if it has 'n' consonants\n            }\n        }\n        \n        return selectedWords;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(select_words(\"Mary had a little lamb\", 4)); // ==> [\"little\"]\n        System.out.println(select_words(\"Mary had a little lamb\", 3)); // ==> [\"Mary\", \"lamb\"]\n        System.out.println(select_words(\"simple white space\", 2)); // ==> []\n        System.out.println(select_words(\"Hello world\", 4)); // ==> [\"world\"]\n        System.out.println(select_words(\"Uncle sam\", 3)); // ==> [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\npublic class Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        // Initializing priority queue with Collections.reverseOrder() for descending order\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (int num : arr) {\n            pq.add(num);\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        while (k-- > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "public class AddElements {\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 0 && arr.get(i) <= 99)\n                sum += arr.get(i);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end   = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) \n            return \"NO\";\n        \n        int len = end - start + 1;\n        if (len < 2) \n            return \"NO\";\n\n        for (int i = 2; i <= Math.sqrt(len); i++) {\n            if (len % i == 0) \n                return \"NO\";\n        }\n        \n        return \"YES\";\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // Output: YES\n        System.out.println(intersection(Arrays.asList(1, 2), Arrays.asList(2, 3)));     // Output: NO\n        System.out.println(intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4)));    // Output: NO\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\npublic class Tri {\n    public static List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0){\n            result.add(1);\n            return result;\n        } else {\n            for (int i = 0; i <= n; i++) {\n                if (i == 1)\n                    result.add(3);\n                else if (i % 2 == 0)\n                    result.add((int)(result.get(i / 2 - 1) + 1));\n                else\n                    result.add((int)(result.get(i - 2) + result.get(i - 1) + 3));\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args){\n\t   List<Integer> list = tri(3);\n       System.out.println(list); //prints [1, 3, 2, 8]\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public class Digits {\n    \n    public static void main(String[] args) {\n        System.out.println(digits(1));  // prints: 1\n        System.out.println(digits(4));  // prints: 0\n        System.out.println(digits(235)); // prints: 15\n    }\n    \n    public static int digits(int n) {\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            \n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n            \n            n /= 10;\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "public class IsNested {\n    public static boolean isNested(String s) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                    if (!stack.isEmpty() && c == ']' && stack.peek() == '[') {\n                        return true;\n                    }\n                }\n            }\n        }\n        return !stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // \u279e True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // \u279e False\n        System.out.println(isNested(\"[][]\")); // \u279e False\n        System.out.println(isNested(\"[]\")); // \u279e False\n        System.out.println(isNested(\"[[][]]\")); // \u279e True\n        System.out.println(isNested(\"[[]][[\")); // \u279e True\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "int sum = 0;\n        for (Number num : lst) {\n            sum += Math.ceil(num.doubleValue()) ^ 2; // First round to the nearest integer then square\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    // Check if string is empty\n    if (txt == null || txt.length() == 0) {\n        return false;\n    }\n\n    // Get the last character and the second to last character\n    char lastChar = txt.charAt(txt.length() - 1);\n    char secondToLastChar = ' ';\n    if (txt.length() > 1) {\n        secondToLastChar = txt.charAt(txt.length() - 2);\n    }\n\n    // Return true if the last character is a letter and the second to last character is not a letter or a space\n    return Character.isLetter(lastChar) && !(Character.isLetter(secondToLastChar) || secondToLastChar == ' ');\n}"}
{"task_id": "java/62", "language": "java", "completion": "for (int i = 1; i < arr.size(); i++) {\n            if ((Integer)arr.get(i) <= (Integer)arr.get(i - 1)) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num < 0 && (largestNegative == null || num > largestNegative)) {\n                    largestNegative = num;\n                } else if (num > 0 && (smallestPositive == null || num < smallestPositive)) {\n                    smallestPositive = num;\n                }\n            }\n        }\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // Output: [null, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<Object>())); // Output: [null, null]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // Output: [null, null]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "import java.math.*;\n\nclass SpecialFactorial {\n    public static long specialFactorial(int n) {\n        BigInteger result = BigInteger.ONE;\n        \n        for (int i = n; i > 0; i--) {\n            result = result.multiply(factorial(i));\n        }\n\n        return result.longValue();\n    }\n\n    public static BigInteger factorial(int num) {\n        BigInteger fact = BigInteger.ONE;\n\n        for (int i = 2; i <= num; i++) {\n            fact = fact.multiply(BigInteger.valueOf(i));\n        }\n\n        return fact;\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "public class WordsInSentence {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word + \" \");\n            }\n        }\n        \n        // remove the last space\n        if (result.length() > 0) {\n            result.deleteCharAt(result.length() - 1);\n        }\n\n        return result.toString();\n    }\n    \n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "public class Simplify {\n   public static void main(String[] args) {\n      System.out.println(simplify(\"1/5\", \"5/1\")); // should print true\n      System.out.println(simplify(\"1/6\", \"2/1\")); // should print false\n      System.out.println(simplify(\"7/10\", \"10/2\")); // should print false\n   }\n   \n   public static boolean simplify(String x, String n) {\n      int numeratorX = Integer.parseInt(x.split(\"/\")[0]);\n      int denominatorX = Integer.parseInt(x.split(\"/\")[1]);\n      \n      int numeratorN = Integer.parseInt(n.split(\"/\")[0]);\n      int denominatorN = Integer.parseInt(n.split(\"/\")[1]);\n   \n      int lcm = (denominatorX * denominatorN) / gcd(denominatorX, denominatorN);\n      \n      return (numeratorX * numeratorN) % lcm == 0;\n   }\n   \n   public static int gcd(int a, int b){\n      if(b==0) return a;\n      return gcd(b, a%b);\n   }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\nclass OrderByPoints {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        // Create a new list to store the original indices along with numbers\n        ArrayList<Pair> pairList = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            pairList.add(new Pair(nums.get(i), i));\n        }\n        \n        // Sort the pairList using a custom comparator\n        Collections.sort(pairList, new Comparator<Pair>() {\n            public int compare(Pair p1, Pair p2) {\n                int sum1 = sumDigits(p1.num);\n                int sum2 = sumDigits(p2.num);\n                \n                // First sort by the sum of digits, then by original position (index)\n                if (sum1 == sum2) {\n                    return p1.index - p2.index;\n                } else {\n                    return sum1 - sum2;\n                }\n            }\n            \n            // Helper method to calculate the sum of digits in a number\n            private int sumDigits(int num) {\n                num = Math.abs(num);  // make sure it is positive\n                int sum = 0;\n                while (num > 0) {\n                    sum += num % 10;\n                    num /= 10;\n                }\n                return sum;\n            }\n        });\n        \n        // Extract the sorted numbers from pairList\n        ArrayList<Integer> sortedNums = new ArrayList<>();\n        for (Pair p : pairList) {\n            sortedNums.add(p.num);\n        }\n        \n        return sortedNums;\n    }\n    \n    static class Pair {\n        int num;\n        int index;\n        Pair(int num, int index) {\n            this.num = num;\n            this.index = index;\n        }\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "public class Specialfilter {\n    \n    public static int specialFilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                int firstDigit = Math.abs(num / 10);\n                int lastDigit = num % 10;\n                \n                if ((firstDigit % 2 != 0) && (lastDigit % 2 != 0))\n                    count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(15, -73, 14, -15);\n        System.out.println(specialFilter(list1)); // prints: 1\n        \n        List<Integer> list2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        System.out.println(specialFilter(list2)); // prints: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.util.*;\n\npublic class Main {\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 1; i <= n; ++i) {\n            a[i-1] = i * i - i + 1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i+1; j < n; ++j) {\n                for (int k = j+1; k < n; ++k) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); // Outputs 1\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "List<String> allPlanets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = allPlanets.indexOf(planet1), index2 = allPlanets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) { // If either planet is not found in the list\n            return Collections.emptyList();\n        }\n        \n        List<String> selectedPlanets = new ArrayList<>();\n        \n        for (int i = Math.min(index1, index2) + 1; i < Math.max(index1, index2); i++) {\n            selectedPlanets.add(allPlanets.get(i));\n        }\n        \n        return selectedPlanets;\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public class XOrY {\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false; // zero and one are not prime numbers\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false; // 'n' has a factor other than 1 and itself, so it is not prime\n            }\n        }\n        return true; // 'n' is a prime number\n    }\n    \n    public static int xOrY(int n, int x, int y) {\n        return isPrime(n) ? x : y;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "public static int doubleTheDifference(List<Object> lst) {\n    // Initialize result\n    int res = 0;\n    \n    for (Object obj : lst) {\n        if (obj instanceof Integer && (int) obj > 0) {\n            int num = (int) obj;\n            \n            if (num % 2 != 0) { // Number is odd\n                res += num * num; // Add square of number to result\n            }\n        }\n    }\n    \n    return res;\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.*;\n\npublic class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        String strongest = \"\";\n        int maxDiff = Integer.MIN_VALUE;\n        for (String ext : extensions) {\n            int CAP = 0, SM = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) CAP++;\n                else SM++;\n            }\n            int diff = CAP - SM;\n            if (diff > maxDiff) {\n                maxDiff = diff;\n                strongest = ext;\n            }\n        }\n        return className + \".\" + strongest;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\",\"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\",\"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\",\"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\",\"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\",\"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\",\"simen\")); // True\n    }\n    \n    public static boolean cycpatternCheck(String a, String b) {\n        return a.contains(b) || a.contains(b + b) || a.contains(b + b + b);\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "public class IntToMiniRoman {\n    \n    static HashMap<Integer, String> map = new HashMap<>();\n    \n    static {\n        map.put(1000, \"m\");\n        map.put(900, \"cm\");\n        map.put(500, \"d\");\n        map.put(400, \"cd\");\n        map.put(100, \"c\");\n        map.put(90, \"xc\");\n        map.put(50, \"l\");\n        map.put(40, \"xl\");\n        map.put(10, \"x\");\n        map.put(9, \"ix\");\n        map.put(5, \"v\");\n        map.put(4, \"iv\");\n        map.put(1, \"i\");\n    }\n    \n    public static String intToMiniRoman(int num) {\n        StringBuilder sb = new StringBuilder();\n        \n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            while (num >= entry.getKey()) {\n                num -= entry.getKey();\n                sb.append(entry.getValue());\n            }\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // outputs: xix\n        System.out.println(intToMiniRoman(152)); // outputs: clii\n        System.out.println(intToMiniRoman(426)); // outputs: cdxxvi\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "// Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Use the Pythagorean theorem to check if the triangle is right-angled\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n    \n    public static void main(String[] args){\n       System.out.println(rightAngleTriangle(3, 4, 5)); // returns: true\n       System.out.println(rightAngleTriangle(1, 2, 3)); // returns: false\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "public class Solve {\n    public static String solve(String s) {\n        boolean hasLetter = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetter = true;\n                break;\n            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\n                    sb.append(Character.toLowerCase(c));\n                else\n                    sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (!hasLetter) {\n            return sb.reverse().toString();\n        } else {\n            return sb.toString();\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\"));  // Prints \"4321\"\n        System.out.println(solve(\"ab\"));   // Prints \"AB\"\n        System.out.println(solve(\"#a@C\")); // Prints \"#A@c\"\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\"); \n            byte[] messageDigest = md.digest(text.getBytes()); \n            BigInteger no = new BigInteger(1, messageDigest); \n            String hashtext = no.toString(16); \n            \n            while (hashtext.length() < 32) { \n                hashtext = \"0\" + hashtext; \n            }\n            \n            return hashtext; \n        }\n        \n        catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\npublic class GenerateIntegers {\n    public static List<Integer> generateIntegers(int a, int b){\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <=b ; i++) {\n            String numAsString = String.valueOf(i);\n            boolean hasEvenDigit = false;\n            for (int j = 0; j < numAsString.length(); j++){\n                if ((numAsString.charAt(j) - '0') % 2 == 0){\n                    hasEvenDigit = true;\n                    break;\n                }\n            }\n            if (hasEvenDigit){\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); //[2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); //[2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); //[]\n    }\n}"}

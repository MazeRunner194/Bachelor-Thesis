{"task_id": "typescript/0", "language": "typescript", "completion": "let balance = 0;\n  \nfor(let i=0;i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0) return true;\n}\nreturn false;\n}"}
{"task_id": "typescript/1", "language": "typescript", "completion": "let sum=0;\n    let product=1;\n    for(let i=0;i<numbers.length;i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return [sum,product];\n}"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const result = [];\n    for(let i=0;i<a.length;++i) {\n        result.push(a[i] !== b[i] ? '1' : '0');\n    }\nreturn result.join('');\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "if(strings.length === 0){\n    return null;\n}\n\nlet longestString = strings[0];\nfor(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length){\n        longestString = strings[i];\n    }\n}\n\nreturn longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "let divisor = 1;\n    for(let i=1; i<=a && i<=b; i++)\n    {\n        if(a%i==0 && b%i==0){\n            divisor = i;\n        }\n    }\n    return divisor;\n}"}
{"task_id": "typescript/5", "language": "typescript", "completion": "let numberWords : string[] = numbers.split(\" \");\nnumberWords.sort();\nreturn numberWords.join(\" \");\n}"}
{"task_id": "typescript/6", "language": "typescript", "completion": "// Bestimme die kleinste und gr\u00f6\u00dfte Zahl in der Liste\nlet minNum = Math.min(...numbers);\nlet maxNum = Math.max(...numbers);\n\n// Berechne den Skalierungsfaktor\nlet scaleFactor = (maxNum === minNum) ? 1 : (1 / (maxNum - minNum));\n\n// Transformiere die Liste der Zahlen\nreturn numbers.map(num => (num - minNum) * scaleFactor);\n}"}
{"task_id": "typescript/7", "language": "typescript", "completion": "let result = '';\n    for(let i=0; i < string0.length; i++) {\n        let char = string0[i];\n        if(char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n//Test case:\nconsole.log(flip_case(\"Hello\")); //Returns 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "return l.filter(num => num > 0);\n}"}
{"task_id": "typescript/9", "language": "typescript", "completion": "if (n <= 1) return false; // keine Primzahlen sind kleiner oder gleich 1\n  if (n <= 3) return true; // 2 und 3 sind Primzahlen\n  \n  // alle mehrfachen von 2 und 3 \u00fcberpr\u00fcfen\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  \n  let i = 5;\n  while(i * i <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n    // Schritt von 6 erh\u00f6hen, da alle Primzahlen entweder 6n - 1 oder 6n + 1 sind\n    i += 6;\n  }\n  \n  return true;\n}"}
{"task_id": "typescript/10", "language": "typescript", "completion": "let result = l.sort((a,b) => a - b);\n    let finalResult = [result[0]];\n    \n    for(let i=1; i<result.length; i++) {\n        if(result[i] !== result[i-1]) {\n            finalResult.push(result[i]);\n        }\n    }\n    return finalResult;\n} \n\nconsole.log(unique([5,3,5,2,3,9,0,123]))"}
{"task_id": "typescript/11", "language": "typescript", "completion": "let fibPrimeCount = 0;\n    let num = 2; //start checking from 2 as it is the first prime number\n  \n    while(true){\n        if(isFibonacci(num)){\n            fibPrimeCount++;\n            if(fibPrimeCount === n)\n                return num;\n        }\n        num++;\n    }\n};\n  \n  //helper function to check if a number is a fibonacci number\n  const isFibonacci = function (num: number) : boolean{\n      let a = 0;\n      let b = 1;\n      let c;\n      \n      if( num === a || num === b ) return true; //0 and 1 are fibonacci numbers\n  \n      while (a + b <= num){\n          c = a+b;\n          a = b;\n          b = c;\n  \n          if(c === num) return true; //num is a fibonacci number\n      }\n      \n      return false; //not a fibonacci number\n  };"}
{"task_id": "typescript/12", "language": "typescript", "completion": "let len = l.length;\n    if (len < 3) {\n        return false;\n    }\n    l.sort((a, b) => a - b);\n  \n    for (let i = 0; i < len - 1; i++) {\n        let j = i + 1;\n        let k = len - 1;\n  \n        while (j < k) {\n            if (l[i] + l[j] + l[k] === 0) {\n                return true;\n            } else if (l[i] + l[j] + l[k] < 0) {\n                j += 1;\n            } else {\n                k -= 1;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "let map = {}; // Create a hashmap to store the values\nfor(let num of l) {\n    if(map[num]) { // If value already exists in map, return true\n        return true;\n    } else {\n        map[-num] = 1; // Add the negation of number to map\n    }\n}\nreturn false; // If no pair adds up to zero, return false\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "let arr = [0,0,2,0];\n  \n    if( n < 4 ) return arr[n];\n    let res = 0;\n    \n    for(let i=4; i <=n ; i++){\n        res = arr[0] + arr[1] + arr[2] + arr[3];\n        \n        arr.shift(); // remove the first element of array\n        arr.push(res); \n    }\n  \n    return res;\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "// Sort the array in ascending order\nl.sort((a, b) => a - b);\n\n// Calculate the median\nlet median;\nif (l.length % 2 === 0) {\n    // If there is an even number of elements, return the average of the two middle numbers.\n    let mid1 = l[l.length / 2 - 1];\n    let mid2 = l[l.length / 2];\n    median = (mid1 + mid2) / 2;\n} else {\n    // If there is an odd number of elements, return the middle one.\n    median = l[(l.length - 1) / 2];\n}\nreturn median;\n}"}
{"task_id": "typescript/16", "language": "typescript", "completion": "let reversedText = text.split(\"\").reverse().join(\"\");\nreturn text === reversedText;\n}"}
{"task_id": "typescript/17", "language": "typescript", "completion": "let result = '';\n    for(let i = 0; i < text.length; i++) {\n        if(!('aeiouAEIOU'.includes(text[i]))) {\n            result += text[i];\n        }\n    }\n    return result;\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "return l.every(num => num < t);\n}"}
{"task_id": "typescript/19", "language": "typescript", "completion": "return x + y;\n}"}
{"task_id": "typescript/20", "language": "typescript", "completion": "// Create a frequency map for the characters in each string.\n  const getCharMap = (str: string) => {\n    let charMap = {};\n    for(let i=0;i<str.length;i++){\n      if(charMap[str[i]]){\n        charMap[str[i]]++;\n      } else {\n        charMap[str[i]] = 1;\n      }\n    }\n    return charMap;\n  }\n  \n  let map0 = getCharMap(s0);\n  let map1 = getCharMap(s1);\n  \n// Check if the frequency maps are equivalent. If they are, then the two strings contain the same characters.\n  for (let key in map0) {\n    if (!(key in map1) || map0[key] !== map1[key]) {\n      return false;\n    }\n  }\n  \n  for (let key in map1) {\n    if (!(key in map0)) {\n      return false;\n    }\n  }\n  \n  return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "let previousFibonacciNumber = 0;\n    let currentFibonacciNumber = 1;\n\n    if (n <= 1) {\n        return n;\n    }\n\n    for(let i = 2; i <= n; i++){\n        const temp = currentFibonacciNumber;\n        currentFibonacciNumber += previousFibonacciNumber;\n        previousFibonacciNumber = temp;\n    }\n\n    return currentFibonacciNumber;\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "function common(l1: number[], l2: number[]): number[] {\n    // Convert arrays to sets to easily get unique values\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    // Filter the first array by checking if each item exists in the second set\n    // Also, convert it back to a number[] instead of a Set\n    return l1.filter((item) => set2.has(item)).sort((a, b) => a - b);\n}"}
{"task_id": "typescript/23", "language": "typescript", "completion": "while (n % 2 == 0) {\n        let maxPrime = 2;\n        return maxPrime;\n    }\n\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i == 0) {\n            let maxPrime = i;\n            return maxPrime;\n        }\n    }\n\n    if (n > 2) {\n        let maxPrime = n;\n        return maxPrime;\n    } else {\n        return -1;\n    }\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "return n*(n+1)/2;\n}"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: number[]): number[] {\n  // We start from the 2nd element since the first one's derivative is always 0\n  return xs.slice(1).map((x, i) => x * (i + 1));\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "let memo = {};\n    if (n === 0 || n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else if (memo[n]) {\n        return memo[n];\n    } else {\n        memo[n] = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        return memo[n];\n    }\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n    }\n  \n    if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n        count++;\n    }\n  \n    return count;\n};\n\nconsole.log(vowels_count(\"abcde\")); // Output: 2\nconsole.log(vowels_count(\"ACEDY\")); // Output: 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "let countObj = {};\n    // Counting frequencies of each number in the list\n    for(let i=0; i < lst.length; i++){\n        if(countObj[lst[i]]){\n            countObj[lst[i]]++;\n        } else {\n            countObj[lst[i]] = 1;\n        }\n    }\n    \n    // Finding the number which has frequency greater than or equal to itself\n    let maxNum = -1;\n    for(let key in countObj){\n        if(countObj[key] >= parseInt(key) && parseInt(key) > maxNum){\n            maxNum = parseInt(key);\n        }\n    }\n    \n    return maxNum;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "// TypeScript implementation of the problem statement\nfunction gerade(a:number, b:number, c:number):boolean{\n    return a + b > c && a + c > b && b + c > a;\n}\n\nif (gerade(a,b,c)) {\n    let s = (a+b+c)/2;\n    let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n    return Math.round(area * 100) / 100;\n} else {\n    return -1;\n}\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "let totalWeight = q.reduce((a,b)=> a+b, 0);\n  \n  if(totalWeight > w){\n    return false;\n  }\n  \n  let start = 0, end = q.length -1;\n  \n  while(start < end) {\n      if(q[start] !== q[end]){\n          return false;\n      }\n      start++;\n      end--;\n  }\n  \n  return true;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "function is_multiply_prime(a: number): boolean {\n    let factors = getPrimeFactors(a);\n    let product = 1;\n    \n    for (let i=0; i<factors.length; i++){\n        if (product * factors[i] > a){\n            return false; // Too large, no need to continue\n        }\n        product *= factors[i];\n    }\n    \n    return product == a;\n}\n\nfunction getPrimeFactors(num: number): Array<number> {\n    let factors = new Array<number>();\n    for (let i = 2; num > 1; i++) {\n        while ((num % i) == 0) {\n            factors.push(i);\n            num /= i;\n        }\n    }\n    return factors;\n}"}
{"task_id": "typescript/32", "language": "typescript", "completion": "let binaryString = decimal.toString(2);\nreturn 'db' + binaryString + 'db';\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "if (s.length < 3) {\n    return false;\n}\n\nfor (let i = 0; i <= s.length - 3; i++) {\n    const substring = s.substring(i, i + 3);\n    if (substring[0] === substring[1] || substring[0] === substring[2] || substring[1] === substring[2]) {\n        return false;\n    }\n}\n\nreturn true;\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "let result: string[] = [];\n\n  grades.forEach((grade) => {\n    if(grade == 4.0){\n      result.push(\"A+\");\n    } else if (grade > 3.7) {\n      result.push(\"A\");\n    } else if (grade > 3.3) {\n      result.push(\"A-\");\n    } else if(grade > 3.0){\n      result.push(\"B+\");\n    } else if (grade > 2.7) {\n      result.push(\"B\");\n    } else if (grade > 2.3) {\n      result.push(\"B-\");\n    } else if(grade > 2.0){\n      result.push(\"C+\");\n    } else if (grade > 1.7) {\n      result.push(\"C\");\n    } else if (grade > 1.3) {\n      result.push(\"C-\");\n    } else if(grade > 1.0){\n      result.push(\"D+\");\n    } else if (grade > 0.7) {\n      result.push(\"D\");\n    } else if (grade > 0.0) {\n      result.push(\"D-\");\n    } else if(grade == 0){\n      result.push(\"E\");\n    }\n  });\n  \n  return result;\n};"}
{"task_id": "typescript/35", "language": "typescript", "completion": "let n: number = string0.length;\n  \n    // Function to check if a number is prime or not\n    const isPrime = (num: number) => {\n        for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if(num % i === 0) return false; // If the number is divisible by any number up to its square root then it's not a prime\n        return num > 1; // Otherwise, if the number is greater than 1 then it's a prime\n    }\n    \n    // Return true if the length of the string is a prime number, false otherwise.\n    return isPrime(n);\n}\n  \n\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const sumOfDigits = N.toString(2).split('').reduce((acc, curr) => acc + parseInt(curr), 0);\nreturn sumOfDigits.toString(2);\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "let result: Array<Array<number>> = [];\n  \nfor(let i=0; i < lst.length; i++){\n    for(let j=0; j < lst[i].length; j++){\n        if(lst[i][j] === x){\n            result.push([i, j]);\n        }\n    }\n}\n  \nreturn result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "let smallest = Number.MAX_VALUE;\n    let second_smallest = Number.MAX_VALUE;\n  \n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n            smallest = lst[i];\n        } else if (lst[i] < second_smallest && lst[i] != smallest) {\n            second_smallest = lst[i];\n        }\n    }\n  \n    return isFinite(second_smallest) ? second_smallest : null;\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "let sentences = S.split(/[.!?]/);\nlet count = 0;\nfor(let sentence of sentences){\n    if(sentence.trim().startsWith(\"Ich\")){\n        count++;\n    }\n}\nreturn count;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num < 2) return false;\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0) return false;\n    return true;\n}\n\nfunction sumDigits(num: number): number {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}\n\nfunction skjkasdkd(lst: Array<number>): number {\n    let primeNumbers = lst.filter(isPrime);\n    if (primeNumbers.length === 0) return 0;\n    let maxPrime = Math.max(...primeNumbers);\n    return sumDigits(maxPrime);\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "let keys = Array.from(dict.keys());\n    let lowerCaseKeys = keys.map(key => typeof key === 'string' && key === key.toLowerCase());\n    let upperCaseKeys = keys.map(key => typeof key === 'string' && key === key.toUpperCase());\n    \n    if (keys.length === 0) {\n        return false;\n    } else if (lowerCaseKeys.every(Boolean) || upperCaseKeys.every(Boolean)) {\n        return true;\n    } else {\n        return false;\n    }\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const num = parseFloat(value);\n  \n  if (Number.isNaN(num)) {\n    throw new TypeError('\"value\" must be a valid number');\n  }\n  \n  return math.round(num, 0);\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "let pile = []\nfor (let i=0; i < n; i++){\n    if(n%2 === 0){\n        // N\u00e4chste gerade Zahl\n        pile.push(n+2*i)\n    } else {\n        // N\u00e4chste ungerade Zahl\n        pile.push(n+2*i-1)\n    }\n}\nreturn pile\n}; \n\nconsole.log(make_a_pile(3)) // [3, 5, 7]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "return s.split(/[\\s,]+/);\n}"}
{"task_id": "typescript/45", "language": "typescript", "completion": "function choose_num(x: number, y: number): number {\n    // If y is odd then reduce it by 1 to make it even\n    if (y % 2 != 0) {\n        y--;\n    }\n    // If y is still greater than or equal to x and is even, return y\n    if (y >= x && y % 2 == 0) {\n        return y;\n    }\n    // If no even number exists in the range [x, y], return -1\n    else {\n        return -1;\n    }\n}"}
{"task_id": "typescript/46", "language": "typescript", "completion": "if (n > m) {\n    return -1;\n}\n\nlet sum = 0;\nfor(let i=n; i<=m; i++) {\n    sum += i;\n}\n\nlet avg = Math.round((sum / (m-n+1)));\n\nreturn avg.toString(2);\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "function f(n: number): Array<number> {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let fac = 1;\n            for (let j = 1; j <= i; j++) {\n                fac *= j;\n            }\n            result.push(fac);\n        } else {\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n}"}
{"task_id": "typescript/48", "language": "typescript", "completion": "let even = 0;\n    let odd = 0;\n\n    for(let i = 1; i <= n; i++) {\n        if(i.toString() === i.toString().split('').reverse().join('')) { // Check if the number is a palindrome\n            if (i % 2 == 0) even++; // If it's even, increment the even counter\n            else odd++; // Otherwise increment the odd counter\n        }\n    }\n\n    return [even, odd]; // Return the results as an array\n};\n\nconsole.log(even_odd_palindrome(3));  // Output: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Output: [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "// Funktion, um die maximale Rotation f\u00fcr die gegebene Liste zu bestimmen\nfunction maxRotation(list: Array<number>): number {\n    let len = list.length;\n   // Initialisiere den Index des minimen Elements im Array\n    let minIndex = 0;\n    for (let i = 1; i < len; i++) {\n        if (list[i] < list[minIndex]) {\n            minIndex = i;\n        }\n    }\n   // Berechne die Anzahl der Rotationen, die erforderlich sind, um das minimste Element an den Anfang des Arrays zu bringen.\n    return (len - minIndex) % len;\n}\n\n// \u00dcberpr\u00fcfe, ob das Array nach dem Ausf\u00fchren von maxRotation sortiert wird\nfunction isSorted(list: Array<number>): boolean {\n    for (let i = 0; i < list.length - 1; i++) {\n        if (list[i] > list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Wenn das Array leer ist, gib True zur\u00fcck\nif (!arr.length) {\n    return true;\n}\n   // Bestimme die Anzahl der Rotationen f\u00fcr das gegebene Array\nlet rotations = maxRotation(arr);\n   // \u00dcberpr\u00fcfe, ob das Array nach dem Ausf\u00fchren von rotations Rechtsschiebeoperationen sortiert wird.\nreturn isSorted(arr.slice(rotations).concat(arr.slice(0, rotations)));\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "// Zuerst z\u00e4hlen wir die ungeraden Zahlen in beiden Listen\n    let ungeradeInLst1 = lst1.filter(zahl => zahl % 2 !== 0).length;\n    let ungeradeInLst2 = lst2.filter(zahl => zahl % 2 !== 0).length;\n\n// Wenn in lst1 mehr ungerade Zahlen sind, als in lst2, ist ein Austausch nicht m\u00f6glich\n    if (ungeradeInLst1 > ungeradeInLst2) {\n        return \"NO\";\n    }\n\n// Andernfalls ist ein Austausch m\u00f6glich\n    return \"YES\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "let newStr = \"\";\n    for(let i=0; i < s.length; i++) {\n        if(!c.includes(s[i])) {\n            newStr += s[i];\n        }\n    }\n  \n    let isPalindrome:boolean = false;\n    const reversedNewStr = newStr.split('').reverse().join('');\n    if(newStr === reversedNewStr){\n        isPalindrome = true;\n    }\n  \n    return [newStr, isPalindrome];\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "let result = 0;\n    let bucket = []; // to store amount of water in each cell that has not been emptied yet\n    const rows = grid.length;\n    if(rows === 0) return 0; \n    const cols = grid[0].length;\n    \n    for (let row=0; row<rows; row++) { // iterate through each row of the grid\n        let count = 0; // to store number of times bucket will be emptied in current row\n        let remainingCapacity = capacity;\n        for(let col=0; col<cols; col++){\n            if (grid[row][col] === 1) { // if cell contains water\n                count++; // increment the counter by one as we need to empty the bucket once\n                remainingCapacity--; // decrease the capacity of the bucket by one\n            }\n            if(remainingCapacity === 0){\n                result += count;\n                count = 0;\n                remainingCapacity = capacity;\n            }\n        }\n        if (count > 0) { // for the case when there is some water left in bucket after traversing a row\n            result += count; // add the remaining times we need to empty the bucket in current row\n        }\n    }\n    \n    return result;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "// Split the sentence into words\n    const words = s.split(' ');\n\n    // Filter out words that have exactly n consonants\n    return words.filter(word => {\n        let consonants = word.toLowerCase().replace(/[aeiou]/g, '');\n        return consonants.length === n;\n    });\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "// Sort the array in descending order\n    arr.sort((a, b) => b - a);\n\n    // Slice the array to get the first 'k' numbers\n    return arr.slice(0, k);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "let sum = 0;\n    for(let i = 0; i < k; i++) {\n        let num = arr[i];\n        if (num >= 10 && num <= 99) { // check if number has at most two digits\n            sum += num;\n        }\n    }\n    return sum;\n}"}
{"task_id": "typescript/56", "language": "typescript", "completion": "function intersection(interval1: [number, number], interval2: [number, number]): string {\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) {\n        return 'NO';\n    } else {\n        let length = end - start + 1;\n        \n        // Checking whether the length is a prime number or not\n        if (length < 2) return 'NO';\n        for(let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n            if (length % i === 0) return 'NO';\n        }\n    }\n    \n    return 'YES';\n}"}
{"task_id": "typescript/57", "language": "typescript", "completion": "let result = [0, 1, 3];\n    \n    if(n === 0){\n        return [result[1]];\n    }else if(n === 1){\n        return [result[2]];\n    }else if(n === 2){\n        return [result[0], result[1], result[2]];\n    }\n    \n    let i = 3;\n    while (i <= n) {\n        if(i % 2 == 0){\n            result[i] = result[(i/2)-1] + 1;\n        }else{\n            result[i] = result[i - 1] + result[i - 2] + result[i+1];\n        }\n        i++;\n    }\n    \n    return result.slice(0, n+1); \n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "let numString = String(n);\nlet product = 1;\nlet hasOddDigit = false;\n\nfor (let digit of numString){\n    if (Number(digit) % 2 !== 0){\n        product *= Number(digit);\n        hasOddDigit = true;\n    }\n}\nreturn hasOddDigit ? product : 0;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "let stack: string[] = [];\nfor (let i = 0; i < string0.length; i++) {\n    if (string0[i] === '[') { \n        stack.push(string0[i]);\n    } else {\n        if (!stack.length) {\n            return false;\n        } else {\n            stack.pop();\n        }\n    }\n}\nif (stack.length > 1) {\n    return true;\n} else {\n    return false;\n}\n};\n\nconsole.log(is_nested('[[]]')); // True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // False\nconsole.log(is_nested('[][]')); // False\nconsole.log(is_nested('[]')); // False\nconsole.log(is_nested('[[][]]')); // True\nconsole.log(is_nested('[[]][[')); // True"}
{"task_id": "typescript/60", "language": "typescript", "completion": "let ceilList = lst.map(math.ceil);\nlet squareSum = ceilList.reduce((sum, num) => sum + math.square(num), 0);\nreturn squareSum;\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "// Leerzeichen am Ende des Strings entfernen\n    txt = txt.trim();\n  \n    // Wenn der Text leer ist oder das letzte Zeichen ein Leerzeichen ist, False zur\u00fcckgeben\n    if(txt === '' || txt.slice(-1) === ' ') return false;\n  \n    // Wenn das letzte Zeichen kein alphabetisches Zeichen ist, False zur\u00fcckgeben\n    if(!/[a-zA-Z]/.test(txt.slice(-1))) return false;\n  \n    // Wenn das letzte Zeichen ein Worttrenner ist (z. B. Leerzeichen), False zur\u00fcckgeben\n    if(/[\\s]/.test(txt.slice(-2, -1))) return false;\n  \n    // Ansonsten True zur\u00fcckgeben\n    return true;\n  };"}
{"task_id": "typescript/62", "language": "typescript", "completion": "let result = -1;\n  \nfor(var i = 1; i < arr.length; i++) {\n    if(arr[i] < arr[i-1]){\n        result = i;\n        break;\n    }\n}\nreturn result;\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "let largestNegative = null;\n    let smallestPositive = null;\n  \n    for(let i=0; i < lst.length ; i++){\n        if(lst[i] < 0){\n            if(largestNegative === null || lst[i] > largestNegative)\n                largestNegative = lst[i];\n        }else if(lst[i] > 0){\n            if(smallestPositive === null || lst[i] < smallestPositive)\n                smallestPositive = lst[i];\n        }\n    }\n   return [largestNegative, smallestPositive];\n};\n\nconsole.log(largest_smallest_integers([2, 4, -1, 3, -5, 7])); //[-1, 1]\nconsole.log(largest_smallest_integers([])); //[null, null]\nconsole.log(largest_smallest_integers([0])); //[null, null]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "let result = 1;\nfor(let i=n;i>=1;i--){\n    let fact = 1;\n    for(let j=1;j<=i;j++){\n        fact *= j;\n    }\n    result *= fact;\n}\nreturn result;\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "let result : Array<string> = [];\n    const isPrime = (n:number) => {\n        if(n < 2) return false;\n        for(let i=2, sqrt=Math.sqrt(n); i<=sqrt; i++)\n            if(n % i === 0) return false;\n        return true;\n    }\n    \n    sentence.split(' ').forEach((word: string) => {\n        if (isPrime(word.length)) result.push(word);\n    });\n\n    return result.join(' ');\n};"}
{"task_id": "typescript/66", "language": "typescript", "completion": "// Zuerst splitten wir den Bruch in Z\u00e4hler und Nenner\n    let [Zaehler_x, Nenner_x] = x.split('/').map(Number);\n    let [Zaehler_n, Nenner_n] = n.split('/').map(Number);\n    \n// Dann multipliziere den Z\u00e4hler von x mit dem Nenner von n und umgekehrt\n    let multi_x = Zaehler_x * Nenner_n;\n    let multi_n = Nenner_x * Zaehler_n;\n    \n// Wenn das Ergebnis der Multiplikation identisch ist, dann sind die Bruchzahlen simplifizierbar\n    if(multi_x === multi_n){\n        return true;\n    } else {\n        return false;\n    }\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "let points = nums.map((num, index) => {\n    let sum = String(Math.abs(num)).split('').reduce((acc, cur) => acc + Math.abs(Number(cur)), 0);\n    return {sum: sum, num: num, index: index};\n});\n\npoints.sort((a, b) => a.sum - b.sum || a.index - b.index);\n\nreturn points.map(({num}) => num);\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "let count = 0;\n  for(let i=0; i<nums.length;i++){\n    let num = Math.abs(nums[i]); // make sure the number is positive\n    if(num > 10){\n      let firstDigit = num % 10; // get the last digit \n      let lastDigit = Math.floor(num / 10); // get the first digit\n      if(firstDigit % 2 !== 0 && lastDigit % 2 !== 0){\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // Expected output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Expected output: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "let arrayA: Array<number> = [];\n    for(let i=0; i<n; i++){\n        arrayA[i] = i * i - i + 1;\n    }\n    \n    let triples: number = 0;\n    for (let i=0; i < n-2; i++) {\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((arrayA[i] + arrayA[j] + arrayA[k]) % 3 == 0) {\n                    triples++;\n                }\n            }\n        }\n    }\n    \n    return triples;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "let planetsOrderedByDistanceToSun = [\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"];\nlet result: Array<string> = [];\n\nlet planet1Index = planetsOrderedByDistanceToSun.indexOf(planet1);\nlet planet2Index = planetsOrderedByDistanceToSun.indexOf(planet2);\n\nif (planet1Index === -1 || planet2Index === -1) {\n    return result; // one or both of the input planets are not in our list, so we return an empty array\n} \n\n// make sure that planet1Index is always smaller than planet2Index, to ensure correct order of iteration\nif (planet1Index > planet2Index) {\n    let temp = planet1Index;\n    planet1Index = planet2Index;\n    planet2Index = temp;\n}\n\nfor (let i = planet1Index + 1; i < planet2Index; i++) {\n    result.push(planetsOrderedByDistanceToSun[i]);\n}\n\nreturn result;\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "// Function to check if a number is prime or not\nfunction isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n  \n    let sqrt = Math.floor(Math.sqrt(num));\n    for (let i = 2; i <= sqrt; i++)\n      if (num % i === 0) return false;\n  \n    return true;\n}\n\n// Main function\nif (isPrime(n)) {\n    return x;\n} else {\n    return y;\n}\n\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "let sum = 0;\n  for(let i=0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] % 2 !== 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}"}
{"task_id": "typescript/73", "language": "typescript", "completion": "let strongest_extension = '';\n    let maxDifference = -Infinity;\n\n    for(let extension of extensions){\n        let CAP = [...extension].filter(x => x === x.toUpperCase()).length;\n        let SM = [...extension].filter(x => x === x.toLowerCase()).length;\n        let currentDifference = CAP - SM;\n        \n        if (currentDifference > maxDifference){\n            strongest_extension = extension;\n            maxDifference = currentDifference;\n        }\n    }\n  \n    return `${class_name}.${strongest_extension}`;\n};\n \n// Test the function\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // should print 'my_class.AA'"}
{"task_id": "typescript/74", "language": "typescript", "completion": "let i, j: number;\n    if(b.length > a.length){\n        return false;\n    }\n    for(i=0; i<b.length; ++i){\n        let rotated = b.slice(i) + b.slice(0, i); //rotate b\n        for(j=0; j<=a.length-b.length; ++j){\n            if(a.indexOf(rotated, j) !== -1){\n                return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (num: number): string {\n    const val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ];\n    const syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ];\n    let i = 0;\n    let res = \"\";\n    while (num > 0) {\n        for (let j = 0; j < val.length; j++) {\n            if (val[j] <= num) {\n                num -= val[j];\n                res += syb[j];\n                break;\n            }\n        }\n    }\n    return res;\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "// Die Seite c sollte die l\u00e4ngste sein, weil sie den rechten Winkel einschlie\u00dfen soll. Daher m\u00fcssen wir sicherstellen, dass a und b k\u00fcrzer sind als c und das Dreieck eine g\u00fcltige L\u00f6sung ist.\n\n    let sides = [a, b, c];\n    sides.sort((a, b) => a - b); // Sortiere die Seiten in aufsteigender Reihenfolge\n\n    // Wenn die k\u00fcrzeste Seite (a) und die zweitk\u00fcrzeste Seite (b) zusammen l\u00e4nger als die l\u00e4ngste Seite (c) sind, k\u00f6nnen sie nicht das rechtwinklige Dreieck bilden.\n    if (sides[0] + sides[1] > sides[2]) {\n        return false;\n    } else {\n        // Wenn die k\u00fcrzeste und die zweitk\u00fcrzeste Seite zusammen kleiner oder gleich der l\u00e4ngsten Seite sind, kann das Dreieck ein rechtwinkliges sein.\n        return true;\n    }\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "let result = '';\n    let hasLetter = false;\n\n    for(let i = 0; i < s.length; i++){\n        if((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')){\n            hasLetter = true;\n            result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n\n    if(!hasLetter){\n        return result.split('').reverse().join('');\n    }\n\n    return result;\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "if (!text || text.length === 0) {\n    return null;\n}\nelse {\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n}\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    let evenNumbers: Array<number> = [];\n\n    for(let i=start; i<=end; i++){\n        if(i%2 == 0){\n            evenNumbers.push(i);\n        }\n    }\n    return evenNumbers;\n};"}

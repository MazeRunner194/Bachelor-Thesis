{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []  # stack for keeping track of parentheses groups\n    result = []  # resulting list of separated groups\n\n    for c in paren_string.replace(\" \", \"\"):  # ignore spaces in the input string\n        if c == \"(\":\n            stack.append(c)  # push an open brace into the stack\n        elif c == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()  # pop an open brace from the stack\n            else:\n                while stack and stack[-1] != \"(\":\n                    stack.pop()  # pop close braces until an open brace is found\n                if stack:\n                    stack.pop()  # pop the open brace\n            if not stack or (stack and stack[-1] == \"(\"):\n                result.append(\"\".join(stack))\n        else:\n            raise ValueError(\"Invalid character in input string\")\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number):\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(x - mean) for x in numbers) / n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter if i%2 else numbers[i//2] for i in range(len(numbers)*2-1)]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    stack = []\n    current_max_depth = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            start = stack.pop()\n            if not stack:\n                current_max_depth += 2\n            else:\n                current_max_depth = max(current_max_depth, i - stack[-1])\n    max_depths.append(current_max_depth)\n    \n    return max_depths"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), prod(numbers))\n\ndef prod(lst):\n    p = 1\n    for i in lst:\n        p *= i\n    return p"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]\n            \n    # If no palindromic suffix found, append the reverse of entire string to itself\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Both inputs should have the same length\")\n    \n    result = []\n    for i in range(len(a)):\n        result.append(str(int(a[i]) ^ int(b[i])))\n    \n    return ''.join(result)\n\n# Test cases\nprint(string_xor('010', '110')) # should return '100'"}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    if not strings:  # If the list is empty, return None\n        return None\n    \n    # Initialize the longest string as the first one in the list\n    longest_string = strings[0]\n    \n    # Iterate over each string in the list\n    for s in strings:\n        # If this string's length is greater than the current longest string, update longest_string\n        if len(s) > len(longest_string):\n            longest_string = s\n            \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nprint(greatest_common_divisor(3, 5)) # 1\nprint(greatest_common_divisor(25, 15)) # 5"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "Sequence = \"\"\nfor i in range (n+1):\n  Sequence += str(i)+\" \"\nreturn Sequence.rstrip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string):\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string):\n    notes = music_string.split()\n    beat_values = {'o': 4, 'o|': 2, '.|': 1}\n    beats = [beat_values[note] for note in notes]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numbers_list = numbers.split() # break string into list\n    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, \n                     'six': 6, 'seven': 7, 'eight': 8, 'nine': 9} # map words to numbers\n    numbers_list.sort(key=numbers_dict.get) # sort the list based on numerical value\n    return ' '.join(numbers_list) # join the list back into a string with space delimiter"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i]) if numbers[i-1] < numbers[i] else (numbers[i], numbers[i-1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    result = [] # initialize an empty list for storing integers\n    for value in values:  # iterate over each element in the input list\n        if isinstance(value, int): # check if current element is integer\n            result.append(value) # if it's an integer, append to result list\n    return result # return final result list with all integers"}
{"task_id": "HumanEval/23", "completion": "def strlen(string):\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n//2, 0, -1): #range starts from half of n, ends at 1, decrements by 1\n        if n % i == 0: #checks if i is a divisor\n            return i #returns the largest divisor"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors + [n] * len(factors)"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    \n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n            \n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2: # 2 is the only even prime number\n        return True\n    elif n % 2 == 0: # all other even numbers are not primes\n        return False\n    else:\n        for i in range(3, math.isqrt(n) + 1, 2): # skip even numbers\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs):\n    x = 0  # Start with an initial guess of zero\n    while abs(poly(xs, x)) > 1e-6:  # Check if the current estimate is close enough to the actual root value\n        x = x - poly(xs, x) / derivative(xs, x)  # Refine the estimate using Newton-Raphson method\n    return round(x, 2)  # Return the root rounded to two decimal places\n\ndef derivative(coeffs, x=1):\n    \"\"\"\n    Returns the derivative of a polynomial with coefficients `coeffs` at point `x`.\n    \"\"\"\n    return sum([coeff * i * math.pow(x, i - 1) for i, coeff in enumerate(coeffs)])"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    # Separate the elements which are at indices divisible by 3 into a new list\n    thirds = [l[i] for i in range(0, len(l), 3)]\n\n    # Sort the thirds list\n    thirds.sort()\n    \n    # Create a new sorted list\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0: # Check if index is divisible by 3\n            result.append(thirds.pop(0)) # Take the first element from thirds (which is sorted)\n        else:\n            result.append(l[i]) # Keep the original element\n    \n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    # List of numbers divisible by 11 or 13 and less than n\n    nums = [i for i in range(n) if i % 11 == 0 or i % 13 == 0]\n    \n    # Count the number of times '7' appears in these numbers\n    count = sum(str(num).count('7') for num in nums)\n    \n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # Separate values at even and odd indices into two lists\n    evens = [l[i] for i in range(0,len(l),2)]\n    odds = [l[i] for i in range(1,len(l),2)]\n    \n    # Sort the list with even index values\n    evens.sort()\n    \n    # Recombine them\n    sorted_list = []\n    for e, o in zip(evens, odds):\n        sorted_list.append(e)\n        sorted_list.append(o)\n    if len(evens)>len(odds):\n        sorted_list.append(evens[-1])\n    return sorted_list"}
{"task_id": "HumanEval/38", "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back into their original positions. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n > 5 or n < 1:\n        raise ValueError('n should be between 1 and 5.')\n\n    # The prime numbers in the Fibonacci sequence are 2, 3, 5, 13, and 89\n    primes = [2, 3, 5, 13]\n\n    return primes[n-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    l.sort() # Sorting the list to find the triplets easily\n    for i in range(len(l)-2):        \n        if i > 0 and l[i] == l[i-1]:  # Skipping same elements to find distinct triples\n            continue\n        for j in range(i+1, len(l)-1):\n            if j > i+1 and l[j] == l[j-1]: # Skipping same elements to find distinct triples\n                continue\n            if -l[i]-l[j] in l[j+1:]:     # Checking if sum of remaining list is equal to -(current two elements) \n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    return n*n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    conversion = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}\n    number_as_string = \"\"\n    while x > 0:\n        remainder = x % base\n        if remainder < 10:\n            number_as_string = str(remainder) + number_as_string\n        else:\n            number_as_string = conversion[remainder] + number_as_string\n        x = x // base\n    return number_as_string if number_as_string else '0'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    \n    # Initial values for the sequence defined in the problem statement\n    fib4_seq = [0, 0, 2, 0]\n\n    # Compute the sequence up to the required length\n    while len(fib4_seq) <= n:\n        fib4_seq.append(sum(fib4_seq[-4:]))\n    \n    return fib4_seq[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    n = len(l)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100)) #True\nprint(below_threshold([1, 20, 4, 10], 5)) #False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y.\n    \n    Parameters:\n    x (int): The first number\n    y (int): The second number\n\n    Returns:\n    int: The sum of x and y\n\n    Example:\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input number should be positive\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\" and len(stack) > 0:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    \n    is_increasing = l[0] <= l[1]\n    is_decreasing = l[0] >= l[1]\n    \n    for i in range(1, len(l) - 1):\n        if is_increasing and l[i] > l[i + 1]:\n            return False\n        elif is_decreasing and l[i] < l[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])) # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2])) # [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0 or stack[-1] != \"(\":\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs)][1:]\n\nprint(derivative([3, 1, 2, 4, 5])) # [1, 4, 12, 20]\nprint(derivative([1, 2, 3])) # [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n        \n    return fibfib_list[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    s = s.lower()\n\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # convert x to string and list up digits\n    digits = list(str(x))\n    # perform circular shift\n    if shift > len(digits):\n        # if shift is greater than number of digits, move the last digit to front and remove the last one\n        digits.insert(0, digits.pop())\n    else:\n        # otherwise, rotate list to the left by 'shift' places\n        digits = digits[shift:] + digits[:shift]\n    # convert back to string and return\n    return ''.join(digits)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    s_split = s.split(' ')\n    apples = int(s_split[0])\n    oranges = int(s_split[-1])\n    mangoes = n - (apples + oranges)\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Check if the list is empty or has no even values\n    if not arr or all(n % 2 != 0 for n in arr): \n        return []\n    \n    # Find the smallest even value and its index\n    even_values = [n for n in arr if n % 2 == 0]\n    min_even = min(even_values)\n    min_index = arr.index(min_even)\n\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter  # Import Counter from collections module\n    freq = Counter(lst)              # Calculate frequency of each integer in lst\n    for num in sorted(freq, reverse=True):   # Iterate over numbers in descending order\n        if freq[num] >= num:                 # If the number's frequency is greater or equal to itself\n            return num                      # Return it\n    return -1                              # If no such number exists, return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    \n    while lst:\n        if result and result[-1] == lst[-1]: # check for duplicates\n            result.append(lst.pop())\n        else:\n            result.append(lst.pop())\n            if lst:\n                result.append(lst.pop(-1)) \n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if (a < b + c) and (b < a + c) and (c < a + b):\n        s = (a + b + c) / 2\n        area = round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n        return area\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w  # Check if list is palindromic and its sum is less than or equal to max weight\n\n# Testing the function with provided examples\nprint(will_it_fly([1, 2], 5))  # Expected Output: False\nprint(will_it_fly([3, 2, 3], 1))  # Expected Output: False\nprint(will_it_fly([3, 2, 3], 9))  # Expected Output: True\nprint(will_it_fly([3], 5))  # Expected Output: True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    i, j = 0, len(arr) - 1\n    changes = 0\n    \n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n        \n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # calculate the total number of characters in each list\n    len_lst1 = sum([len(s) for s in lst1])\n    len_lst2 = sum([len(s) for s in lst2])\n    \n    # return the list with fewer characters, or lst1 if they're equal\n    if len_lst1 <= len_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a):\n    factors = []\n    for i in range(2, int(sqrt(a)) + 1):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            if is_prime(a // i):\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return False\n    while x % n == 0:\n        x = x / n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    b = round(a ** (1. / 3))\n    return b ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = set('2357BDF')\n    return sum(1 for i in num if i in primes)"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' at the start\n    return f'db{binary}db'  # Add 'db' at the beginning and end"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n# Test cases\nprint(is_happy(\"a\")) # False\nprint(is_happy(\"aa\")) # False\nprint(is_happy(\"abcd\")) # True\nprint(is_happy(\"aabb\")) # False\nprint(is_happy(\"adb\")) # True\nprint(is_happy(\"xyy\")) # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Loop through each grade in the input list\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    return 19 * (10 ** (n - 1))"}
{"task_id": "HumanEval/84", "completion": "def solve(n):\n    sum_of_digits = sum([int(i) for i in str(n)])\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(val for ind, val in enumerate(lst) if ind % 2 != 0 and val % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(\" \")\n    sorted_words = [\"\".join(sorted(word)) for word in words]\n    return \" \".join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                result.append((row, col))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return array\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            shift = 4 # as the question asks to rotate alphabet by two multiplied to two places\n            if i.islower(): # for lowercase letters\n                result += chr((ord(i) - ord('a') + shift) % 26 + ord('a'))\n            else: # for uppercase letters\n                result += chr((ord(i) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += i # if not a letter, just append it to the result\n    return result\n\n# test cases to check the solution\nprint(encrypt(\"hi\")) # should print \"lm\"\nprint(encrypt(\"asdfghjkl\")) # should print \"ewhjklnop\"\nprint(encrypt(\"gf\")) # should print \"kj\"\nprint(encrypt(\"et\")) # should print \"ix\""}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2: return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for el in lst:\n        if el <= smallest:\n            smallest = el\n        elif el < second_smallest and el > smallest:\n            second_smallest = el\n    if second_smallest == float('inf'): return None\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # Split the string into sentences\n    sentences = S.replace(\"!\", \".\").split(\".\")\n    \n    # Initialize the count of boredoms\n    boredom_count = 0\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\" and increment the count if it does\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    \n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    # Check for equality of sum of two numbers to the third one\n    elif x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n              'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded = []\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Swap case and replace vowel\n                encoded.append(vowels[char.lower()].swapcase() if char.isupper() else vowels[char.lower()])\n            else:\n                # Just swap case\n                encoded.append(char.swapcase())\n        else:\n            encoded.append(char)\n    \n    return ''.join(encoded)\n\nprint(encode('test'))  # Outputs: 'TGST'\nprint(encode('This is a message'))  # Outputs: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    # Helper function to check if a number is prime.\n    def is_prime(n):\n        if n <= 1 or (n % 2 == 0 and n > 2): \n            return False\n        return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n\n    max_prime = -1\n    \n    # Go through the list and update max_prime with the largest prime found.\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n            \n    # If no primes are found, return 0.\n    if max_prime == -1:\n        return 0\n    \n    # Split the digits of max_prime and return their sum.\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # If dictionary is empty, return False\n        return False\n    \n    lower = 0\n    upper = 0\n\n    # Check case of all keys in dictionary\n    for key in dictionary.keys():\n        if isinstance(key, str):  # If key is string\n            if key.islower():  # If key is in lower case\n                lower += 1\n            elif key.isupper():  # If key is in upper case\n                upper += 1\n            else:\n                return False\n                \n    # If all keys are either in lower or upper case, return True. Else, return False.\n    if lower == len(dictionary) or upper == len(dictionary):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n    return last_digit_a * last_digit_b\n\nprint(multiply(148, 412)) # should return 16.\nprint(multiply(19, 28)) # should return 72.\nprint(multiply(2020, 1851)) # should return 0.\nprint(multiply(14,-15)) # should return 20."}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in 'AEIOU')"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    lower = int(num)\n    upper = int(num) + 1 if num > 0 else int(num) - 1\n    \n    lower_diff = abs(lower - num)\n    upper_diff = abs(upper - num)\n    \n    if lower_diff < upper_diff:\n        return lower\n    elif lower_diff == upper_diff:\n        # Rounding away from zero\n        return upper if num > 0 else lower\n    else:\n        return upper"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(n + 2*i)\n        else:\n            result.append(n + 2*i)\n    return result\n\nprint(make_a_pile(3))"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return re.split(', | ', s)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # check if x is even, if not increase by 1 to make it even\n    if x % 2 != 0:\n        x += 1\n    \n    # Iterate from y down to x and return the first even number found\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n            \n    # If no even numbers were found, return -1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    bin_avg = bin(avg)[2:] # Convert to binary and discard the \"0b\" at the start\n    return bin_avg"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(int(d) % 2 != 0 for d in str(n))\n\n    return sorted(el for el in x if has_no_even_digit(el))\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_map = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    nums = sorted([n for n in arr if 1 <= n <= 9], reverse=True)\n    return [num_map[n] for n in nums]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        return 1 if i == 0 else i * factorial(i - 1)\n    \n    def sum_to_n(i):\n        return (i * (i + 1)) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to_n(i) for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    evens = sum(1 for i in range(1, n + 1) if i % 2 == 0 and is_palindrome(i))\n    odds = sum(1 for i in range(1, n + 1) if i % 2 != 0 and is_palindrome(i))\n    \n    return (evens, odds)\n\nprint(even_odd_palindrome(3)) # Expected output: (1, 2)\nprint(even_odd_palindrome(12)) # Expected output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        # if number is negative, ignore the first digit which is '-'\n        start = 1 if num < 0 else 0\n        sum_digits = sum(int(digit) for digit in str(abs(num))[start:])\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    return arr.index(max(arr)) == len(arr) - 1"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = sum(i % 2 == 0 for i in lst1)\n    odd_count = len(lst1) - even_count\n    even_count_other = sum(i % 2 == 0 for i in lst2)\n    \n    # Check if we have enough even numbers in lst2 to make all elements of lst1 even\n    if even_count_other >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    counts = {}\n    max_count = -1\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n        max_count = max(max_count, counts[letter])\n    \n    return {k: v for k, v in counts.items() if v == max_count}\n\n# Test cases\nprint(histogram('a b c')) # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a')) # {'a': 2, 'b': 2}\nprint(histogram('a b c a b')) # {'a': 2, 'b': 2}\nprint(histogram('b b b b a')) # {'b': 4}\nprint(histogram('')) # {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c.\n    new_str = ''.join([i for i in s if i not in c])\n    \n    # Check if the string is a palindrome.\n    is_palindrome = new_str == new_str[::-1]\n    \n    return (new_str, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(int(c) % 2 for c in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    current_sum = max_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = min(current_sum + num, num)  # either add the number to the current sum or start a new sum from this number\n        max_sum = min(max_sum, current_sum)       # update the maximum sum\n    \n    return max_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, bucket_capacity):\n    count = 0\n    for row in grid:\n        count += sum(row) // bucket_capacity\n        if sum(row) % bucket_capacity != 0:\n            count += 1\n    return count\n\n# Test Cases\ngrid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nprint(max_fill(grid1, 1)) # expected output 6\n\ngrid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nprint(max_fill(grid2, 2)) # expected output 5\n\ngrid3 = [[0,0,0], [0,0,0]]\nprint(max_fill(grid3, 5)) # expected output 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    \nprint(sort_array([1, 5, 2, 3, 4])) # [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6])) # [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4])) # [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    vowels = \"aeiou\"\n    words = s.split()\n    return [word for word in words if sum(1 for letter in word.lower() if letter not in vowels) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    word = word[::-1]  # reverse the string as we need to search from right side\n    for i in range(1, len(word) - 1):  # avoid first and last character\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    stack = []\n    for c in s1 + s2:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) > 0 and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) != 0:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    # Use -1 * value to get a max-heap instead of min-heap\n    heapq.nlargest(k, arr, key=lambda x: -1 * x)"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Using list comprehension to get the numbers with at most two digits from the first k elements\n    two_digit_nums = [num for num in arr[:k] if 0 <= num <= 99]\n    \n    # Return the sum of these numbers\n    return sum(two_digit_nums)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return collatz(n // 2)\n        else:\n            return [n] + collatz((3 * n) + 1)\n\n    sequence = collatz(n)\n    odd_numbers = filter(lambda x: x % 2 != 0, sequence)\n\n    # The problem statement asks for the list to be sorted, so we use the sorted() function\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "import re\nimport calendar\n\ndef valid_date(date):\n    # Checks format, splits date into month, day, year\n    match = re.fullmatch(r\"(\\d{2})-(\\d{2})-(\\d{4})\", date)\n    \n    if not match:\n        return False\n    \n    month, day, year = map(int, match.groups())\n    \n    # Checks if month in valid range (1-12) \n    if month < 1 or month > 12:\n        return False\n    \n    # Checks number of days in month for validity\n    if day < 1 or day > calendar.monthrange(year, month)[1]:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    # if txt contains whitespace\n    if ' ' in txt:\n        return re.split('\\s', txt)\n    # elif txt contains comma\n    elif ',' in txt:\n        return re.split(',', txt)\n    # else calculate and return the number of lower-case letters with odd order in the alphabet\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1 and c.islower())"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    \n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n            \n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        \"\"\"Helper function to check if an integer is a prime number.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # calculate the intersection of two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # check if the length is a prime number\n    if end - start < 0 or not is_prime(end - start):\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    total = 0\n    sign = 1\n    for num in arr:\n        if num < 0:\n            sign *= -1\n            total += abs(num)\n        elif num > 0:\n            total += abs(num)\n            \n    return sign * total\n\nprint(prod_signs([1, 2, 2, -4])) # Expected output -9\nprint(prod_signs([0, 1])) # Expected output 0\nprint(prod_signs([])) # Expected output None"}
{"task_id": "HumanEval/129", "completion": "import heapq\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)] # up, down, left, right\n    heap = []\n    visited = set()\n    \n    for i in range(N):\n        for j in range(N):\n            path = [grid[i][j]]\n            heapq.heappush(heap, (str(path), i, j)) # use string of the path as priority\n\n    while k > 1:\n        _, i, j = heapq.heappop(heap)\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if (ni >= 0 and ni < N and nj >= 0 and nj < N): # within grid\n                path = [grid[ni][nj]] + [p for p in heap[0][0] if p not in path]\n                heapq.heappush(heap, (str(path), ni, nj))\n        k -= 1\n\n    return [int(i) for i in heap[0][0]] # first path is the minimum"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3] # Tri(0) is defined as 3\n    else:\n        seq = [1, 3] # First two elements of the sequence\n        for i in range(2, n + 1):\n            if i % 2 == 0: # If even\n                val = 1 + (i / 2)\n            else: # If odd\n                val = seq[i - 2] + seq[i - 1] + seq[i] # Recurrence relation\n            seq.append(val)\n        return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n            has_odd = True\n    return odd_product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    return sum(math.ceil(i) ** 2 for i in lst)\n\nimport math"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    elif txt[-1].isalpha():\n        if len(txt.split()) > 1 and txt[-2] != ' ':\n            # If the last character is a letter, but it's part of another word\n            return False\n        else:\n            # If the last character is a standalone letter\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg = []\n    pos = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        elif i > 0:\n            pos.append(i)\n            \n    return (max(neg) if neg else None, min(pos) if pos else None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a.replace(',', '.'))  # replace , with . in case a is a string\n    b = float(b.replace(',', '.'))  # replace , with . in case b is a string\n    if a == b:  \n        return None\n    elif a < b:\n        return str(b).replace('.', ',') if ',' in str(a) else b  # convert back to string and replace . with , if necessary\n    else:\n        return str(a).replace(',', '.') if ',' in str(b) else a  # convert back to string and replace . with , if necessary"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 12:\n        return False\n    elif n % 2 != 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact * special_factorial(n-1)\n\nprint(special_factorial(4))"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = re.sub(' ', '_', text) # replace all spaces with underscores\n    return re.sub('_+', '-', text) # replace all consecutive underscores with a single hyphen\n\n# test the function\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    # Checking all conditions\n    if (len(re.findall('\\d', file_name)) <= 3 and\n        file_name.count('.') == 1 and\n        re.match('^[a-zA-Z]', file_name.split('.')[0]) and\n        file_name.split('.')[1] in ['txt', 'exe', 'dll']):\n        return 'Yes'\n    # If any condition is not met\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split(' ')\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_frac = Fraction(int(x.split('/')[0]), int(x.split('/')[1]))\n    n_frac = Fraction(int(n.split('/')[0]), int(n.split('/')[1]))\n    \n    result = x_frac * n_frac\n\n    # If the result is a whole number, return True. Otherwise, return False.\n    if result.denominator == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n\nprint(order_by_points([1, 11, -1, -11, -12])) # returns [-1, -11, 1, -12, 11]\nprint(order_by_points([])) # returns []\nprint(order_by_points([3,5,18,-9,0])) # returns [0, 3, 5, -9, 18]"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_special(n):\n        if n > 10:\n            first_digit = abs(n) // 10 ** (len(str(abs(n))) - 1)\n            last_digit = abs(n) % 10\n            return first_digit % 2 == 1 and last_digit % 2 == 1\n        else:\n            return False\n\n    count = sum([is_special(n) for n in nums])\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2\nprint(specialFilter([8, 5, 6, 13, 27])) # 0\nprint(specialFilter([-9, 7, -5, 11])) # 2\nprint(specialFilter([0, 100, 1000, 10000])) # 4\nprint(specialFilter([])) # 0"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    planet1_index = planets_order.index(planet1)\n    planet2_index = planets_order.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planets_order[planet1_index+1:planet2_index])\n    else:\n        return tuple(planets_order[planet2_index+1:planet1_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths from list\n    lst = [i for i in lst if len(i) % 2 == 0]\n    # Sort list first by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    \n    for num in lst:\n        if num > 0 and num % 2 == 1: # Ignore numbers that are negative or not integers\n            result += (num ** 2)\n            \n    return result\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0])) # 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0\nprint(double_the_difference([])) # 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # Calculate the strength of each extension\n    strengths = [(ext, len([ch for ch in ext if ch.isupper()]) - \n                     len([ch for ch in ext if ch.islower()])) \n                    for ext in extensions]\n    # Find the extension with maximum strength\n    strongest_extension = max(strengths, key=lambda x: x[1])[0]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    return b in a or b[::-1] in a or b[-1:] + b[:-1] in a or b[-1:] + b[::-1] in a"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = abs(num) # convert the number to positive for simplicity\n    even_count = sum((int(i) % 2 == 0) for i in str(num))\n    odd_count = len(str(num)) - even_count\n    return (even_count, odd_count)\n\n# test cases:\nprint(even_odd_count(-12)) # should return (1, 1)\nprint(even_odd_count(123)) # should return (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # sort the sides to make sure c is the longest side (hypotenuse)\n    sides = sorted([a, b, c])\n    \n    # check if the triangle is right-angled using the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# test cases to validate the solution\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = words[0]\n    max_unique_chars = len(set(words[0]))\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [total, left]\n\nprint(eat(5, 6, 10)) #[11, 4]\nprint(eat(4, 8, 9)) #[12, 1]\nprint(eat(1, 10, 10)) #[11, 0]\nprint(eat(2, 11, 5)) #[7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += \" \" + operators[i] + \" \" + str(operands[i+1])\n    return eval(expression)\n\n# Testing the function with an example\noperator=['+', '*', '-']\noperand=[2, 3, 4, 5]\nprint(do_algebra(operator, operand)) # Expected output: 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]  # If no letters, reverse the string\n    \n    return ''.join(char.upper() if char.islower() else char.lower() for char in s)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        return sorted([i for i in range(b, a + 1) if i % 2 == 0])\n    else:\n        return sorted([i for i in range(a, b + 1) if i % 2 == 0])\n\n# Test cases\nprint(generate_integers(2, 8)) # => [2, 4, 6, 8]\nprint(generate_integers(8, 2)) # => [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # => []"}

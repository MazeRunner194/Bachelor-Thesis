{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.util.*;\nimport static java.util.stream.Collectors.toList;\n\nclass HasCloseElements {\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        List<Double> diffList = numbers.stream()\n                                       .sorted()\n                                       .map(num -> Math.abs(num - numbers.get(0)))\n                                       .collect(toList());\n\n        for (int i = 1; i < diffList.size(); i++) {\n            if (diffList.get(i) <= threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.util.*;\n\npublic class SeparateParenGroups {\n    public static List<String> separateParenGroups(String parenString) {\n        // initialize stack to store opening parentheses\n        Deque<Character> stack = new ArrayDeque<>();\n\n        StringBuilder currentGroup = new StringBuilder();\n        for (char c : parenString.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                // if stack is empty, the parentheses are not properly balanced\n                if (stack.isEmpty()) {\n                    throw new IllegalArgumentException(\"Invalid input: unbalanced parentheses\");\n                }\n                currentGroup.append(stack.pop());\n            }\n        }\n\n        // check if stack is empty, meaning all parentheses are properly closed\n        if (!stack.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid input: unbalanced parentheses\");\n        }\n\n        // iterate through the stack and create groups based on balanced parentheses\n        List<String> result = new ArrayList<>();\n        for (char c : currentGroup.reverse().toCharArray()) {\n            if (c == '(') {\n                if (!result.isEmpty() && result.get(result.size() - 1).charAt(result.get(result.size() - 1).length() - 1) == ')') {\n                    result.get(result.size() - 1) += c;\n                } else {\n                    result.add(new StringBuilder().append(c).toString());\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "import java.io.*;\nimport java.lang.Math;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.Locale;\n\npublic class TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * an integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static BigDecimal truncateNumber(Double number) {\n        // Calculate the integer part as the floor of the given number\n        long intPart = Math.floor(number);\n        // Subtract the integer part from the given number to get the decimal part\n        BigDecimal decimalPart = new BigDecimal(number - intPart);\n        // Round the decimal part to 0 decimals (i.e., only keep the whole number)\n        return decimalPart.setScale(0, RoundingMode.HALF_UP);\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.util.*;\n\npublic class BelowZero {\n\n public static Boolean belowZero(List<Object> operations) {\n // Initialize current balance as 0\n int balance = 0;\n\n // Iterate through the list of operations\n for (Object operation : operations) {\n if (operation instanceof Integer deposit) {\n // Add deposit to the balance\n balance += deposit;\n } else if (operation instanceof Integer withdrawal) {\n // Subtract withdrawal from the balance\n if (balance < 0) {\n // If balance is already below zero, return true as we don't need to check further\n return true;\n }\n balance -= withdrawal;\n }\n }\n\n // If we reached the end of the list without the balance going below zero, return false\n return false;\n }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "import java.util.*;\n\npublic class MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        if (numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be empty.\");\n        }\n\n        double sum = 0;\n        double mean = calculateMean(numbers);\n\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n\n        return sum / numbers.size();\n    }\n\n    private static double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "import java.util.*;\n\npublic class Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimiter) {\n        if (numbers.size() < 2) return numbers; // Return the original list if its size is less than 2\n\n        List<Object> result = new ArrayList<>(numbers);\n        for (int i = 1; i < result.size(); i++) {\n            result.set(i, delimiter + \", \" + result.get(i)); // Replace the current element with the delimiter and the next number\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.util.*;\n\nclass ParseNestedParens {\n    public static List<Integer> parseNestedParens(String parenString) {\n        if (parenString == null || parenString.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Deque<Integer> parenthesesStack = new ArrayDeque<>();\n        String[] groups = parenString.split(\" \");\n        List<Integer> result = new ArrayList<>(groups.length);\n\n        for (String group : groups) {\n            if (!group.isEmpty()) {\n                int depth = parseDepth(group, parenthesesStack);\n                result.add(depth);\n                if (!group.equals(\")\")) {\n                    parenthesesStack.push(depth);\n                } else {\n                    parenthesesStack.pop();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private static int parseDepth(String group, Deque<Integer> parenthesesStack) {\n        if (group.equals(\"(\")) {\n            parenthesesStack.push(parenthesesStack.size() + 1);\n            return parenthesesStack.peek();\n        } else if (group.equals(\")\")) {\n            int depth = parenthesesStack.pop();\n            return depth - 1;\n        } else {\n            throw new IllegalArgumentException(\"Invalid group: \" + group);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "import java.util.*;\n\nclass FilterBySubstring {\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n        // Create an empty list to store the filtered strings\n        List<Object> filteredStrings = new ArrayList<>();\n\n        // Iterate through each string in the input list\n        for (Object str : strings) {\n            // Check if the current string contains the specified substring\n            if (str.toString().contains(substring)) {\n                // If it does, add the string to the filtered list\n                filteredStrings.add(str);\n            }\n        }\n\n        return filteredStrings;\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "public class Tuple {\n    private int first;\n    private int second;\n\n    public Tuple(int sum, int product) {\n        this.first = sum;\n        this.second = product;\n    }\n\n    // getters for the two elements of the tuple\n    public int getSum() {\n        return this.first;\n    }\n\n    public int getProduct() {\n        return this.second;\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.util.*;\n\nclass RollingMax {\n\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        if (numbers.size() <= 1) return numbers;\n\n        List<Integer> rollingMax = new ArrayList<>();\n        rollingMax.add(numbers.get(0));\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax.get(i - 1)) {\n                rollingMax.set(i, numbers.get(i));\n            } else {\n                rollingMax.set(i, rollingMax.get(i - 1));\n            }\n        }\n\n        return rollingMax;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> result = rollingMax(numbers);\n        System.out.println(result); // prints [1, 2, 3, 3, 3, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "public static String makePalindrome(String string) {\n    if (string.length() == 1) return string + string.charAt(0);\n\n    int start = 0;\n    int end = string.length() - 1;\n\n    while (start < end && string.charAt(start) != string.charAt(end)) {\n        if (string.charAt(start) < string.charAt(end)) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n\n    return string.substring(0, start) + new StringBuilder(string.substring(start, end + 1)).reverse().toString() + string.substring(end + 1);\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "public static String stringXor(String a, String b) {\n    if (a.length() != b.length()) {\n        throw new IllegalArgumentException(\"Input strings must have the same length\");\n    }\n\n    char[] result = new char[a.length()];\n    for (int i = 0; i < a.length(); i++) {\n        result[i] = Character.forDigit((charToBit(a.charAt(i)) + charToBit(b.charAt(i))) % 2, 2);\n    }\n\n    return new String(result);\n}\n\nprivate static int charToBit(char c) {\n    if (c == '0') {\n        return 0;\n    } else if (c == '1') {\n        return 1;\n    } else {\n        throw new IllegalArgumentException(\"Invalid input character: \" + c);\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        String maxLengthStr = \"\";\n        int maxLength = 0;\n\n        for (String str : strings) {\n            if (str != null && !str.isEmpty()) {\n                if (str.length() > maxLength) {\n                    maxLength = str.length();\n                    maxLengthStr = str;\n                } else if (str.length() == maxLength) {\n                    maxLengthStr = maxLengthStr + \",\" + str; // in case of multiple strings of the same length, return first one\n                }\n            }\n        }\n        return maxLengthStr;\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0)\n            return a;\n        else\n            return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.util.*;\n\nclass AllPrefixes {\n\n public static List<String> allPrefixes(String string) {\n String result[] = new String[string.length() + 1];\n Arrays.fill(result, \"\");\n for (int i = 0; i < string.length(); ++i) {\n result[i] = string.substring(0, i + 1);\n }\n return new ArrayList<>(Arrays.asList(result));\n }\n\n public static void main(String[] args) {\n Scanner scanner = new Scanner(System.in);\n System.out.print(\"Enter a string: \");\n String input = scanner.nextLine();\n List<String> prefixes = allPrefixes(input);\n for (String prefix : prefixes) {\n System.out.println(prefix);\n }\n }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "public static String stringSequence(int n) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i <= n; ++i) {\n        if (i != 0) {\n            sb.append(' ');\n        }\n        sb.append(i);\n    }\n    return sb.toString();\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class CountDistinctCharacters {\n    public static void main(String[] args) {\n        String input1 = \"xyzXYZ\";\n        String input2 = \"Jerry\";\n\n        System.out.println(\"Count of distinct characters in '\" + input1 + \"': \" + countDistinctCharacters(input1));\n        System.out.println(\"Count of distinct characters in '\" + input2 + \"': \" + countDistinctCharacters(input2));\n    }\n\n    public static int countDistinctCharacters(String string) {\n        Set<Character> characterSet = new TreeSet<>();\n\n        for (int i = 0; i < string.length(); i++) {\n            char currentChar = Character.toLowerCase(string.charAt(i)); // Convert to lowercase\n            characterSet.add(currentChar);\n        }\n\n        return characterSet.size();\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.util.*;\n\npublic class ParseMusic {\n    // ... existing imports\n\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beats = new ArrayList<>();\n\n        for (char c : musicString.toCharArray()) {\n            switch (c) {\n                case 'o':\n                    beats.add(4);\n                    break;\n                case '|':\n                    beats.add(1);\n                    break;\n                case '_': // Assuming that '_' represents a dotted note\n                    beats.add(c + 1); // Add the duration of the note plus one beat for the dot\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid musical note found: \" + c);\n            }\n        }\n\n        return beats;\n    }\n\n    // ... other methods in the class\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 2\n     */\n    public static int howManyTimes(String string, String substring) {\n        if (string == null || substring == null || string.length() < substring.length()) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n\n        int count = 0;\n        int strIndex = 0;\n        int subIndex = 0;\n\n        while (true) {\n            if (strIndex == string.length() - substring.length()) {\n                break;\n            }\n\n            if (string.charAt(strIndex++) == substring.charAt(subIndex)) {\n                count++;\n                subIndex++;\n\n                if (subIndex == substring.length()) {\n                    strIndex -= subIndex;\n                    subIndex = 0;\n                }\n            } else {\n                if (subIndex != 0) {\n                    subIndex = 0;\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.util.*;\n\npublic class SortNumbers {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numberMap = new HashMap<>();\n\n        for (String number : numbers.split(\" \")) {\n            switch (number.toLowerCase()) {\n                case \"zero\":\n                    numberMap.put(number, 0);\n                    break;\n                case \"one\":\n                    numberMap.put(number, 1);\n                    break;\n                case \"two\":\n                    numberMap.put(number, 2);\n                    break;\n                case \"three\":\n                    numberMap.put(number, 3);\n                    break;\n                case \"four\":\n                    numberMap.put(number, 4);\n                    break;\n                case \"five\":\n                    numberMap.put(number, 5);\n                    break;\n                case \"six\":\n                    numberMap.put(number, 6);\n                    break;\n                case \"seven\":\n                    numberMap.put(number, 7);\n                    break;\n                case \"eight\":\n                    numberMap.put(number, 8);\n                    break;\n                case \"nine\":\n                    numberMap.put(number, 9);\n                    break;\n            }\n        }\n\n        List<String> sortedNumbers = new ArrayList<>(numberMap.keySet());\n        Collections.sort(sortedNumbers, (o1, o2) -> Integer.compare(numberMap.get(o1), numberMap.get(o2)));\n\n        StringBuilder result = new StringBuilder();\n        for (String number : sortedNumbers) {\n            result.append(number).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.*;\n\npublic class FindClosestElements {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        Double minDiff = null;\n        Double closest1 = null;\n        Double closest2 = null;\n\n        for (Double number : numbers) {\n            for (Double otherNumber : numbers) {\n                if (number == otherNumber || !number.isNaN() && otherNumber.isNaN()) {\n                    continue;\n                }\n\n                double diff = Math.abs(number - otherNumber);\n                if (minDiff == null || diff < minDiff) {\n                    minDiff = diff;\n                    closest1 = number;\n                    closest2 = otherNumber;\n                }\n            }\n        }\n\n        if (closest1 != null && closest2 != null) {\n            return Arrays.asList(closest1, closest2);\n        } else {\n            throw new IllegalArgumentException(\"There are no unique pairs of numbers in the list.\");\n        }\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.*;\n\npublic class RescaleToUnit {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        // Find minimum and maximum values in the list\n        double minValue = Collections.min(numbers);\n        double maxValue = Collections.max(numbers);\n\n        // Create a new list to store the rescaled values\n        List<Double> rescaledNumbers = new ArrayList<>();\n\n        // Loop through the original numbers and rescale them\n        for (double number : numbers) {\n            // Calculate the scaling factor for this number\n            double scaleFactor = (number - minValue) / (maxValue - minValue);\n\n            // Add the rescaled value to the new list\n            rescaledNumbers.add(scaleFactor);\n        }\n\n        return rescaledNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.util.*;\n\npublic class FilterIntegers {\n    public static List<Integer> filterIntegers(List<?> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                result.add((Integer) obj);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "import java.util.Arrays;\n\npublic class Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     */\n    public static int strlen(String string) {\n        // return the length of the input string using built-in method length()\n        return string.length();\n    }\n\n    public static void main(String[] args) {\n        String test = \"abc\";\n        System.out.println(\"The length of \\\"\" + test + \"\\\" is: \" + strlen(test));\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "import java.util.*;\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * Example: largest_divisor(15) -> 5\n     */\n    public static int largestDivisor(int n) {\n        // Initialize divisor as the smallest possible divisor which is 1\n        int divisor = 1;\n\n        // Iterate through numbers from 2 to n-1, since a number can't divide itself and 0 doesn't count either\n        for (int i = 2; i < n; i++) {\n            // If the current number divides the given number without a remainder, update divisor\n            if (n % i == 0) {\n                divisor = i;\n            }\n        }\n\n        return divisor;\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "public static List<Integer> factorize(int n) {\n    List<Integer> factors = new ArrayList<>();\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n    }\n\n    if (n > 1) {\n        factors.add(n);\n    }\n    return factors;\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.util.*;\n\nclass RemoveDuplicates {\n    /**\n     * From a List of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        // Create a Set to store unique elements from the list and convert it back to a List at the end\n        Set<Integer> set = new HashSet<>(numbers);\n\n        // Convert the Set back into a List, which will automatically remove duplicates due to Java's Set nature\n        return new ArrayList<>(set);\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "public static String flipCase(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            sb.append(Character.toLowerCase(c));\n        } else if (Character.isLowerCase(c)) {\n            sb.append(Character.toUpperCase(c));\n        } else {\n            sb.append(c); // keep non-letter characters as they are\n        }\n    }\n    return sb.toString();\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "import java.util.List;\nimport java.util.ArrayList;\n\npublic class Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     *\n     */\n    public static String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n\n        for (String string : strings) {\n            sb.append(string);\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<String> filterByPrefix(List<String> strings, String prefix) {\n        // Create a new ArrayList to store the filtered strings\n        ArrayList<String> filteredStrings = new ArrayList<>();\n\n        // Iterate through each string in the input list\n        for (String str : strings) {\n            // If the given prefix matches the beginning of the current string\n            if (str.startsWith(prefix)) {\n                // Add the current string to the filtered list\n                filteredStrings.add(str);\n            }\n        }\n\n        // Return the filtered list\n        return filteredStrings;\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.util.*;\n\npublic class GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     */\n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (int number : l) {\n            if (number > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n        return positiveNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n\n    // Check for prime numbers up to the square root of n\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) return false;\n    }\n\n    // If no factors are found, the number is prime\n    return true;\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.*;\n\npublic class SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        // Create an empty list for the result\n        List<Integer> lPrime = new ArrayList<>();\n\n        // Loop through input list l\n        for (int i = 0; i < l.size(); ++i) {\n            // If index 'i' is not divisible by 3, add it to lPrime\n            if (i % 3 != 0) {\n                lPrime.add(l.get(i));\n                continue;\n            }\n\n            // Else, create a temporary list with the sorted values at multiples of 3 from input list 'l'\n            List<Integer> sortedIndicesValues = new ArrayList<>(Collections.singletonList(l.get(i)));\n\n            for (int j = i + 1; j < l.size() && j % 3 == 0; ++j) {\n                sortedIndicesValues.add(l.get(j));\n            }\n\n            Collections.sort(sortedIndicesValues);\n\n            // Add the minimum value from sortedIndicesValues to lPrime at current position\n            lPrime.set(i, sortedIndicesValues.remove(0));\n\n            // If there are remaining values in sortedIndicesValues, add them to lPrime\n            if (!sortedIndicesValues.isEmpty()) {\n                for (int j = 0; j < sortedIndicesValues.size(); ++j) {\n                    lPrime.add(sortedIndicesValues.get(j));\n                }\n            }\n        }\n\n        // Return the final resultant list 'lPrime'\n        return lPrime;\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "import java.util.*;\n\npublic class Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        return l.stream().distinct().sorted().collect(Collectors.toList());\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.util.List;\nimport java.util.ArrayList;\n\npublic class MaxElement {\n\n    /**\n     * Return maximum element in the given list of integers.\n     *\n     * @param l List containing integer values.\n     */\n    public static int maxElement(List<Integer> l) {\n        // Initialize the variable to hold the maximum value found.\n        Integer max = null;\n\n        // Iterate through the list and find the maximum value.\n        for (Integer num : l) {\n            if (max == null || num > max) {\n                max = num;\n            }\n        }\n\n        return max;\n    }\n\n    /**\n     * Main method to run the MaxElement class.\n     */\n    public static void main(String[] args) {\n        List<Integer> list1 = new ArrayList<>();\n        list1.add(1);\n        list1.add(2);\n        list1.add(3);\n        System.out.println(\"Maximum value in the list [1, 2, 3]: \" + maxElement(list1));\n\n        List<Integer> list2 = new ArrayList<>();\n        list2.add(5);\n        list2.add(3);\n        list2.add(-5);\n        list2.add(2);\n        list2.add(-3);\n        list2.add(3);\n        list2.add(9);\n        list2.add(0);\n        list2.add(123);\n        list2.add(1);\n        list2.add(-10);\n        System.out.println(\"Maximum value in the list [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]: \" + maxElement(list2));\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "import java.util.*;\n\npublic class FizzBuzz {\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0) || (i % 13 == 0)) {\n                // Check if the number contains a '7' in its digits\n                if (String.valueOf(i).contains(\"7\")) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "import java.util.*;\n\npublic class SortEven {\n    public static List<Integer> sortEven(List<Integer> l) {\n        if (l.size() == 0 || l.size() % 2 == 1) return l;\n\n        List<Integer> result = new ArrayList<>(l); // create a copy of the list for easier manipulation\n\n        // iterate through even indices and sort them in-place\n        for (int i = 0; i < result.size() && i + 1 < result.size(); i += 2) {\n            Collections.sort(Arrays.asList(result.get(i), result.get(i + 1)));\n            int temp = result.get(i);\n            result.set(i, result.get(i + 1));\n            result.set(i + 1, temp);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.math.*;\nimport java.util.*;\n\npublic class PrimeFib {\n    /**\n     * Returns a pair containing the n-th number that is a Fibonacci number and it's also prime.\n     */\n    public static Pair<BigInteger, Boolean> primeFib(int n) {\n        BigInteger fib = BigInteger.ZERO;\n        BigInteger fib2 = BigInteger.ONE;\n        int count = 0;\n        while (count < n) {\n            BigInteger temp = fib2;\n            fib2 = fib.add(fib2);\n            if (isPrime(temp)) {\n                fib = temp;\n                count++;\n            }\n        }\n        return new Pair<>(fib, isPrime(fib));\n    }\n\n    /**\n     * Returns true if n is prime and false otherwise.\n     */\n    private static boolean isPrime(BigInteger n) {\n        if (n.equals(BigInteger.ONE)) return false;\n        if (n.mod(BigInteger.TWO).compareTo(BigInteger.ZERO) == 0) return n.equals(BigInteger.TWO);\n        BigInteger sqrt = n.sqrt();\n        for (BigInteger i = BigInteger.THREE; i.compareTo(sqrt) <= 0; i = i.add(BigInteger.VALUE_ONE)) {\n            if (n.mod(i).compareTo(BigInteger.ZERO) == BigInteger.ZERO) return false;\n        }\n        return true;\n    }\n\n    /**\n     * Main method for testing the primeFib function.\n     */\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            Pair<BigInteger, Boolean> result = primeFib(i);\n            System.out.printf(\"prime_fib(%d) = %s%n\", i, result);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\npublic class TriplesSumToZero {\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        return l.stream()\n                .flatMap(x -> Stream.generate(() -> x).distinct().limit(2)\n                        .filter(y -> l.contains(-x - y))\n                        .count() == 2)\n                ? true : false;\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "import java.util.*;\n\nclass CarRaceCollision {\n    public static int carRaceCollision(int n) {\n        // Create two lists to store positions of left and right moving cars\n        List<Integer> left = new ArrayList<>(n);\n        List<Integer> right = new ArrayList<>(n);\n\n        for (int i = 0; i < n; i++) {\n            left.add(-Integer.MAX_VALUE);\n            right.add(Integer.MAX_VALUE);\n        }\n\n        // Simulate car race and track collisions\n        int collisionCount = 0;\n        for (int timeStep = 0; timeStep < 2 * n; timeStep++) {\n            for (int i = 0; i < n; i++) {\n                int newPos = left.get(i) + 1; // Move left cars one unit to the right\n                left.set(i, newPos);\n\n                if (i != n - 1 && newPos >= right.get(i + 1)) { // Check for collisions\n                    collisionCount++;\n                }\n            }\n            for (int i = n - 1; i > -1; i--) {\n                int newPos = right.get(i) - 1; // Move right cars one unit to the left\n                right.set(i, newPos);\n\n                if (i != 0 && newPos <= left.get(i - 1)) {\n                    collisionCount++;\n                }\n            }\n        }\n\n        return collisionCount;\n    }\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "import java.util.*;\n\npublic class IncrList {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Map<Integer, Integer> numMap = new HashMap<>();\n\n        for (int num : l) {\n            if (numMap.containsKey(-num)) {\n                return true;\n            }\n            numMap.put(num, numMap.getOrDefault(num, 0) + 1);\n        }\n\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "public static String changeBase(int x, int base) {\n    if (x == 0) return \"\"; // base case: when x becomes 0, we have reached the end of the recursion\n\n    StringBuilder sb = new StringBuilder();\n    int num = x % base;\n    x /= base;\n\n    if (num >= 10) {\n        sb.append(changeBase(num, base)); // recurse with the remainder until it is less than base\n    }\n\n    sb.append(num); // append current digit to the result string\n\n    return changeBase(x, base) + sb.toString(); // recurse with the quotient and append the result to the final answer\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static double triangleArea(int a, int h) {\n        // calculate the area using formula: 0.5 * base * height\n        double area = (double) (0.5 * a * h);\n        return area;\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "import java.util.Arrays;\n\npublic class Fib4 {\n    public static void main(String[] args) {\n        System.out.println(\"fib4(5): \" + fib4(5));\n        System.out.println(\"fib4(6): \" + fib4(6));\n        System.out.println(\"fib4(7): \" + fib4(7));\n    }\n\n    public static int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Argument should be non-negative.\");\n        }\n\n        // Initialize an array to store the Fib4 numbers up to n.\n        int[] fib = new int[n + 5];\n        Arrays.fill(fib, 0);\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n\n        return fib[n];\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.util.*;\n\npublic class Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l); // Sort the list\n\n        int n = l.size();\n\n        if (n == 0) {\n            throw new IllegalArgumentException(\"The list cannot be empty\");\n        }\n\n        double result;\n        if (n % 2 == 1) { // Odd number of elements, single median value\n            result = (double) l.get(n / 2);\n        } else { // Even number of elements, average of two middle values\n            result = (l.get((n - 1) / 2) + l.get(n / 2)) / 2.0;\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "public static Boolean isPalindrome(String text) {\n    int length = text.length();\n    String reversedText = new StringBuffer(text).reverse().toString();\n\n    if (length == 0 || length == 1) {\n        return true;\n    }\n\n    for (int i = 0; i < length / 2; i++) {\n        if (text.charAt(i) != reversedText.charAt(length - i - 1)) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(\"1101\", 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(\"100\", 101)\n     * 1\n     *\n     */\n    public static int modp(String n, int p) {\n        int number = Integer.parseInt(n);\n        // Your original power function code here...\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class RemoveVowels {\n\n public static String removeVowels(String text) {\n StringBuilder sb = new StringBuilder();\n\n char[] chars = text.toCharArray();\n\n for (char c : chars) {\n if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {\n sb.append(c);\n }\n }\n return sb.toString();\n }\n\n public static void main(String[] args) {\n System.out.println(\"Remove Vowels:\");\n System.out.println(removeVowels(\"\"));\n System.out.println(removeVowels(\"abcdef\\nghijklm\"));\n System.out.println(removeVowels(\"abcdef\"));\n System.out.println(removeVowels(\"aaaaa\"));\n System.out.println(removeVowels(\"aaBAA\"));\n System.out.println(removeVowels(\"zbcd\"));\n }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "import java.util.*;\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     *\n     * @param l The input list of integers.\n     * @param t The specified threshold value.\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        // Iterate through the list and compare each element with the threshold\n        for (int i : l) {\n            if (i > t) {  // If we find a number greater than or equal to the threshold, return false since not all numbers are below the threshold.\n                return false;\n            }\n        }\n\n        // Since we didn't find any numbers greater than or equal to the threshold, all numbers in the list must be below it.\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        System.out.println(belowThreshold(list1, 100)); // true\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(belowThreshold(list2, 5));   // false\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "import java.util.*;\n\nclass SameChars {\n    public static Boolean sameChars(String s0, String s1) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n\n        // Count the characters in the first string\n        for (char c : s0.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n\n        // Decrease the count of each character in the second string\n        for (char c : s1.toCharArray()) {\n            if (!charCountMap.containsKey(c)) {\n                continue;\n            }\n            charCountMap.put(c, charCountMap.get(c) - 1);\n        }\n\n        // Check if all character counts are zero\n        for (Integer count : charCountMap.values()) {\n            if (count != 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "import java.util.Arrays;\n\npublic class Fib {\n    public static void main(String[] args) {\n        System.out.println(fib(10)); // 55\n        System.out.println(fib(1));   // 1\n        System.out.println(fib(8));   // 21\n    }\n\n    public static int[] fibMemo = new int[39];\n\n    /**\n     * Return n-th Fibonacci number using memoization.\n     * This method reduces the computation time for larger numbers by storing previously computed values.\n     *\n     * @param n The index of the Fibonacci sequence to compute.\n     */\n    public static int fib(int n) {\n        if (n <= 1) return n;\n        if (fibMemo[n] != 0) return fibMemo[n];\n\n        // Compute and store the value for future use\n        fibMemo[n] = fib(n - 1) + fib(n - 2);\n        return fibMemo[n];\n    }\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "import java.util.Stack;\n\npublic class CorrectBracketing {\n    public static Boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "import java.util.List;\n\npublic class Monotonic {\n    /**\n     * Return True if list elements are monotonically increasing or decreasing.\n     */\n    public static boolean isMonotonic(List<Integer> list) {\n        // If the size of the list is less than 2, it's trivially monotonic\n        if (list.size() <= 1) {\n            return true;\n        }\n\n        // Initialize boolean variables for increase and decrease checks\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        // Iterate through the list, checking for either condition\n        for (int i = 1; i < list.size(); i++) {\n            if (list.get(i) <= list.get(i - 1)) {\n                // If we find a non-increasing sequence, set increasing to false\n                increasing = false;\n            }\n            if (list.get(i) >= list.get(i - 1)) {\n                // If we find a non-decreasing sequence, set decreasing to false\n                decreasing = false;\n            }\n        }\n\n        // Return true if either increasing or decreasing is still true\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> list3 = Arrays.asList(4, 1, 0, -10);\n\n        System.out.println(isMonotonic(list1)); // true\n        System.out.println(isMonotonic(list2)); // false\n        System.out.println(isMonotonic(list3)); // true\n    }\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.util.*;\n\npublic class Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<?> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Object> set2 = new HashSet<>(l2);\n        Set<Object> result = new HashSet<>();\n\n        for (Integer num : set1) {\n            if (set2.contains(num)) {\n                result.add(num);\n            }\n        }\n\n        List<Object> sortedResult = new ArrayList<>(result);\n        Collections.sort(sortedResult);\n\n        return sortedResult;\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        // If no factors found, it means the number is prime itself\n        return n;\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "public static int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "import java.util.Stack;\n\npublic class CorrectBracketing {\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"(\")); // false\n        System.out.println(correctBracketing(\"()\")); // true\n        System.out.println(correctBracketing(\"(()())\")); // true\n        System.out.println(correctBracketing(\")(()\")); // false\n    }\n\n    public static boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() % 2 != 0) return false;\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') stack.push(c);\n            else if (!stack.isEmpty() && stack.peek() == '(') stack.pop();\n            else return false;\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "import java.util.*;\n\npublic class Derivative {\n    public static double nthDiff(double num, int n) {\n        if (n == 0) return num;\n        if (n == 1) return 0;\n\n        double diff = 0;\n        for (int i = 1; i <= n; ++i) {\n            diff += num / i;\n        }\n        return diff;\n    }\n\n    public static List<Object> derivative(List<Integer> xs) {\n        if (xs.size() == 1) return Collections.singletonList(0);\n\n        List<Object> result = new ArrayList<>();\n        int len = xs.size();\n\n        for (int i = 1; i < len; ++i) {\n            result.add(nthDiff(xs.get(i), i) * Math.pow((double) len, (double)(len - i)));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "public static int fibfib(int n) {\n    if (n <= 2) return n - 2; // base cases\n\n    int[] fib = new int[n + 3];\n    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n\n    for (int i = 3; i <= n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n\n    return fib[n];\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "import java.util.Scanner;\n\npublic class VowelsCount {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a word: \");\n        String s = scanner.nextLine();\n        int count = vowelsCount(s);\n        System.out.println(\"Number of vowels in the given word: \" + count);\n    }\n\n    public static int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u') || (c == 'y' && i == s.length() - 1)) {\n                ++count;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "import java.util.*;\n\nclass CircularShift {\n    /**\n     * Perform a circular shift of digits in the given integer `x`.\n     * If `shift > number of digits`, return digits reversed.\n     */\n    public static String circularShift(int x, int shift) {\n        // Convert the integer to a string\n        String str = String.valueOf(x);\n\n        // Check if the shift is greater than the number of digits in the number\n        if (shift > str.length()) {\n            return new StringBuilder(str).reverse().toString();\n        }\n\n        // Perform circular shift on the string\n        char[] chars = str.toCharArray();\n        char temp;\n        for (int i = 0; i < shift; ++i) {\n            temp = chars[chars.length - 1]; // Store the last character\n            for (int j = chars.length - 2; j >= 0; --j) { // Shift all characters to the right\n                chars[j + 1] = chars[j];\n            }\n            chars[0] = temp; // Replace the first character with the last one\n        }\n\n        // Convert the shifted string back to an integer and return it\n        return Integer.parseInt(new String(chars));\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "public static int digitsum(String s) {\n    int sum = 0;\n    for (char c : s.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            sum += (int) c - (int)'A' + 10; // Adding 10 because ASCII values for uppercase letters are 65 to 90, but we need 0 to 9.\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "import java.util.*;\n\nclass FruitDistribution {\n    public static int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" and \"); // Split string into two parts (e.g., \"5 apples\" and \"6 oranges\")\n        String[] fruits1 = parts[0].split(\" \"); // Further split each part to get individual fruit counts (e.g., [\"5\", \"apples\"])\n        int totalApples = Integer.parseInt(fruits1[0]); // Get the total number of apples from the first element of the array\n        String[] fruits2 = parts[1].split(\" \"); // Similarly, get the total number of oranges\n        int totalOranges = Integer.parseInt(fruits2[0]);\n\n        return n - totalApples - totalOranges; // Calculate and return the number of mangoes (total fruits - apples - oranges)\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "import java.util.*;\n\npublic class Pluck {\n    public static List<Object> pluck(List<Object> arr) {\n        int smallestEven = Integer.MAX_VALUE;\n        int indexOfSmallestEven = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            Object num = arr.get(i);\n            if (num instanceof Integer && (int) num % 2 == 0 && (int) num < smallestEven) {\n                smallestEven = (int) num;\n                indexOfSmallestEven = i;\n            }\n        }\n\n        if (smallestEven == Integer.MAX_VALUE) {\n            return new ArrayList<>();\n        } else {\n            List<Object> result = new ArrayList<>();\n            result.add(smallestEven);\n            result.add(indexOfSmallestEven);\n            return result;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencies = new HashMap<>();\n\n        for (int num : lst) {\n            frequencies.put(num, frequencies.getOrDefault(num, 0) + 1);\n        }\n\n        for (int num : lst) {\n            if (frequencies.get(num) >= num) {\n                return num;\n            }\n        }\n\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.*;\n\npublic class StrangeSortList {\n    public static List<Object> strangeSortList(List<Object> lst) {\n        // Create a new ArrayList to store the sorted numbers\n        ArrayList<Object> sortedList = new ArrayList<>(lst);\n\n        // Sort the ArrayList using a custom comparator\n        Collections.sort(sortedList, (o1, o2) -> {\n            int i1 = ((Comparable<Integer>) o1).compareTo(Collections.min(sortedList));\n            int i2 = ((Comparable<Integer>) o2).compareTo(Collections.min(sortedList));\n\n            if (i1 == i2) {\n                return Collections.max(sortedList).compareTo(o1) - Collections.max(sortedList).compareTo(o2);\n            } else {\n                return i1 - i2;\n            }\n        });\n\n        // Iterate through the sorted ArrayList and return the resulting array\n        ArrayList<Object> result = new ArrayList<>();\n        for (int index : sortedList.indexOfEach(Collections.min(sortedList))) {\n            result.add(sortedList.get(index));\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n\n /**\n * Given the lengths of the three sides of a triangle. Return the area of\n * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n * Otherwise return -1\n * Three sides make a valid triangle when the sum of any two sides is greater\n * than the third side.\n * Example:\n * triangle_area(3, 4, 5) == 6.00\n * triangle_area(1, 2, 10) == -1\n */\n public static Number triangleArea(int a, int b, int c) {\n if (isValidTriangle(a, b, c)) {\n double s = (a + b + c) / 2;\n double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n return new BigDecimal(String.format(\"%.2f\", area)).setScale(2);\n } else {\n return -1;\n }\n }\n\n private static boolean isValidTriangle(int a, int b, int c) {\n return (a + b > c && b + c > a && c + a > b);\n }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n    // Check if the list is palindromic (balanced)\n    boolean isBalanced = false;\n    for (int i = 0, j = q.size() - 1; i < j; i++, j--) {\n        if (q.get(i) != q.get(j)) {\n            return false;\n        }\n    }\n    isBalanced = true;\n\n    // Calculate the sum of elements and compare with the given maximum weight w\n    int totalSum = 0;\n    for (int num : q) {\n        totalSum += num;\n    }\n\n    return totalSum <= w && isBalanced;\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.util.*;\n\nclass SmallestChange {\n    public static int smallestChange(List<Integer> arr) {\n        if (isPalindrome(arr)) {\n            return 0;\n        }\n\n        int changes = 0;\n        Set<Integer> oddElements = new HashSet<>();\n        for (int num : arr) {\n            if (num % 2 != 0) {\n                oddElements.add(num);\n            }\n        }\n\n        for (Map.Entry<Integer, Integer> entry : oddElements.entrySet()) {\n            int key = entry.getKey();\n            int value = entry.getValue();\n            if (arr.get(getMirrorIndex(arr, value)) != key) {\n                changes++;\n            }\n        }\n\n        return changes;\n    }\n\n    private static boolean isPalindrome(List<Integer> arr) {\n        int leftIndex = 0;\n        int rightIndex = arr.size() - 1;\n        while (leftIndex < rightIndex) {\n            if (!arr.get(leftIndex).equals(arr.get(rightIndex))) {\n                return false;\n            }\n            leftIndex++;\n            rightIndex--;\n        }\n        return true;\n    }\n\n    private static int getMirrorIndex(List<Integer> arr, int index) {\n        return arr.size() - (index + 1);\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.util.*;\n\npublic class TotalMatch {\n\n public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n if (lst1 == null || lst2 == null) {\n throw new IllegalArgumentException(\"Both lists must be provided.\");\n }\n\n int total1 = lst1.stream().mapToInt(String::length).sum();\n int total2 = lst2.stream().mapToInt(String::length).sum();\n\n if (total1 < total2) {\n return lst1;\n } else if (total1 > total2) {\n return lst2;\n } else {\n Collections.sort(lst1);\n Collections.sort(lst2);\n return (Collections.equals(lst1, lst2)) ? lst1 : lst2;\n }\n }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.util.*;\n\npublic class IsMultiplyPrime {\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        int i = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n            i += 6;\n        }\n\n        return true;\n    }\n\n    public static List<Integer> primeFactors(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n                i = 1; // reset the loop variable to start from 2 again\n            }\n        }\n        if (n > 1) factors.add(n);\n        return factors;\n    }\n\n    public static boolean isMultiplyPrime(int a) {\n        if (a < 3) return false;\n        List<Integer> primes = getPrimesBelowSqrt(a);\n        for (List<Integer> triplet : combinationsOfThree(primes)) {\n            int product = 1;\n            for (int prime : triplet) product *= prime;\n            if (product == a) return true;\n        }\n        return false;\n    }\n\n    public static List<List<Integer>> combinationsOfThree(List<Integer> list) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (list.size() < 3) return result;\n\n        for (int i = 0; i < list.size() - 2; i++) {\n            for (int j = i + 1; j < list.size() - 1; j++) {\n                int k = j + 1;\n                if (k >= list.size()) break;\n                result.add(Arrays.asList(list.get(i), list.get(j), list.get(k)));\n            }\n        }\n        return result;\n    }\n\n    public static List<Integer> getPrimesBelowSqrt(int n) {\n        if (n <= 3) return Arrays.asList(2, 3);\n\n        boolean[] isPrime = new boolean[n + 1];\n        Arrays.fill(isPrime, true);\n\n        for (int i = 2; i * i <= n; i++) {\n            if (!isPrime[i]) continue;\n\n            for (int j = i * i; j <= n; j += i) isPrime[j] = false;\n        }\n\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < isPrime.length; i++) {\n            if (isPrime[i]) primes.add(i);\n        }\n        return primes;\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "import java.math.*;\n\npublic class IsSimplePower {\n    public static Boolean isSimplePower(int x, int n) {\n        BigInteger base = BigInteger.valueOf(n);\n        for (int i = 1; i <= Math.sqrt(x); ++i) {\n            if (BigInteger.ONE.equals(Math.pow(base, BigInteger.valueOf(i)).mod(BigInteger.valueOf(x)))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "public static Boolean iscube(int a) {\n    Math.pow(a, 1.0/3); // This will throw an exception if a is not a cube number because java Math.pow does not round down when the exponent is a fraction\n    return (Math.pow(a, 1.0/3).doubleValue() * Math.pow(a, 1.0/3) * Math.pow(a, 1.0/3)) == a;\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "public static int hexKey(String num) {\n    Map<Character, Integer> map = new HashMap<>();\n    map.put('0', 0);\n    map.put('1', 1);\n    map.put('2', 2);\n    map.put('3', 2);\n    map.put('4', 3);\n    map.put('5', 2);\n    map.put('6', 3);\n    map.put('7', 2);\n    map.put('8', 3);\n    map.put('9', 3);\n    map.put('A', 5);\n    map.put('B', 5);\n    map.put('C', 3);\n    map.put('D', 3);\n    map.put('E', 2);\n    map.put('F', 2);\n\n    int count = 0;\n    for (char c : num.toUpperCase().toCharArray()) {\n        if (map.get(c) > 2) { // If the character represents a prime number\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "import java.util.ArrayList;\n\npublic class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder(\"db\");\n\n        while (decimal > 0) {\n            int rem = decimal % 2;\n            binary.append(rem);\n            decimal /= 2;\n        }\n\n        binary.append(\"db\");\n        ArrayList<String> list = new ArrayList<>(binary.toString().split(\"\"));\n        Collections.reverse(list);\n        return String.join(\"\", list);\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "import java.util.*;\n\nclass IsHappy {\n    public static Boolean isHappy(String s) {\n        if (s == null || s.length() < 3) return false;\n\n        List<Character> substring = new ArrayList<>(3);\n\n        // Iterate through the input string with a step of three characters\n        for (int i = 0; i < s.length(); i += 3) {\n            // Add the current three characters to the substring list\n            substring.clear();\n            for (int j = 0; j < 3 && i + j < s.length(); ++j) {\n                substring.add(s.charAt(i + j));\n            }\n\n            // Check if all characters in the current substring are distinct\n            if (new HashSet<>(substring).size() != substring.size()) return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "public static List<String> numericalLetterGrade(List<Number> grades) {\n    HashMap<Double, String> gradesMap = new HashMap<>();\n    gradesMap.put(4.0, \"A+\");\n    gradesMap.put(3.7, \"A\");\n    gradesMap.put(3.3, \"A-\");\n    gradesMap.put(3.0, \"B+\");\n    gradesMap.put(2.7, \"B\");\n    gradesMap.put(2.3, \"B-\");\n    gradesMap.put(2.0, \"C+\");\n    gradesMap.put(1.7, \"C\");\n    gradesMap.put(1.3, \"C-\");\n    gradesMap.put(1.0, \"D+\");\n    gradesMap.put(0.7, \"D\");\n    gradesMap.put(0.0, \"D-\");\n    gradesMap.put(0.0, \"E\");\n\n    List<String> result = new ArrayList<>();\n    for (Number grade : grades) {\n        Double gpa = grade.doubleValue();\n        String letterGrade = gradesMap.floorEntry(gpa).getValue();\n        if (letterGrade == null || gpa > gradesMap.floorEntry(gpa).getKey()) {\n            letterGrade = gradesMap.get(gpa);\n        }\n        result.add(letterGrade);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "public static Boolean primeLength(String string) {\n    int strLen = string.length();\n\n    // Check if the input string has only one character\n    if (strLen <= 1) {\n        return false;\n    }\n\n    // Create a list of boolean values to store whether each number up to sqrt(strLen) is prime or not\n    boolean[] primes = new boolean[strLen];\n    Arrays.fill(primes, true);\n\n    // Mark 0 and 1 as non-prime numbers\n    primes[0] = false;\n    primes[1] = false;\n\n    // Calculate prime numbers up to sqrt(strLen) using the Sieve of Eratosthenes algorithm\n    for (int i = 2; i * i <= strLen; i++) {\n        if (primes[i]) {\n            for (int j = i * i; j <= strLen; j += i) {\n                primes[j] = false;\n            }\n        }\n    }\n\n    // Check if the string length is a prime number\n    return primes[strLen];\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "public static int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return (int)(Math.pow(10, n - 1) * 9 + startsOneEnds(n - 1));\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "import java.util.*;\n\npublic class Solve {\n\n public static String solve(int n) {\n int sum = 0;\n String binary = \"\";\n\n while (n > 0) {\n int rem = n % 2;\n n /= 2;\n sum += rem;\n binary = (rem == 1 ? \"1\" : \"\") + binary;\n }\n\n return Integer.toString(sum, 2);\n }\n\n public static void main(String[] args) {\n System.out.println(solve(1000)); // Output: 1\n System.out.println(solve(150)); // Output: 110\n System.out.println(solve(147)); // Output: 1100\n }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "import java.util.*;\n\npublic class Add {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(4, 2, 6, 7); // Your test list\n        System.out.println(add(list));\n    }\n\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n     *\n     */\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "import java.util.*;\n\npublic class AntiShuffle {\n    public static String antiShuffle(String s) {\n        // Split input string into words using whitespace as delimiter\n        String[] words = s.split(\"\\\\s+\");\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            // Sort characters in the word array in ascending order based on ASCII values\n            Arrays.sort(chars);\n            // Replace the current word with the sorted character array as a new string\n            words[i] = String.valueOf(chars);\n        }\n\n        // Join all the ordered words to get the final result\n        return String.join(\" \", words);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(antiShuffle(\"Hi\"));                // prints \"Hi\"\n        System.out.println(antiShuffle(\"hello\"));            // prints \"ehllo\"\n        System.out.println(antiShuffle(\"Hello World!!!\"));   // prints \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n\n public static List<int[]> getRow(List<Object> lst, int x) {\n\n // Initialize an empty list to store the results\n List<int[]> result = new ArrayList<>();\n\n int row = 0; // Current row index\n\n for (Object list : lst) {\n if (!(list instanceof List)) { // Check if the current item is a list or not\n continue;\n }\n\n // Iterate through the columns of the current list\n for (int i = 0; i < ((List) list).size(); i++) {\n int num = ((Number) ((List) list).get(i)).intValue(); // Get the number from the current cell\n if (num == x) { // Check if the number is equal to the target value\n result.add(new int[]{row, i}); // Add the current coordinates to the result list\n }\n }\n row++; // Increment the current row index\n }\n\n // Sort the result list by rows in ascending order and columns in descending order\n result.sort((o1, o2) -> Integer.compare(o1[0], o2[0]) + Integer.compare(o2[1], o1[1]));\n\n return result;\n }\n\n public static void main(String[] args) {\n List<List<Integer>> testData = Arrays.asList(\n Arrays.asList(1, 2, 3, 4, 5, 6),\n Arrays.asList(1, 2, 3, 4, 1, 6),\n Arrays.asList(1, 2, 3, 4, 5, 1)\n );\n\n List<int[]> result = getRow(testData, 1);\n System.out.println(result); // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.util.*;\n\npublic class SortArray {\n\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     * Note: don't change the given array.\n     */\n    public static List<Integer> sortArray(List<Integer> array) {\n        // Initialize variables to store sum and check if it is odd or even\n        int sum = array.get(0) + array.get(array.size() - 1);\n        boolean isOdd = (sum % 2) == 1;\n\n        // Create a new ArrayList for storing the sorted elements\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        // Use Collections.sort to sort the array in either ascending or descending order\n        Collections.sort(sortedArray, isOdd ? Comparator.naturalOrder() : Comparator.reverseOrder());\n\n        return sortedArray;\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "import java.util.Arrays;\n\npublic class Encrypt {\n    public static String encrypt(String s) {\n        char[] originalAlphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n        char[] rotatedAlphabet = Arrays.copyOf(originalAlphabet, originalAlphabet.length);\n\n        for (int i = 0; i < originalAlphabet.length; ++i) {\n            int rotateValue = 2 * (i + 1);\n            rotatedAlphabet[(i + rotateValue) % originalAlphabet.length] = s.charAt(i);\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            for (int i = 0; i < rotatedAlphabet.length; ++i) {\n                if (rotatedAlphabet[i] == c) {\n                    result.append(originalAlphabet[i]);\n                    break;\n                }\n            }\n        }\n\n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.util.*;\n\npublic class NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        List<Integer> sorted = new ArrayList<>(lst);\n        Collections.sort(sorted);\n\n        if (sorted.size() < 2) {\n            return null;\n        }\n\n        return sorted.get(1);\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "public static int isBored(String s) {\n    int numBoredoms = 0;\n    String currentWord = \"\";\n\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            // Move to the next word\n            currentWord = s.substring(i + 1);\n            i++;\n        } else {\n            // Found a new non-space character, check if it's an uppercase 'I'\n            if (Character.toUpperCase(c) == 'I') {\n                numBoredoms++;\n            }\n            currentWord = c + currentWord;\n        }\n    }\n\n    return numBoredoms;\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "import java.util.Arrays;\n\npublic class AnyInt {\n\n /**\n * Create a function that takes 3 numbers.\n * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n * Returns false in any other cases.\n *\n * Examples\n * any_int(5, 2, 7) \u279e True\n *\n * any_int(3, 2, 2) \u279e False\n *\n * any_int(3, -2, 1) \u279e True\n *\n * any_int(3.6, -2.2, 2) \u279e False\n */\n public static boolean anyInt(Number x, Number y, Number z) {\n if (!x.intValue() == (int) x && !y.intValue() == (int) y && !z.intValue() == (int) z) {\n return false;\n }\n int sum = (int) y + (int) z;\n return Arrays.asList(x, y, z).contains(sum);\n }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "import java.util.Arrays;\n\nclass Encode {\n    public static String encode(String message) {\n        final char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        final char[] consonantsAndVowelShifts = new char[26];\n\n        // Initialize the shift array for vowels and consonants.\n        Arrays.fill(consonantsAndVowelShifts, '\\0');\n        int index = 0;\n        for (char c = 'a'; c <= 'z'; ++c) {\n            if (Arrays.binarySearch(vowels, c) >= 0) {\n                consonantsAndVowelShifts[index++] = c + 2;\n            } else {\n                consonantsAndVowelShifts[index++] = c;\n            }\n        }\n\n        // Encode the input message.\n        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toLowerCase().toCharArray()) {\n            if (Arrays.binarySearch(vowels, c) >= 0) {\n                // If it's a vowel, replace with its corresponding shift character.\n                encodedMessage.append(consonantsAndVowelShifts[c - 'a']);\n            } else {\n                // Otherwise, keep the original case.\n                encodedMessage.append(Character.toUpperCase(c));\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        String test = \"test\";\n        String message = \"This is a message\";\n\n        System.out.println(encode(test)); // Output: TGST\n        System.out.println(encode(message)); // Output: tHKS KS C MGSSCGG\n    }\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.util.*;\n\npublic class Skjkasdkd {\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = lst.get(0);\n        for (int num : lst) {\n            if (num > largestPrime && isPrime(num)) {\n                largestPrime = num;\n            }\n        }\n        int sumOfDigits = 0;\n        while (largestPrime > 0) {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        return sumOfDigits;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.util.*;\n\npublic class CheckDictCase {\n    public static Boolean checkDictCase(Map<String, ?> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLower = true;\n        boolean isUpper = true;\n\n        for (Map.Entry<String, ?> entry : dict.entrySet()) {\n            String key = entry.getKey();\n            if (!key.equals(key.toLowerCase())) {\n                isLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                isUpper = false;\n            }\n        }\n\n        return isLower || isUpper;\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.*;\n\npublic class CountUpTo {\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n\n        return true;\n    }\n\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; ++i) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "public class Multiply {\n    public static int multiply(int a, int b) {\n        // Get the unit digits (ones place) of 'a' and 'b'.\n        int unitA = a % 10;\n        int unitB = b % 10;\n\n        // Return the product of the unit digits.\n        return unitA * unitB;\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "import java.util.regex.*;\n\nclass CountUpper {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n        Pattern pattern = Pattern.compile(\"([AEIOU])\");\n        Matcher matcher = pattern.matcher(s);\n        int count = 0;\n        int index = 0;\n        while (matcher.find()) {\n            if (index % 2 == 0) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "import java.math.*;\n\npublic class ClosestInteger {\n    public static int closestInteger(String value) {\n        BigDecimal bigValue = new BigDecimal(value);\n        BigDecimal roundedBigValue = bigValue.setScale(0, RoundingMode.HALF_UP);\n        long roundedValue = roundedBigValue.longValue();\n        if (Math.abs(bigValue.subtract(new BigDecimal(String.valueOf(roundedValue))).doubleValue()) > Math.abs(bigValue.subtract(new BigDecimal(Long.toString(roundedValue + 1))).doubleValue())) {\n            return (int) roundedValue + 1;\n        } else {\n            return (int) roundedValue;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // 10\n        System.out.println(closestInteger(\"15.3\")); // 15\n        System.out.println(closestInteger(\"-14.5\")); // -15\n        System.out.println(closestInteger(\"14.5\")); // 15\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentStones = n;\n        while (currentStones > 0) {\n            if ((currentStones & 1) == 1) { // check if current number is odd\n                pile.add(currentStones);\n                currentStones += 1; // add one for the next odd number\n            } else {\n                pile.add(currentStones);\n                currentStones += 2; // add two for the next even number\n            }\n        }\n        return pile;\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.util.*;\n\npublic class WordsString {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\"[\\\\s,]+\"));\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n    if (x % 2 != 0 && y % 2 == 0) {\n        return y - 1; // If y is even and x is odd, the biggest even number in the range is y-1.\n    } else if (x >= 2 && y < 2) {\n        return -1; // There are no even numbers in the range if y < 2 and x >= 2.\n    } else {\n        int result = Math.max(x, y);\n        return result - (result % 2 == 1 ? 1 : 0); // If result is odd, subtract 1 to get the even number.\n    }\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass RoundedAvg {\n    public static int roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n\n        long total = 0;\n        for (int i = n; i <= m; i++) {\n            total += i;\n        }\n\n        double avg = (double)total / (m - n + 1);\n        BigDecimal roundedAvg = new BigDecimal(avg).setScale(0, RoundingMode.HALF_UP);\n        int finalResult = roundedAvg.intValue();\n        return Integer.toBinaryString(finalResult);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // -1\n        System.out.println(roundedAvg(10, 20)); // \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // \"0b11010\"\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.util.*;\nimport static java.util.stream.Collectors.toList;\n\npublic class UniqueDigits {\n\n public static List<Integer> uniqueDigits(List<Integer> x) {\n return x.stream()\n .filter(num -> !containsEvenDigit(num))\n .sorted()\n .collect(toList());\n }\n\n private static boolean containsEvenDigit(int num) {\n String strNum = Integer.toString(num);\n for (char digit : strNum.toCharArray()) {\n if (Character.getNumericValue(digit) % 2 == 0) {\n return true;\n }\n }\n return false;\n }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\npublic class ByLength {\n    public static List<String> byLength(List<Object> arr) {\n        // Filter out strange numbers (negative or non-integer values)\n        List<Integer> filtered = Arrays.stream(arr)\n                .filter(n -> n instanceof Integer && ((int) n) >= 1 && ((int) n) <= 9)\n                .mapToInt(n -> (int) n)\n                .boxed()\n                .collect(Collectors.toList());\n\n        // Sort and reverse the filtered list\n        List<Integer> sorted = filtered.stream().sorted().reverse().collect(Collectors.toList());\n\n        // Replace each digit with its corresponding name\n        return sorted.stream()\n                .map(i -> i == 1 ? \"One\" : i == 2 ? \"Two\" : i == 3 ? \"Three\" : i == 4 ? \"Four\" : i == 5 ? \"Five\" : i == 6 ? \"Six\" : i == 7 ? \"Seven\" : i == 8 ? \"Eight\" : i == 9 ? \"Nine\" : \"\")\n                .filter(str -> !str.isEmpty())\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>(n);\n\n        for (int i = 1; i <= n; i++) {\n            int value = i % 2 == 0 ? factorial(i) : sumUpTo(i);\n            result.add(value);\n        }\n\n        return result;\n    }\n\n    private static int factorial(int n) {\n        if (n <= 1) return 1;\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static int sumUpTo(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "import java.util.*;\n\nclass EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int countEven = 0, countOdd = 0;\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (isPalindrome(str)) {\n                if (i % 2 == 0) {\n                    countEven++;\n                } else {\n                    countOdd++;\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(countEven);\n        result.add(countOdd);\n        return result;\n    }\n\n    private static boolean isPalindrome(String str) {\n        int start = 0, end = str.length() - 1;\n        while (start < end) {\n            if (str.charAt(start) != str.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "import java.util.*;\n\nclass CountNums {\n    public static int countSumOfDigits(int num) {\n        if (num < 0) {\n            num = -num;\n        }\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static int countNums(List<Object> arr) {\n        int count = 0;\n        for (Object obj : arr) {\n            if (countSumOfDigits((int)obj) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = new ArrayList<>();\n        List<Object> list2 = Arrays.asList(-1, 11, -11);\n        List<Object> list3 = Arrays.asList(1, 1, 2);\n\n        System.out.println(countNums(list1)); // Output: 0\n        System.out.println(countNums(list2)); // Output: 1\n        System.out.println(countNums(list3)); // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\nimport java.util.Arrays;\n\npublic class MoveOneBall {\n\n public static Boolean moveOneBall(int[] arr) {\n if (arr.length == 0) {\n return true;\n }\n\n Arrays.sort(arr);\n int maxIndex = arr[arr.length - 1];\n for (int i : arr) {\n if (i > maxIndex) {\n return false;\n }\n }\n\n // Perform right shift operations and check if the array is sorted in non-decreasing order\n for (int i = 0; i < arr.length - 1; i++) {\n if (arr[i] > arr[i + 1]) {\n Arrays.sort(Arrays.copyOfRange(arr, i + 1, arr.length));\n }\n }\n return true;\n }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "import java.util.*;\n\npublic class Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Initialize variables to keep track of the parity and size of each list\n        int oddCount1 = 0, evenCount1 = 0;\n        int oddCount2 = lst2.size(), evenCount2 = 0;\n\n        // Iterate through both lists and count the number of odd and even numbers in each list\n        for (int num : lst1) {\n            if (num % 2 == 0) {\n                evenCount1++;\n            } else {\n                oddCount1++;\n            }\n        }\n\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount2++;\n            } else {\n                oddCount2--;\n            }\n        }\n\n        // If there are no odd numbers in lst1, it means that we can make all the elements of lst1 even by swapping with lst2\n        if (oddCount1 == 0) {\n            return \"YES\";\n        }\n\n        // Check if we have enough even numbers in lst2 to swap with odd numbers in lst1\n        if (evenCount2 >= oddCount1) {\n            // Swap all the odd numbers in lst1 with even numbers from lst2 until there are no more odd numbers in lst1\n            while (oddCount1 > 0 && evenCount2 > 0) {\n                int temp = lst1.get(lst1.size() - 1); // get the last element of lst1\n                int index = findNextEven(lst2); // find an even number in lst2 to swap with temp\n                if (index != -1) { // if we found an even number, swap and decrease both counts\n                    lst1.set(lst1.size() - 1, lst2.get(index));\n                    lst2.remove(index);\n                    oddCount1--;\n                    evenCount2--;\n                }\n            }\n\n            // If there are no more odd numbers in lst1 after swapping, return \"YES\"\n            if (oddCount1 == 0) {\n                return \"YES\";\n            }\n        }\n\n        // If it's not possible to make all the elements of lst1 even by swapping with lst2, return \"NO\"\n        return \"NO\";\n    }\n\n    private static int findNextEven(List<Integer> list) {\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) % 2 == 0) {\n                return i;\n            }\n        }\n        // If there are no even numbers in the list, return -1 to indicate that we couldn't find one\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\n\nclass Histogram {\n    public static Map<Character, Integer> histogram(String test) {\n        if (test == null || test.isEmpty()) return new HashMap<>();\n\n        Map<Character, Integer> result = new HashMap<>();\n        for (char c : test.toLowerCase().toCharArray()) {\n            if (!result.containsKey(c)) result.put(c, 1);\n            else result.put(c, result.get(c) + 1);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "import java.util.*;\n\npublic class ReverseDelete {\n    public static boolean isPalindrome(String s) {\n        int start = 0;\n        int end = s.length() - 1;\n\n        while (start < end) {\n            if (s.charAt(start++) != s.charAt(end--)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String deleteChars(String s, String c) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            if (!c.contains(String.valueOf(ch))) {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n\n    public static List<Object> reverseDelete(String s, String c) {\n        String str = deleteChars(s, c);\n        boolean isPalindrome = isPalindrome(str);\n        return Arrays.asList(str, isPalindrome);\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.util.*;\n\npublic class OddCount {\n\n public static void main(String[] args) {\n List<String> lst = Arrays.asList(\"1234567\", \"3\", \"11111111\");\n System.out.println(oddCount(lst));\n }\n\n public static List<String> oddCount(List<String> lst) {\n List<String> result = new ArrayList<>();\n for (int i = 0; i < lst.size(); i++) {\n int count = 0;\n String str = lst.get(i);\n for (char c : str.toCharArray()) {\n if ((c - '0') % 2 != 0) { // check if the digit is odd\n count++;\n }\n }\n result.add(\"the number of odd elements in the \" + i + \"th string of the input.\" + \" is \" + count);\n }\n return result;\n }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "import java.util.*;\n\npublic class Minsubarraysum {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static int minsubarraysum(List<Integer> nums) {\n        if (nums.isEmpty()) return Integer.MAX_VALUE; // Base case: empty array\n\n        int[] prefixSum = new int[nums.size()];\n        int minSum = Integer.MAX_VALUE;\n\n        for (int i = 0; i < nums.size(); i++) {\n            prefixSum[i] = nums.get(i); // Initialize the prefix sum array\n            if (prefixSum[i] < minSum) minSum = prefixSum[i]; // Update the minimum sum found so far\n            for (int j = 1; j <= i; j++) {\n                prefixSum[i] += nums.get(i - j); // Calculate the current prefix sum\n                if (prefixSum[i] < minSum) minSum = prefixSum[i]; // Update the minimum sum found so far\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n\n        System.out.println(\"Minimum subarray sum for \" + nums1 + \": \" + minsubarraysum(nums1));\n        System.out.println(\"Minimum subarray sum for \" + nums2 + \": \" + minsubarraysum(nums2));\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.util.*;\n\npublic class MaxFill {\n\n public static int maxFill(List<List<Integer>> grid, int capacity) {\n if (grid == null || grid.isEmpty()) return 0;\n\n int m = grid.size(), n = grid.get(0).size();\n int[][] dp = new int[m][n]; // dp[i][j] stores the minimum number of lowering operations to empty the sub-rectangle with top-left corner at (i, j)\n\n for (int i = 0; i < m; ++i) {\n for (int j = 0; j < n; ++j) {\n if (grid.get(i).get(j) == 1) { // fill the bucket when encountering a water unit\n dp[i][j] = capacity;\n } else { // calculate dp[i][j] recursively based on its neighbors that have water units\n int minFill = Integer.MAX_VALUE;\n for (int k = -1; k <= 1; ++k) {\n for (int l = -1; l <= 1; ++l) { // consider the neighbor at (i+k, j+l)\n if (!(k == 0 && l == 0)) { // skip the current cell itself\n int x = Math.min(i + k, m - 1), y = Math.min(j + l, n - 1);\n minFill = Math.min(minFill, dp[x][y] + 1);\n }\n }\n }\n dp[i][j] = minFill;\n }\n }\n }\n\n return Arrays.stream(dp[m - 1]).sum(); // return the total number of lowering operations needed to empty all wells\n }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.util.*;\n\npublic class SortArray {\n\n public static List<Object> sortArray(List<Object> arr) {\n Collections.sort(arr, new Comparator<Object>() {\n @Override\n public int compare(Object o1, Object o2) {\n int count1 = Integer.bitCount((int)o1);\n int count2 = Integer.bitCount((int)o2);\n if (count1 != count2) return Integer.compare(count1, count2);\n return ((Comparable<Object>)o1).compareTo(o2);\n }\n });\n return arr;\n }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n    public static List<String> selectWords(String s, int n) {\n        if (s == null || s.length() == 0) return new ArrayList<>();\n\n        List<String> words = new ArrayList<>(Arrays.asList(s.split(\" \")));\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (isValidWord(word, n)) {\n                result.add(word);\n            }\n        }\n\n        String rem = s.replaceAll(\"(\\\\s|\\\\b)\" + String.join(\"\", result) + \"\\\\b\", \"\");\n        if (!rem.isEmpty()) return combineResults(result, selectWords(rem, n));\n\n        return result;\n    }\n\n    private static boolean isValidWord(String word, int n) {\n        if (word.length() != n) return false;\n\n        final String vowels = \"aeiouAEIOU\";\n        int countVowels = 0;\n        for (char c : word.toCharArray()) {\n            if (vowels.indexOf(c) > -1) {\n                countVowels++;\n            }\n\n            if (!Character.isLetter(c)) return false;\n\n            if (countVowels > 2 && Character.toLowerCase(c) == 'n') {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static List<String> combineResults(List<String> a, List<String> b) {\n        if (b.isEmpty()) return a;\n\n        for (int i = 0; i < Math.min(a.size(), b.size()); i++) {\n            a.set(i, a.get(i) + \" \" + b.get(i));\n        }\n\n        if (b.size() > a.size()) {\n            for (int i = a.size(); i < b.size(); i++) {\n                a.add(b.get(i));\n            }\n        }\n\n        return a;\n    }\n\n    public static void main(String[] args) {\n        String[] tests = new String[]{\"Mary had a little lamb\", \"Mary had a little lamb\", \"simple white space\", \"Hello world\", \"Uncle sam\"};\n        int[] n = new int[]{4, 3, 2, 4, 3};\n\n        for (int i = 0; i < tests.length; i++) {\n            System.out.println(String.format(\"select_words(\\\"%s\\\", %d) ==> %s\", tests[i], n[i], selectWords(tests[i], n[i])));\n        }\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "import java.util.*;\n\npublic class GetClosestVowel {\n\n public static String getClosestVowel(String word) {\n if (word == null || word.length() < 3) {\n return \"\";\n }\n\n char[] chars = word.toCharArray();\n int leftIndex = -1;\n int rightIndex = -1;\n\n for (int i = 0; i < chars.length; i++) {\n if (!Character.isLetter(chars[i])) continue;\n\n if (leftIndex == -1 && Character.getType(chars[i]) != Character.UPPERCASE) {\n leftIndex = i;\n }\n\n if (Character.getType(chars[i]) == Character.UPPERCASE) {\n rightIndex = i;\n }\n }\n\n if (rightIndex == -1) return \"\";\n\n String vowels = \"aeiouAEIOU\";\n for (int i = rightIndex - 1; i >= leftIndex + 1; i--) {\n if (vowels.indexOf(chars[i]) != -1) {\n return String.valueOf(chars[i]);\n }\n }\n\n return \"\";\n }\n\n public static void main(String[] args) {\n System.out.println(getClosestVowel(\"yogurt\")); // u\n System.out.println(getClosestVowel(\"FULL\")); // U\n System.out.println(getClosestVowel(\"quick\")); // \"\"\n System.out.println(getClosestVowel(\"ab\")); // \"\"\n }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.util.*;\n\nclass MatchParens {\n\n /**\n * Checks if the given string is balanced or not.\n * @param s The string to be checked.\n * @return True if the string is balanced, False otherwise.\n */\n static boolean isBalanced(String s) {\n Collections.reverse(Arrays.asList(s)); // Reverse the string for convenient left-to-right processing\n Stack<Character> stack = new Stack<>();\n for (char c : s.toCharArray()) {\n if (c == '(') {\n stack.push(c);\n } else if (c == ')') {\n if (stack.isEmpty() || stack.pop() != '(') {\n return false;\n }\n }\n }\n return stack.isEmpty();\n }\n\n /**\n * You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only.\n * Your job is to check if it is possible to concatenate the two strings in some order, that the resulting string will be good.\n * A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not.\n * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n *\n * Examples:\n * match_parens(['()(', ')']) == 'Yes'\n * match_parens([')', ')']) == 'No'\n */\n public static String matchParens(List<String> lst) {\n if (lst.size() != 2) throw new IllegalArgumentException(\"Input should be a list of two strings.\");\n if (!isBalanced(lst.get(0)) || !isBalanced(lst.get(1))) return \"No\";\n // If both strings are balanced, we can concatenate them in any order to get a good string.\n return \"Yes\";\n }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.util.*;\n\npublic class Maximum {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (arr == null || arr.size() < k) return new ArrayList<>();\n\n        // Use a min-heap (PriorityQueue with Comparator) to get the top k maximum numbers\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\n        for (int i : arr) {\n            pq.offer(i);\n\n            // Maintain the size of the heap at most k\n            if (pq.size() > k) pq.poll();\n        }\n\n        // Return the top k numbers from the min-heap\n        return new ArrayList<>(pq);\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "public static int solution(List<Integer> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if ((i + 1) % 2 == 0 && (lst.get(i) % 2 != 0)) {\n            sum += lst.get(i);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "public static int addElements(List<Integer> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.size(); i++) {\n        int num = arr.get(i);\n        if (num <= 99 || num >= 1000) { // only consider numbers with at most two digits\n            sum += num;\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "import java.util.*;\n\nclass GetOddCollatz {\n    public static List<Integer> getOddCollatz(int n) {\n        Set<Integer> collatzSequence = new HashSet<>();\n        collatzSequence.add(n);\n\n        while (!collatzSequence.isEmpty()) {\n            int size = collatzSequence.size();\n            for (int i = 0; i < size; ++i) {\n                int number = collatzSequence.iterator().next();\n                collatzSequence.remove(number);\n\n                if (number % 2 == 0) {\n                    collatzSequence.add(number / 2);\n                } else {\n                    collatzSequence.add(3 * number + 1);\n                }\n            }\n        }\n\n        return new ArrayList<>(collatzSequence.stream().filter(n -> n % 2 != 0).sorted().toList());\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "import java.util.*;\nimport java.time.LocalDate;\n\npublic class ValidDate {\n    public static Boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        LocalDate localDate = LocalDate.of(year, month, day);\n        return localDate.isSupported(TemporalAdjusters.firstDayOfMonth()) &&\n               localDate.isLeapYear(year) ? (month == 2 && day <= 29) || (month != 2 || day <= LocalDate.of(year, month, 1).lengthOfMonth()) : (month == 2 && day <= 28) || (month != 2 || day <= LocalDate.of(year, month, 1).lengthOfMonth());\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class SplitWords {\n\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \") || txt.contains(\",\")) {\n            String[] words = txt.split(\"\\\\s+|,\");\n            return new ArrayList<>(Arrays.asList(words));\n        } else {\n            int count = 0;\n            for (char c : txt.toLowerCase().toCharArray()) {\n                if ((c >= 'a' && c <= 'z') && (c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.util.*;\n\npublic class IsSorted {\n    public static Boolean isSorted(List<Integer> lst) {\n        // If the list has only one element, it's sorted.\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int current = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            // If the current number is not less than the next one, it's not sorted.\n            if (lst.get(i) <= current) {\n                return false;\n            }\n            // Update the current number to compare with the next ones.\n            current = lst.get(i);\n        }\n        // If we reach here, the list is sorted in ascending order.\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.util.*;\n\npublic class Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Calculate the intersection\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"NO\"; // No intersection since start is greater than end\n        }\n\n        // Check if the length of the intersection is a prime number\n        int length = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "public static Integer prodSigns(List<Object> arr) {\n    if (arr.isEmpty()) return null;\n\n    long signProduct = 1;\n    long sumOfMagnitudes = 0;\n\n    for (Object number : arr) {\n        // Skip zero since its sign is undefined\n        if (number == 0) continue;\n\n        long n = (long) number;\n        sumOfMagnitudes += Math.abs(n);\n        signProduct *= (n > 0) ? 1 : -1;\n    }\n\n    return signProduct * sumOfMagnitudes;\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.util.*;\n\nclass Minpath {\n\n    private static final int[][] DIRS = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        boolean[] visited = new boolean[n * n];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{grid[i][j], i * n + j});\n                visited[i * n + j] = true;\n            }\n        }\n\n        List<Integer> path = new ArrayList<>();\n\n        while (pq.size() > 0 && path.size() < k) {\n            int[] cur = pq.poll();\n            path.add(cur[1]);\n\n            for (int[] dir : DIRS) {\n                int x = cur[1] / n + dir[0];\n                int y = cur[1] % n + dir[1];\n\n                if (x < 0 || x >= n || y < 0 || y >= n || visited[y * n + x]) {\n                    continue;\n                }\n\n                pq.offer(new int[]{grid[x][y], y * n + x});\n                visited[y * n + x] = true;\n            }\n        }\n\n        if (path.size() != k) {\n            throw new IllegalArgumentException(\"Invalid parameters\");\n        }\n\n        return path;\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    public static List<Number> tri(int n) {\n        List<Number> sequence = new ArrayList<>();\n        sequence.add(BigInteger.valueOf(3)); // add initial value\n        BigInteger t2 = BigInteger.valueOf(0);\n        BigInteger t3 = BigInteger.valueOf(1);\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // even index, add current value to the sequence\n                sequence.add(BigInteger.valueOf((i + 1) / 2));\n            } else {\n                // odd index, calculate next value and add it to the sequence\n                BigInteger temp = t3;\n                t3 = t2.add(t3).add(sequence.get(sequence.size() - i - 1));\n                t2 = temp;\n                sequence.add(t3);\n            }\n        }\n\n        return sequence;\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "import java.util.Arrays;\n\npublic class Digits {\n\n public static int digits(int n) {\n if (n < 0) throw new IllegalArgumentException(\"Input must be non-negative.\");\n\n String numberAsString = Integer.toString(n);\n Character[] numberChars = numberAsString.toCharArray();\n\n int oddDigitProduct = 1;\n boolean foundOddNumber = false;\n for (char c : numberChars) {\n if (!Character.isDigit(c)) throw new IllegalArgumentException(\"Input must be an integer.\");\n int digit = Character.getNumericValue(c);\n if (digit % 2 != 0) {\n oddDigitProduct *= digit;\n foundOddNumber = true;\n }\n }\n\n return foundOddNumber ? oddDigitProduct : 0;\n }\n\n public static void main(String[] args) {\n System.out.println(digits(1)); // 1\n System.out.println(digits(4)); // 0\n System.out.println(digits(235)); // 15\n }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "import java.util.Stack;\n\npublic class IsNested {\n    public static Boolean isNested(String string) {\n        int openBrackets = 0, closeBrackets = 0;\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                openBrackets++;\n                stack.push(c);\n            } else if (c == ']') {\n                closeBrackets++;\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                }\n            }\n        }\n\n        return !stack.isEmpty() || openBrackets > closeBrackets;\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.util.*;\n\npublic class SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number n : lst) {\n            int num = Math.ceil(n.doubleValue()).intValue(); // Round up to the nearest integer and cast it as an int\n            sum += Math.pow(num, 2); // Square the number and add it to the sum\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "import java.util.regex.*;\n\npublic class CheckIfLastCharIsALetter {\n\n public static Boolean checkIfLastCharIsALetter(String txt) {\n if (txt == null || txt.isEmpty()) return false;\n\n Pattern pattern = Pattern.compile(\"\\\\s|\\\\p{Punct}\"); // regex to find spaces and punctuation marks\n Matcher matcher = pattern.matcher(txt);\n String trimmedText = matcher.replaceAll(\"\"); // remove spaces and punctuations from the text\n\n if (trimmedText.length() == 0) return false; // if no alphabets left, return false\n\n char lastChar = trimmedText.charAt(trimmedText.length() - 1); // get the last character\n return Character.isAlphabetic(lastChar); // check if it's an alphabetical character\n }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "import java.util.*;\n\npublic class CanArrange {\n\n public static int canArrange(List<Integer> arr) {\n if (arr == null || arr.size() <= 1) return -1;\n\n Map<Integer, Integer> map = new TreeMap<>(); // Maintain a sorted map of indices and their values\n for (int i = 0; i < arr.size(); i++) {\n map.put(arr.get(i), i);\n }\n\n int largestIndex = -1;\n int currentValue = Integer.MIN_VALUE;\n for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n if (entry.getKey() <= currentValue) { // If the current value is greater than or equal to the current value in the array, we have found a potential match\n largestIndex = Math.max(largestIndex, entry.getValue());\n } else {\n currentValue = entry.getKey(); // Move on to the next value in the sorted map\n }\n }\n\n return largestIndex;\n }\n\n public static void main(String[] args) {\n List<Integer> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n List<Integer> arr2 = Arrays.asList(1, 2, 3);\n System.out.println(canArrange(arr1)); // Output: 3\n System.out.println(canArrange(arr2)); // Output: -1\n }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.util.*;\n\npublic class LargestSmallestIntegers {\n\n public static void main(String[] args) {\n List<Integer> numbers = Arrays.asList(2, 4, 1, 3, 5, 7); // replace with your input list\n List<Integer> result = largestSmallestIntegers(numbers);\n System.out.println(\"The largest negative number is: \" + (result.get(0) != null ? result.get(0) : \"None\") + \", and the smallest positive number is: \" + (result.get(1) != null ? result.get(1) : \"None\"));\n }\n\n public static List<Integer> largestSmallestIntegers(List<Integer> lst) {\n List<Integer> result = new ArrayList<>();\n\n int maxNegative = Integer.MIN_VALUE;\n int minPositive = Integer.MAX_VALUE;\n\n for (Integer number : lst) {\n if (number < 0 && number > maxNegative) {\n maxNegative = number;\n } else if (number > 0 && number < minPositive) {\n minPositive = number;\n }\n }\n\n result.add(maxNegative >= 0 ? null : maxNegative);\n result.add(minPositive <= 0 ? null : minPositive);\n\n return result;\n }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CompareOne {\n    public static Double compareOne(Double a, Double b) {\n        return (a != null && b != null) ? (a > b) ? a : b : null;\n    }\n\n    public static Integer compareOne(Integer a, Integer b) {\n        return (a != null && b != null) ? (a > b) ? a : b : null;\n    }\n\n    public static String compareOne(String a, String b) {\n        if (a == null || b == null) {\n            return null;\n        }\n\n        BigDecimal ad = new BigDecimal(a.replaceAll(\",\", \".\"));\n        BigDecimal bd = new BigDecimal(b.replaceAll(\",\", \".\"));\n\n        return ad.compareTo(bd) > 0 ? a : b;\n    }\n\n    public static Object compareOne(Object a, Object b) {\n        if (a instanceof Double && b instanceof Double) {\n            return compareOne((Double) a, (Double) b);\n        } else if (a instanceof Integer && b instanceof Integer) {\n            return compareOne((Integer) a, (Integer) b);\n        } else if (a instanceof String && b instanceof String) {\n            return compareOne((String) a, (String) b);\n        }\n        return null; // Return null for other cases.\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "import java.util.*;\n\npublic class IsEqualToSumEven {\n    private static final Map<Integer, Integer> counts = new HashMap<>();\n\n    public static boolean isEqualToSumEven(int n) {\n        if (n < 4 || n % 2 != 0) return false;\n        backtrack(n, new int[4], 0);\n        return counts.getOrDefault(n - 4, 0) > 0;\n    }\n\n    private static void backtrack(int rem, int[] current, int idx) {\n        if (rem == 0 && idx == current.length) {\n            counts.put(0, counts.getOrDefault(0, 0) + 1);\n            return;\n        }\n\n        for (int i = 2; rem - i >= 0; ++i) {\n            if (idx < current.length && current[idx] == i) continue;\n            backtrack(rem - i, Arrays.copyOf(current, idx + 1), idx + 1);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "import java.math.*;\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n        BigInteger fact = BigInteger.ONE;\n\n        for (int i = 1; i <= n; ++i) {\n            fact = fact.multiply(BigInteger.valueOf(i));\n        }\n\n        return fact.longValue();\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FixSpaces {\n    /**\n     * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with -\n     *\n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public static String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                if (i > 1 && text.charAt(i - 2) == ' ') {\n                    sb.append(\"-\");\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.util.regex.*;\n\nclass FileNameCheck {\n    public static String fileNameCheck(String fileName) {\n        // Check if the name contains more than three digits\n        if (Pattern.compile(\"\\\\d{4,}\").matcher(fileName).find()) {\n            return \"No\";\n        }\n\n        // Check if there is only one dot in the name\n        if (Pattern.compile(\"\\\\.\").split(fileName).length > 2) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot starts with a letter from the Latin alphabet\n        String[] parts = fileName.split(\"\\\\.\");\n        String prefix = parts[0];\n        if (!prefix.matches(\"[a-zA-Z].*\")) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is either 'txt', 'exe', or 'dll'\n        String suffix = parts[1].toLowerCase();\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(suffix)) {\n            return \"No\";\n        }\n\n        // If all conditions are met, the file name is valid\n        return \"Yes\";\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "import java.util.*;\n\npublic class SumSquares {\n    public static int sumSquares(List<Object> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0)\n                result += Math.pow((Integer)lst.get(i), 2);\n            else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0)\n                result += Math.pow((Integer)lst.get(i), 3);\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.util.*;\n\npublic class WordsInSentence {\n\n public static String wordsInSentence(String sentence) {\n if (sentence == null || sentence.isEmpty()) return \"\";\n\n Set<Integer> primeLengths = new HashSet<>();\n primeLengths.add(2); // 2 is the smallest prime number and it's not a valid word length in this case\n for (int i = 3; i <= Math.sqrt(sentence.length()) + 1; i += 2) {\n if (isPrime(i)) primeLengths.add(i);\n }\n\n String[] words = sentence.split(\" \");\n List<String> resultWords = new ArrayList<>();\n for (String word : words) {\n if (primeLengths.contains(word.length())) resultWords.add(word);\n }\n\n return String.join(\" \", resultWords);\n }\n\n private static boolean isPrime(int number) {\n if (number <= 1) return false;\n for (int i = 2; i * i <= number; i++) {\n if (number % i == 0) return false;\n }\n return true;\n }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.math.*;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Convert the strings to BigRational objects\n        BigRational rX = new BigRational(x.split(\"/\")[0], x.split(\"/\")[1]);\n        BigRational rN = new BigRational(n.split(\"/\")[0], n.split(\"/\")[1]);\n\n        // Check if the product is an integer\n        return (rX.multiply(rN)).toString().endsWith(\"0\");\n    }\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.*;\n\npublic class OrderByPoints {\n    /**\n     * Sorts the given list of integers in ascending order according to the sum of their digits,\n     * and if there are several items with similar sum of their digits, orders them based on their index in original list.\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n        Comparator<Object> comparator = new Comparator<Object>() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                int sum1 = calculateDigitSum((int) o1);\n                int sum2 = calculateDigitSum((int) o2);\n                if (sum1 == sum2) {\n                    return Integer.compare(((List<Object>) nums).indexOf(o1), ((List<Object>) nums).indexOf(o2));\n                } else {\n                    return Integer.compare(sum1, sum2);\n                }\n            }\n        };\n\n        Collections.sort(nums, comparator);\n        return nums;\n    }\n\n    private static int calculateDigitSum(int number) {\n        if (number < 0) {\n            number = -number;\n        }\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "public static int specialfilter(List<Object> nums) {\n    int count = 0;\n    for (Object number : nums) {\n        // Convert the object to an integer\n        int n = ((Number) number).intValue();\n\n        // Check if the number is greater than 10\n        if (n > 10) {\n            // Extract the first and last digits of the number\n            int firstDigit = n / 10 % 10;\n            int lastDigit = n % 10;\n\n            // Check if both digits are odd\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "int[] a = new int[n];\nfor (int i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.util.*;\n\nenum Planet {\n    MERCURY(0.39), VENUS(0.72), EARTH(1.00), MARS(1.52), JUPITER(5.20), SATURN(9.58), URANUS(19.14), NEPTUNE(30.07);\n\n    private final double distanceFromSun;\n\n    Planet(double distanceFromSun) {\n        this.distanceFromSun = distanceFromSun;\n    }\n\n    public double getDistanceFromSun() {\n        return distanceFromSun;\n    }\n}\n\npublic class Bf {\n    public static List<Planet> bf(String planet1, String planet2) {\n        Map<String, Planet> planetsMap = Arrays.stream(Planet.values())\n                .collect(Collectors.toMap(Planet::toString, Function.identity()));\n\n        if (!planetsMap.containsKey(planet1) || !planetsMap.containsKey(planet2)) {\n            return new ArrayList<>(); // Return an empty list if the given planets are not correct planet names.\n        }\n\n        Planet planet1Obj = planetsMap.get(planet1);\n        Planet planet2Obj = planetsMap.get(planet2);\n\n        List<Planet> result = new ArrayList<>();\n\n        for (Planet planet : Planet.values()) {\n            if (planet.getDistanceFromSun() > planet1Obj.getDistanceFromSun() && planet.getDistanceFromSun() < planet2Obj.getDistanceFromSun()) {\n                result.add(planet);\n            }\n        }\n\n        return result; // Return a list of planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by proximity to the sun.\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.util.*;\n\nclass SortedListSum {\n    public static List<String> sortedListSum(List<String> lst) {\n        // First, filter out strings with odd lengths\n        List<String> filteredLst = lst.stream()\n            .filter(str -> str.length() % 2 == 0)\n            .collect(Collectors.toList());\n\n        // Then, sort the list based on length and lexicographical order\n        Comparator<String> comparator = (s1, s2) -> {\n            if (s1.length() != s2.length()) return Integer.compare(s1.length(), s2.length());\n            return s1.compareTo(s2);\n        };\n\n        // Apply the custom comparator to sort the list\n        filteredLst.sort(comparator);\n\n        return filteredLst;\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    // Check if n is prime number\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Helper function to check if a number is prime\npublic static boolean isPrime(int num) {\n    // If the number is less than 2, it's not prime\n    if (num <= 1) {\n        return false;\n    }\n\n    // Check for divisibility from 2 to the square root of the number\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n\n    // If no divisors found, the number is prime\n    return true;\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "import java.util.*;\n\npublic class DoubleTheDifference {\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 3, 2, 0);\n        List<Object> list2 = Arrays.asList(-1, -2, 0);\n        List<Object> list3 = Arrays.asList(9, -2);\n        List<Object> list4 = Arrays.asList(0);\n        List<Object> emptyList = new ArrayList<>();\n\n        System.out.println(\"double_the_difference([1, 3, 2, 0]) == \" + doubleTheDifference(list1));\n        System.out.println(\"double_the_difference([-1, -2, 0]) == \" + doubleTheDifference(list2));\n        System.out.println(\"double_the_difference([9, -2]) == \" + doubleTheDifference(list3));\n        System.out.println(\"double_the_difference([0]) == \" + doubleTheDifference(list4));\n        System.out.println(\"double_the_difference([]) == \" + doubleTheDifference(emptyList));\n    }\n\n    public static int doubleTheDifference(List<Object> lst) {\n        if (lst.isEmpty()) return 0;\n\n        int sum = 0;\n        for (Object obj : lst) {\n            if (!(obj instanceof Integer)) continue; // skip non-integer objects\n            int num = (int) obj;\n            if (num < 0) continue; // skip negative numbers\n\n            if (num % 2 != 0) sum += Math.pow(num, 2); // square the odd numbers and add to the sum\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n    if (game.size() != guess.size()) {\n        throw new IllegalArgumentException(\"Both arrays must have the same length\");\n    }\n\n    List<Integer> result = new ArrayList<>(game.size());\n\n    for (int i = 0; i < game.size(); i++) {\n        int difference = Math.abs(game.get(i) - guess.get(i));\n        result.add(difference);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "public static String strongestExtension(String className, List<String> extensions) {\n    Map<Integer, List<String>> extensionStrength = new HashMap<>();\n\n    // Calculate strength for each extension and store in the map\n    for (String ext : extensions) {\n        int strength = 0;\n        for (char c : ext.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                strength++;\n            } else if (Character.isLowerCase(c)) {\n                strength--;\n            }\n        }\n        List<String> list;\n        if (!extensionStrength.containsKey(strength)) {\n            list = new ArrayList<>();\n        } else {\n            list = extensionStrength.get(strength);\n        }\n        list.add(ext);\n        extensionStrength.put(strength, list);\n    }\n\n    // Find the strongest extension and return its full name\n    int maxStrength = Collections.max(extensionStrength.keySet());\n    String strongestExtensionName = extensionStrength.get(maxStrength).get(0);\n    return className + \".\" + strongestExtensionName;\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "import java.util.*;\n\npublic class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        if (b.length() > a.length()) return false;\n\n        char[] arrA = a.toCharArray();\n        char[] arrB = b.toCharArray();\n        int n = arrB.length;\n\n        // Create a map to store the starting indices of all rotations of 'b' in 'a'\n        Map<String, Integer> rotationMap = new HashMap<>();\n        for (int i = 0; i < a.length() - n + 1; i++) {\n            String substring = a.substring(i, i + n);\n            if ( Arrays.equals(arrB, substring.toCharArray()) ) {\n                rotationMap.put(substring, i);\n            }\n        }\n\n        // Linear search for 'b' or any of its rotations in the map\n        for (String key : rotationMap.keySet()) {\n            if (Arrays.equals(arrB, key.toCharArray())) return true;\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.util.ArrayList;\n\npublic class EvenOddCount {\n    public static List<Integer> evenOddCount(int num) {\n        if (num < 0) {\n            num = -num;\n        }\n\n        ArrayList<Integer> result = new ArrayList<>();\n        int evenCount = 0, oddCount = 0;\n\n        while (num > 0) {\n            int rem = num % 10;\n            if (rem == 0) {\n                // If the digit is 0, it's neither even nor odd, so we ignore it.\n                continue;\n            }\n\n            if (rem % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n\n            num /= 10;\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(evenOddCount(-12)); // Output: [1, 1]\n        System.out.println(evenOddCount(123)); // Output: [1, 2]\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "public static String intToMiniRoman(int number) {\n    if (number == 0) return \"\";\n    Map<Integer, Character> values = new HashMap<>();\n    values.put(1000, 'M');\n    values.put(500, 'D');\n    values.put(100, 'C');\n    values.put(50, 'L');\n    values.put(10, 'X');\n    values.put(5, 'V');\n    values.put(1, 'I');\n\n    StringBuilder result = new StringBuilder();\n    for (Map.Entry<Integer, Character> entry : values.entrySet()) {\n        while (number >= entry.getKey()) {\n            number -= entry.getKey();\n            result.append(entry.getValue());\n        }\n    }\n    return result.reverse().toString();\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n    return true;\n} else {\n    return false;\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.*;\n\npublic class FindMax {\n\n public static String findMax(List<String> words) {\n Map<Character, Integer> charCount;\n String maxWord = \"\";\n int maxLength = 0;\n\n for (String word : words) {\n charCount = new HashMap<>();\n\n for (char c : word.toCharArray()) {\n if (!charCount.containsKey(c)) {\n charCount.put(c, 1);\n }\n }\n\n int length = charCount.size();\n\n if (length > maxLength) {\n maxWord = word;\n maxLength = length;\n } else if (length == maxLength && word.compareTo(maxWord) < 0) {\n maxWord = word;\n }\n }\n\n return maxWord;\n }\n\n public static void main(String[] args) {\n List<String> words = Arrays.asList(\"name\", \"of\", \"string\", \"enam\", \"game\", \"aaaaaaa\", \"bb\", \"cc\");\n String result = findMax(words);\n System.out.println(result); // Output: enam (because 'enam' has the maximum number of unique characters and comes first in lexicographical order)\n }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "public static List<Integer> eat(int number, int need, int remaining) {\n    // Calculate the total number of carrots to be eaten (need - already eaten)\n    int carrotsToEat = need - number;\n\n    // If there are not enough carrots left, the rabbit will eat all available carrots and will still be hungry\n    if (carrotsToEat > remaining) {\n        return new ArrayList<>(Arrays.asList(number + remaining, 0));\n    } else {\n        // If there are enough carrots to meet the required need, the rabbit eats all available carrots and still has some left\n        int carrotsLeft = remaining - carrotsToEat;\n        return new ArrayList<>(Arrays.asList(number + carrotsToEat, carrotsLeft));\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.util.*;\n\npublic class DoAlgebra {\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"operator and operand lists must have the same difference in length\");\n        }\n\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < operator.size(); ++i) {\n            if (!\"+\" .equals(operator.get(i)) && !\"-\" .equals(operator.get(i)) && !\"*\" .equals(operator.get(i)) && !\"//\" .equals(operator.get(i)) && !\"**\" .equals(operator.get(i))) {\n                throw new IllegalArgumentException(\"Unrecognized operator: \" + operator.get(i));\n            }\n        }\n\n        for (int i = 0; i < operand.size(); ++i) {\n            if (i > 0 && stack.isEmpty()) {\n                stack.push(operand.get(i));\n                continue;\n            }\n\n            int b;\n            int a;\n            String op = operator.get(i - 1);\n            if (i == 0) {\n                a = operand.get(i);\n            } else {\n                b = stack.pop();\n                a = stack.peek();\n            }\n\n            switch (op) {\n                case \"+\":\n                    stack.push(a + b);\n                    break;\n                case \"-\":\n                    stack.push(a - b);\n                    break;\n                case \"*\":\n                    stack.push(a * b);\n                    break;\n                case \"//\":\n                    stack.push(a / b);\n                    break;\n                case \"**\":\n                    stack.push((int) Math.pow(a, b));\n                    break;\n            }\n        }\n\n        return stack.peek();\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "public static String solve(String s) {\n    StringBuilder sb = new StringBuilder();\n\n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            char newChar = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            sb.append(newChar);\n        } else {\n            sb.append(c);\n        }\n    }\n\n    if (!sb.toString().contains(\"\" + (char) Character.MIN_VALUE)) { // Checking if the string contains no letters, if so, reverse it.\n        return new StringBuilder(sb.reverse()).toString();\n    } else {\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\n\nclass StringToMd5 {\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) return null;\n\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n\n        byte[] textBytes = text.getBytes();\n        byte[] md5Hash = md.digest(textBytes);\n\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : md5Hash) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n\n        return hexString.toString();\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    public static List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        if (a > b) return result; // Check for invalid input\n\n        if ((a % 2 == 0) && (b % 2 == 0)) { // Special case when both are even\n            result.add(a);\n            result.add(b);\n        }\n\n        generateIntegersHelper(a, b, result);\n        return result;\n    }\n\n    private static void generateIntegersHelper(int a, int b, List<Integer> result) {\n        if (a > b) return; // Base case for recursion\n        if (a % 2 == 0) result.add(a); // Add even numbers to the result list\n        generateIntegersHelper(a + 1, b, result); // Recursive call\n    }\n}"}

{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "function separateParenGroups(parenstring) {\n    const result = [];\n    let start = 0;\n    let end;\n\n    while ((end = parenstring.indexOf('(', start)) !== -1) {\n        start = parenstring.indexOf(')', end);\n        if (start === -1) break; // unmatched parenthesis\n\n        const group = parenstring.slice(end + 1, start);\n        result.push(group);\n        start++; // move the starting index after the closed parenthesis\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n  return number - Math.floor(number);\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n  for (let operation of operations) {\n    if (balance < 0 && operation > 0) {\n      return true; // If the account balance is already below zero and a deposit follows, it's impossible to get the balance back above zero, so we can return True\n    }\n    balance += operation;\n  }\n  return false; // If we reach this point, the balance never fell below zero during the operations\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n    if (!Array.isArray(numbers)) throw new Error('Input must be an array.');\n\n    let sum = 0;\n    const avg = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += Math.abs(numbers[i] - avg);\n    }\n\n    return sum / numbers.length;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimeter) {\n    let result = [numbers[0]]; // start with the first element\n\n    for (let i = 1; i < numbers.length; i++) {\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenstring) {\n  let maxDepth = [];\n  let stack = [[0, parenstring]];\n\n  function dfs(level, str) {\n    if (str.length === 0) return;\n\n    const nextLevel = level + (str[0] === '(' ? 1 : -1);\n\n    if (nextLevel < 0 && str[0] === ')') { // closing parenthesis without opening one found, invalid input\n      throw new Error(\"Invalid input\");\n    }\n\n    if (str[0] === '(') stack.push([nextLevel, str.slice(1)]);\n    else {\n      if (stack.length > 1 && stack[stack.length - 2][1].slice(-1) === '(') { // check for a closing parenthesis that matches an opening one in the stack\n        const lastOpening = stack[stack.length - 2];\n        if (nextLevel === lastOpening[0] + 1) {\n          const newMaxDepth = Math.max(lastOpening[0], dfs(nextLevel, str.slice(1)).maxDepth);\n          maxDepth.push(newMaxDepth);\n        }\n      }\n      stack.pop();\n      dfs(nextLevel, str.slice(1));\n    }\n  }\n\n  try {\n    dfs(0, parenstring);\n  } catch (e) {\n    console.error(e.message);\n  }\n\n  return maxDepth;\n}"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "function filterBySubstring(strings, substring) {\n    return strings.filter(str => str.includes(substring));\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n    let max = numbers[0];\n    let rollingMaxes = [numbers[0]];\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        rollingMaxes.push(max);\n    }\n\n    return rollingMaxes;\n}"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(string) {\n  if (string === '') return '';\n\n  let start = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] !== string[start + i]) break;\n    start++;\n  }\n\n  const palindrome = string.substring(start, start + Math.min(string.length, start * 2));\n  const prefixLength = palindrome.length >> 1; // right-shift operator\n  const reversePrefix = reverseString(palindrome.slice(0, prefixLength));\n\n  return palindrome + (prefixLength === palindrome.length / 2 ? '' : reversePrefix);\n}\n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "function stringXor(a, b) {\n    let result = '';\n    for (let i = 0; i < Math.max(a.length, b.length); i++) {\n        const aIndex = (i < a.length ? i : a.length - 1);\n        const bIndex = (i < b.length ? i : b.length - 1);\n        result += String.fromCharCode(a[aIndex].charCodeAt(0) ^ b[bIndex].charCodeAt(0));\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n    return strings.reduce((longest, current) => (current.length > longest.length ? current : longest), '');\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n\n// Example usage\nconsole.log(greatestCommonDivisor(3, 5)); // Output: 1\nconsole.log(greatestCommonDivisor(25, 15)); // Output: 5"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "function allPrefixes(string) {\n    let result = [];\n    for (let i = 0; i < string.length; ++i) {\n        for (let j = i; j <= string.length; ++j) {\n            result.push(string.slice(i, j));\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n    let result = '';\n    for (let i = 0; i <= n; i++) {\n        if (result !== '') {\n            result += ' '; // Add a space after each number, except for the first one.\n        }\n        result += String(i);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n  let characterCount = {};\n  for (let char of string) {\n    if (!characterCount[char]) {\n      characterCount[char] = 1;\n    } else {\n      characterCount[char]++;\n    }\n  }\n  return Object.keys(characterCount).length;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicstring) {\n    let beats = [];\n    for (let i = 0; i < musicstring.length; ++i) {\n        if (musicstring[i] === 'o') {\n            beats.push(4);\n        } else if (musicstring[i] === 'o|') {\n            beats.push(2);\n        } else if (musicstring[i] === '.|') {\n            beats.push(1);\n        }\n    }\n    return beats;\n}"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(str, substr) {\n  let counter = 0;\n  let index = str.indexOf(substr);\n\n  // Continue finding and counting substring occurrences while index is not -1 (indicating the substring was found)\n  while (index !== -1) {\n    counter++;\n    index = str.indexOf(substr, index + substr.length);\n  }\n\n  return counter;\n}"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "const numbersMap = {\n  'zero': 0,\n  'one': 1,\n  'two': 2,\n  'three': 3,\n  'four': 4,\n  'five': 5,\n  'six': 6,\n  'seven': 7,\n  'eight': 8,\n  'nine': 9\n};\n\nfunction sortNumbers(numbers) {\n  // Split the input string into an array of numbers\n  const numberArray = numbers.split(' ').map((number) => ({ value: number, order: numbersMap[number]}));\n\n  // Sort the array based on the order of the numbers in English\n  numberArray.sort((a, b) => a.order - b.order);\n\n  // Join the sorted array into a string and return it\n  const sortedNumbers = numberArray.map(item => item.value).join(' ');\n  return sortedNumbers;\n}"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n  if (numbers.length < 2) throw new Error(\"The supplied list of numbers must have a minimum length of 2.\");\n\n  let closestPair = [numbers[0], numbers[1]];\n  let minDistance = Math.abs(closestPair[0] - closestPair[1]);\n\n  for (let i = 1; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let currentDistance = Math.abs(numbers[i] - numbers[j]);\n      if (currentDistance < minDistance) {\n        minDistance = currentDistance;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closestPair;\n}"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    return numbers.map(number => (number - min) / (max - min));\n}"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values) {\n  return values.filter(Number.isInteger);\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "function strlen(string) {\n    return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n    let divisor = Math.sqrt(n);\n    while (divisor % n !== 0 || divisor > n) {\n        divisor--;\n    }\n    return divisor;\n}"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i !== 0) i++;\n    else {\n      let count = 1;\n      while (n % i === 0) {\n        n /= i;\n        count++;\n      }\n      factors.push(count);\n      i--; // decrement i to start checking again from the new factor's value\n    }\n  }\n  if (n > 1) factors.push(1); // handle the case when n is a prime number\n  return factors;\n}"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n  // Create a Set from the input array\n  const uniqueNumbers = new Set(numbers);\n\n  // Convert the Set back to an array, which will contain only unique values\n  return [...uniqueNumbers];\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(string) {\n    return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');\n}"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "const concatenate = (strings) => strings.join('');"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n    const filteredArray = strings.filter((string) => string.startsWith(prefix));\n    return filteredArray;\n}\n\n// Test Cases\nconsole.log(filterByPrefix([], 'a')); // []\nconsole.log(filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')); // ['abc', 'array']"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(num => num > 0);\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n    // Check for edge cases (numbers less than or equal to 1 are not primes)\n    if (n <= 1) return false;\n\n    // Iterate through all numbers up to the square root of n, checking if any divide n evenly\n    for(let i = 2; i * i <= n; i++) {\n        if(n % i === 0) return false;\n    }\n\n    // If no divisors found up to the square root of n, then n is prime\n    return true;\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n  const lPrime = [];\n  for (let i = 0; i < l.length; ++i) {\n    if (i % 3 !== 0) {\n      lPrime.push(l[i]);\n    } else {\n      const sortedIndex = l.slice().sort((a, b) => a - b)[Math.floor(i / 3)];\n      lPrime.push(sortedIndex);\n    }\n  }\n  return lPrime;\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "function unique(arr) {\n  return arr.filter((item, index, self) => self.indexOf(item) === index).sort();\n}\n\n// Usage\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "const maxElement = arr => Math.max(...arr);\n\n// Usage examples:\nconsole.log(maxElement([1, 2, 3])); // Output: 3\nconsole.log(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: 123"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n    let count = 0;\n\n    for (let i = 1; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) { // check if the number is divisible by either 11 or 13\n            const digit7Count = String(i).split(\"\").reduce((total, num) => total + parseInt(num), 0); // count the occurrences of digit 7 in the number\n            if (digit7Count > 0) { // if the number contains a 7, increment the count\n                count++;\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n  const result = [...l];\n\n  // Iterate through every even indexed element in the array\n  for (let i = 0; i < result.length; i += 2) {\n    // Create a copy of the current value at the even index\n    let currentValue = result[i];\n\n    // Find the first unsorted value to the right of the current one\n    let j = i + 1;\n    for (; j < result.length && result[j] < currentValue; j++) {}\n\n    // Swap the current value with the found value or itself if no swap is needed\n    const temp = result[i];\n    result[i] = result[j];\n    result[j] = temp;\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nfunction primeFib(n) {\n  let f = 0, g = 1, p = 2;\n  for (let i = 3; i <= n; i++) {\n    p = fibonacci(i);\n    if (isPrime(p)) return p;\n    f = g;\n    g = p;\n  }\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "function triplesSumToZero(l) {\n  for (let i = 0; i < l.length - 2; i++) { // iterate through all possible triplets without repetition\n    for (let j = i + 1; j < l.length - 1; j++) {\n      let k = j + 1;\n      let currentSum = l[i] + l[j];\n      if (currentSum === 0) return true; // found a triplet that sums to zero, so return true\n      for (let n = k; n < l.length; n++) { // check remaining elements in the list\n        if (currentSum + l[n] === 0) return true;\n      }\n      currentSum += l[k]; // move on to the next triplet\n    }\n  }\n  return false; // if no triplets were found that sum to zero, return false\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n  // Calculate the time between each car collision event\n  let T = 2 * (n - 1);\n\n  // If there is an even number of cars, then there will be a car in the middle that moves infinitely far without colliding with anyone else.\n  // In this case, we need to skip the first collision time and consider only every second collision event.\n  if (n % 2 === 0) T *= 2;\n\n  return Math.floor(T / 2);\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n    return l.map((item) => item + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  for (let i = 0; i < l.length - 1; i++) {\n    const currentNum = l[i];\n    const targetNum = -currentNum;\n    if (l.includes(targetNum, i + 1)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base, output = '', newBase) {\n  if (x === 0) return output;\n\n  x = Math.floor(x / base);\n  output = String.fromCharCode((x % newBase) + (newBase > 9 ? 87 : 48)) + output;\n\n  return changeBase(x, base, output, newBase);\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(base, height) {\n  return 0.5 * base * height;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n  let prevPrev = 0;\n  let prev = 0;\n  let current = 2; // starting values for the first 3 terms (fib4(0), fib4(1), fib4(2))\n\n  for (let i = 3; i <= n; i++) {\n    [prevPrev, prev, current] = [current, prev, current + prev + prevPrev]; // updating values according to the definition of fib4 sequence\n  }\n\n  return current;\n}\n\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "function median(l) {\n  let sortedList = l.slice().sort((a, b) => a - b); // Sort the array in ascending order\n\n  let n = sortedList.length;\n  let midIndex = Math.floor(n / 2);\n\n  if (n % 2 === 0) {\n    return (sortedList[midIndex - 1] + sortedList[midIndex]) / 2; // If the array length is even, return the average of the two middle elements\n  } else {\n    return sortedList[midIndex]; // If the array length is odd, return the middle element directly\n  }\n}"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "function isPalindrome(text) {\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n  // Convert n and p to BigInt for correct calculation of powers\n  const nBig = BigInt(n);\n  const pBig = BigInt(p);\n\n  let result = BigInt(1);\n\n  // Calculate 2^n modulo p\n  while (nBig > BigInt(0)) {\n    if ((nBig & BigInt(1)) === BigInt(1)) {\n      result = (result * BigInt(2)) % pBig;\n    }\n\n    nBig >>= 1;\n  }\n\n  // Convert the final result back to Number for returning\n  return Number(result);\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n    return text.replace(/[aeiouAEIOU]/g, '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\nconsole.log(belowThreshold([1, 20, 4, 10], 5)); // False"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n\nfun main() {\n    println(add(2, 3)) // Output: 5\n    println(add(5, 7)) // Output: 12\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  const freqMap0 = buildFrequencyMap(s0);\n  const freqMap1 = buildFrequencyMap(s1);\n\n  // Check if the frequencies are equal for each character\n  for (const char in freqMap0) {\n    if (freqMap0[char] !== freqMap1[char]) return false;\n  }\n\n  // If we've looped through all characters without returning false, they have the same characters\n  return true;\n}\n\nfunction buildFrequencyMap(str) {\n  const freqMap = {};\n\n  for (const char of str) {\n    if (!freqMap[char]) {\n      freqMap[char] = 1;\n    } else {\n      freqMap[char]++;\n    }\n  }\n\n  return freqMap;\n}"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n  let stack = [];\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      // If the stack is empty or the top element of the stack is not '<', return false\n      if (!stack.length || stack.pop() !== \"<\") {\n        return false;\n      }\n    }\n  }\n\n  // If the stack is empty, it means all closing brackets have been popped correctly\n  return !stack.length;\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "function monotonic(arr) {\n    let isIncreasing = true;\n    let prevElement = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        const currentElement = arr[i];\n\n        if ((prevElement > currentElement && isIncreasing) || (prevElement < currentElement && !isIncreasing)) {\n            return false;\n        }\n\n        prevElement = currentElement;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "function common(l1, l2) {\n    return l1.filter(item => l2.includes(item)).filter((value, index, self) => self.indexOf(value) === index);\n}\n\n// Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    if (n < 2) return null; // Return null or an error message for numbers less than 2.\n\n    let factors = [];\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n        }\n    }\n\n    // If the remaining number after checking all possible factors is prime, it's the largest prime factor.\n    if (n > 2 && Math.floor(n) === n) {\n        return n;\n    }\n\n    // Return the largest found factor from the array 'factors'.\n    return Math.max(...factors);\n}"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n    let total = 0;\n    for (let i = 1; i <= n; i++) {\n        total += i;\n    }\n    return total;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n  let stack = [];\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push('(');\n    } else if (brackets[i] === ')') {\n      if (!stack.length || stack.pop() !== '(') return false;\n    }\n  }\n\n  // If the loop finished and the stack is empty, the brackets are correctly balanced.\n  return !stack.length;\n}"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i]);\n  }\n  result.unshift(0); // Add the derivative of the constant term (which is zero)\n  return result;\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "function fibfib(n) {\n    if (n <= 2) return 0;\n    else if (n === 3) return 1;\n    else return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n    const regex = /[aeiouy]/gi; // Regular expression for matching any vowel, including 'y' at the end of a word\n    let count = (s.match(regex) || []).length; // Use .match() method to find matches and get their length\n    return count; // Return the number of vowels found\n}"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n  const str = String(x); // Convert the integer to a string for easier manipulation\n  const digits = Array.from(str); // Split the string into an array of characters (digits)\n\n  if (shift > digits.length) {\n    // If shift is greater than the number of digits, return the digits reversed\n    return digits.reverse().join('');\n  }\n\n  // Shift the digits to the right by the specified amount and concatenate them with the rest operation (...)\n  const result = [...digits.slice(shift), ...digits.slice(0, shift)];\n\n  return result.join(''); // Convert the resulting array back into a string\n}"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitSum(s) {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n  const fruits = s.match(/(\\d+) (apples|oranges)/);\n  const apples = parseInt(fruits[1]);\n  const oranges = (fruits[2] === 'apples') ? apples : oranges; // Swapping the values if it's an apple instead of orange\n  const totalFruitsInBasket = n - apples - oranges;\n  return totalFruitsInBasket;\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n    let smallestEven = Number.MAX_SAFE_INTEGER;\n    let indexOfSmallestEven = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] <= smallestEven) {\n            smallestEven = arr[i];\n            indexOfSmallestEven = i;\n        }\n    }\n\n    return smallestEven === Number.MAX_SAFE_INTEGER ? [] : [smallestEven, indexOfSmallestEven];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "function search(lst) {\n  const freq = {};\n  let currentNum;\n  let currentMax = -1;\n\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (!freq[num]) {\n      freq[num] = 1;\n      continue;\n    }\n    freq[num]++;\n    if (num <= currentMax) currentMax = num;\n    if (freq[num] >= num) currentMax = num;\n  }\n\n  return currentMax !== -1 ? currentMax : -1;\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n  if (!Array.isArray(lst) || lst.length === 0) return lst;\n\n  // Custom comparator for sorting in strange order\n  const compare = (a, b) => b - a;\n\n  // Sort the array using the custom comparator\n  return lst.sort(compare);\n}"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Check if the given lengths are greater than 0\n    if (a > 0 && b > 0 && c > 0) {\n        // Check if the sides form a valid triangle\n        if ((a + b > c) && (b + c > a) && (c + a > b)) {\n            // Calculate semi-perimeter (s) and area (S) using Heron's formula\n            let s = (a + b + c) / 2;\n            let S = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the result to 2 decimal points\n            return parseFloat(S.toFixed(2));\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    } else {\n        // Return -1 if any side length is not greater than 0\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "function willItFly(q, w) {\n  // Check if q is a palindrome by comparing it with its reverse\n  const isBalanced = (() => {\n    for (let i = 0; i < Math.floor(q.length / 2); i++) {\n      if (q[i] !== q[q.length - i - 1]) return false;\n    }\n    return true;\n  })();\n\n  // Check if the sum of elements is less than or equal to w\n  const totalWeight = q.reduce((acc, val) => acc + val);\n\n  return isBalanced && (totalWeight <= w);\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function isPalindrome(arr) {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start < end) {\n    if (arr[start] !== arr[end]) return false;\n\n    start++;\n    end--;\n  }\n\n  return true;\n}\n\nfunction smallestChange(arr) {\n  let changes = 0;\n\n  for (let i = 0, j = arr.length - 1; i < j; ) {\n    if (arr[i] !== arr[j]) changes++;\n    i++;\n    j--;\n  }\n\n  return !isPalindrome(arr) ? changes : 0;\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n    let total1 = lst1.reduce((acc, str) => acc + str.length, 0);\n    let total2 = lst2.reduce((acc, str) => acc + str.length, 0);\n\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        // If the two lists have the same number of chars, return the first list.\n        return lst1;\n    }\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isPrime(n) {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n    }\n    return n > 1;\n}"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function isSimplePower(x, n) {\n  if (Math.log2(x) % Math.log2(n) !== 0) return false;\n  return Math.pow(n, Math.floor(Math.log2(x))) === x;\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "function isCube(n) {\n  const root = Math.cbrt(n);\n  return Math.pow(root, 3) === n;\n}"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n  let primeCount = 0;\n  const hexToDec = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15,\n  };\n\n  for (let i = 0; i < num.length; i++) {\n    const digit = hexToDec[num[i].toUpperCase()];\n    if (isPrime(digit)) {\n      primeCount++;\n    }\n  }\n\n  function isPrime(number) {\n    if (number < 2) return false;\n    for (let i = 2; i <= Math.sqrt(number); i++) {\n      if (number % i === 0) return false;\n    }\n    return true;\n  }\n\n  return primeCount;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    const binary = (decimal).toString(2);\n    return 'db' + binary + 'db';\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "function isHappy(s) {\n    // Ensure input is valid (non-empty and length > 2)\n    if (!s || s.length <= 2) return false;\n\n    let counter = {}; // Store visited groups of three characters to check for duplicates\n\n    for (let i = 0; i < s.length - 2; i++) {\n        let group = s.slice(i, i + 3); // Get the group of three consecutive characters\n\n        if (counter[group]) return false; // If we've seen this group before, the string is not happy\n        counter[group] = true; // Mark the current group as visited\n    }\n\n    return true; // The string is happy if we reach here without finding any duplicates\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n  const gradeMapping = {\n    4.0: \"A+\",\n    [4.01, 3.7]: \"A\",\n    [3.71, 3.29]: \"A-\",\n    [3.3, 3.0]: \"B+\",\n    [3.01, 2.69]: \"B\",\n    [2.691, 2.29]: \"B-\",\n    [2.3, 2.0]: \"C+\",\n    [2.01, 1.69]: \"C\",\n    [1.691, 1.3]: \"C-\",\n    [1.299, 1.0]: \"D+\",\n    [1.01, 0.69]: \"D\",\n    [0.69, 0.0]: \"D-\",\n    0: \"E\"\n  };\n\n  return grades.map(grade => gradeMapping[grade] || gradeMapping[Object.keys(gradeMapping).find(key => key >= grade)][1]);\n}\n\n// Test the function with your example\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function primeLength(string) {\n    const length = string.length;\n    if (length <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(length); i <= sqrt; i++) {\n        if (length % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n, num = '', count = 0) {\n  if (num.length === n && count < 10 ** n) { // To avoid exceeding maximum safe integer value in JavaScript\n    count++;\n    return count;\n  }\n\n  if (num.length > n) return count;\n\n  startsOneEnds(n, num + '1', count); // Count the number starting with '1'\n  startsOneEnds(n, num + '0', count); // Skip to next digit\n\n  if (num !== '') startsOneEnds(n, num.slice(0, -1), count); // Count the numbers ending with '1'\n\n  return count;\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "function solve(n) {\n    let bin = n.toString(2); // Convert decimal number to binary\n    let totalSum = 0;\n\n    for (let i = 0; i < bin.length; i++) {\n        totalSum += parseInt(bin[i], 2); // Sum up the digits in binary representation\n    }\n\n    return totalSum.toString(2); // Convert the sum to binary and return it as a string\n}"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n    return s.split(' ') // Split the string into an array of words\n        .map(word => word.split('').sort().join('')) // For each word, sort the characters and join them back together\n        .join(' '); // Join all words back together with a space in between\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "function getRow(lst, x) {\n  let result = [];\n\n  // Loop through each row in the given list\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\n    // Loop through each element in the current row\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  // Sort the resulting list of tuples first by rows in ascending order\n  result.sort((a, b) => a[0] - b[0]);\n\n  // Then sort the tuples within each row by columns in descending order\n  for (let i = 1; i < result.length; i++) {\n    if (result[i][0] === result[i-1][0]) {\n      if (result[i][1] > result[i - 1][1]) {\n        const temp = result[i];\n        result[i] = result[i - 1];\n        result[i - 1] = temp;\n        i--;\n      }\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "function sortArray(array) {\n  // Calculate the sum of the first and last index values\n  const [first, ...rest] = array;\n  const sum = first + rest[rest.length - 1];\n\n  // Sort the array in ascending order if the sum is odd, or sort it in descending order if the sum is even\n  const sortedArray = (sum % 2 === 0) ? rest.slice(1).concat([first]).sort((a, b) => b - a) : rest.sort((a, b) => a - b);\n\n  return [first].concat(sortedArray);\n}"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n    const rotatedAlphabet = \"abcdefghijklmnopqrstuvwxyz\".split('')\n        .map((char, index) => String.fromCharCode('a'.charCodeAt(0) + (index + 26) % 26))\n        .join('');\n\n    return s.replace(/[^a-z]/gi, '') // Remove any non-alphabetic characters\n           .split('')\n           .map(char => rotatedAlphabet[(rotatedAlphabet.indexOf(char.toLowerCase()))])\n           .join('');\n}"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst) {\n  if (lst.length < 2) return 'none';\n\n  let min = lst[0];\n  let secondMin;\n\n  for (let i = 1; i < lst.length; i++) {\n    const currentNum = lst[i];\n    if (currentNum < min) {\n      secondMin = min;\n      min = currentNum;\n    } else if (currentNum < secondMin || !secondMin) {\n      secondMin = currentNum;\n    }\n  }\n\n  return secondMin || 'none';\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function isBored(s) {\n  const regex = /^I\\s*[.!?]/; // Matches a string that starts with \"I\" followed by any number of whitespaces and either '.', '?', or '!'\n  return s.match(regex) !== null;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function anyInt(x, y, z) {\n    // Check if all numbers are integers\n    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n\n    // Check if one number is equal to the sum of the other two\n    let sum = y + z;\n    return (x === sum || x === y || x === z);\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "const vowels = ['a', 'e', 'i', 'o', 'u'];\n\nfunction encode(message) {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i].toLowerCase();\n\n        // Swap case if it's a letter and not a vowel\n        if (!vowels.includes(char) && char.match(/[a-z]/)) {\n            result += char.toUpperCase();\n        }\n        // Replace vowels with the next character in the alphabet (wrapping around at 'z')\n        else if (vowels.includes(char)) {\n            const index = vowels.indexOf(char);\n            let newIndex = (index + 1) % 26;\n            result += String.fromCharCode('a'.charCodeAt(0) + newIndex);\n        }\n        // If it's neither a letter nor a vowel, just keep the original character\n        else {\n            result += char;\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    let maxPrime = -Infinity;\n    let primeSum = 0;\n\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num === 2) return true;\n        if (num % 2 === 0) return false;\n\n        const limit = Math.floor(Math.sqrt(num)) + 1;\n        for (let i = 3; i <= limit; i += 2) {\n            if (num % i === 0) return false;\n        }\n\n        return true;\n    }\n\n    for (let i = 0; i < lst.length; i++) {\n        const num = lst[i];\n        if (isPrime(num)) {\n            maxPrime = Math.max(maxPrime, num);\n        }\n    }\n\n    if (maxPrime === -Infinity) return 0; // no prime numbers found\n\n    const digits = String(maxPrime).split('');\n    for (let i = 0; i < digits.length; i++) {\n        primeSum += parseInt(digits[i]);\n    }\n\n    return primeSum;\n}"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n  // Check if the dictionary is empty\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n\n  let keyType = Object.keys(dict)[0][0]; // Get first character type of the first key in the dictionary\n  for (let key in dict) {\n    // Check if all keys have the same case as the first key\n    if ((key[0].toUpperCase() !== keyType) && (key[0].toLowerCase() !== keyType)) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function countUpTo(n) {\n  const primes = [];\n  const sieve = Array.from({ length: n + 1 }, () => true);\n  sieve[0] = false;\n  sieve[1] = false;\n\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (sieve[i]) {\n      primes.push(i);\n      for (let j = i * i; j <= n; j += i) sieve[j] = false;\n    }\n  }\n\n  return primes.filter((prime) => prime < n);\n}"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(a, b) {\n  // Extract the unit digit (ones place) from each number\n  let unitA = Math.abs(a % 10);\n  let unitB = Math.abs(b % 10);\n\n  // Return the product of unit digits\n  return unitA * unitB;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && /[AEIOU]/.test(s[i].toUpperCase())) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n  const floatValue = parseFloat(value);\n  let closestInt = Math.round(floatValue);\n  if (Math.abs(closestInt - floatValue) === Math.abs(closeInt + 1 - floatValue)) {\n    // Rounding away from zero\n    closestInt += floatValue < 0 ? 1 : -1;\n  }\n  return closestInt;\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "function makeAPile(n) {\n  const pile = [n]; // Initialize the first level\n\n  // Recursively calculate the next levels\n  function calculateNextLevel(level) {\n    const currentStones = level % 2 === 0 ? level + 1 : level + 2;\n    return [...pile, currentStones];\n  }\n\n  for (let i = 1; i < n; i++) {\n    pile = calculateNextLevel(pile[pile.length - 1]);\n  }\n\n  return pile;\n}"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function words_string(s) {\n    // Using regular expression to split on any whitespace or comma\n    return s.split(/[\\s.,]+/);\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n    if (x % 2 !== 0 || y % 2 !== 0) return -1; // Check if both x and y are even numbers\n\n    let num = Math.floor(Math.min(x, y) / 2) * 2; // Find the smallest even number in the range [x, y]\n\n    if (num > y) return -1; // If the smallest even number is greater than y, then there's no such number and we return -1\n\n    return num; // Otherwise, we return the smallest even number\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) return -1;\n\n    let sum = 0;\n    let count = m - n + 1;\n\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const average = Math.round(sum / count);\n    return \"0b\" + average.toString(2);\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n    const oddNumbers = x.filter(num => {\n        const str = num.toString();\n        return !str.match(/2|4|6|8/);\n    }).sort((a, b) => a - b);\n    return oddNumbers;\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function toWords(arr) {\n    const numberNames = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\n    // Filter out non-numeric and negative numbers\n    let filteredArray = arr.filter(function (num) {\n        return !isNaN(num) && num >= 1 && num <= 9;\n    });\n\n    if (filteredArray.length === 0) {\n        return [];\n    }\n\n    // Sort the remaining numbers and reverse them\n    let sortedArray = filteredArray.sort((a, b) => a - b).reverse();\n\n    // Convert each number to its corresponding name\n    let wordsArray = sortedArray.map(function (num) {\n        return numberNames[num];\n    });\n\n    return wordsArray;\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n  const result = Array(n).fill(0);\n\n  for (let i = 1; i <= n; ++i) {\n    if (i % 2 === 0) {\n      // Calculate factorial using recursion. Note: Base case is 0 factorial is 1.\n      result[i - 1] = i > 1 ? result[i - 1] * i : 1;\n    } else {\n      // Sum of numbers from 1 to i using a loop.\n      let sum = 0;\n      for (let j = 1; j <= i; ++j) {\n        sum += j;\n      }\n      result[i - 1] = sum;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "function isPalindrome(n) {\n // Check if n is a palindrome by reversing its digits and comparing with original number\n let reversed = parseInt(String(n).split('').reverse().join(''), 10);\n return n === reversed;\n}\n\nfunction evenOddPalindrome(n) {\n let evenCount = 0, oddCount = 0;\n for (let i = 1; i <= n; i++) {\n if (isPalindrome(i)) {\n if (i % 2 === 0) {\n evenCount++;\n } else {\n oddCount++;\n }\n }\n }\n return [evenCount, oddCount];\n}"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function sumOfDigits(n) {\n // Function to calculate the sum of digits of a number\n let total = 0;\n let numStr = String(Math.abs(n)); // Get the absolute value and convert it to string\n for (let i = 0; i < numStr.length; i++) {\n total += parseInt(numStr[i]);\n }\n return total;\n}\n\nfunction countNums(arr) {\n let count = 0;\n arr.forEach((element) => {\n if (sumOfDigits(element) > 0) {\n count++;\n }\n });\n return count;\n}"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "function moveOneBall(arr) {\n  // If the array is empty, return true since it's already sorted\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let minElement = arr[0];\n  let maxIndex = -1;\n\n  // Iterate through the array to find the maximum and minimum values, along with their indices\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      minElement = arr[i];\n    }\n\n    if (arr[i] > maxElement) {\n      maxIndex = i;\n    }\n  }\n\n  // If no such maximum was found, the array is already sorted\n  if (maxIndex === -1) {\n    return true;\n  }\n\n  // Check if we can bring the maximum to the end by right shifting, and then sort the rest of the array\n  const numShiftsRequired = maxIndex + 1;\n  for (let i = numShiftsRequired; i < arr.length; i++) {\n    arr[i - numShiftsRequired] = arr[i];\n  }\n  arr[arr.length - 1] = minElement;\n\n  // Sort the rest of the array\n  let sortedArr = arr.slice(0, maxIndex + 1);\n  sortedArr.sort((a, b) => a - b);\n\n  return JSON.stringify(arr) === JSON.stringify(sortedArr);\n}"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  const odds = []; // Store odd numbers from lst1 here\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      odds.push(lst1[i]); // Mark as odd number\n    }\n  }\n\n  let swappedCount = 0; // Keep track of the number of swaps performed\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (odds.includes(lst1[i])) { // If we found an odd number, try to find a match in lst2\n      const evenIndex = lst2.findIndex((num) => num === lst1[i] + 1);\n\n      if (evenIndex !== -1) { // Found a matching pair\n        lst1[i] = lst2[evenIndex]; // Swap numbers\n        swappedCount++;\n        lst2.splice(evenIndex, 1); // Remove the even number from lst2\n      } else if (swappedCount === odds.length) { // If we exhaust lst2 without finding enough matches, return \"NO\"\n        return \"NO\";\n      }\n    }\n  }\n\n  return \"YES\"; // If we successfully transformed all odd numbers in lst1 to even, return \"YES\"\n}"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(str) {\n  const charCount = {};\n  if (!str || str.length === 0) return charCount;\n\n  str.split(' ')\n    .flat() // If the string has spaces between characters\n    .forEach((char) => {\n      charCount[char] = (charCount[char] || 0) + 1;\n    });\n\n  return charCount;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // remove characters in s that match any character in c\n    const pattern = new RegExp('(' + c.split('').join('|') + ')', 'g');\n    const result = s.replace(pattern, '');\n\n    // check if the result string is a palindrome\n    const isPalindrome = (str) => str === str.split('').reverse().join('');\n    const isResultPalindrome = isPalindrome(result);\n\n    return [result, isResultPalindrome];\n}"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "function oddCount(lst) {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if ((parseInt(lst[i][j], 10) % 2) === 1) {\n        count++;\n      }\n    }\n    result.push(`the number of odd elements ${count}n the str${i + 1}ng ${i + 1}n the input.`);\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "function minSubArraySum(nums) {\n    let minSum = Infinity;\n    let currentMin = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        currentMin += nums[i];\n        if (currentMin < minSum) {\n            minSum = currentMin;\n        }\n        if (currentMin > 0) {\n            currentMin = 0;\n        }\n    }\n\n    return minSum;\n}"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "def maxFill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_water = 0\n    fill_count = 0\n\n    # Iterate over each well starting from top-left\n    for i in range(rows):\n        for j in range(cols):\n            # Fill the bucket with water from the current well as much as possible\n            water_to_take = min(capacity, grid[i][j])\n            total_water += water_to_take\n            grid[i][j] -= water_to_take\n\n            # If the bucket is full, move to the next well (if it exists)\n            if total_water == capacity:\n                fill_count += 1\n\n                # Move to the next row (go down) or go to the next column (stay in the same row)\n                j = (j + 1) % cols\n\n    return fill_count"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function sortArray(arr) {\n  const compare = (a, b) => {\n    // Count the number of ones in the binary representation\n    let countOnesA = countBinaryOnes(a),\n        countOnesB = countBinaryOnes(b);\n\n    if (countOnesA !== countOnesB) return countOnesA - countOnesB;\n\n    // If the number of ones is the same, sort based on decimal value\n    return a - b;\n  };\n\n  return arr.sort(compare);\n\n  function countBinaryOnes(num) {\n    let count = 0,\n        currentNum = num;\n\n    while (currentNum !== 0) {\n      if ((currentNum & 1) === 1) count++;\n      currentNum >>= 1;\n    }\n\n    return count;\n  }\n}"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(str, n) {\n    // Initialize an empty array to store words that have exactly n consonants\n    const words = [];\n\n    // Split the input string into words using a regular expression that matches any sequence of one or more non-space characters (a word)\n    let wordArray = str.match(/\\b\\w{1,}\\b/g);\n\n    if (!wordArray) return words; // If the string is empty, return an empty array\n\n    for (let i = 0; i < wordArray.length; i++) {\n        let count = 0;\n\n        // Iterate through each character of a given word and check if it's a consonant using a regular expression\n        for (let j = 0; j < wordArray[i].length; j++) {\n            if (!wordArray[i][j].match(/[aeiouAEIOU]/)) { // Check if the character is not a vowel\n                count++; // Increment the consonant count if it's a consonant\n            }\n        }\n\n        // If the word contains exactly n consonants, add it to the words array\n        if (count === n) {\n            words.push(wordArray[i]);\n        }\n    }\n\n    return words; // Return the filtered list of words\n}"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = '';\n\n    // Loop through each character in the word\n    for (let i = 0; i < word.length; i++) {\n        // If the current character is a consonant and not the first letter, and the next character exists and is a vowel or end of the string\n        if (word[i] !== word[0].toLowerCase() && word[i].match(/[bcdfghjklmnpqrstvwxyz]/i) && ((word[i + 1] === undefined || word[i + 1].match(/\\band eiou/i)) || i === word.length - 1)) {\n            // If the next character is a vowel, it is the closest vowel, so return it\n            if (word[i + 1] && word[i + 1].match(/\\band eiou/i)) {\n                result = word[i + 1];\n                break;\n            } else { // Else find the closest vowel from the rest of the string\n                let minIndex = Infinity;\n                let minVowel = '';\n\n                for (let j = i + 2; j < word.length; j++) {\n                    if (vowels.includes(word[j].toLowerCase()) && word[j] !== word[0].toLowerCase() && !word[j - 1].match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n                        if (j < minIndex) {\n                            minIndex = j;\n                            minVowel = word[minIndex];\n                        }\n                    }\n                }\n                result = minVowel;\n                break;\n            }\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "function matchParens(lst) {\n  const [str1, str2] = lst;\n  let stack = [];\n\n  // Check if either string is balanced on its own\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      stack.push('(');\n    } else if (stack.length > 0 && stack[stack.length - 1] === '(') {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  if (stack.length !== 0) { // If there are any remaining open parentheses, the string is not balanced\n    return 'No';\n  }\n\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') {\n      stack.push('(');\n    } else if (stack.length > 0 && stack[stack.length - 1] === '(') {\n      stack.pop();\n    } else {\n      return 'No';\n    }\n  }\n\n  // If the stack is empty after checking both strings, they are balanced\n  return stack.length === 0 ? 'Yes' : 'No';\n}"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n  let maxHeap = new MaxPriorityQueue({\n    compare: function (a, b) {\n      return b - a; // Prioritize higher numbers\n    }\n  });\n\n  for (let i = 0; i < arr.length && k > 0; i++) {\n    if (arr[i] <= maxHeap.front()) continue;\n    maxHeap.enqueue(arr[i]);\n    k--;\n  }\n\n  const result = Array(k).fill().map(() => maxHeap.dequeue());\n  return result;\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "function solution(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if ((i % 2 === 0) && (lst[i] % 2 !== 0)) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n  for (let i = 0; i < k && i < arr.length; i++) {\n    const num = arr[i];\n    if (String(num).length <= 2) {\n      sum += num;\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "function getOddCollatz(n) {\n  const sequence = [n];\n  let currentNumber = n;\n\n  while (currentNumber !== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = 3 * currentNumber + 1;\n    }\n\n    // check if the current number is odd, and add it to the sequence if so\n    if (currentNumber % 2 !== 0) {\n      sequence.push(currentNumber);\n    }\n  }\n\n  // return the sorted sequence of odd numbers\n  return sequence.filter(num => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n    // Check if the date string is not empty\n    if (!date) return false;\n\n    // Parse the date string into an array using split method and check if it has 3 elements (mm-dd-yyyy format)\n    const parts = date.split('-').map(Number);\n    if (parts.length !== 3) return false;\n\n    // Check if month is valid (1-12)\n    const [month, day, year] = parts;\n    if (month < 1 || month > 12) return false;\n\n    // Check if day is valid based on the month\n    let maxDays = 31;\n    if ([1, 3, 5, 7, 8, 10, 12].includes(month)) maxDays = 31;\n    else if ([4, 6, 9, 11].includes(month)) maxDays = 30;\n    else if (month === 2) { // Check for leap year (every 4 years except for years that are divisible by 100 but not divisible by 400)\n        const isLeapYear = new Date(year, month - 1, maxDays).getFullYear() === year;\n        if (!isLeapYear && day > 29 || (day > 28 && !isLeapYear)) return false;\n    } else { // If month and day are not valid, return false\n        return false;\n    }\n\n    // Check if day is within the allowed range for the given month and year\n    if (day < 1 || day > maxDays) return false;\n\n    // If all conditions are satisfied, return true\n    return true;\n}"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "import re\n\ndef split_words(txt):\n    # Split the text by whitespace, commas and tabs\n    words = re.split(r'\\s*,\\s*', txt)\n\n    # If there are no words or they are all empty, find odd letters in the text\n    if not words or not any(word for word in words):\n        odd_letters = sum(1 for letter in txt.lower() if ord('a') + (ord(letter) - ord('a')) % 2 == 1)\n        return odd_letters\n\n    # Otherwise, return the list of words\n    return words"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function isSorted(lst) {\n  // Check for errors\n  if (lst.some((item) => item < 0 || !Number.isInteger(item))) {\n    throw new Error(\"Input should not contain negative numbers or non-integers\");\n  }\n\n  let prevValue = lst[0];\n\n  // Iterate through the array and check if each element is greater than the previous one\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prevValue) {\n      return false;\n    }\n    prevValue = lst[i];\n  }\n\n  // If the loop finishes without returning false, it means the array is sorted in ascending order\n  return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Sort the intervals based on their start values\n    if (interval1[0] > interval2[0]) [interval1, interval2] = [interval2, interval1];\n\n    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\n    // Check if the intervals intersect\n    if (start2 > end1) return \"NO\";\n\n    // Find the intersection of the two intervals\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n\n    // Check if the length of the intersection is a prime number\n    if (end - start + 1 <= 0) return \"NO\";\n    if (end - start + 1 === 2) return \"YES\";\n\n    for (let i = 3; i <= Math.sqrt(end - start + 1); i += 2) {\n        if ((end - start + 1) % i === 0) return \"NO\";\n    }\n\n    return \"YES\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "function prodSigns(arr) {\n  if (arr.length === 0) {\n    return 'none';\n  }\n\n  let signProduct = 1;\n  let magnitudeSum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n\n    if (num === 0) {\n      return 0;\n    }\n\n    signProduct *= (num > 0) ? 1 : -1;\n    magnitudeSum += Math.abs(num);\n  }\n\n  return signProduct * magnitudeSum;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "This function is written in JavaScript and aims to find the minimum path of length `k` in a given grid. The minimum path is defined as a sequence of `k` cells that visits each cell exactly once, starting from any cell, moving only to neighboring cells (cells sharing an edge). The path should be lexicographically smallest according to the order of the values on the cells it goes through.\n\nHere's a brief explanation of the code:\n\n1. The function `minpath` takes in two parameters: `grid`, which is a 2D array representing the grid, and `k`, an integer representing the desired path length.\n\n2. It initializes an empty array called `result`. This will store the values on the cells that make up the minimum path.\n\n3. It creates a function called `dfs` which performs a depth-first search (DFS) for finding the minimum path. The `dfs` function takes in three parameters: `current`, the current cell being visited, `path`, an array containing the values on the cells that make up the current path, and `visited`, an object keeping track of which cells have already been visited during the DFS process.\n\n4. Inside the `dfs` function, it first checks if the length of the `path` array equals `k`. If so, it returns the `path` array because we found a valid minimum path of length `k`.\n\n5. If the current cell has been visited before (i.e., it is already in the `visited` object), the function immediately returns without doing anything else to avoid cycles and backtracking.\n\n6. The function then adds the current cell's value to the `path` array and updates the `visited` object with the current cell as visited.\n\n7. It calls itself recursively for each of the neighbor cells (i.e., cells sharing an edge with the current cell) and passes along the updated `path`, `visited` objects, and the new current cell.\n\n8. The main function `minpath` initializes a variable called `minPath` to store the smallest path found so far. It then loops through each cell in the grid and performs a DFS starting from that cell. If it finds a smaller minimum path during this process, it updates the `minPath` variable accordingly.\n\n9. Finally, it returns the sorted `minPath` array as the result of the function.\n\n10. To ensure that the solution is unique and to avoid duplicates in the output, you might want to sort the grid rows before starting the DFS (using a stable sort like `sort((a, b) => a - b)`) or adding a step at the beginning of your DFS function to sort the neighbor cells based on their values before considering them for the path."}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tribonacci(n) {\n    let sequence = [0, 0, 1]; // Initializing the first three numbers of the Tribonacci sequence.\n\n    for (let i = 3; i <= n + 1; i++) {\n        if (i % 2 === 0) {\n            sequence.push(sequence[i - 1] + (i / 2));\n        } else {\n            let sum = sequence[i - 1] + sequence[i - 2] + sequence[i - 3];\n            sequence.push(sum);\n        }\n    }\n\n    return sequence;\n}"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n  const arr = String(n).split(\"\").map(Number); // Convert the input to an array of digits\n  let oddProduct = 1; // Initialize the product of odd digits to 1\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      oddProduct *= arr[i]; // Multiply the product by the current digit if it's odd\n    }\n  }\n\n  return oddProduct === 1 ? 0 : oddProduct; // If all digits are odd, return 0; otherwise, return the product of odd digits.\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function isNested(str) {\n    let stack = [];\n\n    for (let char of str) {\n        if (char === '[') {\n            stack.push(char); // push opening bracket to the stack\n        } else if (char === ']') {\n            // if we find a closing bracket, check if it's matched and nested\n            if (!stack.length || stack[stack.length - 1] !== '[') return false;\n            stack.pop(); // pop out the last opening bracket\n        }\n    }\n\n    // if there are remaining open brackets in the stack, it means there's at least one nested sequence\n    return stack.length > 0;\n}"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        // Round each element to the nearest integer (ceiling)\n        let roundedNumber = Math.ceil(lst[i]);\n        // Square the rounded number and add it to the result\n        result += Math.pow(roundedNumber, 2);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Check if string is empty and return false if it is\n    if (!txt) return false;\n\n    // Split the string by spaces to get an array of words\n    const words = txt.split(' ');\n\n    for (let i = 0; i < words.length; i++) {\n        // Check if current word has more than one character and if its last character is a letter\n        if (words[i].length > 1 && /[a-zA-Z]$/.test(words[i])) {\n            return true;\n        }\n    }\n\n    // If no word meets the conditions, return false\n    return false;\n}"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let j = i + 1; // start searching from the next index\n\n    // find a smaller element to the right\n    while (j < arr.length && arr[j] >= arr[i]) {\n      j++;\n    }\n\n    if (j === arr.length) {\n      return -1; // no such arrangement is possible\n    }\n\n    // if we find a smaller element, remember its index and continue the search\n    let smallerIndex = j;\n\n    // check if the current element can be swapped with the smaller element found\n    if (arr[i] !== arr[smallerIndex]) {\n      return -1; // no such arrangement is possible\n    }\n  }\n\n  // if we reach this point, there exists an arrangement where each element appears after its smaller elements\n  return arr.findIndex((val, idx) => val !== arr[idx + 1]);\n}"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  let negative = lst.filter(num => num < 0);\n  let positive = lst.filter(num => num > 0);\n\n  if (negative.length === 0 && positive.length === 0) {\n    return [None, None]; // You might need to replace 'None' with the appropriate type for your JavaScript environment\n  }\n\n  let smallest = Math.min(...negative);\n  let largest = Math.max(...positive);\n\n  return [largest, smallest];\n}"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(a, b) {\n  // Convert both inputs to numbers if they are strings representing real numbers\n  const floatA = Number.isFinite(parseFloat(a)) ? parseFloat(a) : a;\n  const floatB = Number.isFinite(parseFloat(b)) ? parseFloat(b) : b;\n\n  // If the values are equal, return \"none\"\n  if (floatA === floatB) {\n    return 'none';\n  }\n\n  // Return the larger value in its given variable type\n  return typeof a === typeof b\n    ? (a > b ? a : b).toString()\n    : (Number.isFinite(a) && Number.isFinite(b))\n      ? Math.max(a, b)\n      : (a > b ? a : b);\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "function isEqualToSumEven(n) {\n    if (n === 0) return true;\n\n    for (let i = 2; i <= n / 2; i += 2) {\n        const remainder = n - i;\n        if (remainder % 2 !== 0) continue;\n\n        if (isEqualToSumEven(remainder)) return true;\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function specialFactorial(n) {\n    if (n <= 0) return \"Error: n must be greater than 0\";\n    let result = 1;\n    for (let i = n; i > 1; i--) {\n        result *= i;\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n  // Remove leading/trailing spaces\n  text = text.trim();\n\n  // Replace single spaces with underscores\n  text = text.replace(/ /g, '_');\n\n  // Replace consecutive spaces with hyphens\n  text = text.replace(/_+/g, '-');\n\n  return text;\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "function fileNameCheck(filename) {\n    const regex = /^[a-zA-Z][a-zA-Z0-9_.]{0,27}[.](txt|exe|dll)$/;\n    if (regex.test(filename)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n    let sum = 0; // Initialize a variable to store the sum of all entries\n\n    for (let i = 0; i < lst.length; i++) {\n        if ((i + 1) % 3 === 0) { // Check if the index is a multiple of 3\n            sum += Math.pow(lst[i], 2); // Square the integer entry\n        } else if (((i + 1) % 3 !== 0) && ((i + 1) % 4 === 0)) { // Check if the index is not a multiple of 3 and is a multiple of 4\n            sum += Math.pow(lst[i], 3); // Cube the integer entry\n        }\n    }\n\n    return sum; // Return the final sum of all modified entries\n}"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  const words = sentence.split(' '); // split the given sentence into an array of words\n  const primeWords = []; // initialize a new array to store the prime words\n\n  // iterate through each word in the words array\n  for (let i = 0; i < words.length; i++) {\n    let wordLength = words[i].length; // get the length of the current word\n\n    // check if the current word's length is a prime number\n    if (isPrime(wordLength)) {\n      primeWords.push(words[i]); // if it's a prime, add it to our new array\n    }\n  }\n\n  // return the joined prime words as our final result\n  return primeWords.join(' ');\n}\n\n// helper function to check if a number is prime or not\nfunction isPrime(num) {\n  if (num < 2) return false; // 0 and 1 are not prime numbers\n\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false; // check for divisibility by each number up to the square root of num\n  }\n\n  return true; // if it passes all checks, it's a prime number\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "function Fraction(num, den) {\n  this.numerator = num;\n  this.denominator = den;\n}\n\nFraction.prototype.multiply = function(otherFraction) {\n  return new Fraction(this.numerator * otherFraction.numerator, this.denominator * otherFraction.denominator);\n};\n\nFraction.prototype.toDecimal = function() {\n  return this.numerator / this.denominator;\n};\n\nfunction gcd(a, b) {\n  while (b !== 0) {\n    [a, b] = [b, a % b];\n  }\n  return Math.abs(a);\n}\n\nfunction lcm(a, b) {\n  return Math.abs(a * b) / gcd(Math.abs(a), Math.abs(b));\n}\n\nfunction simplify(xStr, nStr) {\n  const x = new Fraction(parseInt(xStr.split('/')[0]), parseInt(xStr.split('/')[1]));\n  const n = new Fraction(parseInt(nStr.split('/')[0]), parseInt(nStr.split('/')[1]));\n\n  const product = x.multiply(n);\n  const decimalProduct = product.toDecimal();\n\n  if (decimalProduct - Math.floor(decimalProduct) === 0) {\n    return true;\n  } else {\n    const lcmXDenom = lcm(parseInt(xStr.split('/')[1]), x.denominator);\n    const lcmNDenom = lcm(parseInt(nStr.split('/')[1]), n.denominator);\n    const maxLcm = Math.max(lcmXDenom, lcmNDenom);\n\n    // Adjust both fractions' denominators to the LCM of their original denominators\n    x.denominator *= (maxLcm / lcmXDenom);\n    n.denominator *= (maxLcm / lcmNDenom);\n\n    const adjustedProduct = x.multiply(n);\n\n    if (adjustedProduct.toDecimal() - Math.floor(adjustedProduct.toDecimal()) === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function sumDigits(n) {\n  let sum = 0;\n  const stringNum = n + ''; // Convert number into a string\n  for (let i = 0; i < stringNum.length; i++) {\n    sum += parseInt(stringNum[i]);\n  }\n  return sum;\n}\n\nfunction orderByPoints(nums) {\n  const digitSums = nums.map((n) => sumDigits(n));\n  const sortedIndexes = digitSums.sort((a, b) => a - b);\n\n  // Sort the original array based on the indexes we calculated earlier\n  return nums.sort((a, b) => {\n    const indexA = sortedIndexes.indexOf(sumDigits(a));\n    const indexB = sortedIndexes.indexOf(sumDigits(b));\n\n    // If sum digits are equal, order elements by their original position in the input array\n    if (indexA === indexB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return indexA - indexB;\n    }\n  });\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n    let filteredNums = nums.filter((num) => num > 10);\n    let result = 0;\n\n    for (let i = 0; i < filteredNums.length; i++) {\n        let numStr = String(filteredNums[i]);\n        let firstDigit = parseInt(numStr[0], 10);\n        let lastDigit = parseInt(numStr[numStr.length - 1], 10);\n\n        if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n            result++;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "function getMaxTriples(n) {\n    let arr = [];\n    // Initialize array with values according to the problem statement\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    let count = 0;\n\n    // Iterate through all possible triples and check if their sum is a multiple of 3\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Return the number of valid triples\n    return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\nfunction betweenPlanets(planet1, planet2) {\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return []; // return an empty tuple if planet names are not correct\n    }\n\n    let startIndex = Math.min(index1, index2);\n    let endIndex = Math.max(index1, index2);\n\n    // sort the planets array from closest to the sun\n    const sortedPlanets = [...planets].sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n\n    return sortedPlanets.slice(startIndex, endIndex + 1); // return the slice of planets between planet1 and planet2, sorted by proximity to the sun\n}"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function listSort(lst) {\n  // First, filter out words with odd lengths\n  const filteredLst = lst.filter((word) => word.length % 2 === 0);\n\n  // Then sort the filtered list based on length and alphabetically if the length is the same\n  const sortedLst = filteredLst.sort((a, b) => {\n    if (a.length < b.length) return -1;\n    if (a.length > b.length) return 1;\n    return a.localeCompare(b);\n  });\n\n  return sortedLst;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "function isPrime(num) {\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n    return num > 1;\n}\n\nfunction xOrY(n, x, y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  const filteredList = lst.filter(num => Number.isInteger(num) && num >= 0);\n  let sum = 0;\n\n  for (let i = 0; i < filteredList.length; ++i) {\n    if (filteredList[i] % 2 !== 0) {\n      sum += Math.pow(filteredList[i], 2);\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        result.push(diff);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let maxStrength = -Infinity;\n    let strongestExtension = '';\n\n    for (let extension of extensions) {\n        let uppercaseCount = 0;\n        let lowercaseCount = 0;\n\n        for (let i = 0; i < extension.length; i++) {\n            if (extension[i] === extension[i].toUpperCase()) {\n                uppercaseCount++;\n            } else if (extension[i] === extension[i].toLowerCase()) {\n                lowercaseCount++;\n            }\n        }\n\n        const strength = uppercaseCount - lowercaseCount;\n\n        if (strength > maxStrength || (strength === maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return classname + '.' + strongestExtension;\n}"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  // Check if b is a substring of a\n  if (a.indexOf(b) !== -1) return true;\n\n  // Create an array of all rotations of the second word (b)\n  const rotations = [];\n  for (let i = 0; i < b.length; i++) {\n    let rotation = b.slice(i) + b.slice(0, i);\n    rotations.push(rotation);\n  }\n\n  // Check if any of the rotations is a substring of a\n  for (let i = 0; i < rotations.length; i++) {\n    if (a.indexOf(rotations[i]) !== -1) return true;\n  }\n\n  // If no match found, return false\n  return false;\n}"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "function evenOddCount(num) {\n  const numStr = String(Math.abs(num)); // Convert the input number to an absolute value and convert it to a string\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 0; i < numStr.length; i++) {\n    const digit = parseInt(numStr[i], 10); // Parse the current character as an integer\n    if (digit % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  return [evenCount, oddCount];\n}"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const romanNumerals = {\n    1000: 'M',\n    500: 'D',\n    100: 'C',\n    50: 'L',\n    10: 'X',\n    5: 'V',\n    1: 'I'\n  };\n\n  let result = '';\n\n  for (const [num, symbol] of Object.entries(romanNumerals)) {\n    while (number >= parseInt(num)) {\n      number -= num;\n      result += symbol;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // Heron's formula for the semi-perimeter of a triangle\n    let s = (a + b + c) / 2;\n    // Calculate the area and square of the hypotenuse using the formula\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    let hypotenuseSquare = Math.pow((a * a + b * b - c * c) / (2 * a * b), 2);\n    // Compare the square of the hypotenuse with the calculated area\n    return area === hypotenuseSquare;\n}"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n  let result = [];\n\n  // Iterate through each word in the input list\n  for (let i = 0; i < words.length; i++) {\n    let charCounts = {}; // Store the number of occurrences of each character\n    let uniqueChars = 0; // Initialize the count of unique characters for this word\n    let currentWord = words[i];\n\n    // Iterate through each character in the current word\n    for (let j = 0; j < currentWord.length; j++) {\n      let char = currentWord[j];\n      if (!charCounts[char]) {\n        uniqueChars++;\n        charCounts[char] = 1;\n      } else {\n        charCounts[char]++;\n      }\n    }\n\n    result.push([uniqueChars, currentWord]); // Store the number of unique characters and the word itself\n  }\n\n  // Sort the words based on the counts of unique characters in descending order\n  result.sort((a, b) => a[0] < b[0] ? 1 : -1);\n\n  return result[0][1]; // Return the first element (the one with the maximum number of unique characters)\n}"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "function eat(number, need, remaining) {\n  const totalEaten = number + need;\n  const carrotsLeft = remaining - totalEaten;\n\n  if (carrotsLeft < 0) {\n    // If there are not enough remaining carrots, you will eat all remaining carrots\n    return [totalEaten, 0];\n  } else {\n    // Otherwise, you will eat the number of carrots needed to complete your meals,\n    // and have the remaining carrots as leftovers.\n    return [totalEaten, carrotsLeft];\n  }\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "function doAlgebra(operator, operand) {\n  let expression = '';\n\n  for (let i = 0; i < operator.length; i++) {\n    expression += operand[i] + ' ' + operator[i] + ' ';\n  }\n\n  // Add the last operand without an operator since we've already included all operators in the loop above\n  expression += operand[operator.length];\n\n  return eval(expression);\n}"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) { // Check if the current character is a letter\n            result += (s[i].toUpperCase() === s[i]) ? s[i].toLowerCase() : s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return (result.length === 0) ? s.split('').reverse().join('') : result; // Return the reversed string if no letters are found\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n    if (!text) return \"none\";\n    let md5sum = crypto.createHash(\"md5\");\n    md5sum.update(text);\n    return md5sum.digest(\"hex\");\n}"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  const result = [];\n\n  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}"}

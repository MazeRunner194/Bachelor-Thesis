{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;\n    for (let operation of operations) {\n        balance += operation; // Add or subtract depending on deposit/withdrawal\n        if (balance < 0) return true;\n    }\n    return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "sumProduct :: [Int] -> (Int, Int)\nsumProduct [] = (0, 1)\nsumProduct (x:xs) = let (s, p) = sumProduct xs\n                       totalSum = x + s\n                       totalProd = x * p\n                   in (totalSum, totalProd)"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) return null;\n\n    let maxLength = strings[0].length;\n    let maxString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n            maxString = strings[i];\n        } else if (strings[i].length === maxLength) {\n            maxString = strings[i]; // if multiple strings have the same length, return the first one encountered\n        }\n    }\n\n    return maxString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // If either a or b is zero, return the other number.\n    if (a === 0) return b;\n    if (b === 0) return a;\n\n    // Otherwise, recursively call the function with b and the remainder of a divided by b.\n    return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "const numberMap = {\n  'null': 'zero',\n  'eins': 'one',\n  'zwei': 'two',\n  'drei': 'three',\n  'vier': 'four',\n  'f\u00fcnf': 'five',\n  'sechs': 'six',\n  'sieben': 'seven',\n  'acht': 'eight',\n  'neun': 'nine'\n};\n\nfunction sortNumbers(numbers) {\n  let sortedNumbers = numbers.split(' ').map(word => numberMap[word] || word);\n  let pattern = /\\b(\\w+)\\b/g;\n  return sortedNumbers.join(' ')\n    .replace(pattern, match => numberMap[match] || match);\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    // Calculate the range (difference between maximum and minimum values)\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let range = max - min;\n\n    // Rescale each number by subtracting the minimum and dividing by the range\n    return numbers.map(number => (number - min) / range);\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            result += string[i].toLowerCase();\n        } else {\n            result += string[i].toUpperCase();\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    var result = [];\n    for (var i=0; i<l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n    // If n is less than 2, it's not prime\n    if (n < 2) return false;\n\n    // Check for factors from 2 up to the square root of n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        // If n is divisible by any number in the range, it's not prime\n        if (n % i === 0) return false;\n    }\n\n    // If we reach this point without returning, n must be a prime number\n    return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(list) {\n    return Array.from(new Set(list));\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n    // Checking base cases\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return num > 2; // Only odd numbers can be primes, greater than 2\n\n    const root = Math.floor(Math.sqrt(num));\n    for (let i = 3; i <= root; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction fibonacci(n) {\n    // Base cases\n    if (n === 1 || n === 2) return [1, 1];\n\n    let fib = fibonacci(n - 1);\n    fib[n] = fib[n - 1] + fib[n - 2];\n\n    return fib;\n}\n\nfunction primeFib(n) {\n    let i = 0,\n        fibs = [];\n\n    for (let f = fibonacci(n); i < n; ++i) fibs.push(f[i]);\n\n    for (let num of fibs) {\n        if (isPrime(num)) return num;\n    }\n\n    // No prime Fibonacci number found in the given range\n    return \"No prime Fibonacci number found.\";\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(arr) {\n  const set = new Set(arr); // O(n) time and space to build set\n  if (set.size < 3) return false; // If the list has less than 3 elements, it can't have three numbers that sum to zero\n\n  for (let num1 of set) { // O(n^2) time to check all pairs of numbers in the list\n    let num2 = -num1;\n    if (set.has(num2)) { // If we found a number that adds up to the negation of the current element, we have a match\n      if (set.has(-num1 - num2)) return true;\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(arr) {\n    let set = new Set();\n    for (let i = 0; i < arr.length; i++) {\n        let diff = -arr[i];\n        if (set.has(diff)) return true;\n        set.add(arr[i]);\n    }\n    return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    const fibArray = [0, 0, 2]; // initialize with the first 3 values\n\n    for (let i = 3; i <= n; i++) {\n        const prevFour = fibArray[i-1] + fibArray[i-2] + fibArray[i-3] + fibArray[i-4];\n        fibArray.push(prevFour);\n    }\n\n    return fibArray[n]; // return the n-th element of the sequence\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  let len = l.length;\n  // First, we sort the array in ascending order.\n  l.sort((a, b) => a - b);\n\n  // If the array length is odd, the median is the middle element itself.\n  if (len % 2 !== 0) {\n    return l[(len - 1) / 2];\n  } else {\n    // If the array length is even, we find the average of the two middle elements.\n    const leftIndex = Math.floor(len / 2) - 1;\n    const rightIndex = len / 2;\n\n    return (l[leftIndex] + l[rightIndex]) / 2;\n  }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "def is_palindrome(text):\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n    // Create a regular expression that matches any vowel (case insensitive)\n    let vowelRegex = /[aeiouAEIOU]/g;\n\n    // Replace all matched vowels in the input string with an empty string \"\"\n    return text.replace(vowelRegex, \"\");\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    const set0 = new Set(s0.split(''));\n    const set1 = new Set(s1.split(''));\n\n    return set0.size === set1.size;\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 1) return n; // base cases\n    return fib(n - 1) + fib(n - 2); // recursive case\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\n    return [...set1].filter(item => set2.has(item));\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  let limit = Math.sqrt(num);\n  for (let i = 3; i <= limit; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction largestPrimeFactor(n) {\n  if (!Number.isInteger(n) || n <= 1) throw new Error(\"Invalid input\");\n\n  let factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n      if (!isPrime(n)) break;\n    }\n  }\n\n  // If there is no prime factor, n itself is the largest prime factor.\n  return n;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n    let total = 0;\n    for (let i = 1; i <= n; i++) {\n        total += i;\n    }\n    return total;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(coefficients) {\n  const result = [];\n  for (let i = 1; i < coefficients.length; i++) {\n    result.push(coefficients[i] * i);\n  }\n  return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n    const fibs = Array(n + 2).fill(0); // Initialize an array with n+2 elements filled with 0\n    fibs[1] = 0; // Set the first value\n    fibs[2] = 1; // Set the second value\n\n    for (let i = 3; i <= n; i++) {\n        fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i - 3];\n    }\n\n    return fibs[n]; // Return the n-th element\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    const vowelRegex = /[aeiouy]/gi; // This regular expression matches any of the specified vowels (case insensitive)\n    return s.match(vowelRegex).length;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    let count = {},\n        maxFrequency = Infinity,\n        currentMax;\n\n    for (let num of lst) {\n        if (!count[num]) {\n            count[num] = 1;\n        } else {\n            count[num]++;\n        }\n    }\n\n    for (let key in count) {\n        if (count[key] >= key && count[key] < maxFrequency) {\n            maxFrequency = count[key];\n            currentMax = key;\n        }\n    }\n\n    return currentMax > maxFrequency ? -1 : currentMax;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // check if the sum of any two sides is greater than the third one\n    if ((a + b < c) || (b + c < a) || (c + a < b)) {\n        return -1;\n    }\n\n    // calculate the semi-perimeter using Heron's formula\n    const s = (a + b + c) / 2;\n\n    // calculate the area using Heron's formula for the area of a triangle\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    return parseFloat(area.toFixed(2));\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if q is palindromic (same forward and backward)\n    let isPalindrome = (q.join(\"\") === q.reverse().join(\"\"));\n\n    // If q is not palindromic, return false\n    if (!isPalindrome) return false;\n\n    // Calculate the sum of array elements\n    let sum = q.reduce((acc, val) => acc + val);\n\n    // Check if the sum is less than or equal to the maximum weight w\n    return sum <= w;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isPrime(number) {\n  if (number < 2) return false; // Edge case for non-positive numbers and 1\n  for (let i = 2; i <= Math.sqrt(number); i++) {\n    if (number % i === 0) return false;\n  }\n  return true;\n}\n\nfunction isMultiplyPrime(a) {\n  // Ensure input number is positive and less than 100\n  if (a <= 0 || a > 99) throw new Error(\"Input must be between 1 and 99.\");\n\n  for (let i = 2; i <= 9; i++) {\n    // Check if a is divisible by the current number 'i'\n    if (a % i !== 0) continue;\n\n    let factorsCount = 0;\n\n    // Count the number of prime factors for the given input number\n    let n = i;\n    while (n > 1) {\n      if (!isPrime(n)) break;\n      if (n % i === 0) {\n        n /= i;\n        factorsCount++;\n      }\n    }\n\n    // If the number of prime factors is not exactly three, we move on to the next candidate\n    if (factorsCount !== 3) continue;\n\n    // Otherwise, we have found a triple of prime factors for our given number, so return true\n    return true;\n  }\n\n  // If we exhaust all candidates and haven't found three prime factors yet, return false\n  return false;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  let binary = 'db';\n  while (decimal > 0) {\n    binary += Math.floor(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + 'db';\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    if (s.length < 3) return false;\n\n    let groups = [];\n    for (let i = 0; i <= s.length - 3; i += 3) {\n        const group = s.slice(i, i + 3);\n        if (!groups.includes(group)) {\n            groups.push(group);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n  const gradeMap = {\n    4.0: 'A+',\n    [4.01, 3.7]: 'A',\n    [3.71, 3.3]: 'A-',\n    [3.31, 3.0]: 'B+',\n    [3.01, 2.7]: 'B',\n    [2.71, 2.3]: 'B-',\n    [2.31, 2.0]: 'C+',\n    [2.01, 1.7]: 'C',\n    [1.71, 1.3]: 'C-',\n    [1.31, 1.0]: 'D+',\n    [1.01, 0.7]: 'D',\n    [0.7, 0.0]: 'D-',\n    0.0: 'E'\n  };\n\n  return grades.map(grade => gradeMap[grade] || gradeMap[Number.isFinite(grade) ? Infinity : -Infinity][1]);\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function isPrime(num) {\n  // If the number is less than or equal to 1, it's not prime\n  if (num <= 1) return false;\n\n  // Check divisibility up to the square root of the number\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n\n  // If no factors were found, the number is prime\n  return true;\n}\n\nfunction primeLength(string) {\n  const length = string.length;\n\n  // Check if the length is a non-negative integer\n  if (length < 1) return false;\n\n  // If the length is equal to 1 or 2, it's always prime\n  if (length <= 2) return true;\n\n  // Otherwise, check if the length is a prime number\n  return isPrime(length);\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "public class Main {\n\n public static String sumDigitsInBinary(int n) {\n StringBuilder result = new StringBuilder();\n\n while (n > 0) {\n int remainder = n % 2;\n n /= 2;\n result.append(remainder);\n }\n\n return result.reverse().toString();\n }\n\n public static void main(String[] args) {\n System.out.println(sumDigitsInBinary(1000)); // Output: \"1\"\n System.out.println(sumDigitsInBinary(150)); // Output: \"110\"\n System.out.println(sumDigitsInBinary(147)); // Output: \"1100\"\n }\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  const results = [];\n  let currentRowIndex = -1;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (!Array.isArray(lst[i])) continue; // skip non-array elements\n\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        results.push([currentRowIndex, j]);\n      }\n    }\n\n    currentRowIndex++;\n  }\n\n  results.sort((a, b) => a[0] - b[0]).forEach((coordinate) => {\n    coordinate[0] = coordinate[0].toString(); // convert to string for correct sorting order\n    coordinate[1] = coordinate[1].toString();\n    coordinate[0] = parseInt(coordinate[0], 10); // convert back to integer for correct comparison\n    coordinate[1] = parseInt(coordinate[1], 10);\n    coordinate[0] = Number.isInteger(coordinate[0]) ? coordinate[0] : Math.floor(coordinate[0]); // round down to nearest integer if not an integer\n    coordinate[1] = Number.isInteger(coordinate[1]) ? coordinate[1] : Math.floor(coordinate[1]);\n  });\n\n  results.sort((a, b) => b[1] - a[1]); // sort by column indices in descending order\n\n  return results;\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    // Check if the list is empty and return null in that case\n    if (lst.length === 0) {\n        return null;\n    }\n\n    // Sort the list in ascending order\n    let sortedLst = lst.slice().sort((a, b) => a - b);\n\n    // If there is only one element, it's not the smallest so return null\n    if (sortedLst.length === 1) {\n        return null;\n    }\n\n    // Find the second element in the sorted list and return it\n    return sortedLst[1];\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n  // Split the sentence into individual words\n  const words = s.split(' ');\n\n  let boredCount = 0;\n  let currentSentence = '';\n\n  for (let i = 0; i < words.length; i++) {\n    // If the word starts with \"Ich\" and forms a complete sentence, increment the count\n    if (words[i].startsWith('Ich') && (i === 0 || words[i - 1] === '.' || words[i - 1] === '!' || words[i - 1] === '?')) {\n      currentSentence += ` ${words[i]}`; // Add the word to the current sentence, but don't forget the space between words\n      boredCount++;\n    } else if (words[i - 1] === '.') {\n      // If a period was found, end the current sentence and reset it\n      currentSentence = '';\n    } else {\n      currentSentence += ` ${words[i]}`; // Otherwise, add the word to the current sentence\n    }\n  }\n\n  return boredCount;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return num > 1;\n    }\n\n    // Find the largest prime number in the array\n    let maxPrime = -Infinity;\n    for (let i of lst) {\n        if (isPrime(i)) {\n            maxPrime = Math.max(maxPrime, i);\n        }\n    }\n\n    // Calculate the sum of digits of the largest prime number found\n    let sum = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n    }\n\n    return sum;\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n  const caseConsistency = Array.from(dict.keys()).every(key => isUpper(key) === isLower(key));\n  return !Object.keys(dict).length || caseConsistency;\n}\n\nfunction isUpper(str) {\n  return /^[A-Z]+$/.test(str);\n}\n\nfunction isLower(str) {\n  return /^[a-z]+$/.test(str);\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    let n = parseFloat(value);\n    let integer = Math.round(n);\n\n    if (Math.abs(n - integer) === Math.abs(n - (integer + 1)) || Math.abs(n - integer) === Math.abs(n - (integer - 1))) {\n        return n > 0 ? Math.ceil(n) : Math.floor(n);\n    }\n\n    return integer;\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    const results = [n];\n    let currentLevel = n;\n\n    // Loop until we reach a level of 1, indicating that we've processed all levels.\n    while (currentLevel > 1) {\n        if (currentLevel % 2 === 0) {\n            // If the current level is even, increment it by 2 to get the next even number.\n            currentLevel += 2;\n        } else {\n            // If the current level is odd, increment it by 1 to get the next odd number.\n            currentLevel++;\n        }\n        results.push(currentLevel);\n    }\n\n    return results;\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    return s.split(/[\\s,\\n]+/); // The regex pattern matches spaces, commas, or newlines\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Iterate through the range from x to y\n    for (let i = x; i <= y; i++) {\n        // Check if the number is even\n        if (i % 2 === 0) {\n            // Return the found even number\n            return i;\n        }\n    }\n    // If no even number was found, return -1\n    return -1;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) return -1; // check if n is greater than m and return -1 if true\n\n    let sum = 0; // initialize a variable to store the sum of the numbers from n to m\n    let count = m - n + 1; // calculate the number of terms in the sequence\n\n    for (let i = n; i <= m; i++) { // loop through the sequence and add up the terms\n        sum += i;\n    }\n\n    let avg = Math.round(sum / count); // calculate the average by dividing the sum by the count and rounding to the nearest integer\n\n    return parseInt(avg.toString(2), 10); // convert the average in binary and convert it back to a decimal number for the final result\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function factorial(num) {\n    if (num === 0 || num === 1) return 1;\n    return num * factorial(num - 1);\n}\n\nfunction f(n) {\n    let result = [];\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // Even numbers, so calculate the factorial.\n            result.push(factorial(i));\n        } else {\n            // Odd numbers, so calculate the sum from 1 to i.\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    // Wenn die Zahl selbst ist, dann ist sie nicht eine Palindrom\n    if (i % 2 === 0) {\n      continue;\n    }\n\n    let reversedNumber = reverse(i);\n\n    // Wenn die umgekehrte Zahl gleich der urspr\u00fcnglichen Zahl ist, dann ist es eine Palindrom\n    if (reversedNumber === i) {\n      oddCount++;\n    }\n\n    // Anzahl gerader Palindrome erh\u00f6hen, wenn sie durch zwei teilbar sind und umgekehrt sich selbst sind\n    if (i * 2 === reversedNumber && reversedNumber !== i) {\n      evenCount++;\n    }\n  }\n\n  return [evenCount, oddCount];\n}\n\n// Hilfsfunktion f\u00fcr die Umkehrung der Zahl\nfunction reverse(number) {\n  let reversed = '';\n\n  while (number > 0) {\n    reversed += number % 10;\n    number = Math.floor(number / 10);\n  }\n\n  return parseInt(reversed, 10);\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n  // If the array is empty, return true since it's already sorted.\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let min = arr[0];\n  let max = arr[0];\n\n  for (let i = 1; i < arr.length; i++) {\n    // Update min and max with the smallest and largest numbers found in the array.\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n\n  // If the minimum number is not at index 0 or the maximum number is not at the last position, it's impossible to sort the array.\n  return min === arr[0] && max === arr[arr.length - 1];\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  let result = '';\n  const isPalindrom = (str) => str === str.split('').reverse().join('');\n\n  for (let i = 0; i < s.length; ++i) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n\n  return [result, isPalindrom(result)];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    const queue = [];\n    const visited = new Set();\n\n    // Start from every well with water\n    for (let i = 0; i < grid.length; ++i) {\n        for (let j = 0; j < grid[i].length; ++j) {\n            if (grid[i][j] === 1 && !visited.has([i, j])) {\n                queue.push([i, j]);\n                visited.add([i, j]);\n            }\n        }\n    }\n\n    let steps = 0;\n    while (queue.length) {\n        const size = queue.length;\n        for (let i = 0; i < size; ++i) {\n            const [x, y] = queue.shift();\n\n            // Drain water from the current well\n            grid[x][y] = 0;\n\n            // Move to adjacent empty or partially filled wells\n            for (const [dx, dy] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n                const nx = x + dx, ny = y + dy;\n                if (nx >= 0 && nx < grid.length && ny >= 0 && ny < grid[nx].length && grid[nx][ny] === 0) {\n                    queue.push([nx, ny]);\n                    grid[nx][ny] = Math.min(grid[nx][ny], capacity);\n                }\n            }\n\n            // Move to adjacent wells with water and drain as much as possible\n            for (const [dx, dy] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {\n                const nx = x + dx, ny = y + dy;\n                if (nx >= 0 && nx < grid.length && ny >= 0 && ny < grid[nx].length && grid[nx][ny] === 1) {\n                    let toDrain = Math.min(capacity, grid[nx][ny]);\n                    grid[nx][ny] -= toDrain;\n                    steps += Math.ceil(toDrain / capacity);\n                }\n            }\n        }\n    }\n\n    return steps;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function isConsonant(char) {\n  // Check if char is a consonant, return true or false\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return !vowels.includes(char.toLowerCase()) && (!char.match(/[aeiou]+/g));\n}\n\nfunction selectWords(s, n) {\n  // Initialize an empty result array\n  const result = [];\n\n  // Split the input string into words\n  let words = s.split(/\\s+/);\n\n  for (let i = 0; i < words.length; i++) {\n    // Check if current word has exactly n consonants using helper function\n    if (words[i].length === n && isConsonant(words[i][0]) && words[i].split('').every(isConsonant)) {\n      result.push(words[i]);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sort array in descending order\n    arr.sort((a, b) => b - a);\n\n    // Return the first 'k' elements from the sorted array\n    return arr.slice(0, k);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n\n  for (let i = 0; i < k && i < arr.length; i++) {\n    if (String(arr[i]).length <= 2) {\n      sum += arr[i];\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false; // not prime\n    if (num === 2) return true; // only even primes start from 2\n    let i = 3;\n    while (i * i <= num) {\n        if (num % i === 0) return false;\n        i += 2;\n    }\n    return true; // not divisible by any smaller odd number\n}\n\nfunction intersection(interval1, interval2) {\n    let start1 = Math.max(interval1[0], interval2[0]);\n    let end1 = Math.min(interval1[1], interval2[1]);\n    let end2 = Math.max(interval1[1], interval2[1]);\n    let start2 = Math.min(interval1[0], interval2[0]);\n\n    if (end1 < start2) {\n        return \"NO\"; // intervals do not intersect\n    } else {\n        let intersection = Math.max(start1, start2);\n        return isPrime(Math.abs(end1 - intersection)) ? \"YES\" : \"NO\";\n    }\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    let tribo = [0, 0, 1];\n\n    for (let i = 3; i <= n + 1; i++) {\n        if (i % 2 === 0) {\n            tribo[i] = tribo[i - 2] + (i / 2);\n        } else {\n            tribo[i] = tribo[i - 1] + tribo[i - 2] + tribo[i + 1];\n        }\n    }\n\n    return tribo.slice(0, n + 1);\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  const digitsArray = String(n).split('').map(Number); // Convert number to array of digits\n\n  return digitsArray\n    .filter(digit => digit % 2 !== 0) // Filter out even digits\n    .reduce((acc, digit) => acc *= digit, 1); // Multiply all odd digits and initialize with 1\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '[') {\n      count++;\n    } else if (str[i] === ']') {\n      count--;\n    }\n    // If the count goes below 0, it means we have more closing brackets than opening ones.\n    if (count < 0) return false;\n  }\n  // If the count is not 0 after checking all characters, it means there are some unmatched opening brackets.\n  return count > 0;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n  let result = 0;\n\n  // Iterate through the given list\n  for (let i = 0; i < lst.length; i++) {\n    // Round each element to the nearest integer and square it\n    const squaredNumber = Math.ceil(lst[i]) ** 2;\n\n    // Add the squared number to the result\n    result += squaredNumber;\n  }\n\n  return result;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    let lastChar = txt.charAt(txt.length - 1);\n    if (/[a-zA-Z]/.test(lastChar)) {\n        return !txt.split(' ').pop().includes(lastChar);\n    }\n    return false;\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n  let currentIndex = -1;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (currentIndex === -1 || arr[i] > arr[currentIndex]) {\n      currentIndex = i;\n    }\n  }\n\n  return currentIndex === arr.length - 1 ? -1 : currentIndex;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  let neg = Infinity,\n      pos = -Infinity;\n\n  for (let num of lst) {\n    if (typeof num !== 'number' || !Number.isInteger(num)) continue;\n\n    if (num < 0 && num < neg) neg = num;\n    if (num > 0 && pos < num) pos = num;\n  }\n\n  return [neg < 0 ? null : neg, pos > 0 ? pos : null];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * specialFactorial(n-1) * specialFactorial(n-2);\n    }\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  // Split the input sentence into an array of words\n  let words = sentence.split(' ');\n\n  // Initialize the result array to store prime-length words\n  let result = [];\n\n  // Loop through each word in the array\n  for (let i = 0; i < words.length; i++) {\n    // Check if the length of the current word is a prime number\n    if (isPrime(words[i].length)) {\n      // If it is, add it to the result array\n      result.push(words[i]);\n    }\n  }\n\n  // Join all the words in the result array with space as a separator and return the new string\n  return result.join(' ');\n}\n\nfunction isPrime(num) {\n  // Check if the number is less than or equal to 1 (not prime)\n  if (num <= 1) return false;\n\n  // If the number is 2, it's a prime number\n  if (num === 2) return true;\n\n  // Loop through numbers from 2 up to the square root of the input number\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    // If the current number divides the input number, it's not a prime number\n    if (num % i === 0) return false;\n  }\n\n  // If no factors are found, the input number is a prime number\n  return true;\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n  // Parse integers from input strings\n  const [numX, denX] = x.split('/').map(Number);\n  const [numN, denN] = n.split('/').map(Number);"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    if (!Array.isArray(nums)) throw new Error(\"Input should be an array.\");\n\n    const digitSum = (n) => n.toString().reduce((sum, c) => sum + parseInt(c), 0);\n\n    nums.sort((a, b) => {\n        let asum = digitSum(a);\n        let bsum = digitSum(b);\n\n        if (asum !== bsum) return asum - bsum;\n\n        return Array.isArray(nums) ? nums.indexOf(a) - nums.indexOf(b) : 0;\n    });\n\n    return nums;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    let count = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        // Check if number is greater than 10 and has an odd first digit (1, 3, 5, 7, 9)\n        if ((nums[i] > 10) && (nums[i].toString().charAt(0) % 2 !== 0)) {\n            // Check if the last digit is also odd (1, 3, 5, 7, 9)\n            let lastDigit = Math.abs(nums[i] % 10);\n            if (lastDigit % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5)); // 1\n    }\n\n    static int getMaxTriples(int n) {\n        if (n <= 0) return 0;\n\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        int count = 0, threeTimes, twoTimesThree = 3 * n;\n        Arrays.sort(a);\n\n        for (int i = 2; i < n; i++) {\n            threeTimes = a[i] + a[i - 1];\n\n            int low = Arrays.binarySearch(a, a[i - 1] + threeTimes);\n            if (low > 0) {\n                low++; // adjust for the index of the start of the subarray\n            } else {\n                low = -low - 2;\n            }\n\n            int high = Arrays.binarySearch(a, a[n - 1] - threeTimes);\n            if (high >= 0) high--; // adjust for the index of the end of the subarray\n\n            count += Math.min(low, high) - i + 2;\n        }\n\n        return count / 6; // divide by 6 to avoid counting each triple multiple times\n    }\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = {\n  Mercury: 0.387,\n  Venus: 0.723,\n  Earth: 1.000,\n  Mars: 1.524,\n  Jupiter: 5.203,\n  Saturn: 9.584,\n  Uranus: 19.18,\n  Neptune: 30.07\n};\n\nfunction bf(planet1, planet2) {\n  if (!Object.keys(planets).includes(planet1) || !Object.keys(planets).includes(planet2)) {\n    return []; // If either planet name is incorrect, return an empty array\n  }\n\n  let sortedPlanets = Object.entries(planets)\n                           .sort((a, b) => a[1] - b[1]); // Sort planets by average distance from the sun\n\n  let startIndex = Object.keys(planets).indexOf(planet1);\n  let endIndex = Object.keys(planets).indexOf(planet2);\n\n  if (startIndex > endIndex) {\n    [startIndex, endIndex] = [endIndex, startIndex]; // Swap indices if planet1 is closer to the sun than planet2\n  }\n\n  return sortedPlanets.slice(startIndex, endIndex + 1);\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(num) {\n    // Checks if num is greater than 1 to avoid errors\n    if (num <= 1) return false;\n\n    // If num has factors up to sqrt(num), it cannot be a prime number\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) return false;\n    }\n\n    // If no factor was found, the num is a prime number\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (!Number.isInteger(lst[i]) || lst[i] <= 0) continue; // Skip invalid or non-positive numbers\n\n        let square = Math.pow(lst[i], 2); // Calculate the square of the number\n\n        if (lst[i] % 2 !== 0) { // Check if the number is odd\n            sum += square;\n        }\n    }\n    return sum * 2; // Double the sum of squares of odd numbers\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(className, extensions) {\n    let maxStrength = Number.MIN_VALUE; // Initialize with minimum value to ensure we find the maximum\n    let strongestExtensionName = ''; // Initialize with an empty string\n\n    for (let extension of extensions) {\n        const capCount = extension.match(/[A-Z]/g).length; // Count capital letters\n        const smallCount = extension.match(/[a-z]/g).length; // Count small letters\n        const strength = capCount - smallCount; // Calculate the strength\n\n        if (strength > maxStrength) {\n            maxStrength = strength; // Update maximum strength if a stronger extension is found\n            strongestExtensionName = `${className}.${extension}`; // Update the name with the new extension\n        }\n    }\n\n    return strongestExtensionName;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(str1, str2) {\n    // Remove spaces and convert to lowercase for comparison\n    const str1Normalized = str1.toLowerCase().replace(/\\s+/, '');\n    const str2Normalized = str2.toLowerCase().replace(/\\s+/, '');\n\n    if (str2Normalized.length > str1Normalized.length) {\n        return false;\n    }\n\n    // Check for exact match\n    if (str1Normalized.includes(str2Normalized)) {\n        return true;\n    }\n\n    // Check for rotations\n    const rotatedStrings = [];\n\n    for (let i = 0; i < str2Normalized.length; i++) {\n        let j = (i + parseInt(str2Normalized.length)) % str1Normalized.length;\n        rotatedStrings.push(str1Normalized.slice(j) + str1Normalized.slice(0, j));\n    }\n\n    return rotatedStrings.some(rotation => rotation === str2Normalized);\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    const romanNumerals = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M'];\n    const values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    let result = '';\n\n    for (let i = 0; i < values.length && number > 0; i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n            result += romanNumerals[i];\n        }\n    }\n\n    return result.toLowerCase();\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    let hypotenuse = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n\n    if (hypotenuse - c < 0.01) { // allow for a small error margin\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  return s.split('').map((char) => {\n    if (/[a-z]/i.test(char)) {\n      return char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    } else {\n      return char;\n    }\n  }).join('');\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "npm install crypto-js"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    let result = [];\n    if (a > b) return result; // If a is greater than b, return an empty array\n\n    for (let i = Math.floor(a); i <= b; i++) {\n        if (i % 2 === 0) result.push(i); // If the number is even, add it to the result array\n    }\n\n    return result;\n}"}

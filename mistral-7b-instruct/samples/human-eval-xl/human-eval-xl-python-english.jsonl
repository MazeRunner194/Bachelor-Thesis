{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        Empty sum should be equal to 0 and empty product should be equal to 1.\n        >>> sum_product([])\n        (0, 1)\n        >>> sum_product([1, 2, 3, 4])\n        (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n\n    return (total_sum, total_product)"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    assert all(c in ['0', '1'] for c in a + b), \"Input strings must only contain 0s and 1s\"\n\n    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i >= len(a):\n            char_a = \"0\"\n        elif i >= len(b):\n            char_b = \"0\"\n        else:\n            char_a = a[i]\n            char_b = b[i]\n        result += str(int(char_a) ^ int(char_b))\n    return result\n\nif __name__ == \"__main__\":\n    tests = [(\"010\", \"110\"), (\"1010\", \"1111\"), (\"1001\", \"0110\")]\n    for a, b in tests:\n        print(f\"{a} ^ {b}: {string_xor(a, b)}\")"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    max_length = len(strings[0])\n    result = strings[0]\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            result = string\n        elif len(string) == max_length:\n            result = strings[0]  # Choose the first one when multiple strings have the same length.\n\n    return result"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        (a, b) = (b, a % b)\n    return abs(a)"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\nnumbers = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = list(map(lambda x: numbers.get(x), numbers.split()))\n    numbers.sort()\n    return ' '.join([str(num) for num in numbers])\n\n# Test the function\nassert sort_numbers('three one five') == 'one three five'"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    # Calculate the minimum and maximum values in the input list\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Define the range of scaling (from min_value to max_value)\n    scale_range = max_value - min_value\n\n    # Create a new list with scaled values\n    scaled_values = [(x - min_value) / scale_range for x in numbers]\n\n    return scaled_values"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    root = int(n ** 0.5) + 1\n    for i in range(3, root, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n):\n    i = 1\n    while True:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            return fib\n        i += 1"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l):\n    for num in l:\n        target = -num\n        seen = set()\n        for other in l:\n            if other in seen or other == num:\n                continue\n            if other == target:\n                return True\n            seen.add(other)\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # First, we sort the list to make it easier to check for distinct elements\n    l.sort()\n\n    # Then, we iterate over the list, checking if the current element and the next one (if any) sum up to zero\n    for i in range(len(l)):\n        if i < len(l) - 1 and l[i] + l[i+1] == 0:\n            return True\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n <= 3:\n        return 0\n    elif n == 4:\n        return 2\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(5, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    # Sort the list\n    sorted_list = sorted(l)\n\n    # Find the number of items in the list\n    n = len(sorted_list)\n\n    # If the length is odd, the middle element is unique; otherwise it's the average of two middle elements\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        mid1 = (n // 2) - 1\n        mid2 = n // 2\n        return (sorted_list[mid1] + sorted_list[mid2]) / 2"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Check if the input string is empty, in which case it's a palindrome\n    if not text:\n        return True\n\n    # Create a list of characters from the input string and reverse it\n    reversed_text = list(reversed(list(text)))\n\n    # Compare the original string with its reversed version character by character\n    for i in range(len(text)):\n        if text[i] != reversed_text[i]:\n            return False\n\n    # If no mismatch is found, return True (meaning it's a palindrome)\n    return True"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Check if all numbers in a given list are below a specified threshold value.\"\"\"\n\n    # Iterate through the elements of the input list\n    for num in l:\n        # If we find a number that is greater than or equal to the threshold, return False immediately\n        if num >= t:\n            return False\n\n    # If we've iterated through all the numbers without finding any above the threshold, return True\n    return True"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0) != len(s1):\n        return False\n\n    char_set = set()\n    for char in s0:\n        if char not in char_set:\n            char_set.add(char)\n        if char not in s1:\n            return False\n\n    return True"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n\n    # Find the intersection (common elements) of both lists and convert it to a set to remove duplicates\n    intersection = set(l1) & set(l2)\n\n    # Sort the resulting set and return as a list\n    return sorted(list(intersection))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1 or (n % 2 == 0 and n > 2):\n        raise ValueError(\"Input must be greater than 1 and not a prime.\")\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs)):\n        coeff = xs[i]\n        power = i\n        new_coeff = coeff * power\n        new_power = power - 1\n        result.append(new_coeff) if new_power > 0 else result.append(0)\n    return result"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n):\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(4, n + 1):\n            c = a + b + c\n            a = b\n            b = c\n        return c"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    vowels = 'aeiouy'\n    vowel_count = 0\n\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n\n    return vowel_count"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    max_freq = max(freq, key=freq.get)\n    if max_freq > max_freq[0]:\n        return -1\n    for num in freq:\n        if num > max_freq and freq[num] >= max_freq:\n            return num\n    return -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    # Check if the sum of any two sides is greater than the third side.\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        # Calculate the semi-perimeter.\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula.\n        area = ((s * (s - a) * (s - b) * (s - c)) ** 0.5)\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    if not q == q[::-1]:  # check if list is palindrome (balanced)\n        return False\n    elif sum(q) > w:  # check if sum of elements is less than or equal to the given weight\n        return False\n    else:\n        return True"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime.\"\"\"\n    if n <= 1 or (n % 2 == 0 and n > 2):\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the product of three prime numbers.\"\"\"\n    for p in range(2, int(a**(1/3)) + 1):\n        if a % p != 0:\n            continue\n        if is_prime(p) and a // p > 1:\n            q = int(a / p)\n            if is_prime(q) and q != p:\n                return True\n    return False"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to binary format.\"\"\"\n    binary = \"db\" + str(bin(decimal))[2:] + \"db\"\n    return binary"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    chars = set()\n    for i in range(0, len(s), 3):\n        substring = s[i:i+3]\n        if substring not in chars:\n            chars.add(substring)\n        else:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    grade_dict = {\n        \"A+\": (4.0, None],\n        \"A\": [3.7, 3.0),\n        \"A-\": [3.3, 3.7),\n        \"B+\": [3.0, 2.7),\n        \"B\": [2.7, 2.3),\n        \"B-\": [2.3, 2.0),\n        \"C+\": [2.0, 1.7),\n        \"C\": [1.7, 1.3),\n        \"C-\": [1.3, 1.0),\n        \"D+\": [1.0, 0.7),\n        \"D\": [0.7, 0.0),\n        \"D-\": [0.0, None],\n        \"E\": [0.0, None]\n    }\n\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa is None or gpa < grade_dict[\"E\"][0]:\n            letter_grades.append(\"E\")\n        else:\n            for key, (low, high) in grade_dict.items():\n                if low <= gpa <= high:\n                    letter_grades.append(key)\n                    break\n\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Convert the string to an integer representing its length\n    length = len(string)\n\n    # Check if the length is a prime number\n    for i in range(2, length):\n        if length % i == 0:  # If it divides evenly by any number between 2 and itself, it's not a prime\n            return False\n    return True  # If no divisors were found, the length is a prime"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n    result = ''\n    while N > 0:\n        digit = N % 2\n        result = str(digit) + result\n        N //= 2\n\n    return result"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, len(lst[i]) - j))\n    result.sort(key=lambda x: x[0])\n    for i in range(len(result) - 1):\n        if result[i][0] == result[i + 1][0]:\n            result[i][1], result[i + 1][1] = result[i + 1][1], result[i][1]\n    return result"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n\n    return lst[1]"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    # Initialize variables\n    max_prime = None\n    prime_sum = 0\n\n    # Iterate through the list to find the largest prime number\n    for num in lst:\n        if isPrime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    # If the largest prime number is not a single digit, calculate its sum of digits\n    if max_prime is not None and len(str(max_prime)) > 1:\n        for digit in str(max_prime):\n            prime_sum += int(digit)\n\n    return prime_sum\n\ndef isPrime(num):\n    # Check if the number is less than or equal to 1, as they are not primes\n    if num <= 1:\n        return False\n\n    # Iterate up to the square root of the number, checking for divisibility by numbers in the range\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    key_list = list(dict.keys())\n\n    if len(key_list) == 1 and key_list[0].isupper():\n        for k in key_list:\n            if k.islower():\n                return False\n    elif len(key_list) == 1 and key_list[0].islower():\n        for k in key_list:\n            if k.isupper():\n                return False\n    else:\n        for k in key_list:\n            if (k.isupper() and not all([x.isupper() for x in key_list])) or \\\n               (k.islower() and not all([x.islower() for x in key_list])):\n                return False\n    return True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        result = round(number)\n        if abs(result - number) == abs(int(number - 1) - number):\n            result -= 1\n    elif number < 0:\n        result = round(number)\n        if abs(result - number) == abs(int(number + 1) - number):\n            result += 1\n    else:\n        result = 0\n    return int(result)"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Initialize an empty list to store the number of stones per level\n    levels = []\n\n    # Start from the first level which has n stones (input argument)\n    current_level = n\n\n    # Keep adding levels until we reach a single stone\n    while current_level > 1:\n\n        # Determine the number of stones for the next level based on the parity of current_level\n        if current_level % 2 == 0:\n            # If current_level is even, add the next even number\n            next_level = current_level * 2\n        else:\n            # If current_level is odd, add the next odd number (skip the even number)\n            next_level = current_level + 1\n            if next_level % 2 == 0:\n                # If the skipped even number was also the next odd number, add 1 to get the next odd number\n                next_level += 1\n\n        # Add the number of stones for the next level to our list of levels\n        levels.append(next_level)\n\n        # Update current_level for the next iteration\n        current_level = next_level // 2\n\n    # Add the initial number of stones (from input argument) to the list of levels, since it's the first level\n    levels.append(n)\n\n    return levels"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x % 2 != 0 or y % 2 != 0:\n        return -1\n\n    if x > y:\n        max_even = x - 1\n    else:\n        min_even = y - 1\n        max_even = min_even + 2 if min_even % 2 == 1 else min_even\n\n    return min(max_even, x)"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    \"\"\"Computes the average of the integers from n through m (including n and m).\n    Rounds the answer to the nearest integer and converts that to binary.\n    If n is greater than m, returns -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n\n    total = sum(range(n, m+1))\n    average = total / (m - n + 1)\n    rounded_average = int(round(average))\n\n    binary_representation = format(rounded_average, '0b')\n\n    return binary_representation"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    return reducer(lambda x, y: x * y, 1, range(1, n+1))\n\ndef sum_of_numbers(n):\n    return reducer(lambda x, y: x + y, 0, range(1, n+1))\n\ndef reducer(func, initial, sequence):\n    current = initial\n    for element in sequence:\n        current = func(current, element)\n    return current"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    evens = [str(i) for i in range(1, n + 1) if str(i) == str(i)[::-1] and int(str(i)) % 2 == 0]\n    odds = [str(i) for i in range(1, n + 1) if str(i) == str(i)[::-1] and int(str(i)) % 2 != 0]\n    return (len(evens), len(odds))"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n\n    smallest = min(arr)\n    index_of_smallest = arr.index(smallest)\n\n    # If the smallest number is at its correct position, the array can be sorted by shifting to the right\n    if index_of_smallest == 0:\n        return True\n\n    for i in range(index_of_smallest):\n        # If we find a number larger than the smallest one to the right, it's impossible to sort the array by shifting\n        if arr[i+1] > smallest:\n            return False\n\n    return True"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Initialize counters for even and odd numbers\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = sum(1 for num in lst1 if num % 2 != 0) + len(lst2)\n\n    # If there are no odd numbers in lst1, it's always possible to make all the elements even\n    if not odd_count:\n        return \"YES\"\n\n    # Check if we can exchange enough odd numbers from lst2 to make lst1 only contain even numbers\n    while odd_count > 0 and odd_count <= odd_count:\n        # Find the next odd number in either list\n        for i in range(len(lst1)):\n            if lst1[i] % 2 != 0 and not (lst1[i] in [None, 0]):\n                break\n        else:\n            return \"NO\"\n\n        # Exchange the odd numbers between lst1 and lst2\n        lst1[i], lst2[odd_count - 1] = lst2[odd_count - 1], lst1[i]\n\n        # Decrease the counters for odd numbers in lst1 and lst2\n        odd_count -= 1\n        if (lst1[i] % 2 != 0) and (lst1[i] not in [None, 0]):\n            odd_count -= 1\n\n    # Check if all the remaining numbers in lst1 are even\n    for num in lst1:\n        if num % 2 != 0 and num not in [None, 0]:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Remove characters in s that appear in c\n    filtered_s = ''.join([char for char in s if char not in c])\n\n    # Reverse the filtered string\n    reversed_s = filtered_s[::-1]\n\n    # Check if the reversed string is a palindrome\n    if filtered_s == reversed_s:\n        return (filtered_s, True)\n    else:\n        return (filtered_s, False)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    def dfs(i, j, visited):\n        if i >= len(grid) or j >= len(grid[0]) or i < 0 or j < 0 or visited[i][j] or grid[i][j] == 0:\n            return 0\n\n        visited[i][j] = True\n        water_collected, times = 0, 1\n        for di, dj in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n            water_collected += min(capacity, dfs(i + di, j + dj, visited))\n        return max_times + min(water_collected // capacity, grid[i][j])\n\n    if not grid:\n        return 0\n\n    visited = [[False]*len(grid[0]) for _ in range(len(grid))]\n    times = dfs(0, 0, visited)\n    return times"}
{"task_id": "python/53", "language": "python", "completion": "import re\n\ndef select_words(s, n):\n    words = re.findall(r'\\b(\\W*[b-df-hj-np-tv-z\\d]*[aeiou]?\\W*){n}\\b', s)\n    return [word for word in words if word]"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Initialize two variables to keep track of the sum and count the number of elements with at most two digits\n    total = 0\n    count = 0\n\n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the current element to the total sum and increment the count\n            total += arr[i]\n            count += 1\n\n    # Return the total sum of the elements with at most two digits from the first k elements of arr\n    return total"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # If the intervals don't intersect, return \"NO\"\n    if start1 > end2 or end1 < start2:\n        return \"NO\"\n\n    # Calculate the intersection of the two intervals\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n\n    # Check if the length of the intersection is a prime number\n    if (end_intersection - start_intersection + 1) == 2:\n        return \"NO\"  # The interval with no elements is not considered prime\n\n    for num in range(3, int((end_interception - start_interception + 1)) // 2 + 2):\n        if (start_intersection - 1) % num == 0 and (end_intersection - 1) % num == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tribonacci(n):\n    # Initialize the first three terms of the Tribonacci sequence\n    sequence = [0, 0, 3]\n\n    if n <= 2:\n        return sequence[:n + 1]\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append((sequence[i - 1] + (sequence[i - 2])) // 2)\n        else:\n            next_term = sequence[i - 1] + sequence[i - 2] + sequence[i + 1 - len(sequence)]\n            sequence.append(next_term)\n\n    return sequence[:n + 1]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Convert n to a string and iterate through its digits\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            # Multiply the current product by the odd digit\n            product *= int(digit)\n        else:\n            # If we find an even digit, return 0 and break the loop\n            return 0\n    # Return the final product if all digits were odd\n    return product"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return len(stack) == 0"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    squared_numbers = [int(math.ceil(num ** 2)) for num in lst]\n    return sum(squared_numbers)"}
{"task_id": "python/61", "language": "python", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    '''\n    last_char = re.findall(r'\\b\\w+$', txt, re.IGNORECASE)[-1] if txt else \"\"\n    return len(last_char) == 1 and last_char.isalpha()"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    # Initialize a variable to store the index of the first element that doesn't meet the condition, which will be -1 if no such element exists.\n    i = -1\n\n    # Iterate through the array from the second element (index 1) to the end.\n    for j in range(1, len(arr)):\n        # If the current element is smaller than or equal to the previous one, update the index and break the loop since we've found our answer.\n        if arr[j-1] >= arr[j]:\n            i = j - 1\n            break\n\n    return i"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    lst_neg = [x for x in lst if x < 0]\n    lst_pos = [x for x in lst if x > 0]\n\n    if not lst_neg and not lst_pos:\n        return (None, None)\n\n    if not lst_neg:\n        return (None, min(lst_pos))\n\n    if not lst_pos:\n        return (max(lst_neg), None)\n\n    return (max(lst_neg), min(lst_pos))"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    primes = [2]  # 2 is a prime number, start with an empty list for non-prime numbers\n    for num in range(3, 101):\n        if all([num % i != 0 for i in range(2, int(num ** 0.5) + 1)]):\n            primes.append(num)\n\n    prime_words = [word for word in words if len(word) in primes]\n    return \" \".join(prime_words)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Split the input strings and convert them to integers\n    (num1, denom1), (num2, denom2) = map(tuple, map(lambda s: tuple(map(int, s.split('/'))), [x, n]))\n\n    # Check if the result is a whole number by finding the greatest common divisor (GCD) of num1 and denum1*num2\n    gcd = gcd_euclidean(denom1 * num2, abs(num1 * denom2))\n\n    return (gcd == 1 or gcd == denom1 * num2)  # If the GCD is 1 or equal to the product of denominators and numerator, it's a whole number\n\ndef gcd_euclidean(a, b):\n    \"\"\"Compute the Greatest Common Divisor (GCD) using Euclidean algorithm\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    sorted_nums = sorted(nums, key=sum_of_digits)\n    idx = [i for i, n in enumerate(nums)]\n    return [sorted_nums[i] for i in sorted(idx, key=lambda x: sum_of_digits(abs(x-sorted_nums[0]))) if sorted_nums[i] in nums]"}
{"task_id": "python/68", "language": "python", "completion": "def is_valid(num):\n    \"\"\"Helper function to check if a number has odd first and last digits.\"\"\"\n    num_str = str(abs(num))  # Convert the number to string, since abs() returns an integer\n    return len(num_str) >= 2 and (int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0)\n\ndef specialFilter(nums):\n    \"\"\"Returns the number of elements in the array that are greater than 10 and have odd first and last digits.\"\"\"\n    return len([x for x in nums if x > 10 and is_valid(x)])"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1.lower() not in planets or planet2.lower() not in planets:\n        return tuple()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    result = [planets[i] for i in range(min(index1, index2), max(index1, index2)+1)]\n    return tuple(result) if result else result"}
{"task_id": "python/71", "language": "python", "completion": "def x_or_y(n, x, y):\n    \"\"\"\n    A simple program which should return the value of x if n is a prime number\n    and should return the value of y otherwise.\n\n    Examples:\n        for x_or_y(7, 34, 12) == 34\n        for x_or_y(15, 8, 5) == 5\n    \"\"\"\n\n    # Check if n is a prime number using a simple method (checking divisibility up to the square root of n)\n    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return \"n is not a prime number\"\n        return x\n    else:\n        return \"n is not a positive integer\"\n    # If n is not a positive integer, return an error message"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the odd numbers in the list that are positive integers.\n    Ignore negative and non-integer numbers. If the input list is empty, return 0.\n    '''\n\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and (num % 2 != 0) and (num > 0):\n            result += num ** 2\n    return result"}
{"task_id": "python/73", "language": "python", "completion": "def calculate_strength(extension):\n    uppercase = sum([1 for c in extension if c.isupper()])\n    lowercase = sum([1 for c in extension if c.islower()])\n    return uppercase - lowercase\n\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda x: calculate_strength(x))\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring in the first word.\"\"\"\n\n    # Check if the given strings have the same length\n    if len(a) != len(b):\n        return False\n\n    # Generate all possible rotations of the second string\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    # If no match found, return False\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = []\n\n    for key, value in roman.items():\n        while number >= value:\n            result.append(key)\n            number -= value\n\n    return ''.join(result[::-1])"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if (a*a + b*b == c*c):\n        return True\n    else:\n        return False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Change case of letters\n            result += chr((ord('a') + (ord(char) - ord('a')) % 26) + ord('a')).upper() if char.islower() else char\n        else:\n            # Keep non-letters as they are\n            result += char\n    # If the string contains no letters, reverse it\n    return result[::-1] if not bool(re.search('[a-zA-Z]', s)) else result"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_even_digits(a, b):\n    result = set()  # Using a set to remove duplicates and improve performance\n\n    # Iterate over numbers from a to b and extract even digits using division modulo operator\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                result.add(int(digit))\n\n    # Convert the set to a list and sort it in ascending order\n    return sorted(list(result))"}

{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) return true;\n    }\n    return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    if (numbers.length === 0) {\n        return (0, 1);\n    } else {\n        let sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n        let product = numbers.reduce((accumulator, currentValue) => accumulator * currentValue, 1);\n        return (sum, product);\n    }\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    return a.split('').map((char, index) => (a[index] ^ b[index])).join('');\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    if (!strings || strings.length === 0) return 'none';\n\n    let maxLength = -1;\n    let longestString = '';\n\n    for (let i = 0; i < strings.length; i++) {\n        const stringLength = strings[i].length;\n\n        if (stringLength > maxLength) {\n            maxLength = stringLength;\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "let numOrder = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\nfunction sortNumbers(numbers) {\n    let numberMap = {};\n    for (let i = 0; i < numOrder.length; ++i) {\n        numberMap[numOrder[i]] = i;\n    }\n\n    let sortedNumbers = numbers.split(' ').map(number => numberMap[number]);\n    return sortedNumbers.map(num => numOrder[num]).join(' ');\n}\n\nconsole.log(sortNumbers(\"three one five\")); // \"one three five\""}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    // Find minimum and maximum values in the input array\n    const minValue = Math.min(...numbers);\n    const maxValue = Math.max(...numbers);\n\n    // Scale each number to the range [0, 1] by subtracting the minimum value and dividing by the difference between the minimum and maximum values\n    return numbers.map((number) => (number - minValue) / (maxValue - minValue));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n    return string.toLowerCase().replace(/([a-z])/g, match => match.toUpperCase()).toUpperCase().replace(/([A-Z])/g, match => match.toLowerCase());\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(x => x > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false; // If the number is even and greater than 2, it's not prime.\n\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(arr) {\n    let set = new Set();\n    for (let i of arr) {\n        set.add(i);\n    }\n    return [...set].sort((a, b) => a - b);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let a = 0, b = 1, candidates = [];\n  for (let i = 1; i <= n; i++) {\n    const next = a + b;\n    if (isPrime(next)) candidates.push(next);\n    [a, b] = [b, next];\n  }\n  return candidates[n - 1];\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n  if (l.length < 3) return false;\n\n  let sortedList = l.sort((a, b) => a - b);\n\n  for (let i = 0; i < sortedList.length - 2; i++) {\n    let target = sortedList[i];\n    let left = i + 1;\n    let right = sortedList.length - 1;\n\n    while (left < right) {\n      let sum = sortedList[left] + sortedList[right] + target;\n\n      if (sum === 0) return true;\n      else if (sum > 0) right--;\n      else left++;\n    }\n  }\n\n  return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    if (l.length < 2) return false;\n\n    let map = {}; // use an object to store visited numbers\n\n    for (let i = 0; i < l.length; ++i) {\n        const target = -l[i]; // search for a complement with the negative of current number\n        if (map[target] !== undefined) return true; // found pair\n        map[l[i]] = i; // store index of current number in the map\n    }\n\n    return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    let fibArray = [0, 0, 2]; // Initialize with first four terms\n\n    for (let i = 3; i <= n; ++i) {\n        fibArray[i] = fibArray[i - 1] + fibArray[i - 2] + fibArray[i - 3] + fibArray[i - 4];\n    }\n\n    return fibArray[n]; // Return the requested term\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    l = l.sort((a, b) => a - b); // sorting the array in ascending order\n    let n = l.length;\n    if (n === 0) return null; // returning null or an error message if the list is empty\n\n    let midIndex = Math.floor(n / 2); // calculating the index of the middle element\n    if (n % 2 === 0) { // handling the case when the number of elements in the list is even\n        return (l[midIndex - 1] + l[midIndex]) / 2;\n    } else { // handling the case when the number of elements in the list is odd\n        return l[midIndex];\n    }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n  // Remove spaces and convert to lowercase\n  let cleanedText = text.replace(/[\\s\\W]/g, \"\").toLowerCase();\n\n  // Reverse the cleaned text\n  let reversedText = cleanedText.split('').reverse().join('');\n\n  // Check if they're equal\n  return cleanedText === reversedText;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.split('').filter(char => !vowels.includes(char)).join('');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  return l.every(num => num < t);\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "public class Main {\n public static void main(String[] args) {\n System.out.println(\"add(2, 3): \" + add(2, 3));\n System.out.println(\"add(5, 7): \" + add(5, 7));\n }\n\n public static int add(int x, int y) {\n return x + y;\n }\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    const setS0 = new Set(s0);\n    const setS1 = new Set(s1);\n\n    return setS0.size === setS1.size && [...setS0].every(char => setS1.has(char));\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) return n; // Base case\n\n  return fib(n - 1) + fib(n - 2); // Recursive case\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  const setL1 = new Set(l1);\n  const setL2 = new Set(l2);\n\n  return Array.from(setL1.forEach(element => {\n    if (setL2.has(element)) {\n      return element;\n    }\n  }), value => value !== undefined);\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function isPrime(n) {\n  // Check for edge cases\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n\n  // Trial division up to the square root of n\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n\n  // If no factors were found, the number is prime\n  return true;\n}\n\nfunction largestPrimeFactor(n) {\n  if (!Number.isInteger(n) || n <= 1) throw new Error(\"Invalid input\");\n\n  // Iterate from the largest possible prime factor (n-1) down to 2\n  for (let i = n - 1; i >= 2; i -= 2) {\n    if (isPrime(i) && n % i === 0) return i;\n  }\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  if (n === 1) return 1; // base case for when n is equal to 1, return 1\n  return n + sumToN(n - 1); // recursive case, keep calling the function with n-1 until reaching the base case\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n  const n = xs.length;\n  if (n === 1) return []; // If it's a constant, no need for derivation.\n\n  let result = [0]; // Initialize an array with the first value as 0.\n  let currentIndex = 1;\n\n  while (currentIndex < n) {\n    result[currentIndex] = xs[currentIndex] * (currentIndex + 1);\n    currentIndex++;\n  }\n\n  return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfibMemo(n, memo = {}) {\n  if (n <= 2) return n === 0 ? 0 : 1;\n\n  if (memo[n]) return memo[n];\n\n  const result = fibfibMemo(n - 1, memo) + fibfibMemo(n - 2, memo) + fibfibMemo(n - 3, memo);\n  memo[n] = result;\n  return result;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    let count = 0;\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) && (s[i] !== 'y' || s[i - 1] === ' ')) {\n            count++;\n        }\n    }\n\n    return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    const count = {};\n    let maxFreq = 0;\n\n    for (let num of lst) {\n        if (!count[num]) count[num] = 1;\n        else count[num]++;\n        if (count[num] > maxFreq && num > 0) maxFreq = count[num];\n    }\n\n    for (let num in count) {\n        if (count[num] === maxFreq && num > maxFreq) return num;\n    }\n\n    return -1;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Check if the input is valid\n    if (!(a + Math.max(b, c) > Math.min(a, b, c))) return -1;\n\n    // Calculate the semi-perimeter (s)\n    const s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    return parseFloat(area.toFixed(2));\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n  function isBalanced(list) {\n    if (list.length <= 1) return true;\n    const [first, ...rest] = list;\n    return first === rest[rest.length - 1] && isBalanced(rest.slice(1, -1));\n  }\n\n  if (!isBalanced(q)) return false;\n\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n\n  return sum <= w;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n  // 0 and 1 are not prime numbers\n  if (n <= 1) return false;\n\n  // Check divisibility up to the square root of n\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) return false;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    return 'db' + (decimal >> 0).toString(2).padStart(8, '0') + 'db';\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    // Check if string has at least 3 characters\n    if (s.length < 3) return false;\n\n    // Iterate over the string in steps of three characters (substrings of length 3)\n    for (let i = 0; i < s.length - 2; i++) {\n        let substring = s.substring(i, i + 3);\n\n        // Check if each character is unique\n        if (!new Set(substring).size === 3) return false;\n    }\n\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function gradeEquation(grades) {\n    let letterGrades = ['E', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n    let mappedGrades = grades.map(gpa => Math.round(gpa * 10) / 10); // convert GPA to two decimal places for easier comparison\n\n    return mappedGrades.map((gpa, index) => letterGrades[index + 1]) // use the map function to iterate over the array and return the corresponding letter grade based on the current index plus one (since arrays are zero-based)\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n    let length = string.length;\n    // Check if the length is less than or equal to 1 since only 1 is considered as a prime number for lengths\n    if (length <= 1) return true;\n\n    // Iterate from 2 to the square root of the given length, checking for divisibility by each number\n    for(let i = 2; i * i <= length; i++) {\n        if (length % i === 0) return false;\n    }\n\n    // If no factor was found, then the length is a prime number\n    return true;\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    let bin = (n >> 0).toString(2);\n    let sum = 0;\n\n    // Iterate through each digit from right to left in binary representation\n    for (let i = bin.length - 1; i >= 0; i--) {\n        if (bin[i] === '1') {\n            sum += Math.pow(2, bin.length - i - 1);\n        }\n    }\n\n    return sum.toString(2);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  let result = [];\n\n  // Iterate through the nested list\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n\n    // Iterate through each element in the current row\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  // Sort coordinates by rows in ascending order and within each row, by columns in descending order\n  result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n\n  return result;\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 3) {\n        return \"none\";\n    }\n\n    const sortedLst = lst.slice().sort((a, b) => a - b);\n\n    return sortedLst[1];\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n  // Split the string into an array of words using space as delimiter\n  const words = s.split(' ');\n\n  let count = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    // Check if the current word starts with \"I\" and if it's followed by a punctuation mark\n    if (words[i].startsWith('I') && (/[.!?]$/.test(words[i + 1]) || i === words.length - 1)) {\n      count++;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n  // Filter out non-prime numbers from the list\n  let primes = lst.filter(isPrime);\n\n  // Find the largest prime number in the filtered list\n  let largestPrime = Math.max(...primes);\n\n  // Calculate the sum of its digits using the map() and reduce() methods\n  let sumOfDigits = Array.from(String(largestPrime), Number).reduce((a, b) => a + b, 0);\n\n  return sumOfDigits;\n}\n\n// Function to check if a number is prime\nfunction isPrime(num) {\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    if (!dict || !Object.keys(dict).length) return false;\n\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key of Object.keys(dict)) {\n        const value = dict[key];\n        if (typeof key === 'string') {\n            allLowerCase &= key.toLowerCase() === key;\n            allUpperCase &= key.toUpperCase() === key;\n        } else {\n            return false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    const number = parseFloat(value);\n    let integer = Math.floor(number);\n\n    // If the number is closer to the next higher integer, increment the integer\n    if (Math.abs(number - (integer + 1)) < Math.abs(number - integer)) {\n        integer++;\n    }\n\n    // If the number is equidistant from two integers and rounding away from zero, increment the integer\n    if (number === integer + Math.floor(number)) {\n        integer++;\n    }\n\n    return integer;\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n let result = [];\n let currentLevelStones = n;\n\n while (currentLevelStones > 0) {\n const nextLevelStones = (currentLevelStones % 2 === 0) ? currentLevelStones + 2 : currentLevelStones + 1;\n result.push(currentLevelStones);\n currentLevelStones = nextLevelStones;\n }\n\n return result.reverse();\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    // The regular expression \\s+ matches any whitespace character (spaces or tabs), so it will split on spaces and commas.\n    return s.split(/\\s+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  // Check if x or y are not positive numbers\n  if (x <= 0 || y <= 0) return -1;\n\n  // Find the smallest even number greater than or equal to x\n  let found = Math.pow(2, Math.ceil(Math.log2(x)));\n\n  // Check if this found number is smaller than y\n  return found < y ? found : -1;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) {\n        return -1;\n    }\n\n    let sum = 0;\n    let count = m - n + 1;\n\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const avg = Math.round(sum / count);\n    const binary = avg.toString(2);\n\n    return \"0b\" + binary;\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function factorial(n) {\n if (n === 0 || n === 1) return 1;\n return n * factorial(n - 1);\n}\n\nfunction f(n) {\n let result = [];\n for (let i = 1; i <= n; i++) {\n const isEven = i % 2 === 0;\n if (isEven) result.push(factorial(i));\n else result.push(sumOfNumbers(i));\n }\n return result;\n}\n\nfunction sumOfNumbers(n) {\n let sum = 0;\n for (let i = 1; i <= n; i++) sum += i;\n return sum;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function isPalindrome(num) {\n  const numStr = String(num);\n  let halfNum = Math.floor(numStr.length / 2);\n  for (let i = 0; i < halfNum; i++) {\n    if (numStr[i] !== numStr[numStr.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction evenOddPalindrome(n) {\n  let countEven = 0;\n  let countOdd = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        countEven++;\n      } else {\n        countOdd++;\n      }\n    }\n  }\n\n  return [countEven, countOdd];\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length === 0) return true;\n\n    let minIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n\n    let shifts = 0;\n    while (arr[minIndex] > arr[0]) {\n        const temp = arr.pop();\n        arr.unshift(temp);\n        shifts++;\n\n        for (let i = 1; i < minIndex + 1; i++) {\n            if (arr[i] > arr[minIndex]) {\n                minIndex--;\n                break;\n            }\n        }\n    }\n\n    return shifts !== Infinity;\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  // Check if there are any even numbers in lst2\n  const hasEvenInLst2 = lst2.some((num) => num % 2 === 0);\n  if (!hasEvenInLst2) return \"NO\";\n\n  let oddIndex1 = -1; // Index of the next odd number to find in lst1\n  for (let i = 0; i < lst1.length; i++) {\n    const num1 = lst1[i];\n    if (num1 % 2 !== 0) {\n      if (oddIndex1 === -1) oddIndex1 = i; // Remember the index of the first odd number found\n      else if (lst2[index2] % 2 !== 0) continue; // Skip this pair of numbers and look for another odd number in lst2\n    }\n    const num2 = lst2[i];\n    if (num2 % 2 !== 0 && index2 === -1) index2 = i; // Remember the index of the first odd number found in lst2\n  }\n\n  // If we haven't found any pair of odd numbers to swap, return \"NO\"\n  if (oddIndex1 === -1 || index2 === -1) return \"NO\";\n\n  // Swap the found odd numbers and return \"YES\"\n  [lst1[oddIndex1], lst2[index2]] = [lst2[index2], lst1[oddIndex1]];\n  return \"YES\";\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    let charMap = {};\n    for (let i = 0; i < c.length; i++) {\n        if (!charMap[c[i]]) charMap[c[i]] = 1;\n        else charMap[c[i]]++;\n    }\n\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!charMap[s[i]] || charMap[s[i]]-- > 0) result += s[i];\n    }\n\n    let reversedResult = result.split('').reverse().join('');\n\n    return [result, reversedResult === result];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  let numRows = grid.length;\n  let numCols = grid[0].length;\n  let timesLowered = 0;\n  let bucket = Array(capacity).fill(0);\n\n  for (let i = 0; i < numRows; i++) {\n    let waterInRow = 0;\n\n    // Fill the bucket with all the available water from this row\n    for (let j = 0; j < numCols && waterInRow < capacity; j++) {\n      if (grid[i][j] === 1) {\n        waterInRow++;\n        if (waterInRow > capacity) waterInRow = capacity;\n      }\n    }\n\n    // Empty the bucket into this row\n    for (let j = 0; j < Math.min(waterInRow, numCols); j++) {\n      grid[i][j] -= waterInRow;\n      if (grid[i][j] < 0) grid[i][j] = 0;\n    }\n\n    // Update the times lowered since we can't fill more water into the bucket\n    timesLowered += Math.floor(waterInRow / capacity);\n  }\n\n  return timesLowered;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    const regex = new RegExp(`\\\\b([^aeiouAEIOU]{${n}})[a-z]*\\\\b`, 'g');\n    return s.match(regex).filter(word => word.length > 0);\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n\n    // Slice the first k elements from the sorted array\n    return arr.slice(0, k);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n\n  for (let i = 0; i < k && i < arr.length; i++) {\n    if (String(arr[i]).length <= 2) {\n      sum += arr[i];\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\n    // Check if the intervals don't intersect\n    if (end1 < start2 || start1 > end2) return \"NO\";\n\n    // Calculate the intersection of the two intervals\n    let start = Math.max(start1, start2);\n    let end = Math.min(end1, end2);\n\n    // Check if the length of the intersection is a prime number\n    if (end - start + 1 <= 0) return \"NO\";\n    for (let i = 2; i * i <= end - start + 1; i++) {\n        if ((end - start + 1) % i === 0) return \"NO\";\n    }\n    return \"YES\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    let sequence = [3]; // Initialize with the first term of the sequence\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // If it's an even index, add the next number\n            sequence.push(sequence[i - 1] + (i / 2));\n        } else {\n            // If it's an odd index, sum the previous three numbers\n            let firstIndex = i - 3;\n            if (firstIndex >= 0) {\n                sequence.push(sequence[firstIndex] + sequence[firstIndex + 1] + sequence[firstIndex + 2]);\n            } else {\n                // If the index is negative, we have already added the first three numbers\n                sequence.push(sequence[0] + sequence[1] + sequence[2]);\n            }\n        }\n    }\n    return sequence;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  const str = String(n);\n  let product = 1;\n\n  for (let i = 0; i < str.length; i++) {\n    const digit = parseInt(str[i]);\n\n    // Check if the current digit is odd and accumulate the product of all odd digits found.\n    if (digit % 2 !== 0) product *= digit;\n  }\n\n  return product || 0;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(str) {\n  let stack = [];\n\n  // Iterate through each character in the input string\n  for (let char of str) {\n    // If we encounter an opening bracket, push it onto the stack\n    if (char === '[') stack.push(char);\n\n    // If we encounter a closing bracket and the stack is not empty,\n    // pop the top element from the stack. If it's not the corresponding\n    // opening bracket for this closing bracket, then there's a nested sequence\n    else if (char === ']') {\n      const lastOpeningBracket = stack.pop();\n      if (lastOpeningBracket !== '[') return true;\n    }\n  }\n\n  // If we finish iterating through the string and the stack is not empty,\n  // it means there's a nested sequence\n  return stack.length > 0;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = Math.ceil(lst[i]); // round to upper integer\n        result += Math.pow(num, 2); // square the number and sum up the results\n    }\n    return result;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    let arr = txt.split(\" \"); // split the string by spaces\n    for (let i = 0; i < arr.length; i++) { // iterate through each word in the array\n        if (arr[arr.length - 1] === arr[arr.length - 1].toLowerCase() && /[a-z]$/.test(arr[arr.length - 1])) { // check if the last character is a lowercase letter and is at the end of the word\n            return true;\n        }\n    }\n    return false; // return false if no match was found\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (i === 0 || arr[i] > arr[i-1]) {\n            continue;\n        } else {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let neg = [];\n    let pos = [];\n\n    // Filter out negative and positive integers from the input list\n    const filteredList = lst.filter(num => {\n        return num >= 0 ? pos.push(num) : neg.push(num);\n    });\n\n    // If there are no numbers in either array, return None, None\n    if (neg.length === 0 && pos.length === 0) {\n        return [null, null];\n    }\n\n    // If there is only one array with elements, return the smallest/largest number as None and the first element of the other array\n    if (neg.length === 1 || pos.length === 1) {\n        return neg.length > 0 ? [null, Math.min(...pos)] : [Math.max(...neg), null];\n    }\n\n    // Otherwise, find the largest negative number and smallest positive number\n    const largestNeg = Math.max(...neg);\n    const smallestPos = Math.min(...pos);\n\n    return [largestNeg, smallestPos];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n    if (n <= 0) {\n        throw new Error('Argument should be greater than 0');\n    }\n\n    let product = 1;\n\n    for (let i = n; i > 1; i--) {\n        product *= i;\n    }\n\n    return product;\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n  const words = sentence.split(' ');\n  const result = [];\n\n  // Create an array containing all numbers from 2 to the square root of the maximum word length, as we only check for prime numbers up to their square roots (due to the nature of prime numbers).\n  const primes = [2];\n  let i = 3;\n  while (i * i <= Math.sqrt(words[0].length)) {\n    if (isPrime(i)) primes.push(i);\n    i += 2;\n  }\n\n  // Iterate over the words and check if their lengths are prime numbers, add them to the result array.\n  for (let word of words) {\n    const len = word.length;\n    if (primes.includes(len)) result.push(word);\n  }\n\n  // Join the elements in the result array with a space and return the new sentence.\n  return result.join(' ');\n}\n\n// Helper function to check if a number is prime.\nfunction isPrime(num) {\n  if (num < 2) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n  const [numX, denomX] = x.split('/');\n  const [numN, denomN] = n.split('/');\n\n  // Multiply the numerators and denominators of the two fractions\n  let num = parseInt(numX * numN);\n  let denom = parseInt(denomX * denomN);\n\n  // If the product of the numerators and denominators is divisible by the smaller denominator, then the result is a whole number\n  if (denom % parseInt(denomX) === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    let sortedNumbers = nums.map((num, index) => [sumDigits(num), num, index]);\n    sortedNumbers.sort((a, b) => a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);\n\n    return sortedNumbers.map(item => item[1]);\n}\n\nfunction sumDigits(num) {\n    let sum = 0;\n    let numberString = num.toString();\n\n    for (let i = 0; i < numberString.length; i++) {\n        sum += Number(numberString[i]);\n    }\n\n    return sum;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    let count = 0;\n    for (let num of nums) {\n        // Check if number is greater than 10\n        if (num > 10) {\n            // Convert the number to a string and get its first and last digits\n            const strNum = String(num);\n            const firstDigit = parseInt(strNum[0]);\n            const lastDigit = parseInt(strNum[strNum.length - 1]);\n\n            // Check if both the first and last digits are odd (1, 3, 5, 7, or 9)\n            if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "public class MaxTriples {\n    public static void main(String[] args) {\n        int n = 5; // Input your value here\n        int[] a = new int[n + 1];\n        int count = 0;\n\n        for (int i = 1; i <= n; ++i) {\n            a[i] = i * i - i + 1;\n\n            for (int j = i + 1; j < a.length; ++j) {\n                for (int k = j + 1; k < a.length; ++k) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        System.out.println(count);\n    }\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction betweenPlanets(planet1, planet2) {\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 < 0 || index2 < 0) {\n    return []; // Return an empty tuple if planet names are incorrect\n  }\n\n  let result = [];\n\n  for (let i = Math.min(index1, index2); i <= Math.max(index1, index2); i++) {\n    if (i !== index1 && i !== index2) {\n      result.push(planets[i]);\n    }\n  }\n\n  return result; // Return the tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n    return isPrime(n) ? x : y;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        squared_num = num ** 2\n        if squared_num % 2 != 0:\n            result += squared_num\n    return result"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n  let maxStrength = Number.NEGATIVE_INFINITY;\n  let bestExtension = '';\n\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    let strength = extension.length - extension.toLowerCase().length;\n\n    if (strength > maxStrength) {\n      maxStrength = strength;\n      bestExtension = extension;\n    } else if (strength === maxStrength && i < extensions.indexOf(bestExtension)) {\n      bestExtension = extension;\n    }\n  }\n\n  return classname + '.' + bestExtension;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  // Get the length of the second word\n  const bLength = b.length;\n\n  // Initialize an empty array to store all rotations of the second word\n  let rotations = [];\n  for (let i = 0; i < bLength; i++) {\n    rotations.push(b.substring(i) + b.substring(0, i));\n  }\n\n  // Check if any rotation of the second word is a substring in the first word\n  for (let i = 0; i < rotations.length; i++) {\n    if (a.indexOf(rotations[i]) !== -1) {\n      return true;\n    }\n  }\n\n  // If no rotation was found, return false\n  return false;\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const map = {\n    1000: 'M',\n    900: 'CM',\n    500: 'D',\n    400: 'CD',\n    100: 'C',\n    90: 'XC',\n    50: 'L',\n    40: 'XL',\n    10: 'X',\n    9: 'IX',\n    5: 'V',\n    4: 'IV',\n    1: 'I'\n  };\n\n  let result = '';\n  for (let [numer, roman] of Object.entries(map)) {\n    while (number >= numer) {\n      number -= numer;\n      result += roman;\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n  // Ensure the input is valid (non-negative numbers)\n  if (a < 0 || b < 0 || c < 0) {\n    return false;\n  }\n\n  // Calculate the square of each side\n  let aSq = Math.pow(a, 2);\n  let bSq = Math.pow(b, 2);\n  let cSq = Math.pow(c, 2);\n\n  // Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n  return aSq + bSq === cSq;\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) { // Check if the character is a letter (case insensitive)\n      result += s[i] === s[i].toLowerCase() ? s[i].toUpperCase() : s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n\n  // If the string doesn't contain any letters, reverse it.\n  return result.match(/[a-z]/i) ? result : result.split('').reverse().join('');\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n  if (!text) return \"none\";\n\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  const digest = md5sum.digest('hex');\n\n  return digest;\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    const result = [];\n\n    // Iterate from the smallest even number between a and b (inclusive) to the largest one.\n    let currentNum = Math.min(...[a, b].filter(n => n % 2 === 0));\n    while (currentNum <= Math.max(...[a, b].filter(n => n % 2 === 0))) {\n        result.push(currentNum);\n        currentNum += 2;\n    }\n\n    return result;\n}"}

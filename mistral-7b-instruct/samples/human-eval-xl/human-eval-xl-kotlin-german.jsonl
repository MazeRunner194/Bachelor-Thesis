{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0\n    for (operation in operations) {\n        if (operation is Int && operation < 0) {\n            println(\"Error: Negative operation found: $operation\")\n            return true // since we have an invalid input, the account can't have a positive balance at any point\n        }\n        balance += (operation as Int)\n    }\n    return balance < 0\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): Pair<Int, Int> {\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a : String, b : String) : String {\n    val result = StringBuilder()\n\n    // Make sure both strings have the same length.\n    if (a.length != b.length) throw IllegalArgumentException(\"Strings must be of equal length.\")\n\n    for (i in 0 until a.length) {\n        val bitA = a[i] - '0'\n        val bitB = b[i] - '0'\n\n        // XOR operation is done using the bitwise AND (&) operator and an exclusive OR (^) on each bit of the operands.\n        result.append((bitA && !bitB) || (bitB && !bitA))\n    }\n\n    return result.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<String>): String? {\n    if (strings.isEmpty()) return null\n\n    val maxLength = strings.maxByOrNull { it.length }?.length ?: 0\n    return strings.filter { it.length == maxLength }.first()\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    if (b == 0) {\n        return a\n    }\n    return greatestCommonDivisor(b, a % b)\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val numberList = numbers.split(\" \").map { word ->\n        when (word) {\n            \"null\"  -> \"0\"\n            \"eins\"  -> \"1\"\n            \"zwei\"  -> \"2\"\n            \"drei\"  -> \"3\"\n            \"vier\"  -> \"4\"\n            \"f\u00fcnf\"  -> \"5\"\n            \"sechs\" -> \"6\"\n            \"sieben\" -> \"7\"\n            \"acht\"  -> \"8\"\n            \"neun\"  -> \"9\"\n            else    -> throw IllegalArgumentException(\"Invalid number: $word\")\n        }\n    }\n\n    return numberList.sorted().joinToString(\" \")\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers : List<Double>): List<Double> {\n    if (numbers.isEmpty()) return emptyList()\n\n    val min = numbers.minOrNull()!!\n    val max = numbers.maxOrNull()!!\n\n    return numbers.map { it - min }.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string : String) : String {\n    val chars = string.toCharArray()\n    for (i in 0 until chars.size) {\n        if (chars[i] >= 'A' && chars[i] <= 'Z') {\n            chars[i] += 32 // convert uppercase to lowercase\n        } else if (chars[i] >= 'a' && chars[i] <= 'z') {\n            chars[i] -= 32 // convert lowercase to uppercase\n        }\n    }\n    return String(chars)\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l : List<Any>): List<Any> {\n    val result = mutableListOf<Any>()\n    for (item in l) {\n        if (item > 0) {\n            result.add(item)\n        }\n    }\n    return result.toList()\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n : Int) : Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n\n    val sqrt = Math.sqrt(n.toDouble()).toInt()\n\n    for (i in 3..sqrt step 2) {\n        if (n % i == 0) return false\n    }\n\n    return true\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.toSet().toList()\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2 until Math.sqrt(number.toDouble()).toInt() + 1) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun fibonacci(n: Int): Long {\n    if (n <= 1) return n\n    var a = 0L\n    var b = 1L\n    for (i in 2..n) {\n        val nextFib = a + b\n        a = b\n        b = nextFib\n    }\n    return a\n}\n\nfun primeFib(n: Int): Long {\n    var fibIndex = 0L\n    var foundPrimeFib = false\n    var currentFib = 1L\n    while (!foundPrimeFib && fibIndex <= n) {\n        if (isPrime(currentFib)) {\n            val fibNumber = fibonacci(fibIndex.toInt())\n            if (fibNumber == currentFib) {\n                foundPrimeFib = true\n            }\n        }\n        currentFib++\n        fibIndex++\n    }\n    return if (foundPrimeFib) currentFib - 1 else -1L // -1 indicates no solution was found\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    val set = l.toSet()\n    if (set.size < 3) return false // If less than three unique elements, cannot form a triple to sum to zero\n    val map = mutableMapOf<Int, Int>() // Map for counting occurrences of each element\n\n    for (i in l) {\n        if (!map.containsKey(i)) {\n            map[i] = 1\n        } else {\n            map[i]!!++ // Increment the count by one\n        }\n    }\n\n    // Iterate through all unique elements and their counts to find triples that sum to zero\n    for (a in set) {\n        for (b in set) {\n            if (!set.contains(0 - a - b)) continue // If there's no element that can make the triple, move on\n            val c = 0 - a - b\n            val countA = map[a]!!\n            val countB = map[b]!!\n\n            if (countA > 0 && countB > 0) { // If both elements are present more than once\n                if (c < 0 || map.getOrDefault(c, 0) <= 0) continue // If the third element is not present or not present enough times, move on\n            } else if (countA > 1 || countB > 1) { // If either element is present more than once\n                if (map.getOrDefault(c, 0) <= 0) continue // If the third element is not present or not present enough times, move on\n            } else { // Else both elements are only present once and we have found a triple to sum to zero\n                map[a]--\n                map[b]--\n                map[c]--\n                return true\n            }\n        }\n    }\n\n    return false // If no triple to sum to zero was found, return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val set = l.toSet() // Use a Set to store unique values and check for duplicates efficiently.\n    return set.any { it1 -> set.any { it2 -> (it1 + it2) == 0 && it1 != it2 } }\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n <= 3) return 0\n\n    var prevPrev = 0\n    var prev = 0\n    var current = 2\n\n    for (i in 4..n) {\n        val temp = current\n        current += prev + prevPrev\n        prevPrev = prev\n        prev = temp\n    }\n\n    return current\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Double {\n    val sortedList = l.sorted()\n    return if (sortedList.size % 2 == 0) {\n        (sortedList[sortedList.size / 2] + sortedList[(sortedList.size / 2) - 1]) / 2.0\n    } else {\n        sortedList[sortedList.size / 2]\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val reversedText = text.reversed()\n    return text == reversedText\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "import java.util.Regex\n\nfun removeVowels(text : String) : String {\n    val pattern = Regex(\"([aeiouAEIOU])\")\n    return text.replace(pattern, \"\")\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l : List<Int>, t : Int) : Boolean {\n    for (number in l) {\n        if (number >= t) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "return x + y\n}\n\nIn this Kotlin function, you define a simple addition operation that takes two integers as parameters (x and y), performs the addition operation, and returns the result. You can call this function with any two integer values to get their sum. For example:\n\n- add(2, 3) will return 5.\n- add(5, 7) will return 12."}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    if (s0.length != s1.length) return false // If the lengths of the strings are different, they can't have the same characters.\n\n    val set = mutableSetOf<Char>() // Create a Set to store unique characters from s0.\n    for (c in s0) {\n        if (!set.add(c)) return false // If we encounter a character that is already in our Set, they can't have the same characters.\n    }\n\n    // Now check if all characters in s1 are also present in our set.\n    for (c in s1) {\n        if (!set.contains(c)) return false\n    }\n\n    return true // If we reach here, then both strings have the same characters.\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 1) return n\n    return fib(n - 1) + fib(n - 2)\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Any>): List<Any> {\n    val set1 = l1.toSet() // convert to a Set to remove duplicates and allow O(1) lookup\n    val set2 = l2.toSet()\n\n    return (set1 intersect set2).sorted() // get the intersection of sets, then sort the result\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n : Int): Int {\n    if (n <= 1) throw IllegalArgumentException(\"n must be greater than 1\")\n\n    var factor = 2\n    while (n % factor != 0) {\n        factor++\n        if (factor > Math.sqrt(n.toDouble()).toInt()) return n // If the number itself is prime, it's the largest prime factor.\n    }\n\n    // Now factor is a divisor of n and the largest prime factor since all other factors of n are less than factor.\n    while (n % factor == 0) n /= factor\n    return factor\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return (1..n).sum()\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(coefficients: List<Double>): List<Double> {\n    val result = mutableListOf<Double>()\n\n    // Shift the coefficients to the right, so we have a new list where each element is multiplied by x (exponent + 1)\n    val shiftedCoefficients = coefficients.zipWithNext { c1, c2 -> c2 * (1.0..(c1.toDouble()).pow(2)).toList() }.flattenToMutableList()\n\n    // Start from the second element of the shifted list and iterate through it to compute the derivative\n    for (i in 1 until shiftedCoefficients.size) {\n        result.add(shiftedCoefficients[i - 1] / i.toDouble())\n    }\n\n    return result\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n <= 2) return 0\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = listOf('a', 'e', 'i', 'o', 'u', 'y')\n    var count = 0\n    for (c in s) {\n        if (vowels.contains(c)) {\n            count++\n        }\n    }\n    if (s.endsWith(\"y\") && !s.endsWith(\"ey\")) {\n        count++\n    }\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    val frequencyMap = lst.groupBy { it }.mapValues { (_, value) -> value.size }\n\n    return lst.filter { frequencyMap[it]!! > it }.maxOrNull() ?: -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "fun triangleArea(a: Double, b: Double, c: Double): Double {\n    val s = (a + b + c) / 2.0\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q : List<Int>, w : Int) : Boolean {\n    if (q.size <= 1) return false // The list should have at least 2 elements to be a palindrome\n\n    val isPalindrome = q.toReversed().contentEquals(q) // Checking for palindromic sequence by reversing the list and comparing it with the original list\n\n    if (isPalindrome) {\n        return q.sum() <= w\n    } else {\n        return false\n    }\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a : Int): Boolean {\n    if (a < 3) return false // Erste Primzahl ist 2 oder gr\u00f6\u00dfer, daher false f\u00fcr alle Werte kleiner als 3\n\n    val roots = MutableList(IntArray(6)) { it * it } // Liste mit den Quadraten von 2 bis sqrt(a)\n    var cubeRoot = Math.sqrt(a.toDouble()).toInt()\n\n    if (cubeRoot * cubeRoot * cubeRoot != a) return false // Ist a eine Primzahl? Nein, daher false\n\n    for (i in 2 until cubeRoot step 2) { // \u00dcberpr\u00fcfe alle ungeraden Werte bis zur Wurzel von a\n        if (a % i == 0 || roots.binarySearch(i) >= 0) return false\n        val nextRoot = (i * i + 3 * i + 2).toDouble().sqrt().toInt()\n        roots += (i + nextRoot * 2).rangeTo(nextRoot + 2).map { it * it }.toList()\n    }\n\n    return true // Wenn bis hier \u00fcberall false zur\u00fcckgegeben wurde, ist a das Produkt von drei Primzahlen\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal : Int) : String {\n    if (decimal == 0) return \"db0db\"\n\n    val binString = StringBuilder(\"db\")\n    var number = decimal\n    var index = 0\n    while (number > 0) {\n        binString.append(number % 2)\n        number /= 2\n        index++\n    }\n    for (i in index until 7) binString.append('0') // F\u00fcgt zus\u00e4tzliche Nullen hinzu, um die L\u00e4nge auf 8 Zeichen zu bringen\n    return binString.append(\"db\").toString() // F\u00fcgt das letzte 'db' an den String anh\u00e4ngen\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s : String) : Boolean {\n    if (s.length < 3) return false\n\n    for (i in 0 until s.length - 2) {\n        val group = s.subSequence(i, i+3)\n        if (group[0] == group[1] || group[1] == group[2] || group[0] == group[2]) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades : List<Double>) : List<String> {\n    val gradesMap = mapOf(\n        4.0 to \"A+\",\n        greaterThan(3.7) to \"A\",\n        greaterThan(3.3) to \"A-\",\n        greaterThan(3.0) to \"B+\",\n        greaterThan(2.7) to \"B\",\n        greaterThan(2.3) to \"B-\",\n        greaterThan(2.0) to \"C+\",\n        greaterThan(1.7) to \"C\",\n        greaterThan(1.3) to \"C-\",\n        greaterThan(1.0) to \"D+\",\n        greaterThan(0.7) to \"D\",\n        greaterThan(0.0) to \"D-\",\n        0.0 to \"E\"\n    )\n\n    return grades.map { gradesMap[it] ?: \"E\" }\n}\n\nfun <T : Comparable<T>> greaterThan(threshold: T): (T) -> Boolean = { it > threshold }"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    for (i in 2..Math.sqrt(number.toDouble()).toInt()) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun primeLength(string: String): Boolean {\n    val length = string.length\n    return isPrime(length)\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    // Calculate the sum of the digits in decimal form\n    val sum = (n % 10 + n / 10 % 10 + n / 100 % 10 + n / 1000 % 10 + n / 10000).toString().toInt()\n\n    // Convert the sum to binary representation\n    var binary = \"\"\n    while (sum > 0) {\n        binary = (sum % 2).toString() + binary\n        sum /= 2\n    }\n    return binary\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst: List<List<Any>>, x: Int): List<Pair<Int, Int>> {\n    return lst.flatMapIndexed { i, row -> row.mapNotNull { it as? Int ?: -1 } }\n        .filter { it == x }\n        .mapIndexed { j, _ -> Pair(i, lst[i].size - 1 - j) }\n        .sortedWith(compareBy({ it.first }, { -it.second })).toList()\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Int>): Int? {\n    if (lst.isEmpty()) return null\n    val sortedLst = lst.sorted()\n    for ((i, value) in sortedLst.withIndex()) {\n        if (i > 0 && value == sortedLst[i - 1] + 1) {\n            return value\n        }\n    }\n    return null\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "import java.util.Regex\n\nfun isBored(s : String) : Int {\n    val ichPattern = Regex(\"^Ich\\\\s.*(\\\\.|!|\\\\?)$\")\n    return s.split(' ').filter { ichPattern.matches(it) }.size\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n\n    val squareRoot = Math.sqrt(n.toDouble()).toInt()\n\n    for (i in 3..squareRoot step 2) {\n        if (n % i == 0) return false\n    }\n\n    return true\n}\n\nfun sumOfDigits(n: Int): Int {\n    var sum = 0\n    var number = n\n\n    while (number > 0) {\n        val digit = number % 10\n        sum += digit\n        number /= 10\n    }\n\n    return sum\n}\n\nfun findLargestPrimeSum(lst: List<Int>): Int {\n    var max = 0\n    var maxSum = 0\n\n    for (number in lst) {\n        if (isPrime(number)) {\n            val numberSum = sumOfDigits(number)\n            if (numberSum > maxSum || (numberSum == maxSum && number > max)) {\n                maxSum = numberSum\n                max = number\n            }\n        }\n    }\n\n    return max\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict : Map<String, Any>): Boolean {\n    val keySet = dict.keys.toSet() // Convert keys to Set for unique values and faster lookups\n    var upperKeys = keySet.map { it.toUpperCase() }.toSet()\n    var lowerKeys = keySet.map { it.toLowerCase() }.toSet()\n    return upperKeys == keySet || lowerKeys == keySet\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "import java.lang.Math.round\n\nfun closestInteger(value : String) : Int {\n    val number = value.toDoubleOrNull() ?: throw IllegalArgumentException(\"The input string is not a valid number\")\n    var result = round(number).toInt()\n\n    if (Math.abs(number - result.toDouble()) == Math.abs(result + 1.0 - number)) {\n        // If the given number is equidistant from two integers, return the one that is further away from zero.\n        if (result < 0) {\n            result += 1\n        } else {\n            result -= 1\n        }\n    }\n\n    return result\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf(n) // initialize a list with n (first level)\n\n    var currentLevel = n\n    while (currentLevel > 1) {\n        if (currentLevel % 2 == 1) { // if the current level is odd\n            currentLevel += 1 // increment by 2 to get the next even number\n        } else { // if the current level is even\n            currentLevel += 3 // increment by 3 to get the next odd number\n        }\n        pile.add(currentLevel) // add the number of stones for the next level\n    }\n\n    return pile // return the final list\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    val words = s.split(\"[,\\\\s]+\") // The regex [,\\\\s]+ matches commas and whitespace characters\n    return words\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x : Int, y : Int) : Int {\n    for (number in x until y + 1) {\n        if (number % 2 == 0) {\n            return number\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): String {\n    if (n > m) return \"-1\"\n\n    val average = (m - n + 1).toLong() / 2\n    var result = average.toInt()\n    val binaryRepresentation = Integer.toBinaryString(result)\n    return \"0b$binaryRepresentation\"\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(factorial(i)) // Factorial function can be implemented recursively or iteratively\n        } else {\n            result.add(sumOfNumbersUpTo(i))\n        }\n    }\n    return result\n}\n\nfun factorial(n: Int): Int {\n    if (n <= 1) return 1\n    var fact = 1\n    for (i in 2..n) {\n        fact *= i\n    }\n    return fact\n}\n\nfun sumOfNumbersUpTo(n: Int): Int {\n    return (1..n).sum()\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n : Int) : List<Int> {\n    var countEven = 0\n    var countOdd = 0\n\n    for (i in 1..n) {\n        val reversedNumber = i.toString().reversed()\n        if (i == reversedNumber.toInt()) {\n            if (i % 2 == 0) {\n                countEven++\n            } else {\n                countOdd++\n            }\n        }\n    }\n\n    return listOf(countEven, countOdd)\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n\n    val n = arr.size\n    var maxIndex = 0\n    for ((i, value) in arr.withIndex()) {\n        if (value < arr[maxIndex]) maxIndex = i\n    }\n\n    // If the maximum index is not the last one, we can perform right shift operations to move the maximum at the first position\n    return if (maxIndex == n - 1) true else arr.dropLast(2).zipWithNext { (a, b) -> a > b }.all { it }\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1 : List<Int>, lst2 : List<Int>) : String {\n    var lst1Copy = mutableListOf(*lst1.toTypedArray())\n    var lst2Copy = mutableListOf(*lst2.toTypedArray())\n\n    for (number in lst1) {\n        if (number % 2 != 0) {\n            // Find an even number in the remaining elements of lst2\n            if (lst2Copy.isEmpty() || lst2Copy[0] % 2 != 0) return \"NO\"\n            val evenNumber = lst2Copy.removeAt(0)\n\n            // Swap the odd number with the even number found in lst2\n            val temp = number\n            number = evenNumber\n            evenNumber = temp\n            lst1Copy[lst1.indexOf(number)] = number\n        }\n    }\n\n    return \"YES\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): Pair<String, Boolean> {\n    val result = StringBuilder(s) // Create a mutable string to store the resulting string\n\n    for ((i, char) in s.withIndex()) {\n        if (c.contains(char)) { // If the current character is in the comparison string, delete it from the result\n            result.deleteAt(i)\n        }\n    }\n\n    val reversed = result.reversed() // Reverse the resulting string for checking if it's a palindrome\n    val isPalindrome = result.contentEquals(reversed) // Check if the resulting string is equal to its reverse (a palindrome)\n\n    return Pair(result.toString(), isPalindrome) // Return the resulting string and boolean for whether it's a palindrome\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid : List<List<Int>>, capacity : Int) : Int {\n    val visited = Array(grid.size) { IntArray(grid[0].size) { 0 } }\n    var count = 0\n\n    fun sinkBucket(x: Int, y: Int): Boolean {\n        if (visited[x][y] == 1 || grid[x][y] == 0) return false\n        visited[x][y] = 1\n        var waterToExtract = Math.min(grid[x][y], capacity)\n        count++\n        if (waterToExtract < capacity) return true\n\n        for (i in -1..1) {\n            val nx = x + i\n            val ny = y\n            sinkBucket(nx, ny)\n        }\n        for (i in -1..1) {\n            val nx = x\n            val ny = y + i\n            sinkBucket(nx, ny)\n        }\n        if (waterToExtract == capacity) count--\n        return true\n    }\n\n    for (i in 0 until grid.size) {\n        for (j in 0 until grid[0].size) {\n            if (grid[i][j] == 1 && visited[i][j] == 0) sinkBucket(i, j)\n        }\n    }\n\n    return count\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s : String, n : Int) : List<String> {\n    val vowels = arrayOf(\"a\", \"e\", \"i\", \"o\", \"u\")\n    val words = mutableListOf<String>()\n    var startIndex = 0\n    var currentWordLength = 0\n\n    for (index in 0 until s.length) {\n        val char = s[index]\n\n        // If the character is a consonant and we haven't reached the required number of consonants yet, start a new word.\n        if (isConssonant(char) && currentWordLength < n - vowels.count { vowel -> char.toLowerCase() == vowel }) {\n            startIndex = index\n            currentWordLength = 0\n        }\n\n        // If the character is a consonant, increment the word length and check if it meets the required number of consonants for the current word.\n        if (isConssonant(char)) {\n            currentWordLength++\n            if (currentWordLength == n) {\n                val word = s.substring(startIndex, index + 1)\n                words.add(word)\n                startIndex = index + 1\n                currentWordLength = 0\n            }\n        }\n    }\n\n    return words\n}\n\nprivate fun isConssonant(char: Char): Boolean {\n    return char != ' ' && (\"bcdfghjklmnpqrstvwxyz\".contains(char.toLowerCase()) && !\"aeiou\".contains(char.toLowerCase()))\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr : List<Int>, k : Int) : List<Int> {\n    return arr.sortedByDescending().subList(0, k)\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr : List<Int>, k : Int) : Int {\n    var sum = 0\n    for (i in 0 until if (k > arr.size) arr.size else k) {\n        if (arr[i] <= 99 || arr[i] == 0) { // Elemente mit h\u00f6chstens zwei Stellen werden gesammelt\n            sum += arr[i]\n        }\n        if (i == k) break // Beendigung des Schleifenlaufes, wenn k erreicht ist\n    }\n    return sum\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2 until Math.sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun intersection(interval1 : List<Int>, interval2 : List<Int>): String {\n    if ((interval1[0] > interval2[1]) || (interval2[0] > interval1[1])) return \"NO\"\n\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n\n    if (start >= end) return \"NO\"\n\n    var length = end - start + 1\n    if (length <= 0) return \"NO\"\n\n    if (isPrime(length)) return \"YES\"\n    else return \"NO\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "val tribonacci = mutableListOf(0, 0, 1)\n\nfun tri(n: Int): List<Int> {\n    if (tribonacci.size <= n + 1) {\n        repeat(n - tribonacci.size + 3) { index ->\n            val current = tribonacci[index]\n            tribonacci.add((tribonacci[index - 2] + tribonacci[index - 1] + tribonacci[index + 1]).toInt())\n        }\n    }\n    return tribonacci.slice(0 until n + 1)\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var result = 1 // initialize to 1 since 1 is an odd number\n    val numberAsString = n.toString()\n\n    for (char in numberAsString) {\n        if (char.toInt() % 2 != 0) {\n            result *= char.toInt() - 48 // convert char to int since it is a string and multiplication between strings is not allowed\n        }\n    }\n\n    return if(result == 1) 0 else result // return 0 if the final result is 1, as per the problem statement\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    if (string.length % 2 != 0) return false // Wenn die L\u00e4nge ungerade ist, gibt es keine Verschachtelung.\n\n    var openBrackets = 0\n    for (c in string) {\n        when (c) {\n            '[' -> openBrackets++\n            ']' -> if (openBrackets == 0) return false // Wenn es keine offene Klammer gibt, gibt es keine Verschachtelung.\n            else openBrackets--\n        }\n    }\n\n    return openBrackets == 0 // Wenn es keiner offenen Klammer mehr gibt, gibt es Verschachtelung.\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "import java.lang.Math.*\n\nfun sumSquares(lst : List<Any>): Int {\n    val squaredAndRoundedList = lst.map { ceil(it.toDouble()).pow(2).toInt() }\n    return squaredAndRoundedList.sum()\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt : String) : Boolean {\n    if (txt.isEmpty()) return false\n\n    val lastChar = txt[txt.lastIndex]\n    val isLastCharAlphabetical = lastChar in 'a'..'z' || lastChar in 'A'..'Z'\n\n    // Check if the last character is not a part of a word by looking for a space character right before it.\n    val indexOfSpaceBeforeLastChar = txt.lastIndexOf(' ') + 1\n\n    return isLastCharAlphabetical && (indexOfSpaceBeforeLastChar == txt.length)\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Any>): Int {\n    if (arr.size <= 1) return -1\n    var result = mutableListOf<Int>()\n    var position = -1\n    for ((index, element) in arr.withIndex()) {\n        if (position >= 0 && element > arr[position]) {\n            result.clear()\n            position = -1\n        }\n        if (element > arr[index - 1]) {\n            position = index\n            result.add(index)\n        }\n    }\n    return if (result.isEmpty()) -1 else result[result.lastIndex] + 1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst : List<Any>): Pair<Int?, Int?> {\n    val filtered = lst.filterIsInstance(Int::class.java)\n\n    if (filtered.isEmpty()) return Pair(None, None)\n\n    val sorted = filtered.sorted()\n\n    return Pair(\n        if (sorted[0] < 1) None else sorted[0],\n        if (sorted.last > -1) sorted.last else None\n    )\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    if (n <= 0) {\n        throw IllegalArgumentException(\"n must be greater than 0\")\n    }\n\n    if (n == 1) {\n        return 1\n    }\n\n    return n * specialFactorial(n - 1)\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun wordsInSentence(sentence : String) : String {\n    val words = sentence.split(\" \")\n    val result = StringBuilder()\n\n    for (word in words) {\n        if (isPrime(word.length)) {\n            result.append(\" $word \")\n        }\n    }\n\n    return result.substringBeforeLast(\" \") // Remove the trailing space\n}\n\nprivate fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    if (number == 2) return true\n    if (number % 2 == 0) return false\n\n    var limit = Math.sqrt(number.toDouble()).toInt() + 1\n    for (i in 3..limit step 2) {\n        if (number % i == 0) return false\n    }\n\n    return true\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    val xParts = x.split('/')\n    val yParts = n.split('/')\n\n    // Check if the number of parts in x and n are equal to 2\n    if (xParts.size != 2 || yParts.size != 2) return false\n\n    // Convert string parts to integers\n    val xNumerator = xParts[0].toInt()\n    val xDenominator = xParts[1].toInt()\n    val yNumerator = yParts[0].toInt()\n    val yDenominator = yParts[1].toInt()\n\n    // Perform multiplication and check if the result is an integer\n    val result = xNumerator * yDenominator - yNumerator * xDenominator\n    return result.toLong() == result.toDouble().toLong()\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedWith(compareBy({ it.toString().sumOf { it - '0' } }, { nums.indexOf(it) })).toList()\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    var count = 0\n    for (number in nums) {\n        if (number is Int && number > 10) {\n            val firstDigit = (number / 10).toInt() % 10\n            val lastDigit = number % 10\n\n            if (firstDigit in listOf(1, 3, 5, 7, 9) && lastDigit in listOf(1, 3, 5, 7, 9)) {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "import java.util.Arrays.asList\n\nfun getMaxTriples(n : Int) : Int {\n    val a = (1..n).map { it * it - it + 1 }\n    return a.combination(3).filter { sumOf(it) % 3 == 0 }.count()\n}\n\nfun sumOf(list: List<Int>): Int {\n    return list.sum()\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Merkur\", \"Venus\", \"Erde\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptun\")\nval daysToOrbit = mapOf(\n    \"Merkur\" to 87.97,\n    \"Venus\" to 224.7,\n    \"Erde\" to 365.256,\n    \"Mars\" to 687.00,\n    \"Jupiter\" to 4331.8,\n    \"Saturn\" to 10779.2,\n    \"Uranus\" to 30687.0,\n    \"Neptun\" to 60190.0\n)\n\nfun bf(planet1: String, planet2: String): List<Any> {\n    val index1 = planets.indexOfFirst { it == planet1 }\n    if (index1 < 0 || index1 >= planets.size) return emptyList()\n    val index2 = planets.indexOfFirst { it == planet2 }\n    if (index2 < 0 || index2 >= planets.size) return emptyList()\n\n    val planetOrbits = planets.map { p -> Triple(p, daysToOrbit[p]!!, Math.abs(daysToOrbit[planet1]!! - daysToOrbit[planet2]!!)) }\n    val result = planetOrbits\n        .filter { (_, orbit1, _) -> orbit1 in (Math.min(daysToOrbit[planet1]!!, daysToOrbit[planet2]!!)..Math.max(daysToOrbit[planet1]!!, daysToOrbit[planet2]!!)) }\n        .sortedBy { (_, _, dist) -> Math.abs(dist - daysToOrbit[planet1]!! + daysToOrbit[planet2]!!) }\n    return result\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun isPrime(number: Int): Boolean {\n    if (number <= 1) return false\n    if (number == 2) return true\n    if (number % 2 == 0) return false\n\n    val sqrt = Math.sqrt(number.toDouble()).toInt()\n    for (i in 3..sqrt step 2) {\n        if (number % i == 0) return false\n    }\n    return true\n}\n\nfun xOrY(n: Int, x: Int, y: Int): Int {\n    if (isPrime(n)) return y\n    return x\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst) {\n        if (i !is Int || i < 0) continue // Skip non-integer or negative values\n        val square = i * i\n        if (i % 2 != 0) sum += square // Add only the squares of odd numbers\n    }\n    return sum\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    val upperExtensions = extensions.map { it.toUpperCase() } // Convert all strings to upper case for easier comparison\n    var maxDiff = Int.MIN_VALUE\n    var strongestExtension = \"\"\n\n    for (extension in upperExtensions) {\n        val caps = extension.count { it.isUpperCase() }\n        val smalls = extension.length - caps\n        val diff = caps - smalls\n\n        if (diff > maxDiff) {\n            maxDiff = diff\n            strongestExtension = extension\n        }\n    }\n\n    return className + \".\" + strongestExtension // Return the result in the desired format\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    val rotations = mutableListOf<String>()\n    // Store all rotations of the second string (b)\n    for (i in 0 until b.length) {\n        rotations.add(b.substring(i until b.length) + b.subSequence(0, i))\n    }\n\n    // Check if any rotation is a substring of the first string (a)\n    return rotations.any { a.contains(it) } || a.contains(b)\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val arabicToRoman = mapOf(\n        1 to \"I\",\n        5 to \"V\",\n        10 to \"X\",\n        50 to \"L\",\n        100 to \"C\",\n        500 to \"D\",\n        1000 to \"M\"\n    )\n\n    val romanNumber = StringBuilder()\n\n    for ((arabic, roman) in arabicToRoman.entries.reversed()) {\n        repeat(number / arabic) {\n            romanNumber.append(roman)\n            number %= arabic\n        }\n\n        if (number < arabic && arabicToRoman[number] != null) {\n            val reverse = arabicToRoman[number]!!\n            repeat(arabic - number) {\n                romanNumber.append(reverse)\n            }\n            break\n        }\n    }\n\n    return romanNumber.toString()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a : Int, b : Int, c : Int) : Boolean {\n    return (Math.pow(c.toDouble(), 2) == Math.pow(a.toDouble(), 2) + Math.pow(b.toDouble(), 2))\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    val sb = StringBuilder()\n    for (char in s) {\n        if (char in 'a'..'z') {\n            sb.append(char.toString().toUpperCase())\n        } else if (char in 'A'..'Z') {\n            sb.append(char.toString().toLowerCase())\n        } else {\n            sb.append(char)\n        }\n    }\n    return sb.toString()\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.security.MessageDigest\nimport java.math.BigInteger\nimport java.nio.charset.StandardCharsets\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return null\n\n    val md = MessageDigest.getInstance(\"MD5\")\n    md.update(text.toByteArray(StandardCharsets.UTF_8))\n    val digest = md.digest()\n    return BigInteger(1, digest).toString(16)\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in if (a < b) a..b else b downTo a step 2) {\n        result.add(i)\n    }\n    return result\n}"}

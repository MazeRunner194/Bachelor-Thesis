{"task_id": "python/0", "language": "python", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n\n    sum_value = sum(numbers)\n    product_value = 1\n    for number in numbers:\n        product_value *= number\n\n    return (sum_value, product_value)"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Ensure both inputs have equal length and consist of only '0' or '1' characters\n    assert len(a) == len(b), \"Inputs must be the same length\"\n    for char in a + b:\n        if char not in ['0', '1']:\n            raise ValueError(\"Inputs can only contain '0' or '1' characters\")\n\n    result = \"\"\n    for i in range(len(a)):\n        # Perform XOR operation on each character position\n        result += str((int(a[i]) ^ int(b[i])))\n\n    return result"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculates the greatest common divisor of two integers a and b.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    nums = [int(n) for n in numbers.split() if n]  # Convert input string to a list of integers and remove empty spaces\n    nums.sort()  # Sort the list in ascending order\n    sorted_numbers = ' '.join([str(num) for num in reversed(nums)])  # Reverse the list and join the strings back into a single string\n    return sorted_numbers"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list should contain at least two elements.\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    scaling_factor = (max_val - min_val) ** -1\n\n    rescaled_list = [(x - min_val) * scaling_factor for x in numbers]\n    return rescaled_list"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, swap lowercase characters to uppercase and vice versa.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Returns only positive numbers from the given list.\"\"\"\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result\n\n# Testing the function\nprint(get_positive([-1, 2, -4, 5, 6])) # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Return True if the given number is prime, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    sorted_list = sorted(l)  # Sort the list\n    unique_list = []  # Create an empty list to store unique elements\n    for item in sorted_list:  # Iterate through the sorted list\n        if item not in unique_list:  # If current item is not already in the unique list, add it\n            unique_list.append(item)\n    return unique_list"}
{"task_id": "python/11", "language": "python", "completion": "def fibonacci(n):\n    \"\"\"\n    fibonacci gibt die n-te Fibonacci-Zahl zur\u00fcck.\n\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime gibt True zur\u00fcck, wenn n eine Primzahl ist.\n\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    for candidate in range(2, int(n**0.5)+1):\n        if n % candidate == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    index = 1\n    while True:\n        fib = fibonacci(index)\n        if is_prime(fib):\n            return fib\n        index += 1"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l):\n    \"\"\"\n    Checks if there is a triple of unique elements in the list that sum to zero.\n    Returns True if found, False otherwise.\n    \"\"\"\n    numbers = set(l)  # Convert list to unique set for easier checking\n    for num1 in numbers:\n        for num2 in numbers:\n            if num1 != num2 and -num1 - num2 in numbers:\n                return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(lst):\n    seen = set()  # Keep track of the numbers we've seen\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n):\n    if n <= 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d + b, a\n    return d"}
{"task_id": "python/15", "language": "python", "completion": "def median(l):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list and handle empty lists\n    if not l:\n        return None\n\n    sorted_l = sorted(l)\n\n    # Calculate the index of the middle element (or elements)\n    mid_index = len(sorted_l) // 2\n\n    # If the length of the list is even, we have to calculate the average of the two middle numbers\n    if len(sorted_l) % 2 == 0:\n        return (sorted_l[mid_index] + sorted_l[mid_index - 1]) / 2\n    else:\n        # If the length is odd, simply return the middle number\n        return sorted_l[mid_index]"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if the given string is a palindrome.\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()  # Convert the string to lowercase for consistency\n    return text == text[::-1]  # Check if the original string is equal to its reverse"}
{"task_id": "python/17", "language": "python", "completion": "import string\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'BAA'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = string.ascii_lowercase + string.ascii_uppercase[5:11]  # includes both lower and uppercase vowels\n    translated = text.translate(str.maketrans('', '', vowels))\n    return translated"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Returns True if all numbers in the list l are under the threshold value t.\"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Addiert zwei Zahlen x und y.\n\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\""}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    # Convert both strings to sets (removes duplicates and orders them)\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # Compare the two sets for equality\n    return set0 == set1"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    if not len(l1) or not len(l2):\n        return []\n    s1 = set(sorted(l1))\n    s2 = set(sorted(l2))\n    return sorted(list(s1 & s2))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Returns the largest prime factor of the input number n.\n\n    Assumes that n > 1 and is not a prime number.\n\n    Examples:\n        >>> largest_prime_factor(13195)\n        29\n        >>> largest_prime_factor(2048)\n        2\n    \"\"\"\n    if n <= 1 or n % 2 == 0:\n        raise ValueError(\"Input should be a number greater than 1 and not a prime number.\")\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    divisor = 2\n    while True:\n        if is_prime(divisor) and n % divisor == 0:\n            return divisor\n        divisor += 1"}
{"task_id": "python/24", "language": "python", "completion": ">>> print(sum_to_n(30))\n465\n>>> print(sum_to_n(100))\n5050\n>>> print(sum_to_n(5))\n15\n>>> print(sum_to_n(10))\n55\n>>> print(sum_to_n(1))\n1"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    def polynomial(x, coeffs):\n        return sum(coeff * x**i for i, coeff in enumerate(reversed(coeffs)))\n\n    if not xs:\n        return []\n    else:\n        return [2*c for c in xs[1:]] + [0] if xs[0] == 0 else [xs[1]] + derivative([c * i for c, i in zip(reversed(xs[1:]), range(1, len(xs)))] + [0])\n\n    # Test your function with the given examples\n    print(derivative([3, 1, 2, 4, 5])) # [1, 4, 12, 20]\n    print(derivative([1, 2, 3]))       # [2, 6]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n):\n    \"\"\"Calculate the n-th element of FibFib sequence.\"\"\"\n\n    def _fibfib(n, memo={}):\n        \"\"\"Recursively calculate fibfib(n) and store the result in memo for future usage\"\"\"\n        if n <= 2:\n            return 0\n        elif n not in memo:\n            memo[n] = _fibfib(n-1, memo) + _fibfib(n-2, memo) + _fibfib(n-3, memo)\n        return memo[n]\n\n    return _fibfib(n)"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Count the number of vowels in a given string. Vowels are 'a', 'e', 'i', 'o', 'u' and 'y' when it appears at the end of the word.\"\"\"\n    vowels = set('aeiouy')\n    count = 0\n\n    # Iterate through the input string and check if each character is a vowel\n    for char in s:\n        # If the character is a vowel or 'y' at the end of the string, increment the count\n        if char.lower() in vowels or (len(s) == 1 and char.lower() == 'y'):\n            count += 1\n\n    return count"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    max_count = float('-inf')\n    max_number = None\n\n    for num in lst:\n        count = lst.count(num)\n        if count > max_count and num > 0:\n            max_count = count\n            max_number = num\n\n    if max_count >= max_number:\n        return -1\n    else:\n        return max_number"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    '''\n    Given are the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal places if the sides form a valid triangle. If they do not, return -1. Three sides form a valid triangle if the sum of any two sides is greater than the third side. For example:\n\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    s = (a + b + c) / 2  # calculate the semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula for triangle area\n    if (a + b > c) and (b + c > a) and (c + a > b):  # check if the sides form a valid triangle\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    if len(q) == 0 or len(q) % 2 != 0:\n        return False\n\n    total = sum(q)\n    if total > w:\n        return False\n\n    return True"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    \"\"\"Checks whether the given number (a) is the product of 3 primes, when a <= 100.\n    Returns True if it is and False otherwise.\"\"\"\n\n    # Primality checker using trial division\n    def is_prime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a <= 3:\n        return False\n    elif a <= 9:\n        return a == 3 or a == 5 or a == 7\n    else:\n        for num in range(2, int(a**0.5)+1):\n            if is_prime(num) and is_prime(a - num):\n                if is_prime(num * (a - num)):\n                    return True\n\n        return False"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to binary format.\"\"\"\n    binary = ''\n    while decimal > 0:\n        remainder = decimal % 2\n        if remainder == 1:\n            binary += '1'\n        else:\n            binary += '0'\n        decimal //= 2\n    return 'db' + binary[::-1] + 'db'"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    grade_map = {\"> 4.0\": \"A+\", \"> 3.7\": \"A\", \"> 3.3\": \"A-\", \"> 3.0\": \"B+\", \"> 2.7\": \"B\", \"> 2.3\": \"B-\",\n                 \"> 2.0\": \"C+\", \"> 1.7\": \"C\", \"> 1.3\": \"C-\", \"> 1.0\": \"D+\", \"> 0.7\": \"D\", \"> 0.0\": \"D-\",\n                 \"= 0.0\": \"E\"}\n    result = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            key = \"> 4.0\"\n        elif gpa > 3.7:\n            key = \"> 3.7\"\n        elif gpa > 3.3:\n            key = \"> 3.3\"\n        ...\n        result.append(grade_map[key])\n\n    return result"}
{"task_id": "python/35", "language": "python", "completion": "import math\n\ndef prime_length(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n    Beispiele\n    \n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    for number in range(2, int(math.sqrt(length))+1):\n        if length % number == 0:\n            return False\n    return True"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    \"\"\"Find the sum of the digits in the binary representation of N.\n\n        Example\n        For N = 1000, the sum of digits is 1 (1*2^3 + 0*2^2 + 0*2^1 + 0*2^0 = 8 + 0 + 0 + 0 = 8), the output should be \"1\".\n        For N = 150, the sum of digits is 6 (1*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 1*2^0 = 16 + 4 + 4 + 1 = 25), the output should be \"1101\".\n        For N = 147, the sum of digits is 12 (1*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 1*2^0 + 1*2^0 = 16 + 4 + 4 + 1 = 25), the output should be \"11101\".\n\n    Variables:\n        @N Integer number\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string representing the binary number.\n     \"\"\"\n    # Convert decimal to binary and calculate the sum of digits\n    binary = bin(N)[2:]\n    total = sum([int(i) for i in binary])\n\n    # Return the binary representation of the sum\n    return bin(total)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    # Find all occurrences of 'x' and store their indexes (row & col) into a list\n    row_col = [(i, j) for i, sublist in enumerate(lst) if x in sublist for j, val in enumerate(sublist) if val == x]\n\n    # Sort the results by row indices in ascending order and column indices in descending order\n    sorted_row_col = sorted(row_col, key=lambda x: (x[0], -x[1]))\n\n    return sorted_row_col"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    sorted_lst = sorted(lst)\n    index = sorted_lst.index(sorted_lst[1])\n    if index == 0:\n        return None\n    else:\n        return sorted_lst[index - 1]"}
{"task_id": "python/39", "language": "python", "completion": "import re\n\ndef is_bored(S):\n    \"\"\"\n    You receive a string of words and your task is to count the number of boredom instances. A boredom instance is a sentence that starts with the word \"Ich\". Sentences are delimited by '.', ',', '!', or '?'.\n\n    For example:\n     >>> is_bored(\"Hello world\")\n     0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     1\n    \"\"\"\n    # Find all sentences in the given string (sentences are delimited by '.', ',', '!', or '?')\n    sentences = re.findall(r'[A-Z\u00e4\u00f6\u00fc\u00df]\\w*(?:[.,?!][\\s]*\\w*)*', S)\n\n    # Iterate through the sentences and count the bored instances (sentences starting with \"Ich\")\n    bored_count = 0\n    for sentence in sentences:\n        if sentence.lower().startswith(\"ich\"):\n            bored_count += 1\n\n    return bored_count"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2):\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\ndef skjkasdkd(lst):\n    max_prime = None\n    prime_sum = 0\n\n    for num in lst:\n        if is_prime(num) and (max_prime is None or num > max_prime):\n            max_prime = num\n\n    if max_prime is not None:\n        prime_sum = sum_of_digits(max_prime)\n\n    return prime_sum"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dct):\n    keys = [k for k in dct.keys()]  # Get all keys\n    if not keys:  # If the dictionary is empty\n        return False\n\n    consistent = all(str(key).islower() for key in keys) or all(str(key).isupper() for key in keys)\n    return consistent"}
{"task_id": "python/42", "language": "python", "completion": "import math\n\ndef closest_integer(value):\n    try:\n        num = float(value)\n        if num >= 0:\n            return max(math.floor(num), math.ceil(num - 1))\n        else:\n            return min(math.floor(num), math.ceil(num - 1))\n    except ValueError:\n        print(f\"Invalid input. Please provide a valid number.\")\n\n# Test cases\nprint(closest_integer(\"10\"))  # 10\nprint(closest_integer(\"15.3\"))  # 15\nprint(closest_integer(\"-14.5\"))  # -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = [n]\n    while n != 1:\n        if n % 2 == 1:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    \"\"\"\n    Function that takes a string of words separated by commas or spaces and returns an array of those words.\n\n    For example:\n\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by any whitespace or comma\n    return s.split(r'\\s+|,\\s*')"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x % 2 == 0:  # Check if x is even\n        even = x\n    else:\n        even = x + 1  # If x is odd, start from the next even number\n\n    for num in range(even, y+1):  # Iterate through the given range\n        if num % 2 == 0:  # Check if the current number is even\n            return num\n    return -1  # Return -1 if no even number is found within the specified range"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (sum(range(n, m+1))) // len(range(n, m+1))\n    binary = format(average, 'b')\n    return f'0b{binary}'"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    evens = 0\n    odds = 0\n    for i in range(1, n + 1):\n        number = str(i)\n        reversed_number = number[::-1]\n        if number == reversed_number:\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] != sorted_arr[i]:\n                shifted_arr = arr[:i] + arr[i+1:] + [arr[i]]\n                if shifted_arr == sorted_arr:\n                    return True\n        return False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for i in lst1 if i % 2 != 0)\n    even_count = len(lst1) - odd_count\n\n    if odd_count > len(lst2):\n        return \"NO\"\n\n    if odd_count == 0:\n        return \"YES\"\n\n    missing_odds = odd_count\n    lst2_odd_count = sum(1 for i in lst2 if i % 2 != 0)\n    extra_odds = lst2_odd_count - len(lst2)\n\n    if extra_odds > missing_odds:\n        return \"NO\"\n\n    if extra_odds == missing_odds:\n        return \"YES\"\n\n    to_move = min(missing_odds, extra_odds)\n    lst2_even_count = len(lst2) - lst2_odd_count\n\n    if even_count < to_move or (even_count == to_move and lst2_even_count < to_move):\n        return \"NO\"\n\n    return \"YES\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    palindrome = True\n\n    for char in s:\n        if char != c:\n            result += char\n        else:\n            palindrome = False\n\n    # Reverse the string and check if it's equal to the original reversed string (palindrome)\n    reversed_result = result[::-1]\n    for char in reversed_result:\n        if char != result[len(result)-1]:\n            palindrome = False\n            break\n\n    return result, palindrome"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    def dfs(i, j, water=0):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0:\n            return 0\n\n        grid[i][j] = 0\n        remaining_water = water + min(capacity, grid[i].count(1))\n        result = remaining_water + dfs(i+1, j, 0)\n        grid[i][j] = 1\n        return max(result, dfs(i, j+1, 0))\n\n    for i in range(len(grid)):\n        total_filled = 0\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                total_filled += dfs(i, j)\n    return total_filled"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        count_cons = 0\n        count_vow = 0\n        for letter in word:\n            if letter in consonants:\n                count_cons += 1\n            elif letter in vowels:\n                count_vow += 1\n\n        if count_cons == n and (count_vow > 0 or len(word) == 1):\n            result.append(word)\n\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    if len(arr) < 1 or len(arr) > 100 or 1 > k or k > len(arr):\n        raise ValueError(\"Invalid array length or index\")\n\n    return sum([num for num in arr[:k] if len(str(num)) <= 2])"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n <= 1 or (n % 2 == 0 and n > 2):\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start_a, end_a = sorted([interval1, interval2])[0]\n    start_b, end_b = sorted([interval1, interval2])[1]\n\n    if end_a < start_b:\n        return \"NO\"\n\n    intersection = max(start_a, start_b) if start_a > start_b else min(end_a, end_b)\n    length = abs(intersection - start_a + 1) if start_a <= intersection else abs(intersection - start_b + 1)\n\n    return \"YES\" if is_prime(length) and length != 0 else \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    \"\"\"Generates the first n + 1 terms of the Tribonacci sequence.\"\"\"\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        trib = [1, 3, 2]  # initialize the sequence with the first three terms\n        for _ in range(3, n + 1):\n            next_term = trib[-1] + trib[-2] + trib[-3]  # get the next term by adding the last three terms\n            trib.append(next_term)  # add the new term to the sequence\n        return trib"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Calculates the product of odd digits for positive integer n.\"\"\"\n    product = 1\n\n    # Iterate through each digit from right to left\n    for digit in str(n)[::-1]:\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n\n    return product or 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return len(stack) == 0"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    \"\"\"Function to calculate the sum of squared, ceiling numbers in a given list.\"\"\"\n    return sum([int(round(num))**2 for num in lst])"}
{"task_id": "python/61", "language": "python", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty or only contains spaces\n    if not txt or re.match(r'\\s+', txt):\n        return False\n    # Check if the last character is a letter and it's not followed by another word\n    else:\n        return txt[-1].isalpha() and not re.search('\\W+\\b', txt[-1:])"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n\n# Test cases\nprint(can_arrange([1,2,4,3,5]))  # Expected output: 3\nprint(can_arrange([1,2,3]))  # Expected output: -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    # Filter out non-integer elements and negative numbers\n    negatives = [x for x in lst if isinstance(x, int) and x < 0]\n    positives = [x for x in lst if isinstance(x, int) and x > 0]\n\n    if not negatives and not positives:\n        return None, None\n\n    # If there are no negative numbers but positive numbers exist\n    if not negatives:\n        return None, min(positives)\n\n    # If there are no positive numbers but negative numbers exist\n    if not positives:\n        return max(negatives), None\n\n    # Return the maximum of the negative numbers and the minimum of the positive numbers\n    return max(negatives), min(positives)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    \"\"\"Calculates the Brazilian Factorial\"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result *= i * special_factorial(i-1)\n        return result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    This function takes a sentence as input, returns a string containing only the words whose length is a prime number in the same order as they appear in the original sentence.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * The sentence contains only alphabetic characters.\n    \"\"\"\n\n    words_list = sentence.split()\n    result = []\n    primes = [2]\n    for num in range(3, int(len(words_list)) + 1):\n        is_prime = True\n        if num > 2:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n        if is_prime:\n            primes.append(num)\n\n    for word in words_list:\n        if len(word) in primes:\n            result.append(word)\n\n    return \" \".join(result)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    if x_denominator * n_numerator == x_numerator * n_denominator:\n        return True\n\n    common_factor = max(min(x_numerator, x_denominator), min(n_numerator, n_denominator))\n\n    if (x_numerator % common_factor != 0) or (x_denominator % common_factor != 0) or \\\n       (n_numerator % common_factor != 0) or (n_denominator % common_factor != 0):\n        return False\n\n    return True"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    def get_digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    nums = sorted(nums, key=lambda n: (get_digit_sum(n), n))\n    return nums"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    \"\"\"Function that returns the count of numbers in the array greater than 10 and whose first and last digits are odd.\"\"\"\n\n    # Initialize the counter variable\n    count = 0\n\n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10, and if the first and last digits of the number are odd\n        if (num > 10) and ((num // 10 % 2 == 1) and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9)):\n            # If so, increment the counter variable\n            count += 1\n\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(1, len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1) if planet1 in planets else None\n    index2 = planets.index(planet2) if planet2 in planets else None\n\n    if not (index1 and index2):\n        return tuple()\n\n    between_orbits = [planet for i, planet in enumerate(planets[(index1 + 1) % len(planets):index2])]\n    sorted_by_distance = sorted(between_orbits, key=lambda p: (p == 'Mercury') * 0 + (p == 'Venus') * 1 + (p == 'Earth') * 2 + (p == 'Mars') * 3)\n    return tuple(sorted_by_distance)"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(num):\n    \"\"\"Function to determine whether a given number is prime\"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Function that returns the value of x when n is a prime number, and the value of y otherwise\"\"\"\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    result = sum([x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int)])\n    return result * 2 if len(result) > 0 else 0"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strengths = []\n    for extension in extensions:\n        count_capital = sum([1 for letter in extension if letter.isupper()])\n        count_small = sum([1 for letter in extension if letter.islower()])\n        strength = count_capital - count_small\n        strengths.append((strength, extension))\n    strengths.sort(reverse=True)  # Sort the list in descending order based on strength\n    strongest_extension = strengths[0][1]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    \"\"\"Checks if the second string is a cyclic pattern in the first string.\"\"\"\n    # Get the length of the second string (b)\n    n = len(b)\n\n    # Iterate through each possible rotation of b\n    for i in range(len(a) - n + 1):\n        # Check if substring matches b or any rotation of it\n        if a[i:i+n] == b or a[i:i+n][::-1] == b:\n            return True\n\n    # If no match found, return False\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix',\n             'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix']\n    if 1 <= number <= 3:\n        return roman[number]\n\n    index = 4\n    nums = [0, 0, 0, 0, 0, 0, 0, 0]\n\n    while number > 0:\n        if number - index >= 0:\n            number -= index\n            nums[index//10] += 1\n            index = 1\n        else:\n            index //= 10\n\n    for i in range(len(nums)):\n        for j in range(nums[i]):\n            print(roman[i*10 + (10 if i == 3 else 1)])"}
{"task_id": "python/76", "language": "python", "completion": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Returns True if the three sides form a right-angled triangle, otherwise False.\n    A right-angled triangle is a triangle in which one angle is a right angle (90 degrees). For example:\n\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if math.isqrt(a**2 + b**2)**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # To change the case of a character, we use the upper() and lower() methods in Python\n            result += (char.upper() if char.islower() else char.lower())\n        else:\n            result += char\n    return result"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', returns its md5-Hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n\n    if not text:\n        return None\n\n    hashed = hashlib.md5(text.encode()).hexdigest()\n    return hashed"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    result = []\n    if a > b:\n        print(\"Error: a must be less than or equal to b.\")\n        return result\n\n    for i in range(min(a,b), max(a,b) + 1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return result"}

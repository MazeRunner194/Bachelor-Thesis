{"task_id": "java/0", "language": "java", "completion": "import java.util.List;\n\npublic class BelowZero {\n    public static Boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\nimport com.google.common.tuple.Pair; // Assuming you have Guava library for Tuple\n\npublic class SumProduct {\n\n    public static Pair<Integer, Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        long product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Pair.create(sum, product);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> emptyList = new ArrayList<>();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4);\n\n        Pair<Integer, Integer> resultEmpty = sumProduct(emptyList);\n        System.out.println(\"For an empty list: (\" + resultEmpty.getLeft() + \", \" + resultEmpty.getRight() + \")\");\n\n        Pair<Integer, Integer> resultNumbers = sumProduct(numbers);\n        System.out.println(\"For the list [1, 2, 3, 4]: (\" + resultNumbers.getLeft() + \", \" + resultNumbers.getRight() + \")\");\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "import java.util.Scanner;\n\npublic class StringXor {\n    /**\n     *  Perform a binary XOR-operation on two given strings and return the result as a string.\n     *  Both strings must be of the same length.\n     */\n    public static String stringXor(String a, String b) {\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Both input strings must have the same length.\");\n        }\n\n        char[] result = new char[a.length()];\n        for (int i = 0; i < a.length(); i++) {\n            result[i] = (char) (a.charAt(i) ^ b.charAt(i));\n        }\n        return String.valueOf(result);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter first string: \");\n        String a = scanner.nextLine();\n        System.out.print(\"Enter second string: \");\n        String b = scanner.nextLine();\n        String result = stringXor(a, b);\n        System.out.println(\"The XOR result is: \" + result);\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        Comparator<String> comparator = Comparator.comparing(String::length).reversed();\n        return Collections.max(strings, comparator);\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "import java.util.Scanner;\n\npublic class GreatestCommonDivisor {\n\n public static void main(String[] args) {\n Scanner sc = new Scanner(System.in);\n System.out.print(\"Enter two numbers separated by space: \");\n int a = sc.nextInt();\n int b = sc.nextInt();\n\n if (a > 0 && b > 0) {\n int gcd = greatestCommonDivisor(Math.abs(a), Math.abs(b));\n System.out.println(\"The GCD of \" + a + \" and \" + b + \" is: \" + gcd);\n } else {\n System.out.println(\"Please enter two positive numbers.\");\n }\n sc.close();\n }\n\n public static int greatestCommonDivisor(int a, int b) {\n if (b == 0) {\n return a;\n }\n return greatestCommonDivisor(b, a % b);\n }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\npublic class SortNumbers {\n    public static void main(String[] args) {\n        String numbers = \"three one five\"; // User input\n        List<Integer> numList = new ArrayList<>();\n\n        // Convert string to array of words\n        String[] words = numbers.split(\" \");\n\n        // Initialize integer list\n        for (String word : words) {\n            numList.add(Integer.parseInt(word));\n        }\n\n        // Sort the list\n        Collections.sort(numList);\n\n        // Convert sorted list back to string and print it out\n        String sortedNumbers = \"\";\n        for (int number : numList) {\n            sortedNumbers += number + \" \";\n        }\n        System.out.println(sortedNumbers.trim());\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.Arrays;\n\npublic class RescaleToUnit {\n    /**\n     * This method scales the given list so that its smallest value is 0 and largest value is 1.\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must have at least two elements.\");\n        }\n\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n\n        double range = max - min;\n        for (int i = 0; i < numbers.size(); ++i) {\n            double scaledNumber = (numbers.get(i) - min) / range;\n            numbers.set(i, scaledNumber);\n        }\n\n        return numbers;\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "import java.util.StringJoiner;\nimport java.util.stream.Collectors;\n\npublic class FlipCase {\n    public static String flipCase(String string) {\n        return new StringJoiner(\"\")\n                .addAll(string.chars()\n                        .mapToObj(c -> (char) Character.toUpperCase(c))\n                        .filter(c -> c != Character.toUpperCase(c)) // To avoid changing the case of special characters like $, %, etc.\n                        .collect(Collectors.toList()))\n                .addAll(string.chars()\n                        .mapToObj(c -> (char) Character.toLowerCase(c))\n                        .filter(c -> c != Character.toLowerCase(c)) // To avoid changing the case of special characters like $, %, etc.\n                        .collect(Collectors.toList()))\n                .merge(true)\n                .toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.*;\n\npublic class GetPositive {\n    public static List<Integer> getPositive(List<Integer> list) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n\n        for (int number : list) {\n            if (number > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n\n        return positiveNumbers;\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false; // not prime if even and greater than 2\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\nclass Unique {\n    public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l); // This will remove duplicates and convert the list to a set\n        return new ArrayList<>(set); // Convert the set back to a list\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.math.*;\n\npublic class PrimeFib {\n    public static void main(String[] args) {\n        System.out.println(primeFib(1));  // Test case\n        System.out.println(primeFib(2));  // Test case\n        System.out.println(primeFib(3));  // Test case\n        System.out.println(primeFib(4));  // Test case\n        System.out.println(primeFib(5));  // Test case\n    }\n\n    public static int primeFib(int n) {\n        BigInteger[] fib = {BigInteger.ZERO, BigInteger.ONE};\n        BigInteger max = BigInteger.ZERO;\n\n        while (fib.length < n) {\n            BigInteger nextFib = fib[fib.length - 1].add(fib[fib.length - 2]);\n            fib = new BigInteger[fib.length + 1];\n            fib[fib.length - 1] = nextFib;\n            max = nextFib;\n        }\n\n        for (BigInteger candidate = BigInteger.TWO; candidate.compareTo(max) <= 0; candidate = candidate.add(BigInteger.ONE)) {\n            if (isPrime(candidate) && isFibonacci(candidate)) {\n                return candidate.intValue();\n            }\n        }\n\n        // If no such number was found, return -1\n        return -1;\n    }\n\n    private static boolean isPrime(BigInteger n) {\n        if (n.equals(BigInteger.ONE)) {\n            return false;\n        }\n        for (BigInteger i = BigInteger.TWO; i.sqrt().compareTo(n) <= 1; i = i.add(BigInteger.ONE)) {\n            if (n.mod(i).equals(BigInteger.ZERO)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isFibonacci(BigInteger n) {\n        BigInteger a = BigInteger.ZERO;\n        BigInteger b = BigInteger.ONE;\n        while (b.compareTo(n) <= 0) {\n            BigInteger nextA = a.add(b);\n            a = b;\n            b = nextA;\n            if (b.equals(n)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.*;\n\npublic class TripleSumToZero {\n    /**\n     * Check if there are three distinct integers in the list that sum up to zero\n     * @param numbers A List of integers\n     * @return True if there exist three distinct integers that sum up to zero, False otherwise\n     */\n    public static boolean triplesSumToZero(List<Integer> numbers) {\n        // Sort the input list for easier traversal\n        Collections.sort(numbers);\n\n        // Iterate through all pairs of elements in the sorted list\n        for (int i = 0; i < numbers.size() - 1; ++i) {\n            // Find the complement to each number in the remaining elements of the list\n            int target = -numbers.get(i);\n            int left = i + 1, right = numbers.size() - 1;\n            while (left < right) {\n                if (numbers.get(left) + numbers.get(right) == target) {\n                    return true;\n                } else if (numbers.get(left) + numbers.get(right) < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\npublic class PairsSumToZero {\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 3, 5, 0);\n        System.out.println(pairsSumToZero(list1)); // false\n\n        List<Integer> list2 = Arrays.asList(1, 3, -2, 1);\n        System.out.println(pairsSumToZero(list2)); // false\n\n        List<Integer> list3 = Arrays.asList(1, 2, 3, 7);\n        System.out.println(pairsSumToZero(list3)); // false\n\n        List<Integer> list4 = Arrays.asList(2, 4, -5, 3, 5, 7);\n        System.out.println(pairsSumToZero(list4)); // true\n\n        List<Integer> list5 = Arrays.asList(1);\n        System.out.println(pairsSumToZero(list5)); // false\n    }\n\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> numbers = new HashSet<>(l);\n        for (int num : numbers) {\n            if (numbers.contains(-num)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.util.Arrays;\n\npublic class Fib4 {\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // prints 4\n        System.out.println(fib4(6)); // prints 8\n        System.out.println(fib4(7)); // prints 14\n    }\n\n    public static int fib4(int n) {\n        if (n <= 3) return 0;\n\n        int[] cache = new int[n];\n        Arrays.fill(cache, -1);\n\n        for (int i = 4; i <= n; ++i) {\n            cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3] + cache[i - 4];\n        }\n\n        return cache[n];\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\npublic class Median {\n    /**\n     * Returns the median of the elements in the given list.\n     */\n    public static Number median(List<Integer> l) {\n        // Sort the list in ascending order\n        Collections.sort(l);\n\n        // Get the size of the list\n        int n = l.size();\n\n        // If there's an odd number of elements, return the middle element\n        if (n % 2 == 1) {\n            return l.get((n - 1) / 2);\n        }\n\n        // Otherwise, return the average of the two middle elements\n        int mid = n / 2;\n        double median = (double)(l.get(mid - 1) + l.get(mid)) / 2.0;\n        return BigDecimal.valueOf(median).setScale(2, RoundingMode.HALF_UP);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n\n        System.out.println(\"The median of \" + list1 + \" is \" + median(list1));\n        System.out.println(\"The median of \" + list2 + \" is \" + median(list2));\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "import java.util.*;\n\npublic class IsPalindrome {\n\n    /**\n     * Checks if the given string is a palindrome (ignoring case).\n     * Example:\n     * >>> is_palindrome(\"\")\n     * true\n     * >>> is_palindrome(\"aba\")\n     * true\n     * >>> is_palindrome(\"AAAAA\")\n     * true\n     * >>> is_palindrome(\"zbcd\")\n     * false\n     */\n    public static boolean isPalindrome(String text) {\n        String normalizedText = text.toLowerCase().replaceAll(\"[^a-z0-9]\", \"\"); // Remove spaces and special characters, and convert to lower case\n        int leftIndex = 0;\n        int rightIndex = normalizedText.length() - 1;\n\n        while (leftIndex < rightIndex) {\n            if (normalizedText.charAt(leftIndex++) != normalizedText.charAt(rightIndex--)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.util.*;\n\npublic class RemoveVowels {\n    public static void main(String[] args) {\n        String testCases[] = {\"\", \"abcdef\\nghijklm\", \"abcdef\", \"aaaaa\", \"aaBAA\", \"zbcd\"};\n        for (String s : testCases) {\n            System.out.printf(\"remove_vowels('%s') -> '%s'\\n\", s, removeVowels(s));\n        }\n    }\n\n    public static String removeVowels(String text) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.util.List;\n\nclass BelowThreshold {\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int number : l) {\n            if (number >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "import java.io.*; // Not needed for this code since it doesn't use any I/O operations\nimport java.lang.*; // Automatically imported in most Java projects, contains basic classes like Object, System, etc.\nimport java.util.*; // Contains useful data structures and functions related to collections, maps, and more\nimport java.math.*; // Used for BigInteger, BigDecimal, and other mathematical operations with large numbers\n\nclass Add {\n    /**\n     * This is a JavaDoc comment that describes the class.\n     */\n\n    /**\n     * This is a method called add(int x, int y) which takes in two integers as parameters.\n     * It returns an integer representing their sum.\n     * The \">>>\" at the start of the line is a pseudo-terminal, it's not necessary but often used for better readability.\n     */\n    public static int add(int x, int y) {\n        // Add x and y together and store the result in a variable called sum\n        int sum = x + y;\n        // Return the sum to the calling code\n        return sum;\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.util.*;\n\nclass SameChars {\n    public static Boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "public class Fib {\n    /**\n     * Returns the n-th Fibonacci number.\n     */\n    public static int fib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Argument must be a positive integer.\");\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int num1 = 0;\n        int num2 = 1;\n        for (int i = 3; i <= n; i++) {\n            int temp = num1 + num2;\n            num1 = num2;\n            num2 = temp;\n        }\n        return num2;\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\npublic class Common {\n    public static <T extends Number> List<T> common(List<Integer> l1, List<Number> l2) {\n        return l2.stream()\n                .filter(l1::contains)\n                .map(x -> (T) x) // Cast to the appropriate Number subclass (Integer in this case)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "import java.util.*;\n\npublic class LargestPrimeFactor {\n    private static boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static int largestPrimeFactor(int n) {\n        if (n <= 1) throw new IllegalArgumentException(\"Input number must be greater than 1.\");\n\n        for (int i = 2; i <= n / 2 + 1; i++) {\n            if (n % i == 0 && isPrime(i)) return i;\n        }\n        return -1; // Return -1 if the number is a prime itself\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "/**\n * sum_to_n is a function that calculates the sum of numbers from 1 to n.\n * @param n The number up to which the sum should be calculated.\n * @return The sum of numbers from 1 to n.\n */\npublic static int sumToN(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.ArrayList;\n\npublic class Derivative {\n\n public static List<Integer> derivative(List<Integer> xs) {\n if (xs.size() == 1) { // If the polynomial is a constant, return an empty list for its derivative\n return new ArrayList<>();\n }\n\n ArrayList<Integer> result = new ArrayList<>();\n\n for (int i = 1; i < xs.size(); i++) {\n int coefficient = xs.get(i);\n int exponent = i;\n result.add(coefficient * exponent);\n }\n\n return result;\n }\n}"}
{"task_id": "java/26", "language": "java", "completion": "public static int fibfib(int n) {\n    if (n <= 2) return n == 0 ? 0 : 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}"}
{"task_id": "java/27", "language": "java", "completion": "import java.util.Locale;\n\npublic class VowelsCount {\n    public static int vowelsCount(String s) {\n        int count = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n\n            if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u') || (c == 'y' && i == s.length() - 1)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        // Initialize variables\n        int maxFrequency = 0;\n        int maxNumber = -1;\n\n        // Create a Map to count frequency of each number in the list\n        Map<Integer, Integer> freqMap = new HashMap<>();\n\n        // Iterate over the given list and update the frequency map\n        for (int num : lst) {\n            if (!freqMap.containsKey(num)) {\n                freqMap.put(num, 1);\n            } else {\n                freqMap.put(num, freqMap.get(num) + 1);\n            }\n        }\n\n        // Iterate over the frequency map and find the maximum frequency\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            int number = entry.getKey();\n            int frequency = entry.getValue();\n\n            if (frequency >= number && frequency > maxFrequency) {\n                maxFrequency = frequency;\n                maxNumber = number;\n            }\n        }\n\n        // If no such number is found, return -1\n        if (maxNumber == -1) {\n            return -1;\n        }\n\n        // Return the maximum number found\n        return maxNumber;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Calculates the area of a triangle given the lengths of its sides.\n     * Returns -1 if the input is invalid (the sum of any two sides must be greater than the third).\n     */\n    public static double triangleArea(int a, int b, int c) {\n        // Check if the input is valid\n        if ((a + Math.max(b, c)) <= Math.min(b + c, a + b)) {\n            return -1;\n        }\n\n        // Calculate the semi-perimeter (half of the perimeter) and use Heron's formula to calculate the area\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to 2 decimal places\n        return Math.round(area * 100.0) / 100.0;\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "public static boolean willItFly(List<Integer> q, int w) {\n    // Check if the list is palindrome (symmetric around the middle)\n    boolean isPalindrome = true;\n    for (int i = 0, j = q.size() - 1; i < j; ++i, --j) {\n        if (q.get(i) != q.get(j)) {\n            isPalindrome = false;\n            break;\n        }\n    }\n\n    // Calculate the sum of elements and check if it's smaller than or equal to the given weight\n    int sum = q.stream().mapToInt(Integer::intValue).sum();\n    return isPalindrome && sum <= w;\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.*;\n\nclass IsMultiplyPrime {\n\n public static void main(String[] args) {\n System.out.println(isMultiplyPrime(30)); // true\n }\n\n public static Boolean isMultiplyPrime(int a) {\n if (a < 9 || a % 2 == 0) return false;\n boolean[] prime = new boolean[a + 1];\n Arrays.fill(prime, true);\n prime[0] = prime[1] = false;\n\n for (int i = 4; i * i <= a; i += 2) {\n if (prime[i]) {\n for (int j = i * i; j <= a; j += i << 1) {\n prime[j] = false;\n }\n }\n }\n\n int count = 0;\n for (int i = 3; i < prime.length; i += 2) {\n if (prime[i]) {\n count++;\n if (count > 2 || a % i != 0) continue;\n if (prime[(int) Math.sqrt(a / i)] && a % i * i == a) return true;\n count = 0;\n }\n }\n\n return false;\n }\n}"}
{"task_id": "java/32", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n    StringBuilder bin = new StringBuilder(\"db\");\n\n    while (decimal > 0) {\n        bin.append((decimal & 1)); // get last digit of the number (remainder when divided by 2)\n        decimal >>= 1; // shift the number right by one position\n    }\n\n    bin.append(\"db\"); // add trailing 'db'\n    bin = new StringBuilder(new StringBuffer(bin.toString()).reverse()); // reverse the string (binary is read from left to right)\n\n    return bin.toString();\n}"}
{"task_id": "java/33", "language": "java", "completion": "import java.util.Scanner;\n\nclass IsHappy {\n\n public static Boolean isHappy(String s) {\n if (s == null || s.length() < 3) return false;\n\n Map<String, Integer> map = new HashMap<>();\n for (int i = 0; i <= s.length() - 3; i += 3) {\n String group = s.substring(i, i + 3);\n if (map.containsKey(group)) return false;\n else map.put(group, 1);\n }\n return true;\n }\n\n public static void main(String[] args) {\n Scanner scanner = new Scanner(System.in);\n String input = scanner.nextLine();\n System.out.println(isHappy(input));\n }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.*;\n\npublic class NumericalLetterGrade {\n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        System.out.println(numericalLetterGrade(grades));\n    }\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        Map<Double, String> gradeMap = new HashMap<>();\n        gradeMap.put(4.0, \"A+\");\n        gradeMap.put(3.7, \"A\");\n        gradeMap.put(3.3, \"A-\");\n        gradeMap.put(3.0, \"B+\");\n        gradeMap.put(2.7, \"B\");\n        gradeMap.put(2.3, \"B-\");\n        gradeMap.put(2.0, \"C+\");\n        gradeMap.put(1.7, \"C\");\n        gradeMap.put(1.3, \"C-\");\n        gradeMap.put(1.0, \"D+\");\n        gradeMap.put(0.7, \"D\");\n        gradeMap.put(0.0, \"D-\");\n        gradeMap.put(0.0, \"E\");\n\n        List<String> result = new ArrayList<>();\n\n        for (Number num : grades) {\n            double gpa = num.doubleValue();\n\n            if (gpa < 0.0) throw new IllegalArgumentException(\"Invalid GPA.\");\n\n            String grade = gradeMap.floorEntry(gpa).getValue();\n            result.add(grade);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "public static Boolean primeLength(String string) {\n    int len = string.length();\n    if (len <= 1) return false; // lengths 0 and 1 are not prime numbers (neither is prime length)\n\n    for (int i = 2; i * i <= len; i++) {\n        if (len % i == 0) return false; // if the length can be divided exactly, it's not a prime number\n    }\n\n    return true; // otherwise, it is a prime length\n}"}
{"task_id": "java/36", "language": "java", "completion": "public static String solve(int n) {\n    StringBuilder binary = new StringBuilder();\n\n    while (n > 0) {\n        // bitwise AND operator & extracts the least significant bit\n        int remainder = n % 2;\n        // append the remainder to binary string builder\n        binary.append(remainder);\n        // right shift the number by 1 to get the next least significant bit\n        n >>= 1;\n    }\n\n    return binary.reverse().toString();\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n    public static void main(String[] args) {\n        List<Object> lst1 = Arrays.asList(\n                Arrays.asList(1, 2, 3, 4, 5, 6),\n                Arrays.asList(1, 2, 3, 4, 1, 6),\n                Arrays.asList(1, 2, 3, 4, 5, 1)\n        );\n        System.out.println(getRow(lst1, 1));\n\n        List<Object> lst2 = new ArrayList<>();\n        List<Object> sublist = Arrays.asList(new Integer[]{});\n        lst2.add(sublist);\n        lst2.add(Arrays.asList(new Integer[]{1}));\n        lst2.add(Arrays.asList(Arrays.asList(1, 2, 3)));\n        System.out.println(getRow(lst2, 3));\n    }\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Map<String, Integer>> result = new ArrayList<>();\n\n        // Iterate through the main list and find all sublists containing the given value\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof List<?>) {\n                List<?> sublist = (List<?>) lst.get(i);\n                int count = 0;\n\n                // Check each element of the sublist to see if it matches the given value\n                for (Object obj : sublist) {\n                    if (obj instanceof Number && ((Number) obj).intValue() == x) {\n                        count++;\n                    }\n                }\n\n                // If the count is not zero, add a map with the indices to the result list\n                if (count > 0) {\n                    Map<String, Integer> map = new HashMap<>();\n                    map.put(\"row\", i);\n                    map.put(\"column\", count - 1);\n                    result.add(map);\n                }\n            }\n        }\n\n        // Sort the result list according to the specifications and return it\n        Collections.sort(result, new Comparator<Map<String, Integer>>() {\n            @Override\n            public int compare(Map<String, Integer> o1, Map<String, Integer> o2) {\n                int compareRows = o1.get(\"row\").compareTo(o2.get(\"row\"));\n                if (compareRows == 0) {\n                    return -o1.get(\"column\").compareTo(o2.get(\"column\"));\n                } else {\n                    return compareRows;\n                }\n            }\n        });\n\n        return result;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\npublic class NextSmallest {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(nextSmallest(list)); // Output: 2\n\n        List<Integer> list2 = Arrays.asList(5, 1, 4, 3, 2);\n        System.out.println(nextSmallest(list2)); // Output: null\n\n        List<Integer> list3 = new ArrayList<>();\n        System.out.println(nextSmallest(list3)); // Output: null\n\n        List<Integer> list4 = Arrays.asList(1, 1);\n        System.out.println(nextSmallest(list4)); // Output: null\n    }\n\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) return null;\n\n        SortedSet<Integer> sorted = new TreeSet<>(lst);\n        return sorted.first() != lst.get(0) ? sorted.first() : sorted.stream().skip(1).findFirst().orElse(null);\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "import java.util.*;\n\npublic class IsBored {\n\n public static int isBored(String s) {\n String[] arr = s.split(\"[.!?]+\"); // Split string by sentence delimiters\n int count = 0;\n for (int i = 0; i < arr.length; i++) {\n if (!arr[i].isEmpty() && arr[i].startsWith(\"Ich\")) {\n count++;\n }\n }\n return count;\n }\n\n public static void main(String[] args) {\n String test1 = \"Hello world\";\n System.out.println(isBored(test1)); // 0\n String test2 = \"The sky is blue. The sun is shining. I love this weather\";\n System.out.println(isBored(test2)); // 1\n }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.*;\n\npublic class Skjkasdkd {\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(skjkasdkd(lst));\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        if (lst.isEmpty()) return -1;\n\n        int max = Collections.max(lst);\n        if (!isPrime(max)) return -1; // if the number is not prime, return error or -1\n\n        int sumOfDigits = 0;\n        while (max > 0) {\n            sumOfDigits += max % 10;\n            max /= 10;\n        }\n        return sumOfDigits;\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1) return false; // numbers less than or equal to 1 are not prime\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.*;\n\nclass CheckDictCase {\n    /**\n     * Check if all keys in a given dictionary are either all in lower case or all in upper case\n     */\n    public static Boolean checkDictCase(Map<String, ?> dict) {\n        Set<String> keys = dict.keySet();\n        Character firstKeyChar;\n\n        // If the dictionary is empty, return false\n        if (keys.isEmpty()) {\n            return false;\n        }\n\n        // Get the character of the first key to check if all keys are in the same case\n        firstKeyChar = keys.iterator().next().charAt(0);\n\n        for (String key : keys) {\n            char currentKeyChar = key.charAt(0);\n\n            // If current key is not in the same case as the first key, return false\n            if ((Character.toLowerCase(firstKeyChar) != Character.toLowerCase(currentKeyChar)) &&\n                (Character.toUpperCase(firstKeyChar) != Character.toUpperCase(currentKeyChar))) {\n                return false;\n            }\n        }\n\n        // If all keys are in the same case, return true\n        return true;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class ClosestInteger {\n    public static int closestInteger(String value) {\n        BigDecimal bdValue = new BigDecimal(value);\n        double doubleValue = bdValue.doubleValue();\n        long longValue = Math.round(doubleValue);\n\n        if (Math.abs(longValue - doubleValue) == Math.abs((longValue + 1) - doubleValue)) {\n            return (doubleValue > 0) ? (longValue + 1) : longValue - 1;\n        }\n        return longValue;\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.*;\n\npublic class MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> stack = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            stack.add(i);\n        }\n\n        int evenCount = 0, oddCount = 0;\n\n        if (n % 2 == 1) {\n            oddCount++;\n        } else {\n            evenCount++;\n        }\n\n        for (int i = n; i > 1; i--) {\n            int nextStackIndex = (oddCount + 1) % 2 * (evenCount + 1);\n            if (nextStackIndex >= stack.size()) {\n                break;\n            }\n            stack.set(i, stack.get(i) - nextStackIndex);\n            stack.add(nextStackIndex);\n            if (oddCount++ == 0) {\n                evenCount--;\n            }\n        }\n        return stack;\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.List;\n\npublic class WordsString {\n\n public static List<Object> wordsString(String s) {\n return Arrays.asList(s.split(\"\\\\s*,\\\\s*|\\\\s+\"));\n }\n}"}
{"task_id": "java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the largest even number within the range [x, y]. If there is no such number, the function should return -1.\n     *\n     * For example:\n     *\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     */\n    public static int chooseNum(int x, int y) {\n        if (x % 2 == 0 && y % 2 == 0) { // both are even\n            return (y + 1) / 2 * 2;\n        } else if (x % 2 != 0 && y % 2 == 0) { // x is odd, y is even\n            return y;\n        } else if (x % 2 == 0 && y % 2 != 0) { // x is even, y is odd\n            return (x / 2) * 2;\n        } else { // both are odd\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(chooseNum(12, 15)); // should print 14\n        System.out.println(chooseNum(13, 12)); // should print -1\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "public static String roundedAvg(int n, int m) {\n    if (n > m) return \"-1\";\n\n    long sum = 0;\n    for (int i = n; i <= m; ++i) {\n        sum += i;\n    }\n\n    long average = Math.toIntExact(sum / (m - n + 1)); // Rounding is automatic because of the division operation\n    return Integer.toString(average, 2); // Convert the integer to binary\n}"}
{"task_id": "java/47", "language": "java", "completion": "public static List<Integer> f(int n) {\n    List<Integer> result = new ArrayList<>(n);\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            BigInteger factorial = BigInteger.ONE;\n            for (BigInteger j = BigInteger.valueOf(2); j.compareTo(BigInteger.valueOf(i)) <= 0; j = j.add(BigInteger.ONE)) {\n                factorial = factorial.multiply(BigInteger.valueOf(j));\n            }\n            result.add(factorial.intValue());\n        } else {\n            BigInteger sum = BigInteger.ZERO;\n            for (BigInteger j = BigInteger.ONE; j.compareTo(BigInteger.valueOf(i)) <= 0; j = j.add(BigInteger.ONE)) {\n                sum = sum.add(BigInteger.ONE);\n            }\n            result.add(sum.intValue());\n        }\n    }\n    return result;\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\npublic class EvenOddPalindrome {\n\n public static List<Integer> evenOddPalindrome(int n) {\n if (n <= 0 || n > Math.pow(10, 3)) {\n throw new IllegalArgumentException(\"Argument must be in the range [1, 10^3]\");\n }\n\n Map<Boolean, Integer> count = new HashMap<>();\n for (int i = 1; i <= n; i++) {\n String numberStr = String.valueOf(i);\n if (isPalindrome(numberStr)) {\n count.merge(isEven(numberStr), 1, Integer::sum);\n }\n }\n return new ArrayList<>(count.values());\n }\n\n private static boolean isPalindrome(String number) {\n int start = 0;\n int end = number.length() - 1;\n while (start < end) {\n if (number.charAt(start) != number.charAt(end)) {\n return false;\n }\n start++;\n end--;\n }\n return true;\n }\n\n private static boolean isEven(String numberStr) {\n int num = Integer.parseInt(numberStr);\n return num % 2 == 0;\n }\n}"}
{"task_id": "java/49", "language": "java", "completion": "public static Boolean moveOneBall(List<Integer> arr) {\n    if (arr.size() == 0) return true;\n\n    int maxIndex = 0;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr.get(maxIndex) > arr.get(i)) {\n            maxIndex = i;\n        }\n    }\n\n    int currentMax = arr.get(maxIndex);\n    for (int i = maxIndex; i >= 1; --i) {\n        if (arr.get(i - 1) < currentMax) {\n            arr.set(i, arr.get(i - 1));\n            arr.set(i - 1, currentMax);\n            currentMax = rotateRight(arr);\n        } else {\n            break;\n        }\n    }\n\n    return currentMax == arr.get(0);\n}\n\nprivate static int rotateRight(List<Integer> arr) {\n    int lastElement = arr.remove(arr.size() - 1);\n    arr.add(0, lastElement);\n    return lastElement;\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.*;\n\npublic class Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Remove duplicates from lists\n        Set<Integer> set1 = new HashSet<>(lst1);\n        List<Integer> list1 = new ArrayList<>(set1);\n        Set<Integer> set2 = new HashSet<>(lst2);\n        List<Integer> list2 = new ArrayList<>(set2);\n\n        for (int num : list1) {\n            if (num % 2 != 0) {\n                // Find an odd number from lst2 to swap with the current odd number in lst1\n                boolean found = false;\n                for (int otherNum : list2) {\n                    if (otherNum % 2 != 0 && otherNum != num) {\n                        Collections.swap(list1, list1.indexOf(num), list2.indexOf(otherNum));\n                        Collections.swap(list2, list2.indexOf(otherNum), list1.indexOf(num));\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (!found) {\n                    return \"NO\";\n                }\n            }\n        }\n\n        return \"YES\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\npublic class ReverseDelete {\n\n public static List<Object> reverseDelete(String s, String c) {\n // Initialize an empty character array to store the result\n char[] result = new char[s.length()];\n int k = 0;\n\n // Iterate through the string s and compare each character with c\n for (int i = 0; i < s.length(); i++) {\n if (!s.charAt(i).equals(c.charAt(0))) {\n result[k++] = s.charAt(i);\n }\n // If the first character of c is found in s, move to next character in c\n if (i == s.length() - 1 || !s.charAt(i + 1).equals(c.charAt(0))) {\n c = c.substring(1);\n }\n }\n\n // Convert the result array back to a string\n String strResult = new String(result);\n\n // Check if the resulting string is a palindrome\n boolean isPalindrom = true;\n for (int i = 0; i < strResult.length() / 2; i++) {\n if (strResult.charAt(i) != strResult.charAt(strResult.length() - 1 - i)) {\n isPalindrom = false;\n break;\n }\n }\n\n // Return the resulting string and whether it's a palindrome or not\n return Arrays.asList(strResult, isPalindrom);\n }\n\n public static void main(String[] args) {\n List<Object> result = reverseDelete(\"abcde\", \"ae\");\n System.out.println(result); // ['bcd',false]\n\n result = reverseDelete(\"abcdef\", \"b\");\n System.out.println(result); // ['acdef',false]\n\n result = reverseDelete(\"abcdedcba\", \"ab\");\n System.out.println(result); // ['cdedc',true]\n }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.*;\n\npublic class MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int steps = 0;\n\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < Math.min(cols - i, capacity); ++j) {\n                if (grid.get(i).get(j) == 1) {\n                    steps += Math.min(capacity, grid.get(i).subList(j, cols - i).stream().filter(n -> n == 1).mapToInt(Integer::intValue).sum()) / capacity;\n                    for (int k = j; k < cols - i + 1; ++k)\n                        if (grid.get(i).get(k) == 1)\n                            grid.get(i).set(k, 0);\n                }\n                if (i < rows - 1 && grid.get(i + 1).stream().filter(n -> n == 1).count() > 0)\n                    break;\n            }\n        }\n\n        return steps;\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n    // Helper method to check if a character is a vowel\n    private static boolean isVowel(char c) {\n        return \"aeiouAEIOU\".contains(String.valueOf(c));\n    }\n\n    public static List<Object> selectWords(String s, int n) {\n        // Initialize an empty list to store the result\n        List<Object> words = new ArrayList<>();\n\n        // Iterate through the input string s\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != ' ') continue; // Skip over space characters\n\n            // Initialize a word as an empty StringBuilder to store the current word being built\n            StringBuilder word = new StringBuilder();\n\n            // Iterate through the characters of the current word, starting from the current index i\n            for (int j = i + 1; j < s.length() && ++word.length() <= n; j++) {\n                char c = s.charAt(j);\n\n                // If the current character is not a vowel, add it to the word being built\n                if (!isVowel(c)) {\n                    word.append(c);\n                } else {\n                    // If the current character is a vowel and the length of the current word matches n, add it to the result list\n                    if (word.length() == n) {\n                        words.add(word.toString());\n                        i = j - 1; // Go back one character because we've already processed the next space character\n                        break;\n                    }\n                }\n            }\n        }\n\n        return words;\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\n\npublic class Maximum {\n\n public static List<Integer> maximum(List<Integer> arr, int k) {\n\n // Create a PriorityQueue to store the k largest elements\n PriorityQueue<Integer> maxHeap = new PriorityQueue<>((o1, o2) -> o2 - o1);\n\n // Iterate over the array and add its first k elements to the heap\n for (int i = 0; i < Math.min(arr.size(), k); i++) {\n maxHeap.add(arr.get(i));\n }\n\n // Create an ArrayList to store the final result\n List<Integer> result = new ArrayList<>();\n\n // Iterate over the remaining elements and add them to the result if they are larger than the smallest element in the heap\n for (int i = Math.min(arr.size(), k); i < arr.size(); i++) {\n if (maxHeap.peek() < arr.get(i)) {\n maxHeap.poll(); // Remove the smallest element from the heap\n maxHeap.add(arr.get(i)); // Add the current element to the heap\n }\n }\n\n // Add all the elements in the heap to the result\n while (!maxHeap.isEmpty()) {\n result.add(maxHeap.poll());\n }\n\n return result;\n }\n}"}
{"task_id": "java/55", "language": "java", "completion": "public static int addElements(int[] arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < Math.min(arr.length, k); i++) {\n        if (arr[i] <= 99 || arr[i] >= 1000) { // ensure the number has at most two digits\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\npublic class Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Ensure start is less than or equal to end for each interval\n        if (interval1.get(0) > interval1.get(1) || interval2.get(0) > interval2.get(1)) {\n            throw new IllegalArgumentException(\"Intervals must have a start less than or equal to the end.\");\n        }\n\n        // Find the intersection of the intervals, if any\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        // If there is no overlap (i.e., start > end) return \"NO\"\n        if (start > end) {\n            return \"NO\";\n        }\n\n        // Return \"YES\" if the length of the intersection is a prime number\n        int length = end - start + 1;\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    /**\n     * Checks if a number is a prime number.\n     */\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\npublic class Tri {\n    public static List<Integer> tri(int n) {\n        if (n <= 0) return new ArrayList<>(); // empty list for n<=0\n\n        List<Integer> tribonacci = new ArrayList<>(3);\n        tribonacci.add(1);\n        tribonacci.add(3);\n\n        for (int i = 2; i < n + 1; i++) {\n            int currentIndex = (i - 1) % 3;\n            if (currentIndex == 0) continue; // skip the first three numbers\n\n            int previousIndex = (currentIndex + 2) % 3;\n            tribonacci.set(currentIndex, tribonacci.get(currentIndex) + tribonacci.get(previousIndex));\n        }\n\n        return tribonacci;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(tri(3)); // [1, 3, 2, 8]\n        System.out.println(tri(4)); // [1, 3, 2, 7, 13]\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public static int digits(int n) {\n    int product = 1; // initialize the result to 1 since we only consider odd numbers when multiplying them together\n\n    while (n != 0) {\n        int remainder = n % 10; // get the last digit of n\n        if (remainder % 2 != 0) { // check if it's odd\n            product *= remainder; // if it's odd, multiply it with the current product\n        }\n        n /= 10; // remove the last digit from n\n    }\n\n    return product;\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.util.*;\n\npublic class IsNested {\n\n public static void main(String[] args) {\n String test1 = \"[[]]\";\n String test2 = \"[]]]]]]][[[[[]\";\n String test3 = \"[][]\";\n String test4 = \"[]\";\n String test5 = \"[[][]]\";\n String test6 = \"[[]][[\";\n\n System.out.println(isNested(test1)); // True\n System.out.println(isNested(test2)); // False\n System.out.println(isNested(test3)); // False\n System.out.println(isNested(test4)); // False\n System.out.println(isNested(test5)); // True\n System.out.println(isNested(test6)); // True\n }\n\n public static Boolean isNested(String string) {\n if (string == null || string.isEmpty()) return false;\n\n Stack<Character> stack = new Stack<>();\n\n for (char c : string.toCharArray()) {\n if (c == '[') stack.push(c);\n else if (!stack.isEmpty() && stack.peek() == '[') stack.pop();\n }\n\n return stack.isEmpty();\n }\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\nimport java.lang.Math;\n\nclass SumSquares {\n    public static int sumSquares(ArrayList<Number> lst) {\n        int sum = 0;\n        for (Number n : lst) {\n            // Round the number to the nearest integer\n            int roundedNum = Math.round(n.doubleValue());\n            // Square the number and add to the sum\n            sum += Math.pow(roundedNum, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    // split the string into words using space as delimiter\n    String[] words = txt.split(\" \");\n\n    // if there are no words, return false\n    if (words.length == 0) {\n        return false;\n    }\n\n    // get the last index of the array\n    int lastIndex = words.length - 1;\n\n    // if the last index is not a valid index, return false\n    if (lastIndex < 0) {\n        return false;\n    }\n\n    // get the character at the last index\n    char lastChar = words[lastIndex].charAt(words[lastIndex].length() - 1);\n\n    // check if the character is alphabetical and not a whitespace character\n    if (Character.isAlphabetic(lastChar) && !Character.isWhitespace(lastChar)) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\npublic class CanArrange {\n\n /**\n * Returns the largest index of an element that is not greater or equal to the preceding element. If no such element exists, returns -1. The given array contains no duplicate values.\n */\n public static int canArrange(List<Integer> arr) {\n if (arr == null || arr.size() <= 1) {\n return -1;\n }\n\n Map<Integer, Integer> map = new TreeMap<>();\n for (int i = 0; i < arr.size(); ++i) {\n map.put(arr.get(i), i);\n }\n\n int maxIndex = -1;\n for (int i = arr.size() - 1; i >= 0 && maxIndex == -1; --i) {\n int current = arr.get(i);\n if (map.get(current + 1) > maxIndex) {\n maxIndex = map.get(current + 1);\n }\n }\n\n return maxIndex;\n }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.*;\n\nclass LargestSmallestIntegers {\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        ArrayList<Integer> result = new ArrayList<>();\n        int maxNeg = Integer.MIN_VALUE;\n        int minPos = Integer.MAX_VALUE;\n\n        for (Object obj : lst) {\n            if (obj instanceof Number && ((Number) obj).intValue() < 0) {\n                maxNeg = Math.max(maxNeg, (int) obj);\n            } else if (obj instanceof Number && ((Number) obj).intValue() > 0) {\n                minPos = Math.min(minPos, (int) obj);\n            }\n        }\n\n        if (maxNeg != Integer.MIN_VALUE) {\n            result.add(maxNeg);\n        } else {\n            result.add(null);\n        }\n\n        if (minPos != Integer.MAX_VALUE) {\n            result.add(minPos);\n        } else {\n            result.add(null);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(2, 4, 1, 3, 5, 7);\n        System.out.println(largestSmallestIntegers(list1)); // [None, 1]\n\n        List<Object> list2 = new ArrayList<>();\n        System.out.println(largestSmallestIntegers(list2)); // [None, None]\n\n        List<Object> list3 = Arrays.asList(0);\n        System.out.println(largestSmallestIntegers(list3)); // [None, None]\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "public static long specialFactorial(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Argument should be a positive integer.\");\n    }\n\n    BigInteger result = BigInteger.ONE;\n    for (int i = n; i > 1; i--) {\n        result = result.multiply(BigInteger.valueOf(i));\n    }\n\n    return result.longValueExact();\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n    public static String wordsInSentence(String sentence) {\n        List<String> primeWords = new ArrayList<>();\n        String[] words = sentence.split(\"\\\\s+\"); // split the input string by whitespace\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n\n        return String.join(\" \", primeWords); // join the list elements with a space\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "import java.math.*;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        BigRational bigX = new BigRational(x);\n        BigRational bigN = new BigRational(n);\n        BigRational product = bigX.multiply(bigN);\n        return product.equals(product.toBigIntegerExact());\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\n\npublic class OrderByPoints {\n\n public static List<Object> orderByPoints(List<Object> nums) {\n // Create a custom Comparator for sorting the list based on sum of digits\n Comparator<Object> comparator = (o1, o2) -> {\n int sum1 = getSumOfDigits((int) o1);\n int sum2 = getSumOfDigits((int) o2);\n\n // If the sums are equal, use natural sorting based on index in the original list\n if (sum1 == sum2) {\n return Integer.compare(((List<Object>) nums).indexOf(o1), ((List<Object>) nums).indexOf(o2));\n }\n\n return Integer.compare(sum1, sum2);\n };\n\n // Sort the list using the custom Comparator\n Collections.sort(nums, comparator);\n\n return nums;\n }\n\n private static int getSumOfDigits(int number) {\n int sum = 0;\n for (char digit : Integer.toString(number).toCharArray()) {\n sum += Character.getNumericValue(digit);\n }\n return sum;\n }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.*;\n\npublic class SpecialFilter {\n\n public static int specialFilter(List<Object> nums) {\n // Convert the input list to an integer list and filter the elements that meet the conditions\n return nums.stream()\n .filter(num -> ((Integer)num).intValue() > 10)\n .filter(num -> isOddLastDigit((Integer)num))\n .filter(num -> isOddFirstDigit((Integer)num))\n .count();\n }\n\n private static boolean isOddLastDigit(int number) {\n // Check if the last digit of the number is odd\n return number % 10 % 2 == 1;\n }\n\n private static boolean isOddFirstDigit(int number) {\n // Check if the first digit (highest power of 10) of the number is odd\n if (number < 0) number = -number;\n return (number / 10 % 10 % 2 == 1);\n }\n\n public static void main(String[] args) {\n List<Object> nums1 = Arrays.asList(15, -73, 14, -15);\n List<Object> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n System.out.println(\"specialFilter([15, -73, 14, -15]) => \" + specialFilter(nums1)); // Output: 0\n System.out.println(\"specialFilter([33, -2, -3, 45, 21, 109]) => \" + specialFilter(nums2)); // Output: 2\n }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.util.*;\n\npublic class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    private static final double[] AVG_DISTANCES = new double[]{0.387, 0.723, 1, 1.524, 5.203, 9.58, 19.18, 30.07}; // average distances from the sun in AU\n\n    public static List<Object> bf(String planet1, String planet2) {\n        if (!isValidPlanetName(planet1) || !isValidPlanetName(planet2)) return new ArrayList<>();\n\n        int index1 = findPlanetIndexByName(planet1);\n        int index2 = findPlanetIndexByName(planet2);\n\n        List<Object> result = new ArrayList<>();\n\n        for (int i = Math.min(index1, index2) + 1; i < Math.max(index1, index2); i++) {\n            int nextIndex = (i + 1) % AVG_DISTANCES.length;\n            double distance1 = AVG_DISTANCES[index1];\n            double distance2 = AVG_DISTANCES[nextIndex];\n\n            if (distance1 <= distance2) result.add(AVG_DISTANCES[i]);\n        }\n\n        return result;\n    }\n\n    private static boolean isValidPlanetName(String planetName) {\n        for (int i = 0; i < AVG_DISTANCES.length; i++) {\n            if (AVG_DISTANCES[i] > 0 && planetName.equalsIgnoreCase(\"\" + (char)(97 + i))) return true; // checking for lower case planets\n        }\n        return false;\n    }\n\n    private static int findPlanetIndexByName(String planetName) {\n        for (int i = 0; i < AVG_DISTANCES.length; i++) {\n            if (AVG_DISTANCES[i] > 0 && planetName.equalsIgnoreCase(\"\" + (char)(97 + i))) return i;\n        }\n        throw new IllegalArgumentException(\"Invalid planet name\");\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    if (isPrime(n)) { // If n is prime\n        return x;\n    } else {\n        return y; // Otherwise, return y\n    }\n}\n\n// Helper method to check whether a number is prime or not\npublic static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false; // Not prime\n    }\n\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false; // Not prime\n        }\n    }\n\n    return true; // Prime\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.*;\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object num : lst) {\n            if (!(num instanceof Number) || ((Number) num).intValue() < 0) {\n                continue; // Skip non-integer or negative values\n            }\n            int n = ((Number) num).intValue();\n            if (n % 2 != 1) {\n                continue; // Skip even numbers\n            }\n            sum += Math.pow(n, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.*;\n\nclass StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        Map<Double, String> extensionStrength = new HashMap<>();\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smallCount = 0;\n\n            for (int i = 0; i < extension.length(); i++) {\n                char c = extension.charAt(i);\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smallCount++;\n                }\n            }\n\n            double strength = (double)capCount - smallCount;\n            extensionStrength.put(strength, extension);\n        }\n\n        return extensionStrength.firstEntry().getValue() + '.' + className.substring(className.lastIndexOf('.') + 1);\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "import java.util.*;\n\nclass CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        int lenA = a.length();\n        int lenB = b.length();\n\n        if (lenA != lenB) {\n            return false;\n        }\n\n        Map<Character, Integer> charCounts = new HashMap<>();\n        for (char c : b.toCharArray()) {\n            charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);\n        }\n\n        for (int i = 0; i < lenA; i++) {\n            char c = a.charAt(i);\n            if (!charCounts.containsKey(c)) {\n                return false;\n            }\n            charCounts.put(c, charCounts.get(c) - 1);\n            if (charCounts.get(c) < 0) {\n                return false;\n            }\n        }\n\n        for (Map.Entry<Character, Integer> entry : charCounts.entrySet()) {\n            if (entry.getValue() > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "import java.util.*;\n\nclass IntToMiniRoman {\n    private static final Map<Integer, Character> romans = new HashMap<>();\n\n    static {\n        romans.put(1000, 'M');\n        romans.put(900, 'CM');\n        romans.put(500, 'D');\n        romans.put(400, 'CD');\n        romans.put(100, 'C');\n        romans.put(90, 'XC');\n        romans.put(50, 'L');\n        romans.put(40, 'XL');\n        romans.put(10, 'X');\n        romans.put(9, 'IX');\n        romans.put(5, 'V');\n        romans.put(4, 'IV');\n        romans.put(1, 'I');\n    }\n\n    public static String intToMiniRoman(int number) {\n        if (number <= 0 || number > 1000) {\n            throw new IllegalArgumentException(\"Argument must be a positive integer between 1 and 1000\");\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, Character> entry : romans.entrySet()) {\n            while (number >= entry.getKey()) {\n                result.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "public static Boolean rightAngleTriangle(int a, int b, int c) {\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\n    double h = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    return Math.abs(h - c) < 1e-9; // Check if the difference is within a small tolerance to account for floating point errors\n}"}
{"task_id": "java/77", "language": "java", "completion": "import java.util.String joining;\n\npublic class Solve {\n    public static String solve(String s) {\n        StringBuilder result = new StringBuilder();\n\n        for (char c : s.toCharArray()) {\n            if (Character.isAlphabetic(c)) {\n                // Using Character.toUpperCase() and Character.toLowerCase() to switch the case of a character\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                // Keep non-alphabetic characters as they are\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.io.*;\nimport java.math.*;\nimport java.security.*;\nimport java.util.*;\n\npublic class StringToMd5 {\n\n    /**\n     * Given a string 'text', returns its MD5 hash equivalent string.\n     * If 'text' is an empty string, returns null.\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(\"MD5 not supported in this JVM.\", e);\n        }\n\n        byte[] textBytes = text.getBytes(StandardCharsets.UTF_8);\n        md.update(textBytes);\n        byte[] digest = md.digest();\n\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b));\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\n\npublic class GenerateIntegers {\n    public static List<Integer> generateIntegers(int a, int b) {\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) { // check if the number is even\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}"}

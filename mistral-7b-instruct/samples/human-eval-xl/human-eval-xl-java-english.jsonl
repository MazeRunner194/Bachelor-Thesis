{"task_id": "java/0", "language": "java", "completion": "import java.util.*;\n\nclass Operation {\n    int amount; // Amount of deposit or withdrawal\n\n    Operation(int amount) {\n        this.amount = amount;\n    }\n}\n\npublic class BelowZero {\n\n    public static Boolean belowZero(List<Operation> operations) {\n        int balance = 0;\n        for (Operation operation : operations) {\n            balance += operation.amount;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.util.*;\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     */\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        long product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return new ArrayList<>(Arrays.asList(sum, product));\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "import java.util.Scanner;\n\npublic class StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n        // Check if both strings have the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Both strings should have the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n\n            // Perform XOR operation on each character and add the result to the StringBuilder\n            result.append((char)(charA ^ charB));\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter first string: \");\n        String a = scanner.nextLine();\n        System.out.print(\"Enter second string: \");\n        String b = scanner.nextLine();\n\n        String result = stringXor(a, b);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.*;\n\nclass Longest {\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n\n        // Initialize variables to keep track of the maximum length string found so far.\n        String maxLengthString = \"\";\n        int maxLength = 0;\n\n        for (String str : strings) {\n            if (str == null || str.isEmpty()) {\n                continue;\n            }\n\n            // Check if current string's length is greater than the maximum length found so far.\n            if (str.length() > maxLength) {\n                // Update variables to store the new maximum length string found.\n                maxLength = str.length();\n                maxLengthString = str;\n            } else if (str.length() == maxLength) {\n                // In case of strings of equal length, return the first one encountered.\n                maxLengthString = strings.get(0);\n            }\n        }\n\n        return maxLengthString;\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "public static int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.util.*;\n\nclass Number implements Comparable<Number> {\n    private final String name;\n\n    public Number(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public int compareTo(Number other) {\n        return this.name.compareTo(other.name);\n    }\n\n    // Helper method to create a Number object from a string representing the digit's name\n    public static Number valueOf(String name) {\n        for (Number number : Numbers.values()) {\n            if (number.name.equalsIgnoreCase(name)) {\n                return number;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid number: \" + name);\n    }\n}\n\nenum Numbers { ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE }\n\npublic class SortNumbers {\n    // ... (same as before)\n\n    public static String sortNumbers(String numbers) {\n        List<Number> numberList = new ArrayList<>();\n        String[] words = numbers.split(\"\\\\s+\");\n\n        for (String word : words) {\n            Number number = Number.valueOf(word);\n            numberList.add(number);\n        }\n\n        Collections.sort(numberList);\n\n        StringBuilder result = new StringBuilder();\n        for (Number number : numberList) {\n            result.append(number.name).append(' ');\n        }\n        return result.toString().trim();\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.util.*;\n\npublic class RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / (max - min));\n        }\n\n        return numbers;\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "import java.util.Locale;\n\npublic class FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append(Character.toUpperCase(c, Locale.ENGLISH));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GetPositive {\n    /**\n     * Returns only positive numbers in the list.\n     */\n    public static List<Integer> getPositive(List<Integer> list) {\n        // Initialize an empty ArrayList to store only positive numbers\n        List<Integer> positiveNumbers = new ArrayList<>();\n\n        // Iterate through each element of the input list\n        for (int number : list) {\n            // If the current number is greater than zero, add it to the positiveNumbers ArrayList\n            if (number > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(\"getPositive([-1, 2, -4, 5, 6]) = \" + getPositive(list1));\n        System.out.println(\"getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) = \" + getPositive(list2));\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "import java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class IsPrime {\n\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     *\n     * @param n The integer to check for primality\n     * @return True if the number is prime, False otherwise\n     */\n    public static boolean isPrime(int n) {\n        // Edge case: 1 is not a prime number\n        if (n <= 1) return false;\n\n        // If the number has factors between 2 and its square root, it is not prime\n        for (int i = 2; i * i <= n; ++i) {\n            if (n % i == 0) return false;\n        }\n\n        // Otherwise, the number must be prime\n        return true;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.util.*;\n\npublic class Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new TreeSet<>(l); // This will automatically remove duplicates and sort the elements.\n        return new ArrayList<>(set);\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.math.*;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class PrimeFib {\n    private BigInteger ZERO = new BigInteger(\"0\");\n    private BigInteger ONE = new BigInteger(\"1\");\n    private BigInteger TWO = new BigInteger(\"2\");\n\n    public int primeFib(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Argument must be positive.\");\n        }\n\n        List<BigInteger> fibs = new ArrayList<>();\n        fibs.add(ZERO);\n        fibs.add(ONE);\n\n        for (int i = 2; i < n; ++i) {\n            BigInteger temp = fibs.get(i - 1).add(fibs.get(i - 2));\n            fibs.add(temp);\n        }\n\n        List<BigInteger> primes = getPrimesUpTo(fibs.get(n - 1).intValue());\n\n        for (BigInteger fib : fibs.subList(0, n)) {\n            if (primes.contains(fib)) {\n                return fib.intValue();\n            }\n        }\n\n        throw new RuntimeException(\"No prime Fibonacci number found.\");\n    }\n\n    private List<BigInteger> getPrimesUpTo(int n) {\n        BitSet primes = new BitSet(n + 1);\n        primes.set(2, true);\n\n        for (long i = 3; i * i <= n; i += 2) {\n            if (!primes.get(i)) {\n                for (long j = i * i; j <= n; j += i << 1) {\n                    primes.clear(j);\n                }\n            }\n        }\n\n        List<BigInteger> result = new ArrayList<>();\n        for (int i = 2; i < primes.size(); ++i) {\n            if (primes.get(i)) {\n                result.add(new BigInteger(String.valueOf(i)));\n            }\n        }\n\n        return result;\n    }\n\n    @Test\n    public void testPrimeFib() {\n        assertEquals(2, primeFib(1));\n        assertEquals(3, primeFib(2));\n        assertEquals(5, primeFib(3));\n        assertEquals(13, primeFib(4));\n        assertEquals(89, primeFib(5));\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.*;\n\npublic class TriplesSumToZero {\n    /**\n     * checks if there is a triple of distinct elements in the given list that sum to zero.\n     */\n    public static boolean checkTripleZeroSum(List<Integer> numbers) {\n        // check for triples by using Stream operations\n        return numbers.stream()\n                .filter(n -> Collections.frequency(numbers, n) == 1)\n                .flatMapToInt(n -> Arrays.stream(Arrays.copyOfRange(numbers.toArray(), Math.max(0, 1 + n), numbers.size()))\n                        .boxed().filter(m -> m != n))\n                .mapToInt(m -> m)\n                .distinct()\n                .collect(Collectors.groupingBy(n -> n, LinkedHashMap::new))\n                .values()\n                .stream()\n                .anyMatch(triple -> triple.size() == 3 && triple.stream().mapToInt(Integer::intValue).sum() == 0);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 3, 5, 0);\n        List<Integer> list2 = Arrays.asList(1, 3, -2, 1);\n        List<Integer> list3 = Arrays.asList(1, 2, 3, 7);\n        List<Integer> list4 = Arrays.asList(2, 4, -5, 3, 9, 7);\n        List<Integer> list5 = Arrays.asList(1);\n\n        System.out.println(\"[\" + list1 + \"] sum to zero: \" + checkTripleZeroSum(list1));\n        System.out.println(\"[\" + list2 + \"] sum to zero: \" + checkTripleZeroSum(list2));\n        System.out.println(\"[\" + list3 + \"] sum to zero: \" + checkTripleZeroSum(list3));\n        System.out.println(\"[\" + list4 + \"] sum to zero: \" + checkTripleZeroSum(list4));\n        System.out.println(\"[\" + list5 + \"] sum to zero: \" + checkTripleZeroSum(list5));\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\npublic class PairsSumToZero {\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> list1 = Arrays.asList(1, 3, 5, 0);\n        List<Integer> list2 = Arrays.asList(1, 3, -2, 1);\n        List<Integer> list3 = Arrays.asList(1, 2, 3, 7);\n        List<Integer> list4 = Arrays.asList(2, 4, -5, 3, 5, 7);\n        List<Integer> list5 = Arrays.asList(1);\n\n        System.out.println(pairsSumToZero(list1)); // False\n        System.out.println(pairsSumToZero(list2)); // False\n        System.out.println(pairsSumToZero(list3)); // False\n        System.out.println(pairsSumToZero(list4)); // True\n        System.out.println(pairsSumToZero(list5)); // False\n    }\n\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l); // store elements in a set for O(1) lookup\n        for (int num : l) { // for each number in the list\n            if (set.contains(-num)) { // if we find its negative, return true\n                return true;\n            }\n        }\n        return false; // otherwise, return false\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.util.*;\n\npublic class Fib4 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        System.out.println(\"Fib4(\" + n + \") = \" + fib4(n));\n    }\n\n    public static int fib4(int n) {\n        if (n <= 3) return n;\n\n        int prevPrev = 0, prev = 0, current = 2;\n        for (int i = 4; i <= n; ++i) {\n            int temp = current;\n            current += prevPrev + prev;\n            prevPrev = prev;\n            prev = temp;\n        }\n\n        return current;\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.util.*;\n\npublic class Median {\n\n    /**\n     * Returns the median of the given integer list.\n     */\n    public static Number median(List<Integer> numbers) {\n        // Sort the list\n        Collections.sort(numbers);\n\n        // Get the middle index (or average of two middle indices if the list size is even)\n        int middleIndex = numbers.size() / 2;\n\n        // If the list has an odd number of elements, return the value at the middle index\n        if (numbers.size() % 2 == 1) {\n            return numbers.get(middleIndex);\n        }\n\n        // If the list has an even number of elements, return the average of the two values at the middle indices\n        int firstMiddleIndex = middleIndex - 1;\n        int secondMiddleIndex = middleIndex;\n        return (double) (numbers.get(firstMiddleIndex) + numbers.get(secondMiddleIndex)) / 2.0;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(list1)); // Output: 3.0\n\n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(list2)); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "import java.util.regex.*;\n\nclass IsPalindrome {\n    /**\n     * Checks if given string is a palindrome\n     * >>> is_palindrome(\"\")\n     * True\n     * >>> is_palindrome(\"aba\")\n     * True\n     * >>> is_palindrome(\"aaaaa\")\n     * True\n     * >>> is_palindrome(\"zbcd\")\n     * False\n     */\n    public static Boolean isPalindrome(String text) {\n        // Remove punctuation, convert to lowercase and trim spaces.\n        String cleanedText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase().trim();\n\n        // Check if the cleaned text is empty or if its length is odd (since the middle character won't match itself)\n        if (cleanedText.isEmpty() || cleanedText.length() % 2 == 1) {\n            return false;\n        }\n\n        // Iterate from both ends of the cleaned text and compare characters\n        for (int i = 0, j = cleanedText.length() - 1; i < cleanedText.length() / 2; i++, j--) {\n            if (cleanedText.charAt(i) != cleanedText.charAt(j)) {\n                return false;\n            }\n        }\n\n        // If no mismatch was found, the string is a palindrome\n        return true;\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.util.regex.*;\n\npublic class RemoveVowels {\n    public static String removeVowels(String text) {\n        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.util.*;\n\npublic class BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int number : l) {\n            if (number >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(\"below_threshold([1, 2, 4, 10], 100): \" + belowThreshold(list1, 100));\n        System.out.println(\"below_threshold([1, 20, 4, 10], 5): \" + belowThreshold(list2, 5));\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "/**\n * Adds two numbers x and y\n *\n * @param x the first number\n * @param y the second number\n * @return the sum of x and y\n */\npublic static int add(int x, int y) {\n  // your code here\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.util.*;\n\nclass SameChars {\n    /**\n     * Check if two words have the same characters.\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            set0.add(c);\n        }\n\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            set1.add(c);\n        }\n\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // False\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "import java.util.Scanner;\n\npublic class Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * @param n the position in the sequence to calculate\n     * @return the n-th Fibonacci number\n     */\n    public static int fib(int n) {\n        if (n <= 1) return n; // base case: fibonacci of 0 or 1 is just itself\n        return fib(n - 1) + fib(n - 2); // recursive call\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = in.nextInt();\n        System.out.println(\"Fibonacci of \" + n + \": \" + fib(n));\n    }\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.util.*;\nimport java.util.stream.*;\n\nclass Common {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        return Stream.of(l1, l2)\n                .flatMap(Collection::stream)\n                .distinct() // remove duplicates from the streams\n                .filter(e -> Collections.frequency(l1, e) > 0 && Collections.frequency(l2, e) > 0) // filter out elements that only appear in one of the lists\n                .sorted() // sort the result list\n                .collect(Collectors.toList()); // collect the result into a List\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "import java.math.BigInteger;\n\npublic class LargestPrimeFactor {\n\n public static BigInteger largestPrimeFactor(BigInteger n) {\n if (n.compareTo(BigInteger.ONE) <= 0) {\n throw new IllegalArgumentException(\"Input number should be greater than 1.\");\n }\n\n BigInteger max = n;\n BigInteger possibleFactor = BigInteger.TWO;\n\n while (possibleFactor.compareTo(n) <= 0) {\n if (n.mod(possibleFactor).equals(BigInteger.ZERO)) {\n n = n.divide(possibleFactor);\n }\n possibleFactor = possibleFactor.add(BigInteger.ONE);\n }\n return max.max(n);\n }\n\n public static void main(String[] args) {\n BigInteger num1 = new BigInteger(\"13195\");\n BigInteger num2 = new BigInteger(\"2048\");\n System.out.println(\"The largest prime factor of \" + num1 + \" is \" + largestPrimeFactor(num1));\n System.out.println(\"The largest prime factor of \" + num2 + \" is \" + largestPrimeFactor(num2));\n }\n}"}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\n\npublic class Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Returns the derivative of this polynomial in the same form.\n     */\n    public static List<Integer> derivative(List<Integer> xs) {\n        // Create an empty list to store the derivative coefficients\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate through the given coefficients from the second one (since the first one is a constant)\n        for (int i = 1; i < xs.size(); ++i) {\n            // Multiply the current coefficient by the index and add it to the result list\n            result.add(i, xs.get(i) * i);\n        }\n\n        // To calculate the derivative of the last coefficient (which is a constant), we multiply it by 0 since the power of x in the derivative is always one less than its current power\n        result.set(0, result.get(0) + xs.get(1));\n\n        return result;\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "import java.util.*;\n\npublic class Fibfib {\n    static int[] memo = new int[100]; // Preallocate an array for storing the results of fibfib(n) for n<100\n\n    public static int fibfib(int n) {\n        if (n <= 2) return n == 0 ? 0 : 1;\n\n        if (memo[n] > 0) return memo[n]; // If we have already computed the value, just return it\n\n        memo[n] = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        return memo[n];\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = Character.toLowerCase(s.charAt(i));\n        if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u')) {\n            count++;\n        } else if (c == 'y' && i == s.length() - 1) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\npublic class Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int i : lst)\n            freq.put(i, freq.getOrDefault(i, 0) + 1); // increment frequency count\n\n        int maxFreq = Collections.max(freq.values());\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            if (entry.getValue() >= entry.getKey())\n                return entry.getKey();\n        }\n        return -1;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "public static Number triangleArea(int a, int b, int c) {\n    double s = (a + b + c) / 2; // semi-perimeter\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return new BigDecimal(area).setScale(2, RoundingMode.HALF_UP);\n\n    // Check if the triangle is valid by ensuring that the sum of any two sides is greater than the third side\n    if ((a + b < c) || (b + c < a) || (c + a < b)) {\n        return new BigDecimal(-1);\n    }\n\n    return new BigDecimal(area).setScale(2, RoundingMode.HALF_UP);\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.*;\n\npublic class WillItFly {\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is palindrome\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - 1 - i)) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of elements and check if it's less than or equal to w\n        int sum = 0;\n        for (Integer num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.Arrays;\n\npublic class IsMultiplyPrime {\n\n    /**\n     * Check if a given number is prime\n     */\n    public static boolean isPrime(int n) {\n        // If the number is less than 2, it's not prime\n        if (n < 2) return false;\n\n        // If the number is 2 or 3, it's prime\n        if (n == 2 || n == 3) return true;\n\n        // For even numbers greater than 4, it's not prime\n        if (n % 2 == 0) return false;\n\n        int root = (int) Math.sqrt(n);\n        for (int i = 5; i <= root; i += 6) {\n            // If the number is divisible by any of these, it's not prime\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n\n        // If none of the above conditions are met, the number is probably prime\n        return true;\n    }\n\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100.\n     */\n    public static boolean isMultiplyPrime(int a) {\n        // If the number is 1, it's not a product of three primes\n        if (a == 1) return false;\n\n        // Check for prime factors of 2 and 3\n        if (a % 2 == 0) {\n            // If the number is even and divisible by 4, it can be broken down into two primes and a factor of 2\n            if (isPrime(a / 2)) return false;\n        } else if (a % 3 == 0) {\n            // If the number is a multiple of 3, it can be broken down into three primes of 3, 2, and a factor\n            // Check if the remaining part is also prime\n            if (isPrime(a / 3)) return false;\n        }\n\n        // Try dividing by all possible prime numbers up to the square root of the given number\n        for (int i = 5; i * i <= a; i += 2) {\n            // If the number is divisible by any prime, it can't be a product of three primes\n            if (a % i == 0 || a % (i + 2) == 0 || isPrime(a / i)) return false;\n        }\n\n        // If none of the above conditions are met, the number could be the product of three primes\n        return Arrays.stream(new int[]{2, 3}).noneMatch(n -> a % n == 0) && isPrime(a);\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        List<String> binaryRepresentation = new ArrayList<>();\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binaryRepresentation.add(remainder == 1 ? \"1\" : \"0\");\n            decimal /= 2;\n        }\n        String result = \"db\";\n        for (int i = binaryRepresentation.size() - 1; i >= 0; --i) {\n            result += binaryRepresentation.get(i);\n        }\n        result += \"db\";\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));  // Output: db1111db\n        System.out.println(decimalToBinary(32));  // Output: db100000db\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "import java.util.Scanner;\n\npublic class IsHappy {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String s = sc.nextLine();\n        if (isHappy(s)) {\n            System.out.println(s + \" is happy\");\n        } else {\n            System.out.println(s + \" is not happy\");\n        }\n    }\n\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3) return false;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < s.length() - 2; i += 3) {\n            if (arr[i] == arr[i + 1] || arr[i + 1] == arr[i + 2] || arr[i] == arr[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.*;\n\npublic class NumericalLetterGrade {\n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        System.out.println(grade_equation(grades));\n    }\n\n    public static List<String> grade_equation(List<Number> grades) {\n        Map<Double, String> map = new HashMap<>();\n        map.put(4.0, \"A+\");\n        map.put(3.7, \"A\");\n        map.put(3.3, \"A-\");\n        map.put(3.0, \"B+\");\n        map.put(2.7, \"B\");\n        map.put(2.3, \"B-\");\n        map.put(2.0, \"C+\");\n        map.put(1.7, \"C\");\n        map.put(1.3, \"C-\");\n        map.put(1.0, \"D+\");\n        map.put(0.7, \"D\");\n        map.put(0.0, \"D-\");\n        map.put(0.0, \"E\");\n\n        List<String> letterGrades = new ArrayList<>();\n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            if (gpa >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "public static Boolean primeLength(String string) {\n    int len = string.length();\n    // Check for edge cases: 1 and 0 are not prime numbers, an empty string has length 0 which is neither of them\n    if (len == 1 || len == 0) return false;\n\n    // Optimization: If the length is 2 or 3, it is already known to be a prime number\n    if (len <= 3) return true;\n\n    for (int i = 2; i * i <= len; ++i) {\n        if (len % i == 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "java/36", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     *\n     * Example\n     *     For N = 1000, the sum of digits will be 1 (1 in binary is 1) and the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 (1 in binary is 1, 5 in binary is 101, and 0 in binary is 0) and the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 (1 in binary is 1, 4 in binary is 100, 7 in binary is 111) and the output should be \"1100\".\n     *\n     * Variables:\n     *     @n integer\n     *          Constraints: 0 \u2264 n \u2264 10000.\n     * Output:\n     *      a string of binary number\n     */\n    public static String solve(int n) {\n        StringBuilder binary = new StringBuilder();\n        while (n > 0) {\n            int remainder = n % 2;\n            binary.append(remainder);\n            n /= 2;\n        }\n        return binary.reverse().toString();\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n\n public static List<Object> getRow(List<Object> lst, int x) {\n Collections.sort(lst); // Sort the input list to make finding rows containing 'x' easier\n\n List<Object> result = new ArrayList<>();\n\n for (int i = 0; i < lst.size(); ++i) {\n if (lst.get(i) instanceof List) { // If current element is a sub-list\n if (containsElement((List)lst.get(i), x)) { // Check if the sub-list contains 'x'\n result.add(new Object[]{i, findIndexOfX((List)lst.get(i), 0, lst.get(i).size() - 1)});\n }\n }\n }\n\n result.sort((o1, o2) -> ((Integer[]) o1)[0] - ((Integer[]) o2)[0]); // Sort results by row index\n for (int i = 0; i < result.size(); ++i) {\n Integer[] tuple = (Integer[]) result.get(i);\n result.set(i, new Object[]{tuple[0], Arrays.stream(tuple[1])\n .sorted((o1, o2) -> -(o1 - o2))\n .toArray()});\n }\n\n return result;\n }\n\n private static boolean containsElement(List<Object> list, Object o) {\n for (Object obj : list) {\n if (obj.equals(o)) {\n return true;\n }\n }\n return false;\n }\n\n private static int[] findIndexOfX(List<Object> list, int left, int right) {\n while (left <= right) {\n int mid = (left + right) / 2;\n if (((Comparable<Object>) list.get(mid)).compareTo(x) > 0) {\n right = mid - 1;\n } else if (((Comparable<Object>) list.get(mid)).compareTo(x) < 0) {\n left = mid + 1;\n } else {\n return new int[]{mid, left}; // Found 'x' at mid and left indices\n }\n }\n return new int[]{-1, -1}; // Not found\n }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\npublic class NextSmallest {\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) return null;\n\n        List<Integer> sorted = new ArrayList<>(lst);\n        sorted.sort(Comparator.naturalOrder());\n\n        int secondIndex = 1;\n        for (int i = 2; i < sorted.size(); i++) {\n            if (sorted.get(i - 1) >= sorted.get(i)) {\n                secondIndex = i;\n                break;\n            }\n        }\n\n        return sorted.get(secondIndex);\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "import java.util.*;\n\nclass IsBored {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n    */\n    public static int isBored(String s) {\n        String[] words = s.split(\"\\\\s+\"); // split the string into an array of words\n        int boredCount = 0;\n\n        for (String word : words) {\n            if (\"I\".equalsIgnoreCase(word)) { // check if the current word is \"I\" ignoring case\n                // check if the next character is a sentence delimiter (.', ', '!')\n                if (Character.isWhitespace(words[words.length - 1].charAt(0)) ||\n                    words[words.length - 1].matches(\"([.!?])$\")) {\n                    boredCount++;\n                }\n            }\n        }\n\n        return boredCount;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.util.*;\n\npublic class Skjkasdkd {\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        double sqrt = Math.sqrt(number);\n        for (int i = 2; i <= sqrt; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrimeSum = 0;\n        int primeNumberSum = 0;\n        for (int number : lst.stream().filter(Skjkasdkd::isPrime).toList()) {\n            primeNumberSum = number;\n            while (primeNumberSum > 9) {\n                primeNumberSum = calculateDigitSum(primeNumberSum);\n            }\n            if (maxPrimeSum < primeNumberSum) {\n                maxPrimeSum = primeNumberSum;\n            }\n        }\n        return maxPrimeSum;\n    }\n\n    private static int calculateDigitSum(int number) {\n        int sum = 0;\n        while (number != 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.*;\nimport static java.util.stream.Collectors.toMap;\nimport static java.util.stream.Collectors.mapping;\nimport static java.util.stream.Collectors.toList;\nimport static java.util.stream.Stream.of;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\n\npublic class CheckDictCase {\n\n public static Boolean checkDictCase(Object dict) {\n if (dict == null || ((Map<?, ?>) dict).isEmpty()) return false;\n\n // Convert keys to list and remove duplicates\n List<String> keyList = new ArrayList<>(((Map<?, ?>) dict).keySet());\n Set<String> uniqueKeys = new HashSet<>(keyList);\n keyList.clear();\n keyList.addAll(uniqueKeys);\n\n // Check if all keys are either lower or upper case\n boolean isLower = true;\n boolean isUpper = true;\n for (String key : keyList) {\n isLower &= Pattern.matches(\"^[a-z]+$\", key);\n isUpper &= Pattern.matches(\"^[A-Z]+$\", key);\n }\n\n return isLower || isUpper;\n }\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ClosestInteger {\n    public static int closestInteger(String value) {\n        double parsedValue = Double.parseDouble(value);\n        BigDecimal bd = new BigDecimal(parsedValue).setScale(0, RoundingMode.HALF_UP); // Round to nearest integer with HALF_UP mode (towards positive infinity)\n        int roundedValue = bd.intValue();\n\n        if ((Math.abs(roundedValue)) < Math.abs((parsedValue - roundedValue + 1))) {\n            return roundedValue + 1; // If the absolute value of the next integer is smaller, round away from zero\n        } else {\n            return roundedValue; // Otherwise, return the rounded value\n        }\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "public static List<Integer> makeAPile(int n) {\n    List<Integer> stoneLevels = new ArrayList<>();\n    int level = 1;\n    int numStones = n;\n\n    while (level <= n) {\n        if ((level & 1) == 1) { // odd number\n            numStones++;\n        } else { // even number\n            numStones += 2;\n        }\n        stoneLevels.add(numStones);\n        level++;\n    }\n\n    return stoneLevels;\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.util.*;\n\npublic class WordsString {\n\n public static List<String> wordsString(String s) {\n String regex = \"\\\\s*,\\\\s*|\\\\s+\"; // This regular expression matches comma or one or more whitespace characters\n String[] wordsArray = s.split(regex);\n return Arrays.asList(wordsArray);\n }\n}"}
{"task_id": "java/45", "language": "java", "completion": "import java.util.Objects;\n\npublic class ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If\n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n        // Ensure that both numbers are positive\n        if (x <= 0 || y <= 0) {\n            throw new IllegalArgumentException(\"Both numbers must be positive.\");\n        }\n\n        // Find the biggest even number in the given range\n        int result = Math.max(x, y);\n        while (result % 2 != 0 && result > y) {\n            result--;\n        }\n        return result;\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "import java.util.stream.IntStream;\n\npublic class RoundedAvg {\n\n    public static void main(String[] args) {\n        int n = 10;\n        int m = 20;\n        System.out.println(roundedAvg(n, m));\n    }\n\n    public static String roundedAvg(int n, int m) {\n        if (n > m) return \"-1\";\n\n        double avg = Math.round((double)(IntStream.rangeClosed(n, m).sum() + (m - n) / 2.) / (m - n + 1));\n        return Integer.toBinaryString((int)avg);\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.util.*;\n\npublic class F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                BigInteger fact = BigInteger.ONE;\n                for (BigInteger j = BigInteger.valueOf(2); j.compareTo(BigInteger.valueOf(i)) <= 0; j = j.add(BigInteger.ONE)) {\n                    fact = fact.multiply(j);\n                }\n                result.add(fact.intValue());\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\nclass EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int max = Long.MAX_VALUE;\n        if (n % 2 == 0) {\n            n -= 1;\n        }\n        Map<Integer, Integer> count = new HashMap<>();\n        for (int i = 9; i >= 0; i--) {\n            for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n                count.put(i + entry.getKey(), entry.getValue() + Math.min((n - i) / (10 * entry.getKey() + i), entry.getValue()));\n            }\n        }\n        return new ArrayList<>(count.values());\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "public static Boolean moveOneBall(List<Object> arr) {\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if ((Comparable) arr.get(i) > (Comparable) arr.get(i + 1)) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int i = 0;\n    int j = 0;\n\n    while (i < lst1.size() && j < lst2.size()) {\n        if (lst1.get(i) % 2 != 0) {\n            // Found an odd number, check for even number in the other list\n            while (j < lst2.size() && lst2.get(j) % 2 == 0) {\n                j++;\n            }\n\n            if (j < lst2.size()) {\n                // Swap found, continue with the next iteration\n                int temp = lst1.get(i);\n                lst1.set(i, lst2.get(j));\n                lst2.set(j, temp);\n                i++;\n                j++;\n            } else {\n                // No more even numbers to swap in the second list, return \"NO\"\n                return \"NO\";\n            }\n        } else {\n            i++;\n            j++;\n        }\n    }\n\n    // All elements of lst1 are now even, return \"YES\"\n    return \"YES\";\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\npublic class ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        HashSet<Character> set = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n\n        for (int i = 0; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n            if (!set.contains(currentChar)) {\n                sb.append(currentChar);\n            }\n        }\n\n        String resultString = sb.reverse().toString();\n\n        boolean isPalindrome = resultString.equalsIgnoreCase(new StringBuilder(resultString).reverse().toString());\n\n        List<Object> tuple = new ArrayList<>();\n        tuple.add(resultString);\n        tuple.add(isPalindrome);\n\n        return tuple;\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "public static int maxFill(List<List<Integer>> grid, int capacity) {\n    int numTimes = 0;\n    for (List<Integer> row : grid) {\n        int waterLeft = 0;\n        int start = 0;\n        for (int end = 0; end < row.size(); ++end) {\n            if (row.get(end) == 1) {\n                waterLeft += Math.min(capacity - waterLeft, row.get(end));\n            }\n        }\n        numTimes += waterLeft > 0 ? (waterLeft + capacity - 1) / capacity : 0;\n    }\n    return numTimes;\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n\n public static List<String> selectWords(String s, int n) {\n if (s == null || s.length() == 0 || n < 1 || n > s.length()) return new ArrayList<>();\n\n StringBuilder word = new StringBuilder();\n List<String> words = new ArrayList<>();\n boolean inWord = false;\n char currentChar;\n int consonantCount = 0;\n\n for (int i = 0; i < s.length(); ++i) {\n currentChar = s.charAt(i);\n\n if (Character.isWhitespace(currentChar)) {\n if (inWord) {\n // add the word to the list and reset counters\n words.add(word.toString());\n inWord = false;\n consonantCount = 0;\n }\n } else {\n // handle vowels, ignore them for now\n if (!Character.isLetter(currentChar)) continue;\n\n char currentLower = Character.toLowerCase(currentChar);\n\n if (currentLower == 'a' || currentLower == 'e' || currentLower == 'i' || currentLower == 'o' || currentLower == 'u') {\n inWord = false;\n consonantCount = 0;\n continue;\n }\n\n // increment the count of consonants in this word\n if (consonantCount < n) {\n ++consonantCount;\n } else {\n // add the word to the list and reset counters\n words.add(word.toString());\n inWord = false;\n consonantCount = 0;\n }\n\n // add the current character to the current word\n word.append(currentChar);\n\n // update whether we are currently inside a word or not\n if (!inWord) {\n word.setLength(0);\n inWord = true;\n }\n }\n }\n\n // handle the last word, if any\n if (inWord) {\n String lastWord = word.toString();\n int lastWordConsonantCount = countConsonants(lastWord);\n\n if (lastWordConsonantCount == n) {\n words.add(lastWord);\n } else if (lastWordConsonantCount < n) {\n for (String w : words) {\n if (w.length() + lastWord.length() <= n && countConsonants(w + \" \" + lastWord) == n) {\n words.add(w + \" \" + lastWord);\n }\n }\n }\n }\n\n return words;\n }\n\n private static int countConsonants(String s) {\n if (s == null || s.length() == 0) return 0;\n\n StringBuilder word = new StringBuilder();\n int consonantCount = 0;\n boolean inWord = false;\n char currentChar;\n\n for (int i = 0; i < s.length(); ++i) {\n currentChar = Character.toLowerCase(s.charAt(i));\n\n if (Character.isWhitespace(currentChar)) {\n if (inWord) {\n consonantCount += word.length() - countVowels(word.toString());\n word.setLength(0);\n inWord = false;\n }\n } else {\n // handle vowels, ignore them for now\n if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') continue;\n\n if (!inWord) {\n word.append(currentChar);\n inWord = true;\n }\n }\n }\n\n // handle the last word, if any\n if (inWord) {\n consonantCount += word.length() - countVowels(word.toString());\n }\n\n return consonantCount;\n }\n\n private static int countVowels(String s) {\n if (s == null || s.length() == 0) return 0;\n\n StringBuilder word = new StringBuilder();\n int vowelCount = 0;\n boolean inWord = false;\n char currentChar;\n\n for (int i = 0; i < s.length(); ++i) {\n currentChar = Character.toLowerCase(s.charAt(i));\n\n if (Character.isWhitespace(currentChar)) {\n if (inWord) {\n vowelCount += countVowels(word.toString());\n word.setLength(0);\n inWord = false;\n }\n } else {\n // handle consonants, ignore them for now\n if (!Character.isLetter(currentChar)) continue;\n\n if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n if (!inWord) {\n word.append(currentChar);\n inWord = true;\n }\n\n ++vowelCount;\n }\n }\n }\n\n // handle the last word, if any\n if (inWord) {\n vowelCount += countVowels(word.toString());\n }\n\n return vowelCount;\n }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.util.*;\n\npublic class Maximum {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     */\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        // Create a PriorityQueue to store the maximum k elements\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n        // Iterate through the array and add the first k elements to the heap\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            maxHeap.add(arr.get(i));\n        }\n\n        // Create a result list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate through the remaining elements of the array and add them to the result if they are greater than the smallest element in the heap\n        for (int i = k; i < arr.size(); i++) {\n            if (arr.get(i) > maxHeap.peek()) {\n                maxHeap.poll(); // Remove the smallest element from the heap\n                maxHeap.add(arr.get(i)); // Add the new element to the heap\n                result.add(maxHeap.peek()); // Add the maximum number (the largest one in the heap) to the result\n            }\n        }\n\n        // Add remaining elements of the heap (if any) to the result\n        while (!maxHeap.isEmpty()) {\n            result.add(maxHeap.poll());\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.util.*;\n\npublic class AddElements {\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n\n public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n if (interval1.get(0) > interval2.get(1) || interval2.get(0) > interval1.get(1)) {\n return \"NO\";\n }\n\n int start = Math.max(interval1.get(0), interval2.get(0));\n int end = Math.min(interval1.get(1), interval2.get(1));\n\n if (end - start + 1 <= 0) {\n return \"NO\";\n }\n\n return isPrime(end - start + 1) ? \"YES\" : \"NO\";\n }\n\n private static boolean isPrime(int n) {\n if (n <= 1) {\n return false;\n }\n for (int i = 2; i * i <= n; i++) {\n if (n % i == 0) {\n return false;\n }\n }\n return true;\n }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    public static List<Number> tri(int n) {\n        List<Number> tribonacci = new ArrayList<>();\n        tribonacci.add(BigDecimal.valueOf(3)); // Initialize first term of the sequence\n\n        for (int i = 1; i <= n; ++i) {\n            BigDecimal currentValue;\n            if (i % 2 == 0) {\n                currentValue = tribonacci.get(i - 1);\n            } else if (i <= 2) {\n                currentValue = tribonacci.get(i - 2); // For odd numbers less than or equal to 2, use the initial terms of the sequence\n            } else {\n                currentValue = tribonacci.get(i - 1)\n                        .add(tribonacci.get(i - 2))\n                        .add(tribonacci.get(i + 1)); // Calculate using the recursive formula for odd numbers\n            }\n            tribonacci.add(currentValue);\n        }\n        return tribonacci;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "public class Digits {\n\n public static int digits(int n) {\n if (n < 10) return n; // base case for single-digit numbers\n\n int oddProduct = 1; // initialize product of odd digits to 1\n\n while (n > 0) {\n int rem = n % 10; // get the last digit\n if (rem % 2 != 0) { // check if the last digit is odd\n oddProduct *= rem; // if it's odd, add it to the product\n }\n n /= 10; // remove the last digit from the number\n }\n\n return oddProduct == 0 ? 0 : oddProduct; // if all digits are even, return 0, otherwise return the product\n }\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.util.Stack;\n\npublic class IsNested {\n    public static Boolean isNested(String string) {\n        if (string == null || string.isEmpty()) return false;\n\n        Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) return false;\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.util.*;\n\nclass SumSquares {\n    public static int sumSquares(List<Number> lst) {\n        int result = 0;\n        for (Number num : lst) {\n            long roundedNum = Math.ceil(num.doubleValue());\n            result += (int) Math.pow(roundedNum, 2);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Number> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Number> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Number> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Number> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Number> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(sumSquares(lst1) + \" Expected: 14\");\n        System.out.println(sumSquares(lst2) + \" Expected: 98\");\n        System.out.println(sumSquares(lst3) + \" Expected: 84\");\n        System.out.println(sumSquares(lst4) + \" Expected: 29\");\n        System.out.println(sumSquares(lst5) + \" Expected: 6\");\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "import java.util.regex.*;\n\npublic class CheckIfLastCharIsALetter {\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        Pattern pattern = Pattern.compile(\"\\\\s|[a-zA-Z]$\");\n        Matcher matcher = pattern.matcher(txt);\n        return matcher.matches() && Character.isLetter(txt.charAt(txt.length() - 1));\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    public static int canArrange(List<Object> arr) {\n        Stack<Integer> stack = new Stack<>();\n\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if ((Comparable) arr.get(i) <= arr.get(stack.peek())) {\n                stack.push(i);\n            } else if (!stack.isEmpty()) {\n                int top = stack.pop();\n                if (arr.get(top) > arr.get(i)) {\n                    return top;\n                }\n            }\n        }\n\n        return -1;\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.*;\nimport java.math.*;\n\npublic class LargestSmallestIntegers {\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        List<Integer> result = new ArrayList<>();\n        int maxNeg = Integer.MAX_VALUE;\n        int minPos = Integer.MAX_VALUE;\n\n        List<Integer> integers = lst.stream()\n                .filter(i -> i instanceof Number && ((Number) i).intValue() != 0)\n                .map(i -> (Integer) i)\n                .collect(Collectors.toList());\n\n        for (int num : integers) {\n            if (num < 0 && num < maxNeg) {\n                maxNeg = num;\n            } else if (num > 0 && num < minPos) {\n                minPos = num;\n            }\n        }\n\n        if (minPos == Integer.MAX_VALUE && maxNeg == Integer.MAX_VALUE) {\n            return Collections.emptyList();\n        }\n\n        result.add(maxNeg);\n        result.add(minPos);\n        return result;\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "import java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static BigInteger specialFactorial(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"n must be greater than zero\");\n        }\n\n        List<BigInteger> factors = new ArrayList<>();\n        for (int i = n; i > 1; i--) {\n            factors.add(BigInteger.valueOf(i));\n        }\n\n        BigInteger result = BigInteger.ONE;\n        for (BigInteger factor : factors) {\n            result = result.multiply(factor);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.util.*;\n\npublic class WordsInSentence {\n\n public static String wordsInSentence(String sentence) {\n String[] words = sentence.split(\" \");\n StringBuilder result = new StringBuilder();\n\n for (String word : words) {\n int length = word.length();\n if (isPrime(length)) {\n result.append(word).append(\" \");\n }\n }\n\n // remove the last space\n if (result.length() > 0) {\n result.setLength(result.length() - 1);\n }\n\n return result.toString();\n }\n\n private static boolean isPrime(int number) {\n if (number <= 1) {\n return false;\n }\n\n for (int i = 2; i * i <= number; i++) {\n if (number % i == 0) {\n return false;\n }\n }\n\n return true;\n }\n}"}
{"task_id": "java/66", "language": "java", "completion": "import java.util.*;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        int numeratorX = Integer.parseInt(x.split(\"/\")[0]);\n        int denominatorX = Integer.parseInt(x.split(\"/\")[1]);\n        int numeratorN = Integer.parseInt(n.split(\"/\")[0]);\n        int denominatorN = Integer.parseInt(n.split(\"/\")[1]);\n        int result = (numeratorX * numeratorN) / (denominatorX * denominatorN);\n        return result % 1 == 0;\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.util.*;\n\nclass OrderByPoints {\n\n public static List<Object> orderByPoints(List<Object> nums) {\n // Create a comparator that sorts based on the sum of digits, and if equal, by index in original list\n Comparator<Object> comparator = new Comparator<Object>() {\n @Override\n public int compare(Object o1, Object o2) {\n int s1 = calculateSumOfDigits((int) o1);\n int s2 = calculateSumOfDigits((int) o2);\n if (s1 == s2) {\n return Integer.compare(((List<Object>) nums).indexOf(o1), ((List<Object>) nums).indexOf(o2));\n }\n return Integer.compare(s1, s2);\n }\n };\n // Sort the list using the comparator\n Collections.sort(nums, comparator);\n return nums;\n }\n\n private static int calculateSumOfDigits(int n) {\n int sum = 0;\n for (char c : Integer.toString(n).toCharArray()) {\n sum += Character.getNumericValue(c);\n }\n return sum;\n }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.*;\n\npublic class Specialfilter {\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object number : nums) {\n            if (number instanceof Integer && ((Integer) number) > 10) {\n                int lastDigit = (int) Math.abs((long) number % 10);\n                int firstDigit = (int) Math.floor(Math.log10((double) Math.abs(number))) % 10;\n\n                if (lastDigit == 1 || lastDigit == 3 || lastDigit == 5 || lastDigit == 7 || lastDigit == 9 && firstDigit == 1 || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.util.BitSet;\n\npublic class GetMaxTriples {\n    public static int getMaxTriples(int n) {\n        BitSet seen = new BitSet(); // used to store numbers already seen as a part of a triple\n        int[] a = new int[n]; // array of values\n        int count = 0; // count of triples whose sum is a multiple of 3\n\n        for (int i = 1; i <= n; ++i) {\n            a[i - 1] = i * i - i + 1;\n            seen.set(a[i - 1]); // mark the number as seen\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (!seen.get(a[i])) continue; // skip if a[i] is not part of any triple yet\n\n            int mask = a[i];\n            mask |= (mask >>> 3); // calculate mask for numbers that can form a multiple of 3 with a[i]\n            mask |= (mask >>> 6);\n\n            if ((mask & 1) != 0) continue; // skip if the number of remaining elements to be checked is odd, as no triple can be found in this case\n\n            for (int j = i + 1; j < n; ++j) {\n                if (!seen.get(a[j])) continue;\n                int k = (a[i] ^ a[j]) ^ ((a[i] >>> 3) | (a[j] >>> 3)); // find the index of the third number using bitwise operations\n                if (k >= n || seen.get(k)) continue; // skip if the third number is out of bounds or already used in a triple\n\n                count++; // found a valid triple, increment the count\n                seen.clear(i); // mark a[i] as not part of any triple to avoid re-using it\n                seen.clear(j); // mark a[j] as not part of any triple to avoid re-using it\n                break;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\npublic class Bf {\n    public static void main(String[] args) {\n        List<Planet> planets = Arrays.asList(\n                new Planet(\"Mercury\", 0.39),\n                new Planet(\"Venus\", 0.72),\n                new Planet(\"Earth\", 1.00),\n                new Planet(\"Mars\", 1.52),\n                new Planet(\"Jupiter\", 5.20),\n                new Planet(\"Saturn\", 9.58),\n                new Planet(\"Uranus\", 19.2),\n                new Planet(\"Neptune\", 30.1)\n        );\n\n        List<Planet> result = bf(planets, \"Jupiter\", \"Neptune\");\n        System.out.println(result);\n        result = bf(planets, \"Earth\", \"Mercury\");\n        System.out.println(result);\n        result = bf(planets, \"Mercury\", \"Uranus\");\n        System.out.println(result);\n    }\n\n    public static List<Planet> bf(List<Planet> planets, String planet1, String planet2) {\n        Planet p1 = findPlanetByName(planets, planet1);\n        if (p1 == null) return Collections.emptyList();\n\n        Planet p2 = findPlanetByName(planets, planet2);\n        if (p2 == null) return Collections.emptyList();\n\n        List<Planet> result = new ArrayList<>();\n        for (Planet planet : planets) {\n            if (planet.getName().equals(p1.getName()) || planet.getName().equals(p2.getName())) continue;\n            double orbit1 = p1.getOrbit();\n            double orbit2 = p2.getOrbit();\n            if ((orbit1 <= planet.getOrbit() && planet.getOrbit() < orbit2) || (planet.getOrbit() > orbit1 && orbit2 <= planet.getOrbit())) {\n                result.add(planet);\n            }\n        }\n        return result;\n    }\n\n    public static Planet findPlanetByName(List<Planet> planets, String name) {\n        for (Planet planet : planets) {\n            if (planet.getName().equals(name)) return planet;\n        }\n        return null;\n    }\n\n    public static class Planet {\n        private final String name;\n        private final double orbit;\n\n        public Planet(String name, double orbit) {\n            this.name = name;\n            this.orbit = orbit;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public double getOrbit() {\n            return orbit;\n        }\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "import java.util.*;\n\nclass XOrY {\n    public static int xOrY(int n, int x, int y) {\n        boolean[] primes = new boolean[n + 1];\n        Arrays.fill(primes, true); // All numbers are initially considered prime\n        primes[0] = false;\n        primes[1] = false;\n\n        for (int i = 2; i * i <= n; i++) {\n            if (primes[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n\n        return primes[n] ? x : y;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "public static int doubleTheDifference(List<Object> lst) {\n    int sum = 0;\n    for (Object number : lst) {\n        if (number instanceof Integer && number > 0 && ((Integer) number) % 2 != 0) {\n            sum += Math.pow(((Integer) number), 2);\n        }\n    }\n    return sum;\n}"}
{"task_id": "java/73", "language": "java", "completion": "public static String strongestExtension(String className, List<String> extensions) {\n    int maxStrength = Integer.MIN_VALUE;\n    String maxStrengthExt = \"\";\n\n    for (String ext : extensions) {\n        int capCount = 0, smallCount = 0;\n        for (int i = 0; i < ext.length(); i++) {\n            if (Character.isUpperCase(ext.charAt(i))) {\n                capCount++;\n            } else if (Character.isLowerCase(ext.charAt(i))) {\n                smallCount++;\n            }\n        }\n        int strength = capCount - smallCount;\n\n        // If the strength is greater than the current max, update it and the extension with the maximum strength\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            maxStrengthExt = ext;\n        } else if (strength == maxStrength && !extensions.indexOf(ext) < extensions.indexOf(maxStrengthExt)) {\n            // If the strengths are equal, choose the extension that comes first in the list\n            maxStrengthExt = ext;\n        }\n    }\n\n    return className + \".\" + maxStrengthExt;\n}"}
{"task_id": "java/74", "language": "java", "completion": "public static Boolean cycpatternCheck(String a, String b) {\n    String ab = a + b; // concatenate the two strings\n    for (int i = 0; i < b.length(); i++) {\n        if (ab.contains(b.substring(i))) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "java/75", "language": "java", "completion": "import java.util.*;\n\npublic class IntToMiniRoman {\n\n /**\n * Given a positive integer, obtain its roman numeral equivalent as a string,\n * and return it in lowercase.\n * Restrictions: 1 <= num <= 3999\n\n * Examples:\n * >>> int_to_mini_roman(19) == \"xix\"\n * >>> int_to_mini_roman(152) == \"clii\"\n * >>> int_to_mini_roman(426) == \"cdxxvi\"\n *\n */\n public static String intToMiniRoman(int number) {\n if (number <= 0 || number > 3999) {\n throw new IllegalArgumentException(\"Number must be between 1 and 3999.\");\n }\n\n Map<Integer, String> numerals = new HashMap<>();\n numerals.put(1, \"i\");\n numerals.put(5, \"v\");\n numerals.put(10, \"x\");\n numerals.put(50, \"l\");\n numerals.put(100, \"c\");\n numerals.put(500, \"d\");\n numerals.put(1000, \"m\");\n\n StringBuilder result = new StringBuilder();\n for (Map.Entry<Integer, String> entry : numerals.entrySet()) {\n int value = entry.getKey();\n int count = number / value;\n while (count > 0) {\n result.append(numerals.get(value));\n number -= value * count;\n count--;\n }\n }\n return result.toString();\n }\n}"}
{"task_id": "java/76", "language": "java", "completion": "import java.util.*;\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // Check if the sides can form a right-angled triangle by applying the Pythagorean theorem\n        return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c * c + a * a == b * b);\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "import java.util.*;\n\npublic class Solve {\n    public static String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        return s.length() == 0 || !result.toString().contains(\"\" + (char) Character.toUpperCase('a'))\n            && !result.toString().contains(\"\" + (char) Character.toLowerCase('A')) ? new StringBuffer(result).reverse().toString() : result.toString();\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import org.apache.commons.codec.digest.DigestUtils;\n\nclass StringToMd5 {\n    // ... (your existing imports)\n\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n        if (text.isEmpty()) return null;\n\n        try {\n            return DigestUtils.md5Hex(text);\n        } catch (Exception e) {\n            // Handle exceptions if necessary\n            throw new RuntimeException(\"Unexpected error occurred during MD5 hashing.\", e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\n\npublic class GenerateIntegers {\n    public static List<Integer> generateIntegers(int a, int b) {\n        // Edge cases\n        if (a > b || a < 2) return Collections.emptyList();\n\n        // Using Stream API for simplicity and better readability\n        return IntStream.rangeClosed(Math.max(a, 2), Math.min(b, Integer.MAX_VALUE))\n                .filter(num -> num % 2 == 0)\n                .sorted()\n                .boxed()\n                .toList();\n    }\n}"}

{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if len(numbers) <= 1:\n        return False\n\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n\n    return False"}
{"task_id": "HumanEval/1", "completion": "import re\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Use a regex pattern to find all balanced groups in the string\n    matches = re.findall(r'\\(([^()]*)\\)', paren_string)\n    result = []\n\n    # For each match, add its content (the inner parenthesized string) to the result list\n    for match in matches:\n        result.append(match)\n\n    # If there's a remaining part of the input string after all matches are found,\n    # it means that we have an unbalanced or nested group and this function should fail\n    if paren_string[0] != '(' or paren_string[-1] != ')':\n        raise ValueError(\"Input string contains unbalanced or nested parentheses\")\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and the mean of the dataset:\n    MAD = average | x - mean(x) |\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"List cannot be empty\")\n\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return [x for i, x in enumerate(numbers) if i == 0 or x != numbers[i - 1]] + [delimeter] * (len(numbers) - 1)"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def dfs(index, level):\n        if index >= len(paren_string):\n            return\n\n        if paren_string[index] == '(':\n            dfs(index + 1, level + 1)\n        elif paren_string[index] == ')':\n            dfs(index + 1, level - 1)\n            max_level.append(max(level, max_level))\n\n    max_level = []\n    for group in paren_string.split():\n        dfs(0, 0)\n\n    return max_level\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring in s, strings))"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n\n    sum_ = 0\n    product_ = 1\n\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n\n    return (sum_, product_)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    rolling_max_sequence = [numbers[0]]\n\n    for num in numbers[1:]:\n        max_num = max(num, max_num)\n        rolling_max_sequence.append(max_num)\n\n    return rolling_max_sequence"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n        Algorithm idea is simple:\n        - Find the longest postfix of supplied string that is a palindrome.\n        - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    # Find the longest palindromic substring from both ends\n    max_length = 0\n    start_index = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if (j - i + 1) > max_length:\n                # Check if the substring is a palindrome\n                if string[i:j+1] == string[j:i-1:-1]:\n                    max_length = j - i + 1\n                    start_index = i\n\n    # If there is no palindromic substring, return the original string as it's already a palindrome\n    if max_length == 0:\n        return string\n\n    # Append the reverse of the found palindromic substring at the beginning\n    prefix = string[:start_index]\n    palindrome = string[start_index:start_index+max_length][::-1]\n    return palindrome + prefix"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n\n    if len(a) > len(b):\n        result += a[len(b):]\n    elif len(a) < len(b):\n        result += b[len(a):]\n\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    max_length = len(strings[0])\n    longest_string = strings[0]\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "import doctest\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Your implementation here...\n    pass\n\nif __name__ == \"__main__\":\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)+1):\n        result.append(string[:i])\n    return result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = ''\n    for i in range(n + 1):\n        sequence += str(i) + ' ' if i < n else str(n)\n    return sequence.rstrip(' ')"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    character_set = set()\n\n    for char in string:\n        if char in character_set:\n            continue  # If we've already seen this character, skip it.\n\n        character_set.add(char)  # Otherwise, add the character to our set.\n\n    return len(character_set)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n        else:\n            raise ValueError(\"Invalid musical note\")\n    return notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    2\n    \"\"\"\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\nnumbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n\ndef sort_numbers(s: str) -> str:\n    \"\"\"Sorts space-delimited string of numbers from 'zero' to 'nine'\"\"\"\n    words = s.split()\n    words.sort(key=lambda word: numbers.index(word))\n    return \" \".join(words)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n\n    min_diff = float('inf')\n    closest1, closest2 = None, None\n    for i, num1 in enumerate(numbers):\n        for num2 in numbers[i + 1 : ]:\n            diff = abs(num1 - num2)\n            if diff < min_diff:\n                min_diff = diff\n                closest1, closest2 = num1, num2\n    return sorted([closest1, closest2])"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements\")\n\n    minimum = min(numbers)\n    maximum = max(numbers)\n\n    return [(x - minimum) / (maximum - minimum) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(type(5), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for divisor in range(1, n):  # loop from 1 to n-1 (exclusive)\n        if n % divisor == 0:  # if the remainder of the division is 0\n            return divisor  # return the divisor\n    return n  # if no divisors were found, return the number itself"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    if n <= 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        factors = []\n        i = 2\n        while True:\n            if n % i == 0:\n                count = 0\n                while n % i == 0:\n                    n //= i\n                    count += 1\n                factors.append(i) * count\n                if n <= i:\n                    break\n            i += 1\n        return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\nimport unittest\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\nclass TestConcatenateFunction(unittest.TestCase):\n    def test_concatenate_empty(self):\n        self.assertEqual(concatenate([]), '')\n\n    def test_concatenate_one_element(self):\n        self.assertEqual(concatenate(['a']), 'a')\n\n    def test_concatenate_multiple_elements(self):\n        self.assertEqual(concatenate(['a', 'b', 'c']), 'abc')\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "HumanEval/29", "completion": "strings = ['abc', 'bcd', 'cde', 'array', 'apple']\nfiltered_strings = filter_by_prefix(strings, 'a')\nprint(filtered_strings)  # Output: ['abc', 'array']"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs, x):\n    return sum([coeff * x**i for i, coeff in enumerate(xs)])"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    sorted_indices = []\n    unsorted_indices = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_indices.append(i)\n        else:\n            unsorted_indices.append(i)\n\n    sorted_values = sorted(list(filter(lambda x: x in sorted_indices, l)))\n    return [l[i] if i not in sorted_indices else sorted_values[i // 3] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if str(i).count('7') > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices = [i for i, _ in enumerate(l) if i % 2 == 0]\n    sorted_even = sorted([l[i] for i in even_indices])\n    return [l[i] if i % 2 else sorted_even.pop(0) for i, _ in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group.\n    groups = [group[-1] + group[0: -1] for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(3, sqrt_n+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Argument must be a positive integer.\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n):\n    \"\"\"\n    Returns the n-th Fibonacci number that is also a prime.\n    \"\"\"\n    while True:\n        fib = fibonacci(n)\n        if is_prime(fib):\n            return fib\n        n += 1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    # Check that the list has at least 4 elements (since we want to find three distinct elements)\n    if len(l) < 4:\n        return False\n\n    # Loop through all possible combinations of three elements in the list\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                # Check if the sum of the current triple is zero\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    # If we've gone through all possible combinations and haven't found a triple that sums to zero, return False\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    \"\"\"\n    This function calculates the number of collisions in a race of n cars moving left and right.\n    \"\"\"\n    # Initialize lists to store positions of each car moving left and right respectively\n    left = [0] * (2*n)\n    right = [0] * (2*n)\n\n    # Fill the list with values from 1 to 2n, evenly distributed between left and right cars\n    for i in range(n):\n        left[i] = i+1\n        right[n+i] = i+1\n\n    # Simulate the movement of cars. In each step, we check for collisions.\n    step = 1\n    while True:\n        # Move the left cars to the right by one position and check for collisions\n        for car in range(n-1, -1, -1):\n            if left[car] + step == right[car]:\n                return step\n            left[car+1] = left[car]\n\n        # Move the right cars to the left by one position\n        for car in range(n-1, -1, -1):\n            right[car+1] = right[car]\n\n        # Increase the step (time)\n        step += 1"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [i + 1 for i in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return ''\n    else:\n        digit = '0123456789ABCDEF'[x // base]\n        return change_base(x % base, base) + digit"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 3:\n        return 0\n    fib_sequence = [0] * (n + 1)\n    fib_sequence[0], fib_sequence[1], fib_sequence[2], fib_sequence[3] = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        fib_sequence[i] = fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3] + fib_sequence[i - 4]\n\n    return fib_sequence[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n\n    if n % 2 == 0:  # even number of elements\n        return (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:  # odd number of elements\n        return sorted_list[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Convert the input string to lowercase and remove non-alphanumeric characters\n    text = ''.join(c.lower() for c in text if c.isalnum())\n\n    # Reverse the cleaned string\n    reversed_text = text[::-1]\n\n    # Check if the original and reversed strings are equal\n    return text == reversed_text"}
{"task_id": "HumanEval/49", "completion": "def powmod(base, exponent, modulus):\n    \"\"\"Calculate base^exponent modulo modulus.\"\"\"\n    result = 1\n    while exponent > 0:\n        if exponent & 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent >>= 1\n    return result\n\ndef modp(n, p):\n    \"\"\"Return 2^n modulo p.\"\"\"\n    return powmod(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False  # If any number is greater than or equal to t, return False.\n    return True  # Otherwise, return True (if all numbers are less than t)."}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    chars_set_s0 = set(s0)\n    chars_set_s1 = set(s1)\n\n    if len(chars_set_s0) != len(chars_set_s1):\n        return False\n\n    return chars_set_s0 == chars_set_s1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        raise ValueError(\"Argument should be a positive integer.\")\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n        return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(lst):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    if not lst:\n        return False\n\n    direction = lst[0] > lst[1]\n\n    for element in lst[1:]:\n        if direction ^ (element > lst[-1]):  # Comparing with the last element to check for monotonic decreasing.\n            return False\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = set(l1) & set(l2)\n    common_elements = sorted(list(common_elements))\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1.\"\"\"\n\n    # Check if n is prime itself\n    if n <= 3:\n        return n\n\n    i = 2\n    while True:\n        if n % i == 0:\n            return i\n        i += 1\n        if i*i > n:\n            # If no factor is found, it means n is a prime number itself\n            return n"}
{"task_id": "HumanEval/60", "completion": ">>> sum_to_n(30)\n465"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':  # If the stack is empty or the last element is not an opening bracket\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i in range(1, len(xs) + 1):\n        coefficient = i * xs[i-1] if i > 0 else 0\n        result.append(coefficient)\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    # Initialize the first three FibFib numbers\n    f = [0, 0, 1]\n\n    # Calculate and store the remaining FibFib numbers up to n\n    for i in range(3, n + 1):\n        f.append(f[i - 1] + f[i - 2] + f[i - 3])\n\n    return f[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Initialize a count variable to store the number of vowels\n    count = 0\n\n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the current character is a vowel (case-insensitive)\n        if char.lower() in \"aeiouy\":\n            # If it's a vowel, increment the count variable\n            count += 1\n\n    # Return the final count of vowels\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    shifted = str(x)[shift:] + str(x)[:shift]\n    if len(shifted) < len(str(x)):\n        return shifted[::-1]\n    else:\n        return shifted"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n, total_fruits):\n    # Split the string to get the number of apples and oranges\n    parts = s.split()\n    apples = int(parts[0].split(' ')[-1])\n    oranges = int(parts[1].split(' ')[-1])\n\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = total_fruits - apples - oranges\n\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Find the smallest even value and its index\n    smallest_even = None\n    smallest_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and (smallest_even is None or val <= smallest_even):\n            smallest_even = val\n            smallest_index = i\n\n    # Return an empty list if no even values were found\n    if smallest_even is None:\n        return []\n\n    # Return the smallest even value and its index\n    else:\n        return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    for n in freq.keys():\n        if freq[n] >= n and n > 0:\n            return n\n\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n\n    result = []\n    for value in sorted_lst:\n        if len(result) == 0 or result[-1] < value:\n            result.append(value)\n        else:\n            index = lst.index(value)\n            del lst[index]  # Remove the current value from the list\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not q or len(q) == 1:\n        return q[0] <= w\n\n    # Check if the list is palindrome (symmetric)\n    for i in range(len(q) // 2):\n        if q[i] != q[-i-1]:\n            return False\n\n    # Check if the sum of elements is less than or equal to w\n    return sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i+1)]:\n            changes += 1\n    return min(changes, len(arr) - changes)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if sum([len(str_) for str_ in lst1] < sum([len(str_) for str_ in lst2])):\n        return lst1\n    elif sum([len(str_) for str_ in lst1]) == sum([len(str_) for str_ in lst2]):\n        return lst1 if len(lst1) < len(lst2) else lst2\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Check if given number is the product of three primes.\"\"\"\n\n    if a <= 1 or (a == 4):\n        return False\n\n    # Check for factors up to the square root of 'a'\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n\n    # If no factor found up to the square root, the number is likely a product of three primes\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return False\n    elif x == n:\n        return True\n    elif x < n:\n        return False\n    else:\n        root = math.sqrt(x)\n        for i in range(2, int(root) + 1):\n            if n ** i == x:\n                return False\n        return n ** (int(root)) == x"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    c = int(math.cbrt(a))  # calculate the cube root of a as an integer\n    return (c**3 == a)      # check if the calculated cube equals to the input number"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = 0\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17]\n\n    for digit in num.upper():\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if int(digit, 16) in prime_numbers:\n                prime_digits += 1\n\n    return prime_digits"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n\n    # Add leading 'db' and trailing 'db'\n    binary = \"db\" + binary[::-1] + \"db\"\n\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    for i in range(len(s) - 2):\n        if s[i : i + 3] == s[i + 1 : i + 4] == s[i + 2 : i + 5]:\n            return False\n    # If we've checked all groups of three without finding a repeating sequence, the string is happy.\n    return len(s) >= 3"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = [\"E\", \"D-\", \"D+\", \"D\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\", \"A-\", \"A\", \"A+\"]\n    result = []\n\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_index = 0\n        elif gpa > 3.7:\n            letter_index = 1\n        elif gpa > 3.3:\n            letter_index = 2\n        elif gpa > 3.0:\n            letter_index = 3\n        elif gpa > 2.7:\n            letter_index = 4\n        elif gpa > 2.3:\n            letter_index = 5\n        elif gpa > 2.0:\n            letter_index = 6\n        elif gpa > 1.7:\n            letter_index = 7\n        elif gpa > 1.3:\n            letter_index = 8\n        elif gpa > 1.0:\n            letter_index = 9\n        elif gpa > 0.7:\n            letter_index = 10\n        else:\n            letter_index = 11\n\n        result.append(letter_grades[letter_index])\n\n    return result"}
{"task_id": "HumanEval/82", "completion": "def is_prime(num):\n    \"\"\"Check if a given number is a prime number\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the length of a given string is a prime number\"\"\"\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Initialize variables for starting and ending digits\n    starting_ones = 9 * (10 ** (n - 1))\n    ending_ones = 10 * (10 ** (n - 1)) - 1\n\n    # Add one to the count of ending ones because we want to include the number itself\n    ending_ones += 1\n\n    # Return the total count\n    return starting_ones + ending_ones"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n\n    # Convert N to binary string\n    bin_str = bin(N)[2:]\n\n    # Sum the values of each digit (0 or 1) in binary\n    total = sum([int(digit) for digit in bin_str])\n\n    # Return the binary representation of the total\n    return bin(total)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    result = 0\n    index = 1 # Start from first odd index (index 0 is the start of the sequence)\n\n    for num in lst:\n        if index % 2 == 1 and num % 2 == 0:\n            result += num\n\n        index += 1\n\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of the input string by arranging the characters in ascending order of their ASCII values, while maintaining the original word and space ordering.\n    \"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_characters = ''.join(sorted(list(word)))\n        result.append(sorted_characters)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    results = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                results.append((i, len(lst[i]) - j))\n    return sorted(results)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sum_of_first_and_last = sum((array[0], array[-1]))\n    sorted_array = sorted(array, reverse=(sum_of_first_and_last % 2 == 1))\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Encrypt a given string using rotated alphabet.\"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():  # Ignore non-alphabet characters like spaces, numbers, etc.\n            ascii_offset = ord('a')  # ASCII value of 'a' for lowercase and 'A' for uppercase\n            rotated_ascii = (ord(char) - ascii_offset + 26) % 26 + ascii_offset  # Rotate alphabet by 26 * 2\n            result.append(chr(rotated_ascii))  # Append the rotated character to the result list\n        else:\n            result.append(char)  # If it's not an alphabet, just append it as is\n    return ''.join(result)  # Join all characters in the result list into a single string and return"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n\n    return lst[1] if lst[1] != lst[-1] else None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    bored = 0\n    for i in range(len(S)):\n        if i == 0 or S[i - 1] in ['.', '!', '?']:\n            if S[i].lower() == \"i\":\n                bored += 1\n    return bored"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    sum1 = x + y\n    sum2 = y + z\n    sum3 = x + z\n\n    return (sum1 == x or sum1 == y or sum1 == z or\n            sum2 == x or sum2 == y or sum2 == z or\n            sum3 == x or sum3 == y or sum3 == z)"}
{"task_id": "HumanEval/93", "completion": "vowels = 'aeiou'\ndef encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():  # checks if it's an alphabetic character\n            if char.lower() in vowels:  # checks if it's a vowel\n                new_char = chr(((ord(char) - ord('a')) + 3) % 26) + 'a'  # calculate the new character based on its position in the alphabet\n            elif char.islower():  # checks if it's lowercase\n                encoded_message += char.upper()  # uppercase it if it's already a vowel or not a vowel\n            else:\n                encoded_message += char  # leave non-alphabetic characters alone\n        else:\n            encoded_message += char  # leave non-alphabetic characters alone\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    limit = int(sqrt(n))\n    for i in range(3, limit + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    total = 0\n    while n != 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total\n\ndef skjkasdkd(lst):\n    prime_max = None\n    max_sum = 0\n    for num in lst:\n        if is_prime(num) and (prime_max is None or num > prime_max):\n            prime_max = num\n    if prime_max is not None:\n        max_sum = sum_of_digits(prime_max)\n    return max_sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n\n    case = next(iter(dict.keys()))[0]\n    for key in dict.keys():\n        if (case not in key) or (key[1:] != case.lower() * len(key[1:])):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns\n       the product of their unit digits.\n       Assume the input is always valid.\n       Examples:\n       multiply(148, 412) should return 16.\n       multiply(19, 28) should return 72.\n       multiply(2020, 1851) should return 0.\n       multiply(14,-15) should return 20.\n    \"\"\"\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product = unit_digit_a * unit_digit_b\n    return product"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = \"AEIOU\"\n    count = 0\n    for i, char in enumerate(s.upper()):  # iterate over the string and convert all characters to uppercase\n        if (i + 1) % 2 == 0:  # check if current index is even\n            if char in vowels:  # check if character is a vowel\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the value from string to float\n    number = float(value)\n\n    # If the absolute value of the number is less than 1e-5 (a very small positive number), we round to the nearest integer.\n    if abs(number) < 1e-5:\n        return int(number)\n\n    # Find the closest integer using the built-in `math.floor()` and `math.ceil()` functions.\n    # Round away from zero by choosing the function that gives a larger absolute value.\n    if abs(math.floor(number)) >= abs(math.ceil(number)):\n        return math.floor(number)\n    else:\n        return math.ceil(number)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - one more than the current level if n is odd.\n        - two more than the current level if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    current_level = n\n\n    while current_level > 0:\n        next_level = current_level + 1 if current_level % 2 == 0 else current_level + 2\n        levels.append(next_level)\n        current_level = next_level - 1\n\n    return levels[::-1]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Given a string of words separated by commas or spaces, return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    # Find the smallest even number that is greater than or equal to x\n    smallest_even = max((2, x), key=lambda num: num % 2 == 0)\n\n    # Check if there's a biggest even number in the range [x, y] inclusive\n    biggest_even = None\n    for num in range(smallest_even, y+1):\n        if num % 2 == 0 and num > smallest_even:\n            biggest_even = num\n            break\n\n    # Return the biggest even number found or -1 if no such number exists\n    return biggest_even if biggest_even else -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"Compute the average of integers from n through m (inclusive).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    total = (m + n) // 2\n    for num in range((n + total) // 2 + 1, m + 1):\n        total += num\n\n    average = total // ((m - n) + 1)\n\n    binary = format(average, '0b')\n    return binary"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def sorted_if(iterable, func):\n        return sorted([i for i in iterable if func(i)])\n\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(d % 2 != 0 for d in str(num))]\n\n    # Sort only the filtered numbers (since they all have odd digits)\n    return sorted_if(filtered, lambda n: True)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    sorted_arr = sorted([i for i in arr if 1 <= i <= 9])\n    reversed_arr = sorted_arr[::-1]\n    result = [names[i] for i in reversed_arr]\n    return result or []"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = [0] * n\n\n    for i in range(n):\n        if i % 2 == 0:\n            # Factorial calculation using recursion\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result[i] = factorial\n        else:\n            # Sum from 1 to i\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            result[i] = sum\n\n    return result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            even += 1\n        elif is_palindrome(i) and i % 2 != 0:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "def sum_of_digits(n):\n    \"\"\"\n    Calculate the sum of digits of a number n.\n    >>> sum_of_digits(-123) == 6\n    >>> sum_of_digits(123) == 6\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    result = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through both lists\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n\n    for num in lst2:\n        if num % 2 != 0:\n            odd_count += 1\n\n    # Check if it's possible to exchange enough numbers\n    if even_count + odd_count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "import collections\n\ndef histogram(test):\n    \"\"\"Given a string representing space-separated lowercase letters, return a dictionary of the letter with the most repetition and containing the corresponding count.\"\"\"\n    if not test:\n        return {}\n\n    # Use built-in Counter to count occurrences of characters in test\n    counter = collections.Counter(test)\n\n    # Return all keys (letters) in the dictionary if they have the same maximum count, otherwise just the key with the maximum count\n    return {k: v for k, v in counter.items() if v == max(counter.values())} \\\n           if len(counter) > 1 and any(v == max(counter.values()) for _, v in counter.items()) \\\n           else counter"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove characters from s that are in c\n    filtered_s = [char for char in s if char not in c]\n    reversed_s = filtered_s[::-1]  # Reverse the filtered string\n\n    # Check if the reversed string is a palindrome\n    if filtered_s == reversed_s:\n        result = (reversed_s, True)\n    else:\n        result = (filtered_s, False)\n\n    return result"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's are replaced by the number of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1\", \"the number of odd elements 8\"]\n    \"\"\"\n    result = []\n    for i, string in enumerate(lst):\n        count = sum(int(digit) % 2 for digit in string)\n        result.append(f\"the number of odd elements {count}\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_so_far = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_so_far:\n            min_so_far = current_sum\n        elif current_sum > min_so_far:\n            current_sum = 0\n\n    return min_so_far"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    water_poured = 0\n    for i in range(rows):\n        water_remaining = min(capacity, sum([grid[i][j] for j in range(cols)]))\n        if water_remaining > 0:\n            grid[i] = [x - y if x != 0 else 0 for x, y in zip(grid[i], [water_remaining]*cols)]\n            water_poured += water_remaining\n    return water_poured"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    sorted_arr = sorted([(len(bin(num)[2:]).count('1'), num) for num in arr], key=lambda x: (x[0], -x[1]))\n    return [num[1] for num in sorted_arr]"}
{"task_id": "HumanEval/117", "completion": "vowels = set(\"aeiou\")\n\ndef is_consonant(char):\n    return char.lower() not in vowels\n\ndef select_words(s, n):\n    words = s.split()\n    result = []\n\n    if not words:\n        return result\n\n    for word in words:\n        if len(word) < 2:\n            continue\n\n        count = sum(1 for char in word if is_consonant(char))\n\n        if count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    vowel_indexes = []\n\n    for index, letter in enumerate(word):\n        if letter in vowels:\n            vowel_indexes.append(index)\n\n    if len(vowel_indexes) == 0:\n        return \"\"\n\n    vowel_index = vowel_indexes[-1]\n    for index, letter in reversed(list(enumerate(word[vowel_index:]))):\n        if letter not in vowels or (index != 0 and word[index - 1] not in vowels):\n            prev_index = index - 1\n            break\n    else:\n        prev_index = len(word) - 1\n\n    return word[prev_index]"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s = []\n    for string in lst:\n        for char in string:\n            if char == '(':\n                s.append(char)\n            elif char == ')':\n                if not s or s[-1] != '(':\n                    return 'No'\n                s.pop()\n    return 'Yes' if not s else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if not arr:\n        return []\n    heapq.heappush(arr, -heapq.heappop(arr))  # initializing the max heap with k largest elements in arr\n    heap = [-x for x in arr]\n    n = len(heap)\n    result = [0] * k\n    i = 0\n    while i < n:\n        if i + k <= n:\n            result[i%k] = -heapq.heappop(heap)\n            heapq.heappush(heap, -heapq.heappop(heap))\n        else:\n            result[i%k] = -heapq.heappop(heap)\n        i += 1\n    return [x*-1 for x in result]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    total = 0\n    for i, num in enumerate(lst):\n        if (i + 1) % 2 == 0 and num % 2 != 0:\n            total += num\n    return total"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n            # Check if the new number is odd, and if it's already in the list, continue with the next number.\n            if n not in result or n < min(result):\n                result.append(n)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        elif month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()  # Split by whitespaces first\n    if not words:  # If there are no words, check for commas\n        words = txt.split(\",\")\n    if not words and any(ord(c) % 2 == 1 for c in txt):  # If there are no words or commas, split by characters with odd order in alphabet\n        words = [txt[i:i+2] for i in range(len(txt)) if (ord(txt[i]) % 2 != 0)]\n    return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst or len(lst) == 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end1 or start2 > end2:  # Check if the intervals don't intersect\n        return \"NO\"\n\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n\n    if start_intersection > end_intersection:  # If there is no intersection, return NO\n        return \"NO\"\n\n    length = end_intersection - start_intersection + 1\n    prime = True\n\n    if length <= 1:  # 0 and 1 are not prime numbers\n        prime = False\n    else:\n        for number in range(2, length):\n            if length % number == 0:\n                prime = False\n                break\n\n    return \"YES\" if prime else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    for num in arr:\n        product *= (num > 0) - (num < 0)\n\n    sum_magnitudes = sum([abs(num) for num in arr])\n    return sum_magnitudes * product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def dfs(x, y):\n        if len(path) == k:\n            # If the current path is of length k, compare it with the minimum path found so far\n            if len(min_path) > 0 and grid[min_path[-1][0]][min_path[-1][1]] > grid[x][y]:\n                return\n            min_path = path[:]\n        total = 0\n        for nx, ny in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] not in path:\n                path.append((nx, ny))\n                total += 1\n                dfs(nx, ny)\n                path.pop()\n                total -= 1\n        if total == 0 and len(path) < k:\n            return\n\n    min_path = []\n    path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j)\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 1 + 3 = 6  # Corrected calculation for tri(3)\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2]\n    \"\"\"\n    tribo = [0, 3]  # Initialize the list with first two elements of Tribonacci sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribo.append(tribo[i - 1] + (i / 2))\n        else:\n            tribo_sum = tribo[i - 3] + tribo[i - 2] + tribo[i - 1]\n            tribo.append(tribo_sum)\n    return tribo[:n+1]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n       Return 0 if all digits are even.\n       For example:\n       digits(1)  == 1\n       digits(4)  == 0\n       digits(235) == 15\n       \"\"\"\n    # Initialize the product to be returned and a variable to store the current digit\n    product = 0\n    current_digit = 0\n\n    # Iterate through each digit of n, starting from the rightmost one (units place)\n    while n > 0:\n        # Extract the rightmost digit and store it in the variable current_digit\n        current_digit = n % 10\n\n        # If the current digit is odd, update the product\n        if current_digit % 2 != 0:\n            product *= current_digit\n\n        # Move to the next number by dividing it by 10\n        n //= 10\n\n    return product or 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    result = sum([int(ceil(num))**2 for num in lst])\n    return result"}
{"task_id": "HumanEval/134", "completion": "import re\n\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n\n    last_space = txt.rfind(\" \")\n\n    if last_space == -1:  # If there's no space, it means we're at the end of the string\n        last_char = txt[-1]\n        if re.match(r\"[a-zA-Z]\", last_char):  # Check if last character is a letter and not part of a word\n            return True\n        else:\n            return False\n    else:\n        last_char = txt[last_space + 1 :]\n        if re.match(r\"[a-zA-Z]\", last_char):  # Check if last character is a letter and not part of a word\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if len(arr) == 0:\n        return -1\n\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] >= arr[i]:\n            max_index = i\n        else:\n            break\n\n    return max_index if max_index < len(arr) - 1 else -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    max_neg = float('-inf')\n    min_pos = float('inf')\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n        elif num > 0 and num < min_pos:\n            min_pos = num\n\n    if max(lst) >= 0:\n        return None, min_pos\n    elif min(lst) <= 0:\n        return max_neg, None\n    else:\n        return None, None"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    elif (isinstance(a, str) or isinstance(b, str)) and (\",\" in a or \".\" in a or \".\" in b):\n        a = float(a.replace(\",\", \".\")) if \",\" in a else a\n        b = float(b.replace(\",\", \".\")) if \",\" in b else b\n        return compare_one(a, b)\n    elif isinstance(a, str) and isinstance(b, int):\n        a = float(a.replace(\",\", \".\")) if \",\" in a else a\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, str):\n        b = float(b.replace(\",\", \".\")) if \",\" in b else b\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n\ncompare_one(1, 2.5)  # 2.5\ncompare_one(1, \"2,3\")  # '2,3'\ncompare_one(\"5,1\", \"6\")  # '6'\ncompare_one(\"1\", 1)  # None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n\n    def helper(remaining, nums=[]):\n        if remaining == 0:\n            return True\n\n        if remaining < 0 or len(nums) > 4:\n            return False\n\n        for i in range(2, min(remaining, len(nums)+2)):\n            helper(remaining - i, nums + [i])\n\n        return False\n\n    return helper(n)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Base case: if n equals to 1, then the result is simply 1 (since 1! = 1)\n    if n == 1:\n        return 1\n\n    # Recursive case: calculate the product of all numbers from n down to 1 and multiply it by n!\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(' ', '_')\n    return '_' + text.replace('__', '-') + '_'"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    pattern = r\"^[a-zA-Z][a-zA-Z0-9_.]{0,29}[.](txt|exe|dll)$\"\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    # Split the sentence into a list of words\n    words = sentence.split()\n\n    # Create an empty list to store prime length words\n    result = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is a prime number\n        if len(word) > 1 and all([x % 2 != 0 or x > 3 for x in range(3, int(len(word)**0.5)+1)]):\n            result.append(word)\n\n    # Join the words in the result list back into a single string with spaces between them\n    return ' '.join(result) if result else ''"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Simplify given expressions x * n.\"\"\"\n    (x_num, x_den), (n_num, n_den) = map(tuple, [x.split('/'), n.split('/')])\n    if x_num == n_den and n_num == x_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, orders them based on their index in original list.\n    \"\"\"\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    sorted_nums = sorted(nums, key=digit_sum)\n\n    # If there are several items with similar sum of their digits, order them based on their index in original list.\n    idx = [nums.index(n) for n in nums]\n    return sorted([n for _, n in sorted(zip(idx, sorted_nums))])"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0 and num > 10:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1.lower() not in planets or planet2.lower() not in planets:\n        return tuple()\n\n    indices = [planets.index(planet) for planeta in [planet1, planet2]]\n    between_indices = sorted(set(range(min(indices), max(indices)+1)), reverse=True)\n\n    result = [planets[i] for i in between_indices if i >= min(indices)]\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def list_sort(lst):\n    # Filter out words with odd lengths\n    filtered_words = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list first by length, then alphabetically if lengths are equal\n    sorted_words = sorted(filtered_words, key=len)\n\n    return sorted_words"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"Check if a given number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number and y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    If the input list is empty, return 0.\n    '''\n    # Filter out non-integer or negative values\n    filtered_lst = [num for num in lst if isinstance(num, int) and num >= 0]\n\n    # Calculate the squares of odd numbers and sum them up\n    square_sum = sum([num ** 2 for num in filtered_lst if num % 2 != 0])\n\n    return square_sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    extension_strength = {ext: len([c for c in ext if c.isupper()]) - len([c for c in ext if c.islower()]) for ext in extensions}\n    strongest_extensions = [ext for ext in extensions if extension_strength[ext] == max(extension_strength.values())]\n    return f'{class_name}.{strongest_extensions[0]}' if strongest_extensions else class_name"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring in the first word\"\"\"\n    # Create a list of all possible rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    # Check if any rotation is in the first word (using the in operator)\n    return any(rotation in a for rotation in rotations)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n\n    # Convert input to string\n    num_str = str(abs(num))\n\n    # Initialize counts for even and odd digits\n    count_even = 0\n    count_odd = 0\n\n    # Iterate through the characters in the string representation of the number\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    # Return a tuple with the counts of even and odd digits\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n\n    result = \"\"\n    for key, value in sorted(roman_numerals.items(), reverse=True):\n        quotient = number // key\n        number %= key\n        while quotient > 0:\n            result += value * quotient\n            quotient -= 1\n\n    return result"}
{"task_id": "HumanEval/157", "completion": "import math\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if math.isclose((a ** 2 + b ** 2), c ** 2, abs_tol=0):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "from collections import Counter\n\ndef find_max(words):\n    word_freq = {word: Counter(word) for word in words}\n    max_freq = max([len(value) for value in word_freq.values()])\n    max_words = [word for word, freq in word_freq.items() if len(freq) == max_freq]\n    return min(max_words, key=words.index)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need - number, remaining)\n    eaten_all_remaining = total_eaten == need\n    left_over = max(0, remaining - (need - number)) if eaten_all_remaining else 0\n    return [total_eaten, left_over]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    # Check if base case (only one element left in lists)\n    if len(operator) == 1 and len(operand) == 1:\n        return operand[0]\n\n    # Get the operator and operands for this step\n    op = operator.pop(0)\n    a = operand.pop(0)\n    b = do_algebra(operator, operand)\n\n    # Perform the operation based on the operator\n    if op == '+':\n        return a + b\n    elif op == '-':\n        return a - b\n    elif op == '*':\n        return a * b\n    elif op == '//':  # floor division\n        return a // b\n    elif op == '**':  # exponentiation\n        return a ** b\n\n# Example usage:\noperator = ['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = do_algebra(operator, array)\nprint(f\"The result is {result}\")  # Output: The result is 9"}
{"task_id": "HumanEval/161", "completion": "import string\n\ndef solve(s):\n    result = \"\"\n\n    # Iterate through each character in the input string\n    for char in s:\n        if char.isalpha():  # If it's a letter\n            result += chr(ord(char) ^ 32)  # Flip case (XOR with 32, which is ASCII difference between upper and lowercase)\n        else:\n            result += char  # Keep non-letters as they are\n\n    # If the string contains no letters, reverse the string\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        hasher = hashlib.md5()\n        hasher.update(text.encode())\n        return hasher.hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "def generate_even_digits(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_even_digits(2, 8) => [2, 4, 6, 8]\n    generate_even_digits(8, 2) => [2, 4, 6, 8]\n    generate_even_digits(10, 14) => []\n    \"\"\"\n\n    # Find the largest and smallest even numbers within the range\n    max_even = (b // 2 + 1) * 2\n    min_even = (a // 2) * 2\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Iterate over the numbers from the smallest even number to the largest one\n    for i in range(min_even, max_even + 1):\n        # Check if the current number is within the given range and extract its digits\n        if a <= i <= b:\n            # Convert the number to a string, get its digits using list comprehension,\n            # filter out the odd numbers, and append the remaining even digits\n            even_digits += [d for d in map(int, str(i)) if d % 2 == 0]\n\n    return sorted(even_digits)"}

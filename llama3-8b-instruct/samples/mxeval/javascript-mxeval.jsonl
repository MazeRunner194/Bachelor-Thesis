{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "def separate_paren_groups(parenstring):\n    result = []\n    stack = []\n    group = ''\n    \n    for char in parenstring:\n        if char == '(':\n            if not stack or stack[-1] != '(':\n                stack.append(char)\n                group += char\n        elif char == ')':\n            stack.pop()\n            group += char\n            \n            if not stack:\n                result.append(group)\n                group = ''\n                \n    return result\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n  const intPart = Math.floor(number);\n  return number - intPart;\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (i % 2 === 0) { // deposit\n      balance += operations[i];\n    } else { // withdrawal\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n  // Calculate the mean of the dataset\n  let mean = numbers.reduce((acc, current) => acc + current, 0) / numbers.length;\n\n  // Calculate the absolute difference between each number and the mean\n  let deviations = numbers.map(num => Math.abs(num - mean));\n\n  // Calculate the mean of these deviations (MAD)\n  let mad = deviations.reduce((acc, current) => acc + current, 0) / numbers.length;\n\n  return mad;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimeter) {\n  if (!numbers.length) return []; // edge case: empty list\n  const result = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter);\n    result.push(numbers[i]);\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenstring) {\n    const result = [];\n    let currentDepth = 0;\n    let nestedCount = 0;\n\n    for (let i = 0; i < parenstring.length; i++) {\n        if (parenstring[i] === '(') {\n            currentDepth++;\n            nestedCount++;\n        } else if (parenstring[i] === ')') {\n            currentDepth--;\n        }\n\n        result.push(currentDepth);\n    }\n\n    return result;\n}\n\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())'));"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "function filterBySubstring(strings, substring) {\n  return strings.filter(s => s.includes(substring));\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n  let sum = 0;\n  let product = 1;\n\n  for (let num of numbers) {\n    sum += num;\n    product *= num;\n  }\n\n  return [sum, product];\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n    let result = [];\n    let maxSoFar = numbers[0];\n    \n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > maxSoFar) {\n            maxSoFar = numbers[i];\n        }\n        result.push(maxSoFar);\n    }\n    \n    return result;\n}\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2])); // [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(s) {\n    let i = 0;\n    while (i < s.length && s[i] === s[s.length - 1 - i]) {\n        i++;\n    }\n    return s.slice(0, s.length - i) + s.slice(s.length - i).split(\"\").reverse().join(\"\");\n}\n\nconsole.log(makePalindrome('')); // ''\nconsole.log(makePalindrome('cat')); // 'catac'\nconsole.log(makePalindrome('cata')); // 'catac'"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "function stringXor(a, b) {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1' && b[i] === '1') {\n      result += '0';\n    } else if (a[i] === '1' || b[i] === '1') {\n      result += '1';\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) return \"none\";\n  let longestSoFar = strings[0];\n  for (let str of strings) {\n    if (str.length > longestSoFar.length) longestSoFar = str;\n  }\n  return longestSoFar;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (b !== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "function allPrefixes(string) {\n  const prefixes = [];\n  for (let i = 0; i <= string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i + ' ';\n  }\n  return result.trim(); // remove trailing space\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i].toLowerCase(); // convert to lowercase for case-insensitive comparison\n    if (!charSet.has(char)) {\n      charSet.add(char);\n    }\n  }\n  return charSet.size;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicstring) {\n  const noteLengths = [];\n  let currentNote = '';\n  for (const char of musicstring) {\n    if (char === 'o') {\n      // whole note, lasts 4 beats\n      noteLengths.push(4);\n    } else if (char === '|') {\n      // note duration separator\n      if (currentNote.length > 0) {\n        let length;\n        switch (currentNote) {\n          case 'o':\n            length = 4;\n            break;\n          case 'o|':\n            length = 2;\n            break;\n          case '.|':\n            length = 1;\n            break;\n        }\n        noteLengths.push(length);\n      }\n      currentNote = '';\n    } else if (char === '.') {\n      // quarter note, lasts 1 beat\n      currentNote += '.';\n    } else {\n      // half note, lasts 2 beats\n      currentNote += 'o|';\n    }\n  }\n  return noteLengths;\n}"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(string, substring) {\n    return Math.floor((string.length - substring.length + 1) / substring.length);\n}"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n\n  const words = numbers.split(' ');\n  const nums = words.map(word => numMap[word]);\n  return words.sort((a, b) => nums[words.indexOf(a)] - nums[words.indexOf(b)]).join(' ');\n}"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n    numbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    \n    for (let i = 0; i < numbers.length - 1; i++) {\n        const diff = numbers[i + 1] - numbers[i];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    \n    return closestPair;\n}"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((num) => (num - min) / (max - min));\n}"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values) {\n  return values.filter(value => typeof value === 'number' && !isNaN(value) && Math.floor(value) === value);\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "function strlen(string) {\n  return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      let count = 0;\n      while (n % i === 0) {\n        n /= i;\n        count++;\n      }\n      for (let j = 0; j < count; j++) {\n        factors.push(i);\n      }\n    }\n    i++;\n  }\n\n  if (n > 1) {\n    factors.push(n);\n  }\n\n  return factors;\n}"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n  const seen = {};\n  return numbers.filter(num => {\n    if (seen.hasOwnProperty(num)) {\n      return false; // don't include duplicates\n    }\n    seen[num] = true;\n    return true; // include unique elements\n  });\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(c => c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase()).join('');\n}"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "function concatenate(strings) {\n  return strings.reduce((acc, curr) => acc + curr, '');\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n    return strings.filter(str => str.startsWith(prefix));\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(num => num > 0);\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  for (var i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n  return l.map((x, i) => i % 3 === 0 ? [...l.slice(i, i+1)].sort().join('') : x);\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "/**\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfunction unique(l) {\n    return Array.from(new Set(l), Number).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n  return Math.max(...l);\n}"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n    let count = 0;\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && ('7' + '').repeat(Math.floor(String(i).length)).includes('7')) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n  return l.map((x, i) => i % 2 === 0 ? l.slice(0, i).concat(...l.slice(i+1)).sort()[i//2] : x);\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function primeFib(n) {\n  let fibNum = 0;\n  let a = 0;\n  let b = 1;\n\n  for (let i = 0; i < n; i++) {\n    fibNum = a + b;\n    if (isPrime(fibNum)) {\n      return fibNum;\n    }\n    [a, b] = [b, fibNum];\n  }\n\n  function isPrime(num) {\n    if (num <= 1) {\n      return false;\n    }\n    for (let i = 2; i * i <= num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "function triplesSumToZero(l) {\n  l = l.sort((a, b) => a - b); // Sort the array\n  for (let i = 0; i < l.length - 2; i++) { // Start from the first element and consider all possible triplets\n    let j = i + 1;\n    while (j < l.length - 1) {\n      let k = j + 1;\n      while (k < l.length) {\n        if (l[i] + l[j] + l[k] === 0) { // Check if the current triplet sums to zero\n          return true; // If it does, return True\n        }\n        k++;\n      }\n      j++;\n    }\n  }\n  return false; // If no triplet sums to zero, return False\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n    let collisions = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (i + j === n + 1) {\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n  return l.map(x => x + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  const seen = {};\n  for (const num of l) {\n    if (-num in seen) {\n      return true;\n    }\n    seen[num] = true;\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base) {\n    const digits = [];\n    while (x > 0) {\n        digits.unshift(String(x % base));\n        x = Math.floor(x / base);\n    }\n    return digits.join('');\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(a, h) {\n  return (a * h) / 2;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "def fib4(n):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c = 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c = b, c, a + b + c\n    \n    return c"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "def median(l):\n    l = sorted(l)\n    n = len(l)\n\n    if n % 2 == 1:\n        return float(l[n//2])\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2.0"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "function isPalindrome(text) {\n  return text === text.split(\"\").reverse().join(\"\");\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "A classic problem!\n\nThe issue with simply returning `2^n % p` is that it can lead to incorrect results due to numerical instability. For example, when `n` is large and `p` is small, the result may not be accurate.\n\nTo fix this, we can use the following formula:\n\n`modp(n, p) = (Math.pow(2, n) % p)`"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n    let vowels = 'aeiouAEIOU';\n    return text.replace(new RegExp(`[${vowels}]`, 'g'), '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    if (s0.length !== s1.length) return false;\n    \n    let map = new Map();\n    for (let char of s0) {\n        map.set(char, (map.get(char) || 0) + 1);\n    }\n    \n    for (let char of s1) {\n        map.set(char, (map.get(char) || 0) - 1);\n    }\n    \n    for (let count of Array.from(map.values())) {\n        if (count !== 0) return false;\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) return n;\n  return fib(n-1) + fib(n-2);\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n  let openCount = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      openCount++;\n    } else if (brackets[i] === \">\") {\n      if (openCount === 0) return false;\n      openCount--;\n    }\n  }\n  return openCount === 0;\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "function monotonic(l) {\n  const diff = l[1] - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if ((l[i] - l[i-1]) * diff <= 0) return false;\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "function common(l1, l2) {\n    return [...new Set(l1.intersect(l2))].sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let maxPrime = 1;\n  for (let i = 2; i * i <= n; i++) {\n    while (n % i === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  return maxPrime;\n}"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n  let openingBrackets = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      openingBrackets++;\n    } else if (brackets[i] === \")\") {\n      if (openingBrackets === 0) return false;\n      openingBrackets--;\n    }\n  }\n  return openingBrackets === 0;\n}"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n  const n = xs.length;\n  const result = new Array(n - 1).fill(0);\n\n  for (let i = 1; i < n; i++) {\n    result[i - 1] = i * xs[i];\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "function fibfib(n) {\n    if (n <= 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let a = 0, b = 0, c = 1;\n    for (let i = 3; i <= n; i++) {\n        let temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return c;\n}"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (['a', 'e', 'i', 'o', 'u'].includes(s[i].toLowerCase())) {\n            count++;\n        } else if (s[i].toLowerCase() === 'y' && i === s.length - 1) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n    let numStr = x.toString();\n    let len = numStr.length;\n    \n    if(shift >= len){\n        return numStr.split(\"\").reverse().join(\"\");\n    } else {\n        return numStr.substring(len-shift) + numStr.slice(0, len-shift);\n    }\n}"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitsum(s) {\n    let sum = 0;\n    for (let char of s) {\n        if (char.toUpperCase() === char) { // check if character is uppercase\n            sum += char.charCodeAt(0); // add ASCII code to sum\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n    // Convert the input string into a regular expression pattern\n    let regexPattern = new RegExp(/(\\d+)\\s*apple\\s*s?\\sand\\s*(\\d+)\\s*orange\\s*s?/, 'g');\n    \n    // Use the regular expression to extract the number of apples and oranges from the string\n    let match = s.match(regexPattern);\n    \n    // If there is a match, convert the strings into numbers and calculate the total number of mangoes\n    if (match) {\n        let [applesStr, orangesStr] = match[0].split(' ');\n        let apples = parseInt(applesStr.replace('apple', '').replace('s?', ''));\n        let oranges = parseInt(orangesStr.replace('orange', '').replace('s?', ''));\n        \n        return n - apples - oranges;\n    } else {\n        // If there is no match, the fruit distribution string does not contain \"apples\" and/or \"oranges\"\n        return n;\n    }\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n    if (arr.length === 0) return [];\n\n    let smallestEven = Infinity;\n    let index = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n            smallestEven = arr[i];\n            index = i;\n        }\n    }\n\n    return [[smallestEven], [index]];\n}"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "function search(lst) {\n  let max = -1;\n  for (let num of lst) {\n    if (num > 0 && lst.filter(x => x === num).length >= num) {\n      max = num;\n      break;\n    }\n  }\n  return max;\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n  if (lst.length === 0) return [];\n\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\n  let sorted = [min];\n  while (sorted.length < lst.length) {\n    let remainingMin = Math.min(...lst.filter(x => x !== min));\n    let remainingMax = Math.max(...lst.filter(x => x !== min));\n\n    if (remainingMax > remainingMin) {\n      sorted.push(remainingMax);\n      max = remainingMin;\n    } else {\n      sorted.push(remainingMin);\n      min = remainingMax;\n    }\n  }\n\n  return sorted;\n}"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n  // Check if the three sides form a valid triangle\n  if (a + b <= c || a + c <= b || b + c <= a) return -1;\n\n  // Calculate the semi-perimeter of the triangle\n  const s = (a + b + c) / 2;\n\n  // Calculate the area using Heron's formula\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n  // Return the area rounded to 2 decimal points\n  return Number(Math.round(area * 100)) / 100;\n}"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "function willItFly(q, w) {\n  // Check if the object q is balanced (palindromic list)\n  let isBalanced = JSON.stringify(q) === JSON.stringify(q).split('').reverse().join('');\n  \n  // Check if the sum of its elements is less than or equal to the maximum possible weight\n  let totalWeight = q.reduce((acc, curr) => acc + curr, 0);\n  let isLightEnough = totalWeight <= w;\n  \n  return isBalanced && isLightEnough;\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n  let n = arr.length;\n  let dp = Array(n + 1).fill().map(() => Array(n + 1).fill(0));\n\n  for (let i = 0; i <= n / 2; i++) {\n    for (let j = 0; j <= n - i; j++) {\n      if (i === 0) {\n        // base case: no changes needed\n        dp[i][j] = 0;\n      } else {\n        // calculate the minimum number of changes needed\n        let left = arr.slice(0, i).reverse().join('');\n        let right = arr.slice(i).join('');\n        if (left === right) {\n          // both parts are palindromes, no changes needed\n          dp[i][j] = 0;\n        } else {\n          // find the minimum number of changes between left and right\n          let minChanges = Infinity;\n          for (let k = 0; k < arr.length; k++) {\n            if (left[k] !== right[n - k - 1]) {\n              let newLeft = left.substring(0, k) + right[n - k - 1] + left.substring(k);\n              let newRight = right.substring(0, n - k - 1) + left[k] + right.substring(n - k);\n              minChanges = Math.min(minChanges, dp[i - 1][j - k] + (newLeft === newRight ? 0 : 1));\n            }\n          }\n          dp[i][j] = minChanges;\n        }\n      }\n    }\n  }\n\n  return dp[n / 2][n - 1];\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n  const sum1 = lst1.reduce((acc, str) => acc + str.length, 0);\n  const sum2 = lst2.reduce((acc, str) => acc + str.length, 0);\n\n  if (sum1 < sum2) return lst1;\n  else if (sum1 > sum2) return lst2;\n  else return lst1; // or return [] if you want to return an empty list in case of a tie\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    function isPrime(num) {\n        if (num < 2) return false;\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n            if (num % i === 0) return false;\n        return true;\n    }\n    \n    let primes = [];\n    let num = a;\n    while (num > 1) {\n        for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) \n            if (num % i === 0) {\n                primes.push(i);\n                num /= i;\n                i = 2; // restart the loop\n                break;\n            }\n    }\n    \n    return primes.length === 3 && primes.every(isPrime);\n}"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function isSimplePower(x, n) {\n  if (n <= 0 || x < 1) return false;\n  const logX = Math.log(x) / Math.log(n);\n  return parseInt(logX) === logX;\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "function iscube(a) {\n    var c = Math.cbrt(a);\n    return (c + '').trim() === parseInt(c + '', 10).toString();\n}"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] === 'A' || num[i] === 'B') {\n            if (isPrime(11)) count++;\n        } else if (num[i] === 'D' || num[i] === 'E') {\n            if (isPrime(13)) count++;\n        } else if (num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7') {\n            if (isPrime(Number(num[i])) || isPrime(Number('0x' + num[i]))) count++;\n        }\n    }\n    return count;\n}\n\nfunction isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    return 'db' + (decimal >>> 0).toString(2) + 'db';\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "function isHappy(s) {\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        let subStr = s.slice(i, i+3);\n        if (subStr.split('').some((c, j, arr) => arr.indexOf(c) != j)) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    let letterGrades = [];\n    \n    for (let i = 0; i < grades.length; i++) {\n        let gpa = parseFloat(grades[i]);\n        \n        if (gpa >= 4.0) {\n            letterGrades.push('A+');\n        } else if (gpa > 3.7) {\n            letterGrades.push('A');\n        } else if (gpa > 3.3) {\n            letterGrades.push('A-');\n        } else if (gpa > 3.0) {\n            letterGrades.push('B+');\n        } else if (gpa > 2.7) {\n            letterGrades.push('B');\n        } else if (gpa > 2.3) {\n            letterGrades.push('B-');\n        } else if (gpa > 2.0) {\n            letterGrades.push('C+');\n        } else if (gpa > 1.7) {\n            letterGrades.push('C');\n        } else if (gpa > 1.3) {\n            letterGrades.push('C-');\n        } else if (gpa > 1.0) {\n            letterGrades.push('D+');\n        } else if (gpa > 0.7) {\n            letterGrades.push('D');\n        } else if (gpa >= 0.0) {\n            letterGrades.push('D-');\n        } else {\n            letterGrades.push('E');\n        }\n    }\n    \n    return letterGrades;\n}\n\n// Example usage:\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // Outputs: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function primeLength(string) {\n  let length = string.length;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n) {\n    return Math.pow(9, n-1) - Math.pow(8, n-1);\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "function solve(n) {\n    let bin = n.toString(2); // Convert n to binary string\n    let sum = 0;\n    \n    for (let i = 0; i < bin.length; i++) { // Iterate over the binary digits\n        if (bin[i] === '1') {\n            sum += parseInt(bin[i], 2); // Sum up all '1' digits which are 2 in binary\n        }\n    }\n    \n    return sum.toString(2);\n}"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2) {\n        if(lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n  const words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    words[i] = Array.from(words[i].split('')).sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('');\n  }\n  return words.join(' ');\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "function getRow(lst, x) {\n    let result = [];\n    for(let i = 0; i < lst.length; i++) {\n        for(let j = 0; j < lst[i].length; j++) {\n            if(lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "function sortArray(array) {\n  if (array.length === 0) return array; // empty array, no need to sort\n  let sum = array[0] + array[array.length - 1]; // calculate sum of first and last element\n  const sortedArray = [...array]; // create a copy of the original array\n\n  if (sum % 2 === 1) { // odd sum, sort in ascending order\n    sortedArray.sort((a, b) => a - b);\n  } else { // even sum, sort in descending order\n    sortedArray.sort((a, b) => b - a);\n  }\n\n  return sortedArray;\n}"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n    let result = '';\n    for (let char of s) {\n        if (char.match(/[a-z]/i)) { // Check if character is a lowercase letter\n            let code = char.charCodeAt(0);\n            if (code >= 97 && code <= 122) { // Check if character is 'a' to 'z'\n                code = ((code - 97 + 26 * 2) % 26) + 97; // Rotate alphabet by 2 * 26 places\n                result += String.fromCharCode(code);\n            } else {\n                result += char; // If not a lowercase letter, add it as is\n            }\n        } else {\n            result += char; // If character is not a letter, add it as is\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst) {\n  if (lst.length < 2) return \"none\"; // no 2nd smallest element\n  lst.sort((a, b) => a - b); // sort the list in ascending order\n  let secondSmallest = null;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > lst[0]) {\n      secondSmallest = lst[i];\n      break;\n    }\n  }\n  return secondSmallest === null ? \"none\" : secondSmallest;\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function isBored(s) {\n  const boredomCount = 0;\n  let currentSentence = '';\n\n  for (const char of s) {\n    if (char.match(/[.!?]/)) { // found a sentence delimiter\n      if (currentSentence.startsWith('I ')) { // and the sentence starts with \"I \"\n        boredomCount++;\n      }\n      currentSentence = '';\n    } else {\n      currentSentence += char;\n    }\n  }\n\n  return boredomCount;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function anyInt(x, y, z) {\n  if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n    return false;\n  }\n  return x === y + z || x === z + y || y === x + z || y === z + x || z === x + y || z === y + x;\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n    let result = '';\n    for (let char of message) {\n        if ('AEIOU'.includes(char.toUpperCase())) {\n            let newChar = String.fromCharCode((char.charCodeAt(0) + 2 > 'Z'.charCodeAt(0)) \n                ? 'A'.charCodeAt(0) : 'Z'.charCodeAt(0));\n            result += newChar;\n        } else if ('aeiou'.includes(char.toLowerCase())) {\n            let newChar = String.fromCharCode((char.charCodeAt(0) + 2 > 'z'.charCodeAt(0)) \n                ? 'a'.charCodeAt(0) : 'z'.charCodeAt(0));\n            result += newChar;\n        } else if (char === char.toUpperCase()) {\n            result += String.fromCharCode((char.charCodeAt(0) + 1 > 'Z'.charCodeAt(0)) \n                ? 'A'.charCodeAt(0) : 'Z'.charCodeAt(0));\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "function skjkasdkd(lst) {\n  // Find the largest prime number in the list\n  function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n  let largestPrime = null;\n  for (const num of lst) {\n    if (isPrime(num)) {\n      largestPrime = num;\n      break;\n    }\n  }\n\n  // Calculate the sum of its digits\n  function digitSum(n) {\n    let sum = 0;\n    while (n > 0) {\n      sum += n % 10;\n      n = Math.floor(n / 10);\n    }\n    return sum;\n  }\n  const sumOfDigits = digitSum(largestPrime);\n\n  return sumOfDigits;\n}"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n  if (Object.keys(dict).length === 0) return false; // empty dictionary, return False\n  \n  let allLower = true;\n  let allUpper = true;\n  \n  for (let key in dict) {\n    if (!/^[a-z]+$/.test(key)) { // check if the key is not all lower case\n      allLower = false;\n      break;\n    }\n    if (!/^[A-Z]+$/.test(key)) { // check if the key is not all upper case\n      allUpper = false;\n      break;\n    }\n  }\n  \n  return allLower || allUpper; // return True if either all lower or all upper, else False\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function countUpTo(n) {\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n        if (primes.length >= n - 1) {\n            break;\n        }\n    }\n    return primes;\n\n    function isPrime(num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(a, b) {\n    return (a % 10) * (b % 10);\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n    let count = 0;\n    for(let i = 0; i < s.length; i++) {\n        if(i % 2 === 0 && s[i].toUpperCase() === 'A' || s[i].toUpperCase() === 'E' || s[i].toUpperCase() === 'I' || s[i].toUpperCase() === 'O' || s[i].toUpperCase() === 'U') {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n  const num = parseFloat(value);\n  if (isNaN(num)) {\n    throw new Error(`Invalid input: ${value}`);\n  }\n  return Math.round(Math.abs(num));\n}"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "function makeAPile(n) {\n  const result = [];\n  let stones = n;\n  for (let i = 0; i < n; i++) {\n    if ((i + 1) % 2 === 0) { // even level\n      result.push(stones += 2);\n    } else { // odd level\n      result.push(stones += 1);\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function wordsString(s) {\n  return s.split(/[ ,]+/);\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n  for (let i = Math.max(x, y); i >= Math.min(x, y); i--) {\n    if (i % 2 === 0 && i >= x && i <= y) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) return -1;\n\n  const sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n  return x.filter(num => !hasEvenDigit(num)).sort((a, b) => a - b);\n}\n\nfunction hasEvenDigit(num) {\n  while (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 === 0) {\n      return true;\n    }\n    num = Math.floor(num / 10);\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function byLength(arr) {\n    // Filter out numbers outside the range of 1-9 and sort the remaining numbers\n    const sortedNumbers = arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b);\n    \n    // Reverse the array\n    const reversedArray = sortedNumbers.reverse();\n    \n    // Replace each digit with its corresponding name from \"One\", ..., \"Nine\"\n    return reversedArray.map(num => {\n        switch (num) {\n            case 1: return 'One';\n            case 2: return 'Two';\n            case 3: return 'Three';\n            case 4: return 'Four';\n            case 5: return 'Five';\n            case 6: return 'Six';\n            case 7: return 'Seven';\n            case 8: return 'Eight';\n            case 9: return 'Nine';\n        }\n    });\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n    let result = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumFrom1To(i));\n        }\n    }\n    return result;\n\n    function factorial(x) {\n        let fact = 1;\n        for (let i = 2; i <= x; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n\n    function sumFrom1To(x) {\n        let sum = 0;\n        for (let i = 1; i <= x; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let even = 0;\n    let odd = 0;\n\n    for (let i = 1; i <= n; i++) {\n        let str = i.toString();\n        let revStr = str.split(\"\").reverse().join(\"\");\n        \n        if (i === parseInt(str)) { // check if the number is a palindrome\n            if (parseInt(str) % 2 === 0) { // check if the palindrome is even\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n\n    return [even, odd];\n}"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function countNums(arr) {\n  let count = 0;\n  for (let num of arr) {\n    if (Math.abs(num) > 0) {\n      const sumOfDigits = Array.from(String(Math.abs(num)).split('')).reduce((acc, curr) => parseInt(curr) + acc, 0);\n      if (sumOfDigits > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "function moveOneBall(arr) {\n    if (arr.length === 0) return true;\n    \n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] >= arr[0]) return false;\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  const evenCount = lst1.filter(n => n % 2 === 0).length;\n  return evenCount === lst1.length ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(test) {\n    if (!test) {\n        return {};\n    }\n\n    let counts = {};\n\n    // Split the string into an array of words\n    test.split(' ').forEach(word => {\n        for (let letter of word) {\n            if (!counts[letter]) {\n                counts[letter] = 0;\n            }\n            counts[letter]++;\n        }\n    });\n\n    // Find the maximum count\n    let maxCount = Math.max(...Object.values(counts));\n\n    // Filter the dictionary to get only the letters with the maximum count\n    return Object.fromEntries(Object.entries(counts).filter(([letter, count]) => count === maxCount));\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  // Create a new string that contains only the characters in s that are not in c\n  let result = '';\n  for (let char of s) {\n    if (!c.includes(char)) {\n      result += char;\n    }\n  }\n\n  // Check if the result string is palindrome\n  let isPalindrome = true;\n  for (let i = 0; i < result.length / 2; i++) {\n    if (result[i] !== result[result.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n\n  return [result, isPalindrome];\n}"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "function oddCount(lst) {\n  return lst.map((str, i) => {\n    const count = str.split('').filter(digit => digit % 2 !== 0).length;\n    return `the number of odd elements ${count}n the str${i+1}ng ${i+1} of the ${i+1}nput.`.replace(/1|8/g, 'a');\n  });\n}"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "function minSubArraySum(nums) {\n  let minSum = Infinity;\n  let currentSum = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n\n    if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n\n  return minSum;\n}"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let totalWater = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                totalWater += 1;\n            }\n        }\n    }\n    return Math.ceil(totalWater / capacity);\n}"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function sortArray(arr) {\n  return arr.sort((a, b) => {\n    const countA = (a.toString(2)).replace(/\\d/g, '').length;\n    const countB = (b.toString(2)).replace(/\\d/g, '').length;\n    if (countA === countB) {\n      return a - b;\n    }\n    return countA - countB;\n  });\n}"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(s, n) {\n  const words = s.split(/\\s+/); // split the string into individual words\n  const result = [];\n\n  for (const word of words) {\n    let consonantCount = 0;\n    for (const char of word.toLowerCase()) {\n      if (!['a', 'e', 'i', 'o', 'u'].includes(char)) { // check if the character is a vowel\n        consonantCount++;\n      }\n    }\n    if (consonantCount === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    let closestVowel = \"\";\n    for (let i = word.length - 1; i > 0; i--) {\n        if (\"AEIOU\".includes(word[i].toUpperCase())) {\n            return word[i];\n        }\n    }\n    return closestVowel;\n}"}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "function matchParens(lst) {\n  const stack = [];\n\n  for (const str of lst) {\n    for (const c of str) {\n      if (c === '(') {\n        stack.push(c);\n      } else if (c === ')') {\n        if (stack.length === 0) {\n          return 'No';\n        }\n        stack.pop();\n      }\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n}"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "function solution(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 !== 0) { // check if position is odd and element is odd\n      sum += lst[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n  for (let i = 0; i < Math.min(k, arr.length); i++) {\n    if (String(arr[i]).length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "function getOddCollatz(n) {\n    let sequence = [n];\n    while (n !== 1) {\n        if (n % 2 === 0) {\n            n = Math.floor(n / 2);\n        } else {\n            n = 3 * n + 1;\n        }\n        sequence.push(n);\n    }\n    \n    return sequence.filter(num => num % 2 !== 0).sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n    const [month, day, year] = date.split('-');\n    \n    // Check if the date string is not empty\n    if (!date.includes('-')) return false;\n\n    // Check if the month is between 1 and 12\n    if (parseInt(month) < 1 || parseInt(month) > 12) return false;\n\n    // Check if the day is valid for the given month\n    let maxDay = 31;\n    if ([4,6,9,11].includes(parseInt(month))) maxDay = 30;\n    else if (parseInt(month) === 2 && year % 4 !== 0 || (year % 100 === 0 && year % 400 !== 0)) maxDay = 28;\n    else if (parseInt(month) === 2 && isLeapYear(year)) maxDay = 29;\n\n    if (parseInt(day) < 1 || parseInt(day) > maxDay) return false;\n\n    return true;\n}\n\n// Helper function to check if the year is a leap year\nfunction isLeapYear(year) {\n    return ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0));\n}"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "function splitWords(txt) {\n  if (txt.includes(' ')) { // check for whitespace\n    return txt.split(' ');\n  } else if (txt.includes(',')) { // check for comma\n    return txt.split(',');\n  } else { // no whitespace or commas, split on lowercase letters with odd order in alphabet\n    let count = 0;\n    for (let i = ord('a'); i <= ord('z'); i++) {\n      if ((i - ord('a')) % 2 !== 0) { // check for odd order\n        count += txt.toLowerCase().split(String.fromCharCode(i)).length - 1;\n      }\n    }\n    return count;\n  }\n}"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function isSorted(lst) {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] >= lst[i + 1]) return false;\n  }\n  let seen = new Set();\n  for (let num of lst) {\n    if (seen.has(num)) return false;\n    seen.add(num);\n  }\n  return true;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n\n  if (start > end) return \"NO\"; // intervals don't intersect\n\n  const len = end - start + 1;\n  let isPrime = true;\n\n  for (let i = 2; i * i <= len && isPrime; i++) {\n    if (len % i === 0) isPrime = false;\n  }\n\n  return isPrime ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "function prodSigns(arr) {\n  if (arr.length === 0) return \"none\"; // return \"none\" for empty array\n\n  let signProduct = 1; // initialize product of signs to 1\n  let magnitudeSum = 0; // initialize sum of magnitudes to 0\n\n  arr.forEach((num) => {\n    if (num === 0) { // if number is 0, skip it\n      return;\n    }\n    signProduct *= Math.sign(num); // update product of signs\n    magnitudeSum += Math.abs(num); // update sum of magnitudes\n  });\n\n  return signProduct * magnitudeSum; // return product of signs multiplied by sum of magnitudes\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "function minpath(grid, k) {\n  const N = grid.length;\n  const result = [];\n\n  // Iterate over each cell in the grid\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      // Start BFS from this cell\n      let queue = [[grid[i][j], [grid[i][j]]]];\n      while (queue.length > 0) {\n        const [val, path] = queue.shift();\n        if (path.length === k + 1) {\n          // Found a path of length `k`\n          if (result.length === 0 || lessThan(result, path)) {\n            result = path;\n          }\n          break; // Stop exploring this branch\n        }\n        const neighbors = getNeighbors(i, j, N);\n        for (const [ni, nj] of neighbors) {\n          queue.push([grid[ni][nj], [...path, grid[ni][nj]]]);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n// Helper function to check if path A is less than path B\nfunction lessThan(pathA, pathB) {\n  for (let i = 0; i < pathA.length; i++) {\n    if (pathA[i] < pathB[i]) return true;\n    if (i > 0 && pathA[i] === pathB[i]) continue;\n    return false;\n  }\n  return false;\n}\n\n// Helper function to get the neighbors of a cell\nfunction getNeighbors(i, j, N) {\n  const neighbors = [];\n  if (i > 0) neighbors.push([i - 1, j]); // Up\n  if (j < N - 1) neighbors.push([i, j + 1]); // Right\n  if (i < N - 1) neighbors.push([i + 1, j]); // Down\n  if (j > 0) neighbors.push([i, j - 1]); // Left\n  return neighbors;\n}"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tri(n) {\n  if (n === 0) return [1]; // base case: single element list\n  else if (n === 1) return [1, 3]; // base case: first two elements\n\n  const result = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    let nextTri;\n    if (i % 2 === 0) { // even index\n      nextTri = 1 + i / 2;\n    } else { // odd index\n      const prevTwo = result.slice(i - 2, i).map(Number);\n      nextTri = prevTwo[0] + prevTwo[1] + (i % 2 === 1 ? result[i - 1] : result[i - 2]);\n    }\n    result.push(nextTri);\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) { // check if digit is odd\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function isNested(s) {\n  let depth = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '[') {\n      depth++;\n    } else if (s[i] === ']') {\n      depth--;\n      if (depth < 0) return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n  return Math.ceil(...lst).map(x => x ** 2).reduce((a, b) => a + b);\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n  if (txt.length === 0) return false; // edge case: empty string\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLetter = /^[a-zA-Z]$/.test(lastChar); // check if the last char is a letter\n  const isPartOfWord = /[^ ]$/.test(txt); // check if the last char is part of a word\n\n  return isLetter && !isPartOfWord;\n}"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        if (i === 0 || arr[i] <= arr[i-1]) continue;\n        let j = i - 1;\n        while (j >= 0 && arr[j] >= arr[i]) j--;\n        return j;\n    }\n    return -1;\n}"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let negative = null;\n    let positive = null;\n\n    for (let i of lst) {\n        if (i < 0 && !negative) {\n            negative = i;\n        } else if (i > 0 && !positive) {\n            positive = i;\n        }\n    }\n\n    return [negative, positive];\n}"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.max(a, b);\n  } else if (typeof a === 'string' && typeof b === 'string') {\n    a = parseFloat(a.replace(/,/g, '')); // remove commas and convert to float\n    b = parseFloat(b.replace(/,/g, ''));\n    if (a > b) return a;\n    if (b > a) return b;\n    return \"none\";\n  } else if (typeof a === 'string' && typeof b === 'number') {\n    a = parseFloat(a.replace(/,/g, '')); // remove commas and convert to float\n    if (a > b) return a;\n    if (b > a) return `${b}`;\n    return \"none\";\n  } else if (typeof a === 'number' && typeof b === 'string') {\n    b = parseFloat(b.replace(/,/g, '')); // remove commas and convert to float\n    if (a > b) return a;\n    if (b > a) return `${b}`;\n    return \"none\";\n  } else {\n    throw new Error(\"Invalid input types\");\n  }\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "function isEqualToSumEven(n) {\n  for (let i = 2; i <= n; i += 2) {\n    let sum = 0;\n    for (let j = 2; j <= Math.floor(n / 2); j += 2) {\n      if (i + j > n) break;\n      sum += i + j;\n      if (sum === n) return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n <= 0) {\n    throw new Error(\"Input must be a positive integer\");\n  }\n\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n    return text.replace(/ +/g, function(match) {\n        if (match.length > 2) {\n            return \"-\";\n        } else {\n            return \"_\";\n        }\n    });\n}"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "function fileNameCheck(filename) {\n    if (!/^[a-zA-Z]+\\.([txtexdll]|)$/.test(filename)) {\n        return 'No';\n    }\n    \n    let count = (new RegExp('0-9')).exec(filename).length;\n    if(count > 3){\n        return 'No';\n    }\n    \n    let dotIndex = filename.indexOf('.');\n    if(dotIndex === -1 || dotIndex !== filename.lastIndexOf('.')){\n        return 'No';\n    }\n    \n    return 'Yes';\n}"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if ((i + 1) % 3 === 0 && (i + 1) % 4 !== 0) { // index is a multiple of 3, not 4\n            result += Math.pow(lst[i], 2);\n        } else if ((i + 1) % 4 === 0 && (i + 1) % 3 !== 0) { // index is a multiple of 4, not 3\n            result += Math.pow(lst[i], 3);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n    let result = \"\";\n    let words = sentence.split(\" \");\n    \n    for (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length)) {\n            result += words[i] + \" \";\n        }\n    }\n    \n    return result.trim();\n}\n\nfunction isPrime(n) {\n    if (n <= 1) {\n        return false;\n    } else if (n == 2 || n == 3) {\n        return true;\n    } else if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    \n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "function simplify(x, n) {\n    // Convert fractions to decimal values\n    let decimalX = parseFloat(x.replace('/', '/1').replace('/', '0/'));\n    let decimalN = parseFloat(n.replace('/', '/1').replace('/', '0/'));\n\n    // Multiply the decimals\n    let productDecimal = decimalX * decimalN;\n\n    // Check if the result is a whole number\n    return productDecimal === Math.floor(productDecimal);\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function orderByPoints(nums) {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').map(Number).reduce((acc, curr) => acc + curr);\n    const sumB = b.toString().split('').map(Number).reduce((acc, curr) => acc + curr);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA - sumB;\n    }\n  });\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialfilter(nums) {\n  let count = 0;\n  for (let num of nums) {\n    if (Math.abs(num) > 10 && isOddFirstAndLastDigit(num)) {\n      count++;\n    }\n  }\n  return count;\n\n  function isOddFirstAndLastDigit(n) {\n    const str = n.toString();\n    return parseInt(str[0]) % 2 !== 0 && parseInt(str[str.length - 1]) % 2 !== 0;\n  }\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "function getMaxTriples(n) {\n    let count = 0;\n    for(let i = 1; i < n; i++) {\n        for(let j = i + 1; j <= n; j++) {\n            for(let k = j + 1; k <= n; k++) {\n                if((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    \n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n\n    let result = [];\n\n    for(let i = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n\n    return result;\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // ==> (\"Saturn\", \"Uranus\")\nconsole.log(bf(\"Earth\", \"Mercury\")); // ==> (\"Venus\")\nconsole.log(bf(\"Mercury\", \"Uranus\")); // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "def sortedListSum(lst):\n    # Filter out strings with odd lengths and sort them by length and then alphabetically\n    filtered_list = sorted([x for x in lst if len(x)%2 == 0], key=lambda x: (len(x), x))\n    \n    return filtered_list"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "function xOrY(n, x, y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nfunction isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (var i = 2; i * i <= num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  let sum = 0;\n  for (let num of lst) {\n    if (Number.isInteger(num) && num >= 0 && num % 2 !== 0) {\n      sum += Math.pow(num, 2);\n    }\n  }\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n  return game.map((score, index) => Math.abs(score - guess[index]));\n}"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let strongest = extensions[0];\n    let maxStrength = calculateStrength(strongest);\n\n    for (let i = 1; i < extensions.length; i++) {\n        let extension = extensions[i];\n        let strength = calculateStrength(extension);\n        if (strength > maxStrength) {\n            strongest = extension;\n            maxStrength = strength;\n        }\n    }\n\n    return `${classname}.${strongest}`;\n}\n\nfunction calculateStrength(str) {\n    let uppercaseCount = 0;\n    let lowercaseCount = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            uppercaseCount++;\n        } else {\n            lowercaseCount++;\n        }\n    }\n\n    return uppercaseCount - lowercaseCount;\n}"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  for (let i = 0; i < b.length; i++) {\n    let rotB = b.slice(i) + b.slice(0, i);\n    if (a.includes(rotB)) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "function evenOddCount(num) {\n  let even = 0;\n  let odd = 0;\n\n  while (num !== 0) {\n    let digit = num % 10;\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n\n  return [even, odd];\n}"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const romanNumerals = [\n    { value: 1000, numeral: 'M' },\n    { value: 900, numeral: 'CM' },\n    { value: 500, numeral: 'D' },\n    { value: 400, numeral: 'CD' },\n    { value: 100, numeral: 'C' },\n    { value: 90, numeral: 'XC' },\n    { value: 50, numeral: 'L' },\n    { value: 40, numeral: 'XL' },\n    { value: 10, numeral: 'X' },\n    { value: 9, numeral: 'IX' },\n    { value: 5, numeral: 'V' },\n    { value: 4, numeral: 'IV' },\n    { value: 1, numeral: 'I' }\n  ];\n\n  let result = '';\n  for (const numeral of romanNumerals) {\n    while (number >= numeral.value) {\n      result += numeral.numeral;\n      number -= numeral.value;\n    }\n  }\n\n  return result.toLowerCase();\n}"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n  const side1 = Math.pow(a, 2);\n  const side2 = Math.pow(b, 2);\n  const hypotenuse = Math.pow(c, 2);\n\n  return (side1 + side2 === hypotenuse) ||\n         (side1 + hypotenuse === side2) ||\n         (side2 + hypotenuse === side1);\n}"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n  let maxUniqueChars = 0;\n  let maxWord = \"\";\n\n  for (let word of words) {\n    let uniqueChars = new Set(word).size;\n    if (uniqueChars > maxUniqueChars) {\n      maxUniqueChars = uniqueChars;\n      maxWord = word;\n    } else if (uniqueChars === maxUniqueChars) {\n      if (word < maxWord) {\n        maxWord = word;\n      }\n    }\n  }\n\n  return maxWord;\n}"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "function eat(number, need, remaining) {\n  let totalEaten = number + need;\n  let carrotsLeft;\n\n  if (totalEaten <= remaining) {\n    // Enough carrots to satisfy hunger\n    carrotsLeft = remaining - (totalEaten - number);\n  } else {\n    // Not enough carrots, eat all remaining and still be hungry\n    carrotsLeft = 0;\n  }\n\n  return [totalEaten, carrotsLeft];\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "function doAlgebra(operator, operand) {\n    let result = operand[0]; // Initialize with the first operand\n    for (let i = 1; i < operator.length + 1; i++) { // Loop through operators and operands\n        switch (operator[i-1]) { // Perform operation based on the current operator\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//' || '**': // For floor division and exponentiation, convert string to corresponding operator\n                switch (operator[i-1]) {\n                    case '//':\n                        result = Math.floor(result / operand[i]);\n                        break;\n                    case '**':\n                        result = Math.pow(result, operand[i]);\n                        break;\n                }\n                break;\n        }\n    }\n    return result; // Return the final result\n}"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (/[a-zA-Z]/.test(s[i])) { // check if the character is a letter\n      result += s[i].toUpperCase() === s[i] ? s[i].toLowerCase() : s[i].toUpperCase();\n    } else {\n      result += s[i]; // keep non-letter characters as they are\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n    if (text === '') {\n        return 'none';\n    }\n    \n    const md5 = crypto.createHash('md5');\n    const hash = md5.update(text);\n    return hash.digest('hex').toUpperCase();\n}\n\nconsole.log(stringToMd5('Hello world'));  // Outputs: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    if(a > b) [a, b] = [b, a];\n    let result = [];\n    for(let i = a; i <= b; i++) {\n        let strI = i.toString();\n        for(let j = 0; j < strI.length; j++) {\n            if(parseInt(strI[j]) % 2 === 0) {\n                result.push(i);\n                break;\n            }\n        }\n    }\n    return result;\n}"}

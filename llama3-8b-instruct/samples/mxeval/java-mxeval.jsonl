{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass HasCloseElements {\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.8);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n        numbers.add(2.0);\n\n        Double threshold = 0.3;\n\n        System.out.println(hasCloseElements(numbers, threshold));\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass SeparateParenGroups {\n\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> result = new ArrayList<>();\n        Stack<Integer> openingIndexes = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n\n        for (int i = 0; i < parenString.length(); i++) {\n            char c = parenString.charAt(i);\n\n            if (c == '(') {\n                openingIndexes.push(i);\n                currentGroup.append(c);\n            } else if (c == ')') {\n                int start = openingIndexes.pop();\n                currentGroup.append(c);\n                result.add(currentGroup.toString());\n                currentGroup.setLength(0); // Reset the group\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        String parenString = \"( ) (( )) (( )( ))\";\n        List<String> result = separateParenGroups(parenString);\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TruncateNumber {\n    public static Double truncateNumber(Double number) {\n        return number - (int)number;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(truncateNumber(3.5));\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass BelowZero {\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        for (Object operation : operations) {\n            if ((int) operation > 0) {\n                balance += (int) operation;\n            } else {\n                balance -= Math.abs((int) operation);\n                if (balance < 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "public static Double meanAbsoluteDeviation(List<Double> numbers) {\n    // Calculate the mean (average) of the input numbers\n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n\n    // Calculate the absolute difference between each number and the mean\n    double sumAbsDev = 0.0;\n    for (double num : numbers) {\n        sumAbsDev += Math.abs(num - mean);\n    }\n\n    // Return the average of the absolute differences\n    return sumAbsDev / numbers.size();\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersperse {\n\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     *\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n        List<Object> result = new ArrayList<>();\n\n        if (numbers.size() == 0) {\n            return result;\n        }\n\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass ParseNestedParens {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        int level = 0;\n        for (int i = 0; i < parenString.length(); i++) {\n            char c = parenString.charAt(i);\n            if (c == '(') {\n                level++;\n            } else if (c == ')') {\n                level--;\n            }\n            result.add(level);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseNestedParens(\"(()()) ((())) () ((())()())\"));\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n    List<Object> result = new ArrayList<>();\n    for (Object s : strings) {\n        if (s instanceof String && ((String) s).indexOf(substring) != -1) {\n            result.add(s);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum += (int) number;\n                product *= (int) number;\n            }\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment \n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n        List<Object> result = new ArrayList<>();\n        \n        // Initialize the maximum with the first element of the list\n        int max = (int)numbers.get(0);\n        \n        for(int i = 1; i < numbers.size(); i++) {\n            if((int)numbers.get(i) > max) {\n                max = (int)numbers.get(i);\n            }\n            \n            result.add(max);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "public static String makePalindrome(String string) {\n    int len = string.length();\n    StringBuilder result = new StringBuilder(string);\n\n    // Find the longest postfix that is a palindrome\n    for (int i = 0; i < len / 2; i++) {\n        if (!isPalindrome(result.toString())) {\n            break;\n        }\n        result.append(string.charAt(len - i - 1));\n    }\n\n    return result.toString();\n}\n\nprivate static boolean isPalindrome(String s) {\n    int start = 0, end = s.length() - 1;\n    while (start < end) {\n        if (s.charAt(start) != s.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "public static String stringXor(String a, String b) {\n    if(a.length() != b.length()) {\n        throw new RuntimeException(\"Strings must have the same length.\");\n    }\n    \n    StringBuilder result = new StringBuilder();\n    \n    for(int i = 0; i < a.length(); i++) {\n        char c1 = a.charAt(i);\n        char c2 = b.charAt(i);\n        \n        if(c1 == '1' && c2 == '1') {\n            result.append('0');\n        } else if(c1 == '1' || c2 == '1') {\n            result.append('1');\n        } else {\n            result.append('0');\n        }\n    }\n    \n    return result.toString();\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Longest {\n\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n        if (strings.isEmpty()) {\n            return null;\n        }\n\n        String longest = (String) strings.get(0);\n\n        for (Object obj : strings) {\n            if (!(obj instanceof String)) {\n                continue;\n            }\n            String s = (String) obj;\n            if (s.length() > longest.length()) {\n                longest = s;\n            } else if (s.length() == longest.length()) {\n                longest = s; // in case of multiple strings of the same length, return the first one\n            }\n        }\n\n        return longest;\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "public static int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "public static String stringSequence(int n) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i <= n; i++) {\n        sb.append(i).append(\" \");\n    }\n    return sb.toString().trim(); // remove trailing space\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n        // Convert the string to lower case and create a HashSet to store unique characters.\n        Set<Character> set = new HashSet<>();\n        for (char ch : string.toLowerCase().toCharArray()) {\n            set.add(ch);\n        }\n        return set.size();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countDistinctCharacters(\"xyzXYZ\"));  // prints: 3\n        System.out.println(countDistinctCharacters(\"Jerry\"));  // prints: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass ParseMusic {\n\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beats = new ArrayList<>();\n        String[] notes = musicString.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseMusic(\"o o| .| o| o| .| .| .| .| o o\"));\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "public static int howManyTimes(String string, String substring) {\n    if (string == null || substring == null) {\n        return -1; // or throw an exception\n    }\n    \n    int count = 0;\n    int pos = 0;\n    \n    while ((pos = string.indexOf(substring, pos)) != -1) {\n        pos += substring.length();\n        count++;\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "public static String sortNumbers(String numbers) {\n    // Split the input string into individual numbers\n    String[] numArray = numbers.split(\" \");\n    // Create an array to store the sorted numbers\n    int[] sortedNums = new int[numArray.length];\n    // Map the string numbers to their integer equivalents\n    for (int i = 0; i < numArray.length; i++) {\n        switch (numArray[i]) {\n            case \"zero\":\n                sortedNums[i] = 0;\n                break;\n            case \"one\":\n                sortedNums[i] = 1;\n                break;\n            case \"two\":\n                sortedNums[i] = 2;\n                break;\n            case \"three\":\n                sortedNums[i] = 3;\n                break;\n            case \"four\":\n                sortedNums[i] = 4;\n                break;\n            case \"five\":\n                sortedNums[i] = 5;\n                break;\n            case \"six\":\n                sortedNums[i] = 6;\n                break;\n            case \"seven\":\n                sortedNums[i] = 7;\n                break;\n            case \"eight\":\n                sortedNums[i] = 8;\n                break;\n            case \"nine\":\n                sortedNums[i] = 9;\n                break;\n        }\n    }\n    // Sort the array of integers\n    Arrays.sort(sortedNums);\n    // Convert the sorted array back to a string, joined by spaces\n    StringBuilder sb = new StringBuilder();\n    for (int num : sortedNums) {\n        switch (num) {\n            case 0:\n                sb.append(\"zero \");\n                break;\n            case 1:\n                sb.append(\"one \");\n                break;\n            case 2:\n                sb.append(\"two \");\n                break;\n            case 3:\n                sb.append(\"three \");\n                break;\n            case 4:\n                sb.append(\"four \");\n                break;\n            case 5:\n                sb.append(\"five \");\n                break;\n            case 6:\n                sb.append(\"six \");\n                break;\n            case 7:\n                sb.append(\"seven \");\n                break;\n            case 8:\n                sb.append(\"eight \");\n                break;\n            case 9:\n                sb.append(\"nine \");\n                break;\n        }\n    }\n    return sb.toString().trim(); // Remove trailing space\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.*;\n\npublic class FindClosestElements {\n\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new RuntimeException(\"List must contain at least two elements\");\n        }\n        \n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n        \n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n        numbers.add(2.2);\n\n        System.out.println(findClosestElements(numbers));\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "public static List<Double> rescaleToUnit(List<Double> numbers) {\n    // Find the minimum and maximum values in the list\n    double min = Collections.min(numbers);\n    double max = Collections.max(numbers);\n\n    // Check if all elements are equal\n    if (min == max) {\n        return new ArrayList<>(numbers); // No scaling needed, just copy the list\n    }\n\n    // Calculate the scale factor\n    double scale = 1.0 / (max - min);\n\n    // Rescale each number in the list\n    List<Double> rescaledNumbers = new ArrayList<>();\n    for (double num : numbers) {\n        double scaledNum = (num - min) * scale;\n        rescaledNumbers.add(scaledNum);\n    }\n\n    return rescaledNumbers;\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "public static List<Object> filterIntegers(List<Object> values) {\n    List<Object> filteredValues = new ArrayList<>();\n    for (Object value : values) {\n        if (value instanceof Integer) {\n            filteredValues.add(value);\n        }\n    }\n    return filteredValues;\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "public static int strlen(String string) {\n    return string.length();\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "public static int largestDivisor(int n) {\n    for (int i = n; i > 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // Return 1 if no divisor is found\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class Factorize {\n\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     */\n    public static List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            while (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorize(8)); // [2, 2, 2]\n        System.out.println(factorize(25)); // [5, 5]\n        System.out.println(factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "public static List<Object> removeDuplicates(List<Object> numbers) {\n    Map<Object, Boolean> map = new HashMap<>();\n    List<Object> result = new ArrayList<>();\n\n    for (Object num : numbers) {\n        if (!map.containsKey(num)) {\n            map.put(num, true);\n            result.add(num);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(Character.toLowerCase(c));\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\"));\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "public static String concatenate(List<Object> strings) {\n    return strings.stream()\n            .map(Object::toString)\n            .collect(Collectors.joining());\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n    List<Object> result = new ArrayList<>();\n    for (Object s : strings) {\n        if (s instanceof String && ((String)s).startsWith(prefix)) {\n            result.add(s);\n        }\n    }\n    return result;\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetPositive {\n    public static List<Object> getPositive(List<Object> l) {\n        return l.stream()\n                .filter(x -> ((Number)x).doubleValue() > 0)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass SortThird {\n\n    /**\n     * This function takes a list l and returns a list l' such that \n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal \n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     *\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) { // if index is divisible by three\n                List<Integer> temp = new ArrayList<>();\n                int j = i;\n                while (j < l.size() && j % 3 == 0) {\n                    temp.add(l.get(j));\n                    j++;\n                }\n                Collections.sort(temp);\n                for (int k = 0; k < temp.size(); k++) {\n                    result.add(temp.get(k));\n                }\n            } else {\n                result.add(l.get(i)); // if index is not divisible by three, just add the value\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n\n        System.out.println(sortThird(l)); // [1, 2, 3]\n\n        l = new ArrayList<>();\n        l.add(5);\n        l.add(6);\n        l.add(3);\n        l.add(4);\n        l.add(8);\n        l.add(9);\n        l.add(2);\n\n        System.out.println(sortThird(l)); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        // Convert the list to a set to remove duplicates\n        Set<Integer> set = new HashSet<>(l);\n        \n        // Convert the set back to a list and sort it\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "public static int maxElement(List<Integer> l) {\n    return Collections.max(l);\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FizzBuzz {\n\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     *\n     */\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 11; i < n; i += 11) {\n            String str = Integer.toString(i);\n            if (str.contains(\"7\")) {\n                count++;\n            }\n        }\n        for (int i = 13; i < n; i += 13) {\n            String str = Integer.toString(i);\n            if (str.contains(\"7\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fizzBuzz(50));\n        System.out.println(fizzBuzz(78));\n        System.out.println(fizzBuzz(79));\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortEven {\n\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     *\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n        // Create a new list to store the sorted even numbers\n        List<Integer> sortedEvens = new ArrayList<>();\n        \n        // Add the odd numbered elements from the original list as they are\n        for (int i = 0; i < l.size(); i++) {\n            if ((i + 1) % 2 != 0) {\n                sortedEvens.add(l.get(i));\n            } else {\n                sortedEvens.add(Integer.MIN_VALUE); // Replace with actual odd number, but just to mark it as odd\n            }\n        }\n        \n        // Sort the even numbered elements\n        Collections.sort(sortedEvens.stream().filter(e -> (sortedEvens.indexOf(e) + 1) % 2 == 0).collect(Collectors.toList()));\n        \n        // Replace the sorted even numbers in the original order\n        for (int i = 0; i < l.size(); ) {\n            if ((i + 1) % 2 != 0) {\n                i++; // skip odd indices\n            } else {\n                sortedEvens.set(i / 2, l.get(i));\n                i++;\n            }\n        }\n        \n        return sortedEvens;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = new ArrayList<>();\n        list1.add(1);\n        list1.add(2);\n        list1.add(3);\n\n        System.out.println(\"Original list: \" + list1);\n        System.out.println(\"Sorted even numbers: \" + sortEven(list1));\n\n        List<Integer> list2 = new ArrayList<>();\n        list2.add(5);\n        list2.add(6);\n        list2.add(3);\n        list2.add(4);\n\n        System.out.println(\"Original list: \" + list2);\n        System.out.println(\"Sorted even numbers: \" + sortEven(list2));\n    }\n}"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n        if (n <= 0) {\n            return -1;\n        }\n        \n        int a = 1, b = 1;\n        for (int i = 2; ; i++) {\n            int temp = a + b;\n            if (temp < 2) {\n                break;\n            }\n            a = b;\n            b = temp;\n            \n            if (isPrime(b) && n-- == 1) {\n                return b;\n            }\n        }\n        \n        return -1; // not found\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2, sqrt = (int)Math.sqrt(n); i <= sqrt; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass TriplesSumToZero {\n\n    public static boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        \n        for (int i : set) {\n            if (contains(set, -i)) {\n                for (int j : set) {\n                    if ((j + i) == 0 || j > i) {\n                        if (contains(set, -(i+j))) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static boolean contains(Set<Integer> set, int target) {\n        for (int element : set) {\n            if (element == target) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "public static int carRaceCollision(int n) {\n    // Initialize the count of collisions\n    int collisionCount = 0;\n\n    // Initialize two pointers, one at the start (left-to-right) and one at the end (right-to-left)\n    int leftPointer = 0;\n    int rightPointer = 2 * n - 1;\n\n    while (leftPointer < rightPointer) {\n        // If there's a collision between these two cars\n        if ((leftPointer + n) <= rightPointer) {\n            // Move the right pointer towards the left\n            rightPointer--;\n            // Increment the count of collisions\n            collisionCount++;\n        } else {\n            // Move the left pointer towards the right\n            leftPointer++;\n        }\n    }\n\n    return collisionCount;\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IncrList {\n    public static List<Object> incrList(List<Object> l) {\n        List<Object> result = new ArrayList<>();\n        for (Object o : l) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                result.add(i + 1);\n            } else {\n                result.add(o);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "public static Boolean pairsSumToZero(List<Integer> l) {\n    Set<Integer> set = new HashSet<>(l);\n    for (int i : set) {\n        if (-i != null && set.contains(-i)) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "public static String changeBase(int x, int base) {\n    if (base < 2 || base > 9) {\n        throw new RuntimeException(\"Base must be between 2 and 9\");\n    }\n\n    StringBuilder sb = new StringBuilder();\n    while (x > 0) {\n        sb.insert(0, x % base);\n        x /= base;\n    }\n    return sb.toString();\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n        // Calculate the area using the formula: (base * height) / 2\n        double area = (double) (a * h) / 2;\n        return new Double(area);\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n        if (n < 0) {\n            return -1; // or throw an exception, depending on the requirement\n        }\n        \n        if (n <= 3) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        }\n        \n        int[] fib4Array = new int[n+1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            int sum = fib4Array[i-1] + fib4Array[i-2] + fib4Array[i-3] + fib4Array[i-4];\n            fib4Array[i] = sum % 2 == 0 ? 0 : sum;\n        }\n        \n        return fib4Array[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // prints 4\n        System.out.println(fib4(6)); // prints 8\n        System.out.println(fib4(7)); // prints 14\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        List<Integer> sortedList = new ArrayList<>(l);\n        Collections.sort(sortedList);\n\n        int n = sortedList.size();\n        if (n % 2 == 1) {\n            return sortedList.get(n / 2);\n        } else {\n            int mid1 = sortedList.get(n / 2 - 1);\n            int mid2 = sortedList.get(n / 2);\n            return new Double((double) (mid1 + mid2) / 2.0);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "public static Boolean isPalindrome(String text) {\n    int start = 0;\n    int end = text.length() - 1;\n\n    while (start < end) {\n        if (text.charAt(start) != text.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "public static int modp(int n, int p) {\n    return (int)(Math.pow(n, p) % p);\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "public static String removeVowels(String text) {\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        if (!isVowel(c)) {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}\n\nprivate static boolean isVowel(char c) {\n    c = Character.toLowerCase(c); // make the character lowercase\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "public static Boolean belowThreshold(List<Integer> l, int t) {\n    for (int num : l) {\n        if (num >= t) {\n            return false; // at least one number is not below threshold\n        }\n    }\n    return true; // all numbers are below threshold\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "public static Boolean sameChars(String s0, String s1) {\n    if (s0.length() != s1.length()) {\n        return false;\n    }\n    Map<Character, Integer> charCountMap = new HashMap<>();\n    for (char c : s0.toCharArray()) {\n        charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n    }\n    for (char c : s1.toCharArray()) {\n        if (!charCountMap.containsKey(c) || charCountMap.get(c) == 0) {\n            return false;\n        }\n        charCountMap.put(c, charCountMap.get(c) - 1);\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int[] fibSeq = new int[n + 1];\n    fibSeq[0] = 0;\n    fibSeq[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n    return fibSeq[n];\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "public class CorrectBracketing {\n    public static boolean correctBracketing(String brackets) {\n        int openingBrackets = 0;\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                openingBrackets++;\n            } else if (bracket == '>') {\n                if (openingBrackets == 0) {\n                    return false; // no matching opening bracket found\n                }\n                openingBrackets--;\n            }\n        }\n        return openingBrackets == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"<\")); // False\n        System.out.println(correctBracketing(\"<>\")); // True\n        System.out.println(correctBracketing(\"<<><>>\")); // True\n        System.out.println(correctBracketing(\"><<\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "public static Boolean monotonic(List<Integer> l) {\n    boolean increasing = true;\n    boolean decreasing = true;\n\n    for (int i = 1; i < l.size(); i++) {\n        if (l.get(i) > l.get(i - 1)) {\n            decreasing = false;\n        } else if (l.get(i) < l.get(i - 1)) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Common {\n\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        // Convert the second list to a set for efficient lookup\n        Set<Object> set = new HashSet<>(l2);\n\n        // Initialize an empty list to store the common elements\n        List<Object> commonElements = new ArrayList<>();\n\n        // Iterate over the first list and check if each element is present in the set\n        for (Object obj : l1) {\n            if (set.contains(obj)) {\n                // If the element is present, add it to the commonElements list\n                commonElements.add(obj);\n                // Remove the element from the set so that it's not added again\n                set.remove(obj);\n            }\n        }\n\n        return commonElements;\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n        if (n <= 1) return -1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n        return n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestPrimeFactor(13195)); // prints 29\n        System.out.println(largestPrimeFactor(2048)); // prints 2\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "public static int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "public static Boolean correctBracketing(String brackets) {\n    int openCount = 0;\n    for (char c : brackets.toCharArray()) {\n        if (c == '(') {\n            openCount++;\n        } else if (c == ')') {\n            if (openCount == 0) {\n                return false; // unbalanced closing bracket\n            }\n            openCount--;\n        }\n    }\n    return openCount == 0;\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        \n        // The derivative of a constant is zero.\n        if (xs.size() == 1) {\n            return result;\n        }\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "public class FibFib {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int[] fibfib = new int[n + 1];\n            fibfib[0] = 0;\n            fibfib[1] = 0;\n            fibfib[2] = 1;\n\n            for (int i = 3; i <= n; i++) {\n                fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n            }\n\n            return fibfib[n];\n        }\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (\"aeiouy\".indexOf(c) != -1 && (i == s.length() - 1 || !Character.isUpperCase(c))) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "public static String circularShift(int x, int shift) {\n    int numDigits = (int) Math.floor(Math.log10(x)) + 1;\n    shift = shift % numDigits; // ensure shift is within range\n\n    String strX = Integer.toString(x);\n    StringBuilder result = new StringBuilder();\n\n    for (int i = shift; i < strX.length(); i++) {\n        result.append(strX.charAt(i));\n    }\n    for (int i = 0; i < shift; i++) {\n        if (i < strX.length()) {\n            result.append(strX.charAt(i));\n        } else {\n            result.append(strX.charAt(strX.length() - 1));\n        }\n    }\n\n    return result.toString();\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "public static int digitsum(String s) {\n    int sum = 0;\n    for (char c : s.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            sum += (int) c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "public class FruitDistribution {\n\n    public static int fruitDistribution(String s, int n) {\n        String[] parts = s.split(\" \");\n        String[] splitParts = parts[1].split(\"(?<=\\\\d+)\");\n        \n        int apples = 0;\n        for (String part : splitParts) {\n            if (part.equals(\"apples\")) {\n                apples = Integer.parseInt(parts[2]);\n                break;\n            }\n        }\n\n        return n - apples;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fruitDistribution(\"5 apples and 6 oranges\", 19));\n        System.out.println(fruitDistribution(\"0 apples and 1 oranges\",3));\n        System.out.println(fruitDistribution(\"2 apples and 3 oranges\", 100));\n        System.out.println(fruitDistribution(\"100 apples and 1 oranges\",120));\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "import java.util.*;\n\npublic class Pluck {\n\n    public static List<Object> pluck(List<Object> arr) {\n        List<Object> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n\n        Integer smallestEvenValue = null;\n        int smallestIndex = 0;\n\n        for (int i = 0; i < arr.size(); i++) {\n            Object obj = arr.get(i);\n            if (obj instanceof Integer) {\n                int value = (Integer) obj;\n                if (value % 2 == 0 && (smallestEvenValue == null || value < smallestEvenValue)) {\n                    smallestEvenValue = value;\n                    smallestIndex = i;\n                }\n            }\n        }\n\n        if (smallestEvenValue != null) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n        } else {\n            result.add([]);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n        \n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        \n        return max;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(4, 1, 2, 2, 3, 1);\n        System.out.println(search(lst)); // prints: 2\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass StrangeSortList {\n\n    public static List<Object> strangeSortList(List<Object> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Collections.sort(lst);\n\n        List<Object> result = new ArrayList<>();\n\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if ((Integer) lst.get(i - 1) > (Integer) lst.get(i)) {\n                minIndex = i;\n                break;\n            }\n        }\n\n        result.add(lst.get(0));\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (i == minIndex) {\n                result.add(Collections.max(lst));\n                lst.remove((Integer) Collections.max(lst));\n            } else {\n                result.add(Collections.min(lst));\n                lst.remove((Integer) Collections.min(lst));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        lst.add(4);\n\n        System.out.println(strangeSortList(lst));\n\n        lst.clear();\n        for (int i = 0; i < 5; i++) {\n            lst.add(i);\n        }\n\n        System.out.println(strangeSortList(lst));\n\n        lst.clear();\n\n        System.out.println(strangeSortList(lst));\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of \n     * the triangle rounded to 2 decimal points if the three sides form a valid \n     * triangle. Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        // Check if the three sides form a valid triangle\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return -1;  // The three sides do not form a valid triangle\n        }\n\n        // Calculate the semi-perimeter of the triangle\n        double s = (a + b + c) / 2.0;\n\n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n        // Round the area to 2 decimal points and return it\n        return new BigDecimal(area).setScale(2, BigDecimal.ROUND_HALF_UP);\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.List;\n\npublic class WillItFly {\n    public static boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is balanced (palindromic)\n        List<Integer> reversed = new ArrayList<>(q);\n        Collections.reverse(reversed);\n        return q.equals(reversed);\n\n        // Check if the sum of its elements is less than or equal to the maximum possible weight\n        /*int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;*/\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.util.*;\n\npublic class SmallestChange {\n\n    public static int smallestChange(List<Integer> arr) {\n        String str = \"\";\n        for (int num : arr) {\n            str += num;\n        }\n        \n        // Reverse the string and compare it with the original\n        String reverseStr = new StringBuilder(str).reverse().toString();\n        \n        // Initialize a variable to store the number of changes\n        int changes = 0;\n        \n        // Iterate over both strings simultaneously using zip function from Stream API\n        IntStream.range(0, str.length()).forEach(i -> {\n            if (str.charAt(i) != reverseStr.charAt(i)) {\n                // If they are not equal, increment the count of changes\n                changes++;\n            }\n        });\n        \n        return changes;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        System.out.println(\"Minimum number of elements that need to be changed: \" + smallestChange(arr));\n        \n        arr = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        System.out.println(\"Minimum number of elements that need to be changed: \" + smallestChange(arr));\n        \n        arr = Arrays.asList(1, 2, 3, 2, 1);\n        System.out.println(\"Minimum number of elements that need to be changed: \" + smallestChange(arr));\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.util.*;\n\npublic class TotalMatch {\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n\n        // Calculate the sum of characters in each list\n        for (Object obj : lst1) {\n            if (obj instanceof String) {\n                sum1 += ((String) obj).length();\n            }\n        }\n\n        for (Object obj : lst2) {\n            if (obj instanceof String) {\n                sum2 += ((String) obj).length();\n            }\n        }\n\n        // Compare the sums and return the list with less characters\n        List<Object> result = null;\n        if (sum1 < sum2) {\n            result = lst1;\n        } else if (sum2 < sum1) {\n            result = lst2;\n        } else {\n            result = lst1;  // If sums are equal, return the first list\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass IsMultiplyPrime {\n\n    public static Boolean isMultiplyPrime(int a) {\n        // Loop through all numbers from 2 to sqrt(a)\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            // Check if the number is prime\n            boolean isPrime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n\n            // If the number is prime, check if a is divisible by it\n            if (isPrime && a % i == 0) {\n                int num1 = i;\n                int num2 = a / i;\n\n                // Check if both numbers are prime\n                boolean isNum1Prime = true;\n                for (int j = 2; j * j <= num1; j++) {\n                    if (num1 % j == 0) {\n                        isNum1Prime = false;\n                        break;\n                    }\n                }\n\n                boolean isNum2Prime = true;\n                for (int j = 2; j * j <= num2; j++) {\n                    if (num2 % j == 0) {\n                        isNum2Prime = false;\n                        break;\n                    }\n                }\n\n                // If both numbers are prime, return true\n                if (isNum1Prime && isNum2Prime) {\n                    return true;\n                }\n            }\n        }\n\n        // If no such combination of prime numbers is found, return false\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "public static boolean isSimplePower(int x, int n) {\n    for (int i = 1; Math.pow(n, i) <= x; i++) {\n        if ((int)Math.pow(n, i) == x) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "public static boolean iscube(int a) {\n    for (int i = 1; ; i++) {\n        int c = (int)Math.pow(i, 3);\n        if (c == a) {\n            return true;\n        }\n        if (c > a) {\n            break;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "public class HexKey {\n\n    public static int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if ((c >= '2' && c <= '7') || c == 'B' || c == 'D' || c == 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); // output: 1\n        System.out.println(hexKey(\"1077E\")); // output: 2\n        System.out.println(hexKey(\"ABED1A33\")); // output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); // output: 6\n        System.out.println(hexKey(\"2020\")); // output: 2\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        // Convert the integer to binary and remove the '0b' prefix\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(decimalToBinary(15));  // returns \"db1111db\"\n        System.out.println(decimalToBinary(32));  // returns \"db100000db\"\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "public static Boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        String substr = s.substring(i, i+3);\n        boolean distinct = true;\n        char prev = substr.charAt(0);\n        \n        for (char c : substr.toCharArray()) {\n            if (c == prev) {\n                distinct = false;\n                break;\n            }\n            prev = c;\n        }\n        \n        if (!distinct) {\n            return false;\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Number grade : grades) {\n            if (grade.floatValue() >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade.floatValue() > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade.floatValue() > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade.floatValue() > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade.floatValue() > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade.floatValue() > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade.floatValue() > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade.floatValue() > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade.floatValue() > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade.floatValue() > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade.floatValue() > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade.floatValue() > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> grades = new ArrayList<>();\n        grades.add(new Float(4.0));\n        grades.add(new Float(3.0));\n        grades.add(new Float(1.7));\n        grades.add(new Float(2.0));\n        grades.add(new Float(3.5));\n\n        List<String> letterGrades = numericalLetterGrade(grades);\n\n        for (String grade : letterGrades) {\n            System.out.println(grade);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "public static Boolean primeLength(String string) {\n    int length = string.length();\n    if (length <= 1) {\n        return false;\n    }\n    boolean isPrime = true;\n    for (int i = 2; i * i <= length; i++) {\n        if (length % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "To solve this problem, we can use a mathematical approach. We need to consider two cases: when the number starts with 1 and when it ends with 1.\n\nWhen the number starts with 1, there are nine possibilities for the remaining digits (0-9). Since we are dealing with n-digit numbers, we have n - 1 digits left after considering the starting digit. So, in this case, our total count is 9 * 10^(n-1).\n\nWhen the number ends with 1, again there are nine possibilities for the remaining digits (0-9). And since the last digit is fixed to be 1, we have n - 1 digits left. In this case, our total count is 9 * 10^(n-1) as well.\n\nNow, we need to add these two counts to get the final answer:\n\nstartsOneEnds(int n) {\n    return (int)(9 * Math.pow(10, n-1) + 9 * Math.pow(10, n-1));\n}\nThe reason why we're casting the result to an integer is that the addition of two large numbers might exceed the maximum value of int type."}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "public static String solve(int n) {\n    // Convert integer to binary string\n    String binary = Integer.toBinaryString(n);\n\n    // Calculate the sum of digits in binary\n    int sum = 0;\n    for (char c : binary.toCharArray()) {\n        if (c == '1') {\n            sum += 1;\n        }\n    }\n\n    // Convert sum back to a binary string\n    StringBuilder sb = new StringBuilder();\n    while (sum > 0) {\n        sb.append(sum % 2);\n        sum /= 2;\n    }\n\n    return sb.reverse().toString();\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 1; i < lst.size(); i += 2) { // start from index 1 (because indices are 0-based)\n            if(lst.get(i) % 2 == 0) { // check if the element at this index is even\n                sum += lst.get(i); \n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "public static String antiShuffle(String s) {\n    String[] words = s.split(\" \");\n    StringBuilder result = new StringBuilder();\n\n    for (String word : words) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        result.append(new String(chars)).append(\" \");\n    }\n\n    return result.toString().trim();\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n    public static List<List<Integer>> getRow(List<Object> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if ((List<?>) lst.get(i).stream().filter(obj -> obj instanceof Integer).count() >= x) {\n                List<Integer> row = (List<Integer>) lst.get(i);\n                Collections.reverse(row);\n                result.add(new ArrayList<>(row));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Test the function\n        List<Object> lst = new ArrayList<>();\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        \n        List<List<Integer>> result = getRow(lst, 1);\n        \n        for (List<Integer> row : result) {\n            System.out.println(row);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass SortArray {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * don't change the given array.\n\n     * Examples:\n     * sort_array([]) => []\n     * sort_array([5]) => [5]\n     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n        if (array == null || array.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int sum = (int) array.get(0) + (int) array.get(array.size() - 1);\n        boolean isOdd = sum % 2 != 0;\n\n        List<Integer> sortedArray;\n        if (isOdd) {\n            Collections.sort((List<Integer>) array);\n        } else {\n            sortedArray = new ArrayList<>();\n            for (Object obj : array) {\n                sortedArray.add((int) obj);\n            }\n            Collections.reverse(sortedArray);\n        }\n\n        return sortedArray == null ? array : sortedArray;\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "public static String encrypt(String s) {\n    StringBuilder encrypted = new StringBuilder();\n    \n    // Calculate the shift amount\n    int shiftAmount = 2 * 2;\n    \n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            char baseChar = Character.isUpperCase(c) ? 'A' : 'a';\n            c = (char) (((c - baseChar + shiftAmount) % 26) + baseChar);\n        }\n        \n        encrypted.append(c);\n    }\n    \n    return encrypted.toString();\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n        List<Integer> intList = new ArrayList<>();\n        \n        // Convert the list to a list of integers\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                intList.add((Integer)obj);\n            }\n        }\n\n        // Sort the list\n        Collections.sort(intList);\n\n        // Check if the list has at least two elements\n        if (intList.size() >= 2) {\n            return intList.get(1); // Return the second smallest element\n        } else {\n            return null; // Return null if there is no such element\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // prints: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // prints: 2\n        System.out.println(nextSmallest(Arrays.asList())); // prints: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // prints: null\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "public class IsBored {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]+\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isBored(\"Hello world\")); // prints: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // prints: 1\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "public static Boolean anyInt(Number x, Number y, Number z) {\n    if (!(x instanceof Integer && y instanceof Integer && z instanceof Integer)) {\n        return false;\n    }\n    int a = (int) x;\n    int b = (int) y;\n    int c = (int) z;\n\n    return (a == b + c || a == c + b || b == a + c || b == c + a || c == a + b || c == b + a);\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "public static String encode(String message) {\n    StringBuilder encoded = new StringBuilder();\n    \n    for (char c : message.toCharArray()) {\n        if (!Character.isLetter(c)) {\n            // If character is not a letter, just add it to the result\n            encoded.append(c);\n            continue;\n        }\n        \n        char base = Character.toLowerCase(c); // Convert to lowercase\n        if ('a' <= base && base <= 'i') { // Check if vowel (a-i)\n            base += 2; // Move two places ahead in alphabet\n            if (base > 'i') { // Wrap around from i to a\n                base -= 26;\n            }\n        } else if ('j' <= base && base <= 'o') {\n            base += 2;\n            if (base > 'o') {\n                base -= 26;\n            }\n        } else if ('p' <= base && base <= 'u') {\n            base += 2;\n            if (base > 'u') {\n                base -= 26;\n            }\n        } else { // If not vowel, just convert to uppercase\n            base = Character.toUpperCase(c);\n        }\n        \n        encoded.append(base); // Add the encoded character to the result\n    }\n    \n    return encoded.toString();\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "public class Skjkasdkd {\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>();\n        // Add your list of integers here\n        int result = skjkasdkd(lst);\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass CheckDictCase {\n\n    public static boolean checkDictCase(Object dict) {\n        if (dict == null || !(dict instanceof HashMap)) {\n            return false;\n        }\n        \n        Map<?, ?> map = (Map<?, ?>) dict;\n        \n        // Check if all keys are strings in lower case or all keys are strings in upper case\n        for (Object key : map.keySet()) {\n            String s = key.toString();\n            if (!allLower(map) && !allUpper(map)) {\n                return false;\n            }\n            if (!isAllLower(s) && !isAllUpper(s)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    // Check if all keys in the map are strings in lower case\n    private static boolean allLower(Map<?, ?> map) {\n        for (Object key : map.keySet()) {\n            String s = key.toString();\n            if (!s.equals(s.toLowerCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Check if all keys in the map are strings in upper case\n    private static boolean allUpper(Map<?, ?> map) {\n        for (Object key : map.keySet()) {\n            String s = key.toString();\n            if (!s.equals(s.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Check if a string is in lower case\n    private static boolean isAllLower(String str) {\n        for (char c : str.toCharArray()) {\n            if (!Character.isLowerCase(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Check if a string is in upper case\n    private static boolean isAllUpper(String str) {\n        for (char c : str.toCharArray()) {\n            if (!Character.isUpperCase(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass CountUpTo {\n\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        if (n < 2) {\n            return primeNumbers;\n        }\n\n        for (int i = 2; i <= n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primeNumbers.add(i);\n            }\n        }\n\n        return primeNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> result1 = countUpTo(5);\n        System.out.println(result1);  // prints: [2, 3]\n\n        List<Integer> result2 = countUpTo(11);\n        System.out.println(result2);  // prints: [2, 3, 5, 7]\n\n        List<Integer> result3 = countUpTo(0);\n        System.out.println(result3);  // prints: []\n\n        List<Integer> result4 = countUpTo(20);\n        System.out.println(result4);  // prints: [2, 3, 5, 7, 11, 13, 17, 19]\n\n        List<Integer> result5 = countUpTo(1);\n        System.out.println(result5);  // prints: []\n\n        List<Integer> result6 = countUpTo(18);\n        System.out.println(result6);  // prints: [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "public static int multiply(int a, int b) {\n    // Calculate the unit digits of both numbers\n    int unitDigitA = a % 10;\n    int unitDigitB = b % 10;\n\n    // Multiply the unit digits and return the result\n    return unitDigitA * unitDigitB;\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "public static int countUpper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if ((c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') && i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "public class ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num % 1 == 0) {\n            return (int) Math.round(num);\n        } else {\n            if (Math.abs((int) Math.floor(num)) < Math.abs((int) Math.ceil(num))) {\n                return (int) Math.floor(num);\n            } else {\n                return (int) Math.ceil(num);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // 10\n        System.out.println(closestInteger(\"15.3\")); // 15\n        System.out.println(closestInteger(\"14.5\")); // 15\n        System.out.println(closestInteger(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "import java.util.*;\n\npublic class MakeAPile {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int currentLevel = 1;\n        while (n > 0) {\n            if ((currentLevel & 1) == 0) { // even level\n                pile.add(n);\n                n -= n; // subtract the stones in this level from n\n            } else { // odd level\n                pile.add(2 * currentLevel + 1); // add the next odd number to the pile\n                n -= 2 * currentLevel + 1;\n            }\n            currentLevel++;\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makeAPile(3));\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "public static List<String> wordsString(String s) {\n    List<String> result = new ArrayList<>();\n    String[] words = s.trim().split(\"[\\\\s,]+\");\n    \n    for (String word : words) {\n        result.add(word);\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n    // Check if there's no such number (i.e., x > y)\n    if (x > y) {\n        return -1;\n    }\n    \n    // Find the biggest even integer number that is in the range [x, y] inclusive\n    for (int i = x; i <= y; i++) {\n        if (i % 2 == 0) { // Check if the current number is even\n            return i;\n        }\n    }\n    \n    // If no such number was found, return -1\n    return -1;\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RoundedAvg {\n    public static String roundedAvg(int n, int m) {\n        if (n > m) {\n            return \"-1\";\n        }\n        \n        double sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double avg = Math.round((sum / (double) (m - n + 1)) * 100.0) / 100.0;\n        \n        return Integer.toBinaryString((int) Math.round(avg));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // -1\n        System.out.println(roundedAvg(10, 20)); // \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // \"0b11010\"\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class UniqueDigits {\n\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            int digitCount = 0;\n            boolean hasOddDigit = false;\n\n            while (num > 0) {\n                int digit = num % 10;\n                if (digit % 2 != 0) { // check if the digit is odd\n                    hasOddDigit = true;\n                }\n                num /= 10;\n                digitCount++;\n            }\n\n            if (hasOddDigit) {\n                result.add(num);\n            }\n        }\n\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> input = new ArrayList<>();\n        input.add(15);\n        input.add(33);\n        input.add(1422);\n        input.add(1);\n\n        List<Integer> output = uniqueDigits(input);\n\n        System.out.println(output);\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.util.*;\n\npublic class ByLength {\n    public static List<String> byLength(List<Object> arr) {\n        // Filter out numbers that are not between 1 and 9 (inclusive)\n        arr = arr.stream()\n                .filter(obj -> obj instanceof Integer && ((Integer) obj).between(1, 9))\n                .collect(Collectors.toList());\n\n        // Convert the filtered list to an array\n        Integer[] arrArray = new Integer[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arrArray[i] = (Integer) arr.get(i);\n        }\n\n        // Sort the array\n        Arrays.sort(arrArray);\n\n        // Reverse the sorted array\n        Integer[] reversedArr = new Integer[arrArray.length];\n        for (int i = arrArray.length - 1; i >= 0; i--) {\n            reversedArr[i] = arrArray[i];\n        }\n\n        // Replace each digit by its corresponding name\n        List<String> result = new ArrayList<>();\n        for (Integer integer : reversedArr) {\n            switch (integer) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class F {\n\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(F.f(5)); // prints [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "import java.util.*;\n\npublic class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    public static boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        for (int i = 0; i < str.length() / 2; i++) {\n            if (str.charAt(i) != str.charAt(str.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "public static int countNums(List<Object> arr) {\n    int count = 0;\n    for (Object obj : arr) {\n        if (obj instanceof Integer) {\n            int num = (int) obj;\n            int sumOfDigits = getSumOfDigits(num);\n            if (sumOfDigits > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nprivate static int getSumOfDigits(int num) {\n    int sum = 0;\n    boolean isNegative = false;\n    if (num < 0) {\n        isNegative = true;\n        num = -num;\n    }\n    while (num > 0) {\n        int digit = num % 10;\n        if (isNegative && digit == 5) { // special case for negative numbers\n            sum -= 5;\n        } else {\n            sum += digit;\n        }\n        num /= 10;\n    }\n    return isNegative ? -sum : sum;\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.util.*;\n\npublic class MoveOneBall {\n\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int min = Collections.min(arr);\n        int rightShifts = 0;\n\n        for (int i : arr) {\n            if (i != min && i > min) {\n                return false;\n            }\n            if (i < min) {\n                rightShifts++;\n                min = i;\n            }\n        }\n\n        return rightShifts <= 1;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int evenCount = 0;\n    for (int num : lst1) {\n        if (num % 2 == 0) {\n            evenCount++;\n        }\n    }\n\n    // If all elements in lst1 are even, return \"YES\"\n    if (evenCount == lst1.size()) {\n        return \"YES\";\n    }\n\n    // Check if it's possible to exchange elements from lst2 to make all elements in lst1 even\n    for (int num : lst2) {\n        if (num % 2 != 0 && evenCount < lst1.size()) {\n            evenCount++;\n        }\n    }\n\n    return evenCount == lst1.size() ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\n\npublic class Histogram {\n    public static Map<Character, Integer> histogram(String test) {\n        Map<Character, Integer> result = new HashMap<>();\n        if (test == null || test.isEmpty()) {\n            return result;\n        }\n\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            char key = word.charAt(0);\n            int count = result.getOrDefault(key, 0);\n            result.put(key, count + 1);\n        }\n        \n        // if there are multiple letters with the same occurrence, \n        // return all of them\n        Map<Character, Integer> maxCountMap = new HashMap<>();\n        int maxCount = 0;\n        for (Map.Entry<Character, Integer> entry : result.entrySet()) {\n            char key = entry.getKey();\n            int count = entry.getValue();\n            if (count > maxCount) {\n                maxCount = count;\n                maxCountMap.clear();\n                maxCountMap.put(key, count);\n            } else if (count == maxCount) {\n                maxCountMap.put(key, count);\n            }\n        }\n\n        return maxCountMap;\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass ReverseDelete {\n\n    public static List<Object> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            boolean delete = false;\n            for (char cc : c.toCharArray()) {\n                if (s.charAt(i) == cc) {\n                    delete = true;\n                    break;\n                }\n            }\n            if (!delete) {\n                sb.append(s.charAt(i));\n            }\n        }\n\n        String result = sb.toString();\n        boolean isPalindrome = true;\n\n        int start = 0, end = result.length() - 1;\n        while (start < end) {\n            if (result.charAt(start) != result.charAt(end)) {\n                isPalindrome = false;\n                break;\n            }\n            start++;\n            end--;\n        }\n\n        return new ArrayList<Object>() {{add(result); add(isPalindrome); }};\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class OddCount {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) { // check if the digit is odd\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \" in the str\" + (s.length() + 1) + \"ng \" + (lst.indexOf(s) + 1) + \" of the input.\");\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> lst = new ArrayList<>();\n        lst.add(\"1234567\");\n        lst.add(\"3\");\n        lst.add(\"11111111\");\n        System.out.println(oddCount(lst));\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "public static long minsubarraysum(List<Object> nums) {\n    int n = (int)nums.size();\n    long minSum = Integer.MAX_VALUE;\n    long currentSum = 0;\n\n    for(int i = 0; i < n; i++){\n        currentSum += (long)nums.get(i);\n        if(currentSum < minSum){\n            minSum = currentSum;\n        }\n        \n        // reset the current sum once it becomes zero\n        if(currentSum > 0){\n            continue;\n        }\n\n        for(int j = i+1; j <= n-1; j++){\n            currentSum += (long)nums.get(j);\n            if(currentSum < minSum){\n                minSum = currentSum;\n            }\n        }\n        // reset the current sum\n        currentSum = 0;\n    }\n\n    return minSum;\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.util.*;\n\npublic class MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        if (grid.isEmpty() || grid.get(0).isEmpty()) return 0;\n        \n        int totalWater = 0;\n        for (List<Integer> row : grid) {\n            totalWater += (int) row.stream().filter(i -> i == 1).count();\n        }\n        \n        int fills = totalWater / capacity;\n        if (totalWater % capacity != 0) {\n            fills++;\n        }\n        \n        return fills;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid = new ArrayList<>();\n        grid.add(Arrays.asList(0, 0, 1, 0));\n        grid.add(Arrays.asList(0, 1, 0, 0));\n        grid.add(Arrays.asList(1, 1, 1, 1));\n\n        int capacity = 1;\n        System.out.println(maxFill(grid, capacity)); // Output: 6\n\n        grid = new ArrayList<>();\n        grid.add(Arrays.asList(0, 0, 1, 1));\n        grid.add(Arrays.asList(0, 0, 0, 0));\n        grid.add(Arrays.asList(1, 1, 1, 1));\n        grid.add(Arrays.asList(0, 1, 1, 1));\n\n        capacity = 2;\n        System.out.println(maxFill(grid, capacity)); // Output: 5\n\n        grid = new ArrayList<>();\n        grid.add(Arrays.asList(0, 0, 0));\n        grid.add(Arrays.asList(0, 0, 0));\n\n        capacity = 5;\n        System.out.println(maxFill(grid, capacity)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass SortArray {\n\n    public static List<Object> sortArray(List<Object> arr) {\n        Collections.sort(arr, new Comparator<Object>() {\n            @Override\n            public int compare(Object obj1, Object obj2) {\n                Integer num1 = (Integer) obj1;\n                Integer num2 = (Integer) obj2;\n\n                // Calculate the number of ones in binary representation\n                int ones1 = Integer.toBinaryString(num1).replaceAll(\"0$\", \"\").length();\n                int ones2 = Integer.toBinaryString(num2).replaceAll(\"0$\", \"\").length();\n\n                // If both numbers have the same number of ones, sort based on decimal value\n                if (ones1 == ones2) {\n                    return num1.compareTo(num2);\n                }\n\n                // Sort based on the number of ones in ascending order\n                return Integer.compare(ones1, ones2);\n            }\n        });\n\n        return arr;\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+\");\n        StringBuilder word = new StringBuilder();\n        \n        for (String w : words) {\n            word.setLength(0);\n            boolean hasConsonants = false;\n            for (char c : w.toLowerCase().toCharArray()) {\n                if (!Character.isLetter(c)) continue;\n                if (!\"aeiou\".indexOf(c) != -1) {\n                    if (!hasConsonants) hasConsonants = true;\n                    word.append(c);\n                }\n            }\n            \n            if (word.length() == n && hasConsonants) {\n                result.add(w);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> result1 = selectWords(\"Mary had a little lamb\", 4);\n        System.out.println(result1);  // prints: [little]\n        List<String> result2 = selectWords(\"Mary had a little lamb\", 3);\n        System.out.println(result2);   // prints: [Mary, lamb]\n        List<String> result3 = selectWords(\"simple white space\", 2);\n        System.out.println(result3);   // prints: []\n        List<String> result4 = selectWords(\"Hello world\", 4);\n        System.out.println(result4);   // prints: [world]\n        List<String> result5 = selectWords(\"Uncle sam\", 3);\n        System.out.println(result5);   // prints: [Uncle]\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "public class GetClosestVowel {\n\n    public static String getClosestVowel(String word) {\n        int i = word.length() - 1;\n        while (i > 0 && !isVowel(word.charAt(i))) {\n            i--;\n        }\n        if (i == 0 || !isVowel(word.charAt(i))) {\n            return \"\";\n        }\n        int j = i - 1;\n        while (j >= 0 && !isConsonant(word.charAt(j))) {\n            j--;\n        }\n        if (j < 0) {\n            return String.valueOf(word.charAt(i));\n        } else {\n            return String.valueOf(word.charAt(i));\n        }\n    }\n\n    public static boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return !isVowel(c) && (c >= 'b' && c <= 'z');\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class MatchParens {\n    public static String matchParens(List<String> lst) {\n        int openCount = 0;\n        int closeCount = 0;\n\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    openCount++;\n                } else if (c == ')') {\n                    closeCount++;\n                }\n            }\n        }\n\n        return (openCount == closeCount) ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        List<String> lst1 = new ArrayList<>();\n        lst1.add(\"()()\");\n        lst1.add(\")\");\n        System.out.println(matchParens(lst1));  // prints: No\n\n        List<String> lst2 = new ArrayList<>();\n        lst2.add(\"(\");\n        lst2.add(\")\");\n        System.out.println(matchParens(lst2));  // prints: No\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Maximum {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     * Input: arr = [-3, -4, 5], k = 3\n     * Output: [-4, -3, 5]\n\n     * Example 2:\n\n     * Input: arr = [4, -4, 4], k = 2\n     * Output: [4, 4]\n\n     * Example 3:\n\n     * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     * Output: [2]\n\n     * Note:\n     * 1. The length of the array will be in the range of [1, 1000].\n     * 2. The elements in the array will be in the range of [-1000, 1000].\n     * 3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, (a, b) -> Integer.compare(b, a));\n        \n        // Return the first k elements of the sorted array\n        return arr.subList(0, Math.min(k, arr.size()));\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Solution {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class AddElements {\n\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        \n        // Loop through the first k elements of the array.\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            \n            // Check if the number has at most two digits.\n            if ((num >= -99 && num <= 99) || (num >= -9 && num <= 9)) {\n                sum += num;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "import java.util.*;\n\npublic class GetOddCollatz {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> oddNumbers = new ArrayList<>();\n        int currentNumber = n;\n\n        while (currentNumber != 1) {\n            if (currentNumber % 2 != 0) { // if the number is odd\n                oddNumbers.add(currentNumber);\n            }\n\n            if (currentNumber % 2 == 0) { // if the number is even\n                currentNumber = currentNumber / 2;\n            } else { // if the number is odd\n                currentNumber = 3 * currentNumber + 1;\n            }\n        }\n\n        return oddNumbers;\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "public static Boolean validDate(String date) {\n    String[] dateParts = date.split(\"-\");\n    if (dateParts.length != 3) {\n        return false;\n    }\n    int month = Integer.parseInt(dateParts[0]);\n    int day = Integer.parseInt(dateParts[1]);\n    int year = Integer.parseInt(dateParts[2]);\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid for the given month and year\n    switch (month) {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n            if (day < 1 || day > 31) {\n                return false;\n            }\n            break;\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n            if (day < 1 || day > 30) {\n                return false;\n            }\n            break;\n        case 2:\n            // Check for leap year\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n            break;\n    }\n\n    // If the date is valid, return true\n    return true;\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class SplitWords {\n\n    public static Object splitWords(String txt) {\n        String[] words;\n        \n        // Check if there are any whitespaces in the string. If yes, split on whitespace.\n        if(txt.indexOf(' ') != -1 || txt.indexOf('\\t') != -1) {\n            words = txt.split(\"\\\\s+\");\n        } else { // No whitespaces, check for commas\n            if(txt.indexOf(',') != -1) {\n                words = txt.split(\",\");\n            } else { // No commas or whitespace, count the number of lower-case letters with odd order in the alphabet.\n                int count = 0;\n                for(char c : txt.toLowerCase().toCharArray()) {\n                    if(c >= 'a' && c <= 'z') {\n                        if((c - 'a') % 2 == 1) {\n                            count++;\n                        }\n                    }\n                }\n                return count;\n            }\n        }\n        \n        // Return the list of words\n        return Arrays.asList(words);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(splitWords(\"Hello world!\")); // \u279e [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"Hello,world!\")); // \u279e [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"abcdef\")); // == 3\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.util.*;\n\npublic class IsSorted {\n    public static boolean isSorted(List<Object> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if ((int)lst.get(i-1) > (int)lst.get(i)) {\n                return false;\n            }\n        }\n        int count = 0;\n        for (Object obj : lst) {\n            if ((int)obj == (int)lst.get(0)) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count <= 1;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = new ArrayList<>();\n        lst.add(5);\n        System.out.println(isSorted(lst)); // prints: true\n\n        lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        lst.add(4);\n        lst.add(5);\n        System.out.println(isSorted(lst)); // prints: true\n\n        lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(3);\n        lst.add(2);\n        lst.add(4);\n        lst.add(5);\n        System.out.println(isSorted(lst)); // prints: false\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) return \"NO\"; // intervals do not intersect\n\n        int length = end - start + 1; // calculate the length of intersection\n        boolean isPrime = true;\n\n        for(int i=2;i*i<=length;i++){\n            if(length%i==0){\n                isPrime=false;\n                break;\n            }\n        }\n        return isPrime ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = new ArrayList<>();\n        List<Integer> interval2 = new ArrayList<>();\n\n        // Test cases\n        interval1.add(1); interval1.add(3);\n        interval2.add(2); interval2.add(4);\n        System.out.println(intersection(interval1, interval2)); // prints \"NO\"\n\n        interval1.clear(); interval1.add(-1); interval1.add(1);\n        interval2.clear(); interval2.add(0); interval2.add(4);\n        System.out.println(intersection(interval1, interval2)); // prints \"NO\"\n\n        interval1.clear(); interval1.add(-3); interval1.add(-1);\n        interval2.clear(); interval2.add(-5); interval2.add(5);\n        System.out.println(intersection(interval1, interval2)); // prints \"YES\"\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass ProdSigns {\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        \n        int signProduct = 1; // Initialize product of signs to 1\n        int sumMagnitude = 0; // Initialize sum of magnitudes to 0\n        \n        for (Object obj : arr) {\n            int num = (int) obj; // Convert object to integer\n            \n            if (num == 0) { // If the number is zero, skip it\n                continue;\n            }\n            \n            int sign = (num > 0 ? 1 : -1); // Get the sign of the number (1 for positive, -1 for negative)\n            signProduct *= sign; // Update the product of signs\n            \n            sumMagnitude += Math.abs(num); // Add the magnitude of the number to the sum\n        }\n        \n        return signProduct * sumMagnitude;\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Minpath {\n\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(grid.get(0).get(i));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid = new ArrayList<>();\n        grid.add(Arrays.asList(1,2,3));\n        grid.add(Arrays.asList(4,5,6));\n        grid.add(Arrays.asList(7,8,9));\n        int k = 3;\n        System.out.println(minpath(grid,k));\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(new Integer(3)); // base case\n        \n        for (int i = 1; i < n; i++) {\n            if ((i & 1) == 0) { // even\n                result.add(new Double(i / 2 + 1));\n            } else { // odd\n                int a = result.get(i - 1).intValue();\n                int b = result.get(i - 2).intValue();\n                int c = i > 0 ? result.get(0).intValue() : 3;\n                result.add(new Integer(a + b + c));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "public static Boolean isNested(String s) {\n    int count = 0;\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == '[') {\n            count++;\n        } else if (s.charAt(i) == ']') {\n            if (count > 0) {\n                count--;\n            } else {\n                return false;\n            }\n        }\n    }\n    \n    return count > 0;\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number n : lst) {\n            // Round each element in the list to the upper int(Ceiling)\n            int rounded = Math.ceil(n.doubleValue());\n            // Square the rounded number\n            int squared = rounded * rounded;\n            // Add the squared number to the total sum\n            sum += squared;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CheckIfLastCharIsALetter {\n\n    /**\n     * Create a function that returns True if the last character of a given string is an alphabetical character and is not part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n     * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n     * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n     * check_if_last_char_is_a_letter(\"\") \u279e False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        // Check if the string is empty\n        if (txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is an alphabetical character and it's not part of a word\n        boolean isLastCharLetterAndNotPartOfWord = Character.isLetter(lastChar) && !isPartOfWord(txt, lastChar);\n\n        return isLastCharLetterAndNotPartOfWord;\n    }\n\n    /**\n     * A helper function to check if the given character is part of a word.\n     *\n     * @param txt The input string\n     * @param charToCheck The character to be checked\n     * @return True if the character is part of a word, False otherwise\n     */\n    private static boolean isPartOfWord(String txt, char charToCheck) {\n        // Check if the character is not the first character and it's preceded by a space or another letter\n        return txt.indexOf(String.valueOf(charToCheck)) != 0 && (txt.lastIndexOf(\" \") == -1 || txt.substring(txt.lastIndexOf(\" \") + 1).indexOf(String.valueOf(charToCheck)) == -1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "import java.util.*;\n\npublic class CanArrange {\n\n    public static int canArrange(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return -1;\n        }\n\n        int maxIndex = -1;\n\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if ((int) arr.get(i) <= (int) arr.get(i + 1)) {\n                maxIndex = i;\n            } else {\n                break;\n            }\n        }\n\n        return maxIndex;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(1, 2, 4, 3, 5);\n        System.out.println(canArrange(arr)); // prints 3\n\n        arr = Arrays.asList(1, 2, 3);\n        System.out.println(canArrange(arr)); // prints -1\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        int maxNegative = Integer.MIN_VALUE;\n        int minPositive = Integer.MAX_VALUE;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num < 0 && num > maxNegative) {\n                    maxNegative = num;\n                } else if (num >= 0 && num < minPositive) {\n                    minPositive = num;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        if (maxNegative != Integer.MIN_VALUE) {\n            result.add(maxNegative);\n        } else {\n            result.add(null);\n        }\n\n        if (minPositive != Integer.MAX_VALUE) {\n            result.add(minPositive);\n        } else {\n            result.add(null);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "public class CompareOne {\n\n    public static Object compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Float || b instanceof Double) {\n            return (float)b > (float)a ? b : a;\n        } else if (b instanceof Integer && a instanceof Float || a instanceof Double) {\n            return (float)a > (float)b ? a : b;\n        } else if (a instanceof String && b instanceof String) {\n            String strA = a.toString().replace(\",\", \".\");\n            String strB = b.toString().replace(\",\", \".\");\n            double numA = Double.parseDouble(strA);\n            double numB = Double.parseDouble(strB);\n            return numB > numA ? b : a;\n        } else if (a instanceof Integer && b instanceof String) {\n            return compareOne(b, a);\n        } else if (b instanceof Integer && a instanceof String) {\n            return compareOne(a, b);\n        }\n        \n        return null; // If values are equal\n    }\n\n    public static void main(String[] args) {\n        System.out.println(compareOne(1, 2.5)); // \u279e 2.5\n        System.out.println(compareOne(1, \"2,3\")); // \u279e \"2,3\"\n        System.out.println(compareOne(\"5,1\", \"6\")); // \u279e \"6\"\n        System.out.println(compareOne(\"1\", 1)); // \u279e None\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     *\n     */\n    public static Boolean isEqualToSumEven(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            int sum = i;\n            int j = 2;\n            while (j <= Math.sqrt(n - i)) {\n                if ((n - i) % j == 0 && isEven(j)) {\n                    sum += j * 2;\n                    if (sum == n) {\n                        return true;\n                    }\n                }\n                j++;\n            }\n        }\n        return false;\n    }\n\n    public static boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "public static long specialFactorial(int n) {\n    if (n == 0 || n == 1) { // base case: 0! or 1!\n        return 1;\n    } else {\n        long result = 1; // initialize the result\n        for (int i = 2; i <= n; i++) { // from 2 to n\n            result *= specialFactorial(i - 1); // recursive call\n        }\n        return result; // return the final result\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FixSpaces {\n    /**\n     * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * @param text the input string\n     * @return the processed string\n     */\n    public static String fixSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        boolean seenSpace = false;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                if (!seenSpace) {\n                    sb.append('_');\n                    seenSpace = true;\n                } else {\n                    if (sb.length() > 1 && sb.charAt(sb.length() - 2) == '_') {\n                        sb.append('-');\n                    } else {\n                        sb.append(' ');\n                    }\n                    seenSpace = false;\n                }\n            } else {\n                sb.append(c);\n                seenSpace = false;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fixSpaces(\"Example\"));  // prints \"Example\"\n        System.out.println(fixSpaces(\"Example 1\"));  // prints \"Example_1\"\n        System.out.println(fixSpaces(\" Example 2\"));  // prints \"_Example_2\"\n        System.out.println(fixSpaces(\" Example   3\"));  // prints \"_Example-3\"\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass FileNameCheck {\n\n    public static String fileNameCheck(String fileName) {\n        int dotIndex = fileName.indexOf('.');\n        if (dotIndex == -1) {\n            return \"No\";\n        }\n\n        String beforeDot = fileName.substring(0, dotIndex);\n        String afterDot = fileName.substring(dotIndex + 1);\n\n        // Check the length of digits in the file name\n        boolean hasMoreThanThreeDigits = false;\n        for (char c : beforeDot.toCharArray()) {\n            if (Character.isDigit(c)) {\n                hasMoreThanThreeDigits |= true;\n            }\n            if (hasMoreThanThreeDigits && Character.isDigit(c)) {\n                break;\n            }\n        }\n\n        if (hasMoreThanThreeDigits) {\n            return \"No\";\n        }\n\n        // Check the first character of the file name\n        if (!Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check the extension\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        boolean isValidExtension = false;\n        for (String ext : validExtensions) {\n            if (afterDot.equals(ext)) {\n                isValidExtension = true;\n                break;\n            }\n        }\n\n        return isValidExtension ? \"Yes\" : \"No\";\n    }\n\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "public static int sumSquares(List<Object> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        Object obj = lst.get(i);\n        if ((i + 1) % 3 == 0 && (i + 1) % 4 != 0) { // index is a multiple of 3, not a multiple of 4\n            sum += (int) Math.pow((int) obj, 2); // square the integer entry\n        } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) { // index is a multiple of 4, not a multiple of 3\n            sum += (int) Math.pow((int) obj, 3); // cube the integer entry\n        }\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "public static String wordsInSentence(String sentence) {\n    StringBuilder result = new StringBuilder();\n    String[] words = sentence.split(\" \");\n    \n    for (String word : words) {\n        if (isPrime(word.length())) {\n            result.append(word).append(\" \");\n        }\n    }\n    \n    return result.toString().trim();\n}\n\npublic static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "public static boolean simplify(String x, String n) {\n    int numeratorX = numerator(x);\n    int denominatorX = denominator(x);\n    int numeratorN = numerator(n);\n    int denominatorN = denominator(n);\n\n    // Calculate the common divisor\n    int gcd = greatestCommonDivisor(denominatorX, denominatorN);\n    numeratorX /= gcd;\n    denominatorX /= gcd;\n    numeratorN /= gcd;\n    denominatorN /= gcd;\n\n    // Check if x * n evaluates to a whole number\n    return (numeratorX * numeratorN) == 1;\n}\n\n// Helper method to extract the numerator from a fraction string\nprivate static int numerator(String s) {\n    return Integer.parseInt(s.split(\"/\")[0]);\n}\n\n// Helper method to extract the denominator from a fraction string\nprivate static int denominator(String s) {\n    return Integer.parseInt(s.split(\"/\")[1]);\n}\n\n// Helper method to calculate the greatest common divisor of two integers\nprivate static int greatestCommonDivisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.util.*;\n\npublic class OrderByPoints {\n    public static List<Object> orderByPoints(List<Object> nums) {\n        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Collections.sort(nums, (a, b) -> {\n            int sumA = 0;\n            for (int c : ((Integer)a).toString().chars().mapToInt(i -> i - '0').toArray()) {\n                sumA += c;\n            }\n            int sumB = 0;\n            for (int c : ((Integer)b).toString().chars().mapToInt(i -> i - '0').toArray()) {\n                sumB += c;\n            }\n\n            if (sumA < sumB) return -1;\n            else if (sumA > sumB) return 1;\n            else return Integer.compare(nums.indexOf(a), nums.indexOf(b));\n        });\n\n        return nums;\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "public static int specialfilter(List<Object> nums) {\n    int count = 0;\n    \n    for (Object num : nums) {\n        if ((int) num > 10 && isOdd((int) num)) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\nprivate static boolean isOdd(int n) {\n    return (n % 2 != 0);\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "public static int getMaxTriples(int n) {\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    \n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Bf {\n\n    public static List<Object> bf(String planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n\n        List<Object> result = new ArrayList<>();\n\n        int index1 = -1;\n        int index2 = -1;\n\n        for (int i = 0; i < planets.size(); i++) {\n            if (planet1.equalsIgnoreCase(planets.get(i))) {\n                index1 = i;\n            }\n            if (planet2.equalsIgnoreCase(planets.get(i))) {\n                index2 = i;\n            }\n        }\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        for (int i = Math.min(index1, index2); i < Math.max(index1, index2); i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class SortedListSum {\n    public static List<String> sortedListSum(List<String> lst) {\n        // Create a new list to store the strings with even lengths\n        List<String> evenLengthList = new ArrayList<>();\n\n        // Iterate over each string in the input list\n        for (String str : lst) {\n            // Check if the length of the string is even\n            if (str.length() % 2 == 0) {\n                // If the length is even, add the string to the new list\n                evenLengthList.add(str);\n            }\n        }\n\n        // Sort the new list by length and then alphabetically\n        evenLengthList.sort((a, b) -> a.length() - b.length());\n        for (int i = 0; i < evenLengthList.size(); i++) {\n            for (int j = i + 1; j < evenLengthList.size(); j++) {\n                if (evenLengthList.get(i).length() == evenLengthList.get(j).length()) {\n                    if (!evenLengthList.get(i).compareTo(evenLengthList.get(j)).equals(0)) {\n                        Collections.swap(evenLengthList, i, j);\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Return the sorted list\n        return evenLengthList;\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nprivate static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "import java.util.List;\n\npublic class DoubleTheDifference {\n\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        \n        for (Object obj : lst) {\n            if ((obj instanceof Integer && (int)obj > 0)) { // Check if the object is an integer and positive\n                sum += (int)obj * (int)obj; // Calculate the square of the number and add it to the sum\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Test the function with an example\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.util.List;\n\npublic class Compare {\n\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(guess.get(i) - game.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> game1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 1));\n        List<Integer> guess1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 2, -2));\n        \n        List<Integer> result1 = compare(game1, guess1);\n        System.out.println(result1);\n\n        List<Integer> game2 = new ArrayList<>(Arrays.asList(0, 5, 0, 0, 0, 4));\n        List<Integer> guess2 = new ArrayList<>(Arrays.asList(4, 1, 1, 0, 0, -2));\n        \n        List<Integer> result2 = compare(game2, guess2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "public class StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtensionName = \"\";\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtensionName = extension;\n            }\n        }\n\n        return className + \".\" + strongestExtensionName;\n    }\n\n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        String className = \"Slices\";\n        System.out.println(strongestExtension(className, extensions));  // prints: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "public class CycpatternCheck {\n\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) return false;\n        \n        for(int i = 0; i < a.length(); i++){\n            String temp = a.substring(i) + a.substring(0,i);\n            if(temp.contains(b)) return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\",\"abd\")); \n        System.out.println(cycpatternCheck(\"hello\",\"ell\")); \n        System.out.println(cycpatternCheck(\"whassup\",\"psus\")); \n        System.out.println(cycpatternCheck(\"abab\",\"baa\")); \n        System.out.println(cycpatternCheck(\"efef\",\"eeff\")); \n        System.out.println(cycpatternCheck(\"himenss\",\"simen\"));\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass EvenOddCount {\n\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {\n        int countEven = 0;\n        int countOdd = 0;\n\n        if(num < 0) {\n            num = -num; // Convert to positive\n        }\n\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                countEven++;\n            } else {\n                countOdd++;\n            }\n            num /= 10;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(countEven);\n        result.add(countOdd);\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "public static String intToMiniRoman(int number) {\n    Map<Integer, String> romanMap = new HashMap<>();\n    romanMap.put(1000, \"m\");\n    romanMap.put(900, \"cm\");\n    romanMap.put(500, \"d\");\n    romanMap.put(400, \"cd\");\n    romanMap.put(100, \"c\");\n    romanMap.put(90, \"xc\");\n    romanMap.put(50, \"l\");\n    romanMap.put(40, \"xl\");\n    romanMap.put(10, \"x\");\n    romanMap.put(9, \"ix\");\n    romanMap.put(5, \"v\");\n    romanMap.put(4, \"iv\");\n    romanMap.put(1, \"i\");\n\n    StringBuilder result = new StringBuilder();\n    for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n        while (number >= entry.getKey()) {\n            number -= entry.getKey();\n            result.append(entry.getValue());\n        }\n    }\n    return result.toString().toLowerCase();\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RightAngleTriangle {\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // If any side is greater than the sum of other two sides, then they cannot form a triangle.\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return false;\n\n        // Check if the given three sides can form a right-angled triangle.\n        int x = a * a;\n        int y = b * b;\n        int z = c * c;\n\n        return (x + y == z) ? true : false;\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass FindMax {\n\n    public static String findMax(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        int maxUniqueCount = 0;\n        String result = \"\";\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueCount) {\n                maxUniqueCount = uniqueChars.size();\n                result = word;\n            } else if (uniqueChars.size() == maxUniqueCount) {\n                if (result.compareTo(word) > 0) {\n                    result = word;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> words = new ArrayList<>();\n        words.add(\"name\");\n        words.add(\"of\");\n        words.add(\"string\");\n\n        System.out.println(findMax(words));  // Output: \"string\"\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.util.*;\n\nclass Eat {\n\n    public static List<Integer> eat(int number, int need, int remaining) {\n        int totalEaten = number + Math.min(need - number, remaining);\n        return Arrays.asList(totalEaten, remaining - (totalEaten - number));\n    }\n\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass DoAlgebra {\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        if (operator.size() != operand.size() - 1) {\n            throw new RuntimeException(\"Invalid input. The length of operator list is not equal to the length of operand list minus one.\");\n        }\n        if (operand.size() < 2) {\n            throw new RuntimeException(\"Invalid input. Operand list should have at least two operands.\");\n        }\n\n        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = i == operator.size() - 1 ? operand.get(i + 1) : operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num2;\n                    break;\n                case \"-\":\n                    result -= num2;\n                    break;\n                case \"*\":\n                    result *= num2;\n                    break;\n                case \"fdiv\":\n                case \"//\":\n                    result = result / num2;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> operator = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operand = Arrays.asList(2, 3, 4, 5);\n        System.out.println(doAlgebra(operator, operand)); // prints 9\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "public class Solve {\n    public static String solve(String s) {\n        StringBuilder sb = new StringBuilder();\n        boolean letterFound = false;\n\n        for (char c : s.toCharArray()) {\n            if (!Character.isLetter(c)) {\n                sb.append(c);\n            } else {\n                letterFound = true;\n                char lowerCaseChar = Character.toLowerCase(c);\n                sb.append(lowerCaseChar);\n            }\n        }\n\n        if (!letterFound) {\n            return new StringBuilder(s).reverse().toString();\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // prints \"4321\"\n        System.out.println(solve(\"ab\")); // prints \"AB\"\n        System.out.println(solve(\"#a@C\")); // prints \"#A@c\"\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null; // or throw an exception, depending on your requirements\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n            byte[] hashBytes = md.digest(bytes);\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < hashBytes.length; i++) {\n                String hex = Integer.toHexString(0xff & hashBytes[i]);\n                if (hex.length() == 1) {\n                    sb.append('0');\n                }\n                sb.append(hex);\n            }\n\n            return sb.toString();\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"MD5 algorithm is not supported\", e);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass GenerateIntegers {\n\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Integer> generateIntegers(int a, int b) {\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        List<Integer> evenDigits = new ArrayList<>();\n\n        for (int i = a; i <= b; i++) {\n            String str = String.valueOf(i);\n            for (char c : str.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 == 0) {\n                    evenDigits.add(i);\n                    break;\n                }\n            }\n        }\n\n        return evenDigits;\n    }\n}"}

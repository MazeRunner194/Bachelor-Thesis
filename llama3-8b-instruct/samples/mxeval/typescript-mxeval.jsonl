{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "const hasCloseElements = function (\n  numbers: Array<number>,\n  threshold: number,\n): boolean {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const distance = Math.abs(numbers[i] - numbers[j]);\n      if (distance <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "const separate_paren_groups = function(paren_string: string): Array<string> {\n    const result: Array<string> = [];\n    let current_group = '';\n    let open_brace_count = 0;\n\n    for (let char of paren_string) {\n        if (char === '(') {\n            open_brace_count++;\n            current_group += char;\n        } else if (char === ')') {\n            open_brace_count--;\n            current_group += char;\n            if (open_brace_count === 0) {\n                result.push(current_group);\n                current_group = '';\n            }\n        }\n    }\n\n    return result;\n};\n\n// Test the function\nconsole.log(separate_paren_groups('( ) (( )) (( )( ))'));"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "const truncate_number = function (number0: number): number {\n    return Number(number0.toFixed(0).substring(1));\n};"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "const below_zero = function(operations: Array<number>): boolean {\n    let balance = 0;\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean_absolute_deviation = function (numbers: Array<number>) : number {\n  if (!numbers || numbers.length === 0) {\n    throw new Error('Input array cannot be empty');\n  }\n\n  const mean = numbers.reduce((acc, current) => acc + current, 0) / numbers.length;\n  const deviations = numbers.map(x => Math.abs(x - mean));\n  return deviations.reduce((acc, current) => acc + current, 0) / numbers.length;\n};"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "const intersperse = function <T>(numbers: T[], delimeter: number): T[] {\n  if (numbers.length === 0) return numbers; // edge case: empty array\n  const result: T[] = [numbers[0]];\n  for (let i = 1; i < numbers.length; i++) {\n    result.push(delimeter);\n    result.push(numbers[i]);\n  }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parse_nested_parens = function(paren_string: string): Array<number> {\n    const result: Array<number> = [];\n    let currentDepth = 0;\n    let deepestDepth = 0;\n\n    for (let char of paren_string) {\n        if (char === '(') {\n            currentDepth++;\n            deepestDepth = Math.max(deepestDepth, currentDepth);\n        } else if (char === ')') {\n            currentDepth--;\n        }\n    }\n\n    result.push(deepestDepth);\n\n    return result;\n};\n\nconsole.log(parse_nested_parens('(()()) ((())) () ((())()())'));\n// Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "const filter_by_substring = function (strings: Array<string>, substring: string) : Array<string> {\n    return strings.filter(s => s.includes(substring));\n};"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n  let sum = 0;\n  let product = 1;\n\n  for (const num of numbers) {\n    sum += num;\n    product *= num;\n  }\n\n  return [sum, product];\n};"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const rolling_max = function (numbers: Array<number>): Array<number> {\n    const result: number[] = [numbers[0]];\n    let maxSoFar = numbers[0];\n    \n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > maxSoFar) {\n            maxSoFar = numbers[i];\n        }\n        result.push(maxSoFar);\n    }\n    \n    return result;\n};"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "const make_palindrome = function (string0: string): string {\n    let string1 = string0;\n    for (let i = 0; i < string1.length; i++) {\n        if (!isPalindrome(string1.substring(i))) {\n            break;\n        }\n        string1 = string1.substring(0, i);\n    }\n    return string1 + string1.split(\"\").reverse().join(\"\");\n};\n\nconst isPalindrome = function (str: string): boolean {\n    let left = 0;\n    let right = str.length - 1;\n    while (left < right) {\n        if (str[left] !== str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n};"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "const string_xor = function(a: string, b: string): string {\n    if (a.length !== b.length) {\n        throw new Error(\"Both strings must have the same length.\");\n    }\n\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        const bitA = parseInt(a[i], 2);\n        const bitB = parseInt(b[i], 2);\n        const xorBit = bitA ^ bitB;\n        result += xorBit.toString(2);\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "const longest = function (strings: Array<string>) : any | null  {\n    if (!strings.length) return null; // Return None in case the input list is empty.\n\n    let maxLength = 0;\n    let longestStr = '';\n\n    for (const str of strings) {\n        if (str.length > maxLength) {\n            maxLength = str.length;\n            longestStr = str;\n        }\n    }\n\n    return longestStr;\n};"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n  if (b === 0) return a;\n  return greatest_common_divisor(b, a % b);\n};"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "function allPrefixes(str: string): string[] {\n    let prefixes: string[] = [];\n    for(let i = 1; i <= str.length; i++) {\n        let prefix = str.substring(0, i);\n        if(prefix !== \"\") {\n            prefixes.push(prefix);\n        }\n    }\n    return prefixes;\n}\n\nconsole.log(allPrefixes('abc'));"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = function(n: number): string {\n    return Array.from({length: n + 1}, (_, i) => i).map(String).join(' ');\n};"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "const count_distinct_characters = function (string0: string) : number {\n    let charSet = new Set();\n    for (let char of string0.toLowerCase()) {\n        if (!charSet.has(char)) {\n            charSet.add(char);\n        }\n    }\n    return charSet.size;\n};"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const parse_music = (music_string: string): Array<number> => {\n    const notes = music_string.split(' ');\n    return notes.map(note => {\n        if (note === 'o') {\n            return 4;\n        } else if (note === 'o|') {\n            return 2;\n        } else if (note === '.|') {\n            return 1;\n        } else {\n            throw new Error(`Invalid note: ${note}`);\n        }\n    });\n};\n\nconsole.log(parse_music('o o| .| o| o| .| .| .| .| o o'));"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "const how_many_times = function (string0: string, substring: string): number {\n  let count = 0;\n  let index = 0;\n\n  while ((index = string0.indexOf(substring, index)) !== -1) {\n    count++;\n    index += substring.length; // move the index to avoid overlapping matches\n  }\n\n  return count;\n};"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const sortNumbers = function(numbers: string): string {\n    const numMap = new Map<string, number>([\n        ['zero', 0],\n        ['one', 1],\n        ['two', 2],\n        ['three', 3],\n        ['four', 4],\n        ['five', 5],\n        ['six', 6],\n        ['seven', 7],\n        ['eight', 8],\n        ['nine', 9]\n    ]);\n\n    const nums = numbers.split(' ');\n    const sortedNums = [...nums].sort((a, b) => {\n        return numMap.get(a).toString().localeCompare(numMap.get(b).toString());\n    });\n\n    return sortedNums.join(' ');\n};"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "const findClosestElements = function (numbers: number[]) : [number, number] | undefined {\n  if (numbers.length < 2) return undefined;\n\n  let minDiff = Infinity;\n  let closestPair: [number, number];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j <= numbers.length - 1; j++) {\n      const diff = Math.abs(numbers[j] - numbers[i]);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestPair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closestPair;\n};\n\n// Test cases\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // (2.0, 2.2)\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // (2.0, 2.0)"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n    if (numbers.length < 2) {\n        throw new Error('At least two elements are required');\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    return numbers.map(x => (x - min) / (max - min));\n};"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "const filter_integers = function (values: Array<any>): Array<number> {\n  return values.filter(value => typeof value === 'number' && !isNaN(value) && Math.floor(value) === value);\n};"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "const strlen = function (string0: string): number {\n  return string0.length;\n};"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "const largest_divisor = function (n: number) : number {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1; // or throw an error, depending on your desired behavior\n};"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst factorize = (n: number): number[] => {\n  const factors: number[] = [];\n  let divisor = 2;\n\n  while (divisor * divisor <= n) {\n    if (n % divisor === 0) {\n      let count = 0;\n      while (n % divisor === 0) {\n        n /= divisor;\n        count++;\n      }\n      Array.from({ length: count }, () => divisor).forEach((factor) => factors.push(factor));\n    }\n    divisor++;\n  }\n\n  if (n > 1) {\n    factors.push(n);\n  }\n\n  return factors;\n};"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "const remove_duplicates = function (numbers: Array<number>) : Array<number>  {\n    return numbers.filter((v, i) => numbers.indexOf(v) === i);\n};"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "const flip_case = function (string0: string) : string  {\n    return string0.split('').map((char) => char.toUpperCase().charAt(0).toLowerCase()).join('');\n}"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "const concatenate = function (strings: Array<string>): string {\n    return strings.join('');\n};"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "const filter_by_prefix = function(strings: Array<string>, prefix: string): Array<string> {\n    return strings.filter(s => s.startsWith(prefix));\n};\n\n// Test cases:\nconsole.log(filter_by_prefix([], 'a')); // []\nconsole.log(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')); // ['abc', 'array']"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "const get_positive = function(l: Array<number>): Array<number> {\n  return l.filter((x) => x > 0);\n};"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "const is_prime = function (n: number) : boolean {\n    if (n <= 1) return false; // 0, 1, and negatives are not prime\n    if (n === 2) return true; // 2 is prime\n    if (n % 2 !== 0) { // odd numbers are prime unless divisible by 3 or more\n        for (let i = 3; i * i <= n; i += 2) {\n            if (n % i === 0) return false;\n        }\n        return true; // no divisors found, so it's prime!\n    }\n    return false; // even numbers are not prime unless they're 2\n};"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "const sortThird = function (l: Array<number>): Array<number> {\n  return l.map((value, index) => {\n    if (index % 3 === 0) {\n      // If the index is divisible by 3, sort the value and keep it as an array\n      return [value].sort((a, b) => a - b);\n    } else {\n      // Otherwise, just keep the original value\n      return value;\n    }\n  });\n};"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "const max_element = function (l: Array<number>): number {\n  return Math.max(...l);\n};"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "const fizz_buzz = function (n: number): number {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if ((i % 11 === 0) || (i % 13 === 0)) {\n      const str = i.toString();\n      count += str.split('').filter(c => c === '7').length;\n    }\n  }\n  return count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const sort_even = function(l: number[]): number[] {\n    if (!Array.isArray(l)) throw new Error(\"Input must be an array\");\n    return l.map((v, i) => i % 2 === 0 ? [...l.slice(0, i)].flat().slice(1).sort()[0] : v);\n};"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst primeFib = (n: number): number => {\n  let a = 0;\n  let b = 1;\n  let fibNum = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(b)) {\n      fibNum = b;\n      break;\n    }\n    [a, b] = [b, a + b];\n  }\n\n  return fibNum;\n};\n\nconst isPrime = (num: number): boolean => {\n  if (num < 2) return false;\n  for (let i = 2, sqrtI = Math.sqrt(num); i <= sqrtI; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "const triples_sum_to_zero = function(l: Array<number>): boolean {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "function car_race_collision(n: number): number {\n  // Initialize the collision count to 0\n  let collisions = 0;\n\n  // Calculate the total distance traveled by a single car (since they all move at the same speed)\n  const distancePerCar = 2; // since cars travel an infinite distance in both directions\n\n  // Loop through each possible pair of cars (n choose 2)\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      // Calculate the minimum distance between these two cars\n      const minDistance = Math.max(0, distancePerCar - (i * distancePerCar) - ((n - j) * distancePerCar));\n\n      // Check if there's a collision (when the distance is exactly half of the total distance)\n      if (minDistance === distancePerCar / 2) {\n        collisions++;\n      }\n    }\n  }\n\n  return collisions;\n}"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "const incr_list = function(l: Array<number>): Array<number> {\n  return l.map((x) => x + 1);\n};"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n  const seen: Set<number> = new Set();\n  for (const num of l) {\n    if (seen.has(-num)) {\n      return true;\n    }\n    seen.add(num);\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "const change_base = function(x: number, base: number): string {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9\");\n    }\n\n    let result = '';\n    while (x > 0) {\n        x = Math.floor(x / base);\n        result = (x % base).toString() + result;\n    }\n    return result || '0';\n};"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "const triangle_area = function (a: number, h: number): number {\n  return (a * h) / 2;\n};"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "const fib4 = function(n: number): number {\n  if (n === 0 || n === 1) return 0; // base cases\n  if (n === 2) return 2;\n\n  let a = 0, b = 0, c = 2, d = 0;\n  for (let i = 3; i <= n; i++) {\n    const fib4_i = a + b + c + d;\n    a = b;\n    b = c;\n    c = d;\n    d = fib4_i;\n  }\n  return d;\n};"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "const median = function(l: Array<number>): number {\n    l.sort((a, b) => a - b);\n    const middleIndex = Math.floor(l.length / 2);\n\n    if (l.length % 2 === 0) {\n        return (l[middleIndex] + l[middleIndex - 1]) / 2;\n    } else {\n        return l[middleIndex];\n    }\n};"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "const is_palindrome = function(text: string): boolean {\n    let revText = text.toLowerCase().split('').reverse().join('');\n    return text.toLowerCase() === revText;\n};"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "const modp = function (n: number, p: number): number {\n  let result = 1;\n  n = Math.abs(n); // ensure n is non-negative\n  while (n > 0) {\n    if (n % 2 === 1) { // if n is odd\n      result = (result * p) % p; // update the result modulo p\n    }\n    n = Math.floor(n / 2); // divide n by 2\n  }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "const below_threshold = function(l: Array<number>, t: number): boolean {\n  return l.every(n => n < t);\n}"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n  return x + y;\n};"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "const same_chars = (s0: string, s1: string): boolean => {\n  if (s0.length !== s1.length) return false;\n\n  const charCountMap = new Map<string, number>();\n\n  for (let i = 0; i < s0.length; i++) {\n    let c = s0[i];\n    let count = charCountMap.get(c);\n    if (count === undefined) count = 0;\n    count++;\n    charCountMap.set(c, count);\n\n    c = s1[i];\n    count = charCountMap.get(c);\n    if (count === undefined) count = 0;\n    if (count > 0) {\n      if (c !== s0[i]) return false;\n      count--;\n      charCountMap.set(c, count);\n    }\n  }\n\n  for (let [key, value] of charCountMap) {\n    if (value > 0) return false;\n  }\n\n  return true;\n};"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "const fib = function (n: number): number {\n  if (n <= 1) return n;\n  let a = 0, b = 1, result = 1;\n  for (let i = 2; i <= n; i++) {\n    [a, b] = [b, a + b];\n  }\n  return b;\n};"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "const correct_bracketing = function(brackets: string): boolean {\n  let stack: string[] = [];\n  \n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) return false;\n      stack.pop();\n    }\n  }\n  \n  return stack.length === 0;\n};"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "const monotonic = function(l: Array<number>): boolean {\n  const direction = l[0] <= l[1] ? 1 : -1;\n  for (let i = 1; i < l.length - 1; i++) {\n    if ((l[i + 1] > l[i] && direction === -1) || (l[i + 1] < l[i] && direction === 1)) {\n      return false;\n    }\n  }\n  return true;\n};"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "const common = function(l1: Array<number>, l2: Array<number>): Array<number> {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const intersection = [...set1].filter((x) => set2.has(x));\n  return Array.from(new Set(intersection), Number);\n};"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "const largest_prime_factor = function(n: number): number {\n  let maxPrimeFactor = 1;\n\n  for (let i = 2; i * i <= n; i++) {\n    while (n % i === 0) {\n      maxPrimeFactor = i;\n      n /= i;\n    }\n  }\n\n  // If n is a prime number greater than 1, it's the largest prime factor\n  if (n > 1) {\n    maxPrimeFactor = n;\n  }\n\n  return maxPrimeFactor;\n};"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const correct_bracketing = function (brackets: string): boolean {\n  const stack: string[] = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(\"(\");\n    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) return false;\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "const derivative = function(xs: Array<number>): Array<number> {\n    const result: Array<number> = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(i * xs[i]);\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "const fibfib = (n: number): number => {\n  if (n <= 1) return 0;\n  if (n === 2) return 1;\n\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowels_count = function(s: string): number {\n    let count = 0;\n    const vowels = 'aeiou';\n    s = s.toLowerCase(); // convert to lowercase for simplicity\n    \n    for (let char of s) {\n        if (vowels.includes(char)) {\n            if (char === 'y' && s[s.length - 1] !== char) { // special case: 'y' at the end\n                continue;\n            }\n            count++;\n        }\n    }\n    \n    return count;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "const circular_shift = function(x: number, shift: number): string {\n  const strX = x.toString();\n  const numDigits = strX.length;\n  const shiftedStrX = strX.substring(Math.max(0, numDigits - shift)) + strX.slice(0, Math.max(0, numDigits - shift));\n\n  if (shift >= numDigits) {\n    return shiftedStrX.split(\"\").reverse().join(\"\");\n  }\n\n  return shiftedStrX;\n};"}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "const digitSum = function(s: string): number {\n    let sum = 0;\n    for (let char of s) {\n        if (char.toUpperCase() >= 'A' && char.toUpperCase() <= 'Z') {\n            sum += char.charCodeAt(0);\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const fruit_distribution = function(s: string, n: number): number {\n  // Split the input string into two parts: the apples and oranges part,\n  // and the total count of fruits.\n  const [applesOranges, _] = s.split(\" \");\n  const [numApplesAndOranges, _] = applesOranges.split(\"and\");\n  const numApples = parseInt(numApplesAndOranges.match(/(\\d+) apples/)[1]);\n  const numOranges = parseInt(numApplesAndOranges.match(/(\\d+) oranges/)[1]);\n\n  // Calculate the total number of fruits, subtracting the apples and oranges.\n  const numMangoes = n - (numApples + numOranges);\n\n  return numMangoes;\n};"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "const pluck = function(arr: Array<number>): Array<number> {\n    if (arr.length === 0) return [];\n\n    let smallestEvenValue = Infinity;\n    let resultIndex = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue) {\n            smallestEvenValue = arr[i];\n            resultIndex = i;\n        }\n    }\n\n    return [smallestEvenValue, resultIndex].filter(x => x !== Infinity);\n};"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "const search = function (lst: Array<number>): number | -1 {\n    const freqMap: { [key: number]: number } = {};\n\n    // Create a frequency map of the list\n    lst.forEach((num) => {\n        if (!freqMap[num]) {\n            freqMap[num] = 0;\n        }\n        freqMap[num]++;\n    });\n\n    // Find the greatest integer that is greater than zero and has a frequency greater than or equal to its value\n    let result: number | -1 = -1;\n    for (const num in freqMap) {\n        if (+num > 0 && +num >= freqMap[+num]) {\n            if (result === -1 || +num > result) {\n                result = +num;\n            }\n        }\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "const strange_sort_list = function <T extends Array<number>>(lst: T): T {\n  if (lst.length === 0) return lst; // edge case: empty list\n\n  const minFirst = lst.slice().sort((a, b) => a - b)[0]; // find the minimum value\n  const maxRest = lst.filter(x => x !== minFirst).slice().sort((a, b) => b - a)[0]; // find the maximum of the remaining values\n\n  return [...lst.filter(x => x === minFirst), ...lst.filter(x => x === maxRest), ...strange_sort_list(lst.filter(x => x !== minFirst && x !== maxRest))].flat();\n};"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n  if (\n    a + b > c &&\n    a + c > b &&\n    b + c > a\n  ) {\n    const s = (a + b + c) / 2;\n    return Math.round((s * (s - a) * (s - b) * (s - c)) ** 0.5 * 100) / 100;\n  } else {\n    return -1;\n  }\n};"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n  const qStr = JSON.stringify(q);\n  if (!isPalindrome(q)) return false; // not balanced, so won't fly\n\n  const sum = q.reduce((acc, val) => acc + val, 0);\n  if (sum > w) return false; // exceeds maximum weight, won't fly\n\n  return true; // both conditions met, will fly\n};\n\nconst isPalindrome = function (arr: Array<number>): boolean {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) return false; // not palindrome\n    left++;\n    right--;\n  }\n\n  return true; // is palindrome\n};"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "const smallest_change = function (arr: Array<number>): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  let changes = 0;\n  \n  while (left < right) {\n    if (arr[left] !== arr[right]) {\n      // If the elements at left and right are not equal, \n      // we need to change one of them. We can choose either.\n      if (arr[left + 1] === arr[right]) {\n        // If the element to the right of left is the same as the element at right,\n        // then we should change the element at left to make it a palindrome.\n        changes++;\n        left++;\n      } else {\n        // Otherwise, we should change the element at right to make it a palindrome.\n        changes++;\n        right--;\n      }\n    } else {\n      // If the elements at left and right are equal, then we don't need to change them,\n      // so we can move towards the center of the array.\n      left++;\n      right--;\n    }\n  }\n\n  return changes;\n};"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "const total_match = function (lst1: Array<string>, lst2: Array<string>): Array<string> {\n  const sum1 = lst1.reduce((acc, str) => acc + str.length, 0);\n  const sum2 = lst2.reduce((acc, str) => acc + str.length, 0);\n\n  if (sum1 < sum2) return lst1;\n  else if (sum1 > sum2) return lst2;\n  else return lst1; // if sums are equal, return the first list\n};"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "const isMultiplyPrime = (n: number): boolean => {\n    const primeNumbers = [];\n    let divisor = 2;\n\n    // Check for prime numbers up to sqrt(n)\n    while (divisor * divisor <= n) {\n        if (n % divisor === 0) {\n            let i = 2;\n            let isPrime = true;\n\n            while (i * i <= divisor) {\n                if (divisor % i === 0) {\n                    isPrime = false;\n                    break;\n                }\n                i++;\n            }\n\n            if (isPrime) {\n                primeNumbers.push(divisor);\n            }\n\n            do {\n                n /= divisor;\n            } while (n % divisor === 0);\n\n            if (!isPrime) {\n                break;\n            }\n        }\n        divisor++;\n    }\n\n    // Check if the remaining number is a product of three prime numbers\n    let count = 0;\n    while (primeNumbers.length > 0 && n > 1) {\n        for (const prime of primeNumbers) {\n            if (n % prime === 0) {\n                n /= prime;\n                count++;\n                break;\n            }\n        }\n\n        if (count >= 3) {\n            return true;\n        }\n    }\n\n    return false;\n};"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "const is_simple_power = function (x: number, n: number): boolean {\n  if (n === 0 || x <= 0) return false; // base cases\n  const logX = Math.log(x) / Math.log(n);\n  return Math.abs(logX - Math.floor(logX)) < Number.EPSILON;\n};"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "const iscube = function(a: number): boolean {\n  const c = Math.cbrt(a); // cube root of a\n  return c === parseInt(c.toString()); // check if c is an integer\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "function isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nconst hex_key = function(num: string): number {\n    let count = 0;\n    const decimalValues = {\n        A: 10,\n        B: 11,\n        C: 12,\n        D: 13,\n        E: 14,\n        F: 15\n    };\n\n    for (let i = 0; i < num.length; i++) {\n        let hexDigit = num[i];\n        if (decimalValues[hexDigit]) {\n            if (isPrime(decimalValues[hexDigit])) {\n                count++;\n            }\n        } else {\n            if (parseInt(hexDigit, 16) <= 7) { // Hex digits are 0-9 and A-F\n                if (isPrime(parseInt(hexDigit, 16))) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};\n\nconsole.log(hex_key(\"AB\"));  // Output: 1\nconsole.log(hex_key(\"1077E\"));  // Output: 2\nconsole.log(hex_key(\"ABED1A33\"));  // Output: 4\nconsole.log(hex_key(\"123456789ABCDEF0\"));  // Output: 6\nconsole.log(hex_key(\"2020\"));  // Output: 2"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "const decimal_to_binary = function(decimal: number): string {\n    let binary = decimal.toString(2);\n    return 'db' + Array(Math.ceil((binary.length + 1) / 8)).join('0').substr(-Math.floor((binary.length + 1) / 8), Math.ceil((binary.length + 1) / 8)) + binary + 'db';\n};"}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n  if (s.length < 3) return false; // not happy if too short\n\n  for (let i = 0; i <= s.length - 3; i++) {\n    const window = s.slice(i, i + 3);\n    if (!new Set(window).size === 3) return false; // not happy if not all distinct\n  }\n\n  return true; // happy!\n};"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    const letterGrades: string[] = [];\n    grades.forEach((gpa) => {\n        let letterGrade: string;\n        if (gpa >= 4.0) {\n            letterGrade = 'A+';\n        } else if (gpa > 3.7) {\n            letterGrade = 'A';\n        } else if (gpa > 3.3) {\n            letterGrade = 'A-';\n        } else if (gpa > 3.0) {\n            letterGrade = 'B+';\n        } else if (gpa > 2.7) {\n            letterGrade = 'B';\n        } else if (gpa > 2.3) {\n            letterGrade = 'B-';\n        } else if (gpa > 2.0) {\n            letterGrade = 'C+';\n        } else if (gpa > 1.7) {\n            letterGrade = 'C';\n        } else if (gpa > 1.3) {\n            letterGrade = 'C-';\n        } else if (gpa > 1.0) {\n            letterGrade = 'D+';\n        } else if (gpa > 0.7) {\n            letterGrade = 'D';\n        } else if (gpa > 0.0) {\n            letterGrade = 'D-';\n        } else {\n            letterGrade = 'E';\n        }\n        letterGrades.push(letterGrade);\n    });\n    return letterGrades;\n};"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "const prime_length = function(string0: string): boolean {\n    const length = string0.length;\n    if (length < 2) return false; // 0 and 1 are not considered prime numbers\n    \n    for(let i = 2, maxDivisor = Math.sqrt(length); i <= maxDivisor; i++) {\n        while(length % i === 0) {\n            length /= i;\n        }\n    }\n    \n    return length > 1; // a number is considered prime if it's divisible only by 1 and itself\n};\n\nconsole.log(prime_length('Hello')); // true\nconsole.log(prime_length('abcdcba')); // true\nconsole.log(prime_length('kittens')); // true\nconsole.log(prime_length('orange')); // false"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "function startsOneEnds(n: number): number {\n  if (n < 1) throw new Error(\"Invalid input: n must be a positive integer\");\n\n  let count = 0;\n  for (let i = 10 ** (n - 1); i <= 9 * 10 ** (n - 1); i++) {\n    const str = i.toString();\n    if (str.startsWith(\"1\") || str.endsWith(\"1\")) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "const solve = function(N: number): string {\n    let sum = 0;\n    let binary = N.toString(2);\n\n    for(let i = 0; i < binary.length; i++) {\n        if(binary[i] === '1') {\n            sum++;\n        }\n    }\n\n    return sum.toString();\n}"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "const add = function (lst: Array<number>): number {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(i % 2 !== 0 && lst[i] % 2 === 0) { // Check if the index is odd and the element is even\n            sum += lst[i]; // Add the even element to the sum\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "const antiShuffle = function(s: string): string {\n    return s.split(' ').map(word => word.split('').sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0)).join('')).join(' ');\n}"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "const getRow = (lst: Array<Array<number>>, x: number): Array<[number, number]> => {\n  const result: Array<[number, number]> = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        result.push([i, row.length - j - 1]);\n      }\n    }\n  }\n\n  // Sort coordinates by rows in ascending order\n  result.sort((a, b) => a[0] - b[0]);\n\n  // Sort coordinates within each row by columns in descending order\n  result.forEach((coord) => {\n    coord[1] = lst[coord[0]].length - coord[1] - 1;\n  });\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "const sort_array = function (array: number[]): number[] {\n    if (array.length === 0) return array; // edge case: empty array\n\n    const sum = array[0] + array[array.length - 1];\n    let result = [...array]; // create a copy of the original array\n\n    if (sum % 2 === 0) { // if the sum is even, sort in descending order\n        result.sort((a, b) => b - a);\n    } else { // if the sum is odd, sort in ascending order\n        result.sort((a, b) => a - b);\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const encrypt = (s: string): string => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const shiftedAlphabet = alphabet.substring(2 * 2, alphabet.length) + alphabet.slice(0, 2 * 2);\n  return s.split('').map(c => {\n    const index = alphabet.indexOf(c.toLowerCase());\n    if (index !== -1) {\n      return shiftedAlphabet[index];\n    }\n    return c;\n  }).join('');\n};"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): any | null {\n  if (lst.length < 2) return null; // no 2nd smallest element\n  lst.sort((a, b) => a - b); // sort in ascending order\n  const secondSmallest = lst[1];\n  if (secondSmallest === lst[0]) return null; // duplicate smallest elements\n  return secondSmallest;\n};"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const is_bored = function (S: string) : number  {\n  let boredomCount = 0;\n  const sentences = S.split(/(?<=[.!?])\\s+/g);\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith('I')) {\n      boredomCount++;\n    }\n  }\n  return boredomCount;\n};"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "const any_int = function(x: number, y: number, z: number): boolean {\n  if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n    return false;\n  }\n  const sum = x + y;\n  return sum === z || sum === z + (z - sum);\n};"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const encode = (message: string): string => {\n  const result = [];\n  for (let char of message) {\n    if (char.match(/[a-z]/i)) { // check if it's a letter\n      let newChar;\n      if (/[aeiou]/i.test(char)) { // is it a vowel?\n        const index = 'aeiou'.indexOf(char.toLowerCase());\n        newChar = String.fromCharCode('aeiou'.charAt((index + 2) % 5).toUpperCase().charCodeAt(0));\n      } else {\n        newChar = char.toUpperCase();\n      }\n      result.push(newChar);\n    } else {\n      result.push(char);\n    }\n  }\n  return result.join('');\n};"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "function skjkasdkd(lst: Array<number>): number {\n    // Function to check if a number is prime\n    function isPrime(n: number): boolean {\n        if (n <= 1) return false;\n        for (let i = 2; i * i <= n; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Find the largest prime value in the list\n    let maxPrime = -1;\n    for (const num of lst) {\n        if (isPrime(num)) {\n            maxPrime = Math.max(maxPrime, num);\n        }\n    }\n\n    // Calculate the sum of the digits of the largest prime value\n    let sumOfDigits = 0;\n    while (maxPrime > 0) {\n        sumOfDigits += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n    }\n\n    return sumOfDigits;\n}"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "const check_dict_case = function(dict: Map<any, string>): boolean {\n    if (dict.size === 0) return false; // empty dictionary, return false\n    let allLower = true;\n    let allUpper = true;\n\n    for (let [key, value] of dict) {\n        if (!isNaN(Number(key))) return false; // key is not a string, return false\n        if (!allLower && !allUpper) break; // found mixed case keys, return false\n\n        if (typeof key !== 'string') continue; // skip non-string keys\n        allLower = allLower && key === key.toLowerCase();\n        allUpper = allUpper && key === key.toUpperCase();\n    }\n\n    return allLower || allUpper;\n};"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const count_up_to = function(n: number): Array<number> {\n  const primes: Array<number> = [];\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function (a: number, b: number): number {\n  const unitDigitA = a % 10;\n  const unitDigitB = b % 10;\n  return unitDigitA * unitDigitB;\n};"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "const count_upper = function(s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i % 2 === 0 && /[AEIOU]/.test(String.fromCharCode(s.charCodeAt(i)).toUpperCase())) {\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst closest_integer = (value: string): number => {\n    const numValue = parseFloat(value);\n    return Math.abs(numValue - Math.floor(numValue)) < Math.abs(numValue - Math.ceil(numValue))\n        ? Math.floor(numValue)\n        : Math.ceil(numValue);\n};\n\n// Test cases\nconsole.log(closest_integer(\"10\")); // 10\nconsole.log(closest_integer(\"15.3\")); // 16\nconsole.log(closest_integer(\"-14.5\")); // -15\nconsole.log(closest_integer(\"0.5\")); // 1"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const make_a_pile = function(n: number): Array<number> {\n    const pile: Array<number> = [n];\n    for (let i = 1; i < n; i++) {\n        let nextLevelStones;\n        if (pile[i] % 2 === 0) {\n            nextLevelStones = pile[i] + 1;\n        } else {\n            nextLevelStones = pile[i] - 1;\n        }\n        pile.push(nextLevelStones);\n    }\n    return pile;\n};"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "const words_string = function(s: string): Array<string> {\n  return s.split(/[\\s,]+/).map(word => word.trim());\n};"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function(x: number, y: number): number {\n    if (x > y) return -1;\n    \n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) return i;\n    }\n    \n    return -1;\n};"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any | string {\n  if (n > m) return -1;\n\n  const sum = Array.from({ length: m - n + 1 }, (_, i) => n + i).reduce((acc, curr) => acc + curr, 0);\n  const avg = Math.round(sum / (m - n + 1));\n\n  return avg.toString(2); // convert to binary and string\n};"}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const unique_digits = function (x: Array<number>) : Array<number>  {\n  return x.filter(n => !hasEvenDigit(n)).sort((a, b) => a - b);\n};\n\nfunction hasEvenDigit(num: number): boolean {\n  const numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (+numStr[i] % 2 === 0) return true;\n  }\n  return false;\n}"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "const by_length = function (arr: number[]) : string[]  {\n    const oneToNine = arr.filter(n => n >= 1 && n <= 9);\n    if (oneToNine.length === 0) return [];\n\n    const sortedOneToNine = oneToNine.sort((a, b) => a - b);\n    const reversedSortedOneToNine = sortedOneToNine.reverse();\n\n    const numberNames = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    return reversedSortedOneToNine.map(n => numberNames[n - 1]);\n};"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n  const result: Array<number> = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) { // even index\n      result.push(factorial(i));\n    } else { // odd index\n      result.push(sumFromOneToI(i));\n    }\n  }\n\n  return result;\n};\n\nconst factorial = function (n: number): number {\n  let result = 1;\n\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n};\n\nconst sumFromOneToI = function (i: number): number {\n  let sum = 0;\n\n  for (let j = 1; j <= i; j++) {\n    sum += j;\n  }\n\n  return sum;\n};"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "const even_odd_palindrome = (n: number): [number, number] => {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    if (str === str.split(\"\").reverse().join(\"\")) {\n      if (+str % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "const count_nums = function (arr: Array<number>) : number  {\n    let count = 0;\n    for (let num of arr) {\n        if (num < 0) {\n            num = Math.abs(num);\n        }\n        let sumOfDigits = 0;\n        while (num > 0) {\n            sumOfDigits += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sumOfDigits > 0) {\n            count++;\n        }\n    }\n    return count;\n};"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "const move_one_ball = (arr: Array<number>): boolean => {\n  if (!arr.length) return true; // empty array, always possible to sort\n\n  const minVal = Math.min(...arr); // find the smallest element\n  let rightShifts = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= minVal) { // we've reached or exceeded the smallest element\n      return false; // impossible to sort by shifting right\n    }\n    rightShifts++;\n  }\n\n  return true; // possible to sort by shifting right\n};"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n  const oddCount = lst1.filter((x) => x % 2 !== 0).length;\n  if (oddCount === 0) return \"YES\";\n  const evenInLst2 = lst2.filter((x) => x % 2 === 0).length;\n  return oddCount <= evenInLst2 ? \"YES\" : \"NO\";\n};"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "const histogram = function (test: string): Map<string, number> {\n  const letterCounts: Map<string, number> = new Map();\n  if (!test || test.length === 0) return letterCounts;\n\n  let maxCount = 0;\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    const existingCount = letterCounts.get(letter);\n    const count = existingCount ? existingCount + 1 : 1;\n    if (count > maxCount) {\n      maxCount = count;\n    }\n    letterCounts.set(letter, count);\n  }\n\n  // Find all letters with the maximum count\n  const maxLetters: string[] = [];\n  for (const [letter, count] of letterCounts) {\n    if (count === maxCount) {\n      maxLetters.push(letter);\n    }\n  }\n\n  return new Map([...letterCounts.entries()].filter(([letter, _]) => maxLetters.includes(letter)));\n};"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "const reverse_delete = function(s: string, c: string): [string, boolean] {\n  // Create a new string that only includes characters not in c\n  const result = s.split('').filter(cChar => !c.includes(cChar)).join('');\n\n  // Check if the result is a palindrome\n  let isPalindrome = true;\n  for (let i = 0; i < Math.floor(result.length / 2); i++) {\n    if (result[i] !== result[result.length - 1 - i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n\n  return [result, isPalindrome];\n};"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const odd_count = function(lst: Array<string>): Array<string> {\n  return lst.map((str, index) => {\n    const oddCount = str.split('').filter(digit => parseInt(digit) % 2 !== 0).length;\n    return `the number of odd elements ${oddCount}n the string ${index+1} of the input.`;\n  });\n};"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "const minSubArraySum = function (nums: Array<number>): number {\n    let minSum = Infinity;\n    let currentSum = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n\n        if (currentSum > 0) {\n            minSum = Math.min(minSum, currentSum);\n        } else {\n            currentSum = 0;\n        }\n    }\n\n    return minSum === Infinity ? 0 : minSum;\n};"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "const maxFill = (grid: Array<Array<number>>, capacity: number): number => {\n  let totalWater = 0;\n  for (let well of grid) {\n    totalWater += well.reduce((acc, current) => acc + current, 0);\n  }\n\n  let bucketsNeeded = Math.ceil(totalWater / capacity);\n  return bucketsNeeded;\n};"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "const sort_array = function (arr: Array<number>): Array<number> {\n  return arr.sort((a, b) => {\n    const onesA = a.toString(2).split('1').length - 1;\n    const onesB = b.toString(2).split('1').length - 1;\n\n    if (onesA === onesB) {\n      return a - b; // sort by decimal value\n    } else {\n      return onesA - onesB; // sort by number of ones\n    }\n  });\n};"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "const select_words = function(s: string, n: number): Array<string> {\n    let result: Array<string> = [];\n    let words: string[] = s.split(' ');\n    for (let word of words) {\n        let consonants: string[] = [];\n        for (let char of word.toLowerCase()) {\n            if (!['a', 'e', 'i', 'o', 'u'].includes(char)) {\n                consonants.push(char);\n            }\n        }\n        if (consonants.length === n) {\n            result.push(word);\n        }\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const get_closest_vowel = function(word: string): string {\n    let closestVowel = '';\n    for (let i = word.length - 1; i > 0; i--) {\n        if ('aeiouAEIOU'.includes(word[i])) {\n            // Check if the current vowel is surrounded by consonants\n            if (word[i-1].search(/[bcdfghjklmnpqrstvwxyz]/) === -1 && word[i+1].search(/[bcdfghjklmnpqrstvwxyz]/) === -1) {\n                closestVowel = word[i];\n                break;\n            }\n        }\n    }\n    return closestVowel;\n};"}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "const match_parens = (lst: Array<string>): string => {\n  const stack: string[] = [];\n\n  for (const str of lst) {\n    for (const c of str) {\n      if (c === '(') {\n        stack.push(c);\n      } else if (c === ')') {\n        if (stack.length === 0 || stack.pop() !== '(') {\n          return 'No';\n        }\n      }\n    }\n  }\n\n  return stack.length === 0 ? 'Yes' : 'No';\n};"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    \n    // Return the top k elements\n    return arr.slice(0, k);\n};"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "const solution = function (lst: Array<number>): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 !== 0) { // check if position is odd and element is odd\n      sum += lst[i];\n    }\n  }\n  return sum;\n};"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "const addElements = function (arr: number[], k: number): number {\n    let sum = 0;\n    for (let i = 0; i < Math.min(k, arr.length); i++) {\n        const num = arr[i];\n        if (String(num).length <= 2) {\n            sum += num;\n        }\n    }\n    return sum;\n};"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "const get_odd_collatz = function (n: number): number[] {\n  const sequence: number[] = [n];\n  let current = n;\n\n  while (current !== 1) {\n    if (current % 2 === 0) {\n      current = Math.floor(current / 2);\n    } else {\n      current = 3 * current + 1;\n    }\n    sequence.push(current);\n  }\n\n  const oddNumbers: number[] = [];\n  for (const num of sequence) {\n    if (num % 2 !== 0) {\n      oddNumbers.push(num);\n    }\n  }\n\n  return oddNumbers.sort((a, b) => a - b);\n};"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "const valid_date = function(date: string): boolean {\n    if (!date || date.length !== 10 || date.charAt(2) !== '-' || date.charAt(5) !== '-') {\n        return false;\n    }\n\n    const [month, day, year] = date.split('-');\n    if (+month < 1 || +month > 12 || +day < 1 || (+(month === '02' && +day > 29)) || \n        ((+month % 2 !== 0) && (+month > 7) && (+day > 31)) || \n        ((+month % 2 === 0) && (+month > 8) && (+day > 30))) {\n        return false;\n    }\n\n    return true;\n};"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "const split_words = (txt: string): any => {\n    let words: any[];\n\n    // Check if there are whitespaces in the text, if yes, split on them\n    if (/[\\s]/.test(txt)) {\n        words = txt.split(/\\s+/);\n    }\n    else { // If no whitespaces exist, check for commas\n        if (/[,]/.test(txt)) { // Split on commas if they exist\n            words = txt.split(/[,\\s]+/);\n        }\n        else { // If no commas exist, count odd-numbered lowercase letters\n            let count = 0;\n            for (let i = 0; i < txt.length; i++) {\n                const charCode = txt.charCodeAt(i);\n                if ((charCode >= 'a'.charCodeAt(0) && charCode <= 'z'.charCodeAt(0)) && (i + 1) % 2 !== 0) {\n                    count++;\n                }\n            }\n            words = [count];\n        }\n    }\n\n    return words;\n};"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "const is_sorted = function (lst: Array<number>) : boolean {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] >= lst[i + 1]) return false;\n    }\n    const uniqueNumbers = new Set(lst);\n    return lst.length === uniqueNumbers.size;\n};"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "const intersection = function (interval1: [number, number], interval2: [number, number]): string {\n    // Calculate the intersection of the two intervals\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start <= end) { // Check if the intervals intersect\n        // Calculate the length of the intersection\n        let length = end - start + 1;\n\n        // Check if the length is a prime number\n        let isPrime = true;\n        for (let i = 2; i * i <= length; i++) {\n            if (length % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n\n        return isPrime ? \"YES\" : \"NO\";\n    } else {\n        return \"NO\"; // The intervals do not intersect\n    }\n};"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "const prod_signs = function (arr: Array<number>): any | null {\n  if (arr.length === 0) return null; // return None for empty arr\n\n  let productOfSigns = 1;\n  let sumOfMagnitudes = 0;\n\n  for (let num of arr) {\n    const sign = Math.sign(num);\n    if (sign !== 0) {\n      productOfSigns *= sign;\n      sumOfMagnitudes += Math.abs(num);\n    }\n  }\n\n  return sumOfMagnitudes * productOfSigns;\n};"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "function minPath(grid: Array<Array<number>>, k: number): Array<number> {\n  const N = grid.length; // Get the size of the grid\n  const values: Array<number> = [];\n  let currentCellValue: number;\n  let minLength: number;\n\n  // Find the cell with the smallest value in the first row (or column)\n  for (let i = 0; i < N; i++) {\n    currentCellValue = grid[0][i];\n    if (!values.includes(currentCellValue)) { // Ensure it's not already in the path\n      values.push(currentCellValue);\n      minLength = k;\n      break;\n    }\n  }\n\n  // Perform DFS from the starting cell to find the minimum path\n  function dfs(x: number, y: number): Array<number> {\n    const visited: Array<Array<boolean>> = new Array(N).fill(0).map(() => new Array(N).fill(false));\n    let currentPath: Array<number>;\n    let minLengthFound: boolean;\n\n    visited[x][y] = true;\n    currentPath = values.slice();\n    currentPath.push(grid[x][y]);\n\n    function explore(dx: number, dy: number): void {\n      if (visited[x + dx][y + dy]) return; // Avoid revisiting cells\n      if (currentPath.length >= minLength) return; // Path is already k long\n\n      const newX = x + dx;\n      const newY = y + dy;\n\n      if (newX < 0 || newX >= N || newY < 0 || newY >= N) return; // Off-grid boundary check\n      if (!values.includes(grid[newX][newY])) return; // Ensure the cell value is not already in the path\n\n      visited[newX][newY] = true;\n      currentPath.push(grid[newX][newY]);\n\n      explore(dx, dy);\n    }\n\n    explore(-1, 0); // Explore up\n    explore(1, 0); // Explore down\n    explore(0, -1); // Explore left\n    explore(0, 1); // Explore right\n\n    if (currentPath.length === minLength) {\n      minLengthFound = true;\n    }\n\n    return currentPath;\n  }\n\n  let minPathFound: boolean;\n\n  for (let i = 0; i < N; i++) {\n    const tempPath = dfs(i, 0);\n    if (!minPathFound && tempPath.length === k) {\n      minPathFound = true;\n      values = tempPath;\n    }\n  }\n\n  return values;\n}"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n    if (n === 0) return [3];\n    if (n === 1) return [1, 3];\n    if (n === 2) return [1, 3, 2];\n\n    let sequence: Array<number> = [1, 3, 2];\n    \n    for(let i = 3; i <= n; i++) {\n        let nextTriNum = sequence[i-1] + sequence[i-2] + (i % 2 === 0 ? Math.floor(i/2) : 0);\n        sequence.push(nextTriNum);\n    }\n\n    return sequence;\n};"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "const digits = function (n: number): number {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) { // check if digit is odd\n      product *= digit; // multiply product by the odd digit\n    }\n    n = Math.floor(n / 10); // move to next digit\n  }\n  return product;\n};"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n    const stack: string[] = [];\n\n    for (let char of string0) {\n        if (char === '[') {\n            stack.push(char);\n        } else if (char === ']') {\n            if (stack.length === 0) return false;\n            stack.pop();\n            if (stack.length > 0 && stack[stack.length - 1] === '[') {\n                return true;\n            }\n        }\n    }\n\n    return false;\n};"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n  return Math.ceil(lst.map(x => x * x).reduce((a, b) => a + b, 0));\n}"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "const checkIfLastCharIsALetter = (txt: string): boolean => {\n  const lastChar = txt.slice(-1);\n  return /\\w/.test(lastChar) ? false : /[a-zA-Z]/.test(lastChar);\n};"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n    let largestIndex = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] <= arr[i - 1]) {\n            largestIndex = i;\n            break;\n        }\n    }\n    return largestIndex;\n};"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): Array<any> {\n    const negativeIntegers = lst.filter(x => x < 0);\n    const positiveIntegers = lst.filter(x => x > 0);\n\n    if (negativeIntegers.length === 0 && positiveIntegers.length === 0) {\n        return [null, null];\n    } else if (negativeIntegers.length === 0) {\n        return [null, Math.min(...positiveIntegers)];\n    } else if (positiveIntegers.length === 0) {\n        return [Math.max(...negativeIntegers), null];\n    } else {\n        return [Math.max(...negativeIntegers), Math.min(...positiveIntegers)];\n    }\n};"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "const compareOne = (a: any, b: any): any => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.max(a, b);\n  }\n\n  if ((typeof a === 'string' || typeof a === 'number') && (typeof b === 'string' || typeof b === 'number')) {\n    const aNum = parseFloat(a.toString().replace(',', '.'), 10);\n    const bNum = parseFloat(b.toString().replace(',', '.'), 10);\n\n    if (aNum > bNum) return a;\n    if (bNum > aNum) return b;\n\n    return null; // values are equal\n  }\n\n  throw new Error('Invalid input types');\n};"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "const is_equal_to_sum_even = function(n: number): boolean {\n  for (let i = 2; i <= n && i % 2 === 0; i++) {\n    let sum = 0;\n    for (let j = 2; j <= Math.floor(n / 2) && j % 2 === 0; j++) {\n      if (sum + j > n) break;\n      sum += j;\n      if (sum === n) return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Brazilian factorial only defined for n > 0\");\n    }\n\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i! * special_factorial(i - 1);\n    }\n    return result;\n};"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "const fix_spaces = function(text: string): string {\n  return text.replace(/\\s+/g, (match: string) => {\n    if (match.length > 2) {\n      return '-'.repeat(match.length - 1);\n    }\n    return '_';\n  });\n};"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "const file_name_check = function(file_name: string): string {\n  const regex1 = /^[a-zA-Z]+$/; // matches one or more latin alphabet letters at the start\n  const regex2 = /\\d{1,3}/g; // matches between 0 and 3 digits anywhere in the name\n  const regex3 = /\\.([txtexe dll]{3,4})$/; // matches exactly one dot followed by either 'txt', 'exe', or 'dll' at the end\n\n  if (!regex1.test(file_name.split('.')[0])) {\n    return 'No'; // file name should start with a latin alphabet letter\n  }\n  if (file_name.split('.').length > 2) {\n    return 'No'; // there should not be more than one dot\n  }\n  const parts = file_name.split('.');\n  if (!regex3.test(file_name)) { // check the extension\n    return 'No';\n  }\n  if (regex2.test(file_name.replace('.', ''))) { // count the number of digits in the name\n    return 'No'; // there should not be more than three digits anywhere in the file name\n  }\n\n  return 'Yes';\n};"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "const sum_squares = function <T extends Array<number>>(lst: T): number {\n    return lst.reduce((acc, current) => acc + Math.pow(current, 2), 0);\n};"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "function wordsInSentence(sentence: string): string {\n    const words = sentence.split(' ');\n    let result = '';\n\n    for (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length)) {\n            result += words[i] + ' ';\n        }\n    }\n\n    return result.trim();\n}\n\nfunction isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2, sqrt = Math.floor(Math.sqrt(n)); i <= sqrt; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "function simplify(x: string, n: string): boolean {\n    const [xNumerator, xDenominator] = x.split('/').map(Number);\n    const [nNumerator, nDenominator] = n.split('/').map(Number);\n\n    // Calculate the product of the fractions\n    const productNumerator = xNumerator * nNumerator;\n    const productDenominator = xDenominator * nDenominator;\n\n    // Check if the result is an integer (i.e., no decimal part)\n    return productNumerator / productDenominator % 1 === 0;\n}"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    return nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n        const sumB = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n        \n        if (sumA === sumB) return nums.indexOf(a) - nums.indexOf(b);\n        else return sumA - sumB;\n    });\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n  let count = 0;\n  for (const num of nums) {\n    if (Math.abs(num) > 10 && isOddFirstAndLastDigit(num)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nfunction isOddFirstAndLastDigit(n: number): boolean {\n  const strNum = n.toString();\n  return parseInt(strNum[0]) % 2 !== 0 && parseInt(strNum[strNum.length - 1]) % 2 !== 0;\n}"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n  const a: number[] = new Array(n);\n  let count: number = 0;\n\n  for (let i = 1; i <= n; i++) {\n    a[i - 1] = i * i - i + 1;\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n};"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nconst bf = (planet1: string, planet2: string): [string, ...string[]] | [] => {\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n\n  const result: string[] = [];\n\n  for (let i = index1 + 1; i < index2; i++) {\n    result.push(...planets.slice(i, i + 1));\n  }\n\n  return [planet1, ...result, planet2];\n};"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "const sortedListSum = function(lst: Array<string>): Array<string> {\n    // Filter out strings with odd lengths and sort the result\n    return lst.filter((str) => str.length % 2 === 0)\n               .sort((a, b) => {\n                   if (a.length === b.length) {\n                       return a.localeCompare(b);\n                   } else {\n                       return a.length - b.length;\n                   }\n               });\n};"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst x_or_y = function(n: number, x: number, y: number): number {\n  if (isPrime(n)) return x;\n  return y;\n};"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    let sum = 0;\n    for (let num of lst) {\n        if (typeof num !== 'number' || num < 0) continue;\n        if (Math.floor(num) === num && num % 2 !== 0) { // check if it's an odd integer\n            sum += Math.pow(num, 2);\n        }\n    }\n    return sum * 2; // double the result\n};"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "const compare = function (game: Array<number>, guess: Array<number>): Array<number> {\n  return game.map((score, i) => Math.abs(score - guess[i]));\n};"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "const Strongest_Extension = function(class_name: string, extensions: Array<string>): string {\n    let strongest_extension = '';\n    let max_strength = -Infinity;\n\n    for (let extension of extensions) {\n        let cap = 0;\n        let sm = 0;\n\n        for (let char of extension) {\n            if (char.toUpperCase() === char) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n\n        let strength = cap - sm;\n\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n\n    return class_name + '.' + strongest_extension;\n};"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n  for (let i = 0; i < a.length; i++) {\n    let rotation = a.slice(i) + a.slice(0, i);\n    if (rotation.includes(b)) return true;\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "const even_odd_count = function (num: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    const numStr = String(num).replace('-', '').replace('+', '');\n    for (let i = 0; i < numStr.length; i++) {\n        const digit = parseInt(numStr[i]);\n        if (digit % 2 === 0) evenCount++;\n        else oddCount++;\n    }\n\n    return [evenCount, oddCount];\n};"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "function int_to_mini_roman(number0: number): string {\n    if (typeof number0 !== \"number\" || number0 < 1 || number0 > 1000) {\n        throw new Error(\"Input must be a positive integer between 1 and 1000.\");\n    }\n\n    const romanNumerals = [\n        { value: 1000, numeral: \"M\" },\n        { value: 900, numeral: \"CM\" },\n        { value: 500, numeral: \"D\" },\n        { value: 400, numeral: \"CD\" },\n        { value: 100, numeral: \"C\" },\n        { value: 90, numeral: \"XC\" },\n        { value: 50, numeral: \"L\" },\n        { value: 40, numeral: \"XL\" },\n        { value: 10, numeral: \"X\" },\n        { value: 9, numeral: \"IX\" },\n        { value: 5, numeral: \"V\" },\n        { value: 4, numeral: \"IV\" },\n        { value: 1, numeral: \"I\" }\n    ];\n\n    let roman = \"\";\n    for (const numeral of romanNumerals) {\n        while (number0 >= numeral.value) {\n            number0 -= numeral.value;\n            roman += numeral.numeral.toLowerCase();\n        }\n    }\n\n    return roman;\n}"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    const aSq = a ** 2;\n    const bSq = b ** 2;\n    const cSq = c ** 2;\n\n    // Check if the square of one side is equal to the sum of the squares of the other two sides\n    return (aSq + bSq === cSq) || (bSq + cSq === aSq) || (cSq + aSq === bSq);\n};"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "const find_max = function (words: Array<string>): string {\n    let maxWord = \"\";\n    let maxUniqueChars = 0;\n\n    words.forEach(word => {\n        const uniqueChars = new Set(word.toLowerCase()).size;\n        if (uniqueChars > maxUniqueChars) {\n            maxUniqueChars = uniqueChars;\n            maxWord = word;\n        } else if (uniqueChars === maxUniqueChars) {\n            if (word.localeCompare(maxWord) < 0) {\n                maxWord = word;\n            }\n        }\n    });\n\n    return maxWord;\n};"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "const eat = function (number0: number, need: number, remaining: number): Array<number> {\n  let totalEaten = number0; // initial number of eaten carrots\n  let leftOverCarrots: number;\n\n  if (totalEaten >= need) { // already eaten enough for the day\n    return [totalEaten, 0]; // no more eating needed!\n  }\n\n  let additionalCarrotsNeeded = need - totalEaten; // calculate how many more are needed\n  let maxAdditionalCarrotsToEat = Math.min(additionalCarrotsNeeded, remaining); // don't eat more than what's left\n\n  totalEaten += maxAdditionalCarrotsToEat; // update the total eaten\n  leftOverCarrots = remaining - maxAdditionalCarrotsToEat; // calculate how many are left\n\n  if (totalEaten < need) { // still hungry after eating all available carrots!\n    return [need, 0]; // no more carrots left, but still hungry\n  }\n\n  return [totalEaten, leftOverCarrots]; // all good! we're done eating and there are leftovers\n};"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "const do_algebra = function(operator: string[], operand: number[]): number {\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        const currentOperator = operator[i];\n        const currentOperand = operand[i + 1];\n\n        switch (currentOperator) {\n            case '+':\n                result += currentOperand;\n                break;\n            case '-':\n                result -= currentOperand;\n                break;\n            case '*':\n                result *= currentOperand;\n                break;\n            case '//' :\n                result = Math.floor(result / currentOperand);\n                break;\n            case '**':\n                result **= currentOperand;\n                break;\n        }\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "const solve = function(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i];\n    if (c.charCodeAt(0) >= 'a'.charCodeAt(0) && c.charCodeAt(0) <= 'z'.charCodeAt(0)) {\n      // If the character is a letter, reverse its case\n      result += c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase();\n    } else {\n      // Otherwise, keep it as it is\n      result += c;\n    }\n  }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "const string_to_md5 = function(text: string): string | null {\n  if (!text) return null; // empty string, return null\n  const crypto = require('crypto');\n  const md5Sum = crypto.createHash('md5');\n  md5Sum.update(text);\n  return md5Sum.digest('hex');\n};"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "const generateIntegers = (a: number, b: number): Array<number> => {\n  let result = [];\n  for (let i = Math.max(a, b); i >= Math.min(a, b); i--) {\n    const str = i.toString();\n    for (let j = 0; j < str.length; j++) {\n      if (+str[j] % 2 === 0) {\n        result.push(+str[j]);\n      }\n    }\n  }\n  return result;\n};"}

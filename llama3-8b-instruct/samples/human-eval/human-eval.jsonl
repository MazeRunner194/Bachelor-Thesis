{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than \n    given threshold.\n    \n    Args:\n    numbers (List[float]): A list of floating point numbers.\n    threshold (float): The maximum allowed distance between two numbers.\n\n    Returns:\n    bool: True if there are two numbers that are closer to each other than the threshold, False otherwise.\n    \"\"\"\n    \n    # Iterate over all pairs of numbers in the list\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # Calculate the distance between the current pair of numbers\n            distance = abs(numbers[i] - numbers[j])\n            \n            # If the distance is less than or equal to the threshold, return True\n            if distance <= threshold:\n                return True\n    \n    # If no pair of numbers had a distance less than or equal to the threshold, return False\n    return False"}
{"task_id": "HumanEval/1", "completion": "Python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = ''\n    \n    for char in paren_string:\n        if char == '(':\n            temp += '('\n        elif char == ')':\n            temp += ')'\n            if set(temp) == {'('}:\n                result.append(temp)\n                temp = ''\n\n    return result\n\nprint(separate_paren_groups('( ) (( )) (( )( \"))'))"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Detect if at any point the balance of account falls below zero \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\nimport statistics\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the dataset using statistics.mean()\n    mean = statistics.mean(numbers)\n    \n    # Calculate absolute differences between each number and the mean\n    deviations = [abs(num - mean) for num in numbers]\n    \n    # Calculate the average (mean) of these deviations\n    mad = statistics.mean(deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "Python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    \n    for i in range(1, len(numbers)):\n        result.extend([delimeter, numbers[i]])\n        \n    return result"}
{"task_id": "HumanEval/6", "completion": "Here is the solution:\n\n```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    \n    for paren in paren_string.split():\n        level = 0\n        nested_levels = []\n        \n        for char in paren:\n            if char == '(':\n                level += 1\n                nested_levels.append(level)\n            elif char == ')':\n                level -= 1\n        \n        result.append(max(nested_levels))\n    \n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment \n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        result.append(max(num, max_so_far))\n        if num > max_so_far:\n            max_so_far = num\n    return result"}
{"task_id": "HumanEval/10", "completion": "Python\ndef make_palindrome(s: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n    # Reverse the input string\n    rev_s = s[::-1]\n    \n    # Find the common prefix between the original string and its reversal\n    while s and rev_s and s[0] == rev_s[0]:\n        s = s[1:]\n        rev_s = rev_s[1:]\n    \n    # Append the reversed suffix to the remaining prefix\n    return s + rev_s"}
{"task_id": "HumanEval/11", "completion": "Python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    Args:\n        a (str): The first input string.\n        b (str): The second input string.\n\n    Returns:\n        str: The result of the XOR operation as a string.\n    \"\"\"\n    \n    # Check if both strings have the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Perform binary XOR on each pair of corresponding bits in a and b\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result.append('0')\n        elif a[i] == '1' and b[i] == '0':\n            result.append('1')\n        elif a[i] == '0' and b[i] == '1':\n            result.append('1')\n        else:\n            result.append('0')\n    \n    # Convert the result list to a string\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_len = 0\n    longest_str = None\n    \n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n            \n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    result = []\n    for i in range(len(string) + 1):\n        result.append(string[:i])\n    return result\n\nprint(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "Python\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\"\"\"\n    \n    # Initialize an empty list\n    sequence = []\n    \n    # Loop through each number from 0 to n (inclusive)\n    for i in range(n + 1):\n        # Convert the number to a string and add it to the list\n        sequence.append(str(i))\n    \n    # Join all elements of the list with spaces in between\n    result = ' '.join(sequence)\n    \n    # Return the resulting string\n    return result"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\"\"\"\n    \n    # Convert the string to lowercase to make the character comparison case-insensitive\n    string = string.lower()\n    \n    # Initialize an empty set to store unique characters\n    unique_chars = set()\n    \n    # Iterate over each character in the string\n    for char in string:\n        # Add each character to the set\n        unique_chars.add(char)\n    \n    # Return the number of distinct characters (which is equal to the size of the set)\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "completion": "Python\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    parsed_notes = []\n    current_note = ''\n    \n    for char in music_string:\n        if char in ['o', '|']:\n            current_note += char\n        elif char == '.':\n            current_note += '|'\n        elif char == '|':\n            parsed_notes.append(note_duration[current_note])\n            current_note = ''\n    \n    # Add the last note duration to the list\n    parsed_notes.append(note_duration[current_note])\n    \n    return parsed_notes"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string)) if string.startswith(substring, i)])"}
{"task_id": "HumanEval/19", "completion": "Python\nfrom typing import List, Dict\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict: Dict[str, int] = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n                                 'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n                                 'eight': 8, 'nine': 9}\n\n    num_list: List[str] = numbers.split()\n    \n    sorted_num_list: List[str] = sorted([num for num in num_list if num in num_dict], key=lambda x: num_dict[x])\n\n    return ' '.join(sorted_num_list)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each \n    other and return them in order (smaller number, larger number).\"\"\"\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Initialize the minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    # Iterate over the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        \n        # Update the minimum difference and the closest pair if a smaller difference is found\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "Python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    return [(x - min_value) / (max_value - min_value) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    \n    # Use a list comprehension to iterate over the input list and \n    # include only those elements that are instances of int type.\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "Python\ndef strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "Python\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "Python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.append([i] * count)\n    if n > 1:\n        factors.append([n])\n    return [factor for factor in factors if factor]\n\nprint(factorize(8))  # Output: [[2, 2, 2]]\nprint(factorize(25))  # Output: [[5, 5]]\nprint(factorize(70))  # Output: [[2], [5, 7]]"}
{"task_id": "HumanEval/26", "completion": "Python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n            \n    return result"}
{"task_id": "HumanEval/27", "completion": "Python\ndef flip_case(string: str) -> str:\n    return ''.join(char.swapcase() for char in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\"\"\"\n    \n    # Initialize an empty string to store the concatenated result\n    result = ''\n    \n    # Iterate over each string in the input list\n    for s in strings:\n        # Append the current string to the result\n        result += s\n    \n    # Return the concatenated string\n    return result"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to filter by.\n\n    Returns:\n        List[str]: A new list containing only the strings that start with the given prefix.\n    \"\"\"\n    \n    # Use a list comprehension to create a new list containing only the strings\n    # that start with the given prefix. We use the \"startswith\" method of each string\n    # to check if it starts with the prefix, and only include those strings in the result.\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    \n    # Return the resulting list of filtered strings.\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:  # 0 and 1 are not prime\n        return False\n    if n == 2:  # 2 is prime\n        return True\n    if n % 2 == 0:  # even numbers except 2 are not prime\n        return False\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    # Ensure input list has an even number of coefficients\n    assert len(xs) % 2 == 0, \"Input list must have an even number of coefficients\"\n\n    # Find the largest non-zero coefficient (leading term)\n    lead_coeff = max(coeff for coeff in xs if coeff != 0)\n\n    # Initialize the interval [a, b] to search for zeros\n    a = -1.0\n    b = 1.0\n\n    # Bisection method: repeatedly divide the interval and evaluate the function\n    while abs(b - a) > 1e-6:\n        mid = (a + b) / 2\n        f_mid = poly(xs, mid)\n\n        if f_mid * poly(xs, a) < 0:\n            b = mid\n        else:\n            a = mid\n\n    # Return the found zero\n    return round(a, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l = l[:][::-1]  # Reverse the list to facilitate sorting later\n    l = [val for i, val in enumerate(l) if i % 3 != 0] + sorted([val for i, val in enumerate(l) if i % 3 == 0])\n    return l[::-1]  # Reverse the list back to its original order"}
{"task_id": "HumanEval/34", "completion": "Python\ndef unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "Python\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    return [x if i % 2 != 0 else y for i, (x, y) in enumerate(sorted((y, x) for x, y in zip(l[::2], l[1::2])))]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # initialize an empty result string\n    result = \"\"\n    # split the input string into groups of 3 (or less) characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # process each group to get back the original order\n    for group in groups:\n        if len(group) == 3:  # a full group of 3 elements\n            result += group[1] + group[0]  # swap the first and second elements\n        else:  # a partial group with less than 3 elements\n            result += group\n    \n    return result"}
{"task_id": "HumanEval/39", "completion": "Python\ndef is_prime(num: int):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci(n: int):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    fib_list = [0, 1]\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list[-1]\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    Return the n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    fib_num = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i + 1)\n        if is_prime(fib_num):\n            if i == n - 1:\n                return fib_num\n            i += 1\n        else:\n            i += 1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return b - 1"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    convert_string = \"0123456789ABC\"\n    if x < base:\n        return convert_string[x]\n    else:\n        return change_base(x//base, base) + convert_string[x%base]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n\n    fib4_sequence = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n\n    return fib4_sequence[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        mid1 = l[n // 2 - 1]\n        mid2 = l[n // 2]\n        return (mid1 + mid2) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome.\n\n    A palindrome is a word, phrase, number or other sequences of characters \n    that reads the same forward and backward, ignoring spaces, punctuation, \n    and capitalization. \n\n    :param text: The input string to check.\n    :return: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    \n    # Remove non-alphanumeric characters and convert to lowercase\n    text = ''.join(e for e in text if e.isalnum()).lower()\n    \n    # Compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "Python\ndef modp(n: int, p: int):\n    if p == 0:\n        raise ValueError(\"modulus cannot be zero\")\n    \n    result = 1\n    n = n % p\n    \n    while n > 0:\n        if (n & 1) == 1:\n            result = (result * pow(2, p-1, p)) % p\n        \n        n = n >> 1\n    \n    return result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "Your code looks great! Here's a breakdown of what you've done well:\n\n1. **Type hinting**: You've used type hints to specify that the function `add` takes two integers as arguments (`x: int, y: int`). This is excellent practice, as it makes your code more readable and self-documenting.\n2. **Docstring**: Your docstring provides a clear explanation of what the function does, which is essential for maintaining and sharing code.\n3. **Examples**: You've included example inputs and expected outputs, which helps demonstrate how to use the function.\n\nOne minor suggestion I have is to consider adding a brief description of what the function returns (e.g., \"Return the sum of x and y\"). This would make your docstring even more comprehensive.\n\nOverall, your code looks great!"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \n    :param s0: The first word.\n    :param s1: The second word.\n    :return: True if both words have the same characters, False otherwise.\n    \"\"\"\n    \n    # Convert both strings to sets of unique characters\n    set0 = set(s0)\n    set1 = set(s1)\n\n    # If the two sets are equal, then both words have the same characters\n    return set0 == set1"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all((x <= y) for x, y in zip(l, l[1:])) or all((x >= y) for x, y in zip(l, l[1:]))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    \n    # Convert both lists to sets (for fast lookups)\n    s1 = set(l1) \n    s2 = set(l2)\n    \n    # Find intersection of the two sets (common elements)\n    common_elements = s1 & s2\n    \n    # Convert the set back into a list and sort it\n    return sorted(list(common_elements))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            while n % (i * i) == 0:\n                n //= (i * i)\n            i += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "Python\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "Python\ndef derivative(xs: list):\n    n = len(xs)\n    return [x*(n-i) for i, x in enumerate(xs[1:])]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(4, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()  # Convert the string to lowercase for simplicity\n    vowels = 'aeiou'\n    count = sum(1 for char in s if char in vowels)\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)[::-1]  # Convert x to a string and reverse it\n    shifted_str_x = str_x[shift % len(str_x)] + str_x[:shift % len(str_x)]\n    return shifted_str_x[::-1]  # Reverse the result back to its original order\n\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\""}
{"task_id": "HumanEval/66", "completion": "Python\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "Python\ndef fruit_distribution(s, n):\n    s = s.lower()\n    count_apples = 0\n    count_oranges = 0\n    \n    for word in s.split():\n        if 'apples' in word:\n            count_apples = int(''.join(filter(str.isdigit, word)))\n        elif 'oranges' in word:\n            count_oranges = int(''.join(filter(str.isdigit, word)))\n    \n    return n - count_apples - count_oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]\n    \n    if not even_nodes:\n        return []\n    \n    smallest_even_node = min(even_nodes)\n    \n    return [smallest_even_node[0], smallest_even_node[1]]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 0\n        freq_dict[num] += 1\n    \n    max_value = -1\n    for key, value in freq_dict.items():\n        if value >= key and key > 0:\n            max_value = key\n            break\n    \n    return max_value"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    result = []\n    min_val = min(lst)\n    max_val = max(lst)\n\n    while min_val in lst or max_val in lst:\n        if min_val in lst:\n            result.append(min_val)\n            lst.remove(min_val)\n        if max_val in lst:\n            result.append(max_val)\n            lst.remove(max_val)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return all(x == y for x, y in zip(q, q[::-1])) and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            # If the middle elements don't match, increment both pointers and count as one change\n            changes += 1\n            left, right = left + 2, right - 2\n        elif arr[left] > arr[right]:\n            # If the left element is larger, move the right pointer to the left\n            right -= 1\n        else:\n            # If the right element is larger, move the left pointer to the right\n            left += 1\n    \n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "Python\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a+1):\n        while a % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n            a //= i\n    return len(prime_factors) >= 3"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x < 1:\n        return False\n    root = round(pow(x, 1/float(n)))\n    return pow(root, n) == x"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    c = int(a ** (1/3))\n    return c ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "Python\ndef hex_key(num):\n    primes = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return f\"db{format(int(bin(decimal)[2:]), 'b').zfill(8)}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        window = s[i:i+3]\n        if len(set(window)) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "Python\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n < 1:\n        raise ValueError(\"Input number should be a positive integer.\")\n\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/84", "completion": "Python\ndef solve(N):\n    return bin(sum(int(digit) for digit in format(N, 'b')))[2:]"}
{"task_id": "HumanEval/85", "completion": "Python\ndef add(lst):\n    return sum(i for i in lst if i % 2 == 0 and (lst.index(i) + 1) % 2 != 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    \n    for word in words:\n        result.append(''.join(sorted(word)))\n    \n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "Python\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in reversed(list(enumerate(row))):\n                if col == x:\n                    result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n\n    sum_first_last = array[0] + array[-1]\n\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "Python\ndef encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "Python\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    for num in sorted_lst[1:]:\n        if num != sorted_lst[0]:\n            return num"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        if sentence and sentence[0].lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x + y == z or x + z == y or y + z == x"}
{"task_id": "HumanEval/93", "completion": "Python\ndef encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char) + 13) % 26)\n            else:\n                result += chr((ord(char) - 97 + 13) % 26 + 97).lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "Python\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([i for i in lst if is_prime(i)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "Python\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "Python\ndef multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        if int(num) == num:\n            return int(num)\n        elif num - int(num) > int(num) - (int(num) + 1):\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if int(num) == num:\n            return int(num)\n        elif num - int(num) < -(int(num) + 1) - int(num):\n            return int(num)\n        else:\n            return int(num) - 1"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    i = n\n    while len(pile) < n:\n        if i % 2 == 1:  # if n is odd, add an odd number to the pile\n            pile.append(i)\n        else:  # if n is even, add an even number to the pile\n            pile.append(i + 1)\n        i += (i > n) * 2 - 1  # increment by 2 or 1 accordingly\n    return pile"}
{"task_id": "HumanEval/101", "completion": "Python\ndef words_string(s):\n    return s.replace(\",\", \" \").split()"}
{"task_id": "HumanEval/102", "completion": "Python\ndef choose_num(x, y):\n    even_numbers = [i for i in range(x, y+1) if i % 2 == 0]\n    \n    if len(even_numbers) > 0:\n        return max(even_numbers)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    average = round(total / (m-n+1))\n    return bin(average)[2:]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        for digit in str(n):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    return sorted([n for n in x if not has_even_digit(n)])"}
{"task_id": "HumanEval/105", "completion": "Python\ndef by_length(arr):\n    if not all(1 <= num <= 9 for num in arr):\n        return [\"One\"]\n    \n    if not arr:\n        return []\n\n    sorted_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = sorted_arr[::-1]\n\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", \n             6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    return [names[num] for num in reversed_arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nimport math\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return math.factorial(n)"}
{"task_id": "HumanEval/107", "completion": "Python\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # check if the integer is palindrome\n            if i % 2 == 0:  # count the even palindromes\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "Python\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    one = 1\n    for num in arr:\n        if num < one:\n            return False\n        one = num\n    \n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    if all(x % 2 == 0 for x in lst2[:odd_count]):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n\n    letters = test.split()\n    letter_counts = {}\n    \n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    max_count = max(letter_counts.values())\n    most_common_letters = [letter for letter, count in letter_counts.items() if count == max_count]\n\n    return {letter: max_count for letter in most_common_letters}"}
{"task_id": "HumanEval/112", "completion": "Python\ndef reverse_delete(s,c):\n    new_s = ''.join(ch for ch in s if ch not in c)\n    return (new_s, new_s == new_s[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {str(count).replace('1', '1').replace('2', '4').replace('3', '4').replace('5', '4').replace('7', '4').replace('8', '4').replace('9', '4')}n the str{str(i).replace('1', '1').replace('2', '4').replace('3', '4').replace('5', '4').replace('7', '4').replace('8', '4').replace('9', '4')}ng {str(i).replace('1', '1').replace('2', '4').replace('3', '4').replace('5', '4').replace('7', '4').replace('8', '4').replace('9', '4')} of the {str(i).replace('1', '1').replace('2', '4').replace('3', '4').replace('5', '4').replace('7', '4').replace('8', '4').replace('9', '4')}nput.\" for i, s in enumerate(lst)]"}
{"task_id": "HumanEval/114", "completion": "Python\ndef minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    left = 0\n    for right in range(len(nums)):\n        current_sum += nums[right]\n        \n        while current_sum > 0 and left <= right:\n            min_sum = min(min_sum, current_sum)\n            current_sum -= nums[left]\n            left += 1\n            \n    return min_sum if min_sum != float('inf') else 0"}
{"task_id": "HumanEval/115", "completion": "Python\ndef max_fill(grid, capacity):\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    if total_water == 0:\n        return 0\n\n    buckets_needed = math.ceil(total_water / float(capacity))\n    return buckets_needed"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "Python\ndef select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word.lower():\n            if char.isalpha() and not char.isvowel():\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "Python\ndef get_closest_vowel(word):\n    word = word[::-1]  # reverse the string to check from right side\n    result = ''\n    for i in range(len(word) - 2):  # start from second last character, because we are checking two characters ahead\n        if word[i].lower() not in 'bcdfghjklmnpqrstvwxyz':  # if current character is not a consonant\n            if word[i+1].lower() in 'aeiou' and (len(result) == 0 or result != word[i+1]):  \n                result = word[i+1]  # update the result with the closest vowel found so far\n    return result[::-1]  # reverse the result back to original order"}
{"task_id": "HumanEval/119", "completion": "Python\ndef match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "Python\ndef maximum(arr, k):\n    return sorted(set(arr), reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "Python\ndef solution(lst):\n    return sum(i for i in lst[1::2] if i % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "Python\ndef add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(i)) <= 2)"}
{"task_id": "HumanEval/123", "completion": "Python\ndef get_odd_collatz(n):\n    sequence = []\n    while n != 1:\n        if n % 2 == 0:  # n is even\n            n = n // 2\n        else:  # n is odd\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([num for num in sequence if num % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        date = datetime.strptime(date, \"%m-%d-%Y\")\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not any(char in word for word in words for char in ',.!?;'):\n        return [word for word in words if word]\n    else:\n        return words"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Find the intersection of two intervals and check its length is prime.\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "Python\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    signs = [x // abs(x) if x != 0 else 1 for x in arr]\n    sign_product = 1\n    magnitude_sum = sum(abs(x) for x in arr)\n    \n    for sign in signs:\n        sign_product *= sign\n    \n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    res = []\n    for i in range(N):\n        for j in range(N):\n            visited = [[False] * N for _ in range(N)]\n            dfs(grid, (i, j), k, [], visited, res)\n    return res\n\ndef dfs(grid, pos, k, path, visited, res):\n    if len(path) == k:\n        res.append(path[:])\n        return\n    if len(path) > k:\n        return\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        x, y = pos[0] + dx, pos[1] + dy\n        if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not visited[x][y]:\n            visited[x][y] = True\n            path.append(grid[x][y])\n            dfs(grid, (x, y), k, path, visited, res)\n            path.pop()\n            visited[x][y] = False\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 3\nprint(minPath(grid, k))  # Output: [1, 2, 1]"}
{"task_id": "HumanEval/130", "completion": "Python\ndef tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n\n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(i // 2 + 1)\n        else:\n            trib.append(sum(trib[i - 1:i + 1]))\n    return trib"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return round(sum(math.ceil(i)**2 for i in lst))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # empty string\n        return False\n    \n    last_char = txt[-1]\n    \n    if not last_char.isalpha():  # not an alphabetical character\n        return False\n    \n    if txt.rstrip().endswith(last_char):  # part of a word\n        return False\n    \n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "Python\ndef largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    if negatives and positives:\n        return (min(negatives), max(positives))\n    elif negatives:\n        return (min(negatives), None)\n    elif positives:\n        return (None, max(positives))\n    else:\n        return (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        # both are strings, convert to floats for comparison\n        return float(max(a.replace(',', '.'), b.replace(',', '.'))) if max(a.replace(',', '.'), b.replace(',', '.')) != max(b.replace(',', '.'), a.replace(',', '.')) else None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        # both are numbers, return the larger one\n        return max(a, b) if a != b else None\n    else:\n        # one is a number, one is a string\n        # try to convert the string to a number for comparison\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        elif isinstance(b, str):\n            b = float(b.replace(',', '.'))\n\n        return max(a, b) if a != b else None"}
{"task_id": "HumanEval/138", "completion": "Python\ndef is_equal_to_sum_even(n):\n    for i in range(2, n//2+1):\n        if (n - 2*i) % 2 != 0:\n            return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "Python\ndef special_factorial(n):\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    brazilian_factorial = 1\n    for i in range(1, n+1):\n        brazilian_factorial *= math.factorial(i)\n    return brazilian_factorial"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"_-\").replace(\"   \", \"-_\")"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    dot_index = file_name.index('.')\n    if not file_name[:dot_index].isalpha():\n        return 'No'\n    if not (file_name[dot_index+1:].lower() in ['txt', 'exe', 'dll']):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "Python\ndef sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i]**3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "Python\ndef words_in_sentence(sentence):\n    prime_word_lengths = [i for i in range(2, len(sentence.split()) + 1) if all(i % j != 0 for j in range(2, int(i**0.5) + 1))]\n    result = ' '.join([word for word in sentence.split() if len(word) in prime_word_lengths])\n    return result"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    def lcm(a, b):\n        return abs(a*b) // gcd(a, b)\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    x_nums, x_denum = map(int, x.split('/'))\n    n_nums, n_denum = map(int, n.split('/'))\n\n    simplified_x = str(x_nums*n_nums) + '/' + str(lcm(x_denum, n_denum))\n    simplified_n = str(n_nums*x_denum) + '/' + str(lcm(n_denum, x_denum))\n\n    return simplified_x == simplified_n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted((num, sum(int(digit) for digit in str(abs(num)))) for num in nums)"}
{"task_id": "HumanEval/146", "completion": "Python\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and (int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "Python\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n\n    result = tuple(planets[i:i2]) if i1 < i2 else ()\n    for i in range(min(i1, i2)+1, max(i1, i2)):\n        result += (planets[i],)\n    \n    return result"}
{"task_id": "HumanEval/149", "completion": "Python\ndef sorted_list_sum(lst):\n    lst = [s for s in lst if len(s) % 2 == 0]\n    return sorted([x for x in lst], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "Python\ndef x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "Python\ndef double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                total += num ** 2\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = -float('inf')\n\n    for extension in extensions:\n        upper_count = sum(1 for c in extension if c.isupper())\n        lower_count = len(extension) - upper_count\n        strength = upper_count - lower_count\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "Python\ndef cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    \n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    \n    for i in range(len(b), len(a)):\n        if a[i-len(b)+1:i+1] == b:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number should be in range 1-1000\")\n\n    roman = \"\"\n    value_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"cx\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n\n    for value, roman_value in sorted(value_map.items(), reverse=True):\n        while number >= value:\n            roman += roman_value\n            number -= value\n\n    return roman.lower()"}
{"task_id": "HumanEval/157", "completion": "Python\nimport math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the triangle is valid\n    for i in range(len(sides)-1):\n        if sides[i] + sides[i+1] <= sides[-1]:\n            return False\n    \n    # Check if the longest side is the hypotenuse of a right-angled triangle\n    if math.isclose((sides[0]**2 + sides[1]**2)**0.5, sides[2]):\n        return True\n    \n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = ''\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + (remaining if remaining >= need - number else need - number)\n    left_over = max(0, remaining - (need - number))\n    return [total_eaten, left_over]"}
{"task_id": "HumanEval/160", "completion": "Python\ndef do_algebra(operator, operand):\n    if len(operand) != len(operator) + 1:\n        raise ValueError(\"Operator length is not equal to operand length minus one\")\n    \n    if any(not isinstance(x, int) or x < 0 for x in operand):\n        raise ValueError(\"All operands must be non-negative integers\")\n\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' '\n        expression += str(operand[i+1])\n\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    reverse = False\n    for char in s:\n        if not char.isalpha():\n            result += char\n            reverse = not reverse\n        else:\n            if reverse:\n                result += char.swapcase()\n                reverse = False\n            else:\n                result += char.upper() if char.islower() else char.lower()\n    return result[::-1] if result.isalpha() == False else result"}
{"task_id": "HumanEval/162", "completion": "Python\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest().upper()"}
{"task_id": "HumanEval/163", "completion": "Python\ndef generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n\n    even_digits = [i for i in range(a, b+1) if str(i).count('0') % 2 == 0]\n    \n    return sorted(even_digits)"}

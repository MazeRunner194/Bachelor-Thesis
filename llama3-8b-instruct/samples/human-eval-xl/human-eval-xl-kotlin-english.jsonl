{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0\n    operations.forEach { operation ->\n        when (operation) {\n            is Int -> balance += operation\n            else -> throw IllegalArgumentException(\"Invalid operation. Only integers are allowed.\")\n        }\n        if (balance < 0) return true\n    }\n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Any>): Pair<Int, Long> {\n    var sum = 0\n    var product = 1L\n\n    for (number in numbers) {\n        when (number) {\n            is Int -> sum += number\n            is Long -> product *= number\n            else -> throw IllegalArgumentException(\"List should contain only Int or Long values\")\n        }\n    }\n\n    return Pair(sum, product)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    if (a.length != b.length) {\n        throw RuntimeException(\"Strings a and b must be of the same length\")\n    }\n\n    val result = StringBuilder()\n\n    for ((c1, c2) in a.zip(b)) {\n        when {\n            c1 == '0' && c2 == '0' -> result.append('0')\n            c1 == '1' && c2 == '1' -> result.append('0')\n            else -> result.append('1')\n        }\n    }\n\n    return result.toString()\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<Any>): String? {\n    if (strings.isEmpty()) {\n        return null\n    }\n    \n    var longest = strings[0] as String\n    \n    for (s in strings) {\n        if (s is String && s.length > longest.length) {\n            longest = s as String\n        } else if (s is String && s.length == longest.length) {\n            longest = s as String\n        }\n    }\n    \n    return longest\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var temp = a\n    var divisor = 1\n    while (temp > 0) {\n        if (b % temp == 0 && a % temp == 0) {\n            divisor = temp\n            break\n        }\n        temp--\n    }\n    return divisor\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    val nums = numbers.split(\" \").map { when (it) {\n        \"zero\" -> 0\n        \"one\" -> 1\n        \"two\" -> 2\n        \"three\" -> 3\n        \"four\" -> 4\n        \"five\" -> 5\n        \"six\" -> 6\n        \"seven\" -> 7\n        \"eight\" -> 8\n        \"nine\" -> 9\n        else -> throw RuntimeException(\"Invalid input\")\n    } }.sorted().map { when (it) {\n        0 -> \"zero\"\n        1 -> \"one\"\n        2 -> \"two\"\n        3 -> \"three\"\n        4 -> \"four\"\n        5 -> \"five\"\n        6 -> \"six\"\n        7 -> \"seven\"\n        8 -> \"eight\"\n        9 -> \"nine\"\n    } }.joinToString(separator = \" \")\n\n    return nums\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val min = numbers.min()!!\n    val max = numbers.max()!!\n\n    return numbers.map { (it - min) / (max - min) }\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.mapChar { if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase() }.joinToString()\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Any> {\n    return l.filter { it as Number > 0 }\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false // prime numbers are greater than 1\n    if (n == 2) return true // 2 is a prime number\n    if (n % 2 != 0) return true // odd numbers are prime unless divisible by 2\n\n    for (i in 3..Math.sqrt(n).toInt() + 1 step 2) {\n        if (n % i == 0) return false // if n is divisible by any number up to its square root, it's not prime\n    }\n    return true // if we haven't found a divisor, n is prime!\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>) = l.toSet().sorted()"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun primeFib(n: Int): Int {\n    var a = 1\n    var b = 1\n    var count = 0\n\n    while (true) {\n        if (isPrime(b)) {\n            if (++count == n) {\n                return b\n            }\n            val c = a + b\n            a = b\n            b = c\n        } else {\n            b = a + b\n        }\n    }\n}\n\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) {\n        return false\n    }\n\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    l.distinct().forEach { a ->\n        val complementSet = mutableSetOf<Int>()\n        l.filter { it != a }.forEach { b ->\n            complementSet.add(-a - b)\n            if (complementSet.contains(b)) return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    val set = l.toSet()\n    for (num in set) {\n        if (-num in set && num != 0) {\n            return true\n        }\n    }\n    return false\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n <= 3) return when (n) { 0, 1 -> 0; 2 -> 2; 3 -> 0 }\n    val a = intArrayOf(0, 0, 2, 0)\n    var i = 4\n    while (i <= n) {\n        a[0] = a[1]\n        a[1] = a[2]\n        a[2] = a[3]\n        a[3] = a[0] + a[1] + a[2]\n        i++\n    }\n    return a[3]\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    val sortedList = l.sorted()\n    val size = sortedList.size\n    return if (size % 2 == 0) {\n        (sortedList[size / 2 - 1] + sortedList[size / 2]) / 2.0\n    } else {\n        sortedList[size / 2].toDouble()\n    }\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    val cleanText = text.toLowerCase().replace(Regex(\"[^a-zA-Z0-9]\"), \"\") // remove non-alphanumeric characters and convert to lowercase\n    return cleanText.equals(cleanText.reversed()) // compare with reversed string\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    return text.replace(Regex(\"[aeiouAEIOU]\"), \"\")\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}\n\n// Test cases:\nprintln(add(2, 3)) // prints 5\nprintln(add(5, 7)) // prints 12"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    return s0.toCharArray().distinct().joinToString() == s1.toCharArray().distinct().joinToString()\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 1) return n\n    var a = 0\n    var b = 1\n    for (i in 2..n) {\n        val temp = b\n        b += a\n        a = temp\n    }\n    return b\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List[Any>) : List<Any> {\n    // Convert list l2 to a set of Integers for efficient lookup\n    val set2 = l2.map { it as Int }.toSet()\n\n    // Find elements that are present in both lists\n    return l1.intersect(set2).toList()\n}\n\n// Test the function\nprintln(common(listOf(1, 4, 3, 34, 653, 2, 5), listOf(5, 7, 1, 5, 9, 653, 121)))\nprintln(common(listOf(5, 3, 2, 8), listOf(3, 2)))"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var max = 1\n    for (i in 2..n) {\n        if (isPrime(i) && i > max) {\n            max = i\n        }\n    }\n    return max\n}\n\nfun isPrime(num: Int): Boolean {\n    if (num < 2) return false\n    for (i in 2 until num.sqrt()) {\n        if (num % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(i * xs[i - 1])\n    }\n    return result\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "private val memo = mutableMapOf<Int, Int>()\n\nfun fibfib(n: Int): Int {\n    if (n < 0) throw IllegalArgumentException(\"n must be non-negative\")\n    if (n <= 1) return 0\n\n    memo.computeIfAbsent(n) { i ->\n        when (i) {\n            2 -> 1\n            else -> fibfib(i - 1) + fibfib(i - 2) + fibfib(i - 3)\n        }\n    }\n\n    return memo[n]!!\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    var count = 0\n    for (c in s.lowercase()) {\n        when (c) {\n            'a', 'e', 'i', 'o', 'u' -> count++\n            'y' -> if (!s.endsWith(c.toString())) count++\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    val frequencyMap = lst.groupBy { it }.mapValues { entry -> entry.value.size }\n    for (entry in frequencyMap) {\n        if (entry.value.size >= entry.key) {\n            return entry.key\n        }\n    }\n    return -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "fun triangleArea(a: Int, b: Int, c: Int): Any {\n    if (isTriangleValid(a, b, c)) {\n        val s = (a + b + c) / 2.0\n        return String.format(\"%.2f\", Math.sqrt(s * (s - a) * (s - b) * (s - c))).toDouble()\n    } else {\n        return -1\n    }\n}\n\nfun isTriangleValid(a: Int, b: Int, c: Int): Boolean {\n    if (a + b > c && a + c > b && b + c > a) {\n        return true\n    }\n    return false\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    val qStr = q.joinToString(\"\")\n    return qStr.equals(qStr.reverse(), true) && q.sum() <= w\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    var isPrime = false\n    for (i in 2..a / 2) {\n        if (isPrime(i)) {\n            val b = a / i\n            if (b % i == 0 && isPrime(b)) {\n                val c = a / (i * b)\n                if (c % i == 0 && c % b == 0 && c > 1) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    val binary = Integer.toBinaryString(decimal)\n    return \"db${\"0\".repeat(binary.length)}db\"\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    if (s.length < 3) return false // not happy if length is less than 3\n\n    for (i in 0 until s.length - 2) { // check every 3 consecutive letters\n        val subString = s.substring(i, i + 3)\n        if (subString.count { it } > 1) return false // not happy if there are duplicates\n    }\n    return true // happy!\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Any>): List<String> {\n    val letterGrades = mutableListOf<String>()\n    for (grade in grades) {\n        var gpa = grade as Double\n        when {\n            gpa >= 4.0 -> letterGrades.add(\"A+\")\n            gpa > 3.7 -> letterGrades.add(\"A\")\n            gpa > 3.3 -> letterGrades.add(\"A-\")\n            gpa > 3.0 -> letterGrades.add(\"B+\")\n            gpa > 2.7 -> letterGrades.add(\"B\")\n            gpa > 2.3 -> letterGrades.add(\"B-\")\n            gpa > 2.0 -> letterGrades.add(\"C+\")\n            gpa > 1.7 -> letterGrades.add(\"C\")\n            gpa > 1.3 -> letterGrades.add(\"C-\")\n            gpa > 1.0 -> letterGrades.add(\"D+\")\n            gpa > 0.7 -> letterGrades.add(\"D\")\n            else -> letterGrades.add(\"E\")\n        }\n    }\n    return letterGrades\n}\n\nfun main() {\n    val grades = listOf(4.0, 3.0, 1.7, 2.5, 3.5)\n    println(numericalLetterGrade(grades))\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(s: String): Boolean {\n    val length = s.length\n    if (length <= 1) return false\n    var i = 2\n    while (i * i <= length) {\n        if (length % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    var sum = 0\n    var result = \"\"\n\n    // Convert the integer to binary and store it in a string\n    val binary = n.toString(2)\n\n    // Calculate the sum of digits\n    for (char in binary) {\n        if (char == '1') {\n            sum++\n        }\n    }\n\n    // Convert the sum to binary and add it to the result\n    while (sum > 0) {\n        result = (sum % 2).toString() + result\n        sum /= 2\n    }\n\n    return \"1\" + result\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst: List<Any>, x: Int): List<Pair<Int, Int>> {\n    val result = mutableListOf<Pair<Int, Int>>()\n    var rowNumber = 0\n    lst.forEach { row ->\n        (row as List<Any>).forEachIndexed { columnNumber, element ->\n            if (element == x) {\n                result.add(Pair(rowNumber, columnNumber))\n            }\n        }\n        rowNumber++\n    }\n    return result.sortedWith(compareBy({ it.first }, { it.second }.asReversed()))\n}\n\n// Test cases\nfun main() {\n    println(getRow(listOf(\n        listOf(1, 2, 3, 4, 5, 6),\n        listOf(1, 2, 3, 4, 1, 6),\n        listOf(1, 2, 3, 4, 5, 1)\n    ), 1)) // [(0, 0), (1, 0), (1, 4), (2, 0), (2, 5)]\n\n    println(getRow(emptyList(), 1)) // []\n\n    println(getRow(listOf(\n        listOf<Any>(),\n        listOf(1),\n        listOf(1, 2, 3)\n    ), 3)) // [(2, 2)]\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Any>): Int? {\n    lst.filterIsInstance(Int::class.java)\n        .sorted()\n        ?.takeIf { it.size >= 2 }?.getOrNull(1) ?: return null\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    var boredomCount = 0\n    val sentences = s.split(\"[.!?]+\")\n    for (sentence in sentences) {\n        if (sentence.trim().startsWith(\"I\")) {\n            boredomCount++\n        }\n    }\n    return boredomCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun skjkasdkd(lst: List<Int>): Int {\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        for (i in 2 until Math.sqrt(n.toDouble()).toInt() + 1) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    val primes = lst.filter { isPrime(it) }.maxOrNull()\n    return primes?.digits().sum() ?: 0\n}\n\nfun Int.digits(): List<Int> {\n    var n = this\n    return when {\n        n < 10 -> listOf(n)\n        else -> {\n            val digits = mutableListOf<Int>()\n            while (n > 0) {\n                digits.add(n % 10)\n                n /= 10\n            }\n            digits.reversed()\n        }\n    }\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    if (dict.isEmpty()) return false\n\n    val allLower = dict.keys.map { it.toString() }.all { it == it.toLowerCase() }\n    val allUpper = dict.keys.map { it.toString() }.all { it == it.toUpperCase() }\n\n    return allLower || allUpper\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    if (num < 0) {\n        return Math.floor(num + 1).toInt()\n    } else {\n        return Math.ceil(num - 1).toInt()\n    }\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf<Int>()\n    var levelStones = n\n    for (i in 0 until n) {\n        pile.add(levelStones)\n        if (n % 2 == 1) { // n is odd\n            levelStones = i + 2\n        } else { // n is even\n            levelStones = i + 3\n        }\n    }\n    return pile\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<Any> {\n    return s.split(\"\"\"[ ,]+\"\"\".toRegex()).toList()\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    if (x > y) {\n        return -1 // no even number in range [y, x]\n    }\n    var maxEven = -1 // initialize to -1, will be updated if needed\n    for (i in x..y) { // iterate over the range [x, y]\n        if (i % 2 == 0) { // check if it's an even number\n            maxEven = i // update the maximum even number found so far\n        }\n    }\n    return maxEven\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) return -1\n    val sum = (n..m).sum()\n    val avg = (sum.toDouble() / (m - n + 1)).roundToToInt()\n    return Integer.toBinaryString(avg)\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "import kotlin.math.factorial\n\nfun f(n: Int): List<Int> = (1..n).map { if (it % 2 == 0) factorial(it) else (1..it).sum() }"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): List<Int> {\n    var even = 0\n    var odd = 0\n\n    for (i in 1..n) {\n        val str = i.toString()\n        if (str == str.reversed().toString()) {\n            if (i % 2 == 0) {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n\n    return listOf(even, odd)\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Any>): Boolean {\n    var max = arr[0]\n    for (i in 1 until arr.size) {\n        if (arr[i] as Int <= max) return false\n        max = arr[i] as Int\n    }\n    return true\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    val evenCount = lst1.count { it % 2 == 0 }\n    if (evenCount == lst1.size) return \"YES\" // all elements are already even\n\n    // check if odd numbers in lst1 can be replaced with even numbers from lst2\n    var oddCount = 0\n    for (num in lst1) {\n        if (num % 2 != 0) {\n            oddCount++\n        }\n    }\n\n    return if (oddCount <= lst2.count { it % 2 == 0 }) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s: String, c: String): List<Any> {\n    val sc = s.toCharArray()\n    var i = 0\n    while (i < sc.size) {\n        var found = false\n        for (char in c) {\n            if (sc[i].equals(char)) {\n                found = true\n                break\n            }\n        }\n        if (!found) {\n            i++\n        } else {\n            sc.removeAt(i)\n        }\n    }\n\n    val result = StringBuilder().apply {\n        for (char in sc) {\n            append(char)\n        }\n    }.toString()\n\n    return listOf(result, result.equals(result.reversed(), true))\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var bucketCount = 0\n    var water = 0\n\n    grid.forEach { row ->\n        row.forEach { well ->\n            if (well == 1) {\n                water += 1\n            }\n        }\n    }\n\n    while (water > 0) {\n        bucketCount++\n        val filledBucket = Math.min(water, capacity)\n        water -= filledBucket\n    }\n\n    return bucketCount\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<Any> {\n    val words = s.split(\"\\\\s+\".toRegex()) // split the string into individual words\n    return words.asSequence()\n        .map { it.toLowerCase() } // convert all words to lowercase for simplicity\n        .filter { countConsonants(it) == n } // filter out words that don't have exactly n consonants\n        .toList() // collect the filtered words into a list\n\n}\n\nprivate fun countConsonants(word: String): Int {\n    val consonants = \"bcdfghjklmnpqrstvwxyz\".toCharArray()\n    return word.lowercase().fold(0) { acc, c ->\n        if (consonants.contains(c)) acc + 1 else acc\n    }\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "import kotlin.system.exitProcess\n\nfun maximum(arr: List<Int>, k: Int): List<Int> {\n    // Sort the array in descending order and return the first k elements\n    return arr.sortedDescending().take(k)\n}\n\nfun main() {\n    val arr = listOf(-3, -4, 5)\n    val k = 3\n    \n    println(maximum(arr, k)) // prints [-4, -3, 5]\n    \n    exitProcess(0) // Exit the program after printing\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    return arr.take(k).filter { it.toString().length <= 2 }.sum()\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    val (start1, end1) = interval1.toMutableList()\n    val (start2, end2) = interval2.toMutableList()\n\n    var start = maxOf(start1, start2)\n    var end = minOf(end1, end2)\n\n    if (start > end) return \"NO\"\n\n    val intersectionLength = end - start + 1\n\n    val isPrime = (2..Math.sqrt(intersectionLength.toDouble()).toInt()).none { intersectionLength % it == 0 }\n\n    return if (isPrime) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): List<Any> {\n    if (n == 0) return listOf(1)\n    if (n == 1) return listOf(3)\n    if (n == 2) return listOf(1, 3)\n\n    val result = mutableListOf(1, 3)\n    var prev1 = 3\n    var prev2 = 1\n\n    for (i in 2..n-1) {\n        val current = (prev1 + prev2 * i) / 2\n        result.add(current)\n        prev2 = prev1\n        prev1 = current\n    }\n\n    return result\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    var result = 1\n    var num = n\n    while (num > 0) {\n        val digit = num % 10\n        if (digit % 2 != 0) { // check if digit is odd\n            result *= digit\n        }\n        num /= 10\n    }\n    return result\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    var depth = 0\n    for (char in string) {\n        if (char == '[') {\n            depth++\n        } else if (char == ']') {\n            if (--depth < 0) return false // invalid nesting\n        }\n    }\n    return depth > 0\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst: List[Any>): Int {\n    return lst.map { ceil(it as Double) }.map { it.toInt() }.map { it * it }.sum()\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    if (txt.isEmpty()) return false // If the string is empty, return false\n    \n    val lastChar = txt.trim().last() // Get the last character of the string after trimming any leading/trailing spaces\n    return lastChar.isLetter() && !Character.isLetter(txt.trim().lastIndexOf(lastChar)) // Check if the last character is a letter and it's not part of a word\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Any>): Int {\n    var maxIndex = -1\n    for (i in arr.indices) {\n        if (arr[i] as Any?.compareTo(arr[i - 1] as Any?)!! <= 0) {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List[Any>): List<Int?> {\n    val negativeInts = lst.filter { it as Int <= 0 }\n    val positiveInts = lst.filter { it as Int > 0 }\n\n    return if (negativeInts.isEmpty() && positiveInts.isEmpty()) {\n        listOf(null, null)\n    } else if (negativeInts.isNotEmpty()) {\n        listOf(negativeInts.max() as Int?, null)\n    } else {\n        listOf(null, positiveInts.min() as Int?)\n    }\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= factorial(i)\n    }\n    return result\n}\n\nprivate fun factorial(n: Int): Int {\n    if (n == 0 || n == 1) {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    val result = StringBuilder()\n    sentence.split(\" \").forEach { word ->\n        if (isPrime(word.length)) {\n            result.append(word).append(\" \")\n        }\n    }\n    return result.toString().trim()\n}\n\nprivate fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2 until Math.sqrt(n.toDouble()).toInt() + 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x: String, n: String): Boolean {\n    val (numX, denomX) = x.split(\"/\").map { it.toInt() }\n    val (numN, denomN) = n.split(\"/\").map { it.toInt() }\n\n    // Calculate the greatest common divisor of the numerator and denominator\n    fun gcd(a: Int, b: Int): Int {\n        if (b == 0) return a\n        return gcd(b, a % b)\n    }\n\n    val gcdValue = gcd(denomX, denomN)\n\n    // Simplify the fractions by dividing both the numerator and denominator by their greatest common divisor\n    val simplifiedNumX = numX * (denomN / gcdValue)\n    val simplifiedDenomX = denomX / gcdValue\n\n    return simplifiedNumX == simplifiedDenomX\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.map { it as Int }.sortedWith(compareBy({ it.toString().sumOf { it.digit } to nums.indexOf(it) }))\n        .map { it as Any }\n}\n\nfun main() {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12))) // prints [-1, -11, 1, -12, 11]\n    println(orderByPoints(emptyList())) // prints []\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialfilter(nums: List<Any>): Int {\n    var count = 0\n    for (num in nums) {\n        if (num is Int && num > 10) {\n            val firstDigit = (num / 100).rem(10)\n            val lastDigit = num % 10\n            if (firstDigit in 1..7 && lastDigit in 1..7) {\n                count++\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    var count = 0\n    for (i in 1..n) {\n        val a = i * i - i + 1\n        for (j in i + 1..n) {\n            val b = j * j - j + 1\n            for (k in j + 1..n) {\n                val c = k * k - k + 1\n                if ((a + b + c) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\nfun bf(planet1: String, planet2: String): List<Any> {\n    if (!planets.contains(planet1) || !planets.contains(planet2)) {\n        return listOf()\n    }\n\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n\n    val result = (index1 + 1..index2).map { planets[it] }\n    if (index1 > index2) {\n        result.addAll(planets.slice(index2 until index1))\n    }\n\n    return result\n}\n\n// Test cases\nprintln(bf(\"Jupiter\", \"Neptune\")) // [\"Saturn\", \"Uranus\"]\nprintln(bf(\"Earth\", \"Mercury\")) // [\"Venus\"]\nprintln(bf(\"Mercury\", \"Uranus\")) // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (isPrime(n)) {\n        return x\n    }\n    return y\n}\n\nprivate fun isPrime(num: Int): Boolean {\n    if (num <= 1) {\n        return false\n    }\n    for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    var sumOfSquares = 0\n    for (element in lst) {\n        if (element is Int && element > 0) { // ignore negative numbers and non-integers\n            val square = element * element\n            sumOfSquares += square\n        }\n    }\n    return sumOfSquares\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    return extensions.stream()\n        .map { it.toUpperCase() }\n        .map { it.replace(Regex(\"[A-Z]\"), \"\").length to it }\n        .maxByOrNull { it.first - it.second }?.second\n        ?.let { \"${className}.${it}\" }\n        ?: \"Error: No strong extension found\"\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    val lenA = a.length\n    val lenB = b.length\n\n    for (i in 0 until lenA - lenB + 1) {\n        val rotB = a.substring(i, i + lenB)\n        if (rotB == b || a.contains(rotB)) {\n            return true\n        }\n    }\n\n    return false\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    val romanMap = mapOf(\n            1000 to \"m\",\n            900 to \"cm\",\n            500 to \"d\",\n            400 to \"cd\",\n            100 to \"c\",\n            90 to \"xc\",\n            50 to \"l\",\n            40 to \"xl\",\n            10 to \"x\",\n            9 to \"ix\",\n            5 to \"v\",\n            4 to \"iv\",\n            1 to \"i\"\n    )\n\n    var result = \"\"\n    var i = number\n\n    for ((roman, value) in romanMap) {\n        while (i >= value) {\n            result += roman\n            i -= value\n        }\n    }\n\n    return result.toLowerCase()\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c * c + a * a == b * b)\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    var result = \"\"\n    for (c in s) {\n        if (Character.isLetter(c)) {\n            result += if (Character.isLowerCase(c)) Character.toUpperCase(c).toString() else Character.toLowerCase(c).toString()\n        } else {\n            result += c\n        }\n    }\n    return if (result.all { !Character.isLetter(it) }) result.reversed().toString() else result\n}"}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.security.MessageDigest\nimport javax.xml.bind.DatatypeConverter\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return null\n\n    val md = MessageDigest.getInstance(\"MD5\")\n    val bytes = md.digest(text.toByteArray())\n    val hexString = DatatypeConverter.printHexBinary(bytes)\n    return hexString\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in Math.min(a, b)..Math.max(a, b)) {\n        if (isEven(i)) {\n            result.add(i)\n        }\n    }\n    return result\n}\n\nprivate fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}

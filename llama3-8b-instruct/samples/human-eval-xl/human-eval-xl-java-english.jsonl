{"task_id": "java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass BelowZero {\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                int amount = (Integer) operation;\n                balance += amount;\n                if (balance < 0) {\n                    return true; // Balance has fallen below zero\n                }\n            }\n        }\n        return false; // No point where balance fell below zero\n    }\n\n    public static void main(String[] args) {\n        List<Object> operations1 = Arrays.asList(1, 2, 3);\n        List<Object> operations2 = Arrays.asList(1, 2, -4, 5);\n\n        System.out.println(belowZero(operations1)); // False\n        System.out.println(belowZero(operations2)); // True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumProduct {\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        long product = 1;\n\n        // Convert the list of Objects to a list of Integers\n        List<Integer> integers = new ArrayList<>();\n        for (Object obj : numbers) {\n            if (obj instanceof Integer) {\n                integers.add((Integer) obj);\n            }\n        }\n\n        // Calculate sum and product\n        for (int num : integers) {\n            sum += num;\n            product *= num;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "public static String stringXor(String a, String b) {\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < Math.max(a.length(), b.length()); i++) {\n        char c1 = (i < a.length()) ? a.charAt(i) : '0';\n        char c2 = (i < b.length()) ? b.charAt(i) : '0';\n        result.append((c1 == '0' && c2 == '0') || (c1 == '1' && c2 == '1') ? '0' : '1');\n    }\n    return result.toString();\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Longest {\n\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     *\n     * >>> longest([])\n     *\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n        if (strings.isEmpty()) {\n            return null;\n        }\n        \n        String longest = \"\";\n        for (Object str : strings) {\n            if (str instanceof String && ((String) str).length() > longest.length()) {\n                longest = (String) str;\n            }\n        }\n        \n        return longest;\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "public static int greatestCommonDivisor(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return Math.abs(a);\n}"}
{"task_id": "java/5", "language": "java", "completion": "public static String sortNumbers(String numbers) {\n    // Split the input string into an array of strings, where each element is a number (e.g. \"three\", \"one\", etc.)\n    String[] numArray = numbers.split(\" \");\n    \n    // Create an ArrayList to store the numbers as integers\n    List<Integer> numList = new ArrayList<>();\n    \n    // Loop through the array and convert each string to an integer, adding it to the list\n    for (String s : numArray) {\n        int value;\n        switch (s) {\n            case \"zero\":\n                value = 0;\n                break;\n            case \"one\":\n                value = 1;\n                break;\n            case \"two\":\n                value = 2;\n                break;\n            case \"three\":\n                value = 3;\n                break;\n            case \"four\":\n                value = 4;\n                break;\n            case \"five\":\n                value = 5;\n                break;\n            case \"six\":\n                value = 6;\n                break;\n            case \"seven\":\n                value = 7;\n                break;\n            case \"eight\":\n                value = 8;\n                break;\n            case \"nine\":\n                value = 9;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid number: \" + s);\n        }\n        numList.add(value);\n    }\n    \n    // Sort the list of integers\n    Collections.sort(numList);\n    \n    // Convert the sorted list back to a string, with numbers separated by spaces\n    StringBuilder sb = new StringBuilder();\n    for (int i : numList) {\n        switch (i) {\n            case 0:\n                sb.append(\"zero\");\n                break;\n            case 1:\n                sb.append(\"one\");\n                break;\n            case 2:\n                sb.append(\"two\");\n                break;\n            case 3:\n                sb.append(\"three\");\n                break;\n            case 4:\n                sb.append(\"four\");\n                break;\n            case 5:\n                sb.append(\"five\");\n                break;\n            case 6:\n                sb.append(\"six\");\n                break;\n            case 7:\n                sb.append(\"seven\");\n                break;\n            case 8:\n                sb.append(\"eight\");\n                break;\n            case 9:\n                sb.append(\"nine\");\n                break;\n        }\n        if (i < numList.size() - 1) {\n            sb.append(\" \");\n        }\n    }\n    \n    return sb.toString();\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            throw new RuntimeException(\"List should have at least two elements\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> result = new ArrayList<>();\n\n        for (double number : numbers) {\n            double rescaledNumber = (number - min) / (max - min);\n            result.add(new Double(rescaledNumber));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "public static String flipCase(String string) {\n    StringBuilder result = new StringBuilder();\n    \n    for (char c : string.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            result.append(Character.toLowerCase(c));\n        } else {\n            result.append(Character.toUpperCase(c));\n        }\n    }\n    \n    return result.toString();\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass GetPositive {\n    public static List<Object> get_positive(List<Object> l) {\n        List<Object> positiveList = new ArrayList<>();\n        for (Object obj : l) {\n            if ((int) obj > 0) {\n                positiveList.add(obj);\n            }\n        }\n        return positiveList;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(get_positive(list1));\n\n        List<Object> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(get_positive(list2));\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsPrime {\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false; // numbers less than or equal to 1 are not prime\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false; // if `n` is divisible by any number between 2 and sqrt(n), it's not prime\n            }\n        }\n        return true; // if we've reached this point, `n` is likely prime\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        return new ArrayList<>(set);\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n        int fibNum = 1;\n        int a = 0, b = 1;\n\n        for (int i = 1; ; i++) {\n            if (i == n) {\n                return a;\n            }\n            int temp = a + b;\n            a = b;\n            b = temp;\n            if (isPrime(b)) {\n                fibNum++;\n                if (fibNum == n) {\n                    return b;\n                }\n            }\n        }\n    }\n\n    public static boolean isPrime(int num) {\n        if (num <= 1)\n            return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass TriplesSumToZero {\n\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int sum = l.get(i) + l.get(j);\n                if (l.contains(-sum)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\npublic class PairsSumToZero {\n\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        for (int num : set) {\n            int complement = -num;\n            if (set.contains(complement)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l1 = Arrays.asList(1, 3, 5, 0);\n        System.out.println(pairsSumToZero(l1)); // False\n\n        List<Integer> l2 = Arrays.asList(1, 3, -2, 1);\n        System.out.println(pairsSumToZero(l2)); // False\n\n        List<Integer> l3 = Arrays.asList(1, 2, 3, 7);\n        System.out.println(pairsSumToZero(l3)); // False\n\n        List<Integer> l4 = Arrays.asList(2, 4, -5, 3, 5, 7);\n        System.out.println(pairsSumToZero(l4)); // True\n\n        List<Integer> l5 = Arrays.asList(1);\n        System.out.println(pairsSumToZero(l5)); // False\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n        if (n < 0 || n > 7) {\n            throw new IllegalArgumentException(\"Input should be between 0 and 7\");\n        }\n        \n        // base cases\n        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4Array = new int[8];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i-1] + fib4Array[i-2] + fib4Array[i-3] + fib4Array[i-4];\n        }\n        \n        return fib4Array[n];\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "public static Number median(List<Integer> l) {\n    Collections.sort(l); // sort the list in ascending order\n    int n = l.size();\n    if (n == 0) {\n        return null; // or throw an exception, depending on your requirements\n    }\n    double median;\n    if (n % 2 == 1) { // if the length of the list is odd\n        median = (double) l.get(n / 2); // get the middle element\n    } else { // if the length of the list is even\n        int mid1 = n / 2 - 1;\n        int mid2 = n / 2;\n        median = ((double) l.get(mid1) + (double) l.get(mid2)) / 2.0; // get the average of the two middle elements\n    }\n    return new Double(median);\n}"}
{"task_id": "java/16", "language": "java", "completion": "public static boolean isPalindrome(String text) {\n    int start = 0;\n    int end = text.length() - 1;\n\n    while (start < end) {\n        if (text.charAt(start) != text.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n\n    return true;\n}"}
{"task_id": "java/17", "language": "java", "completion": "public static String removeVowels(String text) {\n    String result = \"\";\n    \n    for (char c : text.toLowerCase().toCharArray()) {\n        if (!isVowel(c)) {\n            result += c;\n        }\n    }\n    \n    return result;\n}\n\nprivate static boolean isVowel(char c) {\n    char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n    for (char vowel : vowels) {\n        if (c == vowel) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowThreshold {\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass SameChars {\n    public static boolean sameChars(String s0, String s1) {\n        // Convert both strings to lowercase and sort their characters\n        char[] arr0 = s0.toLowerCase().toCharArray();\n        char[] arr1 = s1.toLowerCase().toCharArray();\n\n        Arrays.sort(arr0);\n        Arrays.sort(arr1);\n\n        // Compare the sorted arrays\n        return Arrays.equals(arr0, arr1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"));  // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\"));               // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\"));              // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\"));             // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\"));              // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"));  // False\n    }\n}"}
{"task_id": "java/21", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Common {\n\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        // Convert the second list to set for efficient lookup\n        Set<Object> set = new HashSet<>(l2);\n\n        // Initialize an empty list to store common elements\n        List<Object> commonElements = new ArrayList<>();\n\n        // Iterate over the first list and check if each element is in the set\n        for (Object obj : l1) {\n            if (set.contains(obj)) {\n                // Add the common element to the list\n                commonElements.add(obj);\n                // Remove the element from the set so it's not counted again\n                set.remove(obj);\n            }\n        }\n\n        // Sort and return the list of common elements\n        Collections.sort(commonElements);\n        return commonElements;\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {\n        int maxFactor = 1; // Initialize the maximum factor\n\n        for (int i = 2; i <= Math.sqrt(n); i++) { // Check up to the square root of n\n            while (n % i == 0) { // If i is a factor, keep dividing until it's no longer a factor\n                maxFactor = i;\n                n /= i;\n            }\n        }\n\n        if (n > 1) {\n            maxFactor = n; // If n itself is a prime number, return that as the largest prime factor\n        }\n\n        return maxFactor;\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    // You can test the function with the following main method:\n    public static void main(String[] args) {\n        System.out.println(sumToN(30));\n        System.out.println(sumToN(100));\n        System.out.println(sumToN(5));\n        System.out.println(sumToN(10));\n        System.out.println(sumToN(1));\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Derivative {\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Object> result = new ArrayList<>();\n        for(int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "public class FibFib {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int[] memo = new int[n + 1];\n            memo[0] = 0;\n            memo[1] = 0;\n            memo[2] = 1;\n\n            for (int i = 3; i <= n; i++) {\n                memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n            }\n\n            return memo[n];\n        }\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n    int count = 0;\n    for(int i=0; i<s.length(); i++) {\n        char c = Character.toLowerCase(s.charAt(i));\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        } else if(c == 'y' && (i == s.length()-1)) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer num : lst) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n\n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > 0) {\n                max = Math.max(max, entry.getKey());\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid \n     * triangle. Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            // If the sides do not form a valid triangle, return -1\n            return new BigDecimal(-1);\n        }\n        \n        // Calculate the semi-perimeter of the triangle\n        double s = (a + b + c) / 2.0;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Return the rounded area\n        return new BigDecimal(String.format(\"%.2f\", area));\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "public static Boolean willItFly(List<Integer> q, int w) {\n    // Check if the list is palindromic (i.e., balanced)\n    List<Integer> reversed = new ArrayList<>(q);\n    Collections.reverse(reversed);\n    return q.equals(reversed) && \n           Collections.sum(q) <= w;\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        if(a < 2) return false; // prime numbers are greater than 1\n        \n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            while (a % i == 0) {\n                a /= i;\n                if(count >=3) return true;\n                count++;\n            }\n        }\n        \n        // If we have reached here then the number is prime\n        if(count < 3 && a > 1) return false; \n        else if(count == 3) return true;\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // prints: true\n        System.out.println(isMultiplyPrime(28)); // prints: false\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "public static String decimalToBinary(int decimal) {\n    return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n}"}
{"task_id": "java/33", "language": "java", "completion": "public static boolean isHappy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        String threeChar = s.substring(i, i + 3);\n        for (char c : threeChar.toCharArray()) {\n            int count = 0;\n            for (int j = i; j < s.length(); j++) {\n                if (s.charAt(j) == c) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.*;\n\npublic class NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> result = new ArrayList<>();\n        \n        for (Number grade : grades) {\n            String letterGrade;\n            if ((double) grade >= 4.0) {\n                letterGrade = \"A+\";\n            } else if ((double) grade > 3.7) {\n                letterGrade = \"A\";\n            } else if ((double) grade > 3.3) {\n                letterGrade = \"A-\";\n            } else if ((double) grade > 3.0) {\n                letterGrade = \"B+\";\n            } else if ((double) grade > 2.7) {\n                letterGrade = \"B\";\n            } else if ((double) grade > 2.3) {\n                letterGrade = \"B-\";\n            } else if ((double) grade > 2.0) {\n                letterGrade = \"C+\";\n            } else if ((double) grade > 1.7) {\n                letterGrade = \"C\";\n            } else if ((double) grade > 1.3) {\n                letterGrade = \"C-\";\n            } else if ((double) grade > 1.0) {\n                letterGrade = \"D+\";\n            } else if ((double) grade > 0.7) {\n                letterGrade = \"D\";\n            } else if ((double) grade > 0.0) {\n                letterGrade = \"D-\";\n            } else {\n                letterGrade = \"E\";\n            }\n            \n            result.add(letterGrade);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Number> grades = new ArrayList<>();\n        grades.add(new Double(4.0));\n        grades.add(new Integer(3));\n        grades.add(new Double(1.7));\n        grades.add(new Double(2));\n        grades.add(new Double(3.5));\n\n        System.out.println(numericalLetterGrade(grades));\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string length \n     * is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length < 2) return true; // length of 0 or 1 is considered a prime number\n        \n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public static String solve(int n) {\n    int sum = 0;\n    while (n > 0) {\n        int remainder = n % 2;\n        sum += remainder;\n        n = n / 2;\n    }\n    \n    // Convert the sum to binary\n    StringBuilder sb = new StringBuilder();\n    while (sum > 0) {\n        if ((sum & 1) == 1) {\n            sb.append('1');\n        } else {\n            sb.append('0');\n        }\n        sum >>= 1;\n    }\n    \n    // Reverse the string to get the correct binary representation\n    return sb.reverse().toString();\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    public static List<List<Integer>> getRow(List<List<Object>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        // Initialize an empty list to store coordinates\n        List<String> coordinates = new ArrayList<>();\n        \n        // Iterate through each row in the input list\n        for (int i = 0; i < lst.size(); i++) {\n            List<Object> row = lst.get(i);\n            \n            // Count the number of columns in this row\n            int count = 0;\n            for (Object obj : row) {\n                if (obj instanceof Integer) {\n                    count++;\n                }\n            }\n            \n            // Check if x is present in this row\n            boolean foundX = false;\n            for (int j = count - 1; j >= 0; j--) {\n                Object obj = row.get(j);\n                if (obj instanceof Integer && (Integer)obj == x) {\n                    foundX = true;\n                    coordinates.add(String.format(\"'%s', %d\", i, j));\n                    break;\n                }\n            }\n            \n            // If x is present in this row, add the coordinates to the result\n            if (foundX) {\n                result.add(new ArrayList<>(Arrays.asList(i, count - 1)));\n            }\n        }\n        \n        // Sort the coordinates by rows and then by columns\n        Collections.sort(coordinates);\n        List<List<Integer>> sortedResult = new ArrayList<>();\n        for (String coordinate : coordinates) {\n            String[] parts = coordinate.replace(\"'\", \"\").split(\", \");\n            List<Integer> temp = new ArrayList<>(Arrays.asList(Integer.parseInt(parts[1]), Integer.parseInt(parts[0])));\n            result.add(temp);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass NextSmallest {\n\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        List<Integer> intList = new ArrayList<>();\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                intList.add((Integer) obj);\n            }\n        }\n        \n        if (intList.size() < 2) {\n            return null;\n        }\n        \n        int min = Integer.MAX_VALUE;\n        int secondMin = Integer.MAX_VALUE;\n        \n        for (Integer num : intList) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin && num != min) {\n                secondMin = num;\n            }\n        }\n        \n        return secondMin;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // prints: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // prints: 2\n        System.out.println(nextSmallest(Arrays.asList())); // prints: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // prints: null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsBored {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]+\"); // split the string into sentences\n        int count = 0; // initialize the boredom count to 0\n        \n        for (String sentence : sentences) { // iterate over each sentence\n            if (sentence.trim().startsWith(\"I\")) { // check if the sentence starts with \"I\"\n                count++; // increment the boredom count\n            }\n        }\n        \n        return count; // return the boredom count\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isBored(\"Hello world\")); // 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "public static int skjkasdkd(List<Integer> lst) {\n    int maxPrime = 0;\n    for (int num : lst) {\n        if (isPrime(num)) {\n            if (num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n    }\n    return sumDigits(maxPrime);\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static int sumDigits(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class CheckDictCase {\n\n    public static boolean checkDictCase(Object dict) {\n        if (dict == null || !(dict instanceof Map)) {\n            return false;\n        }\n        Map<String, Object> map = (Map<String, Object>) dict;\n\n        Set<Map.Entry<String, Object>> entries = map.entrySet();\n        for (Map.Entry<String, Object> entry : entries) {\n            String key = entry.getKey();\n            if (!key.equals(key.toLowerCase()) && !key.equals(key.toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(checkDictCase(new HashMap<String, Object>(){{\n            put(\"a\", \"apple\"); put(\"b\", \"banana\");\n        }}));  // True\n        System.out.println(checkDictCase(new HashMap<String, Object>(){{\n            put(\"a\", \"apple\"); put(\"A\", \"banana\"); put(\"B\", \"banana\");\n        }}));  // False\n        System.out.println(checkDictCase(new HashMap<String, Object>(){{\n            put(\"a\", \"apple\"); put((Integer)8, \"banana\"); put(\"a\", \"apple\");\n        }}));  // False\n        System.out.println(checkDictCase(new HashMap<String, Object>(){{\n            put(\"Name\", \"John\"); put(\"Age\", \"36\"); put(\"City\", \"Houston\");\n        }}));  // False\n        System.out.println(checkDictCase(new HashMap<String, Object>(){{\n            put(\"STATE\", \"NC\"); put(\"ZIP\", \"12345\");\n        }}));  // True\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "public static int closestInteger(String value) {\n    double num = Double.parseDouble(value);\n    if(num >= 0){\n        if(Math.floor(num) == num) return (int)num;\n        else return (int)Math.ceil(num);\n    }else{\n        if(Math.floor(num) == num) return (int)num;\n        else return (int)Math.floor(num) - 1;\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.util.*;\n\npublic class MakeAPile {\n\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            int levelSize;\n            if (i % 2 == 0) { // If the current level is even\n                levelSize = i * 2; \n            } else { // If the current level is odd\n                levelSize = i * 2 + 1;\n            }\n            pile.add(levelSize);\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makeAPile(3)); // Output: [3, 5, 7]\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "public static List<String> wordsString(String s) {\n    String[] words = s.split(\"[,\\\\s]+\");\n    return Arrays.asList(words);\n}"}
{"task_id": "java/45", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1; // swap x and y to ensure x <= y\n    }\n    for (int i = x; i <= y; i++) {\n        if (i % 2 == 0) { // check if the current number is even\n            return i;\n        }\n    }\n    return -1; // no even numbers found in the range [x, y]\n}"}
{"task_id": "java/46", "language": "java", "completion": "public static String roundedAvg(int n, int m) {\n    if (n > m) {\n        return \"-1\";\n    }\n\n    long sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    double avg = (double) sum / ((m - n + 1));\n    int roundedAvg = Math.round(avg);\n    \n    String binary = Integer.toBinaryString(roundedAvg);\n    \n    return \"0b\" + binary;\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) { // if i is even\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else { // if i is odd\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\npublic class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindromic(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    public static boolean isPalindromic(int num) {\n        int reversed = 0;\n        int original = num;\n\n        while (num > 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n\n        return original == reversed;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass MoveOneBall {\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if ((Integer) arr.get(i - 1) > (Integer) arr.get(i)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.List;\n\npublic class Exchange {\n\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int evenCount = 0;\n        \n        // Count the number of even numbers in lst1\n        for (int num : lst1) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are more odd numbers than even, it's impossible to make all elements of lst1 even\n        if (evenCount < lst1.size() / 2) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = new ArrayList<>();\n        lst1.add(1);\n        lst1.add(2);\n        lst1.add(3);\n        lst1.add(4);\n\n        List<Integer> lst2 = new ArrayList<>();\n        lst2.add(1);\n        lst2.add(2);\n        lst2.add(5);\n        lst2.add(4);\n\n        System.out.println(exchange(lst1, lst2));\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n        // Convert string c to a set for efficient lookup\n        Set<Character> cSet = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            cSet.add(ch);\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!cSet.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        boolean isPalindrome = false;\n        String palindromeCheck = result.toString();\n        int left = 0, right = palindromeCheck.length() - 1;\n        while (left < right) {\n            if (palindromeCheck.charAt(left) != palindromeCheck.charAt(right)) {\n                isPalindrome = false;\n                break;\n            }\n            left++;\n            right--;\n        }\n        if (left >= right) {\n            isPalindrome = true;\n        }\n        \n        return new ArrayList<>(Arrays.asList(result.toString(), isPalindrome));\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.List;\n\npublic class MaxFill {\n\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int totalWater = 0;\n        for (List<Integer> row : grid) {\n            for (int unitOfWater : row) {\n                if (unitOfWater == 1) {\n                    totalWater++;\n                }\n            }\n        }\n\n        int bucketsNeeded = totalWater / capacity;\n        int remainingWater = totalWater % capacity;\n\n        return bucketsNeeded + (remainingWater > 0 ? 1 : 0);\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.util.*;\n\npublic class SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() >= n) {\n                int consonantCount = 0;\n                for (char c : word.toLowerCase().toCharArray()) {\n                    if (!Character.isLetter(c)) continue;\n                    if (!\"aeiou\".contains(String.valueOf(c))) {\n                        consonantCount++;\n                    }\n                }\n                if (consonantCount == n) result.add(word);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> words = selectWords(\"Mary had a little lamb\", 4);\n        System.out.println(words); // prints [\"little\"]\n        \n        words = selectWords(\"Mary had a little lamb\", 3);\n        System.out.println(words); // prints [\"Mary\", \"lamb\"]\n        \n        words = selectWords(\"simple white space\", 2);\n        System.out.println(words); // prints []\n        \n        words = selectWords(\"Hello world\", 4);\n        System.out.println(words); // prints [\"world\"]\n        \n        words = selectWords(\"Uncle sam\", 3);\n        System.out.println(words); // prints [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Maximum {\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        // Create a list of pairs to store the numbers and their counts\n        List<Map.Entry<Integer, Integer>> entries = new ArrayList<>();\n        \n        for (int num : arr) {\n            boolean found = false;\n            for (Map.Entry<Integer, Integer> entry : entries) {\n                if (entry.getKey().equals(num)) {\n                    entry.setValue(entry.getValue() + 1);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                entries.add(new AbstractMap.SimpleEntry<>(num, 1));\n            }\n        }\n\n        // Sort the list of pairs based on their counts in descending order\n        Collections.sort(entries, (entry1, entry2) -> Integer.compare(entry2.getValue(), entry1.getValue()));\n\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < Math.min(k, entries.size()); i++) {\n            Map.Entry<Integer, Integer> entry = entries.get(i);\n            int count = entry.getValue();\n            while (count-- > 0) {\n                result.add(entry.getKey());\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AddElements {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return \n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if ((arr.get(i) >= -99 && arr.get(i) <= 99) || (arr.get(i) >= -9 && arr.get(i) <= 9)) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>();\n        arr.add(111);\n        arr.add(21);\n        arr.add(3);\n        arr.add(4000);\n        arr.add(5);\n        arr.add(6);\n        arr.add(7);\n        arr.add(8);\n        arr.add(9);\n\n        System.out.println(addElements(arr, 4)); // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class Intersection {\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) return \"NO\";\n\n        int length = end - start + 1;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = new ArrayList<>();\n        interval1.add(1);\n        interval1.add(2);\n\n        List<Integer> interval2 = new ArrayList<>();\n        interval2.add(2);\n        interval2.add(3);\n\n        System.out.println(intersection(interval1, interval2)); // prints \"NO\"\n\n        interval1.clear();\n        interval1.add(-1);\n        interval1.add(1);\n\n        interval2.clear();\n        interval2.add(0);\n        interval2.add(4);\n\n        System.out.println(intersection(interval1, interval2)); // prints \"NO\"\n\n        interval1.clear();\n        interval1.add(-3);\n        interval1.add(-1);\n\n        interval2.clear();\n        interval2.add(-5);\n        interval2.add(5);\n\n        System.out.println(intersection(interval1, interval2)); // prints \"YES\"\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Tri {\n    public static List<Number> tri(int n) {\n        if (n < 0) {\n            throw new RuntimeException(\"Input must be non-negative.\");\n        }\n        \n        List<Number> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        } else if (n <= 2) {\n            result.add(new Integer(1));\n            if (n >= 1) {\n                result.add(new Integer(3));\n            }\n            return result;\n        }\n\n        result.add(new Integer(3)); // tri(1)\n        for (int i = 2; i < n; i++) {\n            int temp = new Integer(result.get(i - 1)).intValue();\n            if ((i & 1) == 0) { // i is even\n                temp = (i / 2) + 1;\n            } else { // i is odd\n                int a = new Integer(result.get(i - 1)).intValue();\n                int b = new Integer(result.get(i - 2)).intValue();\n                int c = new Integer(3).intValue(); // tri(0)\n                temp = a + b + c;\n            }\n            result.add(new Integer(temp));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if ((digit % 2) != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digits(1));  // prints: 1\n        System.out.println(digits(4));   // prints: 0\n        System.out.println(digits(235)); // prints: 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "public static boolean isNested(String s) {\n    int openCount = 0;\n    for (char c : s.toCharArray()) {\n        if (c == '[') {\n            openCount++;\n        } else if (c == ']') {\n            if (openCount > 0) {\n                openCount--;\n            } else {\n                return false; // unmatched closing bracket\n            }\n        }\n    }\n    return openCount > 0;\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n\n     *\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            double val = Math.ceil(num.doubleValue());\n            sum += (int)val * val;\n        }\n        return sum;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "public class CheckIfLastCharIsALetter {\n\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) return false; // If string is empty, return false\n        \n        char lastChar = txt.charAt(txt.length() - 1); // Get the last character of the string\n        String words[] = txt.split(\" \"); // Split the string into words\n        \n        for(String word : words){ // Iterate over each word\n            if(word.trim().endsWith(String.valueOf(lastChar))){ // If the last character is part of a word, return false\n                return false;\n            }\n        }\n        \n        // If the last character is not part of any word and it's an alphabetical character, return true\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\"));  // False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // False\n        System.out.println(checkIfLastCharIsALette(\"\",));  // False\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n        int maxIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (!arr.get(i).equals(arr.get(i-1)) && ((Integer)arr.get(i)) <= ((Integer)arr.get(i-1))) {\n                maxIndex = i;\n                break;\n            }\n        }\n        return maxIndex;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(4);\n        arr.add(3);\n        arr.add(5);\n\n        System.out.println(canArrange(arr));  // prints: 3\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.util.*;\n\npublic class LargestSmallestIntegers {\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        int maxNeg = Integer.MIN_VALUE;\n        int minPos = Integer.MAX_VALUE;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer && ((Integer) obj) < 0) {\n                maxNeg = Math.max(maxNeg, (int) obj);\n            } else if (obj instanceof Integer && ((Integer) obj) > 0) {\n                minPos = Math.min(minPos, (int) obj);\n            }\n        }\n\n        return Arrays.asList((maxNeg == Integer.MIN_VALUE) ? null : maxNeg,\n                             (minPos == Integer.MAX_VALUE) ? null : minPos);\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n            if (i > 1) {\n                // Calculate the special factorial of i-1 and multiply it with the current result\n                result *= specialFactorial(i - 1);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int n = 4; // For example, calculate the special factorial for 4\n        long result = specialFactorial(n);\n        System.out.println(result);\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "public static String wordsInSentence(String sentence) {\n    StringBuilder result = new StringBuilder();\n    for (String word : sentence.split(\" \")) {\n        if (isPrime(word.length())) {\n            result.append(word).append(\" \");\n        }\n    }\n    return result.toString().trim();\n}\n\npublic static boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/66", "language": "java", "completion": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Convert fractions into decimal numbers\n        BigDecimal decX = new BigDecimal(x.replaceAll(\"/\",\"\").split(0)[0]).divide(new BigDecimal(x.replaceAll(\"/\",\"\").split(0)[1]), 10, RoundingMode.HALF_UP);\n        BigDecimal decN = new BigDecimal(n.replaceAll(\"/\",\"\").split(0)[0]).divide(new BigDecimal(n.replaceAll(\"/\",\"\").split(0)[1]), 10, RoundingMode.HALF_UP);\n\n        // Multiply the decimal numbers\n        BigDecimal result = decX.multiply(decN);\n\n        // Check if the result is a whole number\n        return result.setScale(0, RoundingMode.DOWN).equals(result);\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        // Convert each integer to its string representation and calculate the sum of its digits.\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = (int) nums.get(i);\n            String str = Integer.toString(num).replace(\"-\",\"\"); // Remove negative sign\n            int digitSum = 0;\n            for (char c : str.toCharArray()) {\n                digitSum += Character.getNumericValue(c);\n            }\n            map.put(str, new Pair<>(num, i));\n        }\n\n        // Sort the map based on the sum of digits and then by index.\n        List<Map.Entry<String, Pair<Object, Integer>>> entries = new ArrayList<>(map.entrySet());\n        Collections.sort(entries, (a, b) -> {\n            if (a.getValue().getDigitSum() != b.getValue().getDigitSum()) {\n                return a.getValue().getDigitSum() - b.getValue().getDigitSum();\n            } else {\n                return a.getKey().compareTo(b.getKey());\n            }\n        });\n\n        // Convert the sorted map back to list.\n        List<Object> result = new ArrayList<>();\n        for (Map.Entry<String, Pair<Object, Integer>> entry : entries) {\n            result.add(entry.getValue().getNum());\n        }\n\n        return result;\n    }\n\n    private static class Pair<T, U> {\n        T num;\n        U index;\n\n        public Pair(T num, U index) {\n            this.num = num;\n            this.index = index;\n        }\n\n        public int getDigitSum() {\n            String str = Integer.toString(num).replace(\"-\",\"\"); // Remove negative sign\n            int digitSum = 0;\n            for (char c : str.toCharArray()) {\n                digitSum += Character.getNumericValue(c);\n            }\n            return digitSum;\n        }\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Specialfilter {\n    public static int specialfilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (Math.abs(num) > 10 && isOddFirstAndLastDigit(Math.abs(num))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean isOddFirstAndLastDigit(int n) {\n        int firstDigit = n % 10;\n        int lastDigit = (n / 10000) % 10;\n        if (firstDigit < 0) firstDigit *= -1;\n        if (lastDigit < 0) lastDigit *= -1;\n        return firstDigit > 0 && lastDigit > 0 && (firstDigit == 1 || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9);\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "public class GetMaxTriples {\n\n    public static int getMaxTriples(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int n = 5; // Input\n        System.out.println(getMaxTriples(n)); // Output\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n\n    private static Map<String, Integer> planetOrder = new HashMap<>();\n    private static Set<String> planetSet = new HashSet<>();\n\n    static {\n        planetOrder.put(\"Mercury\", 1);\n        planetOrder.put(\"Venus\", 2);\n        planetOrder.put(\"Earth\", 3);\n        planetOrder.put(\"Mars\", 4);\n        planetOrder.put(\"Jupiter\", 5);\n        planetOrder.put(\"Saturn\", 6);\n        planetOrder.put(\"Uranus\", 7);\n        planetOrder.put(\"Neptune\", 8);\n\n        planetSet.addAll(planetOrder.keySet());\n    }\n\n    public static List<Object> bf(String planet1, String planet2) {\n        if (!planetSet.contains(planet1) || !planetSet.contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        List<String> planets = new ArrayList<>(planetSet);\n        Collections.sort(planets);\n\n        int index1 = planetOrder.get(planet1);\n        int index2 = planetOrder.get(planet2);\n\n        List<Object> result = new ArrayList<>();\n\n        for (String planet : planets) {\n            if (index1 < index2 && indexOrder(planet, planet1) <= indexOrder(planet, planet2)) {\n                result.add(planet);\n            } else if (index1 > index2) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    private static int indexOrder(String planet1, String planet2) {\n        return Integer.compare(planetOrder.getOrDefault(planet1, 0), planetOrder.getOrDefault(planet2, 0));\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// helper method to check if a number is prime\nprivate static boolean isPrime(int num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Object> lst) {\n        int sumOfSquares = 0;\n        \n        for (Object obj : lst) {\n            if (!(obj instanceof Integer)) continue; // Ignore non-integers\n            int num = (int) obj;\n            if (num < 0) continue; // Ignore negative numbers\n            \n            sumOfSquares += Math.pow(num, 2); // Calculate the square of each number and add to the sum\n        }\n        \n        return sumOfSquares;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.util.*;\n\npublic class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtensionName = \"\";\n\n        for (String extension : extensions) {\n            int capCount = 0, smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtensionName = extension;\n            } else if (strength == maxStrength) {\n                // If there are two or more extensions with the same strength,\n                // choose the one that comes first in the list\n                if (extensions.indexOf(extension) < extensions.indexOf(strongestExtensionName)) {\n                    strongestExtensionName = extension;\n                }\n            }\n        }\n\n        return className + \".\" + strongestExtensionName;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "public class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        // Convert string b to lowercase\n        String bLower = b.toLowerCase();\n        \n        // Convert string a to lowercase\n        String aLower = a.toLowerCase();\n        \n        // Rotate string b\n        for (int i = 0; i < b.length(); i++) {\n            if (aLower.contains(bLower.substring(i) + bLower.substring(0, i))) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "public class IntToMiniRoman {\n\n    private static final Map<Integer, String> ROMAN_MAP = new HashMap<>();\n    \n    static {\n        ROMAN_MAP.put(1000, \"M\");\n        ROMAN_MAP.put(900, \"CM\");\n        ROMAN_MAP.put(500, \"D\");\n        ROMAN_MAP.put(400, \"CD\");\n        ROMAN_MAP.put(100, \"C\");\n        ROMAN_MAP.put(90, \"XC\");\n        ROMAN_MAP.put(50, \"L\");\n        ROMAN_MAP.put(40, \"XL\");\n        ROMAN_MAP.put(10, \"X\");\n        ROMAN_MAP.put(9, \"IX\");\n        ROMAN_MAP.put(5, \"V\");\n        ROMAN_MAP.put(4, \"IV\");\n        ROMAN_MAP.put(1, \"I\");\n    }\n\n    public static String intToMiniRoman(int number) {\n        StringBuilder roman = new StringBuilder();\n        \n        for (Map.Entry<Integer, String> entry : ROMAN_MAP.entrySet()) {\n            while (number >= entry.getKey()) {\n                roman.append(entry.getValue());\n                number -= entry.getKey();\n            }\n        }\n        \n        return roman.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19)); // xix\n        System.out.println(intToMiniRoman(152)); // clii\n        System.out.println(intToMiniRoman(426)); // cdxxvi\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RightAngleTriangle {\n    /**\n     * Given the lengths of the three sides of a triangle. Return True if the three \n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // Check if the sides can form a triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false; // The three sides cannot form a triangle\n        }\n\n        // Check if one of the sides is the hypotenuse and other two are legs\n        for(int i : new int[] {a, b, c}) {\n            double sq1 = Math.pow(i, 2);\n            double sq2 = Math.pow((Math.max(a, b) + Math.max(a, c) - i), 2);\n            if(sq1 == sq2) {\n                return true; // The three sides form a right-angled triangle\n            }\n        }\n\n        return false; // The three sides do not form a right-angled triangle\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "public static String solve(String s) {\n    StringBuilder result = new StringBuilder();\n    \n    for (char c : s.toCharArray()) {\n        if (!Character.isLetter(c)) {\n            result.append(c);\n        } else {\n            char letter = Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c);\n            result.append(letter);\n        }\n    }\n    \n    return result.toString();\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = md.digest(text.getBytes(\"UTF-8\"));\n\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < bytes.length; i++) {\n                String hex = Integer.toHexString(bytes[i]);\n                if (hex.length() == 1) {\n                    sb.append('0');\n                }\n                sb.append(hex);\n            }\n\n            return sb.toString();\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {\n            throw new RuntimeException(\"Error calculating MD5\", e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GenerateIntegers {\n\n    /**\n     * Given two positive integers a and b, return the even digits between a and b,\n     * in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Integer> generateIntegers(int a, int b) {\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        List<Integer> evenDigits = new ArrayList<>();\n\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                evenDigits.add(i);\n            }\n        }\n\n        return evenDigits;\n    }\n\n    private static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}"}

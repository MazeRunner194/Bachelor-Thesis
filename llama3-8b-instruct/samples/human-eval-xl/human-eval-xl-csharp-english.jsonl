{"task_id": "csharp/0", "language": "csharp", "completion": "public static bool BelowZero(List<int> operations)\n{\n    int balance = 0;\n    foreach (int operation in operations)\n    {\n        balance += operation;\n        if (balance < 0)\n            return true;\n    }\n    return false;\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "public static Tuple<long, long> SumProduct(List<int> numbers)\n{\n    long sum = 0;\n    long product = 1;\n\n    foreach (var number in numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\n    return new Tuple<long, long>(sum, product);\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "public static string StringXor(string a, string b)\n{\n    if (a.Length != b.Length)\n    {\n        throw new ArgumentException(\"Both input strings must have the same length.\");\n    }\n\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < a.Length; i++)\n    {\n        char c1 = a[i];\n        char c2 = b[i];\n        if ((c1 == '1' && c2 == '0') || (c1 == '0' && c2 == '1'))\n        {\n            result.Append('1');\n        }\n        else\n        {\n            result.Append('0');\n        }\n    }\n\n    return result.ToString();\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest(List<string> strings) \n        {\n            if (strings == null || strings.Count == 0)\n                return null; // Return None in case the input list is empty.\n\n            string longest = strings.First(); // Initialize with the first one\n\n            foreach (var s in strings)\n            {\n                if (s.Length > longest.Length)\n                    longest = s;\n                else if (s.Length == longest.Length) // If multiple have same length, keep the first\n                    break;\n            }\n\n            return longest; // Return the Longest string\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "public static int GreatestCommonDivisor(int a, int b)\n{\n    while (b != 0)\n    {\n        var temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return Math.Abs(a);\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SortNumbers(\"three one five\")); \n        }\n\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        /// Return the string with numbers sorted from smallest to largest\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers(string numbers) \n        {\n            var words = numbers.Split(' ');\n            Array.Sort(words, (a, b) => { return StringComparer.OrdinalIgnoreCase.Compare(a, b); });\n            return string.Join(\" \", words);\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers) \n        {\n            if (numbers.Count < 2)\n                throw new ArgumentException(\"List must have at least two elements\");\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n\n            return numbers.Select(x => (x - min) / (max - min)).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "public static string FlipCase(string s)\n{\n    return new StringBuilder().Insert(0, s).Reverse().Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray().ToString();\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive(List<int> l) \n        {    \n            return l.Where(x => x > 0).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "public static bool IsPrime(int n)\n{\n    if (n <= 1) return false; // Prime numbers are greater than 1\n    if (n == 2) return true; // 2 is the first prime number\n\n    if (n % 2 == 0) return false; // Even numbers other than 2 are not prime\n\n    for (int i = 3; i * i <= n; i += 2)\n    {\n        if (n % i == 0) return false;\n    }\n\n    return true; // If no divisors found, the number is prime\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique(List<int> l)\n        {\n            // Sort the list\n            l.Sort();\n\n            // Create a new set from the sorted list (set automatically removes duplicates)\n            var uniqueSet = new HashSet<int>(l);\n\n            // Convert the set back to a list and return it\n            return uniqueSet.ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> l = new List<int>() { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> result = Unique(l);\n            Console.WriteLine(string.Join(\", \", result));\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "public static int PrimeFib(int n)\n{\n    int fib = 2, primeFib = 3;\n    int count = 1;\n\n    while (true)\n    {\n        if (IsFibonacci(fib) && IsPrime(primeFib))\n        {\n            if (count == n)\n            {\n                return primeFib;\n            }\n            count++;\n        }\n\n        fib = CalculateNextFibonacci(fib);\n        primeFib++;\n    }\n}\n\nprivate static bool IsFibonacci(int number)\n{\n    int a = 0, b = 1;\n\n    while (true)\n    {\n        if (a == number) return true;\n        if (b == number) return true;\n        int temp = a;\n        a = b;\n        b = temp + b;\n    }\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n\n    for (int i = 2; i * i <= number; i++)\n    {\n        if (number % i == 0) return false;\n    }\n\n    return true;\n}\n\nprivate static int CalculateNextFibonacci(int number)\n{\n    int a = 0, b = 1;\n\n    while (true)\n    {\n        int temp = a;\n        a = b;\n        b = temp + b;\n\n        if (a == number) return b;\n        if (b == number) return b;\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// TriplesSumToZero takes a list of integers as an input.\n        /// it returns True if there are three distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// \n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero(List<int> l) \n        { \n            var hashSet = new HashSet<int>(l);\n            foreach (int a in hashSet)\n            {\n                if (hashSet.Contains(-a))\n                {\n                    int b = -a - a;\n                    if (hashSet.Contains(b)) return true;                    \n                }\n            }            \n            return false;\n        }\n\n        public static void Main(string[] args) \n        { \n            Console.WriteLine(TriplesSumToZero(new List<int> {1, 3, 5, 0})); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> {1, 3, -2, 1})); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> {1, 2, 3, 7})); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> {2, 4, -5, 3, 9, 7})); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> {1})); // False\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "public static bool PairsSumToZero(List<int> l)\n{\n    for (int i = 0; i < l.Count; i++)\n    {\n        for (int j = i + 1; j < l.Count; j++)\n        {\n            if (l[i] + l[j] == 0) \n            { \n                return true; \n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "public static int Fib4(int n)\n{\n    if (n <= 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n == 3) return 0;\n\n    List<int> fib4 = new List<int> { 0, 0, 2, 0 };\n    for (int i = 4; i <= n; i++)\n    {\n        int sum = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        fib4.Add(sum);\n    }\n    return fib4[n];\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object Median(List<int> l)\n        {\n            int count = l.Count;\n            Array.Sort(l.ToArray());\n\n            if (count % 2 == 0)\n            {\n                int mid1 = l[l.Count / 2 - 1];\n                int mid2 = l[l.Count / 2];\n\n                return (mid1 + mid2) / 2.0; // Return the average of the two middle numbers\n            }\n            else\n            {\n                return l[l.Count / 2]; // Return the middle number if count is odd\n            }\n        }\n\n        public static void Main()\n        {\n            List<int> l = new List<int>();\n            l.Add(3);\n            l.Add(1);\n            l.Add(2);\n            l.Add(4);\n            l.Add(5);\n\n            object median = Median(l);\n            Console.WriteLine(median); // Output: 3\n\n            l.Clear();\n            l.Add(-10);\n            l.Add(4);\n            l.Add(6);\n            l.Add(1000);\n            l.Add(10);\n            l.Add(20);\n\n            median = Median(l);\n            Console.WriteLine(median); // Output: 15.0\n        }\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "public static bool IsPalindrome(string text)\n{\n    text = text.ToLower(); // Convert to lowercase for case-insensitive comparison\n    string reversedText = new string(text.Reverse().ToArray()); // Reverse the string\n    return text.Equals(reversedText); // Check if the original and reversed strings are equal\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "public static string RemoveVowels(string text)\n{\n    return new Regex(\"[aeiouAEIOU]\", RegexOptions.IgnoreCase).Replace(text, \"\");\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "public static bool BelowThreshold(List<int> l, int t)\n{\n    foreach (var num in l)\n    {\n        if (num >= t)\n            return false;\n    }\n    return true;\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "public static int Add(int x, int y)\n{\n    return x + y;\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "public static bool SameChars(string s0, string s1)\n{\n    var dict = new Dictionary<char, int>();\n    \n    foreach (var c in s0)\n    {\n        if (!dict.ContainsKey(c))\n            dict.Add(c, 0);\n        dict[c]++;\n    }\n    \n    foreach (var c in s1)\n    {\n        if (!dict.ContainsKey(c))\n            return false;\n        dict[c]--;\n        \n        if (dict[c] < 0)\n            return false;\n    }\n    \n    foreach (var pair in dict)\n    {\n        if (pair.Value > 0)\n            return false;\n    }\n    \n    return true;\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "public static int Fib(int n)\n{\n    if (n <= 1) return n;\n    int a = 0, b = 1, result = 1;\n    for (int i = 2; i <= n; i++)\n    {\n        result = a + b;\n        a = b;\n        b = result;\n    }\n    return result;\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted unique Common elements for two lists.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// \n        /// </summary>\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Convert both lists to sets for efficient intersection\n            var set1 = new HashSet<int>(l1);\n            var set2 = new HashSet<int>(l2);\n\n            // Get the intersection of the two sets (common elements)\n            var commonSet = new HashSet<int>(set1.Intersect(set2));\n\n            // Convert the set back to a list and sort it\n            var result = commonSet.OrderBy(x => x).ToList();\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> l1 = new List<int> { 1, 4, 3, 34, 653, 2, 5 };\n            List<int> l2 = new List<int> { 5, 7, 1, 5, 9, 653, 121 };\n\n            List<int> commonElements = Common(l1, l2);\n\n            Console.WriteLine($\"Common elements for {string.Join(\", \", l1)} and {string.Join(\", \", l2)} are: {string.Join(\", \", commonElements)}\");\n        }\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "public static int LargestPrimeFactor(int n)\n{\n    int largestFactor = 1;\n    for (int i = 2; i * i <= n; i++)\n    {\n        while (n % i == 0)\n        {\n            largestFactor = i;\n            n /= i;\n        }\n    }\n    if (n > 1) largestFactor = n;\n    return largestFactor;\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "public static int SumToN(int n)\n{\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// xs represent coefficients of a polynomial.\n        /// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        /// Return Derivative of this polynomial in the same form.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative(List<int> xs)\n        {\n            if (xs.Count == 0) return new List<int>();\n            List<int> result = new List<int>();\n            for (int i = 1; i < xs.Count; i++)\n            {\n                result.Add(i * xs[i]);\n            }\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Derivative([3, 1, 2, 4, 5])\");\n            List<int> xs = new List<int> { 3, 1, 2, 4, 5 };\n            foreach (var x in Derivative(xs))\n            {\n                Console.Write(x + \" \");\n            }\n            Console.WriteLine();\n\n            Console.WriteLine(\"Derivative([1, 2, 3])\");\n            xs = new List<int> { 1, 2, 3 };\n            foreach (var x in Derivative(xs))\n            {\n                Console.Write(x + \" \");\n            }\n            Console.WriteLine();\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "public static int Fibfib(int n)\n{\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    int a = 0, b = 0, c = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        int temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n    }\n    return c;\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "public static int VowelsCount(string s)\n{\n    int count = 0;\n    for (int i = 0; i < s.Length; i++)\n    {\n        if (\"aeiou\".IndexOf(char.ToLower(s[i])) >= 0 || (i == s.Length - 1 && char.ToLower(s[i]) == 'y'))\n        {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int Search(List<int> lst)\n        {\n            var freqDict = new Dictionary<int, int>();\n            foreach (var num in lst)\n            {\n                if (!freqDict.ContainsKey(num))\n                {\n                    freqDict.Add(num, 1);\n                }\n                else\n                {\n                    freqDict[num]++;\n                }\n            }\n\n            for (int i = 1; ; i++)\n            {\n                if (!freqDict.ContainsKey(i) || freqDict[i] < i)\n                {\n                    return -1;\n                }\n            }\n        }\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "public static double TriangleArea(int a, int b, int c)\n{\n    if ((a + b > c) && (a + c > b) && (b + c > a))\n    {\n        double s = (a + b + c) / 2.0;\n        return Math.Round(Math.Sqrt(s * (s - a) * (s - b) * (s - c)), 2);\n    }\n    else\n    {\n        return -1;\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "public static bool WillItFly(List<int> q, int w)\n{\n    // Check if the list is balanced (palindromic)\n    var reversed = new List<int>(q);\n    reversed.Reverse();\n    return q.SequenceEqual(reversed);\n\n    // Check if the sum of elements is less than or equal to the maximum possible weight\n    if (!IsBalanced) return false;\n    return q.Sum() <= w;\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "public static bool IsMultiplyPrime(int a)\n{\n    for (int i = 2; i <= a; i++)\n    {\n        if (IsPrime(i))\n        {\n            int multiplier = a / i;\n            while (multiplier > 1 && !IsPrime(multiplier)) \n                multiplier /= KellermanSoftware.CompareNetObjects.CompareNetObjects.IsMultiplyPrime(int) a;\n            if (multiplier == 2 || multiplier == 3 || multiplier == 5)\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static bool IsPrime(int number)\n{\n    if (number <= 1) \n        return false;\n    for (int i = 2; i * i <= number; i++) \n        if (number % i == 0) \n            return false;\n    return true;\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "public static string DecimalToBinary(int decimalNumber)\n{\n    return \"db\" + Convert.ToString(decimalNumber, 2).PadLeft(16, '0') + \"db\";\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "public static bool IsHappy(string s)\n{\n    if (s.Length < 3)\n        return false;\n\n    for (int i = 0; i <= s.Length - 3; i++)\n    {\n        string trio = s.Substring(i, 3);\n        if (s.IndexOf(trio) != i && s.IndexOf(trio) != i + 1)\n            return false;\n    }\n\n    return true;\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<object> grades)\n        {\n            var result = new List<string>();\n            foreach (var grade in grades)\n            {\n                string letterGrade;\n                if ((double)grade >= 4.0)\n                {\n                    letterGrade = \"A+\";\n                }\n                else if ((double)grade > 3.7)\n                {\n                    letterGrade = \"A\";\n                }\n                else if ((double)grade > 3.3)\n                {\n                    letterGrade = \"A-\";\n                }\n                else if ((double)grade > 3.0)\n                {\n                    letterGrade = \"B+\";\n                }\n                else if ((double)grade > 2.7)\n                {\n                    letterGrade = \"B\";\n                }\n                else if ((double)grade > 2.3)\n                {\n                    letterGrade = \"B-\";\n                }\n                else if ((double)grade > 2.0)\n                {\n                    letterGrade = \"C+\";\n                }\n                else if ((double)grade > 1.7)\n                {\n                    letterGrade = \"C\";\n                }\n                else if ((double)grade > 1.3)\n                {\n                    letterGrade = \"C-\";\n                }\n                else if ((double)grade > 1.0)\n                {\n                    letterGrade = \"D+\";\n                }\n                else if ((double)grade > 0.7)\n                {\n                    letterGrade = \"D\";\n                }\n                else\n                {\n                    letterGrade = \"E\";\n                }\n\n                result.Add(letterGrade);\n            }\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            var grades = new List<object> { 4.0, 3.5, 1.7, 2.0, 3.8 };\n            var letterGrades = NumericalLetterGrade(grades);\n            foreach (var grade in letterGrades)\n            {\n                Console.WriteLine(grade);\n            }\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "public static bool PrimeLength(string str)\n{\n    int length = str.Length;\n    if (length <= 1) return true;\n\n    for (int i = 2; i * i <= length; i++)\n    {\n        if (length % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "public static string Solve(int N)\n{\n    int sum = 0;\n    string binary = Convert.ToString(N, 2);\n\n    foreach (char c in binary)\n    {\n        if (c == '1')\n        {\n            sum++;\n        }\n    }\n\n    return sum.ToString();\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<Tuple<int, int>> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<Tuple<int, int>>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if (lst[i][j] == x)\n                    {\n                        result.Add(new Tuple<int, int>(i, j));\n                    }\n                }\n            }\n\n            result.Sort((x1, x2) =>\n            {\n                var y = x2.Item1.CompareTo(x1.Item1);\n                return y != 0 ? y : x2.Item2.CompareTo(x1.Item2);\n            });\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "using System;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static object NextSmallest(List<int> lst)\n        {\n            if (lst == null || lst.Count < 2)\n                return null; // or throw an exception, depending on the desired behavior\n\n            var sortedList = new List<int>(lst);\n            sortedList.Sort();\n\n            for (int i = 1; i < sortedList.Count; i++)\n            {\n                if (sortedList[i] != sortedList[i - 1])\n                    return sortedList[i];\n            }\n\n            return null;\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "public static int IsBored(string S)\n{\n    return S.Split(new[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries)\n           .Count(s => s.Trim().StartsWith(\"I\", StringComparison.OrdinalIgnoreCase));\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\npublic class Program\n{\n    public static int Skjkasdkd(List<int> lst)\n    {\n        int maxPrime = 0;\n        foreach (int num in lst)\n        {\n            if (IsPrime(num) && num > maxPrime)\n                maxPrime = num;\n        }\n\n        return SumOfDigits(maxPrime);\n    }\n\n    public static bool IsPrime(int n)\n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(n));\n\n        for (int i = 3; i <= boundary; i += 2)\n            if (n % i == 0)\n                return false;\n\n        return true;\n    }\n\n    public static int SumOfDigits(int n)\n    {\n        int sum = 0;\n        while (n > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "public static bool CheckDictCase(Dictionary<object, string> dict)\n{\n    if(dict.Count == 0)\n        return false;\n\n    bool areAllKeysLowerCase = true;\n    bool areAllKeysUpperCase = true;\n\n    foreach (var pair in dict)\n    {\n        var key = pair.Key.ToString();\n        if (!key.All(c => char.IsLower(c)))\n        {\n            areAllKeysLowerCase = false;\n        }\n        if (!key.All(c => char.IsUpper(c)))\n        {\n            areAllKeysUpperCase = false;\n        }\n        if (!(areAllKeysLowerCase || areAllKeysUpperCase))\n            break;\n    }\n\n    return areAllKeysLowerCase || areAllKeysUpperCase;\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "public static int ClosestInteger(string value)\n{\n    double number = Convert.ToDouble(value);\n    return Math.Abs(number - Math.Floor(number)) < Math.Abs(number - Math.Ceiling(number))\n        ? (int)Math.Ceiling(number)\n        : (int)Math.Floor(number);\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a positive integer n, you have to make a pile of n levels of stones.\n        /// The first level has n stones.\n        /// The number of stones in the next level is:\n        /// - the next odd number if n is odd.\n        /// - the next even number if n is even.\n        /// Return the number of stones in each level in a list, where element at index\n        /// i represents the number of stones in the level (i+1).\n        /// \n        /// Examples:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> MakeAPile(int n) \n        {\n            List<int> pile = new List<int>();\n            int stonesInCurrentLevel = n;\n            pile.Add(stonesInCurrentLevel);\n\n            for (int i = 1; i < n; i++)\n            {\n                if ((stonesInCurrentLevel & 1) == 0)\n                {\n                    // The current level has even number of stones\n                    stonesInCurrentLevel++;\n                }\n                else\n                {\n                    // The current level has odd number of stones\n                    stonesInCurrentLevel += 2;\n                }\n\n                pile.Add(stonesInCurrentLevel);\n            }\n\n            return pile;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Number of levels: \" + MakeAPile(3).Count());\n            foreach (var num in MakeAPile(3))\n            {\n                Console.Write(num + \" \");\n            }\n            Console.WriteLine();\n        }\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "public static List<string> WordsString(string s)\n{\n    return new List<string>(s.Split(new[] { ',', ' ', '.' }, StringSplitOptions.RemoveEmptyEntries));\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "public static int ChooseNum(int x, int y)\n{\n    if (x > y)\n    {\n        // If x is greater than y, return -1 as there's no even number in the range [x, y]\n        return -1;\n    }\n\n    for (int i = x; i <= y; i++)\n    {\n        // Check if the current number is even\n        if (i % 2 == 0)\n        {\n            // If it is, return it as the biggest even integer in the range [x, y]\n            return i;\n        }\n    }\n\n    // If no even number was found in the range [x, y], return -1\n    return -1;\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two positive integers n and m, and your task is to compute the\n        /// average of the integers from n through m (including n and m). \n        /// Round the answer to the nearest integer and convert that to binary.\n        /// If n is greater than m, return -1.\n        /// Example:\n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg (int n, int m) \n        {\n            if(n > m)\n                return -1;\n\n            int sum = 0;\n            for(int i=n; i<=m; i++)\n                sum += i;\n\n            double average = Math.Round((double)sum / ((n+m)/2.0));\n            \n            return Convert.ToString(average, 2);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // -1\n            Console.WriteLine(RoundedAvg(10, 20)); // \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// You're an expert C# programmer\n        /// Implement the Function F that takes n as a parameter,\n        /// and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n        /// or the sum oF numbers From 1 to i otherwise.\n        /// i starts From 1.\n        /// the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n        /// Example:\n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F(int n)\n        {\n            var result = new List<int>();\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    int factorial = 1;\n                    for (int j = 1; j <= i; j++)\n                    {\n                        factorial *= j;\n                    }\n                    result.Add(factorial);\n                }\n                else\n                {\n                    int sum = 0;\n                    for (int j = 1; j <= i; j++)\n                    {\n                        sum += j;\n                    }\n                    result.Add(sum);\n                }\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> EvenOddPalindrome(int n)\n        {\n            int evenCount = 0;\n            int oddCount = 0;\n            \n            for (int i = 1; i <= n; i++)\n            {\n                if (IsPalindrome(i))\n                {\n                    if (i % 2 == 0) \n                    { \n                        evenCount++;\n                    }\n                    else\n                    {\n                        oddCount++;\n                    }\n                }\n            }\n\n            return new List<int> { evenCount, oddCount };\n        }\n\n        public static bool IsPalindrome(int number)\n        {\n            int reversedNumber = 0;\n            int originalNumber = number;\n\n            while (number != 0)\n            {\n                int remainder = number % 10;\n                reversedNumber = reversedNumber * 10 + remainder;\n                number /= 10;\n            }\n\n            return originalNumber == reversedNumber;\n        }\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "public static bool MoveOneBall(List<int> arr)\n{\n    int max = arr.Max();\n    for (int i = 0; i < arr.Count; i++)\n    {\n        if (arr[i] > max - i)\n            return false;\n    }\n    return true;\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "public static string Exchange(List<int> lst1, List<int> lst2)\n{\n    // Create a copy of lst1 to avoid modifying the original list\n    var lst1Copy = new List<int>(lst1);\n\n    // While there are still odd numbers in lst1\n    while (lst1Copy.Any(x => x % 2 != 0))\n    {\n        // Find the first odd number in lst1 and exchange it with an even number from lst2\n        int oddNumber = lst1Copy.First(x => x % 2 != 0);\n        int evenNumberFromLst2 = lst2.FirstOrDefault(x => x % 2 == 0);\n        if (evenNumberFromLst2 == default(int))\n        {\n            // If there are no more even numbers in lst2, it's not possible to make all elements of lst1 even\n            return \"NO\";\n        }\n        // Replace the odd number in lst1 with the even number from lst2\n        int index = lst1Copy.IndexOf(oddNumber);\n        lst1Copy[index] = evenNumberFromLst2;\n        // Remove the used even number from lst2\n        lst2.Remove(evenNumberFromLst2);\n    }\n\n    return \"YES\";\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<object> ReverseDelete(string s, string c)\n        {\n            // Create a new list to store the result\n            var result = new List<char>();\n\n            // Loop through each character in the input string s\n            foreach (char ch in s)\n            {\n                // Check if the character is not in the string c\n                if (!c.Contains(ch))\n                {\n                    // If it's not, add it to the result list\n                    result.Add(ch);\n                }\n            }\n\n            // Convert the result list to a string\n            var strResult = new string(result.ToArray());\n\n            // Check if the resulting string is a palindrome\n            bool isPalindrome = IsPalindrome(strResult);\n\n            // Return a tuple containing the result string and a boolean indicating whether it's a palindrome\n            return new List<object> { strResult, isPalindrome };\n        }\n\n        private static bool IsPalindrome(string s)\n        {\n            // Loop through the characters in the input string from both ends\n            int left = 0;\n            int right = s.Length - 1;\n\n            while (left < right)\n            {\n                // If the characters at the left and right positions are different, return false\n                if (s[left] != s[right])\n                {\n                    return false;\n                }\n\n                // Move the pointers towards the center of the string\n                left++;\n                right--;\n            }\n\n            // If we reached this point, the input string is a palindrome, so return true\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int MaxFill(List<List<int>> grid, int capacity)\n    {\n        // Calculate total units of water in all wells.\n        int totalWater = 0;\n        foreach (var row in grid)\n        {\n            totalWater += row.Sum(x => x);\n        }\n\n        // Calculate the maximum number of buckets needed to empty the wells.\n        return (int)Math.Ceiling((double)totalWater / capacity);\n    }\n\n    public static void Main(string[] args)\n    {\n        List<List<int>> grid = new List<List<int>>\n        {\n            new List<int> {0, 0, 1, 0},\n            new List<int> {0, 1, 0, 0},\n            new List<int> {1, 1, 1, 1}\n        };\n        int capacity = 1;\n        Console.WriteLine(MaxFill(grid, capacity));\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            List<string> result = new List<string>();\n            string[] words = s.Split(' ');\n            foreach (string word in words)\n            {\n                int consonantCount = 0;\n                bool isVowel = false;\n\n                foreach (char c in word.ToLower())\n                {\n                    if (\"aeiou\".Contains(c))\n                    {\n                        isVowel = true;\n                    }\n                    else\n                    {\n                        if (!isVowel) \n                            consonantCount++;\n                    }\n                }\n\n                if (consonantCount == n)\n                    result.Add(word);\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<string> output = SelectWords(\"Mary had a little lamb\", 4);\n            foreach (string word in output)\n            {\n                Console.WriteLine(word);\n            }\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "public static List<int> Maximum(List<int> arr, int k) \n{\n    return arr.OrderByDescending(x => x).Take(k).ToList();\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "public static int AddElements(List<int> arr, int k)\n{\n    return arr.Take(k).Where(x => (int)Math.Log10(Math.Abs(x)) + 1 <= 2).Sum();\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "public static string Intersection(List<int> interval1, List<int> interval2)\n{\n    int start = Math.Max(interval1[0], interval2[0]);\n    int end = Math.Min(interval1[1], interval2[1]);\n\n    if (start > end) return \"NO\";\n\n    int length = end - start + 1;\n\n    bool isPrime = true;\n    for (int i = 2; i * i <= length; i++)\n    {\n        if (length % i == 0)\n        {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? \"YES\" : \"NO\";\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<object> Tri(int n)\n        {\n            List<object> sequence = new List<object>();\n            if (n == 0) return sequence;\n\n            sequence.Add(3);\n\n            for (int i = 1; i < n; i++)\n            {\n                int tribonacciNumber;\n                if (i % 2 == 0)\n                {\n                    tribonacciNumber = 1 + i / 2;\n                }\n                else\n                {\n                    if (i <= 3) \n                    { \n                        tribonacciNumber = 8 - i; \n                    } \n                    else \n                    { \n                        sequence.Add(tribonacciNumber = ((int)sequence[i - 2]) + ((int)sequence[i - 1]) + ((int)sequence[i - 3]));\n                    }\n                }\n\n                sequence.Add(tribonacciNumber);\n            }\n\n            return sequence;\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "public static int Digits(int n)\n{\n    int product = 1;\n    while (n > 0)\n    {\n        int digit = n % 10;\n        if (digit % 2 != 0) // check if the digit is odd\n            product *= digit; // multiply the product by the odd digit\n        n /= 10;\n    }\n    return product;\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "public static bool IsNested(string s)\n{\n    int openCount = 0;\n    foreach (char c in s)\n    {\n        if (c == '[')\n            openCount++;\n        else if (c == ']')\n        {\n            if (openCount == 0) return false; // unmatched closing bracket\n            openCount--;\n        }\n    }\n    return openCount > 0; // if there are still opening brackets, it means they were nested\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// \n        /// \n        /// </summary>\n        public static int SumSquares(List<object> lst)\n        {\n            // Initialize sum to zero\n            int sum = 0;\n\n            // Loop through each element in the list\n            foreach (object obj in lst)\n            {\n                // Convert object to double, round up and square it\n                double val = Math.Ceiling((double)obj) * Math.Ceiling((double)obj);\n                // Add the squared value to the sum\n                sum += (int)val;\n            }\n\n            // Return the sum of squares\n            return sum;\n        }\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "public static bool CheckIfLastCharIsALetter(string txt)\n{\n    // Remove all spaces from the string\n    string noSpaces = txt.Replace(\" \", \"\");\n\n    // Check if the last character of the resulting string is alphabetical\n    return System.Text.RegularExpressions.Regex.IsMatch(noSpaces, \"[a-zA-Z]$\", RegexOptions.IgnoreCase);\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "public static int CanArrange(List<int> arr)\n{\n    for(int i = 0; i < arr.Count; i++)\n    {\n        if(i > 0 && arr[i] <= arr[i - 1])\n        {\n            return i;\n        }\n    }\n    return -1;\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<object> LargestSmallestIntegers(List<int> lst)\n        {\n            int maxNegative = int.MinValue;\n            int minPositive = int.MaxValue;\n\n            foreach (int num in lst)\n            {\n                if (num < 0 && num > maxNegative)\n                    maxNegative = num;\n\n                if (num > 0 && num < minPositive)\n                    minPositive = num;\n            }\n\n            List<object> result = new List<object>();\n\n            if (maxNegative != int.MinValue)\n                result.Add(maxNegative);\n            else\n                result.Add(null);\n\n            if (minPositive != int.MaxValue)\n                result.Add(minPositive);\n            else\n                result.Add(null);\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "public static int SpecialFactorial(int n)\n{\n    if (n <= 0)\n    {\n        throw new ArgumentException(\"n must be greater than 0\");\n    }\n\n    int result = 1;\n    for (int i = n; i > 0; i--)\n    {\n        result *= Factorial(i);\n    }\n    return result;\n}\n\nprivate static int Factorial(int n)\n{\n    if (n == 0 || n == 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return n * Factorial(n - 1);\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "public static string WordsInSentence(string sentence)\n{\n    var words = sentence.Split(' ');\n    var primeWords = new List<string>();\n\n    foreach (var word in words)\n    {\n        if (IsPrime(word.Length))\n        {\n            primeWords.Add(word);\n        }\n    }\n\n    return string.Join(\" \", primeWords);\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n    for (int i = 3; i <= boundary; i += 2)\n    {\n        if (number % i == 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "public static bool Simplify(string x, string n)\n{\n    // Parse the fractions into numerator and denominator integers\n    var xNumerator = int.Parse(Regex.Match(x, @\"(\\d+)/\").Groups[1].Value);\n    var xDenominator = int.Parse(Regex.Match(x, @\"/(\\d+)\").Groups[1].Value);\n    var nNumerator = int.Parse(Regex.Match(n, @\"(\\d+)/\").Groups[1].Value);\n    var nDenominator = int.Parse(Regex.Match(n, @\"/(\\d+)\").Groups[1].Value);\n\n    // Calculate the product of the fractions\n    int productNumerator = xNumerator * nNumerator;\n    int productDenominator = xDenominator * nDenominator;\n\n    // Check if the product is a whole number (i.e. the denominator is 1)\n    return productDenominator == 1;\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function which sorts the given list of integers\n        /// in ascending order according to the sum of their digits.\n        /// Note: if there are several items with similar sum of their digits,\n        /// order them based on their index in original list.\n        /// \n        /// For example:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            return nums.OrderBy(x => new { DigitSum = x.ToString().Select(c => int.Parse(c.ToString())).Sum(), OriginalIndex = Array.IndexOf(nums.ToArray(), x) })\n                       .ThenBy(x => x).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "public static int SpecialFilter(List<int> nums)\n{\n    return nums.Where(x => x > 10 && IsOdd(x.ToString().First()) && IsOdd(x.ToString().Last()))\n              .Count();\n}\n\nprivate static bool IsOdd(char c)\n{\n    return \"13579\".Contains(c);\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "public static int GetMaxTriples(int n)\n{\n    List<int> numbers = new List<int>();\n    for (int i = 1; i <= n; i++)\n    {\n        numbers.Add(i * i - i + 1);\n    }\n\n    int count = 0;\n    for (int i = 0; i < numbers.Count; i++)\n    {\n        for (int j = i + 1; j < numbers.Count; j++)\n        {\n            for (int k = j + 1; k < numbers.Count; k++)\n            {\n                if ((numbers[i] + numbers[j] + numbers[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        private static Dictionary<string, int> PlanetsByOrbit = new Dictionary<string, int>()\n        {\n            {\"Mercury\", 1},\n            {\"Venus\", 2},\n            {\"Earth\", 3},\n            {\"Mars\", 4},\n            {\"Jupiter\", 5},\n            {\"Saturn\", 6},\n            {\"Uranus\", 7},\n            {\"Neptune\", 8}\n        };\n\n        public static List<string> Bf(string planet1, string planet2)\n        {\n            if (!PlanetsByOrbit.ContainsKey(planet1) || !PlanetsByOrbit.ContainsKey(planet2))\n                return new List<string>();\n\n            int orbit1 = PlanetsByOrbit[planet1];\n            int orbit2 = PlanetsByOrbit[planet2];\n\n            var result = new List<string>();\n            for (int i = 1; i <= 8; i++)\n            {\n                if ((i >= orbit1 && i < orbit2) || (i > orbit2))\n                {\n                    foreach (var planet in PlanetsByOrbit.Where(p => p.Value == i).Select(p => p.Key))\n                    {\n                        result.Add(planet);\n                    }\n                }\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "public static int XOrY(int n, int x, int y)\n{\n    if (IsPrime(n))\n        return x;\n    else\n        return y;\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n    for (int i = 3; i <= boundary; i += 2)\n        if (number % i == 0)\n            return false;\n\n    return true;\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "public static int DoubleTheDifference(List<object> lst)\n{\n    int sum = 0;\n    foreach (var num in lst.Where(n => n is int && (int)n > 0))\n    {\n        if ((int)n % 2 != 0) // check if the number is odd\n            sum += (int)n * (int)n; // square the number and add to sum\n    }\n    return sum;\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StrongestExtension(string className, List<string> extensions)\n        {\n            int strongestExtensionStrength = -1;\n            string strongestExtensionName = \"\";\n\n            foreach (var extension in extensions)\n            {\n                int cap = 0;\n                int sm = 0;\n\n                foreach (char c in extension)\n                {\n                    if (char.IsUpper(c))\n                    {\n                        cap++;\n                    }\n                    else if (char.IsLower(c))\n                    {\n                        sm++;\n                    }\n                }\n\n                int extensionStrength = cap - sm;\n\n                if (extensionStrength > strongestExtensionStrength || (extensionStrength == strongestExtensionStrength && extension.CompareTo(strongestExtensionName) < 0))\n                {\n                    strongestExtensionStrength = extensionStrength;\n                    strongestExtensionName = extension;\n                }\n            }\n\n            return className + \".\" + strongestExtensionName;\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "public static bool CycpatternCheck(string a, string b)\n{\n    for (int i = 0; i < b.Length; i++)\n    {\n        for (int j = 0; j <= b.Length - b.Length + i; j++)\n        {\n            if (a.IndexOf(b.Substring(i, b.Length)) >= 0 || a.IndexOf(b.Substring(j % b.Length, b.Length)) >= 0)\n                return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "public static string IntToMiniRoman(int number)\n{\n    if (number < 1 || number > 1000) throw new ArgumentOutOfRangeException(\"Input must be between 1 and 1000.\");\n\n    Dictionary<int, string> romanMap = new Dictionary<int, string>\n    {\n        { 1000, \"M\" },\n        { 900, \"CM\" },\n        { 500, \"D\" },\n        { 400, \"CD\" },\n        { 100, \"C\" },\n        { 90, \"XC\" },\n        { 50, \"L\" },\n        { 40, \"XL\" },\n        { 10, \"X\" },\n        { 9, \"IX\" },\n        { 5, \"V\" },\n        { 4, \"IV\" },\n        { 1, \"I\" }\n    };\n\n    string result = \"\";\n\n    foreach (var pair in romanMap.OrderByDescending(x => x.Key))\n    {\n        while (number >= pair.Key)\n        {\n            number -= pair.Key;\n            result += pair.Value.ToLower();\n        }\n    }\n\n    return result;\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "public static bool RightAngleTriangle(int a, int b, int c)\n{\n    if (a <= 0 || b <= 0 || c <= 0) return false; // all sides must be positive\n\n    var sides = new[] { a, b, c }; // store the lengths in an array\n    Array.Sort(sides); // sort the array to ensure 'a' is the smallest side\n\n    if (sides[2] * sides[2] == sides[0] * sides[0] + sides[1] * sides[1]) \n        return true; // if the square of the longest side equals sum of squares of other two, it's a right triangle\n    else\n        return false;\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "public static string Solve(string s)\n{\n    char[] charArray = s.ToCharArray();\n    bool hasLetters = false;\n\n    for (int i = 0; i < s.Length; i++)\n    {\n        if (char.IsLetter(charArray[i]))\n        {\n            charArray[i] = char.IsUpper(charArray[i]) ? char.ToLower(charArray[i]) : char.ToUpper(charArray[i]);\n            hasLetters = true;\n        }\n    }\n\n    return hasLetters ? new string(charArray) : new string(charArray.Reverse().ToArray());\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// \n    /// Given a string 'text', return its md5 hash equivalent string.\n    /// If 'text' is an empty string, return None.\n    /// \n    /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    /// \n    /// </summary>\n    public static object StringToMd5 (string text) \n    { \n        if (string.IsNullOrEmpty(text))\n            return null;\n\n        using (var md5 = MD5.Create())\n        {\n            var result = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n            return BitConverter.ToString(result).Replace(\"-\", string.Empty);\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers(int a, int b)\n        {\n            List<int> result = new List<int>();\n\n            // Ensure a is less than or equal to b\n            if (a > b)\n            {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n\n            for (int i = a; i <= b; i++)\n            {\n                string strNum = i.ToString();\n\n                foreach (char c in strNum)\n                {\n                    if (c % 2 != 0) // If the character is odd\n                    {\n                        result.Clear(); // Clear the list\n                        return result; // Return an empty list\n                    }\n                }\n\n                result.Add(i); // Add the number to the result list\n            }\n\n            return result;\n        }\n    }\n}"}

{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] > 0) {\n      balance += operations[i];\n    } else {\n      balance -= Math.abs(operations[i]);\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    let sum = 0;\n    let product = 1;\n\n    for(let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\n    return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1' && b[i] === '1') {\n      result += '0';\n    } else if (a[i] === '1' || b[i] === '1') {\n      result += '1';\n    } else {\n      result += '0';\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) {\n    return \"none\";\n  }\n  let maxLength = 0;\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    const length = strings[i].length;\n    if (length > maxLength) {\n      maxLength = length;\n      longestString = strings[i];\n    } else if (length === maxLength) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  while (b !== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return Math.abs(a);\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numberMap = {\n    zero: 0, one: 1, two: 2, three: 3, four: 4,\n    five: 5, six: 6, seven: 7, eight: 8, nine: 9\n  };\n  const numbersArray = numbers.split(' ').map(word => numberMap[word]);\n  return numbersArray.sort((a, b) => a - b).join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\n  return numbers.map((num) => (num - min) / (max - min));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split('').map(char => char.toLowerCase() === char ? char.toUpperCase() : char.toLowerCase()).join('');\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(num => num > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false;\n  for (var i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "def unique(l):\n    return sorted(set(l))"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function primeFib(n) {\n  let fibNum = 0;\n  let a = 0;\n  let b = 1;\n\n  for (let i = 0; i < n; i++) {\n    fibNum = a + b;\n    if (isPrime(fibNum)) {\n      return fibNum;\n    }\n    a = b;\n    b = fibNum;\n  }\n\n  function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i * i <= num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n  l = l.sort((a, b) => a - b); // sort the list to make it easier to check for triplets\n  for (let i = 0; i < l.length - 2; i++) { // iterate through the list\n    let left = i + 1;\n    let right = l.length - 1;\n    while (left < right) { // use two pointers, one starting from the current element and one from the end of the list\n      let sum = l[i] + l[left] + l[right];\n      if (sum === 0) {\n        return true; // found a triplet that sums to zero!\n      } else if (sum < 0) {\n        left++; // move the left pointer to increase the sum\n      } else {\n        right--; // move the right pointer to decrease the sum\n      }\n    }\n  }\n  return false; // didn't find any triplets that sum to zero\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    const seen = new Set();\n    for (let num of l) {\n        if (seen.has(-num)) return true;\n        seen.add(num);\n    }\n    return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  let a = 0, b = 0, c = 2, d = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === 2) {\n      d = c;\n      c = b;\n      b = a + 2;\n      a = d;\n    } else {\n      let temp = a + b + c;\n      a = b;\n      b = c;\n      c = temp;\n    }\n  }\n  return c;\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n    let cleanText = text.replace(/\\W+/g, \"\").toLowerCase();\n    let reversedText = cleanText.split(\"\").reverse().join(\"\");\n    \n    return cleanText === reversedText;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  return l.every(x => x < t);\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "/**\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\nfunction add(x, y) {\n  return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    return Array.from(s0).sort().join('') === Array.from(s1).sort().join('');\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 0) {\n        return \"Input should be positive integer.\";\n    } else if (n == 1) {\n        return 1;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "def common(l1, l2):\n    # Convert lists to sets to remove duplicates and improve lookup efficiency\n    s1 = set(l1)\n    s2 = set(l2)\n\n    # Find the intersection of the two sets (common elements)\n    common_elements = s1 & s2\n\n    # Convert the result back to a list and sort it\n    return sorted(list(common_elements))"}
{"task_id": "javascript/23", "language": "javascript", "completion": "def largest_prime_factor(n):\n    i = n - 1\n    while i > 1:\n        if n % i == 0 and is_prime(i):\n            return i\n        i -= 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(largest_prime_factor(13195)) # Output: 29\nprint(largest_prime_factor(2048))  # Output: 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n  const n = xs.length;\n  const result = new Array(n - 1);\n  for (let i = 0; i < n - 1; i++) {\n    result[i] = (i + 1) * xs[i];\n  }\n  return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  const memo = [0, 0, 1]; // base cases\n  for (let i = 3; i <= n; i++) {\n    memo[i] = memo[i-1] + memo[i-2] + memo[i-3];\n  }\n  return memo[n];\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n  let count = 0;\n  for (let char of s.toLowerCase()) {\n    if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n      count++;\n    } else if (char === 'y' && s.length - 1 === i) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n  let maxFreq = -1;\n  for (let num of lst) {\n    if (num > 0 && num <= freqMap[num]) {\n      maxFreq = Math.max(maxFreq, num);\n    }\n  }\n  return maxFreq === -1 ? -1 : num;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Check if the three sides form a valid triangle\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        // Calculate the semi-perimeter of the triangle\n        let s = (a + b + c) / 2;\n        \n        // Calculate the area using Heron's formula\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Return the area rounded to 2 decimal points\n        return Math.round(area * 100) / 100;\n    } else {\n        // The three sides do not form a valid triangle, return -1\n        return -1;\n    }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n  // Check if the object q is balanced (palindromic list)\n  const isBalanced = JSON.stringify(q).trim() === JSON.stringify(q).trim().split('').reverse().join('');\n\n  // Check if the sum of its elements is less than or equal to the maximum possible weight\n  const sumOfElements = q.reduce((a, b) => a + b, 0);\n  const isWithinWeightLimit = sumOfElements <= w;\n\n  // Return True if the object q will fly (balanced and within weight limit), False otherwise\n  return isBalanced && isWithinWeightLimit;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    for (let i = 2; i <= Math.sqrt(a); i++) {\n        let isPrime = true;\n        for (let j = 2; j * j <= i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            let b = a / i;\n            let c = b / (b % Math.floor(Math.sqrt(b)) == 0 ? b : Math.sqrt(b));\n            if (c % i === 0 && c > 1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  return \"db\" + (decimal.toString(2)) + \"db\";\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        let subStr = s.slice(i, i + 3);\n        if (new Set(subStr).size !== 3) return false;\n    }\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n  const letterGrades = [];\n  for (const gpa of grades) {\n    if (gpa >= 4.0) {\n      letterGrades.push('A+');\n    } else if (gpa > 3.7) {\n      letterGrades.push('A');\n    } else if (gpa > 3.3) {\n      letterGrades.push('A-');\n    } else if (gpa > 3.0) {\n      letterGrades.push('B+');\n    } else if (gpa > 2.7) {\n      letterGrades.push('B');\n    } else if (gpa > 2.3) {\n      letterGrades.push('B-');\n    } else if (gpa > 2.0) {\n      letterGrades.push('C+');\n    } else if (gpa > 1.7) {\n      letterGrades.push('C');\n    } else if (gpa > 1.3) {\n      letterGrades.push('C-');\n    } else if (gpa > 1.0) {\n      letterGrades.push('D+');\n    } else if (gpa > 0.7) {\n      letterGrades.push('D');\n    } else if (gpa >= 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  }\n  return letterGrades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(s) {\n  const length = s.length;\n  if (length <= 1) return false; // lengths less than or equal to 1 are not prime\n\n  for (let i = 2, isPrime = true; i * i <= length; i++) {\n    while (length % i === 0) {\n      isPrime = false;\n      length /= i;\n    }\n  }\n\n  return isPrime;\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    let sum = 0;\n    let binary = n.toString(2);\n    \n    for (let i = 0; i < binary.length; i++) {\n        if (binary[i] === '1') {\n            sum += 1;\n        }\n    }\n    \n    return sum.toString();\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) return \"none\";\n    lst = [...new Set(lst)].sort((a, b) => a - b);\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > lst[0]) {\n            return lst[i];\n        }\n    }\n    return \"none\";\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n  let boredomCount = 0;\n  const sentences = s.split(/[\\.!?]+/); // split by sentence delimiters\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith('I')) {\n      boredomCount++;\n    }\n  }\n\n  return boredomCount;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n  // Find the largest prime value in the list\n  let maxPrime = 0;\n  for (let num of lst) {\n    if (isPrime(num) && num > maxPrime) {\n      maxPrime = num;\n    }\n  }\n\n  // Return the sum of the digits of the largest prime value\n  return maxPrime.toString().split('').map(Number).reduce((a, b) => a + b);\n\n  function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n  if (Object.keys(dict).length === 0) {\n    return false; // Return False if the dictionary is empty\n  }\n\n  let allLower = true;\n  let allUpper = true;\n\n  Object.keys(dict).forEach((key) => {\n    if (!allLower && !allUpper) {\n      return; // If we've found a mix of case, we can stop checking\n    }\n    if (allLower && !key.toLowerCase().equals(key)) {\n      allLower = false;\n    } else if (allUpper && !key.toUpperCase().equals(key)) {\n      allUpper = false;\n    }\n  });\n\n  return allLower || allUpper; // Return True if all keys are in the same case, False otherwise\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    const num = parseFloat(value);\n    if (isNaN(num)) {\n        throw new Error(\"Invalid input: \" + value);\n    }\n    return Math.round(Math.abs(num));\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let pile = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) { // even level\n            pile.push(i * 2 + 2);\n        } else { // odd level\n            pile.push(i * 2 + 1);\n        }\n    }\n    return pile;\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  return s.split(/[\\s,]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    if (x > y) {\n        // Swap x and y if x is greater than y\n        let temp = x;\n        x = y;\n        y = temp;\n    }\n\n    for (let i = Math.max(x, 2); i <= Math.min(y, Infinity); i += 2) {\n        if (i >= x && i <= y) {\n            return i;\n        }\n    }\n\n    return -1; // No even number in the range [x, y]\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n  if (n > m) return -1;\n\n  const sum = (m + n) * (m - n + 1) / 2;\n  const avg = Math.round(sum / (m - n + 1));\n\n  return avg.toString(2);\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) { // i is even\n      result.push(factorial(i));\n    } else { // i is odd\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n\n  function factorial(n) {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str === new Reverse(str).toString()) { // check if the number is a palindrome\n      if (i % 2 === 0) { // check if the number is even\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}\n\nclass Reverse {\n  constructor(str) {\n    this.str = str;\n  }\n\n  toString() {\n    return this.str.split(\"\").reverse().join(\"\");\n  }\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    // If the array is empty, return True as per the problem statement\n    if (arr.length === 0) {\n        return true;\n    }\n    \n    // Initialize two pointers for the array\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left < right) {\n        // If the current left element is greater than the current right element,\n        // it means that we can't get a non-decreasing order by shifting.\n        if (arr[left] > arr[right]) {\n            return false;\n        }\n        \n        // Move to the next elements\n        left++;\n        right--;\n    }\n    \n    // If we are here, it means that we can get a non-decreasing order by shifting,\n    // so return True.\n    return true;\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n  // Check if all elements in lst1 are even\n  let allEven = true;\n  for (let num of lst1) {\n    if (num % 2 !== 0) {\n      allEven = false;\n      break;\n    }\n  }\n\n  // If not all elements are even, check if there are any odd numbers in lst2\n  if (!allEven) {\n    let hasOdd = false;\n    for (let num of lst2) {\n      if (num % 2 !== 0) {\n        hasOdd = true;\n        break;\n      }\n    }\n\n    // If there are no odd numbers in lst2, return \"YES\"\n    if (!hasOdd) {\n      return \"YES\";\n    } else {\n      // Otherwise, return \"NO\"\n      return \"NO\";\n    }\n  } else {\n    // If all elements in lst1 are even, return \"YES\" (no need to check lst2)\n    return \"YES\";\n  }\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  return [result, result === new Reverse(result).toString()];\n}\n\nclass Reverse {\n  constructor(str) {\n    this.str = str;\n  }\n\n  toString() {\n    let reversed = \"\";\n    for (let i = this.str.length - 1; i >= 0; i--) {\n      reversed += this.str[i];\n    }\n    return reversed;\n  }\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let rows = grid.length;\n    let cols = grid[0].length;\n    let waterCount = 0;\n\n    for (let i = 0; i < rows; i++) {\n        let bucketLevel = 0;\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                if (bucketLevel < capacity) {\n                    bucketLevel++;\n                } else {\n                    waterCount += bucketLevel - capacity + 1;\n                    bucketLevel = capacity;\n                }\n            }\n        }\n    }\n\n    return waterCount;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n  const words = s.split(/\\s+/);\n  const result = [];\n\n  for (const word of words) {\n    let consonants = 0;\n    for (const char of word.toLowerCase()) {\n      if (!['a', 'e', 'i', 'o', 'u'].includes(char)) {\n        consonants++;\n      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    return arr.slice(0,k).sort((a,b)=> b-a);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < Math.min(k, arr.length); i++) {\n        if ((arr[i] + '').length <= 2) {\n            sum += arr[i];\n        } else {\n            break;\n        }\n    }\n    return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n\n    if (start > end) return \"NO\"; // intervals do not intersect\n\n    let length = end - start + 1;\n    let isPrime = true;\n\n    for (let i = 2; i * i <= length; i++) {\n        if (length % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? \"YES\" : \"NO\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tribonacci(n) {\n    if (n === 0) return [3];\n    if (n === 1) return [1, 3];\n\n    const result = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        let sum = 0;\n        for (let j = 0; j < i; j++) {\n            if ((j % 2) === 0) sum += result[j + 1];\n            else sum += result[j - 1];\n        }\n        result.push(sum);\n    }\n    return result.slice(0, n + 1);\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    let product = 1;\n    for (let i = String(n).split(''); i.length > 0;) {\n        if (+i.pop() % 2 !== 0) {\n            product *= +i.pop();\n        }\n    }\n    return product;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n    let count = 0;\n    for (let char of string) {\n        if (char === '[') {\n            count++;\n        } else if (char === ']') {\n            if (count <= 0) return false;\n            count--;\n        }\n    }\n    return count > 0;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    return Math.round(Math.max(0, Math.ceil(lst.map(Number).map(x => x**2)).reduce((a,b)=> a+b, 0)));\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z]/.test(lastChar) && !/\\s/.test(txt.slice(0, -1));\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] <= arr[i - 1]) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  const negativeInts = lst.filter(x => x < 0);\n  const positiveInts = lst.filter(x => x > 0);\n\n  let a, b;\n  if (negativeInts.length > 0) {\n    [a] = negativeInts.sort((a, b) => b - a);\n  } else {\n    a = null;\n  }\n\n  if (positiveInts.length > 0) {\n    [b] = positiveInts.sort((a, b) => a - b);\n  } else {\n    b = null;\n  }\n\n  return [a, b];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n <= 0) {\n    throw new Error(\"n must be greater than 0\");\n  }\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) \n        if (!(n % i)) return false;\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    let result = [];\n    const words = sentence.split(' ');\n    for (const word of words) {\n        if (isPrime(word.length)) result.push(word);\n    }\n    return result.join(' ');\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n  // Parse the fractions into numerator and denominator values\n  const xNumerator = parseInt(x.split(\"/\")[0]);\n  const xDenominator = parseInt(x.split(\"/\")[1]);\n  const nNumerator = parseInt(n.split(\"/\")[0]);\n  const nDenominator = parseInt(n.split(\"/\")[1]);\n\n  // Calculate the product of the two fractions\n  const resultNumerator = xNumerator * nNumerator;\n  const resultDenominator = xDenominator * nDenominator;\n\n  // Check if the result is a whole number (i.e. the denominator is 1)\n  return resultDenominator === 1;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    if (!Array.isArray(nums)) {\n        return [];\n    }\n    nums.sort((a, b) => {\n        const sumA = a.toString().split('').reduce((acc, curr) => parseInt(curr) + acc, 0);\n        const sumB = b.toString().split('').reduce((acc, curr) => parseInt(curr) + acc, 0);\n        \n        if (sumA < sumB) return -1;\n        if (sumA > sumB) return 1;\n        \n        return nums.indexOf(a) - nums.indexOf(b);\n    });\n    \n    return nums;\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialfilter(nums) {\n    let count = 0;\n    for(let i = 0; i < nums.length; i++) {\n        if(Math.abs(nums[i]) > 10 && (nums[i] % 10) % 2 !== 0 && Math.floor(Math.abs(nums[i]) / 10) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2) {\n  const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n\n  const start = Math.min(index1, index2);\n  const end = Math.max(index1, index2);\n\n  let result = [];\n  for (let i = start + 1; i < end; i++) {\n    result.push(planets[i]);\n  }\n\n  return [ ...result.sort((a, b) => planets.indexOf(a) - planets.indexOf(b)) ];\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction isPrime(num) {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  let sum = 0;\n  for (let num of lst) {\n    if (typeof num === 'number' && !isNaN(num) && num >= 0 && Math.floor(num) === num) {\n      if (num % 2 !== 0) {\n        sum += num ** 2;\n      }\n    }\n  }\n  return sum;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "def strongest_extension(classname, extensions):\n    max_strength = -1\n    strongest_extension = ''\n    \n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n            \n    return f\"{classname}.{strongest_extension}\""}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  for (let i = 0; i < a.length; i++) {\n    let rotation = a.slice(i) + a.slice(0, i);\n    if (rotation.includes(b)) return true;\n  }\n  return false;\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    const romanMap = [\n        { value: 1000, numeral: \"M\" },\n        { value: 900, numeral: \"CM\" },\n        { value: 500, numeral: \"D\" },\n        { value: 400, numeral: \"CD\" },\n        { value: 100, numeral: \"C\" },\n        { value: 90, numeral: \"XC\" },\n        { value: 50, numeral: \"L\" },\n        { value: 40, numeral: \"XL\" },\n        { value: 10, numeral: \"X\" },\n        { value: 9, numeral: \"IX\" },\n        { value: 5, numeral: \"V\" },\n        { value: 4, numeral: \"IV\" },\n        { value: 1, numeral: \"I\" }\n    ];\n\n    let roman = \"\";\n    for (let i = 0; i < romanMap.length; i++) {\n        while (number >= romanMap[i].value) {\n            number -= romanMap[i].value;\n            roman += romanMap[i].numeral.toLowerCase();\n        }\n    }\n\n    return roman;\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // Calculate the square of each side\n    let aSquared = a * a;\n    let bSquared = b * b;\n    let cSquared = c * c;\n\n    // Check if one side is the hypotenuse (the side opposite the right angle)\n    if ((aSquared + bSquared === cSquared) || (aSquared + cSquared === bSquared) || (bSquared + cSquared === aSquared)) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char.match(/[a-zA-Z]/)) { // check if the character is a letter\n      result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "function stringToMd5(text) {\n  if (!text) return \"none\";\n  const crypto = require('crypto');\n  const md5sum = crypto.createHash('md5');\n  const hash = md5sum.update(text);\n  return hash.digest('hex').toUpperCase();\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    let result = [];\n    for (let i = Math.max(a, b); i >= Math.min(a, b); i--) {\n        let strI = i.toString();\n        for (let j = 0; j < strI.length; j++) {\n            if (+strI[j] % 2 === 0) result.push(+strI[j]);\n        }\n    }\n    return [...new Set(result)].sort((a, b) => a - b);\n}"}

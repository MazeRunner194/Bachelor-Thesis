{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function(operations: Array<number>): boolean {\n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) return true;\n    }\n    return false;\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: number[]): [number, number] {\n    let sum = 0;\n    let product = 1;\n\n    if (!numbers.length) {\n        return [0, 1];\n    }\n\n    numbers.forEach((num) => {\n        sum += num;\n        product *= num;\n    });\n\n    return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n  if (a.length !== b.length) {\n    throw new Error('Both strings must have the same length');\n  }\n\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    const bitA = parseInt(a[i], 2);\n    const bitB = parseInt(b[i], 2);\n    const xorBit = bitA ^ bitB;\n    result.push((xorBit).toString(2));\n  }\n\n  return result.join('');\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function(strings: Array<string>): any {\n    if (!strings.length) return null; // Return None in case the input list is empty\n    let maxLength = 0;\n    let longestStr = strings[0];\n    for (let str of strings) {\n        if (str.length > maxLength) {\n            maxLength = str.length;\n            longestStr = str;\n        }\n    }\n    return longestStr; // Return the first one in case of multiple strings of the same length\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n  if (b === 0) return a;\n  return greatest_common_divisor(b, a % b);\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sortNumbers = (numbers: string): string => {\n  const numMap = new Map<string, number>();\n  for (const num of numbers.split(' ')) {\n    switch (num) {\n      case 'zero':\n        numMap.set(num, 0);\n        break;\n      case 'one':\n        numMap.set(num, 1);\n        break;\n      case 'two':\n        numMap.set(num, 2);\n        break;\n      case 'three':\n        numMap.set(num, 3);\n        break;\n      case 'four':\n        numMap.set(num, 4);\n        break;\n      case 'five':\n        numMap.set(num, 5);\n        break;\n      case 'six':\n        numMap.set(num, 6);\n        break;\n      case 'seven':\n        numMap.set(num, 7);\n        break;\n      case 'eight':\n        numMap.set(num, 8);\n        break;\n      case 'nine':\n        numMap.set(num, 9);\n        break;\n    }\n  }\n\n  const sortedNums = Array.from(numMap.values()).sort((a, b) => a - b).map((num) => {\n    switch (num) {\n      case 0:\n        return 'zero';\n      case 1:\n        return 'one';\n      case 2:\n        return 'two';\n      case 3:\n        return 'three';\n      case 4:\n        return 'four';\n      case 5:\n        return 'five';\n      case 6:\n        return 'six';\n      case 7:\n        return 'seven';\n      case 8:\n        return 'eight';\n      case 9:\n        return 'nine';\n    }\n  });\n\n  return sortedNums.join(' ');\n};"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    return numbers.map((n) => (n - min) / (max - min));\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string) : string  {\n    return string0.split('').map((char, index) => {\n        if (char.charCodeAt(0) >= 'a'.charCodeAt(0) && char.charCodeAt(0) <= 'z'.charCodeAt(0)) {\n            // lowercase to uppercase\n            return String.fromCharCode('A' + (char.charCodeAt(0) - 'a'.charCodeAt(0)));\n        } else if (char.charCodeAt(0) >= 'A'.charCodeAt(0) && char.charCodeAt(0) <= 'Z'.charCodeAt(0)) {\n            // uppercase to lowercase\n            return String.fromCharCode('a' + (char.charCodeAt(0) - 'A'.charCodeAt(0)));\n        }\n        // Leave non-alphabet characters unchanged\n        return char;\n    }).join('');\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>) : Array<number>  {\n    return l.filter(n => n > 0);\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function(n: number): boolean {\n    if (n <= 1) return false;\n    if (n === 2 || n === 3) return true;\n    if (n % 2 === 0) return false;\n\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i === 0) return false;\n    }\n\n    return true;\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function(l: Array<number>): Array<number> {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import { isPrime, fibonacci } from 'mathjs';\n\nconst prime_fib = (n: number): number => {\n    let i = 0;\n    while (true) {\n        const fibNum = fibonacci(i);\n        if (isPrime(fibNum)) {\n            if (n === 1) return 2; // special case for n=1\n            if (--n === 0) return fibNum;\n        }\n        i++;\n    }\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>) : boolean {\n    l = l.filter(x => x !== 0); // Remove zeros from the list\n    let combinations = [];\n    \n    for(let i = 0; i < l.length; i++) { \n        for(let j = i + 1; j < l.length; j++) {\n            for(let k = j + 1; k < l.length; k++) {\n                if(l[i] + l[j] + l[k] === 0) {\n                    combinations.push([l[i], l[j], l[k]].sort((a, b) => a - b));\n                }\n            }\n        }\n    }\n\n    return combinations.some(([x, y, z]) => x !== y && y !== z); // Check if there are three distinct elements\n};\n\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n  const seen = new Set();\n  l.forEach((num) => {\n    if (seen.has(-num)) return true;\n    seen.add(num);\n  });\n  return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = (n: number): number => {\n  if (n < 0) throw new Error(\"Fibonacci index must be a non-negative integer\");\n  const table = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    table.push((table[i - 1] + table[i - 2] + table[i - 3] + table[i - 4]).toString());\n  }\n  return table[n];\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function <T extends Array<number>>(l: T): number {\n    l.sort((a, b) => a - b);\n    const middleIndex = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) { // even length\n        return (l[middleIndex] + l[middleIndex - 1]) / 2;\n    } else { // odd length\n        return l[middleIndex];\n    }\n};"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function(text: string): boolean {\n  let left = 0;\n  let right = text.length - 1;\n\n  while (left < right) {\n    if (text[left] !== text[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function(text: string): string {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function(l: Array<number>, t: number): boolean {\n    return l.every(num => num < t);\n};"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function(s0: string, s1: string): boolean {\n    if (s0.length !== s1.length) return false;\n\n    const charCounts = new Map<string, number>();\n    for (let c of s0) {\n        let count = charCounts.get(c);\n        if (!count) count = 0;\n        charCounts.set(c, count + 1);\n    }\n\n    for (let c of s1) {\n        let count = charCounts.get(c);\n        if (!count || count === 0) return false;\n        charCounts.set(c, count - 1);\n    }\n\n    return true;\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return b;\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function(l1: Array<number>, l2: Array<number>): Array<number> {\n    // Convert both arrays to sets for efficient operations\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    // Find the intersection of the two sets (common elements)\n    const commonElements = new Set([...set1].filter(x => set2.has(x)));\n\n    // Sort and return the unique common elements\n    return Array.from(commonElements).sort((a, b) => a - b);\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let maxPrimeFactor = 1; // Initialize with a trivial value\n  for (let i = 2; i * i <= n; i++) {\n    while (n % i === 0) {\n      maxPrimeFactor = i;\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    maxPrimeFactor = n; // If n is still greater than 1, it's a prime itself\n  }\n  return maxPrimeFactor;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function(xs: Array<number>): Array<number> {\n  const result = new Array(xs.length - 1);\n  for (let i = 1; i < xs.length; i++) {\n    result[i - 1] = xs[i] * i;\n  }\n  return result;\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function(n: number): number {\n  if (n <= 1) return 0;\n  if (n === 2) return 1;\n\n  let a = 0, b = 0, c = 1; // initial values\n  for (let i = 3; i <= n; i++) {\n    const temp = a + b + c; // next value in the sequence\n    a = b;\n    b = c;\n    c = temp;\n  }\n  return c;\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function(s: string): number {\n    let count = 0;\n    const vowels = 'aeiou';\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n        }\n    }\n    // Check for 'y' at the end of the word\n    if (s.toLowerCase().endsWith('y')) {\n        count++;\n    }\n    return count;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n  const frequencyMap: { [key: number]: number } = {};\n\n  for (const num of lst) {\n    if (!frequencyMap[num]) {\n      frequencyMap[num] = 1;\n    } else {\n      frequencyMap[num]++;\n    }\n  }\n\n  let maxMatch = -1;\n\n  for (const [num, freq] of Object.entries(frequencyMap)) {\n    if (+num > 0 && freq >= +num) {\n      maxMatch = Math.max(maxMatch, +num);\n    }\n  }\n\n  return maxMatch;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function(a: number, b: number, c: number): number {\n  if (!isValidTriangle(a, b, c)) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2; // semi-perimeter\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return Math.round(area * 100) / 100; // round to 2 decimal points\n};\n\nconst isValidTriangle = function(a: number, b: number, c: number): boolean {\n  const sides = [a, b, c];\n  sides.sort((a, b) => a - b);\n  return sides[0] + sides[1] > sides[2];\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function(q: Array<number>, w: number): boolean {\n  // Check if the array is balanced (palindromic)\n  const midIndex = Math.floor(q.length / 2);\n  const leftSum = q.slice(0, midIndex).reduce((a, b) => a + b, 0);\n  const rightSum = q.slice(midIndex + 1).reduce((a, b) => a + b, 0);\n  if (leftSum !== rightSum) return false;\n\n  // Check if the sum of elements is less than or equal to the maximum possible weight\n  const totalWeight = leftSum + rightSum;\n  if (totalWeight > w) return false;\n\n  // If both conditions are met, the object will fly\n  return true;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "function isMultiplyPrime(a: number): boolean {\n    let isPrime = function (n: number): boolean {\n        if (n <= 1) return false;\n        for (let i = 2, sqrt = Math.floor(Math.sqrt(n)); i <= sqrt; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    let primeFactors: number[] = [];\n    let n = a;\n\n    while (n > 1) {\n        for (let i = 2, sqrt = Math.floor(Math.sqrt(n)); i <= sqrt; i++) {\n            if (n % i === 0) {\n                primeFactors.push(i);\n                n /= i;\n                break;\n            }\n        }\n    }\n\n    return primeFactors.length === 3 && primeFactors.every(isPrime);\n}"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number) : string  {\n    return \"db\" + (decimal >>> 0).toString(2) + \"db\";\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function(s: string): boolean {\n  if (s.length < 3) return false; // not happy if length is less than 3\n  for (let i = 0; i <= s.length - 3; i++) { // iterate over the string, 3 characters at a time\n    const chunk = s.substring(i, i + 3);\n    if (!new Set(chunk).size === 3) return false; // check if all 3 chars are distinct\n  }\n  return true; // if we made it through the loop without finding any duplicates, string is happy\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n  return grades.map((gpa) => {\n    if (gpa >= 4.0) return 'A+';\n    else if (gpa > 3.7) return 'A';\n    else if (gpa > 3.3) return 'A-';\n    else if (gpa > 3.0) return 'B+';\n    else if (gpa > 2.7) return 'B';\n    else if (gpa > 2.3) return 'B-';\n    else if (gpa > 2.0) return 'C+';\n    else if (gpa > 1.7) return 'C';\n    else if (gpa > 1.3) return 'C-';\n    else if (gpa > 1.0) return 'D+';\n    else if (gpa > 0.7) return 'D';\n    else if (gpa >= 0.0) return 'D-';\n    else return 'E';\n  });\n};"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const prime_length = function(string0: string): boolean {\n    const strLength = string0.length;\n    \n    let isPrime = true;\n    \n    for (let i = 2, max = Math.sqrt(strLength); i <= max; i++) {\n        if (strLength % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    \n    return isPrime;\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n  let sum = 0;\n  let binStr = N.toString(2); // Convert to binary string\n  for (let i = 0; i < binStr.length; i++) {\n    if (binStr[i] === '1') {\n      sum += parseInt(binStr[i], 10); // Add 1s to the sum\n    }\n  }\n  return `${sum}`; // Return as a string\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const getRow = function(lst: Array<Array<number>>, x: number): Array<{ row: number, column: number }> {\n    const result: { row: number; column: number }[] = [];\n\n    // Sort rows by length in descending order\n    lst.sort((a, b) => b.length - a.length);\n\n    for (let i = 0; i < lst.length; i++) {\n        let row = i;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push({ row: row, column: j });\n            }\n        }\n    }\n\n    return result;\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): any | null {\n  if (lst.length === 0) return null; // or undefined, depending on your preference\n  lst.sort((a, b) => a - b); // sort the array in ascending order\n\n  const firstSmallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > firstSmallest) return lst[i]; // found the 2nd smallest element\n  }\n  return null; // no 2nd smallest element, all elements are the same\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function(S: string): number {\n  let boredomCount = 0;\n  const sentences = S.split(/[.?!]+/);\n\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"I\")) {\n      boredomCount++;\n    }\n  }\n\n  return boredomCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "function skjkasdkd(lst: Array<number>): number {\n    // Filter out non-prime numbers and find the largest one\n    const largestPrime = lst.filter(n => isPrime(n)).reduce((max, current) => current > max ? current : max, 0);\n\n    // Calculate the sum of digits of the largest prime\n    let sumOfDigits = 0;\n    while (largestPrime > 0) {\n        sumOfDigits += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime / 10);\n    }\n\n    return sumOfDigits;\n}\n\n// Helper function to check if a number is prime\nfunction isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    if (dict.size === 0) return false; // empty dictionary returns False\n\n    const allLowerCase = dict.every(([key, _]) => /^[a-z]+$/.test(key));\n    const allUpperCase = dict.every(([key, _]) => /^[A-Z]+$/.test(key));\n\n    return allLowerCase || allUpperCase;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "import { round } from 'mathjs';\n\nconst closestInteger = (value: string): number => {\n  const numValue = parseFloat(value);\n  if (isNaN(numValue)) {\n    throw new Error(`Invalid input: ${value}`);\n  }\n\n  return Math.abs(numValue) < 0.5 ? Math.round(numValue) : numValue > 0 ? Math.ceil(numValue) : Math.floor(numValue);\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function(n: number): Array<number> {\n  const pile: number[] = [];\n  let levelCount = n;\n\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) { // even level\n      pile.push(levelCount);\n      levelCount += 1;\n    } else { // odd level\n      pile.push(levelCount);\n      levelCount += 2;\n    }\n  }\n\n  return pile;\n};\n\nconsole.log(make_a_pile(3)); // [3, 5, 7]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function(s: string): Array<string> {\n  return s.split(/[ ,]+/g);\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function(x: number, y: number): number {\n  if (x > y) return -1;\n  let maxEven = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && i > maxEven) {\n      maxEven = i;\n    }\n  }\n  return maxEven;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any {\n  if (n > m) return -1;\n\n  const sum = Math.floor((m + n) / 2) * (m - n + 1);\n  const average = Math.round(sum / (m - n + 1));\n  const binary = average.toString(2);\n\n  return `0b${binary}`;\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    const result: Array<number> = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) { // even index\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else { // odd index\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    return result;\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function(n: number): [number, number] {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        let isPalindrome = true;\n        let reversed = i.toString().split('').reverse().join('');\n        if (i.toString() !== reversed) {\n            isPalindrome = false;\n        }\n        if (isPalindrome && i % 2 === 0) {\n            evenCount++;\n        } else if (isPalindrome) {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>): boolean {\n  if (!arr.length) return true; // empty array, always possible to sort\n\n  const minVal = Math.min(...arr); // find the smallest value in the array\n  let rightShifts = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= minVal) { // if the current element is not smaller than the smallest value\n      return false; // impossible to sort by shifting\n    }\n    rightShifts++; // increment the number of shifts needed to move the smallest value to the front\n  }\n\n  return true; // we can always shift the array to get a sorted order\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function <T>(lst1: T[], lst2: T[]): string {\n  const evenCount = lst1.filter(x => x % 2 === 0).length;\n  return evenCount === lst1.length ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function(s: string, c: string): [string, boolean] {\n    const result = s.split('').filter(char => !c.includes(char)).join('');\n    \n    return [result, result === (result + '').split('').reverse().join('')];\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nfunction max_fill(grid: Array<Array<number>>, capacity: number): number {\n  let totalWater = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        totalWater += 1;\n      }\n    }\n  }\n\n  let bucketTrips = Math.ceil(totalWater / capacity);\n  return bucketTrips;\n}"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function(s: string, n: number): Array<string> {\n    let result: Array<string> = [];\n    let currentWord: string = '';\n    let consonantsInCurrentWord: number = 0;\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n\n        if (char.match(/[a-zA-Z]/)) { // Check if the character is a letter\n            currentWord += char;\n\n            if (!['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase())) { // Check if the character is a consonant\n                consonantsInCurrentWord++;\n            } else {\n                consonantsInCurrentWord = 0;\n            }\n\n            if (consonantsInCurrentWord === n) {\n                result.push(currentWord);\n                currentWord = '';\n                consonantsInCurrentWord = 0;\n            }\n        } else { // If the character is not a letter, it's a space\n            if (consonantsInCurrentWord >= n && currentWord !== '') {\n                result.push(currentWord);\n                currentWord = '';\n                consonantsInCurrentWord = 0;\n            }\n\n            currentWord = '';\n            consonantsInCurrentWord = 0;\n        }\n    }\n\n    // Add the last word to the result if it's not empty\n    if (currentWord !== '') {\n        if (consonantsInCurrentWord >= n) {\n            result.push(currentWord);\n        }\n    }\n\n    return result;\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n  return arr.slice().sort((a, b) => b - a).slice(0, k);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const addElements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    for (let i = 0; i < Math.min(k, arr.length); i++) {\n        const element = arr[i];\n        if (element.toString().length <= 2) {\n            sum += element;\n        }\n    }\n    return sum;\n};\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(addElements(arr, k)); // Output: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function (interval1: [number, number], interval2: [number, number]): string {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  let intersectionStart = Math.max(start1, start2);\n  let intersectionEnd = Math.min(end1, end2);\n\n  if (intersectionStart > intersectionEnd) return \"NO\"; // No intersection\n\n  let intersectionLength = intersectionEnd - intersectionStart + 1;\n  \n  const isPrime = (n: number): boolean => {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  if (isPrime(intersectionLength)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n  if (n === 0) return [3]; // base case for n=0\n  const result = [3, 1]; // initialize the sequence with [3, 1]\n  \n  for (let i = 2; i <= n; i++) {\n    let triNum;\n    if (i % 2 === 0) { // even index\n      triNum = 1 + i / 2;\n    } else { // odd index\n      const prevTriNums = result.slice(i - 2, i);\n      triNum = prevTriNums[0] + prevTriNums[1] + (i % 2 === 1 ? result[i - 1] : result[i]);\n    }\n    result.push(triNum);\n  }\n  \n  return result;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n    let product = 1;\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 !== 0) { // check if digit is odd\n            product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return product;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n  const stack: number[] = [];\n\n  for (let i = 0; i < string0.length; i++) {\n    if (string0[i] === '[') {\n      stack.push(i);\n    } else if (string0[i] === ']') {\n      if (stack.length > 1) return true;\n      if (stack.length === 1 && stack[0] !== i - 1) return true; // check for nested '[]'\n      stack.pop();\n    }\n  }\n\n  return false;\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function(lst: Array<number>): number {\n    return Math.round(Math.max(...lst).toFixed(0)) ** 2;\n};"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function(txt: string): boolean {\n  // Remove trailing whitespace from the input string\n  txt = txt.trim();\n\n  // Check if the last character is an alphabetical character and is not part of a word\n  const lastChar = txt[txt.length - 1];\n  return /^[a-zA-Z]$/.test(lastChar);\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= arr[i - 1]) return i;\n  }\n  return -1;\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>) : Array<any>  {\n    let maxNegative = null;\n    let minPositive = null;\n\n    for (let i of lst) {\n        if (i < 0 && (!maxNegative || i > maxNegative)) {\n            maxNegative = i;\n        }\n        else if (i > 0 && (!minPositive || i < minPositive)) {\n            minPositive = i;\n        }\n    }\n\n    return [maxNegative, minPositive];\n}"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n  if (n <= 0) {\n    throw new Error(\"Brazilian factorial only defined for n > 0\");\n  }\n\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= factorial(i);\n  }\n  return result;\n};\n\nconst factorial = function (n: number): number {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "function wordsInSentence(sentence: string): string {\n    const words = sentence.split(' ');\n    let result = '';\n\n    for (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length)) {\n            result += words[i] + ' ';\n        }\n    }\n\n    return result.trim();\n}\n\nfunction isPrime(n: number): boolean {\n    if (n <= 1) return false;\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n        if ((n % i) === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string): boolean {\n    const [xNumerator, xDenominator] = x.split('/');\n    const [nNumerator, nDenominator] = n.split('/');\n\n    if (+xDenominator !== 1 || +nDenominator !== 1) {\n        throw new Error('Invalid fraction format');\n    }\n\n    const denominator = +xDenominator * +nDenominator;\n    const numerator = (+xNumerator * +nDenominator) - (+xDenominator * +nNumerator);\n\n    return Math.abs(numerator / denominator) === 1;\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function(nums: Array<number>): Array<number> {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split(\"\").reduce((acc, curr) => acc + parseInt(curr), 0);\n    const sumB = b.toString().split(\"\").reduce((acc, curr) => acc + parseInt(curr), 0);\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA - sumB;\n    }\n  });\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    let count = 0;\n    for (let num of nums) {\n        if (Math.abs(num) > 10 && isOddFirstAndLastDigit(num)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nfunction isOddFirstAndLastDigit(n: number): boolean {\n    const str = String(Math.abs(n));\n    return parseInt(str[0]) % 2 !== 0 && parseInt(str[str.length - 1]) % 2 !== 0;\n}"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function(n: number): number {\n    let a: number[] = new Array(n);\n    let count: number = 0;\n    \n    for(let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n    \n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k <= n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nconst bf = (planet1: string, planet2: string): Array<string> => {\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n\n  const result: string[] = [];\n  for (let i = Math.max(index1 - 1, 0); i <= Math.min(index2 + 1, planets.length - 1); i++) {\n    result.push(planets[i]);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number): number {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nfunction isPrime(num: number): boolean {\n  if (num <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function(lst: Array<number>): number {\n  let sumOfSquares = 0;\n  for (let num of lst) {\n    if (typeof num === 'number' && !isNaN(num) && num >= 0 && num % 1 === 0) {\n      if (num % 2 !== 0) {\n        sumOfSquares += num ** 2;\n      }\n    }\n  }\n  return sumOfSquares * 2;\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>) : string {\n    let strongest_extension = null;\n    let strongest_strength = -Infinity;\n\n    for(let extension of extensions) {\n        let upper_case_count = 0;\n        let lower_case_count = 0;\n\n        for(let char of extension) {\n            if(char.toUpperCase() === char) {\n                upper_case_count++;\n            } else if(char.toLowerCase() === char) {\n                lower_case_count++;\n            }\n        }\n\n        let strength = upper_case_count - lower_case_count;\n\n        if(strength > strongest_strength) {\n            strongest_extension = extension;\n            strongest_strength = strength;\n        }\n    }\n\n    return class_name + '.' + strongest_extension;\n};"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = (a: string, b: string): boolean => {\n  if (!b) return false; // edge case: empty string\n\n  for (let i = 0; i < a.length; i++) {\n    const rotatedB = b.slice() + b; // rotate the second word\n    for (let j = 0; j <= a.length - b.length; j++) { // check all possible substrings in the first word\n      if (rotatedB.indexOf(a.substring(j, j + b.length)) !== -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const romanNumerals = [\n  { value: 1000, numeral: 'M' },\n  { value: 900, numeral: 'CM' },\n  { value: 500, numeral: 'D' },\n  { value: 400, numeral: 'CD' },\n  { value: 100, numeral: 'C' },\n  { value: 90, numeral: 'XC' },\n  { value: 50, numeral: 'L' },\n  { value: 40, numeral: 'XL' },\n  { value: 10, numeral: 'X' },\n  { value: 9, numeral: 'IX' },\n  { value: 5, numeral: 'V' },\n  { value: 4, numeral: 'IV' },\n  { value: 1, numeral: 'I' }\n];\n\nconst int_to_mini_roman = function (number0: number): string {\n  if (number0 < 1 || number0 > 1000) {\n    throw new Error('Number out of range');\n  }\n\n  const result = [];\n  for (let i = 0; i < romanNumerals.length; i++) {\n    while (number0 >= romanNumerals[i].value) {\n      result.push(romanNumerals[i].numeral);\n      number0 -= romanNumerals[i].value;\n    }\n  }\n\n  return result.join('').toLowerCase();\n};"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // Check if any two sides are equal to each other. If true, it's not a triangle.\n    if ((a === b) || (a === c) || (b === c)) return false;\n\n    // Check if the square of one side is equal to the sum of squares of the other two sides minus twice their product.\n    const sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function(s: string): string {\n    let result = '';\n    let reverse = false;\n\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (!isNaN(parseInt(s[i], 10))) { // Check if character is a number\n            result += s[i];\n        } else {\n            const char = s[i].toLowerCase();\n            result += reverse ? char.toUpperCase() : char;\n            reverse = !reverse;\n        }\n    }\n\n    return result;\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function(text: string): any | null {\n    if (!text || text.length === 0) {\n        return null;\n    }\n    \n    const hash = crypto.createHash('md5');\n    const encodedText = Buffer.from(text, 'utf8');\n    hash.update(encodedText);\n    const md5Value = hash.digest('hex');\n\n    return md5Value;\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n  const result: number[] = [];\n  for (let i = Math.max(a, b); i >= Math.min(a, b); i--) {\n    const str = i.toString();\n    for (let j = 0; j < str.length; j++) {\n      if (+str[j] % 2 === 0) { // Check if the digit is even\n        result.push(+str[j]);\n      }\n    }\n  }\n  return [...new Set(result)].sort((a, b) => a - b); // Remove duplicates and sort\n};"}

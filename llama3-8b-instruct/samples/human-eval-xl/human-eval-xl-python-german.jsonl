{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0  # initialize balance to 0\n    for op in operations:\n        balance += op  # update balance with each operation\n        if balance < 0:  # check if balance is negative\n            return True  # if yes, return True\n    return False  # if no, return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Return a tuple containing the sum and product of all numbers in the input list.\"\"\"\n    \n    # Initialize sum and product to 0 and 1, respectively\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the input list\n    for num in numbers:\n        # Add the current number to the sum\n        total_sum += num\n        \n        # Multiply the current number with the product\n        total_product *= num\n    \n    # If the input list is empty, return (0, 1) as specified\n    if not numbers:\n        return 0, 1\n    \n    # Otherwise, return the sum and product\n    return total_sum, total_product"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_length = 0\n    result = None\n    \n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    \n    return result"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of two integers a and b.\"\"\"\n    \n    # If b is zero, the GCD is simply a\n    if b == 0:\n        return a\n    \n    # Otherwise, recursively call the function with b and the remainder of a divided by b\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\nimport re\n\ndef sort_numbers(numbers: str) -> str:\n    # Split input string into a list of numbers using regular expressions\n    number_list = re.split(r'\\s+', numbers)\n\n    # Replace German numbers with English numbers for comparison\n    for i in range(len(number_list)):\n        if number_list[i] == 'null':\n            number_list[i] = '0'\n        elif number_list[i] == 'eins':\n            number_list[i] = '1'\n        elif number_list[i] == 'zwei':\n            number_list[i] = '2'\n        elif number_list[i] == 'drei':\n            number_list[i] = '3'\n        elif number_list[i] == 'vier':\n            number_list[i] = '4'\n        elif number_list[i] == 'f\u00fcnf':\n            number_list[i] = '5'\n        elif number_list[i] == 'sechs':\n            number_list[i] = '6'\n        elif number_list[i] == 'sieben':\n            number_list[i] = '7'\n        elif number_list[i] == 'acht':\n            number_list[i] = '8'\n        elif number_list[i] == 'neun':\n            number_list[i] = '9'\n\n    # Sort the list of numbers\n    sorted_numbers = sorted(number_list)\n\n    # Replace English numbers with German numbers for output\n    for i in range(len(sorted_numbers)):\n        if sorted_numbers[i] == '0':\n            sorted_numbers[i] = 'null'\n        elif sorted_numbers[i] == '1':\n            sorted_numbers[i] = 'eins'\n        elif sorted_numbers[i] == '2':\n            sorted_numbers[i] = 'zwei'\n        elif sorted_numbers[i] == '3':\n            sorted_numbers[i] = 'drei'\n        elif sorted_numbers[i] == '4':\n            sorted_numbers[i] = 'vier'\n        elif sorted_numbers[i] == '5':\n            sorted_numbers[i] = 'f\u00fcnf'\n        elif sorted_numbers[i] == '6':\n            sorted_numbers[i] = 'sechs'\n        elif sorted_numbers[i] == '7':\n            sorted_numbers[i] = 'sieben'\n        elif sorted_numbers[i] == '8':\n            sorted_numbers[i] = 'acht'\n        elif sorted_numbers[i] == '9':\n            sorted_numbers[i] = 'neun'\n\n    # Join the sorted list of numbers into a string\n    result = ' '.join(sorted_numbers)\n\n    return result"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    return list(set(sorted(l)))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Generate the nth Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Find the n-th number that is both a Fibonacci number and a prime number.\"\"\"\n    i = 0\n    while True:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            if i == n - 1:\n                return fib\n            i += 1"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    l = set(l)\n    for a in l:\n        for b in l:\n            if a == b:\n                continue\n            for c in l:\n                if a == c or b == c:\n                    continue\n                if a + b + c == 0:\n                    return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = d, a+b+c, b+c, c\n    return d"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:  # odd length\n        return l[n // 2]\n    else:  # even length\n        mid1 = l[n // 2 - 1]\n        mid2 = l[n // 2]\n        return (mid1 + mid2) / 2"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    return text.lower() == text.lower()[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    return all(x <= t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Addiere zwei Zahlen x und y.\"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return the sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n, assuming n > 1 and not prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs[1:], 1)]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n < 0:\n        raise ValueError(\"n muss gr\u00f6\u00dfer oder gleich 0 sein\")\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    \n    return c"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    s = s.lower()  # Convert to lowercase for easy comparison\n    count = 0  # Initialize vowel count\n    \n    # Check if 'y' is at the end of the word, and only count it as a vowel in this case\n    if len(s) > 0 and s[-1] == 'y':\n        if not (s[:-1].isalpha() and s[:-1].islower()):\n            count += 1\n    \n    # Count all other vowels\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    \n    return count\n\nprint(vowels_count(\"abcde\"))  # Should print: 2\nprint(vowels_count(\"ACEDY\"))  # Should print: 3"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    max_num = -1\n    for num in set(lst):  # Iterate over unique numbers in the list\n        if lst.count(num) >= num:  # Check if frequency of number is greater than or equal to itself\n            max_num = num  # Update maximum number if condition is met\n    return max_num"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        # Heron's formula to calculate the area of a triangle\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    if q == q[::-1]:  # check if the list is palindromic\n        return sum(q) <= w  # check if the sum of the elements is less than or equal to w\n    else:\n        return False  # not balanced, so won't fly"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for p1 in range(2, a+1):\n        if is_prime(p1):\n            for p2 in range(p1, (a // p1) + 1):\n                if is_prime(p2) and p1 * p2 <= a:\n                    for p3 in range(p2, (a // (p1 * p2)) + 1):\n                        if is_prime(p3) and p1 * p2 * p3 == a:\n                            return True\n    return False"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g >= 4.0:\n            letter_grades.append('A+')\n        elif g > 3.7:\n            letter_grades.append('A')\n        elif g > 3.3:\n            letter_grades.append('A-')\n        elif g > 3.0:\n            letter_grades.append('B+')\n        elif g > 2.7:\n            letter_grades.append('B')\n        elif g > 2.3:\n            letter_grades.append('B-')\n        elif g > 2.0:\n            letter_grades.append('C+')\n        elif g > 1.7:\n            letter_grades.append('C')\n        elif g > 1.3:\n            letter_grades.append('C-')\n        elif g > 1.0:\n            letter_grades.append('D+')\n        elif g > 0.7:\n            letter_grades.append('D')\n        elif g > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(s):\n    length = len(s)\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(length)"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if any(val == x for val in row):\n            for j, val in reversed(list(enumerate(row))):\n                if val == x:\n                    result.append((i, j))\n    return sorted(result)"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if not lst:  # if the list is empty\n        return None\n    lst.sort()  # sort the list in ascending order\n    for i, x in enumerate(lst):\n        if i > 0 and x < lst[i-1]:  # check if we've found the second smallest\n            return x\n    return None  # if no second smallest was found, return None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    bored_count = 0\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    for sentence in sentences:\n        if sentence and sentence.startswith('I'):\n            bored_count += 1\n    return bored_count"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    sum_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_digits"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    \n    return all_upper or all_lower"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    value = float(value)\n    if value.is_integer():\n        return int(value)\n    else:\n        if value % 2 == 0:  # if the decimal part is even\n            return int(value + 0.5) if value > 0 else int(value - 0.5)\n        else:  # if the decimal part is odd\n            return int(value + 1) if value > 0 else int(value - 1)"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    result = []\n    count = n\n    while count > 0:\n        if n % 2 == 1:  # if n is odd, next layer has one more stone\n            result.append(count)\n            count += 2\n        else:  # if n is even, next layer has two fewer stones\n            result.append(count - 2)\n            count -= 2\n    return result"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return min(y, max(x, min(y-1, (x+y)//2) + 1))\n    else:\n        for i in range(max(x, y)):\n            if i % 2 == 0:\n                if i >= x and i <= y:\n                    return i\n        return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # empty array\n        return True\n\n    sorted = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            sorted = False\n            break\n\n    return sorted"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    if odd_count > len(lst2) - odd_count:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    new_s = ''.join([x for x in s if x not in c])\n    return (new_s, new_s == new_s[::-1])"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    filled_buckets = min(total_water // capacity, len(grid))\n    return total_water - filled_buckets * capacity"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word if c.isalpha() and not c.lower().endswith(('a', 'e', 'i', 'o', 'u'))]) == n:\n            result.append(word)\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    start = max(min(interval1[0], interval2[0]), min(min(interval1[1], interval2[1]), key=lambda x:abs(x)))\n    end = min(max(interval1[0], interval2[0]), max(max(interval1[1], interval2[1]), key=lambda x:abs(x)))\n    \n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n == 0:\n        return []\n\n    result = [1]\n\n    while len(result) <= n:\n        if len(result) % 2 == 0:\n            next_value = 1 + (len(result) // 2)\n        else:\n            next_value = sum(result[-2:])\n        result.append(next_value)\n\n    return result"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:  # check if the digit is odd\n            product *= int(digit)\n    return product"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False  # unmatched closing bracket\n            stack.pop()\n    return len(stack) > 0  # check if there are still open brackets left"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x ** 2) for x in lst)"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # empty string\n        return False\n    last_char = txt[-1].lower()  # get the last character and convert to lowercase\n    if not txt.replace(\" \", \"\").endswith(last_char):  # check if the last char is part of a word\n        return True\n    return False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [x for x in lst if isinstance(x, int) and x < 0]\n    pos_ints = [x for x in lst if isinstance(x, int) and x > 0]\n\n    a = max(neg_ints) if neg_ints else None\n    b = min(pos_ints) if pos_ints else None\n\n    return (a, b)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    result = []\n    for word in sentence.split():\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/66", "language": "python", "completion": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef simplify(x, n):\n    x = list(map(int, x.split('/')))\n    n = list(map(int, n.split('/')))\n\n    common_divisor = gcd(x[0], x[1]) * gcd(n[0], n[1])\n    denominator_x = x[1] // common_divisor\n    denominator_n = n[1] // common_divisor\n\n    return str(x[0] // common_divisor) + '/' + str(denominator_x) == str(n[0] // common_divisor) + '/' + str(denominator_n)"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    return sorted((num, sum(int(digit)) for num in nums), key=lambda x: (x[1], nums.index(x[0])))"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and (num % 10) % 2 != 0 and (abs(num) % 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                triplet_sum = a[i] + a[j] + a[k]\n                if triplet_sum % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planet_distances = {\n        \"Mercury\": 0.39,\n        \"Venus\": 0.72,\n        \"Earth\": 1.00,\n        \"Mars\": 1.52,\n        \"Jupiter\": 5.20,\n        \"Saturn\": 9.53,\n        \"Uranus\": 19.18,\n        \"Neptune\": 30.06\n    }\n\n    if planet1 not in planet_distances or planet2 not in planet_distances:\n        return ()\n\n    dist1 = planet_distances[planet1]\n    dist2 = planet_distances[planet2]\n\n    if dist1 > dist2:\n        return ()\n\n    result = []\n    for planet, distance in sorted(planet_distances.items()):\n        if (distance >= dist1 and distance <= dist2) or (dist1 >= dist2):\n            result.append(planet)\n\n    return tuple(result)"}
{"task_id": "python/71", "language": "python", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    if not lst: \n        return 0\n    \n    result = sum([x ** 2 for x in lst if isinstance(x, int) and x % 2 != 0])\n    \n    return result"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = 0\n    \n    for extension in extensions:\n        capital_letters = sum(1 for char in extension if char.isupper())\n        small_letters = len(extension) - capital_letters\n        \n        strength = capital_letters - small_letters\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n            \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.startswith(b[i:] + b[:i]):\n            return True\n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n\n    result = \"\"\n\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    return ''.join(reversed(result))"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:  # check if text is an empty string\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]"}

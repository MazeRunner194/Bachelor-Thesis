{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n  let balance = 0;\n  for (const operation of operations) {\n    balance += operation;\n    if (balance < 0) {\n      return true; // Guthaben des Kontos unter Null f\u00e4llt\n    }\n  }\n  return false; // Guthaben bleibt immer positiv oder null\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    let sum = 0;\n    let product = 1;\n\n    for (let num of numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n  return a.split('').map((x, i) => (x ^ b[i % b.length]) + '').join('');\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n  if (strings.length === 0) return null;\n  let maxLength = 0;\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    const str = strings[i];\n    if (str.length > maxLength) {\n      maxLength = str.length;\n      longestString = str;\n    }\n  }\n  return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n  const numMap = {\n    null: 0,\n    eins: 1,\n    zwei: 2,\n    drei: 3,\n    vier: 4,\n    f\u00fcnf: 5,\n    sechs: 6,\n    sieben: 7,\n    acht: 8,\n    neun: 9\n  };\n\n  const sortedNumbers = numbers.split(' ').map(word => {\n    return Object.keys(numMap).find(key => numMap[key] === parseInt(word.replace(/\\D+/,'')));\n  }).filter(Boolean).sort((a, b) => numMap[a] - numMap[b]).join(' ');\n\n  return sortedNumbers;\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    return numbers.map(x => (x - min) / (max - min));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  return string.split(\"\").map(function(c) {\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();\n  }).join(\"\");\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n  return l.filter(num => num > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n  if (n <= 1) return false; // 0 and 1 are not prime\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) return false; // if n is divisible by any number between 2 and sqrt(n), it's not prime\n  }\n  return true; // if we reached this point, n is likely a prime number\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n  return [...new Set(l)].sort((a, b) => a - b);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function primeFib(n) {\n    let a = 0, b = 1;\n    let count = 0;\n\n    while(true) {\n        if(isPrime(b)) {\n            if(count === n - 1) {\n                return b;\n            }\n            count++;\n        }\n        [a, b] = [b, a + b];\n    }\n}\n\nfunction isPrime(num) {\n    if(num < 2) return false;\n    for(let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n        if(num % i === 0) return false;\n    }\n    return true;\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "def triples_sum_to_zero(lst):\n    seen = set()\n    for num in lst:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n  const seen = {};\n  for (const num of l) {\n    if (seen[num]) return true;\n    seen[-num] = num; // store the negative as key and positive as value\n  }\n  return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n  const dp = [0, 0, 2, 0]; // base cases: 0, 0, 2, 0\n  for (let i = 4; i <= n; i++) {\n    let sum = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4];\n    dp.push(sum);\n  }\n  return dp[n];\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sorted.length / 2);\n\n  if (sorted.length % 2 === 0) { // even number of elements\n    return (sorted[middleIndex] + sorted[middleIndex - 1]) / 2;\n  } else { // odd number of elements\n    return sorted[middleIndex];\n  }\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n  const cleanedText = text.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n  return cleanedText === cleanedText.split('').reverse().join('');\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n  return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n  return l.every(x => x < t);\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n  return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n  const set0 = new Set(s0);\n  const set1 = new Set(s1);\n\n  return set0.size === set1.size && [...set0].every(c => set1.has(c));\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  \n  const commonElements = [...set1].filter(element => set2.has(element));\n  \n  return commonElements;\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n  let maxFactor = 1;\n  for (let i = 2; i * i <= n; i++) {\n    while (n % i === 0) {\n      maxFactor = i;\n      n /= i;\n    }\n  }\n  return maxFactor;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n  const result = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(i * xs[i] * Math.pow(1, i - 1));\n  }\n  return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n  if (n <= 1) return 0; // base cases\n  if (n === 2) return 1;\n\n  let a = 0, b = 0, c = 1;\n  for (let i = 3; i <= n; i++) {\n    const fibfib_i = a + b + c;\n    a = b;\n    b = c;\n    c = fibfib_i;\n  }\n  return c;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    let count = 0;\n    s = s.toLowerCase();\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            count++;\n        } else if (s[i] === 'y' && i === s.length - 1) {\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n  const freqMap = {};\n  for (const num of lst) {\n    if (!freqMap[num]) {\n      freqMap[num] = 0;\n    }\n    freqMap[num]++;\n  }\n\n  let maxNum = -1;\n  for (let num in freqMap) {\n    if (+num > 0 && freqMap[num] >= +num) {\n      maxNum = +num;\n      break;\n    }\n  }\n\n  return maxNum;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n  // Check if the three sides form a valid triangle\n  if ((a + b) <= c || (a + c) <= b || (b + c) <= a) {\n    return -1; // Not a valid triangle\n  }\n\n  // Calculate the semi-perimeter of the triangle\n  const s = (a + b + c) / 2;\n\n  // Calculate the area using Heron's formula\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n  return Math.round(area * 100) / 100; // Round to 2 decimal places\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n  // Check if the list is palindromic (i.e., symmetric)\n  const isPalindromic = q.join('') === q.join('').split('').reverse().join('');\n  \n  // Check if the sum of the elements is less than or equal to the maximum weight\n  const sumOfElements = q.reduce((acc, current) => acc + current, 0);\n  const isWithinWeightLimit = sumOfElements <= w;\n  \n  return isPalindromic && isWithinWeightLimit;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n  const primeFactors = [];\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    while (a % i === 0) {\n      primeFactors.push(i);\n      a /= i;\n    }\n  }\n  if (a > 1) {\n    primeFactors.push(a);\n  }\n  return primeFactors.length === 3 && allPrimes(primeFactors);\n}\n\nfunction allPrimes(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    if (!isPrime(arr[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isPrime(n) {\n  if (n <= 1) return false;\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  return 'db' + (decimal.toString(2)).padStart((Math.ceil(Math.log2(decimal)) + 1).toString()) + 'db';\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n  if (s.length < 3) return false; // String too short, can't be happy\n\n  for (let i = 0; i < s.length - 2; i++) { // Loop through the string\n    let group = s.substring(i, i + 3); // Get a group of 3 characters\n    let seen = new Set(); // Keep track of unique groups\n    for (let j = 0; j < s.length - 2; j++) {\n      if (s.substring(j, j + 3) === group) { // Found duplicate group\n        return false;\n      }\n      if (!seen.has(s.substring(j, j + 3))) { // New group, add to set\n        seen.add(s.substring(j, j + 3));\n      } else {\n        break; // No duplicates found, move on\n      }\n    }\n  }\n\n  return true; // All checks passed, string is happy!\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n  const letterGrades = [];\n  for (let g of grades) {\n    let letterGrade;\n    if (g >= 4.0) {\n      letterGrade = 'A+';\n    } else if (g > 3.7) {\n      letterGrade = 'A';\n    } else if (g > 3.3) {\n      letterGrade = 'A-';\n    } else if (g > 3.0) {\n      letterGrade = 'B+';\n    } else if (g > 2.7) {\n      letterGrade = 'B';\n    } else if (g > 2.3) {\n      letterGrade = 'B-';\n    } else if (g > 2.0) {\n      letterGrade = 'C+';\n    } else if (g > 1.7) {\n      letterGrade = 'C';\n    } else if (g > 1.3) {\n      letterGrade = 'C-';\n    } else if (g > 1.0) {\n      letterGrade = 'D+';\n    } else if (g > 0.7) {\n      letterGrade = 'D';\n    } else if (g > 0.0) {\n      letterGrade = 'D-';\n    } else {\n      letterGrade = 'E';\n    }\n    letterGrades.push(letterGrade);\n  }\n  return letterGrades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n  let length = string.length;\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n  let sum = 0;\n  let binarySum = '';\n\n  while (n > 0) {\n    sum += n % 10; // add current digit to sum\n    n = Math.floor(n / 10); // move to next digit\n\n    // convert sum to binary and update binarySum\n    if (sum > 1) {\n      binarySum = sum.toString(2);\n    } else {\n      binarySum += sum ? '1' : '0';\n    }\n    sum = 0; // reset for next iteration\n  }\n\n  return binarySum;\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([(i), (j)]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n  if (lst.length === 0) return null; // empty list, no smallest element\n  lst.sort((a, b) => a - b); // sort the list in ascending order\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] !== lst[0]) return lst[i]; // found the second smallest element\n  }\n  return null; // all elements are equal, no next smallest\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n  let boredCount = 0;\n  const sentences = s.split(/[.!?]/);\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"Ich \")) {\n      boredCount++;\n    }\n  }\n  return boredCount;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n  // Find the maximum prime number in the list\n  function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n\n  let maxPrime = null;\n  for (const num of lst) {\n    if (isPrime(num) && (maxPrime === null || num > maxPrime)) {\n      maxPrime = num;\n    }\n  }\n\n  // Calculate the sum of the digits of the maximum prime number\n  function sumDigits(n) {\n    let sum = 0;\n    while (n > 0) {\n      sum += n % 10;\n      n = Math.floor(n / 10);\n    }\n    return sum;\n  }\n\n  return sumDigits(maxPrime);\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n  if (Object.keys(dict).length === 0) {\n    // empty dictionary, return false\n    return false;\n  }\n\n  let allLower = true;\n  let allUpper = true;\n\n  Object.keys(dict).forEach(key => {\n    const firstChar = key.charAt(0);\n    if ((firstChar >= 'a' && firstChar <= 'z') || (firstChar >= 'A' && firstChar <= 'Z')) {\n      // check the rest of the key\n      for (let i = 1; i < key.length; i++) {\n        const char = key.charAt(i);\n        if ((char >= 'a' && char <= 'z') !== (firstChar >= 'a' && firstChar <= 'z')) {\n          allLower = false;\n          allUpper = false;\n          return;\n        }\n      }\n    } else {\n      // key contains non-alphabetic characters, return false\n      return false;\n    }\n\n    if (!allLower) {\n      allUpper = false;\n    }\n  });\n\n  return allLower || allUpper;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n  const num = parseFloat(value);\n  if (Math.floor(num) === num) return Math.floor(num);\n  const lower = Math.floor(num);\n  const higher = Math.ceil(num);\n  return (num - lower <= higher - num) ? lower : higher;\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    let stones = n;\n    if ((n % 2) === 1) { // if n is odd, next layer has an odd number of stones\n      stones++;\n    } else { // if n is even, next layer has an even number of stones\n      stones--;\n    }\n    pile.push(stones);\n    n = stones;\n  }\n  return pile;\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    return s.split(/[\\s,]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n  if (x > y) return -1; // if x is greater than y, there's no even number in the range\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) return i; // find the first even number in the range\n  }\n  return -1; // if no even number was found, return -1\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) return -1;\n\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const avg = Math.round(sum / (m - n + 1));\n\n    return avg.toString(2);\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) { // i is even\n      result.push(factorial(i));\n    } else { // i is odd\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n  return result;\n}\n\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    if (str === str.split(\"\").reverse().join(\"\")) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n  if (arr.length === 0) return true; // empty array is always sortable\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) { // found a pair that's out of order\n      return false; // not sortable\n    }\n  }\n  return true; // sorted array, or empty array\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    let oddCount = 0;\n    \n    // Count the number of odd numbers in lst1\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n            oddCount++;\n        }\n    }\n    \n    // If there are no odd numbers, return \"YES\"\n    if (oddCount === 0) {\n        return \"YES\";\n    }\n    \n    // Count the number of even numbers in lst2\n    let evenCount = 0;\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) {\n            evenCount++;\n        }\n    }\n    \n    // If there are not enough even numbers, return \"NO\"\n    if (evenCount < oddCount) {\n        return \"NO\";\n    }\n    \n    // Otherwise, it is possible to exchange elements\n    return \"YES\";\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(String.fromCharCode(s.charCodeAt(i)))) {\n      result += s.charAt(i);\n    }\n  }\n  const isPalindrome = result === result.split('').reverse().join('');\n  return [result, isPalindrome];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n  let totalWater = 0;\n  for (let i = 0; i < grid.length; i++) {\n    totalWater += grid[i].reduce((acc, val) => acc + (val === 1 ? 1 : 0), 0);\n  }\n  return Math.ceil(totalWater / capacity);\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n  const words = s.split(/[^a-z ]+/i);\n  const result = [];\n\n  for (let i = 0; i < words.length; i++) {\n    let consCount = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (!/^[aeiou]/i.test(words[i][j])) {\n        consCount++;\n      }\n    }\n    if (consCount === n) {\n      result.push(words[i]);\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n  let sum = 0;\n  for (let i = 0; i < k && i < arr.length; i++) {\n    if (arr[i].toString().length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Extract start and end points from both intervals\n    let (start1, end1) = interval1;\n    let (start2, end2) = interval2;\n\n    // Check if the intervals do not overlap\n    if ((end1 < start2) || (end2 < start1)) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    let len = Math.min(end1, end2) - Math.max(start1, start2);\n\n    // Check if the length is a prime number\n    for (let i = 2; i * i <= len; i++) {\n        if ((len % i) == 0) {\n            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n  if (n === 1) return [1];\n  if (n === 2) return [1, 3];\n\n  const result = [1, 3];\n\n  for (let i = 4; i <= n; i++) {\n    let tribonacci = 0;\n    if (i % 2 === 0) {\n      tribonacci = 1 + i / 2;\n    } else {\n      let prev2 = result[i - 2];\n      let prev1 = result[i - 3];\n      tribonacci = prev2 + prev1 + result[i - 4];\n    }\n    result.push(tribonacci);\n  }\n\n  return result.slice(0, n + 1);\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) { // check if digit is odd\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(s) {\n  let stack = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '[') {\n      stack.push('[');\n    } else if (s[i] === ']') {\n      if (stack.length === 0) return false;\n      stack.pop();\n      if (stack[stack.length - 1] === '[') return true;\n    }\n  }\n  return false;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = Math.ceil(lst[i]);\n    sum += Math.pow(num, 2);\n  }\n  return sum;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n  if (txt.length === 0) return false; // empty string\n  const lastChar = txt.slice(-1);\n  const wordStartIndex = txt.lastIndexOf(' ');\n  return /^[a-zA-Z]+$/.test(lastChar) && wordStartIndex < 0;\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    let maxIndex = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] <= arr[i - 1]) {\n            maxIndex = i - 1;\n            break;\n        }\n    }\n    return maxIndex;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n  const negatives = lst.filter(x => x < 0);\n  const positives = lst.filter(x => x > 0);\n\n  if (negatives.length === 0 && positives.length === 0) {\n    return [null, null];\n  } else if (negatives.length === 0) {\n    return [null, Math.min(...positives)];\n  } else if (positives.length === 0) {\n    return [Math.max(...negatives), null];\n  } else {\n    return [Math.max(...negatives), Math.min(...positives)];\n  }\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n  if (n <= 0) {\n    throw new Error(\"Input must be a positive integer\");\n  }\n\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n\nfunction factorial(n) {\n  if (n == 0 || n == 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n    const words = sentence.split(' ');\n    const result = [];\n\n    for (const word of words) {\n        const len = word.length;\n        if (isPrime(len)) {\n            result.push(word);\n        }\n    }\n\n    return result.join(' ');\n}\n\nfunction isPrime(n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n  const a = parseInt(x.replace(\"/\", \"\"));\n  const b = parseInt(n.replace(\"/\", \"\"));\n  return a * b === 1;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n    const sumB = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0);\n\n    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA - sumB;\n    }\n  });\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialfilter(nums) {\n  let count = 0;\n  for (let num of nums) {\n    if (Math.abs(num) > 10 && (num % 10 % 2 !== 0 || Math.floor(Math.abs(num) / 10) % 10 % 2 !== 0)) {\n      count++;\n    }\n  }\n  return count;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    let a = new Array(n);\n    let count = 0;\n    \n    for(let i=0; i<n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    \n    for(let i=0; i<n; i++) {\n        for(let j=i+1; j<n; j++) {\n            for(let k=j+1; k<n; k++) {\n                if(i < j && j < k && (a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    \n    return count;\n}\n\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nfunction bf(planet1, planet2) {\n  const indices1 = planets.indexOf(planet1);\n  const indices2 = planets.indexOf(planet2);\n\n  if (indices1 === -1 || indices2 === -1) {\n    return [];\n  }\n\n  const range = [];\n  for (let i = Math.min(indices1, indices2); i <= Math.max(indices1, indices2); i++) {\n    range.push(planets[i]);\n  }\n\n  return range;\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\nfunction isPrime(num) {\n  if (num <= 1) return false; // 0 und 1 sind keine Primzahlen\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n  let sum = 0;\n  for (let num of lst) {\n    if (num % 2 !== 0 && num >= 0) { // check if number is odd and non-negative\n      sum += Math.pow(num, 2); // add the square of the number to the sum\n    }\n  }\n  return sum;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let strongest = { name: '', strength: -Infinity };\n    \n    for (let extension of extensions) {\n        let cap = 0;\n        let sm = 0;\n        \n        for (let char of extension) {\n            if (char.match(/[A-Z]/)) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        \n        let strength = cap - sm;\n        \n        if (strength > strongest.strength) {\n            strongest.name = extension;\n        } else if (strength === strongest.strength) {\n            strongest.name = extension;\n        }\n    }\n    \n    return `${classname}.${strongest.name}`;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n  if (a.includes(b)) return true;\n  \n  for (let i = 1; i < b.length; i++) {\n    let rotatedB = b.slice(i) + b.slice(0, i);\n    if (a.includes(rotatedB)) return true;\n  }\n  \n  return false;\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n  const romanNumerals = [\n    { value: 1000, numeral: 'M' },\n    { value: 900, numeral: 'CM' },\n    { value: 500, numeral: 'D' },\n    { value: 400, numeral: 'CD' },\n    { value: 100, numeral: 'C' },\n    { value: 90, numeral: 'XC' },\n    { value: 50, numeral: 'L' },\n    { value: 40, numeral: 'XL' },\n    { value: 10, numeral: 'X' },\n    { value: 9, numeral: 'IX' },\n    { value: 5, numeral: 'V' },\n    { value: 4, numeral: 'IV' },\n    { value: 1, numeral: 'I' }\n  ];\n\n  let result = '';\n  for (const numeral of romanNumerals) {\n    while (number >= numeral.value) {\n      result += numeral.numeral.toLowerCase();\n      number -= numeral.value;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n  let hypotenuse = Math.max(a, b, c);\n  return hypotenuse * hypotenuse === (a * a + b * b);\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n  let result = \"\";\n  for (let c of s) {\n    if (!isNaN(c)) { // if character is not a number\n      if (c === c.toUpperCase()) { // check if character is already uppercase\n        result += c.toLowerCase(); // convert to lowercase\n      } else {\n        result += c.toUpperCase(); // convert to uppercase\n      }\n    } else {\n      result += c; // leave non-alphabetic characters unchanged\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "function stringToMd5(text) {\n  if (text === \"\") return null; // empty string, return null\n  const crypto = require('crypto');\n  return crypto.createHash('md5').update(text).digest('hex');\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n  if (a > b) [a, b] = [b, a]; // ensure a is always the smaller number\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) { // check if the number is even (i.e., has no remainder when divided by 2)\n      result.push(i);\n    }\n  }\n  return result;\n}"}

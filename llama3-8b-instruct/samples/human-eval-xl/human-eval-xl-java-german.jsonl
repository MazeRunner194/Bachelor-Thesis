{"task_id": "java/0", "language": "java", "completion": "public static Boolean belowZero(List<Object> operations) {\n    int balance = 0; // initialize balance to 0\n    \n    for (Object operation : operations) { // iterate over each operation\n        if (operation instanceof Integer) { // check if operation is an integer (either deposit or withdrawal)\n            int amount = (int) operation;\n            balance += amount; // update the balance accordingly\n            \n            if (balance < 0) { // if balance becomes negative, return True\n                return true;\n            }\n        } else {\n            System.out.println(\"Invalid operation: \" + operation); // print an error message for invalid operations\n        }\n    }\n    \n    return false; // if no operation makes the balance negative, return False\n}"}
{"task_id": "java/1", "language": "java", "completion": "public static List<Integer> sumProduct(List<Object> numbers) {\n    int sum = 0;\n    long product = 1;\n\n    for (Object number : numbers) {\n        if (number instanceof Integer) {\n            int num = (int) number;\n            sum += num;\n            product *= num;\n        }\n    }\n\n    return Arrays.asList(sum, product);\n}"}
{"task_id": "java/2", "language": "java", "completion": "public static String stringXor(String a, String b) {\n    if (a.length() != b.length()) {\n        throw new RuntimeException(\"Both strings must be of the same length\");\n    }\n    \n    StringBuilder result = new StringBuilder();\n    \n    for (int i = 0; i < a.length(); i++) {\n        char c1 = a.charAt(i);\n        char c2 = b.charAt(i);\n        \n        if (c1 == '1' && c2 == '1') {\n            result.append('0');\n        } else if (c1 == '0' && c2 == '0') {\n            result.append('0');\n        } else {\n            result.append('1');\n        }\n    }\n    \n    return result.toString();\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.util.Comparator;\n\npublic class Longest {\n\n    public static String longest(List<Object> strings) {\n        if (strings.isEmpty()) {\n            return null;\n        }\n\n        Comparator comparator = new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                return ((String) o1).length() - ((String) o2).length();\n            }\n        };\n\n        strings.sort(comparator);\n\n        return (String) strings.get(0);\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "public static int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return greatestCommonDivisor(b, a % b);\n}"}
{"task_id": "java/5", "language": "java", "completion": "public static String sortNumbers(String numbers) {\n    Map<String, Integer> numberMap = new HashMap<>();\n    numberMap.put(\"null\", 0);\n    numberMap.put(\"eins\", 1);\n    numberMap.put(\"zwei\", 2);\n    numberMap.put(\"drei\", 3);\n    numberMap.put(\"vier\", 4);\n    numberMap.put(\"f\u00fcnf\", 5);\n    numberMap.put(\"sechs\", 6);\n    numberMap.put(\"sieben\", 7);\n    numberMap.put(\"acht\", 8);\n    numberMap.put(\"neun\", 9);\n\n    String[] words = numbers.split(\" \");\n    List<String> sortedWords = new ArrayList<>(Arrays.asList(words));\n    Collections.sort(sortedWords, (s1, s2) -> {\n        return Integer.compare(numberMap.get(s1), numberMap.get(s2));\n    });\n\n    return String.join(\" \", sortedWords);\n}"}
{"task_id": "java/6", "language": "java", "completion": "public static List<Double> rescaleToUnit(List<Double> numbers) {\n    if (numbers.size() < 2) {\n        throw new IllegalArgumentException(\"The input list must have at least two elements.\");\n    }\n\n    // Find the minimum and maximum values in the list\n    double min = Collections.min(numbers);\n    double max = Collections.max(numbers);\n\n    // Check if the minimum value is equal to the maximum value (i.e., all numbers are the same)\n    if (min == max) {\n        return numbers.stream()\n                .map(n -> 0.0) // Replace all values with 0\n                .collect(Collectors.toList());\n    }\n\n    // Rescale each number in the list\n    List<Double> rescaledNumbers = new ArrayList<>();\n    for (double number : numbers) {\n        double scaledNumber = (number - min) / (max - min);\n        rescaledNumbers.add(scaledNumber);\n    }\n\n    return rescaledNumbers;\n}"}
{"task_id": "java/7", "language": "java", "completion": "public static String flipCase(String string) {\n    StringBuilder result = new StringBuilder();\n    \n    for (char c : string.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            result.append(Character.toUpperCase(c));\n        } else if (Character.isUpperCase(c)) {\n            result.append(Character.toLowerCase(c));\n        } else {\n            result.append(c);\n        }\n    }\n    \n    return result.toString();\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GetPositive {\n\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positiveNumbers = new ArrayList<>();\n        for (Object obj : l) {\n            int num = (int) obj; // assuming all elements are integers\n            if (num > 0) {\n                positiveNumbers.add(obj);\n            }\n        }\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(getPositive(list1)); // [2, 5, 6]\n\n        List<Object> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(getPositive(list2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "public static Boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/10", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Unique {\n    public static List<Integer> unique(List<Integer> l) {\n        // Convert the list to a set to remove duplicates\n        Set<Integer> s = new HashSet<>(l);\n        \n        // Convert the set back to a list and sort it\n        List<Integer> result = new ArrayList<>(s);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n\n    /**\n     * prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n     */\n    public static int primeFib(int n) {\n        // Start with the first two Fibonacci numbers\n        int a = 0;\n        int b = 1;\n\n        // Initialize the counter for Fibonacci numbers\n        int count = 0;\n\n        while (true) {\n            // Calculate the next Fibonacci number\n            int c = a + b;\n\n            // Check if the new number is prime\n            boolean isPrime = true;\n            for (int i = 2; i * i <= c; i++) {\n                if (c % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n\n            // If it's prime, increment the counter and update a and b\n            if (isPrime) {\n                count++;\n\n                if (count == n) {\n                    return c;\n                }\n\n                a = b;\n                b = c;\n            } else {\n                a = b;\n                b = c;\n            }\n        }\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "public static Boolean triplesSumToZero(List<Integer> l) {\n    Set<Integer> seen = new HashSet<>();\n    for (int num : l) {\n        int complement = -num;\n        if (seen.contains(complement)) {\n            // We have found three numbers that sum to zero\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass PairsSumToZero {\n\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        for (int i : l) {\n            int complement = -i;\n            if (set.contains(complement)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib4 {\n    public static int fib4(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a non-negative integer.\");\n        }\n        \n        // Create an array to store the Fibonacci numbers\n        int[] fib = new int[n + 1];\n        \n        // Base cases: fib(0), fib(1), and fib(2)\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        \n        // Compute the rest of the Fibonacci numbers\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        \n        // Return the nth Fibonacci number\n        return fib[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5));  // prints: 4\n        System.out.println(fib4(6));  // prints: 8\n        System.out.println(fib4(7));  // prints: 14\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Median {\n    /**\n     * \n     * Gib den Median der Elemente in der Liste l zur\u00fcck.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        // Sort the list of integers in ascending order\n        List<Integer> sortedList = new ArrayList<>(l);\n        Collections.sort(sortedList);\n\n        int size = sortedList.size();\n        int mid = size / 2;\n\n        if (size % 2 == 0) { // even number of elements\n            return (sortedList.get(mid - 1) + sortedList.get(mid)) / 2.0;\n        } else { // odd number of elements\n            return sortedList.get(mid);\n        }\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "public static Boolean isPalindrome(String text) {\n    // Convert the input string to lowercase and remove non-alphanumeric characters\n    String cleanedText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n\n    // Compare the cleaned text with its reverse\n    return cleanedText.equals(new StringBuilder(cleanedText).reverse().toString());\n}"}
{"task_id": "java/17", "language": "java", "completion": "public static String removeVowels(String text) {\n    StringBuilder result = new StringBuilder();\n    \n    for (char c : text.toLowerCase().toCharArray()) {\n        if (!isVowel(c)) {\n            result.append(c);\n        }\n    }\n    \n    return result.toString();\n}\n\nprivate static boolean isVowel(char c) {\n    return \"aeiou\".indexOf(c) != -1;\n}"}
{"task_id": "java/18", "language": "java", "completion": "public static boolean belowThreshold(List<Integer> l, int t) {\n    for (int i : l) {\n        if (i >= t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * \n     * Addiere zwei Zahlen x und y.\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "public static Boolean sameChars(String s0, String s1) {\n    Map<Character, Integer> charCountMap = new HashMap<>();\n\n    // Count the occurrences of each character in both strings\n    for (char c : s0.toCharArray()) {\n        charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n    }\n    for (char c : s1.toCharArray()) {\n        charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n    }\n\n    // Check if the counts are equal\n    return charCountMap.values().stream()\n            .distinct()\n            .mapToInt(i -> i)\n            .toArray()\n            .equals(charCountMap.values().toArray());\n}"}
{"task_id": "java/21", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int[] fibSeq = new int[n + 1];\n    fibSeq[0] = 0;\n    fibSeq[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n    }\n    return fibSeq[n];\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Common {\n    /**\n     * Returns sorted unique common elements for two lists.\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        set1.retainAll(set2);\n        return new ArrayList<>(set1);\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "public static int largestPrimeFactor(int n) {\n    int maxFactor = 1;\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            maxFactor = i;\n            n /= i;\n        }\n    }\n    return maxFactor;\n}"}
{"task_id": "java/24", "language": "java", "completion": "public static int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Derivative {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "public class Fibfib {\n\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            int[] fibFib = new int[n + 1];\n            fibFib[0] = 0;\n            fibFib[1] = 0;\n            fibFib[2] = 1;\n\n            for (int i = 3; i <= n; i++) {\n                fibFib[i] = fibFib[i - 1] + fibFib[i - 2] + fibFib[i - 3];\n            }\n\n            return fibFib[n];\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fibfib(1)); // prints: 0\n        System.out.println(fibfib(5)); // prints: 4\n        System.out.println(fibfib(8)); // prints: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "public static int vowelsCount(String s) {\n    s = s.toLowerCase(); // convert the string to lowercase for simplicity\n    int count = 0;\n    \n    for (char c : s.toCharArray()) { \n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        } else if (c == 'y' && s.length() - 1 == s.indexOf(c)) { // check if 'y' is at the end of the string\n            count++;\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.util.*;\n\nclass Search {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Calculate the frequency of each number in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNumber = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() >= entry.getKey() && entry.getKey() > 0) {\n                maxNumber = entry.getKey();\n                break;\n            }\n        }\n        \n        return maxNumber;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "public static Number triangleArea(int a, int b, int c) {\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        double s = (double)(a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return new Double(area).toFixed(2);\n    } else {\n        return -1;\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass WillItFly {\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is a palindrome (i.e., it's equal to its reverse)\n        String str = q.stream().map(String::valueOf).reduce(\"\", (a, b) -> a + b);\n        boolean isPalindrome = false;\n        for (int i = 0; i < str.length() / 2; i++) {\n            if (str.charAt(i) != str.charAt(str.length() - i - 1)) {\n                isPalindrome = false;\n                break;\n            }\n            isPalindrome = true;\n        }\n\n        // Check if the sum of elements in the list is less than or equal to w\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        boolean isLessThanW = sum <= w;\n\n        return isPalindrome && isLessThanW;\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsMultiplyPrime {\n    public static boolean isMultiplyPrime(int a) {\n        if (a < 2) return false;\n        \n        int[] primes = new int[0];\n        for (int i = 2; i * i <= a; i++) {\n            while (a % i == 0) {\n                a /= i;\n                primes = Arrays.copyOf(primes, primes.length + 1);\n                primes[primes.length - 1] = i;\n            }\n        }\n        \n        if (a > 1) {\n            primes = Arrays.copyOf(primes, primes.length + 1);\n            primes[primes.length - 1] = a;\n        }\n        \n        return primes.length == 3 && primes[0] == 2 && primes[1] == 3 && primes[2] == 5;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // prints: true\n        System.out.println(isMultiplyPrime(10)); // prints: false\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DecimalToBinary {\n    public static String decimalToBinary(int decimal) {\n        // Convert decimal to binary and prefix with 'db'\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "public class IsHappy {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) return false;\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            count++;\n            if (count % 3 == 0) {\n                if (i + 2 < s.length()) {\n                    if (s.substring(i, i+1).equals(s.substring(i+1, i+2))) return false;\n                }\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "public static List<String> numericalLetterGrade(List<Number> grades) {\n    List<String> letterGrades = new ArrayList<>();\n    for (Number grade : grades) {\n        if (((double) grade).compareTo(4.0) >= 0) {\n            letterGrades.add(\"A+\");\n        } else if (((double) grade).compareTo(3.7) > 0) {\n            letterGrades.add(\"A\");\n        } else if (((double) grade).compareTo(3.3) > 0) {\n            letterGrades.add(\"A-\");\n        } else if (((double) grade).compareTo(3.0) > 0) {\n            letterGrades.add(\"B+\");\n        } else if (((double) grade).compareTo(2.7) > 0) {\n            letterGrades.add(\"B\");\n        } else if (((double) grade).compareTo(2.3) > 0) {\n            letterGrades.add(\"B-\");\n        } else if (((double) grade).compareTo(2.0) > 0) {\n            letterGrades.add(\"C+\");\n        } else if (((double) grade).compareTo(1.7) > 0) {\n            letterGrades.add(\"C\");\n        } else if (((double) grade).compareTo(1.3) > 0) {\n            letterGrades.add(\"C-\");\n        } else if (((double) grade).compareTo(1.0) > 0) {\n            letterGrades.add(\"D+\");\n        } else if (((double) grade).compareTo(0.7) > 0) {\n            letterGrades.add(\"D\");\n        } else if (((double) grade).compareTo(0.0) > 0) {\n            letterGrades.add(\"D-\");\n        } else {\n            letterGrades.add(\"E\");\n        }\n    }\n    return letterGrades;\n}"}
{"task_id": "java/35", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeLength {\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "public static String solve(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 2;\n        n /= 2;\n    }\n    return Integer.toBinaryString(sum);\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\npublic class GetRow {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).contains(x)) {\n                for (int j = 0; j < lst.get(i).size(); j++) {\n                    if (lst.get(i).get(j) == x) {\n                        result.add(new ArrayList<>(Arrays.asList(i, j)));\n                    }\n                }\n            }\n        }\n        \n        // Sort the coordinates by row and then by column in descending order\n        Collections.sort(result, new Comparator<List>() {\n            public int compare(List list1, List list2) {\n                Integer row1 = (Integer) list1.get(0);\n                Integer row2 = (Integer) list2.get(0);\n                if (row1.equals(row2)) {\n                    return ((Integer) list1.get(1)).compareTo((Integer) list2.get(1));\n                } else {\n                    return row1.compareTo(row2);\n                }\n            }\n        });\n        \n        return result;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "public class NextSmallest {\n\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() < 2) {\n            return null;\n        }\n        \n        int min = (int) lst.get(0);\n        for (Object o : lst) {\n            int val = (int) o;\n            if (val < min && val > (int) lst.get(1)) {\n                return Integer.valueOf(val);\n            } else if (val <= (int) lst.get(1)) {\n                min = val;\n            }\n        }\n        \n        return Integer.valueOf((int) lst.get(1));\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(nextSmallest(lst)); // prints 2\n\n        lst = Arrays.asList(5, 1, 4, 3, 2);\n        System.out.println(nextSmallest(lst)); // prints 2\n\n        lst = new ArrayList<>();\n        System.out.println(nextSmallest(lst)); // prints null\n\n        lst = Arrays.asList(1, 1);\n        System.out.println(nextSmallest(lst)); // prints null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "public static int isBored(String s) {\n    String[] sentences = s.split(\"[.!?]+\"); // split on one or more punctuation characters\n    int boredCount = 0;\n    for (String sentence : sentences) {\n        if (sentence.trim().startsWith(\"I\")) { // check if the sentence starts with \"I\"\n            boredCount++;\n        }\n    }\n    return boredCount;\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class Skjkasdkd {\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n\n        if (maxPrime == 0) {\n            return 0; // or throw an exception?\n        }\n\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(skjkasdkd(lst)); // Output: 10\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "public class CheckDictCase {\n\n    public static Boolean checkDictCase(Object dict) {\n        if (dict == null || !(dict instanceof Map)) {\n            return false;\n        }\n        \n        Map map = (Map) dict;\n        boolean allKeysLowerCase = true;\n        boolean allKeysUpperCase = true;\n\n        for (Object key : map.keySet()) {\n            String keyString = key.toString();\n            if (!keyString.equals(keyString.toLowerCase())) {\n                allKeysLowerCase = false;\n            }\n            if (!keyString.equals(keyString.toUpperCase())) {\n                allKeysUpperCase = false;\n            }\n            if (!allKeysLowerCase && !allKeysUpperCase) {\n                break;\n            }\n        }\n\n        return allKeysLowerCase || allKeysUpperCase;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "public class ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        int intPart = (int) Math.floor(num);\n        if (Math.abs(num - intPart) < Math.abs(num - (intPart + 1))) {\n            return (int) num;\n        } else {\n            return intPart + (num > intPart ? 1 : -1);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // prints: 10\n        System.out.println(closestInteger(\"15.3\")); // prints: 15\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "public static List<Integer> makeAPile(int n) {\n    List<Integer> pile = new ArrayList<>();\n    \n    int currentLevelSteins = n;\n    while (currentLevelSteins > 0) {\n        pile.add(0, currentLevelSteins);\n        \n        if (currentLevelSteins % 2 == 1) {\n            currentLevelSteins = (int) Math.ceil(currentLevelSteins / 2.0) * 2 + 1;\n        } else {\n            currentLevelSteins = (int) Math.floor(currentLevelSteins / 2.0) * 2;\n        }\n    }\n    \n    return pile;\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class WordsString {\n    public static List<String> wordsString(String s) {\n        List<String> words = new ArrayList<>();\n        String[] parts = s.split(\"[,\\\\s]+\"); // split on commas and spaces\n        for (String part : parts) {\n            words.add(part.trim()); // trim each word and add to the list\n        }\n        return words;\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "public static int chooseNum(int x, int y) {\n    if (x > y) {\n        // If x is greater than y, it means there are no even numbers between them.\n        return -1;\n    }\n\n    for (int i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            // If we find an even number, that's our answer.\n            return i;\n        }\n    }\n\n    // If we've checked all numbers and haven't found one, there are no even numbers between x and y.\n    return -1;\n}"}
{"task_id": "java/46", "language": "java", "completion": "public static Object roundedAvg(int n, int m) {\n    if (n > m) {\n        return -1; // Return -1 if n is greater than m\n    }\n\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i; // Calculate the sum of numbers from n to m\n    }\n\n    double avg = (double) sum / (m - n + 1); // Calculate the average\n\n    return Integer.toBinaryString(Math.round(avg)); // Round and convert to binary\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass F {\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) { // i is even\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else { // i is odd\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.util.*;\n\npublic class EvenOddPalindrome {\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private static boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        for (int i = 0; i < str.length() / 2; i++) {\n            if (str.charAt(i) != str.charAt(str.length() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.util.*;\n\npublic class MoveOneBall {\n\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        int min = Collections.min(arr);\n        int max = Collections.max(arr);\n        \n        if (!isIncreasing(arr, min)) {\n            return false;\n        }\n        \n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    private static boolean isIncreasing(List<Integer> arr, int min) {\n        for (int num : arr) {\n            if (num < min) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>();\n        arr.add(3);\n        arr.add(4);\n        arr.add(5);\n        arr.add(1);\n        arr.add(2);\n\n        System.out.println(moveOneBall(arr)); // prints: true\n\n        arr = new ArrayList<>();\n        arr.add(3);\n        arr.add(5);\n        arr.add(4);\n        arr.add(1);\n        arr.add(2);\n\n        System.out.println(moveOneBall(arr)); // prints: false\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n    int oddCount = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount++;\n        }\n    }\n\n    if (oddCount <= lst2.size() / 2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\npublic class ReverseDelete {\n\n    public static List<Object> reverseDelete(String s, String c) {\n        char[] arrS = s.toCharArray();\n        char[] arrC = c.toCharArray();\n\n        for (char ch : arrC) {\n            for (int i = 0; i < arrS.length; i++) {\n                if (arrS[i] == ch) {\n                    arrS[i] = '\\0'; // remove the character\n                }\n            }\n        }\n\n        String result = new String(arrS).replaceAll(\"[\\u0000]\", \"\");\n\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n\n        boolean isPalindrome = isPalindrome(result);\n        output.add(isPalindrome);\n\n        return output;\n    }\n\n    public static boolean isPalindrome(String s) {\n        int start = 0, end = s.length() - 1;\n\n        while (start < end) {\n            if (s.charAt(start) != s.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Object> result1 = reverseDelete(\"abcde\", \"ae\");\n        System.out.println(result1); // prints ['bcd',false]\n\n        List<Object> result2 = reverseDelete(\"abcdef\", \"b\");\n        System.out.println(result2); // prints ['acdef',false]\n\n        List<Object> result3 = reverseDelete(\"abcdedcba\", \"ab\");\n        System.out.println(result3); // prints ['cdedc',true]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.util.*;\n\npublic class MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        if (grid == null || grid.size() == 0) return 0;\n\n        int sum = 0;\n        for (List<Integer> row : grid) {\n            for (int num : row) {\n                sum += num;\n            }\n        }\n\n        int maxFill = sum / capacity;\n        int remainingWater = sum % capacity;\n\n        int fills = 0;\n        for (int i = 0; i < maxFill; i++) {\n            fills += capacity;\n            remainingWater -= capacity;\n        }\n\n        while (remainingWater > 0) {\n            if (remainingWater >= capacity) {\n                fills++;\n                remainingWater -= capacity;\n            } else {\n                fills++;\n                break;\n            }\n        }\n\n        return fills;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid = new ArrayList<>();\n        grid.add(Arrays.asList(0, 0, 1, 0));\n        grid.add(Arrays.asList(0, 1, 0, 0));\n        grid.add(Arrays.asList(1, 1, 1, 1));\n\n        int capacity = 1;\n        System.out.println(maxFill(grid, capacity)); // Output: 6\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass SelectWords {\n\n    public static List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        StringBuilder currentWord = new StringBuilder();\n        int consonantCount = 0;\n\n        for (char c : s.toLowerCase().toCharArray()) {\n            if (c >= 'a' && c <= 'z') {\n                boolean isConsonant = !(\"aeiou\".indexOf(c) != -1);\n                if (isConsonant) {\n                    consonantCount++;\n                    currentWord.append(c);\n                } else {\n                    if (consonantCount == n) {\n                        result.add(currentWord.toString());\n                        consonantCount = 0;\n                        currentWord.setLength(0);\n                    }\n                    currentWord.append(c);\n                }\n            }\n        }\n\n        // Add the last word to the result list\n        if (consonantCount == n) {\n            result.add(currentWord.toString());\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Maximum {\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        // Sort the array in descending order\n        Collections.sort(arr, (a, b) -> Integer.compare(b, a));\n\n        // Return a new list with the first k elements\n        return arr.subList(0, k);\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.util.*;\n\npublic class AddElements {\n    public static int addElements(List<Integer> arr, int k) {\n        // Initialize sum to 0\n        int sum = 0;\n        \n        // Iterate over the first 'k' elements of the array\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            // Check if the current number has only two digits\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class Intersection {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) return \"NO\";\n\n        int length = end - start + 1;\n\n        boolean isPrime = true;\n        for (int i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n\n        return isPrime ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = new ArrayList<>();\n        interval1.add(1);\n        interval1.add(2);\n\n        List<Integer> interval2 = new ArrayList<>();\n        interval2.add(2);\n        interval2.add(4);\n\n        System.out.println(intersection(interval1, interval2));\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Tri {\n\n    public static List<Number> tri(int n) {\n        List<Number> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        if (n == 1) {\n            result.add(new Integer(3));\n            return result;\n        }\n        \n        int a = 3;\n        int b = 2;\n        int c = 1;\n\n        result.add(a);\n        result.add(b);\n\n        for (int i = 2; i < n; i++) {\n            if (i % 2 == 0) {\n                int next = (i / 2) + 1;\n                c = a;\n                a = b;\n                b = next;\n                result.add(new Integer(c));\n            } else {\n                c = a + b + 3;\n                a = b;\n                b = c;\n                result.add(new Integer(c));\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n    /**\n     * \n     * Gegeben eine positive ganze Zahl n, gib das Produkt der ungeraden Ziffern zur\u00fcck.\n     *     Gib 0 zur\u00fcck, wenn alle Ziffern gerade sind.\n     *     Zum Beispiel:\n     * \n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if ((digit % 2) != 0) { // check if the digit is odd\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "public static Boolean isNested(String string) {\n    Stack<Character> stack = new Stack<>();\n    \n    for (int i = 0; i < string.length(); i++) {\n        char c = string.charAt(i);\n        \n        if (c == '[') {\n            stack.push('[');\n        } else if (c == ']') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            \n            stack.pop();\n        }\n    }\n    \n    return stack.size() > 0;\n}"}
{"task_id": "java/60", "language": "java", "completion": "public static int sumSquares(List<Number> lst) {\n    int sum = 0;\n    for (Number num : lst) {\n        double value = Math.ceil(num.doubleValue());\n        sum += (int) (value * value);\n    }\n    return sum;\n}"}
{"task_id": "java/61", "language": "java", "completion": "public static Boolean checkIfLastCharIsALetter(String txt) {\n    if(txt == null || txt.isEmpty()) return false;\n    \n    String[] words = txt.split(\"\\\\s+\");\n    if(words.length > 0) {\n        char lastChar = words[words.length - 1].trim().charAt(words[words.length - 1].length() - 1);\n        \n        // Check if the last character is a letter\n        return Character.isLetter(lastChar);\n    } else {\n        return false;\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\npublic class CanArrange {\n\n    public static int canArrange(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        for (int i = 1; i < sortedArr.size(); i++) {\n            if (sortedArr.get(i) <= sortedArr.get(i - 1)) {\n                return i - 1;\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>();\n        arr.add(1);\n        arr.add(2);\n        arr.add(4);\n        arr.add(3);\n        arr.add(5);\n\n        System.out.println(canArrange(arr)); // prints: 3\n\n        arr.clear();\n        arr.add(1);\n        arr.add(2);\n        arr.add(3);\n\n        System.out.println(canArrange(arr)); // prints: -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        int maxNegative = Integer.MIN_VALUE;\n        int minPositive = Integer.MAX_VALUE;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num < 0 && num > maxNegative) {\n                    maxNegative = num;\n                } else if (num > 0 && num < minPositive) {\n                    minPositive = num;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        if (maxNegative == Integer.MIN_VALUE) {\n            result.add(null);\n        } else {\n            result.add(maxNegative);\n        }\n\n        if (minPositive == Integer.MAX_VALUE) {\n            result.add(null);\n        } else {\n            result.add(minPositive);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SpecialFactorial {\n    public static long specialFactorial(int n) {\n        if (n < 1) {\n            throw new IllegalArgumentException(\"n must be greater than or equal to 1\");\n        }\n\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialFactorial(4)); // prints 288\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "public static String wordsInSentence(String sentence) {\n    // Split the sentence into individual words\n    String[] words = sentence.split(\" \");\n    \n    // Initialize an empty StringBuilder to build the result string\n    StringBuilder result = new StringBuilder();\n    \n    // Iterate over each word in the array\n    for (String word : words) {\n        // Check if the length of the word is a prime number\n        boolean isPrime = true;\n        for (int i = 2; i * i <= word.length(); i++) {\n            if (word.length() % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        \n        // If the length of the word is a prime number, add it to the result string\n        if (isPrime) {\n            result.append(word).append(\" \");\n        }\n    }\n    \n    // Remove any trailing whitespace from the result string\n    return result.toString().trim();\n}"}
{"task_id": "java/66", "language": "java", "completion": "public static Boolean simplify(String x, String n) {\n    // Convert strings to fractions\n    int[] fractionX = convertFraction(x);\n    int[] fractionN = convertFraction(n);\n\n    // Check if the fractions are equal\n    if (fractionX[0] * fractionN[1] == fractionX[1] * fractionN[0]) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Helper method to convert string fraction to int array fraction\nprivate static int[] convertFraction(String s) {\n    String[] parts = s.split(\"/\");\n    int numerator = Integer.parseInt(parts[0]);\n    int denominator = Integer.parseInt(parts[1]);\n    return new int[]{numerator, denominator};\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass OrderByPoints {\n    public static List<Object> orderByPoints(List<Object> nums) {\n        // Convert list to a list of pairs, where each pair contains the number and its sum of digits\n        List<List<Object>> pairs = new ArrayList<>();\n        for (Object num : nums) {\n            int digitSum = 0;\n            String strNum = num.toString();\n            for (char c : strNum.toCharArray()) {\n                digitSum += Integer.parseInt(String.valueOf(c));\n            }\n            pairs.add(Arrays.asList(num, digitSum));\n        }\n\n        // Sort the list of pairs based on their second element\n        Collections.sort(pairs, (pair1, pair2) -> {\n            int sum1 = (int) pair1.get(1);\n            int sum2 = (int) pair2.get(1);\n            if (sum1 == sum2) {\n                // If the sums are equal, sort based on the original index\n                return Integer.compare(nums.indexOf((Object) pair1.get(0)), nums.indexOf((Object) pair2.get(0)));\n            } else {\n                return Integer.compare(sum1, sum2);\n            }\n        });\n\n        // Convert the list of pairs back to a list of numbers\n        List<Object> result = new ArrayList<>();\n        for (List<Object> pair : pairs) {\n            result.add(pair.get(0));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\n\nclass Specialfilter {\n\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer && Math.abs((int) num) > 10) {\n                String strNum = String.valueOf(Math.abs((int) num));\n                if ((strNum.charAt(0) - '0') % 2 != 0 && (strNum.charAt(strNum.length() - 1) - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(specialfilter(Arrays.asList(15, -73, 14, -15)));\n        System.out.println(specialfilter(Arrays.asList(33, -2, -3, 45, 21, 109)));\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "public class GetMaxTriples {\n    public static void main(String[] args) {\n        System.out.println(getMaxTriples(5));\n    }\n\n    public static int getMaxTriples(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "public static List<Object> bf(String planet1, String planet2) {\n    List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    List<String> result = new ArrayList<>();\n\n    int index1 = -1;\n    int index2 = -1;\n\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets.get(i).equals(planet1)) {\n            index1 = i;\n        }\n        if (planets.get(i).equals(planet2)) {\n            index2 = i;\n        }\n    }\n\n    if (index1 == -1 || index2 == -1) {\n        return new ArrayList<>();\n    }\n\n    for (int i = Math.max(index1, 0); i < Math.min(index2 + 1, planets.size()); i++) {\n        result.add(planets.get(i));\n    }\n\n    return result;\n}"}
{"task_id": "java/71", "language": "java", "completion": "public static int xOrY(int n, int x, int y) {\n    boolean isPrime = true;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime ? x : y;\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        \n        for (Object obj : lst) {\n            if ((obj instanceof Integer) && ((Integer)obj) > 0) {\n                int number = (Integer)obj;\n                if (number % 2 != 0) {\n                    sum += number * number;\n                }\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "public class StrongestExtension {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxStrength = 0;\n        String strongestExtensionName = \"\";\n\n        for (String extension : extensions) {\n            int capitalLetters = 0;\n            int smallLetters = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capitalLetters++;\n                } else if (Character.isLowerCase(c)) {\n                    smallLetters++;\n                }\n            }\n\n            int strength = capitalLetters - smallLetters;\n\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtensionName = extension;\n            } else if (strength == maxStrength) {\n                strongestExtensionName = extension;\n                break; // If there are multiple extensions with the same strength, return the first one\n            }\n        }\n\n        return className + \".\" + strongestExtensionName;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "public class CycpatternCheck {\n    public static Boolean cycpatternCheck(String a, String b) {\n        int lenA = a.length();\n        int lenB = b.length();\n\n        // Check if b or any of its rotations are substrings of a\n        for (int i = 0; i < lenA - lenB + 1; i++) {\n            if (a.substring(i, i + lenB).equals(b)) {\n                return true;\n            }\n        }\n\n        // Check if a or any of its rotations are substrings of b\n        for (int i = 0; i < lenB - lenA + 1; i++) {\n            if (b.substring(i, i + lenA).equals(a)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "public static String intToMiniRoman(int number) {\n    Map<Integer, String> romanMap = new HashMap<>();\n    romanMap.put(1000, \"m\");\n    romanMap.put(900, \"cm\");\n    romanMap.put(500, \"d\");\n    romanMap.put(400, \"cd\");\n    romanMap.put(100, \"c\");\n    romanMap.put(90, \"xc\");\n    romanMap.put(50, \"l\");\n    romanMap.put(40, \"xl\");\n    romanMap.put(10, \"x\");\n    romanMap.put(9, \"ix\");\n    romanMap.put(5, \"v\");\n    romanMap.put(4, \"iv\");\n    romanMap.put(1, \"i\");\n\n    StringBuilder result = new StringBuilder();\n    for (int i = 1000; i >= 1; i--) {\n        while (number >= i) {\n            number -= i;\n            result.append(romanMap.get(i));\n        }\n    }\n\n    return result.toString().toLowerCase();\n}"}
{"task_id": "java/76", "language": "java", "completion": "public static Boolean rightAngleTriangle(int a, int b, int c) {\n    // Pythagorean theorem: a^2 + b^2 = c^2 if it's a right triangle\n    return (a * a + b * b == c * c);\n}"}
{"task_id": "java/77", "language": "java", "completion": "public static String solve(String s) {\n    StringBuilder result = new StringBuilder();\n    \n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            // If the character is a letter, swap its case\n            result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n        } else {\n            // If the character is not a letter, leave it as it is\n            result.append(c);\n        }\n    }\n    \n    return result.toString();\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class StringToMd5 {\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null; // or throw an exception, depending on your requirements\n        }\n\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] bytes = text.getBytes();\n            byte[] hashBytes = md.digest(bytes);\n            StringBuilder hexString = new StringBuilder();\n\n            for (byte b : hashBytes) {\n                String hex = Integer.toHexString(0xFF & b);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"MD5 algorithm not found\", e);\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GenerateIntegers {\n\n    public static List<Integer> generateIntegers(int a, int b) {\n        if (a > b) {\n            return new ArrayList<>();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8));\n        System.out.println(generateIntegers(8, 2));\n        System.out.println(generateIntegers(10, 14));\n    }\n}"}

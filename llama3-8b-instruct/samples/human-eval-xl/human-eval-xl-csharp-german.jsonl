{"task_id": "csharp/0", "language": "csharp", "completion": "public static bool BelowZero(List<int> operations)\n{\n    int balance = 0;\n    foreach (int operation in operations)\n    {\n        balance += operation;\n        if (balance < 0)\n        {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "public static Tuple<int, int> SumProduct(List<int> numbers)\n{\n    int sum = 0;\n    int product = 1;\n\n    foreach (int number in numbers)\n    {\n        sum += number;\n        product *= number;\n    }\n\n    return new Tuple<int, int>(sum, product);\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "public static string StringXor(string a, string b)\n{\n    if ((a.Length != b.Length) || (!Regex.IsMatch(a, \"^[01]+$\")) || (!Regex.IsMatch(b, \"^[01]+$\")))\n    {\n        throw new ArgumentException(\"Both strings must be of equal length and contain only 1s and 0s.\");\n    }\n\n    string result = \"\";\n    for (int i = 0; i < a.Length; i++)\n    {\n        if ((a[i].ToString() == \"1\" && b[i].ToString() == \"0\") || (a[i].ToString() == \"0\" && b[i].ToString() == \"1\"))\n        {\n            result += \"1\";\n        }\n        else\n        {\n            result += \"0\";\n        }\n    }\n\n    return result;\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "public static object Longest(List<string> strings)\n{\n    if (!strings.Any()) return null; // return null if the input list is empty\n    return strings.OrderByDescending(s => s.Length).First(); // order by length in descending order and take the first one\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "public static int GreatestCommonDivisor(int a, int b)\n{\n    while (b != 0)\n    {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return Math.Abs(a);\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "public static string SortNumbers(string numbers)\n{\n    var words = numbers.Split(' ');\n    var sortedWords = words.OrderBy(word => GetNumberValue(word)).ToArray();\n    return string.Join(\" \", sortedWords);\n}\n\nprivate static int GetNumberValue(string word)\n{\n    switch (word.ToLower())\n    {\n        case \"null\":\n            return 0;\n        case \"eins\":\n            return 1;\n        case \"zwei\":\n            return 2;\n        case \"drei\":\n            return 3;\n        case \"vier\":\n            return 4;\n        case \"f\u00fcnf\":\n            return 5;\n        case \"sechs\":\n            return 6;\n        case \"sieben\":\n            return 7;\n        case \"acht\":\n            return 8;\n        case \"neun\":\n            return 9;\n        default:\n            throw new ArgumentException(\"Invalid number\", nameof(word));\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "public static List<double> RescaleToUnit(List<double> numbers)\n{\n    if (!numbers.Any())\n    {\n        throw new ArgumentException(\"The input list cannot be empty.\");\n    }\n\n    double min = numbers.Min();\n    double max = numbers.Max();\n\n    if (min == max)\n    {\n        return numbers.Select(x => 0.0).ToList(); // all values are the same, so return a list of zeros\n    }\n\n    List<double> rescaledNumbers = new List<double>();\n\n    foreach (double number in numbers)\n    {\n        double value = (number - min) / (max - min);\n        rescaledNumbers.Add(value);\n    }\n\n    return rescaledNumbers;\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "public static string FlipCase(string string0)\n{\n    return new StringBuilder().Insert(0, string0).Reverse().ToString();\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "public static List<int> GetPositive(List<int> l)\n{\n    return l.Where(x => x > 0).ToList();\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "public static bool IsPrime(int n)\n{\n    if (n <= 1) return false;\n    if (n == 2) return true;\n\n    for (int i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0) return false;\n    }\n\n    return true;\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique(List<int> l) \n        {\n            return l.Distinct().OrderBy(x => x).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "public static int PrimeFib(int n)\n{\n    int fib = 0, i = 1, j = 1;\n    int count = 0;\n\n    while (true)\n    {\n        if ((fib & 1) == 0) // is even?\n            j += 2; // skip all even numbers\n        else\n            j++;\n\n        int temp = fib;\n        fib = i + j;\n        i = temp;\n\n        if (IsPrime(fib) && ++count == n)\n            return fib;\n    }\n}\n\npublic static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    for (int i = 2; i * i <= number; i++)\n    {\n        if (number % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "public static bool TriplesSumToZero(List<int> l)\n{\n    // Sort the list to simplify the comparison process\n    l = l.OrderBy(i => i).ToList();\n\n    for (int i = 0; i < l.Count - 2; i++)\n    {\n        int firstNumber = l[i];\n        int j = i + 1;\n        int k = l.Count - 1;\n\n        while (j < k)\n        {\n            // Check if the sum of three numbers is zero\n            int secondNumber = l[j];\n            int thirdNumber = l[k];\n\n            if (firstNumber + secondNumber + thirdNumber == 0)\n            {\n                return true;\n            }\n            else if (firstNumber + secondNumber + thirdNumber > 0)\n            {\n                k--; // Decrease the value of the last number\n            }\n            else\n            {\n                j++; // Increase the value of the middle number\n            }\n        }\n    }\n\n    return false;\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "public static bool PairsSumToZero(List<int> l)\n{\n    if (l.Count < 2) return false; // at least two elements are required to find a pair that sums to zero\n\n    var dict = new Dictionary<int, int>(); // use a dictionary to keep track of the elements and their counts\n    foreach (var num in l)\n    {\n        if (!dict.ContainsKey(-num)) // check if the negation of the current number is already in the dictionary\n            dict[-num] = 1; // add it with a count of 1\n        else\n            return true; // found a pair that sums to zero, so return true\n    }\n    return false; // no pair found, so return false\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "public static int Fib4(int n)\n{\n    if (n < 0) throw new ArgumentException(\"n must be a non-negative integer.\");\n\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 2;\n\n    int[] fib4 = new int[n + 1];\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n\n    for (int i = 4; i <= n; i++)\n    {\n        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n    }\n\n    return fib4[n];\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "public static object Median(List<int> l)\n{\n    var sortedList = l.OrderBy(x => x).ToList();\n    int length = sortedList.Count;\n\n    if (length == 0)\n        throw new InvalidOperationException(\"List is empty\");\n\n    if (length % 2 == 1) // odd number of elements\n        return sortedList[length / 2];\n\n    // even number of elements, return the average of the two middle values\n    int mid1 = sortedList[length / 2 - 1];\n    int mid2 = sortedList[length / 2];\n    double median = (mid1 + mid2) / 2.0;\n    return median;\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "public static bool IsPalindrome(string text)\n{\n    // Convert the string to lowercase and remove any spaces or punctuation\n    text = text.ToLower().Replace(\" \", \"\").Regex.Replace(\"[^a-z0-9]\", \"\");\n\n    // Compare the string with its reverse\n    return text.Equals(new string(text.Reverse().ToArray()), StringComparison.OrdinalIgnoreCase);\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "public static string RemoveVowels(string text)\n{\n    return new Regex(\"[aeiouAEIOU]\", RegexOptions.IgnoreCase).Replace(text, \"\");\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "public static bool BelowThreshold(List<int> l, int t) \n{\n    return l.All(i => i < t);\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Addiere zwei Zahlen x und y.\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// \n        /// </summary>\n        public static int Add(int x, int y) \n        {\n            return x + y;\n        }\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "using System;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// \n        /// </summary>\n        public static bool SameChars (string s0, string s1) \n        { \n            var comparer = new DifferenceComparator();\n            var difference = comparer.Compare(s0.ToLower(), s1.ToLower());\n            \n            return difference.DifferenceType == ComparisonResultType.None;\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "public static int Fib(int n)\n{\n    if (n == 1 || n == 2)\n    {\n        return 1;\n    }\n    else\n    {\n        return Fib(n - 1) + Fib(n - 2);\n    }\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "public static List<int> Common(List<int> l1, List<int> l2)\n{\n    return l1.Where(i => l2.Contains(i)).Distinct().OrderBy(x => x).ToList();\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "public static int LargestPrimeFactor(int n)\n{\n    int largestFactor = 1;\n    for (int i = 2; i * i <= n; i++)\n    {\n        while (n % i == 0)\n        {\n            largestFactor = i;\n            n /= i;\n        }\n    }\n    return largestFactor;\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "public static int SumToN(int n)\n{\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<int> Derivative(List<int> xs)\n        {\n            var derivative = new List<int>();\n            for (int i = 1; i < xs.Count; i++)\n            {\n                derivative.Add(xs[i] * i);\n            }\n            return derivative;\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "public static int Fibfib(int n)\n{\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    int[] fibfib = new int[n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n\n    for (int i = 3; i <= n; i++)\n    {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n    }\n\n    return fibfib[n];\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "public static int VowelsCount(string s)\n{\n    s = s.ToLower(); // convert to lowercase for simplicity\n    int count = 0;\n    foreach (char c in s)\n    {\n        if (\"aeiouy\".Contains(c)) // check if the character is a vowel\n        {\n            if (c == 'y' && s.Length - 1 != s.IndexOf(c)) // special case: 'y' at the end of the string\n                continue;\n            count++;\n        }\n    }\n    return count;\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "public static int Search(List<int> lst)\n{\n    var frequencyDic = new Dictionary<int, int>();\n\n    foreach (var num in lst)\n    {\n        if (!frequencyDic.ContainsKey(num))\n        {\n            frequencyDic.Add(num, 0);\n        }\n\n        frequencyDic[num]++;\n    }\n\n    int maxNum = -1;\n\n    foreach (var pair in frequencyDic)\n    {\n        if (pair.Value >= pair.Key && pair.Key > 0)\n        {\n            maxNum = pair.Key;\n            break;\n        }\n    }\n\n    return maxNum;\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "public static double? TriangleArea(int a, int b, int c)\n{\n    if ((a + b > c) && (a + c > b) && (b + c > a))\n    {\n        double p = (a + b + c) / 2.0;\n        return Math.Sqrt(p * (p - a) * (p - b) * (p - c)).Round(2);\n    }\n    else\n    {\n        return -1;\n    }\n}\n\npublic static class Extensions\n{\n    public static double Round(this double value, int numberOfDecimals)\n    {\n        if (numberOfDecimals < 0)\n        {\n            throw new ArgumentException(\"Number of decimals must be a positive integer.\");\n        }\n\n        double multiplier = Math.Pow(10.0, numberOfDecimals);\n        return Math.Round(value * multiplier) / multiplier;\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "public static bool WillItFly(List<int> q, int w)\n{\n    // Check if the list is palindromic\n    var reversed = new List<int>(q);\n    reversed.Reverse();\n    return q.SequenceEqual(reversed);\n\n    // If it's not palindromic, we can't fly, so return false\n    // But since we haven't checked the weight yet, let's do that too\n\n    // Check if the sum of the elements is less than or equal to w\n    var totalWeight = q.Sum();\n    return WillItFly && totalWeight <= w;\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "public static bool IsMultiplyPrime(int a)\n{\n    if (a < 1) return false; // 0 and negatives are not prime products\n\n    int count = 0;\n    for (int i = 2; i <= a / i; i++)\n    {\n        while (a % i == 0)\n        {\n            bool isPrime = IsPrime(i);\n            if (!isPrime) return false; // not a prime product\n            a /= i;\n            count++;\n            if (count > 3) return false; // more than 3 primes, not a valid product\n        }\n    }\n\n    return count == 3; // exactly 3 primes in the product\n}\n\nprivate static bool IsPrime(int n)\n{\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0) return false;\n    }\n    return true;\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "public static string DecimalToBinary(int decimalNumber)\n{\n    // Convert the decimal number to binary using bitwise operations\n    string binary = Convert.ToString(decimalNumber, 2);\n\n    // Add the 'db' prefix and suffix\n    binary = \"db\" + binary + \"db\";\n\n    return binary;\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "public static bool IsHappy(string s)\n{\n    if (s.Length < 3) return false; // too short, not happy\n\n    var groups = new List<string>();\n    for (int i = 0; i < s.Length - 2; i += 3) // group of 3 characters\n    {\n        string group = s.Substring(i, 3);\n        if (groups.Contains(group))\n            return false; // duplicate group, not happy\n        groups.Add(group);\n    }\n\n    // check the remaining characters (if any)\n    for (int i = s.Length - 2; i < s.Length; i++)\n    {\n        string singleChar = s.Substring(i, 1);\n        if (groups.Any(g => g.EndsWith(singleChar)))\n            return false; // same as previous group\n    }\n\n    return true; // all checks pass, happy!\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> NumericalLetterGrade(List<object> grades)\n        {\n            var letterGrades = new List<string>();\n\n            foreach (var grade in grades)\n            {\n                if ((double)grade >= 4.0)\n                {\n                    letterGrades.Add(\"A+\");\n                }\n                else if ((double)grade > 3.7)\n                {\n                    letterGrades.Add(\"A\");\n                }\n                else if ((double)grade > 3.3)\n                {\n                    letterGrades.Add(\"A-\");\n                }\n                else if ((double)grade > 3.0)\n                {\n                    letterGrades.Add(\"B+\");\n                }\n                else if ((double)grade > 2.7)\n                {\n                    letterGrades.Add(\"B\");\n                }\n                else if ((double)grade > 2.3)\n                {\n                    letterGrades.Add(\"B-\");\n                }\n                else if ((double)grade > 2.0)\n                {\n                    letterGrades.Add(\"C+\");\n                }\n                else if ((double)grade > 1.7)\n                {\n                    letterGrades.Add(\"C\");\n                }\n                else if ((double)grade > 1.3)\n                {\n                    letterGrades.Add(\"C-\");\n                }\n                else if ((double)grade > 1.0)\n                {\n                    letterGrades.Add(\"D+\");\n                }\n                else if ((double)grade > 0.7)\n                {\n                    letterGrades.Add(\"D\");\n                }\n                else if ((double)grade >= 0.0)\n                {\n                    letterGrades.Add(\"D-\");\n                }\n                else\n                {\n                    letterGrades.Add(\"E\");\n                }\n            }\n\n            return letterGrades;\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "public static bool PrimeLength(string s)\n{\n    int length = s.Length;\n    if (length <= 1) return true; // 0 and 1 are prime numbers for this problem\n    for (int i = 2; i * i <= length; i++)\n    {\n        while (length % i == 0)\n        {\n            length /= i;\n        }\n    }\n    return length == 1 ? false : true;\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "public static string Solve(int N)\n{\n    int sum = 0;\n    while (N > 0)\n    {\n        sum += N % 10;\n        N /= 10;\n    }\n    return Convert.ToString(sum, 2);\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<(int, int)> GetRow(List<List<int>> lst, int x)\n        {\n            var result = new List<(int, int)>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                for (int j = 0; j < lst[i].Count; j++)\n                {\n                    if ((int)lst[i][j] == x)\n                    {\n                        result.Add((i, j));\n                    }\n                }\n            }\n\n            // Sort the coordinates by row and then by column\n            result.Sort((a, b) =>\n            {\n                if (a.Item1 != b.Item1) return a.Item1.CompareTo(b.Item1);\n                return b.Item2.CompareTo(a.Item2);\n            });\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "public static object NextSmallest(List<int> lst)\n{\n    if (lst == null || lst.Count < 2)\n    {\n        return null;\n    }\n\n    Array.Sort(lst.ToArray());\n    int min = lst.ToArray()[0];\n    int? nextSmallest = null;\n\n    for (int i = 1; i < lst.Count; i++)\n    {\n        if (lst.ToArray()[i] > min && (!nextSmallest.HasValue || lst.ToArray()[i] < (int)nextSmallest))\n        {\n            nextSmallest = lst.ToArray()[i];\n        }\n    }\n\n    return nextSmallest;\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "public static int IsBored(string S)\n{\n    var sentences = S.Split(new[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n    return sentences.Count(s => s.Trim().StartsWith(\"Ich\", StringComparison.OrdinalIgnoreCase));\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "public static int Skjkasdkd(List<int> lst)\n{\n    Func<int, bool> IsPrime = n =>\n    {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++)\n            if (n % i == 0) return false;\n        return true;\n    };\n\n    int maxPrime = 0;\n    foreach (var num in lst)\n    {\n        if (IsPrime(num))\n        {\n            if (num > maxPrime)\n                maxPrime = num;\n        }\n    }\n\n    int sumOfDigits = 0;\n    while (maxPrime > 0)\n    {\n        sumOfDigits += maxPrime % 10;\n        maxPrime /= 10;\n    }\n\n    return sumOfDigits;\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "public static bool CheckDictCase(Dictionary<object, string> dict)\n{\n    // If the dictionary is empty, return false\n    if (dict.Count == 0) return false;\n\n    // Get all the keys and convert them to uppercase\n    var upperKeys = dict.Select(k => k.Key.ToString().ToUpper()).ToList();\n\n    // Get all the keys and convert them to lowercase\n    var lowerKeys = dict.Select(k => k.Key.ToString().ToLower()).ToList();\n\n    // Check if all keys are in uppercase or all keys are in lowercase\n    return (new CollectionComparator().Compare(upperKeys, lowerKeys).AreEqual() ||\n           new CollectionComparator().Compare(lowerKeys, upperKeys).AreEqual());\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "public static int ClosestInteger(string value)\n{\n    double number = Convert.ToDouble(value);\n    int closestInteger = 0;\n\n    if (Math.Abs(number - Math.Floor(number)) < Math.Abs(number - Math.Ceiling(number)))\n    {\n        closestInteger = (int)Math.Floor(number);\n    }\n    else\n    {\n        closestInteger = (int)Math.Ceiling(number);\n    }\n\n    return closestInteger;\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "public static List<int> MakeAPile(int n)\n{\n    var pile = new List<int>();\n    int currentLevel = 1;\n    while (true)\n    {\n        pile.Add(n);\n        if (n % 2 == 0) // n is even\n        {\n            n++;\n        }\n        else // n is odd\n        {\n            n += 2;\n        }\n        if (pile.Count >= currentLevel + 1) break;\n        currentLevel++;\n    }\n    return pile;\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten einen String von W\u00f6rtern, die durch Kommas oder Leerzeichen getrennt sind. Ihre Aufgabe ist es, den String in W\u00f6rter aufzuteilen und ein Array der W\u00f6rter zur\u00fcckzugeben.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString (string s) \n        { \n            return s.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries)\n                    .Select(word => word.Trim()).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "public static int ChooseNum(int x, int y)\n{\n    if (x > y) throw new ArgumentException(\"x must be less than or equal to y\");\n\n    for (int i = x; i <= y; i++)\n    {\n        if ((i & 1) == 0) return i;\n    }\n\n    return -1;\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "public static object RoundedAvg(int n, int m)\n{\n    if (n > m)\n    {\n        return -1;\n    }\n\n    double sum = 0;\n    for (int i = n; i <= m; i++)\n    {\n        sum += i;\n    }\n    double average = Math.Round(sum / ((double)(m - n + 1)));\n\n    string binary = Convert.ToString(average, 2);\n\n    return \"0b\" + binary.PadLeft(binary.Length + 3, '0').Trim();\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "public static List<int> F(int n)\n{\n    var result = new List<int>();\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0) // i is even, so calculate factorial\n        {\n            int fact = 1;\n            for (int j = 1; j <= i; j++)\n            {\n                fact *= j;\n            }\n            result.Add(fact);\n        }\n        else // i is odd, so calculate sum of numbers from 1 to i\n        {\n            int sum = 0;\n            for (int j = 1; j <= i; j++)\n            {\n                sum += j;\n            }\n            result.Add(sum);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static Tuple<int, int> EvenOddPalindrome(int n)\n        {\n            var evenCount = 0;\n            var oddCount = 0;\n\n            for (int i = 1; i <= n; i++)\n            {\n                if (IsPalindrome(i))\n                {\n                    if (i % 2 == 0)\n                    {\n                        evenCount++;\n                    }\n                    else\n                    {\n                        oddCount++;\n                    }\n                }\n            }\n\n            return new Tuple<int, int>(evenCount, oddCount);\n        }\n\n        public static bool IsPalindrome(int number)\n        {\n            int reversedNumber = 0;\n            int originalNumber = number;\n\n            while (number > 0)\n            {\n                int remainder = number % 10;\n                reversedNumber = reversedNumber * 10 + remainder;\n                number /= 10;\n            }\n\n            return originalNumber == reversedNumber;\n        }\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "public static bool MoveOneBall(List<int> arr)\n{\n    if (arr == null || arr.Count == 0) return true; // empty array is already sorted\n\n    int max = arr.Max(); // find the maximum element\n    int firstIndex = arr.IndexOf(max); // find the index of the maximum element\n\n    if (firstIndex > 0) // if it's not the last element, move it to the front\n    {\n        arr.Add(arr[0]);\n        arr.RemoveAt(0);\n        return MoveOneBall(arr); // recursively check the rest of the array\n    }\n    else // if it's the last element, we can't sort the array\n    {\n        return false;\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "public static string Exchange(List<int> lst1, List<int> lst2)\n{\n    // Check if lst1 contains any odd numbers\n    bool hasOddNumbers = lst1.Any(n => n % 2 != 0);\n\n    // If lst1 does not contain any odd numbers, return \"YES\"\n    if (!hasOddNumbers) return \"YES\";\n\n    // Create a copy of lst2 to avoid modifying the original list\n    List<int> lst2Copy = new List<int>(lst2);\n\n    // Try to remove all odd numbers from lst1 by swapping them with even numbers from lst2\n    while (lst1.Any(n => n % 2 != 0))\n    {\n        int oddNumber = lst1.FirstOrDefault(n => n % 2 != 0);\n        int evenNumber = lst2Copy.FirstOrDefault(n => n % 2 == 0);\n\n        // If no even number is found in lst2, return \"NO\"\n        if (evenNumber == default(int)) return \"NO\";\n\n        // Swap the odd and even numbers\n        int temp = oddNumber;\n        oddNumber = evenNumber;\n        evenNumber = temp;\n\n        // Remove the odd number from lst1 and add the even number to lst1\n        lst1.Remove(oddNumber);\n        lst1.Add(evenNumber);\n\n        // Remove the even number from lst2Copy\n        lst2Copy.Remove(evenNumber);\n    }\n\n    return \"YES\";\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Aufgabe\n        ///     Wir haben zwei Zeichenketten s und c. Du musst alle Zeichen in s l\u00f6schen, die einem Zeichen in c entsprechen.\n        ///     Dann musst du \u00fcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n        ///     Eine Zeichenkette ist ein Palindrom, wenn sie r\u00fcckw\u00e4rts gelesen genauso aussieht wie vorw\u00e4rts.\n        ///     Du solltest ein Tupel zur\u00fcckgeben, das die resultierende Zeichenkette und True/False f\u00fcr die \u00dcberpr\u00fcfung enth\u00e4lt.\n        ///     Beispiel\n        ///     F\u00fcr s = \"abcde\", c = \"ae\" sollte das Ergebnis ('bcd',False) sein.\n        ///     F\u00fcr s = \"abcdef\", c = \"b\" sollte das Ergebnis ('acdef',False) sein.\n        ///     F\u00fcr s = \"abcdedcba\", c = \"ab\" sollte das Ergebnis ('cdedc',True) sein.\n        /// \n        /// \n        /// </summary>\n        public static List<object> ReverseDelete(string s, string c)\n        {\n            // L\u00f6sche alle Zeichen in s, die einem Zeichen in c entsprechen\n            string result = \"\";\n            foreach (var ch in s)\n            {\n                if (!c.Contains(ch.ToString()))\n                {\n                    result += ch;\n                }\n            }\n\n            // \u00dcberpr\u00fcfe, ob die resultierende Zeichenkette ein Palindrom ist\n            bool isPalindrom = true;\n            for (int i = 0; i < result.Length / 2; i++)\n            {\n                if (result[i] != result[result.Length - i - 1])\n                {\n                    isPalindrom = false;\n                    break;\n                }\n            }\n\n            // R\u00fcckgabe des Ergebnisses\n            return new List<object> { result, isPalindrom };\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "public static int MaxFill(List<List<int>> grid, int capacity)\n{\n    int totalWater = 0;\n    for (int i = 0; i < grid.Count; i++)\n    {\n        totalWater += grid[i].Count(x => x == 1);\n    }\n\n    return Math.Max(0, totalWater / capacity) * capacity + Math.Min(totalWater % capacity, capacity);\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<string> SelectWords(string s, int n)\n        {\n            var words = s.Split(' ');\n            var result = new List<string>();\n\n            foreach (var word in words)\n            {\n                if (word.Length > 0 && CountConsonants(word) == n)\n                {\n                    result.Add(word);\n                }\n            }\n\n            return result;\n        }\n\n        private static int CountConsonants(string s)\n        {\n            var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n            var count = 0;\n\n            foreach (var c in s)\n            {\n                if (consonants.Contains(c))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Returns a sorted list of length k containing the k largest numbers in the array.\n        /// </summary>\n        public static List<int> Maximum(List<int> arr, int k)\n        {\n            // Sort the array in descending order (highest to lowest)\n            arr = arr.OrderByDescending(x => x).ToList();\n\n            // Return the first k elements of the sorted array\n            return arr.GetRange(0, k);\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "public static int AddElements(List<int> arr, int k)\n{\n    return arr.Take(k).Where(x => x < 100).Sum();\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "public static string Intersection(List<int> interval1, List<int> interval2)\n{\n    int start = Math.Max(interval1[0], interval2[0]);\n    int end = Math.Min(interval1[1], interval2[1]);\n\n    if (start > end) return \"NO\";\n\n    int length = end - start + 1;\n\n    bool isPrime = true;\n    for (int i = 2; i * i <= length; i++)\n    {\n        if (length % i == 0)\n        {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? \"YES\" : \"NO\";\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Jeder kennt die Fibonacci-Folge, die in den letzten Jahrhunderten von Mathematikern tiefgehend untersucht wurde. Was die meisten Menschen jedoch nicht wissen, ist die Tribonacci-Folge. Die Tribonacci-Folge wird durch die Rekursion definiert: Tri(1) = 3 Tri(n) = 1 + n / 2, wenn n gerade ist. Tri(n) = Tri(n - 1) + Tri(n - 2) + Tri(n + 1), wenn n ungerade ist. Zum Beispiel: Tri(2) = 1 + (2 / 2) = 2 Tri(4) = 3 Tri(3) = Tri(2) + Tri(1) + Tri(4) = 2 + 3 + 3 = 8 Sie erhalten eine nicht-negative ganze Zahl n und m\u00fcssen eine Liste der ersten n + 1 Zahlen der Tribonacci-Folge zur\u00fcckgeben. Beispiele: Tri(3) = [1, 3, 2, 8]\n        /// \n        /// \n        /// </summary>\n        public static List<object> Tri(int n)\n        {\n            List<object> result = new List<object>();\n            if (n == 0)\n                return result;\n\n            if (n == 1)\n            {\n                result.Add(3);\n                return result;\n            }\n\n            int a = 3, b = 2; // first two numbers in the Tribonacci sequence\n            result.Add(a); // add the first number to the list\n\n            for (int i = 2; i < n; i++)\n            {\n                int c = a + (i % 2 == 0 ? i / 2 : b);\n                result.Add(c); // add the next number in the sequence\n                if (i % 2 != 0)\n                {\n                    a = b;\n                    b = c;\n                }\n                else\n                {\n                    a = c;\n                }\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "public static int Digits(int n)\n{\n    int product = 1;\n    while (n > 0)\n    {\n        int digit = n % 10;\n        if (digit % 2 != 0) // check if the digit is odd\n            product *= digit;\n        n /= 10;\n    }\n    return product;\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "public static bool IsNested(string str)\n{\n    int openCount = 0;\n    for (int i = 0; i < str.Length; i++)\n    {\n        if (str[i] == '[')\n            openCount++;\n        else if (str[i] == ']')\n        {\n            if (openCount > 0)\n                openCount--;\n            else\n                return false;\n        }\n    }\n    return openCount > 0;\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "public static int SumSquares(List<object> lst)\n{\n    return lst.Select(x => Math.Ceiling((double)x)).Select(y => (int)Math.Pow((double)y, 2)).Sum();\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "public static bool CheckIfLastCharIsALetter(string txt)\n{\n    if (txt.Length == 0)\n    {\n        return false;\n    }\n\n    string[] words = txt.Split(' ');\n    string lastWord = words[words.Length - 1];\n\n    char lastChar = lastWord[lastWord.Length - 1];\n    bool isLetter = char.IsLetter(lastChar);\n\n    return isLetter && !lastWord.EndsWith(char.ToString(lastChar));\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "public static int CanArrange(List<int> arr)\n{\n    for (int i = 0; i < arr.Count - 1; i++)\n    {\n        if (arr[i] <= arr[i + 1])\n            return i;\n    }\n    return -1;\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static List<object> LargestSmallestIntegers(List<int> lst)\n        {\n            List<object> result = new List<object>();\n\n            if (lst.Count == 0)\n            {\n                result.Add(null);\n                result.Add(null);\n            }\n            else\n            {\n                int maxNegative = int.MinValue;\n                int minPositive = int.MaxValue;\n\n                foreach (int num in lst)\n                {\n                    if (num < 0 && num > maxNegative)\n                        maxNegative = num;\n                    else if (num > 0 && num < minPositive)\n                        minPositive = num;\n                }\n\n                if (maxNegative == int.MinValue || minPositive == int.MaxValue)\n                    result.Add(null);\n                else\n                    result.Add(maxNegative);\n                result.Add(minPositive);\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "public static int SpecialFactorial(int n)\n{\n    if (n <= 0)\n    {\n        throw new ArgumentException(\"Input must be greater than zero.\");\n    }\n\n    int result = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        result *= KellermanSoftware.CompareNetObjects.Factorial(i);\n    }\n    return result;\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "public static string WordsInSentence(string sentence)\n{\n    var words = sentence.Split(' ');\n    return string.Join(\" \", words.Where(w => IsPrime(w.Length)).ToArray());\n}\n\nprivate static bool IsPrime(int number)\n{\n    if (number <= 1) return false;\n    if (number == 2) return true;\n    if (number % 2 == 0) return false;\n\n    var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n    for (int i = 3; i <= boundary; i += 2)\n        if (number % i == 0)\n            return false;\n\n    return true;\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "public static bool Simplify(string x, string n)\n{\n    // Split the fractions into numerator and denominator\n    var xNum = int.Parse(x.Split('/').First());\n    var xDen = int.Parse(x.Split('/').Last());\n    var nNum = int.Parse(n.Split('/').First());\n    var nDen = int.Parse(n.Split('/').Last());\n\n    // Calculate the greatest common divisor (GCD) of the numerators and denominators\n    var gcd = Gcd(Math.Abs(xNum), Math.Abs(xNum));\n    var newXNum = xNum / gcd;\n    var newXDen = xDen / gcd;\n    var gcd2 = Gcd(Math.Abs(nNum), Math.Abs(nDen));\n    var newYNum = nNum / gcd2;\n    var newNDen = nDen / gcd2;\n\n    // Check if the simplified fraction is equal to 1/1\n    return newXNum == 1 && newXDen == 1 && newYNum == 1 && newNDen == 1;\n}\n\n// Helper function to calculate the greatest common divisor (GCD)\npublic static int Gcd(int a, int b)\n{\n    if (b == 0) return a;\n    return Gcd(b, a % b);\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Sorts a list of integers in ascending order based on the sum of their digits.\n        /// In case of ties, the original order is preserved.\n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            return nums.OrderBy(n => n.DigitSum()).ThenBy((n, i) => i).ToList();\n        }\n\n        private static int DigitSum(this int num)\n        {\n            int sum = 0;\n            while (num != 0)\n            {\n                sum += num % 10;\n                num /= 10;\n            }\n            return sum;\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "public static int SpecialFilter(List<int> nums)\n{\n    return nums.Count(n => n > 10 && (n % 10) % 2 != 0 && (n / 10000 + n % 10) % 2 != 0);\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "public static int GetMaxTriples(int n)\n{\n    var a = new int[n];\n    for (int i = 0; i < n; i++)\n    {\n        a[i] = (i * i) - i + 1;\n    }\n\n    int count = 0;\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = i + 1; j < n; j++)\n        {\n            for (int k = j + 1; k < n; k++)\n            {\n                if (a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        private enum Planets { Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune }\n\n        private static Dictionary<string, Planets> planetMap = new Dictionary<string, Planets>\n        {\n            {\"Mercury\", Planets.Mercury},\n            {\"Venus\", Planets.Venus},\n            {\"Earth\", Planets.Earth},\n            {\"Mars\", Planets.Mars},\n            {\"Jupiter\", Planets.Jupiter},\n            {\"Saturn\", Planets.Saturn},\n            {\"Uranus\", Planets.Uranus},\n            {\"Neptune\", Planets.Neptune}\n        };\n\n        public static List<string> Bf(string planet1, string planet2)\n        {\n            if (!planetMap.ContainsKey(planet1) || !planetMap.ContainsKey(planet2))\n                return new List<string>();\n\n            Planets p1 = planetMap[planet1];\n            Planets p2 = planetMap[planet2];\n\n            List<string> result = new List<string>();\n            foreach (var item in Enum.GetValues(typeof(Planets)))\n            {\n                Planets planet = (Planets)item;\n                if ((int)planet >= (int)p1 && (int)planet <= (int)p2)\n                    result.Add(Enum.GetName(typeof(Planets), planet));\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "public static int XOrY(int n, int x, int y)\n{\n    bool isPrime = true;\n    for (int i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0)\n        {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? y : x;\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "public static int DoubleTheDifference(List<object> lst)\n{\n    int sum = 0;\n    foreach (object obj in lst)\n    {\n        if (obj is int && (int)obj % 2 != 0 && (int)obj >= 0)\n        {\n            sum += (int)obj * (int)obj;\n        }\n    }\n    return sum;\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string StrongestExtension(string className, List<string> extensions)\n        {\n            Dictionary<string, double> extensionStrengths = new Dictionary<string, double>();\n\n            foreach (string extension in extensions)\n            {\n                int cap = 0;\n                int sm = 0;\n\n                foreach (char c in extension)\n                {\n                    if (Char.IsUpper(c))\n                        cap++;\n                    else\n                        sm++;\n                }\n\n                double strength = (double)cap / sm;\n                extensionStrengths.Add(extension, strength);\n            }\n\n            string strongestExtension = extensions[extensionStrengths.OrderBy(x => x.Value).First().Key];\n\n            return className + \".\" + strongestExtension;\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "public static bool CycpatternCheck(string a, string b)\n{\n    for (int i = 0; i < b.Length; i++)\n    {\n        for (int j = 0; j <= b.Length - b.Length + i; j++)\n        {\n            if (a.Contains(b.Substring(i, b.Length).Substring(j, 1)))\n                return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "public static string IntToMiniRoman(int number)\n{\n    Dictionary<int, string> romanMap = new Dictionary<int, string>()\n    {\n        {1000, \"M\"},\n        {900, \"CM\"},\n        {500, \"D\"},\n        {400, \"CD\"},\n        {100, \"C\"},\n        {90, \"XC\"},\n        {50, \"L\"},\n        {40, \"XL\"},\n        {10, \"X\"},\n        {9, \"IX\"},\n        {5, \"V\"},\n        {4, \"IV\"},\n        {1, \"I\"}\n    };\n\n    StringBuilder roman = new StringBuilder();\n\n    foreach (var pair in romanMap.OrderBy(x => x.Key))\n    {\n        while (number >= pair.Key)\n        {\n            number -= pair.Key;\n            roman.Append(pair.Value);\n        }\n    }\n\n    return roman.ToString().ToLower();\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "public static bool RightAngleTriangle(int a, int b, int c)\n{\n    // Check if any side could be the hypotenuse (longest side)\n    if ((a * a) + (b * b) == (c * c))\n        return true;\n    else if ((a * a) + (c * c) == (b * b))\n        return true;\n    else if ((b * b) + (c * c) == (a * a))\n        return true;\n\n    // No valid combination found\n    return false;\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "public static string Solve(string s)\n{\n    StringBuilder result = new StringBuilder();\n\n    foreach (char c in s)\n    {\n        if (char.IsLetter(c))\n        {\n            // If it's a letter, toggle its case\n            result.Append(char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c));\n        }\n        else\n        {\n            // If it's not a letter, just append it as is\n            result.Append(c);\n        }\n    }\n\n    return result.ToString();\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System.Security.Cryptography;\nusing System.Text;\n\npublic static string StringToMd5(string text)\n{\n    if (text == null || text.Length == 0)\n    {\n        return null;\n    }\n\n    using (var md5 = MD5.Create())\n    {\n        var transactions = md5.ComputeHash(Encoding.ASCII.GetBytes(text));\n        return BitConverter.ToString(transactions).Replace(\"-\", \"\").ToLower();\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "public static List<int> GenerateIntegers(int a, int b)\n{\n    if(a > b)\n    {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n\n    List<int> result = new List<int>();\n    \n    for (int i = Math.Min(a, b); i <= Math.Max(a, b); i++)\n    {\n        if (i % 2 == 0)\n        {\n            result.Add(i);\n        }\n    }\n\n    return result;\n}"}

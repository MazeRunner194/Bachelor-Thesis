{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return total_sum, total_product"}
{"task_id": "python/2", "language": "python", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n\n    result = ''\n    for char1, char2 in zip(a, b):\n        if char1 == '0' and char2 == '0':\n            result += '0'\n        elif char1 == '1' and char2 == '1':\n            result += '0'\n        else:\n            result += '1'\n\n    return result"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\"\"\"\n    \n    # Use Euclidean algorithm to find GCD\n    while b:\n        a, b = b, a % b\n    \n    return abs(a)"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List, Dict\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict: Dict[str, int] = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n                                 'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n                                 'eight': 8, 'nine': 9}\n    sorted_numbers: List[str] = []\n\n    for num in numbers.split():\n        if num in num_dict:\n            sorted_numbers.append(num)\n        else:\n            raise ValueError(f\"Invalid number: {num}\")\n\n    return ' '.join(sorted(sorted_numbers))"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:  # 0, 1, and negative numbers are not prime\n        return False\n    for i in range(2, int(n ** 0.5) + 1):  # only need to check up to sqrt(n)\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fib(n: int) -> int:\n    \"\"\"Calculate the nth Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number that is also prime.\"\"\"\n    fib_num = 2\n    while True:\n        if is_prime(fib_num):\n            if n == 1:\n                return fib_num\n            n -= 1\n        fib_num = fib(fib_num + 1)\n\n\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    This function checks if there are three distinct elements in a list that sum to zero.\n    \n    Parameters:\n    l (list): The input list of integers.\n    \n    Returns:\n    bool: True if there are three distinct elements in the list that sum to zero, False otherwise.\n    \"\"\"\n    \n    # First, we sort the list. This is because we want to avoid duplicate combinations\n    # when checking for triples that sum to zero.\n    l.sort()\n    \n    # Then, we iterate over the list with a for loop.\n    for i in range(len(l) - 2):\n        \n        # We use two pointers, one starting from the current element and moving forward,\n        # and another starting from the end of the list and moving backward.\n        left = i + 1\n        right = len(l) - 1\n        \n        # We continue until the two pointers meet or the sum of the three elements is zero.\n        while left < right:\n            \n            # If the sum of the three elements is less than zero, we move the left pointer to the right.\n            if l[i] + l[left] + l[right] < 0:\n                left += 1\n            \n            # If the sum of the three elements is greater than zero, we move the right pointer to the left.\n            elif l[i] + l[left] + l[right] > 0:\n                right -= 1\n            \n            # If the sum of the three elements is zero, we return True. This means we have found a triple that sums to zero.\n            else:\n                return True\n    \n    # If we have iterated over the entire list and not found any triples that sum to zero, we return False.\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a+b+c+d\n\n    return d"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        mid1 = l[(n-1)//2]\n        mid2 = l[n//2]\n        return (mid1 + mid2) / 2"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1) & set(l2))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiouy':\n            if char == 'y' and s.index(char) == len(s) - 1:\n                continue\n            count += 1\n    return count"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 0\n        freq_dict[num] += 1\n    \n    max_num = -1\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            max_num = key\n            break\n    \n    return max_num"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if three sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        \n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    return all(x == y for x, y in zip(q, q[::-1])) and sum(q) <= w"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, a+1):\n        if is_prime(i):\n            primes.append(i)\n\n    count = 0\n    for prime in primes:\n        while a // prime > 0 and a % prime == 0:\n            a //= prime\n            count += 1\n\n    return count >= 3"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + format(decimal, 'b') + \"db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n        \n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(bin(N)[2:])))"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, len(row)-1-row.index(x)))\n    return sorted(result)"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i] != lst[i+1]:\n            return lst[i+1]\n    return None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') if sentence.strip().startswith('I'))"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max((x for x in lst if is_prime(x)), default=0)\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return round(value) if value % 1 < 0.5 else int(value) + 1\n    else:\n        return round(value) if value % 1 > -0.5 else int(value) - 1"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i * 2 + 1)\n        else:\n            result.append(i * 2 + 2)\n    return result"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    \n    return bin(avg)[2:]"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(k):\n    if k == 0 or k == 1:\n        return 1\n    else:\n        return k * factorial(k-1)"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is palindrome\n            if i % 2 == 0:  # Check if the number is even\n                even += 1\n            else:\n                odd += 1\n    \n    return (even, odd)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    i = 0\n    for j in range(len(arr)):\n        while i < len(arr) - 1 and arr[i] <= arr[i+1]:\n            i += 1\n        \n        if i == j:\n            return False\n    \n    return True"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    even_count = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    if odd_count > len(set(lst2)) // 2:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    s = ''.join(char for char in s if char not in c)\n    return (s, s == s[::-1])"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / float(capacity))\n    return buckets_needed"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    result = []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for word in words:\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    return sorted(set(arr), reverse=True)[:k]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if str(i).isdigit() and len(str(i)) <= 2)"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start <= end: \n        length = end - start + 1\n        if is_prime(length): \n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3]\n\n    tribonnaci_sequence = [3, 2]\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonnaci_sequence.append(1 + i // 2)\n        else:\n            tribonnaci_sequence.append(tribonnaci_sequence[i - 1] + tribonnaci_sequence[i - 2] + tribonnaci_sequence[i - 3])\n\n    return tribonnaci_sequence"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    return round(sum(math.ceil(x) ** 2 for x in lst))"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # Check if the string is empty\n        return False\n    \n    last_char = txt[-1]  # Get the last character of the string\n    prev_chars = txt[:-1].replace(\" \", \"\")  # Get all characters except the last one, removing any spaces\n\n    return last_char.isalpha() and (not prev_chars or not prev_chars[-1].isalpha())  # Check if the last char is a letter and it's not part of a word"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n\n    if not negative:\n        negative = None\n    else:\n        negative.sort()\n        negative = negative[-1]\n\n    if not positive:\n        positive = None\n    else:\n        positive.sort()\n        positive = positive[0]\n\n    return (negative, positive)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    if n <= 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    prime_words = []\n    words = sentence.split()\n    \n    for word in words:\n        if all(int(i) != int(j) for i, j in zip(str(ord(c)) for c in word, str(ord(c)) for c in word[1:])):\n            prime_words.append(word)\n            \n    return ' '.join(prime_words)"}
{"task_id": "python/66", "language": "python", "completion": "def gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef simplify(x, n):\n    # Convert strings to integers\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the greatest common divisor of both denominators\n    common_divisor = gcd(x_den, n_den)\n\n    # Simplify both fractions\n    simplified_x = str(x_num//common_divisor) + '/' + str(x_den//common_divisor)\n    simplified_n = str(n_num//common_divisor) + '/' + str(n_den//common_divisor)\n\n    # Calculate the product of x and n\n    product_xn = str((x_num*n_num)//common_divisor) + '/' + str(x_den*n_den//common_divisor)\n\n    return product_xn == \"1/1\""}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    return sorted((num, sum(map(int, str(abs(num))))) for num in nums)"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and str(abs(num))[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    a = [(i * i - i + 1) % 3 for i in range(1, n+1)]\n    \n    return sum((a[i] == 0 and any(a[j] == 1 for j in range(i+1, n+1))) or \n               (a[i] == 1 and any(a[j] == 2 for j in range(i+1, n+1)))) for i in range(n))"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    result = tuple(planets[index1+1:index2])\n    return result"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0: \n                total += (num ** 2) * 2\n    return total"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = 0\n    \n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = len(extension) - cap\n        \n        strength = cap - sm\n        \n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            strongest_extension = extension\n            max_strength = strength\n            \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    \n    for i in range(len(b)):\n        if a[i:i+len(b)] == b:\n            return True\n            \n    rotated_b = b[1:] + b[0]\n    \n    for i in range(len(b)):\n        if a[i:i+len(b)] == rotated_b:\n            return True\n            \n    return False"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'xl', 50: 'l', 90: 'xc', 100: 'c', \n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        \n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure a <= b <= c\n    a, b, c = sorted([a, b, c])\n    \n    # Check if Pythagorean theorem holds\n    return a**2 + b**2 == c**2"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if any(c.isalpha() for c in s) else s[::-1]"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if str(i).endswith('0') or str(i).endswith('2'), '4', '6', '8']"}

{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n\n    for (let i = 0; i < operations.length; i++) {\n        if (i % 2 === 0) { // Einzahlung\n            balance += operations[i];\n        } else { // Abhebung\n            balance -= operations[i];\n\n            if (balance < 0) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n};"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): Array<number> {\n    let sum = 0;\n    let product = 1;\n\n    for (const number of numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    return [sum, product];\n};"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string) : string {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    const bitA = parseInt(a[i], 2);\n    const bitB = parseInt(b[i], 2);\n    const xorResult = bitA ^ bitB;\n    result += xorResult.toString(2);\n  }\n  return result;\n};"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n  if (!strings.length) return null; // empty array, return null\n  let longestString = strings[0]; // start with the first string\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    } else if (strings[i].length === longestString.length) {\n      // in case of a tie, keep the first one\n      break;\n    }\n  }\n  return longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    if (b === 0) return a;\n    return greatest_common_divisor(b, a % b);\n};"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sortNumbers = function(numbers: string): string {\n    const numArray = numbers.split(' ');\n    const validOptions = ['null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht', 'neun'];\n    const sortedNums = numArray.filter(num => validOptions.includes(num)).sort((a, b) => {\n        if (validOptions.indexOf(a) < validOptions.indexOf(b)) return -1;\n        if (validOptions.indexOf(a) > validOptions.indexOf(b)) return 1;\n        return 0;\n    }).join(' ');\n    return sortedNums;\n};"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    return numbers.map((num) => (num - min) / (max - min));\n};"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string) : string  {\n    return string0.split('').map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n};"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n  return l.filter((x) => x > 0);\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number) : boolean {\n    if (n <= 1) return false; // 0, 1, and negatives are not prime\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n        if (n % i === 0) return false; // if n is divisible by any number up to its square root, it's not prime\n    }\n    return true; // if no divisors found, it's a prime number!\n};"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function(l: Array<number>): Array<number> {\n  return [...new Set(l)].sort((a, b) => a - b);\n};"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import { fibonacci, isPrime } from 'mathjs';\n\nconst prime_fib = (n: number): number => {\n    let i = 0;\n    let fibNum = 0;\n    while (true) {\n        [fibNum] = fibonacci(i);\n        if (isPrime(fibNum)) {\n            if (++i === n) {\n                return fibNum;\n            }\n        }\n    }\n};"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function(l: Array<number>): boolean {\n  for (let i = 0; i < l.length; i++) {\n    const num1 = l[i];\n    for (let j = i + 1; j < l.length; j++) {\n      const num2 = l[j];\n      let foundMatch = false;\n      for (let k = 0; k < l.length; k++) {\n        if (k !== i && k !== j) {\n          const num3 = l[k];\n          if (num1 + num2 + num3 === 0) {\n            foundMatch = true;\n            break;\n          }\n        }\n      }\n      if (foundMatch) return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>) : boolean {\n  const seen: Set<number> = new Set();\n  for (const num of l) {\n    if (seen.has(-num)) return true;\n    seen.add(num);\n  }\n  return false;\n};"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n < 0) throw new Error(\"n must be a non-negative integer\");\n    const fib4Table = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        const a = fib4Table[i - 1];\n        const b = fib4Table[i - 2];\n        const c = fib4Table[i - 3];\n        const d = fib4Table[i - 4];\n        fib4Table.push(a + b + c + d);\n    }\n    return fib4Table[n];\n};"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function(l: Array<number>): number {\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArray.length / 2);\n\n  if (sortedArray.length % 2 === 0) {\n    // If the length is even, return the average of the two middle elements\n    return (sortedArray[middleIndex - 1] + sortedArray[middleIndex]) / 2;\n  } else {\n    // If the length is odd, return the single middle element\n    return sortedArray[middleIndex];\n  }\n};"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n  const cleanedText = text.toLowerCase().replace(/\\W+/g, ''); // Remove non-alphanumeric characters and convert to lowercase\n  return cleanedText === cleanedText.split('').reverse().join(''); // Compare with reversed string\n};"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string) : string {\n  return text.replace(/[aeiou]/gi, '');\n};"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number) : boolean  {\n    return l.every(x => x < t);\n};"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n  const set0 = new Set(s0.toLowerCase());\n  const set1 = new Set(s1.toLowerCase());\n  return set0.size === set1.size && [...set0].every((c) => set1.has(c));\n};"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 1) return n;\n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return b;\n};"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function(l1: Array<number>, l2: Array<number>): Array<number> {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1].filter((x) => set2.has(x));\n};"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n  let maxFactor = 1;\n  for (let i = 2; i * i <= n; i++) {\n    while (n % i === 0) {\n      maxFactor = i;\n      n /= i;\n    }\n  }\n  return maxFactor;\n};"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n};"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>) : Array<number>  {\n  const result = new Array(xs.length - 1);\n  for (let i = 1; i < xs.length; i++) {\n    result[i - 1] = xs[i] * i;\n  }\n  return result;\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const memo: { [key: number]: number } = {\n  0: 0,\n  1: 0,\n  2: 1\n};\n\nconst fibfib = (n: number): number => {\n  if (!memo[n]) {\n    const prev = fibfib(n - 1);\n    const prevprev = memo[n - 2];\n    const prevprevprev = memo[n - 3];\n    memo[n] = prev + prevprev + prevprevprev;\n  }\n  return memo[n];\n};"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i].toLowerCase();\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    } else if (c === 'y' && i === s.length - 1) { // y at the end of the string\n      count++;\n    }\n  }\n  return count;\n};"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n  const freqMap: { [key: number]: number } = {};\n\n  // Create a frequency map of each number in the list\n  lst.forEach((num) => {\n    if (!freqMap[num]) {\n      freqMap[num] = 1;\n    } else {\n      freqMap[num]++;\n    }\n  });\n\n  // Find the maximum number that has a frequency greater than or equal to its value\n  let maxNum = -1;\n  for (const num in freqMap) {\n    if (+num > 0 && freqMap[num] >= +num) {\n      if (maxNum === -1 || +num > maxNum) {\n        maxNum = +num;\n      }\n    }\n  }\n\n  return maxNum;\n};"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        const s = (a + b + c) / 2;\n        const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return parseFloat(area.toFixed(2)); // round to 2 decimal places\n    } else {\n        return -1; // not a valid triangle\n    }\n};"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function(q: Array<number>, w: number): boolean {\n  // Check if the array is palindromic\n  const isPalindromic = q.every((x, i) => x === q[q.length - 1 - i]);\n\n  // Check if the sum of elements is less than or equal to the maximum weight\n  const sumOfElements = q.reduce((acc, current) => acc + current, 0);\n  const isWithinWeightLimit = sumOfElements <= w;\n\n  return isPalindromic && isWithinWeightLimit;\n};"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function(a: number): boolean {\n  const primeFactors = [];\n  let factor = 2;\n\n  while (a > 1) {\n    if (a % factor === 0) {\n      primeFactors.push(factor);\n      a /= factor;\n    } else {\n      factor++;\n      while (factor * factor <= a && a % factor !== 0) {\n        factor++;\n      }\n      if (factor * factor > a) {\n        primeFactors.push(a);\n        break;\n      }\n      primeFactors.push(factor);\n      a /= factor;\n    }\n  }\n\n  return primeFactors.length === 3;\n};"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n  return `db${decimal.toString(2).padStart(16, '0')}db`;\n};"}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string) : boolean {\n  if (s.length < 3) return false; // String too short, not happy\n  for (let i = 0; i < s.length - 2; i++) {\n    const group1 = s.substring(i, i + 3);\n    let foundDuplicate = false;\n    for (let j = i + 3; j <= s.length; j += 3) {\n      const group2 = s.substring(j, j + 3);\n      if (group1 === group2) {\n        foundDuplicate = true;\n        break;\n      }\n    }\n    if (foundDuplicate) return false; // Found duplicate group\n  }\n  return true; // No duplicates, happy!\n};"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numericalLetterGrade = function (grades: Array<number>): Array<string> {\n  const letterGrades = [\n    { gpaThreshold: 4.0, letterGrade: 'A+' },\n    { gpaThreshold: 3.7, letterGrade: 'A' },\n    { gpaThreshold: 3.3, letterGrade: 'A-' },\n    { gpaThreshold: 3.0, letterGrade: 'B+' },\n    { gpaThreshold: 2.7, letterGrade: 'B' },\n    { gpaThreshold: 2.3, letterGrade: 'B-' },\n    { gpaThreshold: 2.0, letterGrade: 'C+' },\n    { gpaThreshold: 1.7, letterGrade: 'C' },\n    { gpaThreshold: 1.3, letterGrade: 'C-' },\n    { gpaThreshold: 1.0, letterGrade: 'D+' },\n    { gpaThreshold: 0.7, letterGrade: 'D' },\n    { gpaThreshold: 0.0, letterGrade: 'D-' },\n  ];\n\n  return grades.map((gpa) => {\n    for (const grade of letterGrades) {\n      if (gpa >= grade.gpaThreshold) {\n        return grade(letterGrade);\n      }\n    }\n    // Default to E if no matching GPA is found\n    return 'E';\n  });\n};"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const prime_length = function (string0: string) : boolean  {\n    const length = string0.length;\n    if (length <= 1) return false; // 0 and 1 are not prime numbers\n    for (let i = 2; i * i <= length; i++) {\n        if (length % i === 0) return false; // if the length is divisible by any number, it's not prime\n    }\n    return true;\n};"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    let sum = 0;\n    let binarySum = '';\n\n    // Convert N to a string and iterate over each character (digit)\n    for (let i = String(N).length - 1; i >= 0; i--) {\n        const digit = parseInt(String(N)[i]);\n        sum += digit;\n\n        // Convert the sum to binary and add it to the result\n        if ((sum >>> 0).toString(2) !== '0') {\n            binarySum = (sum >>> 0).toString(2);\n        }\n    }\n\n    return binarySum;\n};"}
{"task_id": "typescript/37", "language": "typescript", "completion": "const getRow = function (lst: Array<Array<number>>, x: number): Array<{ row: number, col: number }> {\n  const result: { row: number; col: number }[] = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    if (x === lst[i][0]) {\n      for (let j = lst[i].length - 1; j >= 0; j--) {\n        result.push({ row: i, col: j });\n      }\n    }\n  }\n\n  return result;\n};"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): any | null {\n  if (lst.length === 0) return null; // empty list, no smallest element\n  lst.sort((a, b) => a - b); // sort the list in ascending order\n  const smallest = lst[0]; // find the smallest element\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > smallest) return lst[i]; // found the next smallest element\n  }\n  return null; // no next smallest element (all elements are equal)\n};"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n  let boredCount = 0;\n  const sentences = S.split(/\\.|\\?|\\!/);\n  for (const sentence of sentences) {\n    if (sentence.trim().startsWith(\"Ich \")) {\n      boredCount++;\n    }\n  }\n  return boredCount;\n};"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (n: number): boolean => {\n  if (n <= 1) return false;\n  for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst sumOfDigits = (n: number): number => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\nconst skjkasdkd = (lst: Array<number>): number => {\n  const maxPrime = lst.reduce((max, num) => {\n    if (isPrime(num)) return Math.max(max, num);\n    return max;\n  }, 0);\n  return sumOfDigits(maxPrime);\n};"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function(dict: Map<any, string>): boolean {\n    if (dict.size === 0) {\n        return false;\n    }\n    let allLower = true;\n    let allUpper = true;\n\n    for (let [key, value] of dict) {\n        if (key.toString().toLowerCase() !== key.toString()) {\n            allLower = false;\n        }\n        if (key.toString().toUpperCase() !== key.toString()) {\n            allUpper = false;\n        }\n    }\n\n    return allLower || allUpper;\n};"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function (value: string): number {\n    const num = parseFloat(value);\n    if (isNaN(num)) {\n        throw new Error(`Invalid input: ${value}`);\n    }\n    const intPart = Math.floor(num);\n    const fracPart = num - intPart;\n    if (fracPart >= 0.5) {\n        return intPart + 1;\n    } else {\n        return intPart - (fracPart < 0.5 ? 0 : 1);\n    }\n};"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    let result: Array<number> = [n];\n    while (n > 0) {\n        n = (n % 2 === 1 ? Math.floor((Math.sqrt(8 * n + 1) - 1) / 2) * 2 + 1 : Math.floor((Math.sqrt(8 * n + 4) - 2) / 2) * 2);\n        result.push(n);\n    }\n    return result;\n};"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function(s: string): Array<string> {\n  return s.split(/[,\\s]+/).filter(word => word !== '');\n};"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function(x: number, y: number): number {\n  if (x > y) {\n    return -1;\n  }\n  \n  let maxEven = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && i > maxEven) {\n      maxEven = i;\n    }\n  }\n  \n  return maxEven;\n};"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any {\n    if (n > m) return -1;\n\n    const sum = Math.floor((m + n) / 2);\n    const average = Math.round(sum);\n\n    let binary = average.toString(2);\n    while (binary.length < 4) { // pad with leading zeros\n        binary = '0' + binary;\n    }\n\n    return `0b${binary}`;\n};"}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = (n: number): Array<number> => {\n  const result: Array<number> = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) { // i is even\n      result.push(factorial(i));\n    } else { // i is odd\n      let sum = 0;\n      for (let j = 1; j <= i; j++) {\n        sum += j;\n      }\n      result.push(sum);\n    }\n  }\n\n  return result;\n};\n\nconst factorial = (n: number): number => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }\n};"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): [number, number] {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const isPalindrome = isIntegerPalindrome(i);\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n\n  return [evenCount, oddCount];\n};\n\nconst isIntegerPalindrome = function (n: number): boolean {\n  const str = n.toString();\n  let left = 0;\n  let right = str.length - 1;\n\n  while (left < right) {\n    if (str[left] !== str[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n\n  return true;\n};"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function(arr: Array<number>): boolean {\n  if (!arr.length) return true; // empty array, always possible to sort\n\n  let isPossible = false;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) { // descending pair found\n      const maxIndex = i + 1; // store the index of the largest element\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[j] >= arr[maxIndex]) maxIndex = j; // find the next largest element\n      }\n      isPossible = true;\n      break; // found a possible sorting path, no need to continue\n    }\n  }\n\n  return isPossible;\n};"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n  const oddCount = lst1.filter((x) => x % 2 !== 0).length;\n  if (oddCount > lst2.length - oddCount) return \"NO\"; // not possible to make all even\n  const result = [...lst1];\n  for (let i = 0; i < oddCount; i++) {\n    const idx1 = lst1.findIndex((x) => x % 2 !== 0);\n    const idx2 = lst2.findIndex((x) => x % 2 !== 0);\n    [result[idx1], result[idx2]] = [result[idx2], result[idx1]];\n  }\n  return oddCount === 0 ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function(s: string, c: string): Array<any> {\n    let result = s.split('').filter((char: string) => !c.includes(char)).join('');\n    let isPalindrome = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n};"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = (grid: Array<Array<number>>, capacity: number): number => {\n  let totalWater = 0;\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  // Calculate the total water in all wells\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        totalWater += 1;\n      }\n    }\n  }\n\n  // Calculate the maximum number of bucket fillings required\n  let maxFillings = Math.ceil(totalWater / capacity);\n\n  return maxFillings;\n};"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function(s: string, n: number): Array<string> {\n  const words: Array<string> = [];\n  let currentWord: string = '';\n  let consonantCount: number = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (!isNaN(Number(char))) continue; // skip non-alphabetic characters\n\n    if (char.match(/[a-zA-Z]/)) { // check if character is a letter\n      currentWord += char;\n      if (char.toLowerCase() !== 'a' && char.toLowerCase() !== 'e' && char.toLowerCase() !== 'i' && char.toLowerCase() !== 'o' && char.toLowerCase() !== 'u') {\n        consonantCount++; // increment consonant count for this word\n      }\n    } else { // end of a word, check if it meets the condition\n      if (consonantCount === n) {\n        words.push(currentWord);\n      }\n      currentWord = '';\n      consonantCount = 0;\n    }\n  }\n\n  return words;\n};"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n  return arr.slice().sort((a, b) => b - a).slice(0, k);\n};"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const addElements = function (arr: Array<number>, k: number): number {\n  const filteredArr = arr.slice(0, k).filter(x => String(x).length <= 2);\n  return filteredArr.reduce((acc, curr) => acc + curr, 0);\n};"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const intersection = function(interval1: [number, number], interval2: [number, number]): string {\n    const start1 = Math.max(interval1[0], interval2[0]);\n    const end1 = Math.min(interval1[1], interval2[1]);\n\n    if (start1 > end1) {\n        return \"NO\";\n    }\n\n    const length = end1 - start1 + 1;\n    let isPrime = true;\n\n    for (let i = 2; i * i <= length; i++) {\n        if (length % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n\n    return isPrime ? \"YES\" : \"NO\";\n};"}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function(n: number): Array<number> {\n  const result: Array<number> = [1];\n\n  for (let i = 2; i <= n; i++) {\n    let tribonacciNumber;\n    if (i % 2 === 0) {\n      tribonacciNumber = 1 + i / 2;\n    } else {\n      tribonacciNumber = result[i - 2] + result[i - 3] + result[i - 1];\n    }\n    result.push(tribonacciNumber);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) { // check if digit is odd\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n};"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n  let openCount = 0;\n  let closeCount = 0;\n\n  for (let i = 0; i < string0.length; i++) {\n    if (string0[i] === '[') {\n      openCount++;\n      closeCount = 0;\n    } else if (string0[i] === ']') {\n      closeCount++;\n      if (openCount > closeCount) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};"}
{"task_id": "typescript/60", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n    return math.sum(lst.map(x => Math.ceil(x) ** 2));\n}"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const checkIfLastCharIsALetter = function(txt: string): boolean {\n  const words = txt.split(/\\s+/); // split on one or more whitespace characters\n  if (words.length === 0) return false; // empty string or no words\n\n  const lastWord = words[words.length - 1];\n  const lastChar = lastWord.charAt(lastWord.length - 1);\n\n  return /^[a-zA-Z]+$/.test(lastWord) ? false : /[a-zA-Z]/.test(lastChar);\n};"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function(arr: Array<number>): number {\n  let maxPrevIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      return i;\n    }\n    maxPrevIndex = Math.max(maxPrevIndex, i);\n  }\n  return -1;\n};"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>) : Array<any> {\n  const negativeNumbers = lst.filter(n => n < 0);\n  const positiveNumbers = lst.filter(n => n > 0);\n\n  if (negativeNumbers.length === 0 && positiveNumbers.length === 0) {\n    return [null, null];\n  } else if (negativeNumbers.length === 0) {\n    return [null, Math.min(...positiveNumbers)];\n  } else if (positiveNumbers.length === 0) {\n    return [Math.max(...negativeNumbers), null];\n  } else {\n    return [Math.max(...negativeNumbers), Math.min(...positiveNumbers)];\n  }\n};"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Brazilian factorial is only defined for positive integers\");\n    }\n\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n};\n\nconst factorial = function (n: number): number {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n};"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const wordsInSentence = function (sentence: string): string {\n    const words = sentence.split(' ');\n    const result: string[] = [];\n\n    for (const word of words) {\n        if (isPrime(word.length)) {\n            result.push(word);\n        }\n    }\n\n    return result.join(' ');\n};\n\nfunction isPrime(n: number): boolean {\n    if (n <= 1) {\n        return false;\n    }\n\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function(x: string, n: string): boolean {\n  const [xA, xB] = x.split('/');\n  const [nA, nB] = n.split('/');\n\n  // Convert strings to numbers\n  const a = parseInt(xA) * parseInt(nB);\n  const b = parseInt(xB) * parseInt(nB);\n\n  // Check if the result is an integer\n  return Math.abs(a - b) === 0;\n};"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function(nums: Array<number>): Array<number> {\n  return nums.sort((a, b) => {\n    const sumA = a.toString().split('').reduce((acc, curr) => parseInt(curr), 0);\n    const sumB = b.toString().split('').reduce((acc, curr) => parseInt(curr), 0);\n\n    if (sumA === sumB) {\n      // If sums are equal, sort by original index\n      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      // Otherwise, sort by sum\n      return sumA - sumB;\n    }\n  });\n};"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>) : number {\n    let count = 0;\n    for (const num of nums) {\n        if (Math.abs(num) > 10 && isUnpairedLastDigit(num)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nfunction isUnpairedLastDigit(n: number): boolean {\n    const str = n.toString();\n    return parseInt(str[str.length - 1]) % 2 !== 0;\n}"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function(n: number): number {\n  const a: number[] = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (i < j && j < k) {\n          const sum = a[i] + a[j] + a[k];\n          if (sum % 3 === 0) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n\n  return count;\n};"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> | [] {\n  const planets = [\"Merkur\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptun\"];\n  const result = [];\n\n  if (!planets.includes(planet1) || !planets.includes(planet2)) {\n    return [];\n  }\n\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n\n  for (let i = Math.max(0, index1 - 1); i <= Math.min(index2 + 1, planets.length - 1); i++) {\n    result.push(planets[i]);\n  }\n\n  return result;\n};"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst x_or_y = function (n: number, x: number, y: number): number {\n  if (isPrime(n)) return x;\n  else return y;\n};"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>) : number  {\n    return lst.filter(x => x % 2 !== 0 && x >= 0).map(x => Math.pow(x, 2)).reduce((a, b) => a + b, 0);\n};"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (className: string, extensions: string[]) {\n    let strongestExtension = '';\n    let strongestScore = 0;\n\n    for (const extension of extensions) {\n        const cap = extension.toUpperCase().split('').filter(c => c.match(/[A-Z]/)).length;\n        const sm = extension.toLowerCase().split('').filter(c => c.match(/^[a-z]+$/)).length;\n        const score = cap - sm;\n\n        if (score > strongestScore) {\n            strongestExtension = extension;\n            strongestScore = score;\n        }\n    }\n\n    return `${className}.${strongestExtension}`;\n};"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string) : boolean {\n  const bRotations = [b, b.substring(1) + b[0], b.slice().reverse()];\n  for (let i = 0; i < a.length - b.length + 1; i++) {\n    if (bRotations.some(rotatedB => a.indexOf(rotatedB) !== -1)) {\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number0: number): string {\n    if (!isIntBetween1And1000(number0)) throw new Error(`Invalid input: ${number0}`);\n\n    let roman = '';\n    const numerals = [\n        { value: 1000, numeral: 'M' },\n        { value: 900, numeral: 'CM' },\n        { value: 500, numeral: 'D' },\n        { value: 400, numeral: 'CD' },\n        { value: 100, numeral: 'C' },\n        { value: 90, numeral: 'XC' },\n        { value: 50, numeral: 'L' },\n        { value: 40, numeral: 'XL' },\n        { value: 10, numeral: 'X' },\n        { value: 9, numeral: 'IX' },\n        { value: 5, numeral: 'V' },\n        { value: 4, numeral: 'IV' },\n        { value: 1, numeral: 'I' }\n    ];\n\n    for (const numeral of numerals) {\n        while (number0 >= numeral.value) {\n            roman += numeral.numeral;\n            number0 -= numeral.value;\n        }\n    }\n\n    return roman.toLowerCase();\n};\n\nfunction isIntBetween1And1000(n: number): boolean {\n    return n > 0 && n <= 1000;\n}"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number) : boolean {\n  const halfPerimeter = (a + b + c) / 2;\n  const area = Math.sqrt(halfPerimeter * (halfPerimeter - a) * (halfPerimeter - b) * (halfPerimeter - c));\n  \n  // Ein Dreieck ist rechtwinklig, wenn sein Fl\u00e4che 0 ist.\n  return area === 0;\n};"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function(s: string): string {\n  let result = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    const c = s[i];\n    if (!/[a-zA-Z]/.test(c)) {\n      // If the character is not a letter, just add it to the result\n      result += c;\n    } else {\n      // If the character is a letter, toggle its case\n      result += (c === c.toUpperCase()) ? c.toLowerCase() : c.toUpperCase();\n    }\n  }\n  return result;\n};"}
{"task_id": "typescript/78", "language": "typescript", "completion": "const crypto = require('crypto');\n\nconst string_to_md5 = function (text: string): string | null {\n  if (!text) return null; // empty string, return null\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex').toString();\n};"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function(a: number, b: number): Array<number> {\n    let result = [];\n    for (let i = Math.max(a, b); i >= Math.min(a, b); i--) {\n        if (i % 2 === 0) { // Check if the number is even\n            result.push(i);\n        }\n    }\n    return result;\n};"}

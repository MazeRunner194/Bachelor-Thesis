{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.util.*;\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        // Sort the list of numbers\n        Collections.sort(numbers);\n        \n        // Iterate through the sorted list and check for close elements\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) {\n                return true;\n            }\n        }\n        \n        // If no close elements are found, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // False\n        System.out.println(hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // True\n    }\n}"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     */\n    public static List<String> separateParenGroups(String parenString) {\n        // Remove all spaces from the input string\n        String cleanedString = parenString.replaceAll(\"\\\\s\", \"\");\n        \n        // Stack to keep track of the indices of opening parentheses\n        Stack<Integer> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        int startIndex = -1;\n        \n        for (int i = 0; i < cleanedString.length(); i++) {\n            char ch = cleanedString.charAt(i);\n            if (ch == '(') {\n                stack.push(i);\n            } else if (ch == ')') {\n                if (!stack.isEmpty()) {\n                    int openIndex = stack.pop();\n                    // If this is the first matching pair, record the start index\n                    if (startIndex == -1) {\n                        startIndex = openIndex;\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Unbalanced parentheses in input string.\");\n                }\n            }\n            \n            // If stack is empty after popping, we have a complete group\n            if (stack.isEmpty() && startIndex != -1) {\n                result.add(cleanedString.substring(startIndex, i + 1));\n                // Reset for the next group\n                startIndex = -1;\n            }\n        }\n        \n        // If there are unmatched opening parentheses left in the stack, it means unbalanced input\n        if (!stack.isEmpty()) {\n            throw new IllegalArgumentException(\"Unbalanced parentheses in input string.\");\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        String testString = \"( ) (( )) (( )( ))\";\n        List<String> groups = separateParenGroups(testString);\n        System.out.println(groups); // Output: [(), (()), (()())]\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "class TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     */\n    public static Double truncateNumber(Double number) {\n        if (number == null || number < 0) {\n            throw new IllegalArgumentException(\"Input must be a positive floating point number.\");\n        }\n        \n        // Separate the integer and fractional parts\n        int integerPart = number.intValue();\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n}"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     */\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        \n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (Integer) operation;\n                if (balance < 0) {\n                    return true;\n                }\n            } else {\n                System.out.println(\"Invalid operation: \" + operation);\n                return false;\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        List<Object> operations1 = Arrays.asList(1, 2, 3);\n        System.out.println(belowZero(operations1)); // Expected output: False\n        \n        List<Object> operations2 = Arrays.asList(1, 2, -4, 5);\n        System.out.println(belowZero(operations2)); // Expected output: True\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        List<Double> deviations = new ArrayList<>();\n        for (double num : numbers) {\n            deviations.add(Math.abs(num - mean));\n        }\n\n        double madSum = 0;\n        for (double deviation : deviations) {\n            madSum += deviation;\n        }\n\n        return madSum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(\"Mean Absolute Deviation: \" + meanAbsoluteDeviation(numbers)); // Output should be 1.0\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Object> result = new ArrayList<>(numbers.size() * 2 - 1); // Pre-allocate space for efficiency\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i > 0) {\n                result.add(delimeter);\n            }\n            result.add(numbers.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3);\n        int delimeter = 4;\n        System.out.println(intersperse(numbers, delimeter)); // Output: [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "// Split the input string by spaces to get individual groups of parentheses\n        String[] groups = parenString.split(\" \");\n        List<Integer> depths = new ArrayList<>();\n\n        // Iterate over each group\n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n\n            // Iterate over each character in the group\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (ch == ')') {\n                    currentDepth--;\n                }\n            }\n\n            // Add the maximum depth of this group to the list\n            depths.add(maxDepth);\n        }\n\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"(()()) ((())) () ((())()())\";\n        List<Integer> result = parseNestedParens(input);\n        System.out.println(result); // Output: [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "if (strings == null || substring == null) {\n            return Collections.emptyList();\n        }\n\n        List<Object> filteredStrings = new ArrayList<>();\n        for (Object str : strings) {\n            if (str instanceof String && ((String) str).contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(filterBySubstring(Arrays.asList(), \"a\")); // []\n        System.out.println(filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // ['abc', 'bacd', 'array']\n    }\n}"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        // Check if the list is empty\n        if (numbers.isEmpty()) {\n            return Arrays.asList(sum, product);\n        }\n        \n        for (Object num : numbers) {\n            if (num instanceof Integer) {\n                sum += (Integer) num;\n                product *= (Integer) num;\n            }\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers1 = new ArrayList<>();\n        System.out.println(sumProduct(numbers1)); // Expected output: (0, 1)\n        \n        List<Object> numbers2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(sumProduct(numbers2)); // Expected output: (10, 24)\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     */\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int maxSoFar = Integer.MIN_VALUE;\n\n        for (int num : numbers) {\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.add(maxSoFar);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        System.out.println(rollingMax(numbers)); // Output: [1, 2, 3, 3, 3, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     */\n    public static String makePalindrome(String string) {\n        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n\n        int length = string.length();\n        for (int i = 0; i < length; i++) {\n            // Check if the substring from index i to end is a palindrome\n            if (isPalindrome(string, i, length - 1)) {\n                String prefix = string.substring(0, i);\n                String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n                return string + reversedPrefix;\n            }\n        }\n\n        // If no palindromic suffix is found, simply reverse the entire string\n        String reversedString = new StringBuilder(string).reverse().toString();\n        return string + reversedString;\n    }\n\n    private static boolean isPalindrome(String str, int start, int end) {\n        while (start < end) {\n            if (str.charAt(start) != str.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(makePalindrome(\"\")); // Output: \"\"\n        System.out.println(makePalindrome(\"cat\")); // Output: \"catac\"\n        System.out.println(makePalindrome(\"cata\")); // Output: \"catac\"\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n        // Ensure both strings are of the same length by padding the shorter one with leading zeros\n        int maxLength = Math.max(a.length(), b.length());\n        a = String.format(\"%\" + maxLength + \"s\", a).replace(' ', '0');\n        b = String.format(\"%\" + maxLength + \"s\", b).replace(' ', '0');\n\n        StringBuilder result = new StringBuilder();\n\n        // Perform XOR operation character by character\n        for (int i = 0; i < maxLength; i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            if (charA == charB) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test the function with example inputs\n        String a = \"010\";\n        String b = \"110\";\n        System.out.println(\"XOR of '\" + a + \"' and '\" + b + \"' is: '\" + stringXor(a, b) + \"'\");\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n     * null\n     * \n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * \n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     */\n    public static String longest(List<Object> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n        \n        String longestString = null;\n        \n        for (String s : strings) {\n            if (s != null && (longestString == null || s.length() > longestString.length())) {\n                longestString = s;\n            }\n        }\n        \n        return longestString;\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the first integer: \");\n        int num1 = scanner.nextInt();\n        System.out.print(\"Enter the second integer: \");\n        int num2 = scanner.nextInt();\n        \n        int gcd = greatestCommonDivisor(num1, num2);\n        System.out.println(\"The Greatest Common Divisor of \" + num1 + \" and \" + num2 + \" is \" + gcd);\n    }\n}\n\nThis code defines a class `GreatestCommonDivisor` with a method `greatestCommonDivisor` that calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm. The main method allows user input for two integers and prints their GCD."}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        List<String> prefixes = allPrefixes(input);\n        System.out.println(\"All prefixes: \" + prefixes);\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     */\n    public static String stringSequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(i);\n        }\n        return result.toString();\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n        // Convert the string to lowercase to make the comparison case-insensitive\n        string = string.toLowerCase();\n        \n        // Use a HashSet to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate through each character in the string and add it to the set\n        for (char c : string.toCharArray()) {\n            distinctChars.add(c);\n        }\n        \n        // The size of the set represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(countDistinctCharacters(\"Jerry\"));  // Output: 4\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.util.*;\n\nclass ParseMusic {\n    public static List<Integer> parseMusic(String musicString) {\n        List<Integer> beatsList = new ArrayList<>();\n        String[] notes = musicString.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beatsList.add(4);\n            } else if (note.equals(\"o|\")) {\n                beatsList.add(2);\n            } else if (note.equals(\".|\")) {\n                beatsList.add(1);\n            }\n        }\n        \n        return beatsList;\n    }\n\n    public static void main(String[] args) {\n        String musicString = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> result = parseMusic(musicString);\n        System.out.println(result); // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "class HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 3\n     */\n    public static int howManyTimes(String string, String substring) {\n        if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int step = substring.length();\n        \n        for (int i = 0; i <= string.length() - step; i += step) {\n            if (string.substring(i, i + step).equals(substring)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     */\n    public static String sortNumbers(String numbers) {\n        // Map number words to their corresponding numerical values\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n\n        // Split the input string into an array of number words\n        String[] numberWords = numbers.split(\" \");\n\n        // Create a list to hold the numerical values\n        List<Integer> numberValues = new ArrayList<>();\n\n        // Convert each number word to its corresponding numerical value and add it to the list\n        for (String word : numberWords) {\n            if (wordToNumber.containsKey(word)) {\n                numberValues.add(wordToNumber.get(word));\n            }\n        }\n\n        // Sort the list of numerical values\n        Collections.sort(numberValues);\n\n        // Create a list to hold the sorted number words\n        List<String> sortedWords = new ArrayList<>();\n\n        // Convert each sorted numerical value back to its corresponding number word and add it to the list\n        for (int value : numberValues) {\n            for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n                if (entry.getValue().equals(value)) {\n                    sortedWords.add(entry.getKey());\n                    break;\n                }\n            }\n        }\n\n        // Join the sorted number words into a single space-delimited string\n        return String.join(\" \", sortedWords);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sortNumbers(\"three one five\")); // Output: \"one three five\"\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.util.*;\n\nclass FindClosestElements {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        // Initialize the closest pair and minimum difference\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        // Iterate through all pairs of numbers\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    closestPair.clear();\n                    if (numbers.get(i) < numbers.get(j)) {\n                        closestPair.add(numbers.get(i));\n                        closestPair.add(numbers.get(j));\n                    } else {\n                        closestPair.add(numbers.get(j));\n                        closestPair.add(numbers.get(i));\n                    }\n                }\n            }\n        }\n\n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // Output: [2.0, 2.2]\n        System.out.println(findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // Output: [2.0, 2.0]\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.util.*;\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n        \n        // Find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Create a new list to store the rescaled numbers\n        List<Double> rescaleList = new ArrayList<>();\n        \n        // Apply the linear transformation\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / (max - min);\n            rescaleList.add(rescaledValue);\n        }\n        \n        return rescaleList;\n    }\n    \n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(numbers)); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> filteredValues = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredValues.add(value);\n            }\n        }\n        \n        return filteredValues;\n    }\n}"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     */\n    public static int strlen(String string) {\n        if (string == null) {\n            return 0;\n        }\n        return string.length();\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     */\n    public static int largestDivisor(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n        \n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        \n        // If no divisor is found, the number itself is prime and its only divisors are 1 and itself.\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        int number = scanner.nextInt();\n        try {\n            int largestDiv = largestDivisor(number);\n            System.out.println(\"The largest divisor of \" + number + \" is: \" + largestDiv);\n        } catch (IllegalArgumentException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.util.*;\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     */\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        // Handle the case for 1 separately since it doesn't have prime factors\n        if (n == 1) {\n            return factors;\n        }\n        \n        // Check for smallest prime factor and divide n by this factor until n becomes 1\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 1, then it must be a prime number itself\n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(factorize(8)); // Output: [2, 2, 2]\n        System.out.println(factorize(25)); // Output: [5, 5]\n        System.out.println(factorize(70)); // Output: [2, 5, 7]\n    }\n}"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "// Create a LinkedHashSet to maintain the order of elements and avoid duplicates\n        Set<Object> set = new LinkedHashSet<>();\n        \n        // Add all elements from the list to the set\n        for (Object number : numbers) {\n            set.add(number);\n        }\n        \n        // Convert the set back to a list\n        List<Object> resultList = new ArrayList<>(set);\n        \n        return resultList;\n    }\n    \n    public static void main(String[] args) {\n        List<Object> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(\"Original list: \" + numbers);\n        \n        List<Object> uniqueNumbers = removeDuplicates(numbers);\n        System.out.println(\"List after removing duplicates: \" + uniqueNumbers);\n    }\n}\n```\nThis code defines a class `RemoveDuplicates` with a method `removeDuplicates` that takes a list of objects and returns a new list with all elements occurring more than once removed, while maintaining the order of the remaining elements. The main method demonstrates how to use this method with an example list."}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "StringBuilder flippedString = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flippedString.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flippedString.append(Character.toLowerCase(c));\n            } else {\n                flippedString.append(c);\n            }\n        }\n        return flippedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a string: \");\n        String input = scanner.nextLine();\n        String output = flipCase(input);\n        System.out.println(\"Flipped case string: \" + output);\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     */\n    public static String concatenate(List<Object> strings) {\n        StringBuilder result = new StringBuilder();\n        for (Object str : strings) {\n            if (str != null) {\n                result.append(str);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Object> test1 = new ArrayList<>();\n        System.out.println(concatenate(test1)); // Output: ''\n\n        List<Object> test2 = Arrays.asList('a', 'b', 'c');\n        System.out.println(concatenate(test2)); // Output: 'abc'\n    }\n}"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "List<Object> filteredList = new ArrayList<>();\n        for (Object str : strings) {\n            if (str instanceof String && ((String) str).startsWith(prefix)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        List<Object> input = Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\");\n        String prefix = \"a\";\n        List<Object> result = filterByPrefix(input, prefix);\n        System.out.println(result); // Output: [abc, array]\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     */\n    public static List<Integer> getPositive(List<Object> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (Object num : l) {\n            if (num instanceof Integer && (int)num > 0) {\n                positiveNumbers.add((Integer) num);\n            }\n        }\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Object> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        \n        System.out.println(getPositive(list1)); // Output: [2, 5, 6]\n        System.out.println(getPositive(list2)); // Output: [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "class IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     *\n     */\n    public static Boolean isPrime(int n) {\n        // Handle edge cases: numbers less than 2 are not prime\n        if (n <= 1) {\n            return false;\n        }\n        \n        // Check divisibility by 2 and odd numbers up to the square root of n\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        // If no divisors were found, the number is prime\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.util.*;\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted.\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        // Create a list to hold elements at indices divisible by three\n        List<Integer> divisibleByThree = new ArrayList<>();\n        \n        // Collect elements at indices divisible by three\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            }\n        }\n        \n        // Sort the collected elements\n        Collections.sort(divisibleByThree);\n        \n        // Create a new list to hold the result\n        List<Integer> sortedList = new ArrayList<>(l);\n        \n        // Replace elements at indices divisible by three with their sorted counterparts\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sortedList.set(i, divisibleByThree.get(j++));\n            }\n        }\n        \n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Original: \" + test1);\n        System.out.println(\"Sorted Thirds: \" + sortThird(test1));\n        \n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        System.out.println(\"Original: \" + test2);\n        System.out.println(\"Sorted Thirds: \" + sortThird(test2));\n    }\n}"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "// Create a new HashSet to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        \n        // Convert the set back to a list and sort it\n        List<Integer> sortedUniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedUniqueList);\n        \n        return sortedUniqueList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original list: \" + numbers);\n        List<Integer> uniqueNumbers = unique(numbers);\n        System.out.println(\"Unique and sorted list: \" + uniqueNumbers);\n    }\n}"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     */\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List is null or empty\");\n        }\n        return Collections.max(l);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        \n        System.out.println(maxElement(list1)); // Output: 3\n        System.out.println(maxElement(list2)); // Output: 123\n    }\n}"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     */\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && containsDigit7(i)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private static boolean containsDigit7(int number) {\n        while (number > 0) {\n            if (number % 10 == 7) {\n                return true;\n            }\n            number /= 10;\n        }\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fizzBuzz(50));  // Output: 0\n        System.out.println(fizzBuzz(78));  // Output: 2\n        System.out.println(fizzBuzz(79));  // Output: 3\n    }\n}"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "// Create a list to store the even-indexed values\n        List<Integer> evens = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            evens.add(l.get(i));\n        }\n\n        // Sort the even-indexed values\n        Collections.sort(evens);\n\n        // Create a new list to store the result\n        List<Integer> sortedList = new ArrayList<>(l);\n\n        // Replace the even-indexed values in the original list with the sorted ones\n        int index = 0;\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedList.set(i, evens.get(index++));\n        }\n\n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(5, 6, 3, 4);\n\n        System.out.println(\"Original list: \" + list1);\n        System.out.println(\"Sorted even indices: \" + sortEven(list1));\n\n        System.out.println(\"Original list: \" + list2);\n        System.out.println(\"Sorted even indices: \" + sortEven(list2));\n    }\n}\n\nThis code defines a class `SortEven` with a static method `sortEven` that takes a list of integers and returns a new list where the values at even indices are sorted, while the values at odd indices remain unchanged. The main method demonstrates how to use this function with two example lists."}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     */\n    public static int primeFib(int n) {\n        List<Integer> fibPrimes = new ArrayList<>();\n        int a = 0, b = 1;\n        \n        while (true) {\n            int nextFib = a + b;\n            if (isPrime(nextFib)) {\n                fibPrimes.add(nextFib);\n            }\n            a = b;\n            b = nextFib;\n            \n            if (fibPrimes.size() >= n) {\n                break;\n            }\n        }\n        \n        return fibPrimes.get(n - 1);\n    }\n    \n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(primeFib(n));\n    }\n}"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets\n        Collections.sort(l);\n        \n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true; // Found a triplet that sums to zero\n                } else if (sum < 0) {\n                    left++; // Move the left pointer right to increase the sum\n                } else {\n                    right--; // Move the right pointer left to decrease the sum\n                }\n            }\n        }\n        \n        return false; // No triplet found that sums to zero\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CarRaceCollision {\n    /**\n     * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right; simultaneously, a different set of n cars\n     * are driving right to left.  The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     * \n     * This function outputs the number of such collisions.\n     */\n    public static int carRaceCollision(int n) {\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the number of cars in each direction: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Number of collisions: \" + carRaceCollision(n));\n    }\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n        // Create a new list to store the incremented values\n        List<Object> result = new ArrayList<>();\n        \n        // Iterate through the input list and increment each element by 1\n        for (Object num : l) {\n            if (num instanceof Integer) {\n                int value = ((Integer) num) + 1;\n                result.add(value);\n            } else {\n                throw new IllegalArgumentException(\"All elements must be integers.\");\n            }\n        }\n        \n        // Return the resulting list\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        // Create a HashSet to store the elements of the list\n        Set<Integer> seen = new HashSet<>();\n        \n        // Iterate through the list\n        for (int num : l) {\n            // Check if the complement (negative of the current number) is already in the set\n            if (seen.contains(-num)) {\n                return true; // If found, return True as we have found two numbers that sum to zero\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        // If no such pair is found, return False\n        return false;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // True\n        System.out.println(pairsSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     */\n    public static String changeBase(int x, int base) {\n        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base must be between 2 and 9.\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder); // Insert the remainder at the beginning of the string\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(changeBase(8, 3)); // Output: \"22\"\n        System.out.println(changeBase(8, 2)); // Output: \"1000\"\n        System.out.println(changeBase(7, 2)); // Output: \"111\"\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "class TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n        // Calculate the area using the formula: (1/2) * base * height\n        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter the length of the side (a): \");\n        int a = scanner.nextInt();\n        \n        System.out.print(\"Enter the height (h): \");\n        int h = scanner.nextInt();\n        \n        double area = triangleArea(a, h);\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     */\n    public static int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Initialize the base cases\n        int[] fib4Sequence = new int[n + 1];\n        fib4Sequence[0] = 0;\n        fib4Sequence[1] = 0;\n        fib4Sequence[2] = 2;\n        fib4Sequence[3] = 0;\n\n        // Compute the sequence iteratively\n        for (int i = 4; i <= n; i++) {\n            fib4Sequence[i] = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4];\n        }\n\n        return fib4Sequence[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // Output: 4\n        System.out.println(fib4(6)); // Output: 8\n        System.out.println(fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     */\n    public static Number median(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        int size = l.size();\n        \n        // If the size is odd, return the middle element\n        if (size % 2 == 1) {\n            return l.get(size / 2);\n        } else {\n            // If the size is even, return the average of the two middle elements\n            int mid1 = l.get((size - 1) / 2);\n            int mid2 = l.get(size / 2);\n            return (mid1 + mid2) / 2.0;\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(list1)); // Output: 3\n        \n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(list2)); // Output: 15.0\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     */\n    public static Boolean isPalindrome(String text) {\n        // Remove all non-alphanumeric characters and convert to lowercase\n        String cleanedText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        \n        // Check if the cleaned text is a palindrome\n        int left = 0;\n        int right = cleanedText.length() - 1;\n        \n        while (left < right) {\n            if (cleanedText.charAt(left) != cleanedText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     */\n    public static int modp(int n, int p) {\n        // Use BigInteger for modular exponentiation to handle large numbers safely\n        BigInteger base = new BigInteger(\"2\");\n        BigInteger result = base.modPow(new BigInteger(String.valueOf(n)), new BigInteger(String.valueOf(p)));\n        return result.intValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(modp(3, 5)); // Output: 3\n        System.out.println(modp(1101, 101)); // Output: 2\n        System.out.println(modp(0, 101)); // Output: 1\n        System.out.println(modp(3, 11)); // Output: 8\n        System.out.println(modp(100, 101)); // Output: 1\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "import java.util.*;\n\nclass RemoveVowels {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(removeVowels(\"\")); // ''\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n        System.out.println(removeVowels(\"abcdef\")); // 'bcdf'\n        System.out.println(removeVowels(\"aaaaa\")); // ''\n        System.out.println(removeVowels(\"aaBAA\")); // 'B'\n        System.out.println(removeVowels(\"zbcd\")); // 'zbcd'\n    }\n}"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        int threshold1 = 100;\n        System.out.println(belowThreshold(list1, threshold1)); // True\n\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        int threshold2 = 5;\n        System.out.println(belowThreshold(list2, threshold2)); // False\n    }\n}"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    // You can test the method with a main function\n    public static void main(String[] args) {\n        System.out.println(add(2, 3)); // Output: 5\n        System.out.println(add(5, 7)); // Output: 12\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "import java.util.*;\n\nclass SameChars {\n    /**\n     * Check if two words have the same characters.\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        // Convert both strings to character arrays\n        char[] arr0 = s0.toCharArray();\n        char[] arr1 = s1.toCharArray();\n        \n        // Sort both character arrays\n        Arrays.sort(arr0);\n        Arrays.sort(arr1);\n        \n        // Compare the sorted character arrays for equality\n        return Arrays.equals(arr0, arr1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be a positive integer.\");\n    }\n    \n    if (n == 1 || n == 2) {\n        return 1;\n    }\n    \n    int a = 1, b = 1;\n    for (int i = 3; i <= n; i++) {\n        int next = a + b;\n        a = b;\n        b = next;\n    }\n    return b;\n}"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     */\n    public static Boolean correctBracketing(String brackets) {\n        // Create a stack to keep track of the opening brackets\n        Stack<Character> stack = new Stack<>();\n        \n        // Iterate through each character in the string\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '<') {\n                // Push opening bracket onto the stack\n                stack.push(ch);\n            } else if (ch == '>') {\n                // If stack is empty or top of the stack is not an opening bracket, return false\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                // Pop the matching opening bracket from the stack\n                stack.pop();\n            }\n        }\n        \n        // If stack is empty, all brackets are matched correctly\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"<\")); // False\n        System.out.println(correctBracketing(\"<>\")); // True\n        System.out.println(correctBracketing(\"<<><>>\")); // True\n        System.out.println(correctBracketing(\"><<>\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Monotonic {\n    /**\n     * Return True if the list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     */\n    public static Boolean monotonic(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return true; // An empty list or null is considered monotonic\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> list3 = Arrays.asList(4, 1, 0, -10);\n\n        System.out.println(monotonic(list1)); // True\n        System.out.println(monotonic(list2)); // False\n        System.out.println(monotonic(list3)); // True\n    }\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n     */\n    public static List<Integer> common(List<Integer> l1, List<Object> l2) {\n        // Create a set to store unique elements from the second list\n        Set<Integer> set = new HashSet<>();\n        \n        // Add all elements from the second list to the set (if they are integers)\n        for (Object obj : l2) {\n            if (obj instanceof Integer) {\n                set.add((Integer) obj);\n            }\n        }\n        \n        // Create a list to store common elements\n        List<Integer> commonList = new ArrayList<>();\n        \n        // Check each element in the first list against the set of unique elements from the second list\n        for (int num : l1) {\n            if (set.contains(num)) {\n                commonList.add(num);\n                // Remove the element to avoid duplicates in the final list\n                set.remove(num);\n            }\n        }\n        \n        // Sort the list of common elements\n        Collections.sort(commonList);\n        \n        return commonList;\n    }\n}"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     */\n    public static int largestPrimeFactor(int n) {\n        // Start with the smallest prime number, which is 2.\n        int factor = 2;\n        \n        // If n is divisible by factor, divide it until it's not.\n        while (n % factor == 0) {\n            n /= factor;\n        }\n        \n        // Now, start checking from the next potential prime number.\n        for (int i = 3; i * i <= n; i += 2) {\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 1, then it must be a prime number itself.\n        if (n > 1) {\n            return n;\n        }\n        \n        // Otherwise, the largest factor found so far is the answer.\n        return factor;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        System.out.println(\"The largest prime factor is: \" + largestPrimeFactor(n));\n    }\n}"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "class SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     */\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumToN(30)); // 465\n        System.out.println(sumToN(100)); // 5050\n        System.out.println(sumToN(5)); // 15\n        System.out.println(sumToN(10)); // 55\n        System.out.println(sumToN(1)); // 1\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "import java.util.*;\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     */\n    public static Boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(correctBracketing(\"(\")); // False\n        System.out.println(correctBracketing(\"()\")); // True\n        System.out.println(correctBracketing(\"(()())\")); // True\n        System.out.println(correctBracketing(\")(()\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "import java.util.*;\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     */\n    public static List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        if (n == 1) {\n            return new ArrayList<>(); // The derivative of a constant is zero.\n        }\n        \n        List<Integer> result = new ArrayList<>(xs.subList(1, n));\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i) * (i + 1));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3))); // [2, 6]\n    }\n}"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     */\n    public static int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n\n        // Initialize an array to store the computed values\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1;\n\n        // Compute each value using the given formula\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     * \n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public static int vowelsCount(String s) {\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n        \n        String lowerCaseStr = s.toLowerCase();\n        int count = 0;\n        for (char c : lowerCaseStr.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        \n        // Check if the last character is a vowel\n        char lastChar = lowerCaseStr.charAt(lowerCaseStr.length() - 1);\n        if (lastChar == 'y') {\n            count++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(vowelsCount(\"ACEDY\")); // Output: 3\n        System.out.println(vowelsCount(\"hello world!\")); // Output: 3\n        System.out.println(vowelsCount(\"rhythm\")); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "class CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     */\n    public static String circularShift(int x, int shift) {\n        // Convert the integer to a string\n        String numStr = Integer.toString(x);\n        \n        // Calculate the effective shift amount\n        int len = numStr.length();\n        if (len == 0) {\n            return \"\";\n        }\n        shift = shift % len;\n        \n        // If shift is zero, no change needed\n        if (shift == 0) {\n            return numStr;\n        }\n        \n        // Perform the circular shift\n        String shiftedStr = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shiftedStr;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(circularShift(12, 1)); // \"21\"\n        System.out.println(circularShift(12, 2)); // \"12\"\n        System.out.println(circularShift(12345, 2)); // \"45123\"\n        System.out.println(circularShift(12345, 5)); // \"12345\" (shifted by more than length)\n        System.out.println(circularShift(12345, 0)); // \"12345\" (no shift)\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n     */\n    public static int digitsum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digitsum(\"\")); // 0\n        System.out.println(digitsum(\"abAB\")); // 131\n        System.out.println(digitsum(\"abcCd\")); // 67\n        System.out.println(digitsum(\"helloE\")); // 69\n        System.out.println(digitsum(\"woArBld\")); // 131\n        System.out.println(digitsum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "import java.util.regex.*;\n\nclass FruitDistribution {\n    /**\n     * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for example:\n     * fruitDistribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n     * fruitDistribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n     * fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruitDistribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n     */\n    public static int fruitDistribution(String s, int n) {\n        // Use regex to extract the number of apples and oranges from the string\n        Pattern pattern = Pattern.compile(\"(\\\\d+) apples and (\\\\d+) oranges\");\n        Matcher matcher = pattern.matcher(s);\n        \n        if (matcher.find()) {\n            int apples = Integer.parseInt(matcher.group(1));\n            int oranges = Integer.parseInt(matcher.group(2));\n            return n - apples - oranges;\n        } else {\n            throw new IllegalArgumentException(\"Input string does not match the expected format.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "import java.util.*;\n\nclass Pluck {\n    public static List<Object> pluck(List<Object> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int indexOfSmallestEvenValue = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if ((int) arr.get(i) % 2 == 0) {\n                int currentValue = (int) arr.get(i);\n                if (currentValue < smallestEvenValue || (currentValue == smallestEvenValue && indexOfSmallestEvenValue > i)) {\n                    smallestEvenValue = currentValue;\n                    indexOfSmallestEvenValue = i;\n                }\n            }\n        }\n\n        if (indexOfSmallestEvenValue == -1) {\n            return new ArrayList<>();\n        } else {\n            List<Object> result = new ArrayList<>();\n            result.add(smallestEvenValue);\n            result.add(indexOfSmallestEvenValue);\n            return result;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(pluck(Arrays.asList(4, 2, 3))); // Output: [2, 1]\n        System.out.println(pluck(Arrays.asList(1, 2, 3))); // Output: [2, 1]\n        System.out.println(pluck(new ArrayList<>())); // Output: []\n        System.out.println(pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // Output: [0, 1]\n    }\n}"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Search {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * If no such a value exist, return -1.\n     */\n    public static int search(List<Integer> lst) {\n        // Create a map to count the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Find the greatest integer that satisfies the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int key = entry.getKey();\n            int value = entry.getValue();\n            \n            if (key <= value) {\n                result = Math.max(result, key);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(4, 1, 2, 2, 3, 1);\n        System.out.println(search(lst1)); // Output: 2\n        \n        List<Integer> lst2 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        System.out.println(search(lst2)); // Output: 3\n        \n        List<Integer> lst3 = Arrays.asList(5, 5, 4, 4, 4);\n        System.out.println(search(lst3)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.util.*;\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Create a copy of the list to sort and manipulate\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = sortedList.size() - 1;\n\n        // Alternate between adding the smallest and largest elements\n        while (left <= right) {\n            if (left == right) {\n                result.add(sortedList.get(left));\n            } else {\n                result.add(sortedList.get(left));\n                result.add(sortedList.get(right));\n            }\n            left++;\n            right--;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(strangeSortList(new ArrayList<>())); // []\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "class TriangleArea {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        // Check if the sides form a valid triangle using the triangle inequality theorem\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2.0;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // If not a valid triangle, return -1\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // Should print 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Should print -1\n    }\n}"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) \u279e False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) \u279e False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) \u279e True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) \u279e True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        boolean isPalindrome = isPalindromic(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight and if it's a palindrome\n        return isPalindrome && sum <= w;\n    }\n    \n    private static boolean isPalindromic(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(willItFly(Arrays.asList(1, 2), 5)); // False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 1)); // False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 9)); // True\n        System.out.println(willItFly(Arrays.asList(3), 5)); // True\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.util.*;\n\nclass SmallestChange {\n    /**\n     * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     */\n    public static int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int changesNeeded = 0;\n        \n        // Compare elements from start and end moving towards the center\n        for (int i = 0; i < n / 2; i++) {\n            if (!arr.get(i).equals(arr.get(n - 1 - i))) {\n                changesNeeded++;\n            }\n        }\n        \n        return changesNeeded;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        System.out.println(smallestChange(arr1)); // Output: 4\n        \n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        System.out.println(smallestChange(arr2)); // Output: 1\n        \n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n        System.out.println(smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.util.*;\n\nclass TotalMatch {\n    /**\n     * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n     * if the two lists have the same number of chars, return the first list.\n     * Examples\n     * total_match([], []) \u279e []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        // Helper function to calculate the total number of characters in a list of strings\n        int getTotalChars(List<String> strings) {\n            int total = 0;\n            for (String str : strings) {\n                total += str.length();\n            }\n            return total;\n        }\n\n        // Calculate the total number of characters in each list\n        int totalCharsLst1 = getTotalChars(lst1);\n        int totalCharsLst2 = getTotalChars(lst2);\n\n        // Compare the totals and return the appropriate list\n        if (totalCharsLst1 < totalCharsLst2) {\n            return lst1;\n        } else if (totalCharsLst2 < totalCharsLst1) {\n            return lst2;\n        } else {\n            return lst1; // If both lists have the same number of characters, return the first list\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst1 = new ArrayList<>();\n        List<Object> lst2 = new ArrayList<>();\n        \n        System.out.println(totalMatch(lst1, lst1)); // \u279e []\n        \n        lst1.add(\"hi\");\n        lst1.add(\"admin\");\n        lst2.add(\"hI\");\n        lst2.add(\"Hi\");\n        System.out.println(totalMatch(lst1, lst2)); // \u279e ['hI', 'Hi']\n        \n        lst2.add(\"hi\");\n        lst2.add(\"project\");\n        System.out.println(totalMatch(lst1, lst2)); // \u279e ['hi', 'admin']\n        \n        lst2.remove(3);\n        lst2.add(\"hI\");\n        lst2.add(\"hi\");\n        System.out.println(totalMatch(lst1, lst2)); // \u279e ['hI', 'hi', 'hi']\n        \n        lst1.clear();\n        lst1.add(\"4\");\n        List<String> lst3 = new ArrayList<>();\n        for (int i = 1; i <= 5; i++) {\n            lst3.add(Integer.toString(i));\n        }\n        System.out.println(totalMatch(lst1, lst3)); // \u279e ['4']\n    }\n}"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            for (int i = 2; i * i <= num; i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Generate all prime numbers less than or equal to sqrt(a)\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i * i <= a; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        // Check all combinations of three primes to see if their product equals a\n        int n = primes.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                for (int k = j; k < n; k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\n        System.out.println(isMultiplyPrime(60)); // False, no combination of primes multiplies to 60\n    }\n}"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     *\n     */\n    public static Boolean isSimplePower(int x, int n) {\n        if (x == 1) {\n            return true; // Any number to the power of 0 is 1\n        }\n        \n        for (int k = 2; k <= Math.log(x) / Math.log(n); k++) {\n            BigInteger base = new BigInteger(String.valueOf(n));\n            BigInteger exponent = new BigInteger(String.valueOf(k));\n            BigInteger result = base.pow(k);\n            \n            if (result.intValue() == x) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isSimplePower(1, 4)); // true\n        System.out.println(isSimplePower(2, 2)); // true\n        System.out.println(isSimplePower(8, 2)); // true\n        System.out.println(isSimplePower(3, 2)); // false\n        System.out.println(isSimplePower(3, 1)); // false\n        System.out.println(isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "// To determine if a number is a perfect cube, we can use the fact that for any integer n, \n        // n^3 will be an integer and its cube root (n^(1/3)) will also be an integer. Therefore, we need to check \n        // if there exists an integer n such that n^3 equals the given number a.\n        \n        // Calculate the cube root of the number\n        double cubeRoot = Math.cbrt(a);\n        \n        // Check if the cube root is an integer by comparing it to its floor value and ceiling value\n        int roundedCubeRootFloor = (int)Math.floor(cubeRoot);\n        int roundedCubeRootCeil = (int)Math.ceil(cubeRoot);\n        \n        // If either the floor or ceil of the cube root equals the cube root itself, then it is a perfect cube\n        if (roundedCubeRootFloor == cubeRoot || roundedCubeRootCeil == cubeRoot) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    public static void main(String[] args) {\n        // Test cases to verify the function\n        System.out.println(iscube(1));   // True\n        System.out.println(iscube(2));   // False\n        System.out.println(iscube(-1));  // True\n        System.out.println(iscube(64));  // True\n        System.out.println(iscube(0));   // True\n        System.out.println(iscube(180)); // False\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     */\n    public static int hexKey(Object num) {\n        if (num == null || ((String) num).isEmpty()) {\n            return 0;\n        }\n        \n        String hexNum = (String) num;\n        Set<Character> primeHexDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        int count = 0;\n        \n        for (char digit : hexNum.toCharArray()) {\n            if (primeHexDigits.contains(digit)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(hexKey(\"AB\")); // Output: 1\n        System.out.println(hexKey(\"1077E\")); // Output: 2\n        System.out.println(hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "class DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n        // Convert the decimal number to binary\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Add the prefix and suffix \"db\"\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(decimalToBinary(15));  // Output: db1111db\n        System.out.println(decimalToBinary(32));  // Output: db100000db\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n        // Check if the string length is less than 3, return false immediately\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        // Iterate through the string and check every 3 consecutive characters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            \n            // Check if any two of the three characters are the same\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        \n        // If all checks pass, the string is happy\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isHappy(\"a\"));       // False\n        System.out.println(isHappy(\"aa\"));      // False\n        System.out.println(isHappy(\"abcd\"));    // True\n        System.out.println(isHappy(\"aabb\"));    // False\n        System.out.println(isHappy(\"adb\"));     // True\n        System.out.println(isHappy(\"xyy\"));     // False\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "import java.util.*;\n\nclass NumericalLetterGrade {\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Number gpa : grades) {\n            double grade = gpa.doubleValue();\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        System.out.println(numericalLetterGrade(grades)); // Output: [A+, B, C-, C, A-]\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "class PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     */\n    public static Boolean primeLength(String string) {\n        // Get the length of the string\n        int length = string.length();\n        \n        // Check if the length is less than 2, it's not a prime number\n        if (length < 2) {\n            return false;\n        }\n        \n        // Function to check if a number is prime\n        boolean isPrime = true;\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        \n        return isPrime;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(primeLength(\"Hello\")); // True\n        System.out.println(primeLength(\"abcdcba\")); // True\n        System.out.println(primeLength(\"kittens\")); // True\n        System.out.println(primeLength(\"orange\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "class StartsOneEnds {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            // For single-digit numbers, any number that starts or ends with 1 is valid.\n            return 2; // \"1\" and \"10\" are the only one-digit numbers starting or ending with 1.\n        } else {\n            int countStartingWithOne = (int) Math.pow(10, n - 1);\n            int countEndingWithOne = 9 * (int) Math.pow(10, n - 2);\n            return countStartingWithOne + countEndingWithOne;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(startsOneEnds(n));\n        scanner.close();\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 \u2264 N \u2264 10000.\n     * Output:\n     *      a string of binary number\n     */\n    public static String solve(int n) {\n        // Convert the integer to a string to iterate over its digits\n        String numStr = Integer.toString(n);\n        \n        // Initialize sum of digits\n        int sumOfDigits = 0;\n        \n        // Sum up all the digits in the number\n        for (char digit : numStr.toCharArray()) {\n            sumOfDigits += Character.getNumericValue(digit);\n        }\n        \n        // Convert the sum of digits to binary and return it as a string\n        String binaryString = Integer.toBinaryString(sumOfDigits);\n        \n        return binaryString;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(solve(n));\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n     */\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) { // Start from index 1 and increment by 2 to get odd indices\n            if (lst.get(i) % 2 == 0) { // Check if the element at the odd index is even\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = Arrays.asList(4, 2, 6, 7);\n        System.out.println(add(lst)); // Output should be 2\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "import java.util.*;\n\nclass AntiShuffle {\n    /**\n     * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     */\n    public static String antiShuffle(String s) {\n        // Split the input string into tokens (words and spaces)\n        List<String> tokens = new ArrayList<>();\n        StringBuilder word = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                word.append(c);\n            } else {\n                if (word.length() > 0) {\n                    tokens.add(sortWord(word.toString()));\n                    word = new StringBuilder();\n                }\n                tokens.add(String.valueOf(c));\n            }\n        }\n        \n        // Add the last word to the list if there is one\n        if (word.length() > 0) {\n            tokens.add(sortWord(word.toString()));\n        }\n        \n        // Reconstruct the ordered string from the sorted words and spaces\n        StringBuilder result = new StringBuilder();\n        for (String token : tokens) {\n            result.append(token);\n        }\n        \n        return result.toString();\n    }\n    \n    private static String sortWord(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<int[]> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof List) {\n                List<?> row = (List<?>) lst.get(i);\n                for (int j = 0; j < row.size(); j++) {\n                    if ((int) row.get(j) == x) {\n                        result.add(new int[]{i, j});\n                    }\n                }\n            }\n        }\n        \n        // Sort by rows in ascending order and then by columns in descending order\n        result.sort((a, b) -> {\n            if (a[0] != b[0]) {\n                return Integer.compare(a[0], b[0]);\n            } else {\n                return Integer.compare(b[1], a[1]);\n            }\n        });\n        \n        List<Object> resultList = new ArrayList<>();\n        for (int[] coord : result) {\n            resultList.add(Arrays.asList(coord[0], coord[1]));\n        }\n        \n        return resultList;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getRow(Arrays.asList(\n                Arrays.asList(1, 2, 3, 4, 5, 6),\n                Arrays.asList(1, 2, 3, 4, 1, 6),\n                Arrays.asList(1, 2, 3, 4, 5, 1)\n        ), 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n        System.out.println(getRow(Arrays.asList(), 1)); // []\n\n        System.out.println(getRow(Arrays.asList(\n                Arrays.asList(),\n                Arrays.asList(1),\n                Arrays.asList(1, 2, 3)\n        ), 3)); // [(2, 2)]\n    }\n}"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortArray {\n    /**\n     * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     */\n    public static List<Integer> sortArray(List<Integer> array) {\n        // Create a copy of the given array to avoid changing the original array\n        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (sortedArray.isEmpty()) {\n            return sortedArray;\n        }\n\n        int firstValue = sortedArray.get(0);\n        int lastValue = sortedArray.get(sortedArray.size() - 1);\n        int sum = firstValue + lastValue;\n\n        // Check if the sum is odd or even\n        if (sum % 2 == 0) {\n            // Sort in descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // Sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> array1 = Arrays.asList();\n        List<Integer> array2 = Arrays.asList(5);\n        List<Integer> array3 = Arrays.asList(2, 4, 3, 0, 1, 5);\n        List<Integer> array4 = Arrays.asList(2, 4, 3, 0, 1, 5, 6);\n\n        System.out.println(sortArray(array1)); // []\n        System.out.println(sortArray(array2)); // [5]\n        System.out.println(sortArray(array3)); // [0, 1, 2, 3, 4, 5]\n        System.out.println(sortArray(array4)); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            char shifted;\n            if (c >= 'a' && c <= 'z') {\n                // Shift within the lowercase letters\n                shifted = (char) ((c - 'a' + 2 * 2) % 26 + 'a');\n            } else if (c >= 'A' && c <= 'Z') {\n                // Shift within the uppercase letters\n                shifted = (char) ((c - 'A' + 2 * 2) % 26 + 'A');\n            } else {\n                // Non-alphabetic characters remain unchanged\n                shifted = c;\n            }\n            encrypted.append(shifted);\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(encrypt(\"hi\")); // returns 'lm'\n        System.out.println(encrypt(\"asdfghjkl\")); // returns 'ewhjklnop'\n        System.out.println(encrypt(\"gf\")); // returns 'kj'\n        System.out.println(encrypt(\"et\")); // returns 'ix'\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        // Use a set to remove duplicates and then convert it back to a list\n        List<Integer> uniqueNumbers = new ArrayList<>(new HashSet<>(lst));\n        \n        // Sort the list of unique numbers\n        Collections.sort(uniqueNumbers);\n        \n        // Return the second smallest element, if there is one\n        if (uniqueNumbers.size() >= 2) {\n            return uniqueNumbers.get(1);\n        } else {\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Output: 2\n        System.out.println(nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Output: 2\n        System.out.println(nextSmallest(new ArrayList<>())); // Output: null\n        System.out.println(nextSmallest(Arrays.asList(1, 1))); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "import java.util.*;\n\nclass IsBored {\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     */\n    public static int isBored(String s) {\n        // Split the input string by '.', '?' and '!' followed by trimming spaces\n        String[] sentences = s.split(\"[.?!]\");\n        \n        int count = 0;\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespace from each sentence\n            sentence = sentence.trim();\n            // Check if the sentence starts with \"I\"\n            if (sentence.startsWith(\"I \")) {\n                count++;\n            } else if (sentence.startsWith(\"I,\")) {\n                count++;\n            } else if (sentence.startsWith(\"I!\")) {\n                count++;\n            } else if (sentence.startsWith(\"I.\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isBored(\"Hello world\")); // Output: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        System.out.println(isBored(\"I am happy. Are you? I think so!\")); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "import java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AnyInt {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples\n     * anyInt(5, 2, 7) \u279e True\n     * \n     * anyInt(3, 2, 2) \u279e False\n     * \n     * anyInt(3, -2, 1) \u279e True\n     * \n     * anyInt(3.6, -2.2, 2) \u279e False\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        // Check if all numbers are integers by comparing them to their integer values\n        boolean isXInteger = (x instanceof Integer && x == ((Integer) x).intValue());\n        boolean isYInteger = (y instanceof Integer && y == ((Integer) y).intValue());\n        boolean isZInteger = (z instanceof Integer && z == ((Integer) z).intValue());\n        \n        // If not all numbers are integers, return false\n        if (!isXInteger || !isYInteger || !isZInteger) {\n            return false;\n        }\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        int sum = ((Integer) x).intValue() + ((Integer) y).intValue();\n        if (sum == ((Integer) z).intValue()) {\n            return true;\n        }\n        \n        // Check for all possible permutations\n        sum = ((Integer) x).intValue() + ((Integer) z).intValue();\n        if (sum == ((Integer) y).intValue()) {\n            return true;\n        }\n        \n        sum = ((Integer) y).intValue() + ((Integer) z).intValue();\n        if (sum == ((Integer) x).intValue()) {\n            return true;\n        }\n        \n        // If none of the conditions are met, return false\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(anyInt(5, 2, 7)); // \u279e True\n        System.out.println(anyInt(3, 2, 2)); // \u279e False\n        System.out.println(anyInt(3, -2, 1)); // \u279e True\n        System.out.println(anyInt(3.6, -2.2, 2)); // \u279e False\n    }\n}"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Encode {\n    /**\n     * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                // Swap case\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                } else {\n                    c = Character.toUpperCase(c);\n                }\n                \n                // Replace vowels with the letter 2 places ahead\n                switch (c) {\n                    case 'a':\n                        c = 'C';\n                        break;\n                    case 'e':\n                        c = 'G';\n                        break;\n                    case 'i':\n                        c = 'K';\n                        break;\n                    case 'o':\n                        c = 'Q';\n                        break;\n                    case 'u':\n                        c = 'W';\n                        break;\n                    default:\n                        // No change for other letters\n                        break;\n                }\n            }\n            encodedMessage.append(c);\n        }\n        \n        return encodedMessage.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(encode(\"test\")); // Output: 'TGST'\n        System.out.println(encode(\"This is a message\")); // Output: 'tHKS KS C MGSSCGG'\n    }\n}"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        // Helper function to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            if (num == 2) return true;\n            if (num % 2 == 0) return false;\n            for (int i = 3; i * i <= num; i += 2) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n        \n        // Find all prime numbers in the list\n        List<Integer> primes = new ArrayList<>();\n        for (int num : lst) {\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n        \n        // If no prime number is found, return 0\n        if (primes.isEmpty()) {\n            return 0;\n        }\n        \n        // Find the largest prime number\n        int maxPrime = Collections.max(primes);\n        \n        // Calculate the sum of the digits of the largest prime number\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(skjkasdkd(lst1)); // Output: 10\n        \n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(skjkasdkd(lst2)); // Output: 25\n        \n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(skjkasdkd(lst3)); // Output: 13\n        \n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(skjkasdkd(lst4)); // Output: 11\n        \n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(skjkasdkd(lst5)); // Output: 3\n        \n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(skjkasdkd(lst6)); // Output: 7\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.util.*;\n\nclass CheckDictCase {\n    /**\n     * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False if the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public static Boolean checkDictCase(Object dict) {\n        if (dict == null || ((Map<?, ?>) dict).isEmpty()) {\n            return false;\n        }\n        \n        Map<String, Object> dictionary = (Map<String, Object>) dict;\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n        \n        for (String key : dictionary.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n        \n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Map<String, String> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(checkDictCase(dict1)); // True\n\n        Map<String, String> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(checkDictCase(dict2)); // False\n\n        Map<String, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(checkDictCase(dict3)); // False\n\n        Map<String, String> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(checkDictCase(dict4)); // False\n\n        Map<String, String> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(checkDictCase(dict5)); // True\n    }\n}"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.util.*;\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(countUpTo(5)); // [2,3]\n        System.out.println(countUpTo(11)); // [2,3,5,7]\n        System.out.println(countUpTo(0)); // []\n        System.out.println(countUpTo(20)); // [2,3,5,7,11,13,17,19]\n        System.out.println(countUpTo(1)); // []\n        System.out.println(countUpTo(18)); // [2,3,5,7,11,13,17]\n    }\n}"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "class Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     */\n    public static int multiply(int a, int b) {\n        // Extract the unit digits of both numbers\n        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        \n        // Multiply the unit digits together\n        return unitDigitA * unitDigitB;\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountUpper {\n    /**\n     * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     */\n    public static int countUpper(String s) {\n        // Define the set of uppercase vowels\n        Set<Character> uppercaseVowels = new HashSet<>(Arrays.asList('A', 'E', 'I', 'O', 'U'));\n        \n        // Initialize a counter for uppercase vowels at even indices\n        int count = 0;\n        \n        // Iterate over the string, checking only even indices\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (uppercaseVowels.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(countUpper(\"aBCdEf\")); // Output: 1\n        System.out.println(countUpper(\"abcdefg\")); // Output: 0\n        System.out.println(countUpper(\"dBBE\")); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "class ClosestInteger {\n    /**\n     * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     */\n    public static int closestInteger(String value) {\n        // Parse the input string to a double\n        double num = Double.parseDouble(value);\n        \n        // Use Math.round which rounds towards zero for numbers exactly halfway between two integers\n        long rounded = Math.round(num);\n        \n        // If the number is exactly halfway between two integers, round away from zero\n        if (num > 0 && num - (long)num == 0.5) {\n            return (int)(rounded + 0.5);\n        } else if (num < 0 && num - (long)num == -0.5) {\n            return (int)(rounded - 0.5);\n        }\n        \n        // Return the rounded integer\n        return (int)rounded;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\"));       // Output: 10\n        System.out.println(closestInteger(\"15.3\"));     // Output: 15\n        System.out.println(closestInteger(\"14.5\"));     // Output: 15\n        System.out.println(closestInteger(\"-14.5\"));    // Output: -15\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "List<Integer> pile = new ArrayList<>();\n        int currentLevelStones;\n\n        if (n % 2 == 0) {\n            // If n is even, start with the next even number\n            currentLevelStones = n + (n % 2 == 0 ? 2 : 1);\n        } else {\n            // If n is odd, start with the next odd number\n            currentLevelStones = n + (n % 2 == 0 ? 1 : 0);\n        }\n\n        for (int i = 0; i < n; i++) {\n            pile.add(currentLevelStones);\n            currentLevelStones += 2; // Increment by 2 to get the next odd or even number\n        }\n\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        int n = scanner.nextInt();\n        List<Integer> result = makeAPile(n);\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsString {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public static List<Object> wordsString(String s) {\n        // Split the string by both commas and spaces\n        String[] wordsArray = s.split(\"[ ,]+\");\n        \n        // Convert the array to a list and return it\n        return Arrays.asList(wordsArray);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n     */\n    public static int chooseNum(int x, int y) {\n        // Check if x is greater than y, which means the range is invalid\n        if (x > y) {\n            return -1;\n        }\n        \n        // Iterate from y down to x\n        for (int i = y; i >= x; i--) {\n            // Check if the current number is even\n            if (i % 2 == 0) {\n                return i; // Return the first even number found\n            }\n        }\n        \n        // If no even number is found, return -1\n        return -1;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(chooseNum(12, 15)); // Output: 14\n        System.out.println(chooseNum(13, 12)); // Output: -1\n        System.out.println(chooseNum(8, 10));  // Output: 10\n        System.out.println(chooseNum(7, 7));   // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * roundedAvg(1, 5) => \"0b11\"\n     * roundedAvg(7, 5) => -1\n     * roundedAvg(10, 20) => \"0b1111\"\n     * roundedAvg(20, 33) => \"0b11010\"\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        // Calculate the sum of integers from n to m\n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        // Calculate the average and round it to the nearest integer\n        double avg = (double)sum / (m - n + 1);\n        long roundedAvg = Math.round(avg);\n        \n        // Convert the rounded average to binary string\n        String binaryString = Long.toBinaryString((long)roundedAvg);\n        \n        return \"0b\" + binaryString;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // Output: \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // Output: -1\n        System.out.println(roundedAvg(10, 20)); // Output: \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // Output: \"0b11010\"\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (!hasEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n    \n    private static boolean hasEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(uniqueDigits(numbers)); // [1, 15, 33]\n        \n        List<Integer> numbers2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(uniqueDigits(numbers2)); // []\n    }\n}"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ByLength {\n    /**\n     * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n        // Filter the array to include only integers between 1 and 9 inclusive\n        List<Integer> filteredList = new ArrayList<>();\n        for (Object obj : arr) {\n            if (obj instanceof Integer && ((Integer) obj >= 1 && (Integer) obj <= 9)) {\n                filteredList.add((Integer) obj);\n            }\n        }\n\n        // Sort the filtered list\n        Collections.sort(filteredList);\n\n        // Reverse the sorted list\n        Collections.reverse(filteredList);\n\n        // Map the numbers to their corresponding names\n        List<String> result = new ArrayList<>();\n        for (Integer num : filteredList) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n        List<Object> arr2 = new ArrayList<>();\n        System.out.println(byLength(arr2)); // []\n\n        List<Object> arr3 = Arrays.asList(1, -1, 55);\n        System.out.println(byLength(arr3)); // [\"One\"]\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.util.*;\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of i\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to i\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "// Initialize counters for even and odd palindromes\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Iterate through all numbers from 1 to n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i) && isEven(i)) {\n                evenCount++;\n            } else if (isPalindrome(i) && !isEven(i)) {\n                oddCount++;\n            }\n        }\n\n        // Return the result as a list of integers\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    // Helper method to check if a number is a palindrome\n    private static boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Helper method to check if a number is even\n    private static boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        List<Integer> result = evenOddPalindrome(n);\n        System.out.println(\"(\" + result.get(0) + \", \" + result.get(1) + \")\");\n    }\n}"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "import java.util.*;\n\nclass CountNums {\n    /**\n     * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     */\n    public static int countNums(List<Object> arr) {\n        int count = 0;\n        \n        for (Object numObj : arr) {\n            int num = (Integer) numObj;\n            if (num < 0) {\n                // For negative numbers, consider the sum of all digits including the sign.\n                String numStr = Integer.toString(Math.abs(num));\n                int sumOfDigits = 0;\n                for (char digit : numStr.toCharArray()) {\n                    sumOfDigits += Character.getNumericValue(digit);\n                }\n                if (sumOfDigits > 0) {\n                    count++;\n                }\n            } else {\n                // For positive numbers, consider the sum of their digits.\n                int sumOfDigits = 0;\n                for (char digit : Integer.toString(num).toCharArray()) {\n                    sumOfDigits += Character.getNumericValue(digit);\n                }\n                if (sumOfDigits > 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(-1, 11, -11);\n        System.out.println(countNums(arr1)); // Output: 1\n\n        List<Object> arr2 = Arrays.asList(1, 1, 2);\n        System.out.println(countNums(arr2)); // Output: 3\n\n        List<Object> arr3 = new ArrayList<>();\n        System.out.println(countNums(arr3)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.util.*;\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        List<Integer> list = new ArrayList<>(n);\n        for (Object obj : arr) {\n            list.add((Integer) obj);\n        }\n        \n        // Check if the array is already sorted\n        if (isSorted(list)) {\n            return true;\n        }\n        \n        // Try all possible right shifts and check if any of them result in a sorted array\n        for (int shift = 1; shift < n; shift++) {\n            performShift(list);\n            if (isSorted(list)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    private static void performShift(List<Integer> list) {\n        int lastElement = list.remove(list.size() - 1);\n        list.add(0, lastElement);\n    }\n    \n    private static boolean isSorted(List<Integer> list) {\n        for (int i = 1; i < list.size(); i++) {\n            if (list.get(i) < list.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(3, 4, 5, 1, 2);\n        List<Object> arr2 = Arrays.asList(3, 5, 4, 1, 2);\n        \n        System.out.println(moveOneBall(arr1)); // true\n        System.out.println(moveOneBall(arr2)); // false\n    }\n}"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "// Check if lst1 already contains only even numbers\n        boolean allEvenInLst1 = true;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                allEvenInLst1 = false;\n                break;\n            }\n        }\n        \n        // If lst1 already contains only even numbers, return \"YES\"\n        if (allEvenInLst1) {\n            return \"YES\";\n        }\n        \n        // Collect the odd numbers from lst1 and all numbers from lst2\n        List<Integer> oddNumbersInLst1 = new ArrayList<>();\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddNumbersInLst1.add(num);\n            }\n        }\n        \n        // Check if there are even numbers in lst2 to replace the odd numbers in lst1\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                // If we can find an even number to exchange with each odd number in lst1, return \"YES\"\n                for (int oddNum : oddNumbersInLst1) {\n                    if (exchangeElements(lst1, lst2, oddNum, num)) {\n                        return \"YES\";\n                    }\n                }\n            }\n        }\n        \n        // If no valid exchange can be found, return \"NO\"\n        return \"NO\";\n    }\n    \n    private static boolean exchangeElements(List<Integer> lst1, List<Integer> lst2, int oddNum, int evenNum) {\n        // Create copies of lst1 and lst2 to perform the swap without modifying the original lists\n        List<Integer> tempLst1 = new ArrayList<>(lst1);\n        List<Integer> tempLst2 = new ArrayList<>(lst2);\n        \n        // Find indices of oddNum and evenNum in their respective lists\n        int indexOdd = tempLst1.indexOf(oddNum);\n        int indexEven = tempLst2.indexOf(evenNum);\n        \n        // Perform the swap\n        if (indexOdd != -1 && indexEven != -1) {\n            tempLst1.set(indexOdd, evenNum);\n            tempLst2.set(indexEven, oddNum);\n            \n            // Check if all elements in tempLst1 are now even\n            boolean allEvenInTempLst1 = true;\n            for (int num : tempLst1) {\n                if (num % 2 != 0) {\n                    allEvenInTempLst1 = false;\n                    break;\n                }\n            }\n            \n            // If all elements in tempLst1 are even, return true\n            return allEvenInTempLst1;\n        }\n        \n        // If no valid swap could be performed, return false\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // \"YES\"\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // \"NO\"\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.util.*;\n\nclass Histogram {\n    public static Map<String, Integer> histogram(String test) {\n        if (test == null || test.isEmpty()) {\n            return new HashMap<>();\n        }\n        \n        String[] letters = test.split(\" \");\n        Map<String, Integer> countMap = new HashMap<>();\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = Collections.max(countMap.values());\n        Map<String, Integer> result = new HashMap<>();\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(histogram(\"a b c\")); // {}\n        System.out.println(histogram(\"a b b a\")); // {'a': 2, 'b': 2}\n        System.out.println(histogram(\"a b c a b\")); // {'a': 2, 'b': 2}\n        System.out.println(histogram(\"b b b b a\")); // {'b': 4}\n        System.out.println(histogram(\"\")); // {}\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n        // Create a StringBuilder to build the resulting string\n        StringBuilder result = new StringBuilder();\n        \n        // Create a HashSet to store characters in c for quick lookup\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n        \n        // Iterate through the string s and build the result by excluding characters in charsToRemove\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                result.append(ch);\n            }\n        }\n        \n        // Convert the StringBuilder to a String\n        String modifiedString = result.toString();\n        \n        // Check if the modified string is a palindrome\n        boolean isPalindrome = isPalindrome(modifiedString);\n        \n        // Return the modified string and whether it is a palindrome\n        List<Object> resultList = new ArrayList<>();\n        resultList.add(modifiedString);\n        resultList.add(isPalindrome);\n        return resultList;\n    }\n    \n    // Helper method to check if a string is a palindrome\n    private static boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', false]\n        System.out.println(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', false]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]\n    }\n}"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        \n        for (String s : lst) {\n            int oddDigitCount = 0;\n            for (char c : s.toCharArray()) {\n                if ((c - '0') % 2 != 0) {\n                    oddDigitCount++;\n                }\n            }\n            String modifiedStr = String.format(\"the number of odd elements %dn the str%dng %d of the %dnput.\", oddDigitCount, oddDigitCount, oddDigitCount, oddDigitCount);\n            result.add(modifiedStr);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> input = Arrays.asList(\"1234567\", \"3\");\n        System.out.println(oddCount(input)); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\"]\n        \n        input = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(oddCount(input)); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    }\n}"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Minsubarraysum {\n    /**\n     * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     */\n    public static long minsubarraysum(List<Integer> nums) {\n        if (nums == null || nums.isEmpty()) {\n            throw new IllegalArgumentException(\"The input list is empty or null.\");\n        }\n\n        int n = nums.size();\n        // Initialize min_so_far to a large value and current_min to 0\n        long min_so_far = Long.MAX_VALUE;\n        long current_min = 0;\n\n        for (int i = 0; i < n; i++) {\n            current_min += nums.get(i);\n            if (current_min < min_so_far) {\n                min_so_far = current_min;\n            }\n            if (current_min > 0) {\n                current_min = 0;\n            }\n        }\n\n        return min_so_far;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        System.out.println(minsubarraysum(nums1)); // Output: 1\n\n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n        System.out.println(minsubarraysum(nums2)); // Output: -6\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.util.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int rows = grid.size();\n        if (rows == 0) return 0;\n        int cols = grid.get(0).size();\n        \n        int totalWater = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    totalWater++;\n                }\n            }\n        }\n        \n        int bucketUses = 0;\n        while (totalWater > 0) {\n            int waterExtractedPerBucket = capacity;\n            for (int i = 0; i < rows && waterExtractedPerBucket > 0; i++) {\n                for (int j = 0; j < cols && waterExtractedPerBucket > 0; j++) {\n                    if (grid.get(i).get(j) == 1) {\n                        grid.get(i).set(j, 0); // Extract water from the well\n                        totalWater--;\n                        waterExtractedPerBucket--;\n                    }\n                }\n            }\n            bucketUses++;\n        }\n        \n        return bucketUses;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int bucketCapacity1 = 1;\n        System.out.println(maxFill(grid1, bucketCapacity1)); // Output: 6\n\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int bucketCapacity2 = 2;\n        System.out.println(maxFill(grid2, bucketCapacity2)); // Output: 5\n\n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int bucketCapacity3 = 5;\n        System.out.println(maxFill(grid3, bucketCapacity3)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortArray {\n    /**\n     * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     */\n    public static List<Integer> sortArray(List<Integer> arr) {\n        // Convert the list of objects to a list of integers\n        List<Integer> intList = new ArrayList<>(arr);\n        \n        // Sort the list based on the custom comparator\n        intList.sort((a, b) -> {\n            int onesA = Integer.bitCount(a);\n            int onesB = Integer.bitCount(b);\n            \n            if (onesA != onesB) {\n                return Integer.compare(onesA, onesB);\n            } else {\n                return Integer.compare(a, b);\n            }\n        });\n        \n        return intList;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(1, 5, 2, 3, 4);\n        List<Integer> sortedArr1 = sortArray(arr1);\n        System.out.println(sortedArr1); // Output: [1, 2, 3, 4, 5]\n        \n        List<Integer> arr2 = Arrays.asList(-2, -3, -4, -5, -6);\n        List<Integer> sortedArr2 = sortArray(arr2);\n        System.out.println(sortedArr2); // Output: [-6, -5, -4, -3, -2]\n        \n        List<Integer> arr3 = Arrays.asList(1, 0, 2, 3, 4);\n        List<Integer> sortedArr3 = sortArray(arr3);\n        System.out.println(sortedArr3); // Output: [0, 1, 2, 3, 4]\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.util.*;\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public static List<String> selectWords(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        // Split the string into words\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        \n        for (String word : words) {\n            if (word.length() == n && countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private static int countConsonants(String word) {\n        String consonants = word.replaceAll(\"[aeiouAEIOU]\", \"\");\n        return word.length() - consonants.length();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2)); // []\n        System.out.println(selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "import java.util.*;\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {\n        // Define vowels and consonants\n        String vowels = \"aeiouAEIOU\";\n        \n        // Iterate from the right side of the word to find the closest vowel between two consonants\n        for (int i = word.length() - 2; i > 0; i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(c);\n            }\n        }\n        \n        // If no vowel is found, return an empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(getClosestVowel(\"FULL\"));   // \"U\"\n        System.out.println(getClosestVowel(\"quick\"));  // \"\"\n        System.out.println(getClosestVowel(\"ab\"));     // \"\"\n    }\n}"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MatchParens {\n    /**\n     * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n     */\n    public static String matchParens(List<String> lst) {\n        // Helper function to check if a given string has balanced parentheses\n        boolean isBalanced(String s) {\n            int balance = 0;\n            for (char ch : s.toCharArray()) {\n                if (ch == '(') {\n                    balance++;\n                } else if (ch == ')') {\n                    balance--;\n                }\n                // If balance is negative, it means there are more closing parentheses than opening ones\n                if (balance < 0) {\n                    return false;\n                }\n            }\n            // The string is balanced if the balance is zero\n            return balance == 0;\n        }\n\n        // Try both concatenations\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n\n        // Check if either concatenation is balanced\n        if (isBalanced(s1) || isBalanced(s2)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        List<String> lst1 = Arrays.asList(\"()(\", \")\");\n        List<String> lst2 = Arrays.asList(\")\", \")\");\n        \n        System.out.println(matchParens(lst1)); // Output: Yes\n        System.out.println(matchParens(lst2)); // Output: No\n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "// Check if the length of the array is less than or equal to k\n        if (arr == null || arr.size() == 0 || k <= 0) {\n            return new ArrayList<>();\n        }\n\n        // Create a max heap to keep track of the maximum elements\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n        // Add all elements from the array to the max heap\n        for (int num : arr) {\n            maxHeap.offer(num);\n        }\n\n        // Create a list to store the result\n        List<Integer> result = new ArrayList<>();\n\n        // Extract the maximum k elements from the heap\n        for (int i = 0; i < k && !maxHeap.isEmpty(); i++) {\n            result.add(maxHeap.poll());\n        }\n\n        // Sort the result list to ensure it is in ascending order before returning\n        Collections.sort(result);\n\n        return new ArrayList<>(result);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(\"Output: \" + maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(\"Output: \" + maximum(arr2, k2)); // Output: [4, 4]\n\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(\"Output: \" + maximum(arr3, k3)); // Output: [2]\n    }\n}\n\n/**\n * This code defines a class `Maximum` with a method `maximum` that takes a list of integers and an integer `k`,\n * and returns a sorted list containing the maximum `k` numbers from the input array. The main method provides test cases\n * to demonstrate the functionality of the `maximum` method.\n */"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n     * Examples:\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==> 0\n     */\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) { // Increment by 2 to ensure even positions\n            if (lst.get(i) % 2 != 0) { // Check if the element is odd\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(5, 8, 7, 1);\n        System.out.println(solution(list1)); // Output: 12\n\n        List<Integer> list2 = Arrays.asList(3, 3, 3, 3, 3);\n        System.out.println(solution(list2)); // Output: 9\n\n        List<Integer> list3 = Arrays.asList(30, 13, 24, 321);\n        System.out.println(solution(list3)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AddElements {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "// Initialize a list to store the odd numbers in the Collatz sequence\n        List<Integer> oddNumbers = new ArrayList<>();\n\n        // Start generating the Collatz sequence\n        while (n != 1) {\n            if (n % 2 != 0) { // Check if the number is odd\n                oddNumbers.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n\n        // Add the last number 1 to the list, as per the Collatz sequence definition\n        oddNumbers.add(1);\n\n        // Sort the list of odd numbers in increasing order\n        Collections.sort(oddNumbers);\n\n        return oddNumbers;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        System.out.println(getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "import java.util.regex.*;\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example: \n     * valid_date('03-11-2000') => True\n     * valid_date('15-01-2012') => False\n     * valid_date('04-0-2040') => False\n     * valid_date('06-04-2020') => True\n     * valid_date('06/04/2020') => False\n     */\n    public static Boolean validDate(String date) {\n        // Check if the date string is empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Define the regex pattern for mm-dd-yyyy format\n        String regex = \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\\\d{4})$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(date);\n\n        // Check if the date string matches the regex pattern\n        if (!matcher.matches()) {\n            return false;\n        }\n\n        // Parse the month, day, and year from the date string\n        String[] parts = date.split(\"-\");\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        // Validate each component according to their respective rules\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        boolean validDay = true;\n        switch (month) {\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if (day < 1 || day > 31) {\n                    validDay = false;\n                }\n                break;\n            case 4: case 6: case 9: case 11:\n                if (day < 1 || day > 30) {\n                    validDay = false;\n                }\n                break;\n            case 2:\n                // Check for leap year\n                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                    if (day < 1 || day > 29) {\n                        validDay = false;\n                    }\n                } else {\n                    if (day < 1 || day > 28) {\n                        validDay = false;\n                    }\n                }\n                break;\n            default:\n                validDay = false;\n        }\n\n        return validDay;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(validDate(\"03-11-2000\")); // True\n        System.out.println(validDate(\"15-01-2012\")); // False\n        System.out.println(validDate(\"04-0-2040\")); // False\n        System.out.println(validDate(\"06-04-2020\")); // True\n        System.out.println(validDate(\"06/04/2020\")); // False\n    }\n}"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.util.*;\n\nclass SplitWords {\n    /**\n     * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     */\n    public static Object splitWords(String txt) {\n        // Check if there are spaces in the string\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        }\n        \n        // Check if there are commas in the string\n        else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        }\n        \n        // If no spaces or commas, count lowercase letters with odd order in the alphabet\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (c >= 'a' && c <= 'z') {\n                    int index = c - 'a';\n                    if (index % 2 == 1) { // Check if the position in the alphabet is odd\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.util.*;\n\nclass IsSorted {\n    /**\n     * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n     */\n    public static Boolean isSorted(List<Integer> lst) {\n        // Check if the list is empty or has one element, it's always sorted\n        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n\n        // Use a set to track duplicates and ensure no two elements are equal\n        Set<Integer> seen = new HashSet<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            if (seen.contains(lst.get(i))) {\n                return false; // Duplicate found, not sorted\n            }\n            seen.add(lst.get(i));\n\n            // Check if the current element is greater than the next element\n            if (i < lst.size() - 1 && lst.get(i) >= lst.get(i + 1)) {\n                return false; // Not sorted in ascending order\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(5);\n        List<Integer> list2 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> list3 = Arrays.asList(1, 3, 2, 4, 5);\n        List<Integer> list4 = Arrays.asList(1, 2, 3, 4, 5, 6);\n        List<Integer> list5 = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\n        List<Integer> list6 = Arrays.asList(1, 3, 2, 4, 5, 6, 7);\n        List<Integer> list7 = Arrays.asList(1, 2, 2, 3, 3, 4);\n        List<Integer> list8 = Arrays.asList(1, 2, 2, 2, 3, 4);\n\n        System.out.println(isSorted(list1)); // True\n        System.out.println(isSorted(list2)); // True\n        System.out.println(isSorted(list3)); // False\n        System.out.println(isSorted(list4)); // True\n        System.out.println(isSorted(list5)); // True\n        System.out.println(isSorted(list6)); // False\n        System.out.println(isSorted(list7)); // True\n        System.out.println(isSorted(list8)); // False\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Find the start and end of the intersection\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        // Check if they intersect\n        if (start > end) {\n            return \"NO\";\n        }\n        \n        // Calculate the length of the intersection\n        int length = end - start + 1;\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "import java.util.*;\n\nclass ProdSigns {\n    /**\n     * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n     */\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return null;\n        }\n\n        int sum = 0;\n        for (Object num : arr) {\n            if (num instanceof Integer) {\n                int value = (Integer) num;\n                int sign = 1;\n                if (value < 0) {\n                    sign = -1;\n                } else if (value == 0) {\n                    sign = 0;\n                }\n                sum += Math.abs(value) * sign;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(1, 2, 2, -4);\n        System.out.println(prodSigns(arr1)); // Output: -9\n\n        List<Object> arr2 = Arrays.asList(0, 1);\n        System.out.println(prodSigns(arr2)); // Output: 0\n\n        List<Object> arr3 = new ArrayList<>();\n        System.out.println(prodSigns(arr3)); // Output: null\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Minpath {\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        // Directions for moving to neighboring cells (right, down, left, up)\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        // Priority queue to maintain the paths based on lexicographical order\n        PriorityQueue<List<Integer>> pq = new PriorityQueue<>(new Comparator<List<Integer>>() {\n            public int compare(List<Integer> a, List<Integer> b) {\n                for (int i = 0; i < Math.min(a.size(), b.size()); i++) {\n                    if (!a.get(i).equals(b.get(i))) {\n                        return Integer.compare(a.get(i), b.get(i));\n                    }\n                }\n                return Integer.compare(a.size(), b.size());\n            }\n        });\n        \n        // Start BFS from every cell in the grid\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                Queue<List<Integer>> queue = new LinkedList<>();\n                queue.add(Arrays.asList(grid.get(i).get(j)));\n                \n                while (!queue.isEmpty() && queue.peek().size() < k) {\n                    List<Integer> currentPath = queue.poll();\n                    int lastVal = currentPath.get(currentPath.size() - 1);\n                    \n                    for (int[] direction : directions) {\n                        int newRow = i + direction[0];\n                        int newCol = j + direction[1];\n                        \n                        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n                            List<Integer> newPath = new ArrayList<>(currentPath);\n                            newPath.add(grid.get(newRow).get(newCol));\n                            queue.add(newPath);\n                        }\n                    }\n                }\n                \n                if (!queue.isEmpty() && queue.peek().size() == k) {\n                    pq.offer(queue.poll());\n                }\n            }\n        }\n        \n        // Return the lexicographically smallest path of length k\n        return pq.poll();\n    }\n    \n    public static void main(String[] args) {\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        \n        System.out.println(minpath(grid1, 3)); // Output: [1, 2, 1]\n        \n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        \n        System.out.println(minpath(grid2, 1)); // Output: [1]\n    }\n}"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    public static List<Number> tri(int n) {\n        // Create a list to store the sequence values\n        List<Number> tribonacciSequence = new ArrayList<>();\n        \n        // Initialize the base cases\n        if (n >= 0) {\n            tribonacciSequence.add(3); // tri(1) = 3\n        }\n        if (n >= 1) {\n            tribonacciSequence.add(2); // tri(2) = 2\n        }\n        \n        // Compute the sequence for values from 3 to n\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacciSequence.add(1 + i / 2); // tri(n) = 1 + n / 2, if n is even\n            } else {\n                int prev1 = tribonacciSequence.get(i - 1).intValue();\n                int prev2 = tribonacciSequence.get(i - 2).intValue();\n                int next = (i + 1) <= n ? tribonacciSequence.get(i + 1).intValue() : 0; // Ensure we don't go out of bounds for the next term\n                tribonacciSequence.add(prev1 + prev2 + next); // tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd\n            }\n        }\n        \n        return tribonacciSequence;\n    }\n    \n    public static void main(String[] args) {\n        int n = 3; // Example input\n        List<Number> result = tri(n);\n        System.out.println(\"Tribonacci sequence up to \" + n + \": \" + result);\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     */\n    public static int digits(int n) {\n        // Convert the number to a string for easy iteration\n        String numStr = Integer.toString(n);\n        \n        // Initialize the product to 1 (since 0 would make everything 0)\n        int product = 1;\n        \n        // Flag to check if there are any odd digits\n        boolean hasOddDigit = false;\n        \n        // Iterate through each character in the string\n        for (char digitChar : numStr.toCharArray()) {\n            // Convert the character back to an integer\n            int digit = Character.getNumericValue(digitChar);\n            \n            // Check if the digit is odd\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n        }\n        \n        // Return the product if there was at least one odd digit, otherwise return 0\n        return hasOddDigit ? product : 0;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(digits(1));   // Output: 1\n        System.out.println(digits(4));   // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "import java.util.Stack;\n\nclass IsNested {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n     */\n    public static Boolean isNested(String string) {\n        // Use a stack to keep track of opening brackets\n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : string.toCharArray()) {\n            if (ch == '[') {\n                // Push every opening bracket onto the stack\n                stack.push(ch);\n            } else if (ch == ']') {\n                // If we find a closing bracket, check if there's an unmatched opening bracket\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    // If there's a matching opening bracket on the top of the stack, pop it\n                    stack.pop();\n                } else {\n                    // If there's no matching opening bracket, return false\n                    return false;\n                }\n            }\n        }\n        \n        // If the stack is empty, all brackets were matched correctly (either nested or standalone)\n        // Otherwise, if the stack has unmatched opening brackets, return false\n        return !stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // False\n        System.out.println(isNested(\"[][]\")); // False\n        System.out.println(isNested(\"[]\")); // False\n        System.out.println(isNested(\"[[][]]\")); // True\n        System.out.println(isNested(\"[[]][[\")); // True\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            // Apply ceiling operation and convert to integer\n            int roundedValue = (int) Math.ceil(num.doubleValue());\n            // Square the value and add to the sum\n            sum += roundedValue * roundedValue;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Number> lst1 = Arrays.asList(1, 2, 3);\n        System.out.println(\"Sum of squares for lst1: \" + sumSquares(lst1)); // Output should be 14\n\n        List<Number> lst2 = Arrays.asList(1, 4, 9);\n        System.out.println(\"Sum of squares for lst2: \" + sumSquares(lst2)); // Output should be 98\n\n        List<Number> lst3 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(\"Sum of squares for lst3: \" + sumSquares(lst3)); // Output should be 84\n\n        List<Number> lst4 = Arrays.asList(1.4, 4.2, 0);\n        System.out.println(\"Sum of squares for lst4: \" + sumSquares(lst4)); // Output should be 29\n\n        List<Number> lst5 = Arrays.asList(-2.4, 1, 1);\n        System.out.println(\"Sum of squares for lst5: \" + sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "// Check if the string is empty or null\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is a letter\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        // Check if the last character is part of a word\n        String[] words = txt.split(\" \");\n        for (int i = 0; i < words.length - 1; i++) {\n            if (words[i].isEmpty()) continue;\n            return false;\n        }\n\n        // If all checks pass, return true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // \u279e False\n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     */\n    public static int canArrange(List<Object> arr) {\n        // Iterate through the list starting from the second element\n        for (int i = 1; i < arr.size(); i++) {\n            // Check if the current element is less than the previous element\n            if ((Integer)arr.get(i) < (Integer)arr.get(i - 1)) {\n                return i; // Return the index of the violating element\n            }\n        }\n        // If no such element exists, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Object> arr2 = Arrays.asList(1, 2, 3);\n        \n        System.out.println(canArrange(arr1)); // Output: 3\n        System.out.println(canArrange(arr2)); // Output: -1\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.util.*;\n\nclass LargestSmallestIntegers {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num < 0) {\n                    if (largestNegative == null || num > largestNegative) {\n                        largestNegative = num;\n                    }\n                } else if (num > 0) {\n                    if (smallestPositive == null || num < smallestPositive) {\n                        smallestPositive = num;\n                    }\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // [None, 1]\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // [None, None]\n        System.out.println(largestSmallestIntegers(Arrays.asList(0))); // [None, None]\n    }\n}"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "import java.util.*;\nimport java.lang.*;\nimport java.math.*;\n\nclass CompareOne {\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     */\n    public static Object compareOne(Object a, Object b) {\n        // Check if both objects are integers\n        if (a instanceof Integer && b instanceof Integer) {\n            int numA = (int) a;\n            int numB = (int) b;\n            return numA > numB ? a : (numA < numB ? b : null);\n        }\n        // Check if both objects are floats or strings representing floats\n        else if ((a instanceof Double || a instanceof Float) && (b instanceof Double || b instanceof Float)) {\n            double numA = getDoubleValue(a);\n            double numB = getDoubleValue(b);\n            return numA > numB ? a : (numA < numB ? b : null);\n        }\n        // If one of the objects is a string, convert it to float for comparison\n        else if (a instanceof String && b instanceof String) {\n            double strNumA = parseStringToDouble((String) a);\n            double strNumB = parseStringToDouble((String) b);\n            return strNumA > strNumB ? a : (strNumA < strNumB ? b : null);\n        }\n        // If the types are not compatible, or one of the objects is null, return null\n        else {\n            return null;\n        }\n    }\n\n    private static double getDoubleValue(Object obj) {\n        if (obj instanceof Double) {\n            return (double) obj;\n        } else if (obj instanceof Float) {\n            return (float) obj;\n        } else if (obj instanceof String) {\n            return parseStringToDouble((String) obj);\n        } else {\n            throw new IllegalArgumentException(\"Unsupported type\");\n        }\n    }\n\n    private static double parseStringToDouble(String str) {\n        // Replace comma with dot for decimal point if necessary\n        str = str.replace(',', '.');\n        return Double.parseDouble(str);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(compareOne(1, 2.5)); // \u279e 2.5\n        System.out.println(compareOne(1, \"2,3\")); // \u279e \"2,3\"\n        System.out.println(compareOne(\"5,1\", \"6\")); // \u279e \"6\"\n        System.out.println(compareOne(\"1\", 1)); // \u279e null\n    }\n}"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "// Your implementation goes here\n        if (n <= 0) {\n            return false;\n        }\n        int evenNumber = 2;\n        while (evenNumber <= n - 6) {\n            for (int i = evenNumber + 2; i <= n - 4; i += 2) {\n                if ((evenNumber + (evenNumber + 2) + (i)) == n) {\n                    return true;\n                }\n            }\n            evenNumber += 2;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isEqualToSumEven(4)); // False\n        System.out.println(isEqualToSumEven(6)); // False\n        System.out.println(isEqualToSumEven(8)); // True\n    }\n}\n```\nThis code defines a method `isEqualToSumEven` that checks if a given number `n` can be expressed as the sum of exactly 4 positive even numbers. The main function demonstrates the usage of this method with some test cases."}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "import java.math.BigInteger;\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     *\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     */\n    public static long specialFactorial(int n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n        \n        BigInteger result = BigInteger.ONE;\n        \n        for (int i = 1; i <= n; i++) {\n            result = result.multiply(factorial(i));\n        }\n        \n        return result.longValue();\n    }\n    \n    private static BigInteger factorial(int num) {\n        BigInteger fact = BigInteger.ONE;\n        for (int i = 1; i <= num; i++) {\n            fact = fact.multiply(BigInteger.valueOf(i));\n        }\n        return fact;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        int n = scanner.nextInt();\n        long result = specialFactorial(n);\n        System.out.println(\"Special factorial of \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FixSpaces {\n    /**\n     * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     */\n    public static String fixSpaces(String text) {\n        // Replace all single spaces with underscores\n        String intermediate = text.replace(' ', '_');\n        \n        // Now handle sequences of more than two consecutive underscores\n        StringBuilder result = new StringBuilder();\n        int count = 0;\n        \n        for (int i = 0; i < intermediate.length(); i++) {\n            if (intermediate.charAt(i) == '_') {\n                count++;\n                if (count > 2) {\n                    result.append('_'); // Append one underscore before the hyphen\n                } else {\n                    result.append(intermediate.charAt(i));\n                }\n            } else {\n                count = 0; // Reset count when a non-underscore character is encountered\n                result.append(intermediate.charAt(i));\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     */\n    public static String fileNameCheck(String fileName) {\n        // Check if the file name contains exactly one dot '.'\n        int lastDotIndex = fileName.lastIndexOf('.');\n        if (lastDotIndex == -1 || lastDotIndex == fileName.length() - 1) {\n            return \"No\";\n        }\n        \n        String extension = fileName.substring(lastDotIndex + 1);\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extension)) {\n            return \"No\";\n        }\n        \n        // Check the substring before the dot\n        String namePart = fileName.substring(0, lastDotIndex);\n        if (namePart.isEmpty() || !Character.isLetter(namePart.charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check for more than three digits in the file's name\n        int digitCount = 0;\n        for (char c : fileName.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(fileNameCheck(\"example.txt\")); // => 'Yes'\n        System.out.println(fileNameCheck(\"1example.dll\")); // => 'No'\n        System.out.println(fileNameCheck(\"example1.txt\")); // => 'Yes'\n        System.out.println(fileNameCheck(\"exa3mple.txt\")); // => 'Yes'\n        System.out.println(fileNameCheck(\"exa3mple1234.txt\")); // => 'No'\n    }\n}"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    /**\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public static int sumSquares(List<Object> lst) {\n        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                int value = (Integer) lst.get(i);\n                \n                if (i % 3 == 0) {\n                    sum += Math.pow(value, 2); // Square the value if index is a multiple of 3\n                } else if (i % 4 == 0 && i % 3 != 0) {\n                    sum += Math.pow(value, 3); // Cube the value if index is a multiple of 4 and not a multiple of 3\n                } else {\n                    sum += value; // No change for other indexes\n                }\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(lst1)); // Output: 6\n\n        List<Object> lst2 = new ArrayList<>();\n        System.out.println(sumSquares(lst2)); // Output: 0\n\n        List<Object> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n        System.out.println(sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // List to store words whose lengths are prime numbers\n        List<String> primeLengthWords = new ArrayList<>();\n        \n        // Iterate over each word in the sentence\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n        \n        // Join the words with prime lengths into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n    \n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "import java.util.Scanner;\nimport java.math.BigInteger;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        BigInteger xNumerator = new BigInteger(xParts[0]);\n        BigInteger xDenominator = new BigInteger(xParts[1]);\n        \n        String[] nParts = n.split(\"/\");\n        BigInteger nNumerator = new BigInteger(nParts[0]);\n        BigInteger nDenominator = new BigInteger(nParts[1]);\n        \n        // Multiply the fractions\n        BigInteger resultNumerator = xNumerator.multiply(nNumerator);\n        BigInteger resultDenominator = xDenominator.multiply(nDenominator);\n        \n        // Check if the result is a whole number\n        return resultNumerator.mod(resultDenominator).equals(BigInteger.ZERO);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.println(\"Enter fraction x: \");\n        String x = scanner.nextLine();\n        \n        System.out.println(\"Enter fraction n: \");\n        String n = scanner.nextLine();\n        \n        Boolean result = simplify(x, n);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "// Create a list of pairs where each pair contains an integer and its corresponding sum of digits\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = (Integer) nums.get(i);\n            int digitSum = getDigitSum(num);\n            pairs.add(new Pair(num, digitSum, i));\n        }\n\n        // Sort the list of pairs based on the sum of digits and then by index if sums are equal\n        pairs.sort((a, b) -> {\n            int cmp = Integer.compare(a.digitSum, b.digitSum);\n            if (cmp == 0) {\n                return Integer.compare(a.index, b.index);\n            } else {\n                return cmp;\n            }\n        });\n\n        // Extract the sorted numbers from the pairs and return them as a list\n        List<Object> sortedNums = new ArrayList<>();\n        for (Pair pair : pairs) {\n            sortedNums.add(pair.num);\n        }\n\n        return sortedNums;\n    }\n\n    // Helper method to calculate the sum of digits of a number\n    private static int getDigitSum(int num) {\n        int sum = 0;\n        num = Math.abs(num); // Consider only the absolute value for digit sum calculation\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    // A helper class to store a number, its digit sum, and its original index\n    static class Pair {\n        int num;\n        int digitSum;\n        int index;\n\n        Pair(int num, int digitSum, int index) {\n            this.num = num;\n            this.digitSum = digitSum;\n            this.index = index;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(orderByPoints(nums1)); // Output: [-1, -11, 1, -12, 11]\n\n        List<Object> nums2 = new ArrayList<>();\n        System.out.println(orderByPoints(nums2)); // Output: []\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        \n        for (Object obj : nums) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 10) {\n                    String numStr = String.valueOf(Math.abs(num));\n                    char firstDigit = numStr.charAt(0);\n                    char lastDigit = numStr.charAt(numStr.length() - 1);\n                    \n                    if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private static boolean isOdd(char digit) {\n        int dig = Character.getNumericValue(digit);\n        return dig == 1 || dig == 3 || dig == 5 || dig == 7 || dig == 9;\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums1 = Arrays.asList(15, -73, 14, -15);\n        System.out.println(specialfilter(nums1)); // Output: 1\n        \n        List<Object> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        System.out.println(specialfilter(nums2)); // Output: 2\n    }\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetMaxTriples {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     */\n    public static int getMaxTriples(int n) {\n        // Step 1: Generate the array a based on the given formula\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        // Step 2: Iterate through all possible triples (i, j, k) where i < j < k\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        // Step 3: Return the number of valid triples\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(getMaxTriples(n));\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    /**\n     * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n        // Define the list of planets in order of their proximity to the sun\n        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        // Get the indices of the given planet names\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        // If either planet is not found, return an empty list\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        \n        // Ensure index1 is less than index2 for easier handling\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        // Collect the planets between the two indices (inclusive)\n        List<Object> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n        // Filter out strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                filteredList.add(s);\n            }\n        }\n\n        // Sort the filtered list by length and then alphabetically\n        Collections.sort(filteredList, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return Integer.compare(s1.length(), s2.length());\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n\n        // Convert the list to a List<Object> and return it\n        return new ArrayList<>(filteredList);\n    }\n\n    public static void main(String[] args) {\n        List<String> input = Arrays.asList(\"aa\", \"a\", \"aaa\", \"ab\", \"cd\");\n        List<Object> result = sortedListSum(input);\n        System.out.println(result); // Expected: [\"aa\"]\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n     */\n    public static int xOrY(int n, int x, int y) {\n        // Check if n is a prime number\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "import java.util.*;\n\nclass DoubleTheDifference {\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        int sumOfSquares = 0;\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sumOfSquares += num * num;\n                }\n            }\n        }\n        \n        return sumOfSquares;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst1 = Arrays.asList(1, 3, 2, 0);\n        System.out.println(doubleTheDifference(lst1)); // Output: 10\n        \n        List<Object> lst2 = Arrays.asList(-1, -2, 0);\n        System.out.println(doubleTheDifference(lst2)); // Output: 0\n        \n        List<Object> lst3 = Arrays.asList(9, -2);\n        System.out.println(doubleTheDifference(lst3)); // Output: 81\n        \n        List<Object> lst4 = Arrays.asList(0);\n        System.out.println(doubleTheDifference(lst4)); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Compare {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        // Create a new list to store the results\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through the arrays and compare each element\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int gue = guess.get(i);\n            \n            // Calculate the absolute difference if they are not equal\n            int diff = Math.abs(score - gue);\n            \n            // Add the result to the list\n            result.add(diff);\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> game1 = Arrays.asList(1, 2, 3, 4, 5, 1);\n        List<Integer> guess1 = Arrays.asList(1, 2, 3, 4, 2, -2);\n        System.out.println(compare(game1, guess1)); // Output: [0, 0, 0, 0, 3, 3]\n        \n        List<Integer> game2 = Arrays.asList(0, 5, 0, 0, 0, 4);\n        List<Integer> guess2 = Arrays.asList(4, 1, 1, 0, 0, -2);\n        System.out.println(compare(game2, guess2)); // Output: [4, 4, 1, 0, 0, 6]\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n        if (extensions == null || extensions.isEmpty()) {\n            return className + \".\" + \"No Extension\";\n        }\n        \n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            int capCount = 0, smCount = 0;\n            \n            for (char ch : extension.toCharArray()) {\n                if (Character.isUpperCase(ch)) {\n                    capCount++;\n                } else if (Character.isLowerCase(ch)) {\n                    smCount++;\n                }\n            }\n            \n            int strength = capCount - smCount;\n            \n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return className + \".\" + strongestExtension;\n    }\n    \n    public static void main(String[] args) {\n        List<String> extensions = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(strongestExtension(\"Slices\", extensions)); // Output: Slices.SErviNGSliCes\n        \n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(strongestExtension(\"my_class\", extensions2)); // Output: my_class.AA\n    }\n}"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n        // Check if b is already a substring of a\n        if (a.contains(b)) {\n            return true;\n        }\n        \n        // Generate all rotations of b and check if any rotation is a substring of a\n        int len = b.length();\n        for (int i = 1; i < len; i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        // If no rotation is a substring of a, return false\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "// Convert the number to a string to easily iterate over its digits\n        String numStr = Integer.toString(Math.abs(num));\n\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Iterate through each character in the string representation of the number\n        for (char digit : numStr.toCharArray()) {\n            int digitValue = Character.getNumericValue(digit);\n\n            // Check if the digit is even or odd and update the respective count\n            if (digitValue % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        // Return the counts as a list of integers\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter an integer: \");\n        int num = scanner.nextInt();\n\n        List<Integer> result = evenOddCount(num);\n        System.out.println(\"Even digits count: \" + result.get(0));\n        System.out.println(\"Odd digits count: \" + result.get(1));\n    }\n}\n\nThis code defines a class `EvenOddCount` with a method `evenOddCount` that takes an integer and returns a list of two integers representing the counts of even and odd digits in the number. The main method reads an integer from the user, calls the `evenOddCount` method, and prints the results."}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "import java.util.*;\n\nclass IntToMiniRoman {\n    /**\n     * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     */\n    public static String intToMiniRoman(int number) {\n        // Define the Roman numeral symbols and their values\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        \n        // Create a StringBuilder to build the Roman numeral string\n        StringBuilder romanNumeral = new StringBuilder();\n        \n        // Iterate over the values and symbols arrays\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                romanNumeral.append(symbols[i]);\n            }\n        }\n        \n        // Return the Roman numeral string in lowercase\n        return romanNumeral.toString().toLowerCase();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // Output: xix\n        System.out.println(intToMiniRoman(152)); // Output: clii\n        System.out.println(intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "class RightAngleTriangle {\n    /**\n     * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // First, we need to sort the sides of the triangle so that we can ensure that 'c' is the longest side.\n        List<Integer> sides = Arrays.asList(a, b, c);\n        Collections.sort(sides);\n        \n        // After sorting, the sides will be in ascending order: smallest, middle, largest.\n        int shortest = sides.get(0);\n        int middle = sides.get(1);\n        int longest = sides.get(2);\n        \n        // According to the Pythagorean theorem, for a right-angled triangle, the square of the length of the hypotenuse (longest side) \n        // should be equal to the sum of the squares of the lengths of the other two sides.\n        return Math.pow(longest, 2) == Math.pow(shortest, 2) + Math.pow(middle, 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n        System.out.println(rightAngleTriangle(5, 12, 13)); // True\n        System.out.println(rightAngleTriangle(7, 8, 9)); // False\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.util.*;\n\nclass FindMax {\n    public static String findMax(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n\n        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || \n               (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(findMax(words1)); // Output: \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(findMax(words2)); // Output: \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(findMax(words3)); // Output: \"aaaaaaa\"\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.util.*;\n\nclass Eat {\n    /**\n     * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots that exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n        // Calculate the total number of carrots eaten\n        int totalEaten = number + Math.min(need, remaining);\n        \n        // Calculate the number of carrots left after eating the required amount\n        int carrotsLeft = Math.max(0, remaining - (need - Math.min(need, remaining)));\n        \n        // Return the result as a list\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DoAlgebra {\n    /**\n     * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebraic \n     * expression and return the evaluation of this expression.\n     * \n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n     * \n     * Example:\n     * operator = ['+', '*', '-']\n     * operand = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n     * \n     * Note:\n     * The length of operator list is equal to the length of operand list minus one.\n     * Operand is a list of non-negative integers.\n     * Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        // Initialize the result with the first operand\n        int result = operand.get(0);\n        \n        // Iterate through the operators and operands to build and evaluate the expression\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            \n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"//\":\n                    result = Math.floorDiv(result, nextOperand);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        List<String> operators = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands = Arrays.asList(2, 3, 4, 5);\n        \n        int result = doAlgebra(operators, operands);\n        System.out.println(\"Result: \" + result); // Output should be 9\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isLowerCase(c)) {\n                    result.append(Character.toUpperCase(c));\n                } else {\n                    result.append(Character.toLowerCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n\n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.*;\n\nclass StringToMd5 {\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n     */\n    public static String stringToMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n        \n        try {\n            // Get an instance of the MD5 message digest algorithm\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            \n            // Compute the MD5 hash of the input text\n            byte[] resultBytes = md.digest(text.getBytes());\n            \n            // Convert the byte array to a hexadecimal string representation\n            StringBuilder sb = new StringBuilder();\n            for (byte b : resultBytes) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            \n            return sb.toString();\n        } catch (NoSuchAlgorithmException e) {\n            // This exception should not occur since \"MD5\" is a standard algorithm\n            throw new RuntimeException(\"MD5 algorithm not available.\", e);\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Should print the MD5 hash of \"Hello world\"\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     */\n    public static List<Integer> generateIntegers(int a, int b) {\n        // Ensure the range is from smaller to larger if necessary\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        List<Integer> evenNumbers = new ArrayList<>();\n        \n        // Iterate through the range and collect even numbers\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                evenNumbers.add(i);\n            }\n        }\n        \n        // Sort the list of even numbers\n        Collections.sort(evenNumbers);\n        \n        return evenNumbers;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // []\n    }\n}"}

{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "const has_close_elements = function (numbers: Array<number>, threshold: number): boolean {\n    // Sort the numbers to make it easier to find close elements\n    numbers.sort((a, b) => a - b);\n    \n    // Iterate through the sorted list and check the difference between consecutive elements\n    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) <= threshold) {\n            return true;\n        }\n    }\n    \n    // If no such pair is found, return false\n    return false;\n};\n\n// Test cases\nconsole.log(has_close_elements([1.0, 2.0, 3.0], 0.5)); // False\nconsole.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // True"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "const separate_paren_groups = function (paren_string: string): Array<string> {\n    // Remove all spaces from the input string\n    paren_string = paren_string.replace(/\\s/g, '');\n    \n    const result: string[] = [];\n    let currentGroup = '';\n    let balance = 0;\n\n    for (let char of paren_string) {\n        if (char === '(') {\n            // If it's an opening parenthesis, increase the balance\n            balance++;\n            currentGroup += char;\n        } else if (char === ')') {\n            // If it's a closing parenthesis, decrease the balance\n            balance--;\n            currentGroup += char;\n            // If balance is zero, we have a complete group\n            if (balance === 0) {\n                result.push(currentGroup);\n                currentGroup = '';\n            }\n        }\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(separate_paren_groups('( ) (( )) (( )( ))')); // ['()', '(())', '(()())']"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "const truncate_number = function (number0: number): number {\n    // Get the integer part of the number\n    const integerPart = Math.floor(number0);\n    \n    // Subtract the integer part from the original number to get the decimal part\n    const decimalPart = number0 - integerPart;\n    \n    return decimalPart;\n};\n\n// Example usage:\nconsole.log(truncate_number(3.5)); // Output: 0.5"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n};\n\n// Test cases\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "const mean_absolute_deviation = function (numbers: Array<number>): number {\n    if (numbers.length === 0) {\n        throw new Error(\"The array must contain numbers and have at least one element.\");\n    }\n\n    // Calculate the mean of the numbers\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n\n    // Calculate the absolute differences from the mean\n    const absoluteDifferences = numbers.map(num => Math.abs(num - mean));\n\n    // Calculate the average of these absolute differences\n    const mad = absoluteDifferences.reduce((sum, diff) => sum + diff, 0) / numbers.length;\n\n    return mad;\n};\n\n// Example usage:\nconsole.log(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "const intersperse = function (numbers: Array<number>, delimeter: number): Array<number> {\n    if (numbers.length === 0) return [];\n    \n    const result: Array<number> = [];\n    \n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i !== numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n    \n    return result;\n};"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "const parse_nested_parens = function (paren_string: string): Array<number> {\n    // Split the input string by spaces to get individual groups of parentheses\n    const groups = paren_string.split(' ');\n    \n    // Initialize an array to store the maximum nesting levels for each group\n    const result: number[] = [];\n    \n    // Iterate through each group\n    for (const group of groups) {\n        let maxDepth = 0; // Track the current depth of parentheses\n        let currentDepth = 0; // Track the current level of nesting\n        \n        // Iterate through each character in the group\n        for (const char of group) {\n            if (char === '(') {\n                // Increase the depth when encountering an opening parenthesis\n                currentDepth++;\n                // Update the maximum depth if necessary\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (char === ')') {\n                // Decrease the depth when encountering a closing parenthesis\n                currentDepth--;\n            }\n        }\n        \n        // Add the maximum depth of the current group to the result array\n        result.push(maxDepth);\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(parse_nested_parens('(()()) ((())) () ((())()())')); // [2, 3, 1, 3]"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "const filter_by_substring = function (strings: Array<string>, substring: string): Array<string> {\n    return strings.filter(str => str.includes(substring));\n};\n\n// Test cases\nconsole.log(filter_by_substring([], 'a')); // []\nconsole.log(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')); // ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n    if (numbers.length === 0) {\n        return [0, 1];\n    }\n\n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    const product = numbers.reduce((acc, num) => acc * num, 1);\n\n    return [sum, product];\n};\n\n// Test cases\nconsole.log(sum_product([])); // Output: [0, 1]\nconsole.log(sum_product([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "const rolling_max = function (numbers: Array<number>): Array<number> {\n    let maxSoFar = -Infinity;\n    return numbers.map(num => {\n        if (num > maxSoFar) {\n            maxSoFar = num;\n        }\n        return maxSoFar;\n    });\n};\n\n// Example usage:\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2])); // Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "const make_palindrome = function (string0: string): string {\n    if (string0.length === 0) return '';\n\n    // Helper function to check if a string is a palindrome\n    const isPalindrome = (s: string): boolean => {\n        return s === s.split('').reverse().join('');\n    };\n\n    for (let i = string0.length; i > 0; i--) {\n        let suffix = string0.slice(i);\n        if (isPalindrome(suffix)) {\n            let prefix = string0.slice(0, i);\n            return string0 + prefix.split('').reverse().join('');\n        }\n    }\n\n    // If no palindromic suffix is found, simply reverse the entire string and append it to the original string\n    return string0 + string0.split('').reverse().join('');\n};\n\n// Test cases\nconsole.log(make_palindrome(''));         // ''\nconsole.log(make_palindrome('cat'));      // 'catac'\nconsole.log(make_palindrome('cata'));     // 'catac'"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n    // Ensure both strings are of the same length\n    if (a.length !== b.length) {\n        throw new Error(\"Strings must be of the same length\");\n    }\n\n    let result = \"\";\n\n    // Iterate through each character and perform XOR operation\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(string_xor('010', '110')); // Output: '100'"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n    \n    let longestString = strings[0];\n    \n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n};\n\n// Test cases\nconsole.log(longest([])); // null\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    // Ensure both numbers are positive\n    a = Math.abs(a);\n    b = Math.abs(b);\n    \n    // Use the Euclidean algorithm\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    \n    return a;\n};\n\n// Test cases\nconsole.log(greatest_common_divisor(3, 5)); // Output: 1\nconsole.log(greatest_common_divisor(25, 15)); // Output: 5"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "const all_prefixes = function (string0: string): Array<string> {\n    const prefixes: string[] = [];\n    for (let i = 1; i <= string0.length; i++) {\n        prefixes.push(string0.substring(0, i));\n    }\n    return prefixes;\n};"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "const string_sequence = function (n: number): string {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n};\n\n// Example usage:\nconsole.log(string_sequence(0)); // '0'\nconsole.log(string_sequence(5)); // '0 1 2 3 4 5'"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "const count_distinct_characters = function (string0: string): number {\n    // Convert the string to lowercase to make the comparison case-insensitive\n    const lowerCaseString = string0.toLowerCase();\n    \n    // Use a Set to store distinct characters\n    const charSet = new Set<string>();\n    \n    // Iterate over each character in the string and add it to the set\n    for (const char of lowerCaseString) {\n        charSet.add(char);\n    }\n    \n    // The size of the set represents the number of distinct characters\n    return charSet.size;\n};\n\n// Test cases\nconsole.log(count_distinct_characters('xyzXYZ')); // 3\nconsole.log(count_distinct_characters('Jerry'));  // 4"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "const parse_music = function (music_string: string) : Array<number> {\n    // Split the input string by spaces to get individual notes\n    const notes = music_string.split(' ');\n    \n    // Map each note to its corresponding beat value\n    const beats = notes.map(note => {\n        if (note === 'o') return 4;\n        if (note === 'o|') return 2;\n        if (note === '.|') return 1;\n        // If the note is not recognized, you might want to handle it differently\n        throw new Error(`Unknown note: ${note}`);\n    });\n    \n    return beats;\n};\n\n// Example usage:\nconsole.log(parse_music('o o| .| o| o| .| .| .| .| o o')); // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "const how_many_times = function (string0: string, substring: string): number {\n    if (substring === '') return 0; // If the substring is empty, it cannot be found even once.\n    \n    let count = 0;\n    let index = 0;\n    \n    while ((index = string0.indexOf(substring, index)) !== -1) {\n        count++;\n        index += substring.length; // Move the index to check for overlapping occurrences.\n    }\n    \n    return count;\n};\n\n// Test cases\nconsole.log(how_many_times('', 'a')); // 0\nconsole.log(how_many_times('aaa', 'a')); // 3\nconsole.log(how_many_times('aaaa', 'aa')); // 3"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "const wordToNumber: { [key: string]: number } = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n};\n\nconst sort_numbers = function (numbers: string): string {\n    // Split the input string into an array of number words\n    const numArray = numbers.split(' ');\n\n    // Map each word to its corresponding number value\n    const numValues = numArray.map(word => wordToNumber[word]);\n\n    // Sort the numbers in ascending order\n    numValues.sort((a, b) => a - b);\n\n    // Map the sorted numbers back to their word representations\n    const sortedWords = numValues.map(num => {\n        return Object.keys(wordToNumber).find(key => wordToNumber[key] === num);\n    });\n\n    // Join the sorted words into a space-delimited string and return it\n    return sortedWords.join(' ');\n};\n\n// Example usage:\nconsole.log(sort_numbers('three one five')); // Output: 'one three five'"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "const find_closest_elements = function (numbers: Array<number>): [number, number] {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two numbers.\");\n    }\n\n    let minDiff = Infinity;\n    let closestPair: [number, number] = [0, 0];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n\n    return closestPair;\n};\n\n// Test cases\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Output: [2.0, 2.2]\nconsole.log(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Output: [2.0, 2.0]"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two elements.\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n\n    return numbers.map(num => (num - min) / range);\n};\n\n// Example usage:\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "const filter_integers = function (values: Array<any>): Array<number> {\n    return values.filter(value => Number.isInteger(value)) as Array<number>;\n};\n\n// Test cases\nconsole.log(filter_integers(['a', 3.14, 5])); // [5]\nconsole.log(filter_integers([1, 2, 3, 'abc', {}, []])); // [1, 2, 3]"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "const strlen = function (string0: string): number {\n    return string0.length;\n};"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "const largest_divisor = function (n: number): number {\n    if (n <= 1) return 1; // The only divisor of numbers less than or equal to 1 is 1 itself.\n    \n    for (let i = Math.floor(n / 2); i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n    \n    // If no divisor other than 1 is found, this line will never be reached because n > 1.\n    return 1; // This should never happen for n > 1.\n};\n\n// Example usage:\nconsole.log(largest_divisor(15)); // Output: 5"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "const factorize = function (n: number): Array<number> {\n    const result: Array<number> = [];\n    \n    // Handle the case where n is less than 2, as there are no prime factors.\n    if (n < 2) return result;\n\n    let divisor = 2;\n    while (n >= 2) {\n        if (n % divisor === 0) {\n            result.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    \n    return result;\n};\n\n// Test cases\nconsole.log(factorize(8));   // [2, 2, 2]\nconsole.log(factorize(25));  // [5, 5]\nconsole.log(factorize(70));  // [2, 5, 7]"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "const remove_duplicates = function (numbers: Array<number>): Array<number> {\n    const uniqueNumbers = new Set();\n    const result = [];\n    \n    for (const num of numbers) {\n        if (!uniqueNumbers.has(num)) {\n            uniqueNumbers.add(num);\n            result.push(num);\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(remove_duplicates([1, 2, 3, 2, 4])); // Output: [1, 3, 4]"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "const flip_case = (string0: string): string => {\n  return string0.split('').map(char => {\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n};\n\n// Example usage:\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "const concatenate = function (strings: Array<string>): string {\n  return strings.join('');\n};\n\n// Test cases\nconsole.log(concatenate([])); // ''\nconsole.log(concatenate(['a', 'b', 'c'])); // 'abc'"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "const filter_by_prefix = function (strings: Array<string>, prefix: string): Array<string> {\n    return strings.filter(str => str.startsWith(prefix));\n};"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(num => num > 0);\n}"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n    // Handle edge cases: numbers less than 2 are not prime\n    if (n <= 1) return false;\n    \n    // Check divisibility from 2 up to the square root of n\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    \n    // If no divisors are found, n is prime\n    return true;\n};"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "const sort_third = function (l: Array<number>): Array<number> {\n    // Extract the elements at indices divisible by 3\n    const thirdElements = l.filter((_, index) => index % 3 === 0);\n    \n    // Sort the extracted elements\n    thirdElements.sort((a, b) => a - b);\n    \n    // Create a new array to store the result\n    let result: Array<number> = [...l];\n    \n    // Replace the elements at indices divisible by 3 with sorted elements\n    for (let i = 0; i < thirdElements.length; i++) {\n        result[i * 3] = thirdElements[i];\n    }\n    \n    return result;\n};\n\n// Test cases\nconsole.log(sort_third([1, 2, 3])); // [1, 2, 3]\nconsole.log(sort_third([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n    // Create a Set from the array to filter out duplicates\n    const uniqueSet = new Set(l);\n    \n    // Convert the Set back to an array\n    const uniqueArray = Array.from(uniqueSet);\n    \n    // Sort the array in ascending order\n    uniqueArray.sort((a, b) => a - b);\n    \n    return uniqueArray;\n};\n\n// Example usage:\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "const max_element = function (l: Array<number>): number {\n    if (l.length === 0) {\n        throw new Error(\"Array is empty\");\n    }\n    return Math.max(...l);\n};\n\n// Test cases\nconsole.log(max_element([1, 2, 3])); // 3\nconsole.log(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // 123"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "const fizz_buzz = function (n: number): number {\n    let count = 0;\n    \n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && hasDigit7(i)) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\nconst hasDigit7 = function (num: number): boolean {\n    const numStr = num.toString();\n    return numStr.includes('7');\n};\n\n// Test cases\nconsole.log(fizz_buzz(50)); // 0\nconsole.log(fizz_buzz(78)); // 2\nconsole.log(fizz_buzz(79)); // 3"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "const sort_even = function (l: Array<number>): Array<number> {\n    // Extract the even indexed elements\n    const evens = l.filter((_, index) => index % 2 === 0);\n    \n    // Sort the even indexed elements\n    evens.sort((a, b) => a - b);\n    \n    // Create a new array to store the result\n    let result: Array<number> = [...l];\n    \n    // Replace the even indexed elements with sorted ones\n    for (let i = 0; i < evens.length; i++) {\n        result[i * 2] = evens[i];\n    }\n    \n    return result;\n};\n\n// Test cases\nconsole.log(sort_even([1, 2, 3])); // [1, 2, 3]\nconsole.log(sort_even([5, 6, 3, 4])); // [3, 6, 5, 4]"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "import * as math from 'mathjs';\n\n// Function to check if a number is prime\nconst isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n};\n\n// Function to generate Fibonacci numbers up to a certain limit\nconst generateFibonacci = (limit: number): number[] => {\n  const fibs: number[] = [0, 1];\n  while (true) {\n    const nextFib = fibs[fibs.length - 1] + fibs[fibs.length - 2];\n    if (nextFib > limit) break;\n    fibs.push(nextFib);\n  }\n  return fibs;\n};\n\nconst prime_fib = function (n: number): number {\n  const limit = 1000; // Arbitrary large number to generate enough Fibonacci numbers\n  const fibs = generateFibonacci(limit);\n  \n  const primeFibs: number[] = [];\n  for (const fib of fibs) {\n    if (isPrime(fib)) {\n      primeFibs.push(fib);\n    }\n  }\n\n  // Ensure we have enough prime Fibonacci numbers up to the n-th one\n  if (primeFibs.length < n) {\n    throw new Error(\"Not enough prime Fibonacci numbers found within the limit.\");\n  }\n\n  return primeFibs[n - 1];\n};\n\n// Test cases\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    // If the list has less than 3 elements, it's impossible to have a sum of zero with three distinct elements.\n    if (l.length < 3) return false;\n\n    // Sort the array first\n    l.sort((a, b) => a - b);\n\n    for (let i = 0; i < l.length - 2; i++) {\n        // Skip duplicates\n        if (i > 0 && l[i] === l[i - 1]) continue;\n\n        let left = i + 1;\n        let right = l.length - 1;\n\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) return true;\n\n            // Adjust the pointers based on the sum\n            if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    return false;\n};"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "const car_race_collision = function (n: number): number {\n    return n * n;\n};"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "const incr_list = function (l: Array<number>): Array<number> {\n    return l.map(num => num + 1);\n};"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    const seenNumbers = new Set<number>();\n    \n    for (let num of l) {\n        if (seenNumbers.has(-num)) {\n            return true; // Found a pair that sums to zero\n        }\n        seenNumbers.add(num);\n    }\n    \n    return false; // No pairs found that sum to zero\n};\n\n// Test cases\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "const change_base = function (x: number, base: number): string {\n    if (base < 2 || base > 9) {\n        throw new Error(\"Base must be between 2 and 9\");\n    }\n    \n    let result = '';\n    while (x > 0) {\n        const remainder = x % base;\n        result = remainder.toString() + result;\n        x = Math.floor(x / base);\n    }\n    \n    return result || '0'; // Handle the case when x is 0\n};\n\n// Test cases\nconsole.log(change_base(8, 3)); // '22'\nconsole.log(change_base(8, 2)); // '1000'\nconsole.log(change_base(7, 2)); // '111'"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "const triangle_area = function (a: number, h: number): number {\n    return 0.5 * a * h;\n};\n\n// Example usage:\nconsole.log(triangle_area(5, 3)); // Output: 7.5"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Initialize the sequence array with known values\n    const seq = [0, 0, 2, 0];\n\n    // Compute the sequence iteratively up to n\n    for (let i = 4; i <= n; i++) {\n        seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3] + seq[i - 4];\n    }\n\n    return seq[n];\n};\n\n// Test cases\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n    // First, sort the array in ascending order\n    l.sort((a, b) => a - b);\n\n    const len = l.length;\n    const mid = Math.floor(len / 2);\n\n    // If the length of the list is odd, return the middle element\n    if (len % 2 !== 0) {\n        return l[mid];\n    } else {\n        // If the length is even, return the average of the two middle elements\n        return (l[mid - 1] + l[mid]) / 2;\n    }\n};\n\n// Examples\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n    // Remove spaces and convert to lowercase for case-insensitive comparison\n    const cleanedText = text.replace(/\\s+/g, '').toLowerCase();\n    \n    // Compare the string with its reverse\n    return cleanedText === cleanedText.split('').reverse().join('');\n};\n\n// Test cases\nconsole.log(is_palindrome(''));       // True\nconsole.log(is_palindrome('aba'));    // True\nconsole.log(is_palindrome('aaaaa'));  // True\nconsole.log(is_palindrome('zbcd'));   // False"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "const modp = function (n: number, p: number): number {\n    if (n < 0 || p <= 0) {\n        throw new Error(\"Invalid input: n must be non-negative and p must be positive.\");\n    }\n\n    let result = 1; // Initialize result to 1 since any number to the power of 0 is 1.\n    let base = 2 % p; // Ensure the base (2) is taken modulo p for large n values.\n\n    for (let i = 0; i < n; i++) {\n        result = (result * base) % p;\n    }\n\n    return result;\n};"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n    if (!text) return text; // If the input is an empty string, return it immediately\n\n    const vowels = 'aeiouAEIOU';\n    let result = '';\n\n    for (let char of text) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n    return l.every(num => num < t);\n};\n\n// Test cases\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // True\nconsole.log(below_threshold([1, 20, 4, 10], 5));  // False"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};\n\n// Test cases\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n    // Helper function to sort a string and return it as an array of characters\n    const sortedString = (str: string) => str.split('').sort().join('');\n\n    // Compare the sorted versions of the two strings\n    return sortedString(s0) === sortedString(s1);\n};\n\n// Test cases\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input should be a positive integer.\");\n    }\n    \n    let a = 0, b = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    \n    return n === 0 ? 0 : b;\n};\n\n// Test cases\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "const correct_bracketing = function (brackets: string): boolean {\n    let stack: string[] = [];\n    \n    for (let char of brackets) {\n        if (char === '<') {\n            stack.push(char);\n        } else if (char === '>') {\n            if (stack.length === 0) {\n                return false; // No matching opening bracket\n            }\n            stack.pop();\n        }\n    }\n    \n    return stack.length === 0;\n};\n\n// Test cases\nconsole.log(correct_bracketing(\"<\")); // False\nconsole.log(correct_bracketing(\"<>\")); // True\nconsole.log(correct_bracketing(\"<<><>>\")); // True\nconsole.log(correct_bracketing(\"><<>\")); // False"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "const monotonic = function (l: Array<number>): boolean {\n    if (l.length <= 1) return true; // A single element or no elements list is trivially monotonic\n\n    let increasing = true;\n    let decreasing = true;\n\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false; // Found a pair where the list is not increasing\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false; // Found a pair where the list is not decreasing\n        }\n    }\n\n    return increasing || decreasing; // Return true if either increasing or decreasing is true\n};\n\n// Test cases\nconsole.log(monotonic([1, 2, 4, 20])); // True\nconsole.log(monotonic([1, 20, 4, 10])); // False\nconsole.log(monotonic([4, 1, 0, -10])); // True"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>): Array<number> {\n    // Create a set from the first list to eliminate duplicates\n    const set1 = new Set(l1);\n    \n    // Filter and collect elements that are also in the second list, using the set for efficiency\n    const commonElements = l2.filter(num => set1.has(num));\n    \n    // Convert the filtered result to a set to remove duplicates within the common elements\n    const uniqueCommonElements = [...new Set(commonElements)];\n    \n    // Sort the unique common elements in ascending order\n    uniqueCommonElements.sort((a, b) => a - b);\n    \n    return uniqueCommonElements;\n};\n\n// Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    // Function to check if a number is prime\n    const isPrime = (num: number) => {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n\n    // Divide n by 2 until it's odd\n    while (n % 2 === 0) {\n        n /= 2;\n    }\n\n    let largestFactor = 1;\n    for (let i = 3; i * i <= n; i += 2) {\n        while (n % i === 0) {\n            if (isPrime(i)) {\n                largestFactor = i;\n            }\n            n /= i;\n        }\n    }\n\n    // If n is still greater than 1, then it must be a prime number itself\n    if (n > 1 && isPrime(n)) {\n        largestFactor = n;\n    }\n\n    return largestFactor;\n};\n\n// Test cases\nconsole.log(largest_prime_factor(13195)); // Output: 29\nconsole.log(largest_prime_factor(2048));  // Output: 2"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    return n * (n + 1) / 2;\n};\n\n// Test cases\nconsole.log(sum_to_n(30)); // 465\nconsole.log(sum_to_n(100)); // 5050\nconsole.log(sum_to_n(5)); // 15\nconsole.log(sum_to_n(10)); // 55\nconsole.log(sum_to_n(1)); // 1"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "const correct_bracketing = function (brackets: string): boolean {\n    let stack: string[] = [];\n    \n    for (let char of brackets) {\n        if (char === '(') {\n            stack.push(char);\n        } else if (char === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    \n    return stack.length === 0;\n}\n\n// Test cases\nconsole.log(correct_bracketing(\"(\")); // False\nconsole.log(correct_bracketing(\"()\")); // True\nconsole.log(correct_bracketing(\"(()())\")); // True\nconsole.log(correct_bracketing(\")(()\")); // False"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    // Initialize an array to store the coefficients of the derivative polynomial.\n    let result: number[] = [];\n    \n    // Iterate over the coefficients, starting from the second element (index 1).\n    for (let i = 1; i < xs.length; i++) {\n        // Multiply each coefficient by its power and add to the result array.\n        result.push(xs[i] * i);\n    }\n    \n    return result;\n};\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // [2, 6]"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Create an array to store the computed values\n    const dp: number[] = [0, 0, 1];\n\n    // Compute the sequence up to n using a loop\n    for (let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    // Return the n-th element\n    return dp[n];\n};\n\n// Test cases\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    // Define a set of vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    \n    // Convert the string to lowercase to make the search case-insensitive\n    s = s.toLowerCase();\n    \n    let count = 0;\n    \n    // Iterate through each character in the string\n    for (let char of s) {\n        if (vowels.has(char)) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Example usage:\nconsole.log(vowels_count(\"abcde\")); // Output: 2\nconsole.log(vowels_count(\"ACEDY\")); // Output: 3"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "const circular_shift = function (x: number, shift: number): string {\n    // Convert the integer to a string and then to an array of digits\n    const digits = x.toString().split('');\n    \n    // Calculate the effective shift amount\n    const len = digits.length;\n    const actualShift = shift % len;\n    \n    if (len === 0) {\n        return \"\";\n    }\n    \n    // Perform the circular shift\n    const shiftedDigits = digits.slice(-actualShift).concat(digits.slice(0, -actualShift));\n    \n    // Join the array back into a string and return it\n    return shiftedDigits.join('');\n};\n\n// Example usage:\nconsole.log(circular_shift(12, 1)); // \"21\"\nconsole.log(circular_shift(12, 2)); // \"12\""}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "const digitSum = function (s: string): number {\n    // Helper function to sum the ASCII codes of uppercase characters in a string\n    const sumUppercaseASCII = (str: string): number => {\n        return str.split('').reduce((sum, char) => {\n            if (char >= 'A' && char <= 'Z') {\n                return sum + char.charCodeAt(0);\n            }\n            return sum;\n        }, 0);\n    };\n\n    // Sum the ASCII codes of uppercase characters in the input string\n    return sumUppercaseASCII(s);\n};\n\n// Examples\nconsole.log(digitSum(\"\")); // 0\nconsole.log(digitSum(\"abAB\")); // 131\nconsole.log(digitSum(\"abcCd\")); // 67\nconsole.log(digitSum(\"helloE\")); // 69\nconsole.log(digitSum(\"woArBld\")); // 131\nconsole.log(digitSum(\"aAaaaXa\")); // 153"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "const fruit_distribution = function (s: string, n: number): number {\n    // Use a regular expression to match the number of apples and oranges\n    const matches = s.match(/(\\d+) apples and (\\d+) oranges/);\n    \n    if (!matches) {\n        throw new Error(\"Invalid input format\");\n    }\n\n    // Extract the numbers from the matched groups\n    const applesCount = parseInt(matches[1], 10);\n    const orangesCount = parseInt(matches[2], 10);\n\n    // Calculate and return the number of mango fruits\n    return n - applesCount - orangesCount;\n};\n\n// Test cases\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19)); // Output: 8\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));   // Output: 2\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100)); // Output: 95\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120)); // Output: 19"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "const pluck = function (arr: Array<number>): Array<number> {\n    if (arr.length === 0) return [];\n\n    let smallestEvenValue = Infinity;\n    let indexOfSmallestEvenValue = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue) {\n            smallestEvenValue = arr[i];\n            indexOfSmallestEvenValue = i;\n        }\n    }\n\n    if (indexOfSmallestEvenValue === -1) return [];\n\n    return [smallestEvenValue, indexOfSmallestEvenValue];\n};"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n    // Step 1: Count the frequency of each integer in the list\n    const frequencyMap: { [key: number]: number } = {};\n    \n    for (const num of lst) {\n        if (frequencyMap[num] === undefined) {\n            frequencyMap[num] = 1;\n        } else {\n            frequencyMap[num]++;\n        }\n    }\n    \n    // Step 2: Find the integers that have a frequency greater than or equal to their value\n    let result = -1;\n    \n    for (const num in frequencyMap) {\n        const freq = frequencyMap[num];\n        if (freq >= parseInt(num)) {\n            if (parseInt(num) > result) {\n                result = parseInt(num);\n            }\n        }\n    }\n    \n    // Step 3: Return the greatest integer that satisfies the condition\n    return result;\n};\n\n// Examples\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "const strange_sort_list = function (lst: Array<number>): Array<number> {\n    if (lst.length === 0) return [];\n    \n    // Sort the list first\n    lst.sort((a, b) => a - b);\n    \n    let result: Array<number> = [];\n    \n    for (let i = 0; i < Math.ceil(lst.length / 2); i++) {\n        if (i * 2 + 1 < lst.length) {\n            result.push(lst[i]);\n            result.push(lst[lst.length - 1 - i]);\n        } else {\n            // If the length is odd, push the last middle element\n            result.push(lst[i]);\n        }\n    }\n    \n    return result;\n};\n\n// Examples\nconsole.log(strange_sort_list([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strange_sort_list([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strange_sort_list([])); // []"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    // Check if the sides form a valid triangle using the triangle inequality theorem\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Calculate the semi-perimeter of the triangle\n    const s = (a + b + c) / 2;\n    \n    // Apply Heron's formula to calculate the area\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Return the area rounded to 2 decimal points\n    return parseFloat(area.toFixed(2));\n};\n\n// Examples\nconsole.log(triangle_area(3, 4, 5)); // Output: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Output: -1"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n    // Check if the list is a palindrome\n    const isPalindrome = (arr: Array<number>): boolean => {\n        for (let i = 0; i < arr.length / 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Check if the sum of elements is less than or equal to w\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    return isPalindrome(q) && sum <= w;\n};\n\n// Test cases\nconsole.log(will_it_fly([1, 2], 5)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 1)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 9)); // \u279e True\nconsole.log(will_it_fly([3], 5)); // \u279e True"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "const smallest_change = function (arr: Array<number>): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let changes = 0;\n\n    while (start < end) {\n        if (arr[start] !== arr[end]) {\n            // If the elements are not equal, we need to change one of them\n            if (arr[start] > arr[end]) {\n                arr[end] = arr[start]; // Change the element at 'end' to match 'start'\n            } else {\n                arr[start] = arr[end]; // Change the element at 'start' to match 'end'\n            }\n            changes++;\n        }\n        start++;\n        end--;\n    }\n\n    return changes;\n};\n\n// Test cases\nconsole.log(smallest_change([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2])); // Output: 1\nconsole.log(smallest_change([1, 2, 3, 2, 1])); // Output: 0"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "const total_match = function (lst1: Array<string>, lst2: Array<string>): Array<string> {\n    // Helper function to calculate the total number of characters in a list of strings\n    const totalChars = (list: Array<string>): number => \n        list.reduce((total, str) => total + str.length, 0);\n\n    // Calculate the total number of characters for both lists\n    const total1 = totalChars(lst1);\n    const total2 = totalChars(lst2);\n\n    // Compare the totals and return the appropriate list\n    if (total1 < total2) {\n        return lst1;\n    } else if (total2 < total1) {\n        return lst2;\n    } else {\n        return lst1; // If both have the same number of characters, return the first list\n    }\n};\n\n// Test cases\nconsole.log(total_match([], [])); // \u279e []\nconsole.log(total_match(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\nconsole.log(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\nconsole.log(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\nconsole.log(total_match(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n    // Helper function to check if a number is prime\n    const isPrime = (num: number) => {\n        if (num <= 1) return false;\n        for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    // Generate all prime numbers less than 100\n    const primes: number[] = [];\n    for (let i = 2; i < 100; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n\n    // Check all combinations of three primes\n    const len = primes.length;\n    for (let i = 0; i < len - 2; i++) {\n        for (let j = i + 1; j < len - 1; j++) {\n            for (let k = j + 1; k < len; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // If no combination found, return false\n    return false;\n};\n\n// Example usage:\nconsole.log(is_multiply_prime(30)); // True, because 30 = 2 * 3 * 5\nconsole.log(is_multiply_prime(60)); // False, no combination of primes equals 60"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "const is_simple_power = function (x: number, n: number): boolean {\n    if (x === 1) return true; // Any base raised to the power of 0 is 1\n    if (n === 1 && x !== 1) return false; // Anything except 1 raised to the power of 1 will not be 1\n\n    let k = Math.floor(Math.log(x) / Math.log(n));\n    return n ** k === x;\n};\n\n// Test cases\nconsole.log(is_simple_power(1, 4)); // true\nconsole.log(is_simple_power(2, 2)); // true\nconsole.log(is_simple_power(8, 2)); // true\nconsole.log(is_simple_power(3, 2)); // false\nconsole.log(is_simple_power(3, 1)); // false\nconsole.log(is_simple_power(5, 3)); // false"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "const iscube = function (a: number): boolean {\n    const cubeRoot = Math.cbrt(a);\n    return Number.isInteger(cubeRoot);\n};\n\n// Test cases\nconsole.log(iscube(1));   // True\nconsole.log(iscube(2));   // False\nconsole.log(iscube(-1));  // True\nconsole.log(iscube(64));  // True\nconsole.log(iscube(0));   // True\nconsole.log(iscube(180)); // False"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "const hex_key = function (num: string): number {\n    // Helper function to check if a number is prime\n    const isPrime = (n: number): boolean => {\n        if (n <= 1) return false;\n        for (let i = 2; i * i <= n; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    // Define the set of hexadecimal digits that are prime\n    const primeHexDigits = ['2', '3', '5', '7', 'B', 'D'];\n\n    // Convert the input string to uppercase and filter out non-hexadecimal characters\n    num = num.toUpperCase();\n\n    // Initialize a count for prime hexadecimal digits\n    let count = 0;\n\n    // Iterate over each character in the string\n    for (const char of num) {\n        if (primeHexDigits.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;\n};\n\n// Examples\nconsole.log(hex_key(\"AB\")); // Output: 1\nconsole.log(hex_key(\"1077E\")); // Output: 2\nconsole.log(hex_key(\"ABED1A33\")); // Output: 4\nconsole.log(hex_key(\"123456789ABCDEF0\")); // Output: 6\nconsole.log(hex_key(\"2020\")); // Output: 2"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    // Convert the decimal number to binary\n    const binaryString = decimal.toString(2);\n    \n    // Add 'db' at the beginning and end of the binary string\n    return `db${binaryString}db`;\n};\n\n// Examples\nconsole.log(decimal_to_binary(15));  // returns \"db1111db\"\nconsole.log(decimal_to_binary(32));  // returns \"db100000db\""}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Iterate through the string and check every 3 consecutive characters\n    for (let i = 0; i <= s.length - 3; i++) {\n        const substr = s.substring(i, i + 3);\n        if (new Set(substr).size !== 3) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(is_happy(\"a\")); // False\nconsole.log(is_happy(\"aa\")); // False\nconsole.log(is_happy(\"abcd\")); // True\nconsole.log(is_happy(\"aabb\")); // False\nconsole.log(is_happy(\"adb\")); // True\nconsole.log(is_happy(\"xyy\")); // False"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        if (gpa > 3.7) return 'A';\n        if (gpa > 3.3) return 'A-';\n        if (gpa > 3.0) return 'B+';\n        if (gpa > 2.7) return 'B';\n        if (gpa > 2.3) return 'B-';\n        if (gpa > 2.0) return 'C+';\n        if (gpa > 1.7) return 'C';\n        if (gpa > 1.3) return 'C-';\n        if (gpa > 1.0) return 'D+';\n        if (gpa > 0.7) return 'D';\n        if (gpa > 0.0) return 'D-';\n        return 'E';\n    });\n};\n\n// Example usage:\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst prime_length = function (string0: string): boolean {\n    const length = string0.length;\n    return isPrime(length);\n};\n\n// Examples\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "const starts_one_ends = function (n: number): number {\n    if (n === 1) {\n        // For a single digit, only the number 1 satisfies the condition\n        return 1;\n    }\n    \n    const countStartingWithOne = Math.pow(10, n - 1);\n    const countEndingWithOne = Math.pow(9, n - 1);\n    const countBothStartAndEndWithOne = Math.pow(9, n - 2);\n    \n    return countStartingWithOne + countEndingWithOne - countBothStartAndEndWithOne;\n};"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "const solve = function (N: number): string {\n    // Step 1: Convert N to its binary representation as a string\n    const binaryString = N.toString(2);\n    \n    // Step 2: Sum all the digits in the binary representation\n    let sumOfDigits = 0;\n    for (let char of binaryString) {\n        sumOfDigits += parseInt(char, 10);\n    }\n    \n    // Step 3: Convert the sum back to a binary string and return it\n    return sumOfDigits.toString(2);\n};\n\n// Example usage:\nconsole.log(solve(1000)); // Output: \"1\"\nconsole.log(solve(150));  // Output: \"110\"\nconsole.log(solve(147));  // Output: \"1100\""}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "const add = function (lst: Array<number>): number {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) { // Start from index 1 and step by 2 to get odd indices\n        if (lst[i] % 2 === 0) { // Check if the element at the odd index is even\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\n// Examples\nconsole.log(add([4, 2, 6, 7])); // Output: 2"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "const anti_shuffle = function (s: string): string {\n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n};\n\n// Test cases\nconsole.log(anti_shuffle('Hi')); // 'Hi'\nconsole.log(anti_shuffle('hello')); // 'ehllo'\nconsole.log(anti_shuffle('Hello World!!!')); // 'Hello !!!Wdlor'"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    // Initialize an empty array to store the coordinates\n    let result: Array<[number, number]> = [];\n    \n    // Iterate through each row in the list\n    for (let i = 0; i < lst.length; i++) {\n        // For each row, iterate through its elements\n        for (let j = 0; j < lst[i].length; j++) {\n            // If the element matches x, add the coordinates to the result list\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    \n    // Sort the result by rows in ascending order and then by columns in descending order\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // If rows are the same, sort by column in descending order\n        } else {\n            return a[0] - b[0]; // Otherwise, sort by row in ascending order\n        }\n    });\n    \n    return result;\n};\n\n// Examples\nconsole.log(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(get_row([], 1)); // == []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "const sort_array = function (array: Array<number>): Array<number> {\n    if (array.length === 0) return [];\n    if (array.length === 1) return array;\n\n    const firstValue = array[0];\n    const lastValue = array[array.length - 1];\n    const sum = firstValue + lastValue;\n\n    if (sum % 2 === 0) {\n        // Sort in descending order\n        return [...array].sort((a, b) => b - a);\n    } else {\n        // Sort in ascending order\n        return [...array].sort((a, b) => a - b);\n    }\n};\n\n// Examples:\nconsole.log(sort_array([])); // []\nconsole.log(sort_array([5])); // [5]\nconsole.log(sort_array([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "const encrypt = function (s: string): string {\n    // Helper function to shift a single character\n    const shiftChar = (char: string, shiftBy: number): string => {\n        if (!char.match(/[a-zA-Z]/)) return char; // If not a letter, return it unchanged\n        \n        const baseCode = char === char.toLowerCase() ? 'a'.charCodeAt(0) : 'A'.charCodeAt(0);\n        let shiftedCharCode = ((char.charCodeAt(0) - baseCode + shiftBy) % 26) + baseCode;\n        \n        return String.fromCharCode(shiftedCharCode);\n    };\n\n    // Encrypt each character in the string by shifting down by 2 * 2 places\n    let encryptedString = '';\n    for (let char of s) {\n        encryptedString += shiftChar(char, 4);\n    }\n    \n    return encryptedString;\n};\n\n// Test cases\nconsole.log(encrypt('hi')); // returns 'lm'\nconsole.log(encrypt('asdfghjkl')); // returns 'ewhjklnop'\nconsole.log(encrypt('gf')); // returns 'kj'\nconsole.log(encrypt('et')); // returns 'ix'"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n    if (lst.length < 2) return null;\n    \n    // Remove duplicates by converting the list to a Set and back to an array\n    const uniqueLst = [...new Set(lst)];\n    \n    // Sort the unique list in ascending order\n    uniqueLst.sort((a, b) => a - b);\n    \n    // Return the second smallest element if it exists\n    return uniqueLst.length > 1 ? uniqueLst[1] : null;\n};\n\n// Test cases\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // == 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // == 2\nconsole.log(next_smallest([])); // == None\nconsole.log(next_smallest([1, 1])); // == None"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n    // Split the input string into sentences based on delimiters '.', '?', and '!'\n    const sentences = S.split(/[.!?]/);\n    \n    // Initialize a counter for boredoms\n    let boredomCount = 0;\n    \n    // Iterate over each sentence\n    for (const sentence of sentences) {\n        // Trim leading and trailing whitespace from the sentence\n        const trimmedSentence = sentence.trim();\n        \n        // Check if the trimmed sentence starts with 'I'\n        if (trimmedSentence.startsWith('I')) {\n            boredomCount++;\n        }\n    }\n    \n    return boredomCount;\n};\n\n// Example usage:\nconsole.log(is_bored(\"Hello world\")); // Output: 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "const any_int = function (x: number, y: number, z: number): boolean {\n    // Check if all numbers are integers\n    if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n        return false;\n    }\n    \n    // Check if one of the numbers is equal to the sum of the other two\n    return x === y + z || y === x + z || z === x + y;\n};\n\n// Examples\nconsole.log(any_int(5, 2, 7)); // \u279e True\nconsole.log(any_int(3, 2, 2)); // \u279e False\nconsole.log(any_int(3, -2, 1)); // \u279e True\nconsole.log(any_int(3.6, -2.2, 2)); // \u279e False"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "const encode = function (message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    return message.split('').map(char => {\n        if (/[aeiou]/i.test(char)) {\n            // Find the index of the vowel in the array\n            let index = vowels.indexOf(char.toLowerCase());\n            // Replace with the letter that appears 2 places ahead\n            char = String.fromCharCode((char.charCodeAt(0) - 97 + 2) % 26 + 97);\n        } else if (/[a-z]/.test(char)) {\n            // Swap case for lowercase letters\n            char = char.toUpperCase();\n        } else if (/[A-Z]/.test(char)) {\n            // Swap case for uppercase letters\n            char = char.toLowerCase();\n        }\n        return char;\n    }).join('');\n};\n\n// Examples\nconsole.log(encode('test')); // 'TGST'\nconsole.log(encode('This is a message')); // 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "function isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction sumOfDigits(num: number): number {\n    return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}\n\nconst skjkasdkd = function (lst: Array<number>): number {\n    let largestPrime = -1;\n    \n    for (const num of lst) {\n        if (isPrime(num)) {\n            if (num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n    }\n    \n    if (largestPrime === -1) return 0; // No prime numbers found\n    \n    return sumOfDigits(largestPrime);\n};\n\n// Test cases\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    // Check if the dictionary is empty\n    if (dict.size === 0) {\n        return false;\n    }\n\n    let allLower = true;\n    let allUpper = true;\n\n    for (let key of dict.keys()) {\n        if (typeof key !== 'string') {\n            // If any key is not a string, the function should return False\n            return false;\n        }\n        \n        // Check if the key is in lower case\n        if (key !== key.toLowerCase()) {\n            allLower = false;\n        }\n        \n        // Check if the key is in upper case\n        if (key !== key.toUpperCase()) {\n            allUpper = false;\n        }\n    }\n\n    return allLower || allUpper;\n};\n\n// Test cases\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"b\", \"banana\"]]))); // True\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [8, \"banana\"], [\"a\", \"apple\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]]))); // True"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst count_up_to = function (n: number): Array<number> {\n    const primes: Array<number> = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\n\n// Test cases\nconsole.log(count_up_to(5)); // [2,3]\nconsole.log(count_up_to(11)); // [2,3,5,7]\nconsole.log(count_up_to(0)); // []\nconsole.log(count_up_to(20)); // [2,3,5,7,11,13,17,19]\nconsole.log(count_up_to(1)); // []\nconsole.log(count_up_to(18)); // [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "const multiply = function (a: number, b: number): number {\n    // Get the unit digits of both numbers\n    const unitDigitA = Math.abs(a) % 10;\n    const unitDigitB = Math.abs(b) % 10;\n    \n    // Return the product of their unit digits\n    return unitDigitA * unitDigitB;\n};\n\n// Examples:\nconsole.log(multiply(148, 412)); // should return 16\nconsole.log(multiply(19, 28));   // should return 72\nconsole.log(multiply(2020, 1851)); // should return 0\nconsole.log(multiply(14, -15));   // should return 20"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "const count_upper = function (s: string): number {\n    // Define a set of uppercase vowels\n    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    \n    // Initialize a counter for uppercase vowels at even indices\n    let count = 0;\n    \n    // Iterate through the string, checking only even indices\n    for (let i = 0; i < s.length; i += 2) {\n        if (uppercaseVowels.has(s[i])) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Test cases\nconsole.log(count_upper('aBCdEf')); // returns 1\nconsole.log(count_upper('abcdefg')); // returns 0\nconsole.log(count_upper('dBBE')); // returns 0"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "const closest_integer = (value: string): number => {\n  const num = parseFloat(value);\n  \n  // Check if the number is exactly halfway between two integers\n  if (num % 1 === 0.5 || num % 1 === -0.5) {\n    // If it's negative, round towards zero means rounding down\n    if (num < 0) {\n      return Math.floor(num);\n    } else {\n      // If it's positive, round towards zero means rounding up\n      return Math.ceil(num);\n    }\n  }\n  \n  // For all other cases, use the standard Math.round to round away from zero if necessary\n  return Math.round(num);\n};\n\n// Test examples\nconsole.log(closest_integer(\"10\"));      // Output: 10\nconsole.log(closest_integer(\"15.3\"));    // Output: 15\nconsole.log(closest_integer(\"14.5\"));    // Output: 15\nconsole.log(closest_integer(\"-14.5\"));   // Output: -15"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    const pile: number[] = [];\n    let currentStones = n;\n    \n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n        if (n % 2 === 0) {\n            // If n is even, the next number will be odd\n            currentStones += 1;\n            while (currentStones % 2 !== 1) {\n                currentStones++;\n            }\n        } else {\n            // If n is odd, the next number will be even\n            currentStones += 1;\n            while (currentStones % 2 !== 0) {\n                currentStones++;\n            }\n        }\n    }\n    \n    return pile;\n};\n\n// Examples:\nconsole.log(make_a_pile(3)); // [3, 5, 7]\nconsole.log(make_a_pile(4)); // [4, 6, 8, 10]"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n    // Use a regular expression to split the string by commas or spaces\n    return s.split(/[\\s,]+/);\n};\n\n// Example usage:\nconsole.log(words_string(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Ensure x is less than or equal to y for a valid range\n    if (x > y) return -1;\n\n    // Start from the largest number in the range and check downwards\n    for (let i = Math.max(x, y); i >= Math.min(x, y); i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n};"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any {\n    if (n > m) return -1;\n    \n    const sum = (n + m) / 2;\n    const roundedSum = Math.round(sum);\n    return `0b${roundedSum.toString(2)}`;\n};\n\n// Example usage:\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "const unique_digits = function (x: Array<number>): Array<number> {\n    // Helper function to check if a number has any even digits\n    const hasEvenDigit = (num: number): boolean => {\n        const strNum = num.toString();\n        for (let char of strNum) {\n            const digit = parseInt(char, 10);\n            if (digit % 2 === 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Filter out numbers that have even digits\n    const filteredNumbers = x.filter((num) => !hasEvenDigit(num));\n\n    // Sort the remaining numbers in increasing order\n    filteredNumbers.sort((a, b) => a - b);\n\n    return filteredNumbers;\n};\n\n// Example usage:\nconsole.log(unique_digits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(unique_digits([152, 323, 1422, 10])); // []"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "const by_length = function (arr: Array<number>): Array<string> {\n    // Step 1: Filter the array to include only integers between 1 and 9 inclusive\n    const filteredArr = arr.filter(num => num >= 1 && num <= 9);\n\n    // Step 2: Sort the filtered array\n    const sortedArr = filteredArr.sort((a, b) => a - b);\n\n    // Step 3: Reverse the sorted array\n    const reversedArr = sortedArr.reverse();\n\n    // Step 4: Map each digit to its corresponding name\n    const namesMap: { [key: number]: string } = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n\n    const result = reversedArr.map(num => namesMap[num as keyof typeof namesMap]);\n\n    // Step 5: Return the resulting array of names\n    return result;\n};\n\n// Example usage:\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(by_length([])); // []\nconsole.log(by_length([1, -1, 55])); // ['One']"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    const result: number[] = [];\n    \n    // Helper function to calculate factorial\n    const factorial = (num: number): number => {\n        if (num === 0 || num === 1) return 1;\n        let fact = 1;\n        for (let i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    };\n    \n    // Helper function to calculate sum from 1 to num\n    const sumUpTo = (num: number): number => {\n        let sum = 0;\n        for (let i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    };\n    \n    // Populate the result array based on the conditions\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumUpTo(i));\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): [number, number] {\n    let evens = 0;\n    let odds = 0;\n\n    // Helper function to check if a number is a palindrome\n    const isPalindrome = (num: number) => {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    };\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evens++;\n            } else {\n                odds++;\n            }\n        }\n    }\n\n    return [evens, odds];\n};\n\n// Example usage:\nconsole.log(even_odd_palindrome(3)); // Output: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Output: [4, 6]"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "const count_nums = function (arr: Array<number>): number {\n    return arr.filter(num => {\n        const digits = Math.abs(num).toString().split('').map(Number);\n        if (num < 0) {\n            // For negative numbers, the first digit is considered negative\n            digits[0] *= -1;\n        }\n        return digits.reduce((sum, digit) => sum + digit, 0) > 0;\n    }).length;\n};\n\n// Test cases\nconsole.log(count_nums([])); // 0\nconsole.log(count_nums([-1, 11, -11])); // 1\nconsole.log(count_nums([1, 1, 2])); // 3"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>): boolean {\n    if (arr.length === 0) return true;\n\n    const n = arr.length;\n    \n    // Function to check if an array is sorted in non-decreasing order\n    const isSorted = (arr: Array<number>) => {\n        for (let i = 1; i < arr.length; i++) {\n            if (arr[i] < arr[i - 1]) return false;\n        }\n        return true;\n    };\n\n    // Check each possible shift\n    for (let shift = 0; shift < n; shift++) {\n        let shiftedArr = arr.slice(shift).concat(arr.slice(0, shift));\n        if (isSorted(shiftedArr)) return true;\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n    // Helper function to determine if all elements in a list are even\n    const isAllEven = (list: Array<number>): boolean => {\n        return list.every(num => num % 2 === 0);\n    };\n\n    // Identify even and odd numbers in lst1 and lst2\n    const lst1Evens = lst1.filter(num => num % 2 === 0);\n    const lst1Odds = lst1.filter(num => num % 2 !== 0);\n    const lst2Evens = lst2.filter(num => num % 2 === 0);\n    const lst2Odds = lst2.filter(num => num % 2 !== 0);\n\n    // Check if lst1 already contains only even numbers\n    if (isAllEven(lst1)) {\n        return \"YES\";\n    }\n\n    // If there are more odd numbers in lst1 than evens, it's impossible to make all elements even\n    if (lst1Odds.length > lst1Evens.length) {\n        return \"NO\";\n    }\n\n    // Check if we can swap enough odd numbers from lst2 to lst1 to make all elements even in lst1\n    if (lst2Odds.length >= lst1Odds.length) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n};\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "const histogram = function (test: string): Map<string, number> {\n    if (!test) return new Map(); // Return an empty map if the input is an empty string\n\n    const lettersMap = new Map<string, number>();\n    const lettersArray = test.split(' ');\n\n    for (const letter of lettersArray) {\n        if (letter !== '') {\n            if (!lettersMap.has(letter)) {\n                lettersMap.set(letter, 1);\n            } else {\n                lettersMap.set(letter, lettersMap.get(letter)! + 1);\n            }\n        }\n    }\n\n    let maxCount = 0;\n    const resultMap = new Map<string, number>();\n\n    for (const [letter, count] of lettersMap) {\n        if (count > maxCount) {\n            maxCount = count;\n            resultMap.clear();\n            resultMap.set(letter, count);\n        } else if (count === maxCount) {\n            resultMap.set(letter, count);\n        }\n    }\n\n    return resultMap;\n};"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): Array<any> {\n    // Step 1: Remove all characters in s that are present in c\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n\n    // Step 2: Check if the resulting string is a palindrome\n    const isPalindrome = (str: string): boolean => {\n        return str === str.split('').reverse().join('');\n    };\n\n    // Step 3: Return the modified string and the result of the palindrome check\n    return [result, isPalindrome(result)];\n};\n\n// Example usage:\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // Output: ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "const odd_count = function (lst: Array<string>): Array<string> {\n    const result: Array<string> = [];\n    \n    for (let str of lst) {\n        let oddCount = 0;\n        for (let char of str) {\n            if ((parseInt(char) % 2 !== 0)) {\n                oddCount++;\n            }\n        }\n        const modifiedString = `the number of odd elements ${oddCount}n the str${oddCount}ng ${oddCount} of the ${oddCount}nput.`;\n        result.push(modifiedString);\n    }\n    \n    return result;\n};\n\n// Test cases\nconsole.log(odd_count(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(odd_count(['3', \"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "const minSubArraySum = function (nums: Array<number>): number {\n    if (nums.length === 0) return 0; // Handle edge case of empty array\n    \n    let minSoFar = Infinity; // Initialize the minimum sum so far to a large number\n    let currentMin = 0; // Current minimum sub-array sum ending at the current position\n\n    for (let num of nums) {\n        currentMin = Math.min(currentMin + num, num); // Update the current minimum sub-array sum\n        minSoFar = Math.min(minSoFar, currentMin); // Update the global minimum if needed\n    }\n\n    return minSoFar;\n};\n\n// Example usage:\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1\nconsole.log(minSubArraySum([-1, -2, -3])); // Output: -6"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n    let totalWaterUnits = 0;\n\n    // Calculate the total number of water units in all wells\n    for (let row of grid) {\n        for (let cell of row) {\n            if (cell === 1) {\n                totalWaterUnits += 1;\n            }\n        }\n    }\n\n    // If there are no water units, return 0\n    if (totalWaterUnits === 0) {\n        return 0;\n    }\n\n    // Calculate the number of times we need to use the bucket\n    const numberOfBucketUses = Math.ceil(totalWaterUnits / capacity);\n\n    return numberOfBucketUses;\n};\n\n// Example usage:\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)); // Output: 6\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)); // Output: 5\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5)); // Output: 0"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "const sort_array = function (arr: Array<number>): Array<number> {\n    return arr.sort((a, b) => {\n        const countOnes = (num: number): number => num.toString(2).split('1').length - 1;\n        \n        const onesA = countOnes(a);\n        const onesB = countOnes(b);\n        \n        if (onesA === onesB) {\n            return a - b;\n        } else {\n            return onesA - onesB;\n        }\n    });\n};\n\n// Test cases\nconsole.log(sort_array([1, 5, 2, 3, 4])); // [1, 2, 3, 4, 5]\nconsole.log(sort_array([-2, -3, -4, -5, -6])); // [-6, -5, -4, -3, -2]\nconsole.log(sort_array([1, 0, 2, 3, 4])); // [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "const select_words = function (s: string, n: number): Array<string> {\n    if (!s) return [];\n\n    const consonants = new Set(['a', 'e', 'i', 'o', 'u']);\n    \n    // Helper function to count consonants in a word\n    const countConsonants = (word: string): number => {\n        let count = 0;\n        for (const char of word) {\n            if (!consonants.has(char.toLowerCase())) {\n                count++;\n            }\n        }\n        return count;\n    };\n\n    const words = s.split(' ');\n    const result: Array<string> = [];\n\n    for (const word of words) {\n        if (countConsonants(word) === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n};\n\n// Examples\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "const get_closest_vowel = function (word: string): string {\n    // Define vowels and consonants\n    const vowels = \"aeiouAEIOU\";\n    \n    // Iterate from the second last character to the second character\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i])) {\n            // Check if the current character is a vowel and surrounded by consonants\n            if (!vowels.includes(word[i + 1]) && !vowels.includes(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    \n    // If no such vowel is found, return an empty string\n    return \"\";\n};\n\n// Test cases\nconsole.log(get_closest_vowel(\"yogurt\")); // \"u\"\nconsole.log(get_closest_vowel(\"FULL\"));   // \"U\"\nconsole.log(get_closest_vowel(\"quick\"));  // \"\"\nconsole.log(get_closest_vowel(\"ab\"));     // \"\""}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "const match_parens = function (lst: Array<string>): string {\n    const str1 = lst[0];\n    const str2 = lst[1];\n\n    // Helper function to check if a string is balanced\n    const isBalanced = (s: string): boolean => {\n        let balance = 0;\n        for (let char of s) {\n            if (char === '(') {\n                balance++;\n            } else if (char === ')') {\n                balance--;\n            }\n            // If at any point balance is negative, it means there are more closing parentheses than opening ones\n            if (balance < 0) return false;\n        }\n        return balance === 0;\n    };\n\n    // Check both possible concatenations\n    const concatenated1 = str1 + str2;\n    const concatenated2 = str2 + str1;\n\n    if (isBalanced(concatenated1) || isBalanced(concatenated2)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n};\n\n// Examples\nconsole.log(match_parens(['()(', ')'])); // Output: 'Yes'\nconsole.log(match_parens([')', ')']));   // Output: 'No'"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Step 1: Sort the array in descending order to get the largest elements at the beginning\n    const sortedArr = arr.sort((a, b) => b - a);\n    \n    // Step 2: Take the first `k` elements from the sorted array\n    return sortedArr.slice(0, k).sort((a, b) => a - b); // Sort them in ascending order before returning\n};\n\n// Example usage:\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)); // Output: [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "const solution = function (lst: Array<number>): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) { // Iterate over even positions\n        if (lst[i] % 2 !== 0) { // Check if the value at the position is odd\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\n// Examples\nconsole.log(solution([5, 8, 7, 1])); // ==> 12\nconsole.log(solution([3, 3, 3, 3, 3])); // ==> 9\nconsole.log(solution([30, 13, 24, 321])); // ==> 0"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) { // Check if the length of the string representation is at most 2 digits\n            sum += arr[i];\n        }\n    }\n    return sum;\n};\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(add_elements(arr, k)); // Output: 24"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "const get_odd_collatz = function (n: number): Array<number> {\n    // Helper function to generate the Collatz sequence up to 1\n    const collatzSequence = (num: number): Array<number> => {\n        let sequence: Array<number> = [];\n        while (num !== 1) {\n            if (num % 2 === 0) {\n                num /= 2;\n            } else {\n                num = 3 * num + 1;\n            }\n            sequence.push(num);\n        }\n        return sequence;\n    };\n\n    // Generate the Collatz sequence for n\n    const sequence = collatzSequence(n);\n\n    // Filter out the odd numbers and sort them\n    const oddNumbers = sequence.filter(num => num % 2 !== 0).sort((a, b) => a - b);\n\n    return oddNumbers;\n};\n\n// Example usage:\nconsole.log(get_odd_collatz(5)); // Output: [1, 5]"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "const valid_date = function (date: string): boolean {\n    // Check if the date string is empty\n    if (!date) return false;\n\n    // Regular expression to match the format mm-dd-yyyy\n    const regex = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n    \n    // Test the date string against the regular expression\n    const matches = date.match(regex);\n    if (!matches) return false;\n\n    // Extract month, day, and year from the matched groups\n    const month = parseInt(matches[1], 10);\n    const day = parseInt(matches[2], 10);\n    const year = parseInt(matches[3], 10);\n\n    // Check if the month is valid\n    if (month < 1 || month > 12) return false;\n\n    // Define days in each month\n    const daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    \n    // Check if the day is valid for the given month\n    if (day < 1 || day > daysInMonth[month - 1]) return false;\n\n    // If all checks pass, return true\n    return true;\n};\n\n// Test cases\nconsole.log(valid_date('03-11-2000')); // True\nconsole.log(valid_date('15-01-2012')); // False\nconsole.log(valid_date('04-0-2040'));  // False\nconsole.log(valid_date('06-04-2020')); // True\nconsole.log(valid_date('06/04/2020')); // False"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "const split_words = function (txt: string): any {\n    // Check if there are whitespaces in the text and split by them\n    if (/ /.test(txt)) {\n        return txt.split(/\\s+/);\n    }\n    \n    // If no whitespaces, check for commas\n    else if (/,/.test(txt)) {\n        return txt.split(/,/);\n    }\n    \n    // If neither, count lowercase letters with odd order in the alphabet\n    else {\n        let count = 0;\n        for (let char of txt) {\n            if (/[a-z]/.test(char)) {\n                // Calculate the position of 'a' as 0, so 'b' is at index 1, and so on.\n                const position = char.charCodeAt(0) - 'a'.charCodeAt(0);\n                if (position % 2 === 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n\n// Test cases\nconsole.log(split_words(\"Hello world!\")); // [\"Hello\", \"world!\"]\nconsole.log(split_words(\"Hello,world!\")); // [\"Hello\", \"world!\"]\nconsole.log(split_words(\"abcdef\")); // 3"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "const is_sorted = function (lst: Array<number>): boolean {\n  // If the list has only one element, it is trivially sorted\n  if (lst.length <= 1) return true;\n\n  // Iterate through the list and check if each element is less than or equal to the next element\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n\n  // If we haven't returned false by now, the list is sorted\n  return true;\n};"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num === 2) return true; // 2 is the only even prime number\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst intersection = function (interval1: Array<number>, interval2: Array<number>): string {\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    // Find the intersection of the two intervals\n    const startIntersect = Math.max(start1, start2);\n    const endIntersect = Math.min(end1, end2);\n\n    if (startIntersect > endIntersect) {\n        return \"NO\"; // No intersection\n    }\n\n    const lengthIntersection = endIntersect - startIntersect + 1;\n\n    // Check if the length of the intersection is a prime number\n    return isPrime(lengthIntersection) ? \"YES\" : \"NO\";\n};\n\n// Example usage:\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "const prod_signs = function (arr: Array<number>): any {\n    if (arr.length === 0) return null;\n\n    const signs = arr.map(num => num >= 0 ? 1 : -1);\n    const signProduct = signs.reduce((acc, curr) => acc * curr, 1);\n    const magnitudesSum = arr.reduce((acc, curr) => acc + Math.abs(curr), 0);\n\n    return signProduct * magnitudesSum;\n};\n\n// Example usage:\nconsole.log(prod_signs([1, 2, 2, -4])); // Output: -9\nconsole.log(prod_signs([0, 1])); // Output: 0\nconsole.log(prod_signs([])); // Output: null"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "const minPath = function (grid: Array<Array<number>>, k: number): Array<number> {\n    const N = grid.length;\n    const directions = [\n        [-1, 0], // up\n        [1, 0],  // down\n        [0, -1], // left\n        [0, 1]   // right\n    ];\n\n    const isValid = (x: number, y: number) => x >= 0 && x < N && y >= 0 && y < N;\n\n    let minPath: Array<number> = [];\n    let minValue = Infinity;\n\n    const bfs = (startX: number, startY: number) => {\n        const queue: Array<{ x: number, y: number, path: Array<number> }> = [{ x: startX, y: startY, path: [grid[startX][startY]] }];\n\n        while (queue.length > 0) {\n            const { x, y, path } = queue.shift()!;\n\n            if (path.length === k) {\n                if (minValue > grid[x][y]) {\n                    minValue = grid[x][y];\n                    minPath = [...path, grid[x][y]];\n                } else if (minValue === grid[x][y] && comparePaths(minPath, path) > 0) {\n                    minPath = [...path, grid[x][y]];\n                }\n                continue;\n            }\n\n            for (const [dx, dy] of directions) {\n                const newX = x + dx;\n                const newY = y + dy;\n\n                if (isValid(newX, newY)) {\n                    queue.push({ x: newX, y: newY, path: [...path, grid[newX][newY]] });\n                }\n            }\n        }\n    };\n\n    const comparePaths = (pathA: Array<number>, pathB: Array<number>): number => {\n        for (let i = 0; i < Math.min(pathA.length, pathB.length); i++) {\n            if (pathA[i] !== pathB[i]) {\n                return pathA[i] - pathB[i];\n            }\n        }\n        return 0;\n    };\n\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            bfs(i, j);\n        }\n    }\n\n    return minPath;\n};"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n    // Create an array to store the sequence values\n    let result: number[] = [];\n    \n    // Handle base cases\n    if (n >= 0) result[0] = 3;\n    if (n >= 1) result[1] = 2;\n    \n    // Generate the sequence using the recurrence relations\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(tri(3)); // Output: [3, 2, 8]"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "const digits = function (n: number): number {\n    const numStr = n.toString();\n    let product = 1;\n    \n    for (let char of numStr) {\n        const digit = parseInt(char, 10);\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n    }\n    \n    return product === 1 ? 0 : product;\n};"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "const is_nested = (string0: string): boolean => {\n  // Initialize a variable to keep track of whether we found any nested brackets\n  let foundNested = false;\n  \n  // Iterate through the string, checking for patterns that indicate nesting\n  for (let i = 0; i < string0.length - 1; i++) {\n    if (string0[i] === '[' && string0[i + 1] === '[') {\n      // If we find two consecutive opening brackets, check if they are nested later in the string\n      for (let j = i + 2; j < string0.length; j++) {\n        if (string0[j] === ']' && string0[j - 1] === '[') {\n          // If we find a closing bracket immediately after an opening bracket, mark that nesting was found\n          foundNested = true;\n          break;\n        }\n      }\n    }\n  }\n  \n  return foundNested;\n};\n\n// Test cases\nconsole.log(is_nested('[[]]')); // True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // False\nconsole.log(is_nested('[][]')); // False\nconsole.log(is_nested('[]')); // False\nconsole.log(is_nested('[[][]]')); // True\nconsole.log(is_nested('[[]][[')) ;// True"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst sum_squares = function (lst: Array<number>): number {\n    // Step 1: Round each element to the upper integer\n    const roundedList = lst.map(num => math.ceil(num));\n    \n    // Step 2: Square each of the rounded numbers\n    const squaredList = roundedList.map(num => num * num);\n    \n    // Step 3: Sum all the squared numbers\n    const sum = squaredList.reduce((acc, curr) => acc + curr, 0);\n    \n    // Step 4: Return the sum\n    return sum;\n};\n\n// Examples\nconsole.log(sum_squares([1, 2, 3])); // Output: 14\nconsole.log(sum_squares([1, 4, 9])); // Output: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Output: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Output: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Output: 6"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n    // Check if the string is empty or has only spaces\n    if (txt.trim() === '') {\n        return false;\n    }\n\n    // Get the last character of the string\n    const lastChar = txt[txt.length - 1];\n\n    // Check if the last character is an alphabetical character and not part of a word\n    return /^[a-zA-Z]$/.test(lastChar) && !/\\w*$/.test(lastChar);\n};\n\n// Test cases\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n// Examples:\nconsole.log(can_arrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(can_arrange([1, 2, 3]));       // Output: -1"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): [any, any] {\n    let largestNegative: number | null = null;\n    let smallestPositive: number | null = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n};\n\n// Examples:\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largest_smallest_integers([])); // Output: [null, null]\nconsole.log(largest_smallest_integers([0])); // Output: [null, null]"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "const compare_one = function (a: any, b: any): any {\n    // Helper function to convert string representations of numbers to a comparable format\n    const parseNumber = (value: string) => {\n        if (typeof value === 'string') {\n            // Replace comma with dot for consistency in handling floats\n            value = value.replace(',', '.');\n        }\n        return parseFloat(value);\n    };\n\n    // Check types and compare values accordingly\n    if (typeof a !== typeof b) {\n        // If types are different, prefer the type that is either number or string representation of a number\n        const aIsNumber = !isNaN(parseFloat(a));\n        const bIsNumber = !isNaN(parseFloat(b));\n\n        if (aIsNumber && bIsNumber) {\n            // Both are numbers, compare as numbers\n            return Math.max(parseFloat(a), parseFloat(b));\n        } else if (!aIsNumber && !bIsNumber) {\n            // Neither is a number, convert to strings and compare lexicographically\n            return String(a).localeCompare(String(b)) > 0 ? a : b;\n        } else {\n            // One of them is a number, prefer that one\n            return aIsNumber ? a : b;\n        }\n    } else if (typeof a === 'number' && typeof b === 'number') {\n        // Both are numbers, compare as numbers\n        return Math.max(a, b);\n    } else if (typeof a === 'string' && typeof b === 'string') {\n        // Both are strings, convert to comparable format and compare\n        const parsedA = parseNumber(a);\n        const parsedB = parseNumber(b);\n        if (!isNaN(parsedA) && !isNaN(parsedB)) {\n            return Math.max(parsedA, parsedB);\n        } else {\n            // If either cannot be parsed as a number, compare lexicographically\n            return String(a).localeCompare(String(b)) > 0 ? a : b;\n        }\n    } else if (typeof a === 'string' || typeof b === 'string') {\n        // One is a string and the other is not a number, prefer the string representation\n        const parsedA = parseNumber(a);\n        const parsedB = parseNumber(b);\n        if (!isNaN(parsedA) && !isNaN(parsedB)) {\n            return Math.max(parsedA, parsedB);\n        } else {\n            // If either cannot be parsed as a number, compare lexicographically\n            return String(a).localeCompare(String(b)) > 0 ? a : b;\n        }\n    } else {\n        // If types are the same but not recognized, return None or undefined based on expected behavior\n        return null;\n    }\n};\n\n// Test cases\nconsole.log(compare_one(1, 2.5)); // \u279e 2.5\nconsole.log(compare_one(1, \"2,3\")); // \u279e \"2,3\"\nconsole.log(compare_one(\"5,1\", \"6\")); // \u279e \"6\"\nconsole.log(compare_one(\"1\", 1)); // \u279e null or undefined based on expected behavior"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "const is_equal_to_sum_even = function (n: number): boolean {\n    // Check if n is at least 20 and an even number\n    return n >= 20 && n % 2 === 0;\n};\n\n// Test cases\nconsole.log(is_equal_to_sum_even(4));  // False\nconsole.log(is_equal_to_sum_even(6));  // False\nconsole.log(is_equal_to_sum_even(8));  // False\nconsole.log(is_equal_to_sum_even(20)); // True\nconsole.log(is_equal_to_sum_even(22)); // True\nconsole.log(is_equal_to_sum_even(19)); // False"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "function special_factorial(n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Input must be a positive integer.\");\n    }\n\n    let result = 1;\n    \n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    \n    return result;\n}\n\nfunction factorial(num: number): number {\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    let fact = 1;\n    for (let i = 2; i <= num; i++) {\n        fact *= i;\n    }\n    return fact;\n}\n\n// Example usage:\nconsole.log(special_factorial(4)); // Output: 288"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "const fix_spaces = function (text: string): string {\n    // Replace all single spaces with underscores\n    let result = text.replace(/ /g, '_');\n    \n    // Replace more than 2 consecutive underscores with a single hyphen\n    result = result.replace(/_{3,}/g, '-');\n    \n    return result;\n};\n\n// Test cases\nconsole.log(fix_spaces(\"Example\")); // \"Example\"\nconsole.log(fix_spaces(\"Example 1\")); // \"Example_1\"\nconsole.log(fix_spaces(\" Example 2\")); // \"_Example_2\"\nconsole.log(fix_spaces(\" Example   3\")); // \"_Example-3\""}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "const file_name_check = function (file_name: string): string {\n    // Check if the file name contains exactly one dot '.'\n    const parts = file_name.split('.');\n    if (parts.length !== 2) {\n        return 'No';\n    }\n\n    const namePart = parts[0];\n    const extensionPart = parts[1];\n\n    // Check if the substring before the dot is not empty and starts with a letter from the latin alphabet\n    if (namePart.length === 0 || !/^[a-zA-Z]/.test(namePart)) {\n        return 'No';\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    const validExtensions = ['txt', 'exe', 'dll'];\n    if (!validExtensions.includes(extensionPart)) {\n        return 'No';\n    }\n\n    // Check if there are more than three digits in the file name\n    const digitCount = file_name.replace(/[^0-9]/g, '').length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n\n    // If all conditions are met, return 'Yes'\n    return 'Yes';\n};\n\n// Examples\nconsole.log(file_name_check(\"example.txt\")); // => 'Yes'\nconsole.log(file_name_check(\"1example.dll\")); // => 'No' (the name should start with a latin alphabet letter)"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "const sum_squares = function (lst: Array<number>): number {\n    return lst.reduce((sum, num) => sum + num * num, 0);\n};"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst words_in_sentence = function (sentence: string): string {\n    const words = sentence.split(' ');\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n    return primeLengthWords.join(' ');\n};\n\n// Example usage:\nconsole.log(words_in_sentence(\"This is a test\")); // Output: \"is\"\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "const simplify = function (x: string, n: string) : boolean  {\n    // Helper function to parse a fraction string into numerator and denominator\n    const parseFraction = (fraction: string): [number, number] => {\n        const parts = fraction.split('/');\n        return [parseInt(parts[0], 10), parseInt(parts[1], 10)];\n    };\n\n    // Parse the fractions\n    const [xNumerator, xDenominator] = parseFraction(x);\n    const [nNumerator, nDenominator] = parseFraction(n);\n\n    // Convert to decimal form\n    const xDecimal = xNumerator / xDenominator;\n    const nDecimal = nNumerator / nDenominator;\n\n    // Multiply the two decimals\n    const result = xDecimal * nDecimal;\n\n    // Check if the result is a whole number\n    return Math.abs(result - Math.round(result)) < 1e-9;\n};\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    return nums.sort((a, b) => {\n        const sumDigits = (num: number) => Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n        \n        const sumA = sumDigits(a);\n        const sumB = sumDigits(b);\n        \n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        } else {\n            return sumA - sumB;\n        }\n    });\n};\n\n// Example usage:\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // Output: []"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    // Helper function to check if a digit is odd\n    const isOddDigit = (digit: number): boolean => {\n        return [1, 3, 5, 7, 9].includes(Math.abs(digit));\n    };\n\n    // Helper function to get the first and last digits of a number\n    const getFirstAndLastDigits = (num: number): [number | null, number | null] => {\n        if (num < 0) num = -num; // Handle negative numbers\n        if (num < 10) return [null, null]; // Numbers less than 10 don't have first and last digits\n\n        const digits: Array<number> = [];\n        while (num > 0) {\n            digits.push(num % 10);\n            num = Math.floor(num / 10);\n        }\n        return [digits[0], digits[digits.length - 1]];\n    };\n\n    let count = 0;\n    for (const num of nums) {\n        if (num > 10) {\n            const [firstDigit, lastDigit] = getFirstAndLastDigits(num);\n            if (firstDigit !== null && lastDigit !== null && isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};\n\n// Example usage:\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n    // Step 1: Generate the array `a` based on the formula\n    const a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    let count = 0;\n\n    // Step 2: Iterate through all possible triples (i, j, k) where i < j < k\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Step 3: Return the number of valid triples\n    return count;\n};\n\n// Example usage:\nconsole.log(get_max_triples(5)); // Output: 1"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Check if both planet names are valid\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Ensure the order is correct for comparison\n    const startIndex = Math.min(index1, index2);\n    const endIndex = Math.max(index1, index2);\n    \n    // Extract the planets between the two indices\n    const result = [];\n    for (let i = startIndex + 1; i < endIndex; i++) {\n        result.push(planets[i]);\n    }\n    \n    return result;\n};\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "const sorted_list_sum = function (lst: Array<string>): Array<string> {\n    // Filter out strings with odd lengths\n    const filteredList = lst.filter(str => str.length % 2 === 0);\n    \n    // Sort the list by length and then alphabetically\n    filteredList.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    \n    return filteredList;\n};\n\n// Example usage:\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"])); // [\"aa\"]\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])); // [\"ab\", \"cd\"]"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number): number {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n};\n\nfunction isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\n// Examples:\nconsole.log(x_or_y(7, 34, 12)); // Output: 34\nconsole.log(x_or_y(15, 8, 5));   // Output: 5"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    // Filter out negative numbers and non-integer numbers\n    const filteredList = lst.filter(num => Number.isInteger(num) && num >= 0);\n    \n    // Square the remaining odd numbers and sum them\n    const sumOfSquares = filteredList.reduce((sum, num) => {\n        if (num % 2 !== 0) {\n            return sum + Math.pow(num, 2);\n        }\n        return sum;\n    }, 0);\n    \n    return sumOfSquares;\n};\n\n// Test cases\nconsole.log(double_the_difference([1, 3, 2, 0])); // Output: 10\nconsole.log(double_the_difference([-1, -2, 0])); // Output: 0\nconsole.log(double_the_difference([9, -2])); // Output: 81\nconsole.log(double_the_difference([0])); // Output: 0"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "const compare = function (scores: Array<number>, guesses: Array<number>): Array<number> {\n    return scores.map((score, index) => Math.abs(score - guesses[index]));\n};\n\n// Example usage:\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])); // -> [0, 0, 0, 0, 3, 3]\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])); // -> [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n    let strongestExtension = '';\n    let maxStrength = -Infinity;\n\n    for (const extension of extensions) {\n        let CAP = 0;\n        let SM = 0;\n\n        for (const char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                CAP++;\n            } else if (char >= 'a' && char <= 'z') {\n                SM++;\n            }\n        }\n\n        const strength = CAP - SM;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return `${class_name}.${strongestExtension}`;\n};\n\n// Example usage:\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: Slices.SErviNGSliCes\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // Output: my_class.AA"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n    // Function to generate all rotations of a string\n    const getRotations = (str: string): string[] => {\n        let rotations = [];\n        for (let i = 0; i < str.length; i++) {\n            let rotation = str.slice(i) + str.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    };\n\n    // Get all rotations of the second word\n    const rotations = getRotations(b);\n\n    // Check if any rotation is a substring of the first word\n    for (let rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "const even_odd_count = function (num: number): [number, number] {\n    const digits = num.toString().split('').map(Number);\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let digit of digits) {\n        if (digit === 0) {\n            continue; // 0 is neither even nor odd\n        } else if (digit % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\n// Examples:\nconsole.log(even_odd_count(-12)); // Output: (1, 1)\nconsole.log(even_odd_count(123)); // Output: (1, 2)"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "const int_to_mini_roman = function (number0: number): string {\n    // Define a mapping of integers to Roman numerals\n    const romanNumerals: [number, string][] = [\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i']\n    ];\n\n    let number = number0;\n    let result = '';\n\n    // Iterate through the mapping and construct the Roman numeral string\n    for (const [value, symbol] of romanNumerals) {\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n\n    return result.toLowerCase();\n};\n\n// Examples\nconsole.log(int_to_mini_roman(19)); // 'xix'\nconsole.log(int_to_mini_roman(152)); // 'clii'\nconsole.log(int_to_mini_roman(426)); // 'cdxxvi'"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // First, we need to identify the longest side, which will be the hypotenuse.\n    const sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Apply the Pythagorean theorem: a^2 + b^2 = c^2\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};\n\n// Test cases\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "const find_max = function (words: Array<string>): string {\n    if (words.length === 0) return \"\";\n\n    let maxUniqueChars = -1;\n    let result = \"\";\n\n    words.forEach(word => {\n        const uniqueChars = new Set(word);\n        if (uniqueChars.size > maxUniqueChars || \n            (uniqueChars.size === maxUniqueChars && word < result)) {\n            maxUniqueChars = uniqueChars.size;\n            result = word;\n        }\n    });\n\n    return result;\n};\n\n// Test cases\nconsole.log(find_max([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(find_max([\"name\", \"enam\", \"game\"])); // \"enam\"\nconsole.log(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])); // \"aaaaaaa\""}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "const eat = function (number: number, need: number, remaining: number): Array<number> {\n    // Calculate the total number of carrots eaten after meals\n    const totalEaten = number + Math.min(need, remaining);\n    \n    // Calculate the number of carrots left after meals\n    const carrotsLeft = Math.max(0, remaining - need);\n    \n    return [totalEaten, carrotsLeft];\n};\n\n// Example usage:\nconsole.log(eat(5, 6, 10)); // -> [11, 4]\nconsole.log(eat(4, 8, 9)); // -> [12, 1]\nconsole.log(eat(1, 10, 10)); // -> [11, 0]\nconsole.log(eat(2, 11, 5)); // -> [7, 0]"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "const do_algebra = function (operator: Array<string>, operand: Array<number>): number {\n    // Initialize the result with the first operand\n    let result = operand[0];\n    \n    // Iterate through the operators and operands to compute the expression\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n            default:\n                throw new Error(`Unsupported operator: ${operator[i]}`);\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconst operators = ['+', '*', '-'];\nconst operands = [2, 3, 4, 5];\nconsole.log(do_algebra(operators, operands)); // Output: 9"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "const solve = function (s: string): string {\n    // Check if the string contains any letters\n    const hasLetters = /[a-zA-Z]/.test(s);\n    \n    if (!hasLetters) {\n        // If there are no letters, reverse the entire string\n        return s.split('').reverse().join('');\n    } else {\n        // Otherwise, iterate through each character and reverse its case if it's a letter\n        let result = '';\n        for (let char of s) {\n            if (/[a-z]/.test(char)) {\n                result += char.toUpperCase();\n            } else if (/[A-Z]/.test(char)) {\n                result += char.toLowerCase();\n            } else {\n                result += char;\n            }\n        }\n        return result;\n    }\n};\n\n// Examples\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\")); // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "import crypto from 'crypto';\n\nconst string_to_md5 = function (text: string): any {\n    if (!text) {\n        return null;\n    }\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n};\n\n// Example usage:\nconsole.log(string_to_md5('Hello world')); // Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        [a, b] = [b, a];\n    }\n    \n    const result: number[] = [];\n    \n    for (let i = a; i <= b; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    \n    return result.sort((x, y) => x - y);\n};\n\n// Test cases\nconsole.log(generate_integers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // []"}

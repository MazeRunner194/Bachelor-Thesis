{"task_id": "HumanEval_kotlin/0", "language": "kotlin", "completion": "fun hasCloseElements(numbers: List<Double>, threshold: Double): Boolean {\n    // Sort the list to make it easier to find close elements\n    val sortedNumbers = numbers.sorted()\n    \n    // Iterate through the sorted list and check the difference between consecutive elements\n    for (i in 0 until sortedNumbers.size - 1) {\n        if (sortedNumbers[i + 1] - sortedNumbers[i] <= threshold) {\n            return true\n        }\n    }\n    \n    // If no pair of numbers is closer than the threshold, return false\n    return false\n}\n\n// Test cases\nfun main() {\n    println(hasCloseElements(listOf(1.0, 2.0, 3.0), 0.5)) // False\n    println(hasCloseElements(listOf(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)) // True\n}"}
{"task_id": "HumanEval_kotlin/1", "language": "kotlin", "completion": "fun separateParenGroups(parenString: String): List<String> {\n    // Remove spaces from the input string\n    val cleanedString = parenString.replace(\" \", \"\")\n    \n    // Initialize a list to store the balanced groups\n    val result = mutableListOf<String>()\n    \n    // Initialize counters for balancing parentheses\n    var balance = 0\n    var startIndex = 0\n    \n    // Iterate through the cleaned string\n    for (i in cleanedString.indices) {\n        if (cleanedString[i] == '(') {\n            // If it's an opening parenthesis, increase the balance counter\n            balance++\n        } else if (cleanedString[i] == ')') {\n            // If it's a closing parenthesis, decrease the balance counter\n            balance--\n        }\n        \n        // When balance is zero, we have a balanced group\n        if (balance == 0) {\n            // Extract the substring from the startIndex to the current index (inclusive)\n            val group = cleanedString.substring(startIndex..i)\n            result.add(group)\n            // Update the startIndex for the next potential group\n            startIndex = i + 1\n        }\n    }\n    \n    return result\n}\n\n// Example usage\nfun main() {\n    val input = \"( ) (( )) (( )( ))\"\n    val groups = separateParenGroups(input)\n    println(groups) // Output: ['()', '(())', '(()())']\n}"}
{"task_id": "HumanEval_kotlin/2", "language": "kotlin", "completion": "fun truncateNumber(number: Double): Double {\n    // Get the floor value of the number which is the integer part\n    val integerPart = Math.floor(number)\n    \n    // Subtract the integer part from the original number to get the decimal part\n    return number - integerPart\n}\n\n// Example usage\nfun main() {\n    println(truncateNumber(3.5))  // Output: 0.5\n}"}
{"task_id": "HumanEval_kotlin/3", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0.0\n    \n    for (operation in operations) {\n        when (operation) {\n            is Int -> balance += operation\n            is Double -> balance += operation\n            else -> throw IllegalArgumentException(\"Unsupported operation type\")\n        }\n        \n        if (balance < 0) {\n            return true\n        }\n    }\n    \n    return false\n}\n\n// Test cases\nfun main() {\n    println(belowZero(listOf(1, 2, 3))) // False\n    println(belowZero(listOf(1, 2, -4, 5))) // True\n}"}
{"task_id": "HumanEval_kotlin/4", "language": "kotlin", "completion": "fun meanAbsoluteDeviation(numbers: List<Double>): Double {\n    if (numbers.isEmpty()) return 0.0 // Handle empty list case\n    \n    val mean = numbers.average() // Calculate the mean of the numbers\n    \n    // Calculate the sum of absolute differences from the mean\n    val sumOfAbsoluteDifferences = numbers.sumByDouble { Math.abs(it - mean) }\n    \n    return sumOfAbsoluteDifferences / numbers.size // Divide by count to get MAD\n}\n\n// Example usage:\nfun main() {\n    println(meanAbsoluteDeviation(listOf(1.0, 2.0, 3.0, 4.0))) // Output: 1.0\n}"}
{"task_id": "HumanEval_kotlin/5", "language": "kotlin", "completion": "fun intersperse(numbers: List<Any>, delimeter: Int): List<Any> {\n    if (numbers.isEmpty()) return emptyList()\n    \n    val result = mutableListOf<Any>()\n    for ((index, number) in numbers.withIndex()) {\n        result.add(number)\n        if (index < numbers.size - 1) {\n            result.add(delimeter)\n        }\n    }\n    return result\n}\n\n// Test cases\nfun main() {\n    println(intersperse(emptyList(), 4)) // []\n    println(intersperse(listOf(1, 2, 3), 4)) // [1, 4, 2, 4, 3]\n}"}
{"task_id": "HumanEval_kotlin/6", "language": "kotlin", "completion": "fun parseNestedParens(parenString: String): List<Int> {\n    // Split the input string by spaces to get individual groups\n    val groups = parenString.split(\" \")\n    \n    // Initialize a list to store the maximum depths of each group\n    val maxDepths = mutableListOf<Int>()\n    \n    // Iterate through each group\n    for (group in groups) {\n        var depth = 0 // To keep track of the current nesting level\n        var maxDepth = 0 // To store the maximum nesting level found in this group\n        \n        // Traverse through each character in the group\n        for (char in group) {\n            if (char == '(') {\n                depth++ // Increase depth for an opening parenthesis\n                if (depth > maxDepth) {\n                    maxDepth = depth // Update the maximum depth if necessary\n                }\n            } else if (char == ')') {\n                depth-- // Decrease depth for a closing parenthesis\n            }\n        }\n        \n        // Add the maximum depth of this group to the list\n        maxDepths.add(maxDepth)\n    }\n    \n    return maxDepths\n}\n\n// Example usage\nfun main() {\n    val result = parseNestedParens(\"(()()) ((())) () ((())()())\")\n    println(result) // Output: [2, 3, 1, 3]\n}"}
{"task_id": "HumanEval_kotlin/7", "language": "kotlin", "completion": "fun filterBySubstring(strings: List<Any>, substring: String): List<Any> {\n    return strings.filter { it.toString().contains(substring, ignoreCase = true) }\n}\n\n// Test cases\nfun main() {\n    println(filterBySubstring(listOf(), 'a')) // []\n    println(filterBySubstring(listOf(\"abc\", \"bacd\", \"cde\", \"array\"), 'a')) // ['abc', 'bacd', 'array']\n}"}
{"task_id": "HumanEval_kotlin/8", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): Pair<Int, Int> {\n    if (numbers.isEmpty()) {\n        return Pair(0, 1)\n    }\n    \n    var sum = 0\n    var product = 1\n    \n    for (number in numbers) {\n        sum += number\n        product *= number\n    }\n    \n    return Pair(sum, product)\n}\n\n// Example usage:\nfun main() {\n    println(sumProduct(listOf())) // Output: (0, 1)\n    println(sumProduct(listOf(1, 2, 3, 4))) // Output: (10, 24)\n}"}
{"task_id": "HumanEval_kotlin/9", "language": "kotlin", "completion": "fun rollingMax(numbers: List<Int>): List<Int> {\n    if (numbers.isEmpty()) return emptyList()\n    \n    val result = mutableListOf<Int>()\n    var currentMax = Int.MIN_VALUE\n    \n    for (number in numbers) {\n        if (number > currentMax) {\n            currentMax = number\n        }\n        result.add(currentMax)\n    }\n    \n    return result\n}\n\n// Example usage:\nfun main() {\n    val numbers = listOf(1, 2, 3, 2, 3, 4, 2)\n    println(rollingMax(numbers)) // Output: [1, 2, 3, 3, 3, 4, 4]\n}"}
{"task_id": "HumanEval_kotlin/10", "language": "kotlin", "completion": "fun makePalindrome(string: String): String {\n    if (string.isEmpty()) return \"\"\n\n    // Function to check if a substring is a palindrome\n    fun isPalindrome(s: String): Boolean {\n        val len = s.length\n        for (i in 0 until len / 2) {\n            if (s[i] != s[len - 1 - i]) return false\n        }\n        return true\n    }\n\n    // Find the longest palindromic suffix\n    val n = string.length\n    for (i in n downTo 0) {\n        if (isPalindrome(string.substring(i))) {\n            val prefix = string.substring(0, i)\n            val reversePrefix = prefix.reversed()\n            return string + reversePrefix\n        }\n    }\n\n    // If no palindromic suffix is found, simply return the reverse of the whole string\n    return string.reversed()\n}\n\n// Test cases\nfun main() {\n    println(makePalindrome(\"\"))       // Output: \"\"\n    println(makePalindrome(\"cat\"))    // Output: \"catac\"\n    println(makePalindrome(\"cata\"))   // Output: \"catac\"\n}"}
{"task_id": "HumanEval_kotlin/11", "language": "kotlin", "completion": "fun stringXor(a: String, b: String): String {\n    // Ensure both strings are of equal length by padding the shorter one with leading zeros\n    val maxLength = Math.max(a.length, b.length)\n    val paddedA = a.padStart(maxLength, '0')\n    val paddedB = b.padStart(maxLength, '0')\n    \n    // Perform XOR operation character by character\n    val result = StringBuilder()\n    for (i in 0 until maxLength) {\n        val charA = paddedA[i]\n        val charB = paddedB[i]\n        if (charA == charB) {\n            result.append('0')\n        } else {\n            result.append('1')\n        }\n    }\n    \n    return result.toString()\n}\n\n// Example usage\nfun main() {\n    println(stringXor(\"010\", \"110\")) // Output: '100'\n}"}
{"task_id": "HumanEval_kotlin/12", "language": "kotlin", "completion": "fun longest(strings: List<Any>): String? {\n    if (strings.isEmpty()) return null\n    \n    var longestString: String? = null\n    \n    for (str in strings) {\n        if (str is String && (longestString == null || str.length > longestString!!.length)) {\n            longestString = str as String\n        }\n    }\n    \n    return longestString\n}"}
{"task_id": "HumanEval_kotlin/13", "language": "kotlin", "completion": "fun greatestCommonDivisor(a : Int, b : Int) : Int {\n    var x = a\n    var y = b\n    \n    while (y != 0) {\n        val temp = y\n        y = x % y\n        x = temp\n    }\n    \n    return x\n}"}
{"task_id": "HumanEval_kotlin/14", "language": "kotlin", "completion": "fun allPrefixes(string: String): List<String> {\n    val prefixes = mutableListOf<String>()\n    for (i in 1..string.length) {\n        prefixes.add(string.substring(0, i))\n    }\n    return prefixes\n}"}
{"task_id": "HumanEval_kotlin/15", "language": "kotlin", "completion": "fun stringSequence(n: Int): String {\n    return (0..n).joinToString(\" \")\n}"}
{"task_id": "HumanEval_kotlin/16", "language": "kotlin", "completion": "fun countDistinctCharacters(string: String): Int {\n    // Convert the string to lowercase to ignore case sensitivity\n    val lowerCaseString = string.toLowerCase()\n    \n    // Create a set to store distinct characters\n    val charSet = mutableSetOf<Char>()\n    \n    // Iterate through each character in the string and add it to the set\n    for (char in lowerCaseString) {\n        charSet.add(char)\n    }\n    \n    // Return the size of the set, which represents the number of distinct characters\n    return charSet.size\n}\n\n// Test cases\nfun main() {\n    println(countDistinctCharacters(\"xyzXYZ\")) // Output: 3\n    println(countDistinctCharacters(\"Jerry\"))  // Output: 4\n}"}
{"task_id": "HumanEval_kotlin/17", "language": "kotlin", "completion": "fun parseMusic(musicString: String): List<Int> {\n    val beats = mutableListOf<Int>()\n    \n    // Split the input string by spaces to get individual notes\n    val notes = musicString.split(\" \")\n    \n    // Iterate through each note and determine its beat value\n    for (note in notes) {\n        when (note) {\n            \"o\" -> beats.add(4)\n            \"o|\" -> beats.add(2)\n            \".|\" -> beats.add(1)\n            else -> {} // Ignore any unexpected input\n        }\n    }\n    \n    return beats\n}\n\n// Example usage:\nfun main() {\n    val result = parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    println(result) // Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n}"}
{"task_id": "HumanEval_kotlin/18", "language": "kotlin", "completion": "fun howManyTimes(string: String, substring: String): Int {\n    if (substring.isEmpty()) return 0\n    if (string.isEmpty() || substring.length > string.length) return 0\n\n    var count = 0\n    var index = 0\n\n    while ((index = string.indexOf(substring, index)) != -1) {\n        count++\n        index += substring.length\n    }\n\n    return count\n}"}
{"task_id": "HumanEval_kotlin/19", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    // Define the mapping of number words to their corresponding integer values\n    val numberMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n    \n    // Split the input string into a list of number words\n    val numberWords = numbers.split(\" \")\n    \n    // Map the number words to their integer values using the numberMap\n    val sortedNumbers = numberWords.map { numberMap[it] }.sorted()\n    \n    // Convert the sorted integers back to their corresponding number words\n    val sortedNumberWords = sortedNumbers.map { entry -> \n        numberMap.entries.find { it.value == entry }?.key \n    }\n    \n    // Join the sorted number words into a single string separated by spaces\n    return sortedNumberWords.joinToString(\" \")\n}\n\n// Example usage:\nfun main() {\n    val result = sortNumbers(\"three one five\")\n    println(result)  // Output: \"one three five\"\n}"}
{"task_id": "HumanEval_kotlin/20", "language": "kotlin", "completion": "fun findClosestElements(numbers: List<Double>): List<Double> {\n    if (numbers.size < 2) throw IllegalArgumentException(\"List must contain at least two elements\")\n\n    var minDiff = Double.MAX_VALUE\n    var closestPair = listOf(0.0, 0.0)\n\n    for (i in numbers.indices) {\n        for (j in i + 1 until numbers.size) {\n            val diff = Math.abs(numbers[i] - numbers[j])\n            if (diff < minDiff) {\n                minDiff = diff\n                closestPair = listOf(Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j]))\n            }\n        }\n    }\n\n    return closestPair\n}\n\n// Test cases\nfun main() {\n    println(findClosestElements(listOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))) // Output: [2.0, 2.2]\n    println(findClosestElements(listOf(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))) // Output: [2.0, 2.0]\n}"}
{"task_id": "HumanEval_kotlin/21", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    if (numbers.isEmpty()) throw IllegalArgumentException(\"The list must contain at least one element\")\n    \n    val min = numbers.minOrNull() ?: 0.0 // Handle case where the list might be empty\n    val max = numbers.maxOrNull() ?: 0.0 // Same as above\n    val range = max - min\n    \n    return numbers.map { (it - min) / range }\n}\n\n// Example usage\nfun main() {\n    val numbers = listOf(1.0, 2.0, 3.0, 4.0, 5.0)\n    val rescaledNumbers = rescaleToUnit(numbers)\n    println(rescaledNumbers) // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n}"}
{"task_id": "HumanEval_kotlin/22", "language": "kotlin", "completion": "fun filterIntegers(values: List<Any>): List<Any> {\n    return values.filterIsInstance<Int>()\n}\n\n// Test cases\nfun main() {\n    println(filterIntegers(listOf('a', 3.14, 5))) // Output: [5]\n    println(filterIntegers(listOf(1, 2, 3, 'abc', mutableMapOf<Any, Any>(), listOf<Any>()))) // Output: [1, 2, 3]\n}"}
{"task_id": "HumanEval_kotlin/23", "language": "kotlin", "completion": "fun strlen(string: String): Int {\n    return string.length\n}"}
{"task_id": "HumanEval_kotlin/24", "language": "kotlin", "completion": "fun largestDivisor(n: Int): Int {\n    for (i in n / 2 downTo 1) {\n        if (n % i == 0) {\n            return i\n        }\n    }\n    return 1 // In case the number is prime, we return 1 as it's the smallest divisor.\n}\n\n// Test the function\nfun main() {\n    println(largestDivisor(15)) // Output: 5\n}"}
{"task_id": "HumanEval_kotlin/25", "language": "kotlin", "completion": "fun factorize(n: Int): List<Int> {\n    var num = n\n    val factors = mutableListOf<Int>()\n    \n    // Check for the smallest prime number, which is 2\n    while (num % 2 == 0) {\n        factors.add(2)\n        num /= 2\n    }\n    \n    // Now check for odd numbers starting from 3\n    var i = 3\n    while (i * i <= num) {\n        while (num % i == 0) {\n            factors.add(i)\n            num /= i\n        }\n        i += 2\n    }\n    \n    // If the remaining number is a prime number greater than 2, add it to the list\n    if (num > 2) {\n        factors.add(num)\n    }\n    \n    return factors\n}\n\n// Test cases\nfun main() {\n    println(factorize(8))   // Output: [2, 2, 2]\n    println(factorize(25))  // Output: [5, 5]\n    println(factorize(70))  // Output: [2, 5, 7]\n}"}
{"task_id": "HumanEval_kotlin/26", "language": "kotlin", "completion": "fun removeDuplicates(numbers: List<Int>): List<Int> {\n    val uniqueNumbers = mutableListOf<Int>()\n    for (number in numbers) {\n        if (uniqueNumbers.none { it == number }) {\n            uniqueNumbers.add(number)\n        }\n    }\n    return uniqueNumbers\n}\n\n// Example usage\nfun main() {\n    val result = removeDuplicates(listOf(1, 2, 3, 2, 4))\n    println(result) // Output: [1, 3, 4]\n}"}
{"task_id": "HumanEval_kotlin/27", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map { char ->\n        if (char.isLowerCase()) {\n            char.toUpperCase()\n        } else {\n            char.toLowerCase()\n        }\n    }.joinToString(\"\")\n}\n\n// Example usage\nfun main() {\n    println(flipCase(\"Hello\")) // Output: hELLO\n}"}
{"task_id": "HumanEval_kotlin/28", "language": "kotlin", "completion": "fun concatenate(strings: List<Any>): String {\n    return strings.joinToString(\"\")\n}"}
{"task_id": "HumanEval_kotlin/29", "language": "kotlin", "completion": "fun filterByPrefix(strings: List<Any>, prefix: String): List<Any> {\n    return strings.filter { it is String && it.startsWith(prefix) } as List<Any>\n}"}
{"task_id": "HumanEval_kotlin/30", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Any> {\n    return l.filterIsInstance<Number>().filter { it.toDouble() > 0 }.map { it }\n}"}
{"task_id": "HumanEval_kotlin/31", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    \n    val sqrtN = Math.sqrt(n.toDouble()).toInt()\n    for (i in 3..sqrtN step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\n// Test cases\nfun main() {\n    println(isPrime(6)) // False\n    println(isPrime(101)) // True\n    println(isPrime(11)) // True\n    println(isPrime(13441)) // True\n    println(isPrime(61)) // True\n    println(isPrime(4)) // False\n    println(isPrime(1)) // False\n}"}
{"task_id": "HumanEval_kotlin/33", "language": "kotlin", "completion": "fun sortThird(l: List<Int>): List<Int> {\n    // Step 1 & 2: Extract elements at indices divisible by 3\n    val thirdElements = l.filterIndexed { index, _ -> index % 3 == 0 }\n    \n    // Step 3: Sort the extracted list\n    val sortedThirdElements = thirdElements.sorted()\n    \n    // Step 4: Reconstruct the original list with sorted elements at indices divisible by 3\n    val result = l.toMutableList()\n    var indexSorted = 0\n    for (i in l.indices) {\n        if (i % 3 == 0) {\n            result[i] = sortedThirdElements[indexSorted++]\n        }\n    }\n    \n    // Step 5: Return the modified list\n    return result\n}\n\n// Test cases\nfun main() {\n    println(sortThird(listOf(1, 2, 3))) // [1, 2, 3]\n    println(sortThird(listOf(5, 6, 3, 4, 8, 9, 2))) // [2, 6, 3, 4, 8, 9, 5]\n}"}
{"task_id": "HumanEval_kotlin/34", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.toSet().sorted()\n}\n\n// Example usage\nfun main() {\n    val result = unique(listOf(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    println(result) // Output: [0, 2, 3, 5, 9, 123]\n}"}
{"task_id": "HumanEval_kotlin/35", "language": "kotlin", "completion": "fun maxElement(l: List<Int>): Int {\n    return l.max() ?: throw NoSuchElementException(\"List is empty\")\n}"}
{"task_id": "HumanEval_kotlin/36", "language": "kotlin", "completion": "fun fizzBuzz(n: Int): Int {\n    var count = 0\n    for (i in 1 until n) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count += digitSevenCount(i)\n        }\n    }\n    return count\n}\n\nfun digitSevenCount(number: Int): Int {\n    var num = number\n    var count = 0\n    while (num > 0) {\n        if (num % 10 == 7) {\n            count++\n        }\n        num /= 10\n    }\n    return count\n}\n\n// Test cases\nfun main() {\n    println(fizzBuzz(50))  // Output: 0\n    println(fizzBuzz(78))  // Output: 2\n    println(fizzBuzz(79))  // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/37", "language": "kotlin", "completion": "fun sortEven(l: List<Int>): List<Int> {\n    // Extract the even indexed elements\n    val evens = l.filterIndexed { index, _ -> index % 2 == 0 }.sorted()\n    \n    // Create a new list to store the result\n    val result = mutableListOf<Int>()\n    \n    // Iterate through the original list and replace even indexed elements with sorted ones\n    var evenIndex = 0\n    for (i in l.indices) {\n        if (i % 2 == 0) {\n            result.add(evens[evenIndex])\n            evenIndex++\n        } else {\n            result.add(l[i])\n        }\n    }\n    \n    return result\n}\n\n// Test cases\nfun main() {\n    println(sortEven(listOf(1, 2, 3))) // [1, 2, 3]\n    println(sortEven(listOf(5, 6, 3, 4))) // [3, 6, 5, 4]\n}"}
{"task_id": "HumanEval_kotlin/39", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num == 2) return true\n    if (num % 2 == 0) return false\n    for (i in 3..sqrt(num.toDouble()).toInt() step 2) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var a = 0\n    var b = 1\n    while (true) {\n        val fib = a + b\n        if (isPrime(fib)) {\n            count++\n            if (count == n) {\n                return fib\n            }\n        }\n        a = b\n        b = fib\n    }\n}\n\n// Test cases\nfun main() {\n    println(primeFib(1)) // 2\n    println(primeFib(2)) // 3\n    println(primeFib(3)) // 5\n    println(primeFib(4)) // 13\n    println(primeFib(5)) // 89\n}"}
{"task_id": "HumanEval_kotlin/40", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    // If the list has fewer than 3 elements, it is impossible to find a triplet summing to zero\n    if (l.size < 3) return false\n    \n    // Sort the list to facilitate two-pointer technique\n    val sortedList = l.sorted()\n    \n    for (i in 0 until sortedList.size - 2) {\n        var left = i + 1\n        var right = sortedList.size - 1\n        \n        while (left < right) {\n            val sum = sortedList[i] + sortedList[left] + sortedList[right]\n            \n            when {\n                sum == 0 -> return true // Found a triplet that sums to zero\n                sum < 0 -> left++ // Move the left pointer to the right\n                else -> right-- // Move the right pointer to the left\n            }\n        }\n    }\n    \n    return false // No such triplet found\n}\n\n// Test cases\nfun main() {\n    println(triplesSumToZero(listOf(1, 3, 5, 0))) // False\n    println(triplesSumToZero(listOf(1, 3, -2, 1))) // True\n    println(triplesSumToZero(listOf(1, 2, 3, 7))) // False\n    println(triplesSumToZero(listOf(2, 4, -5, 3, 9, 7))) // True\n    println(triplesSumToZero(listOf(1))) // False\n}"}
{"task_id": "HumanEval_kotlin/41", "language": "kotlin", "completion": "fun carRaceCollision(n: Int): Int {\n    // Each set of cars (left to right and right to left) starts with n cars.\n    // Since each car moving in opposite directions does not collide, we simply return the number of collisions.\n    // The problem statement implies that the cars do not actually collide but continue moving independently.\n    // Therefore, the total number of collisions is equal to the product of the two sets of cars.\n    \n    return n * n\n}"}
{"task_id": "HumanEval_kotlin/42", "language": "kotlin", "completion": "fun incrList(l: List<Int>): List<Int> {\n    return l.map { it + 1 }\n}\n\n// Example usage:\n// println(incrList(listOf(1, 2, 3))) // Output: [2, 3, 4]\n// println(incrList(listOf(5, 3, 5, 2, 3, 3, 9, 0, 123))) // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval_kotlin/43", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    // Create a set to store the complements of each number\n    val seen = mutableSetOf<Int>()\n    \n    // Iterate through each number in the list\n    for (num in l) {\n        // Check if the complement of the current number exists in the set\n        if (seen.contains(-num)) {\n            return true\n        }\n        // Add the current number to the set\n        seen.add(num)\n    }\n    \n    // If no pair sums to zero, return false\n    return false\n}"}
{"task_id": "HumanEval_kotlin/44", "language": "kotlin", "completion": "fun changeBase(x: Int, base: Int): String {\n    if (base < 2 || base > 10) {\n        throw IllegalArgumentException(\"Base must be between 2 and 10\")\n    }\n    \n    var num = x\n    val result = StringBuilder()\n    \n    do {\n        val remainder = num % base\n        result.append(remainder)\n        num /= base\n    } while (num > 0)\n    \n    return result.reverse().toString()\n}\n\n// Test cases\nfun main() {\n    println(changeBase(8, 3)) // Output: '22'\n    println(changeBase(8, 2)) // Output: '1000'\n    println(changeBase(7, 2)) // Output: '111'\n}"}
{"task_id": "HumanEval_kotlin/45", "language": "kotlin", "completion": "fun triangleArea(a : Int, h : Int) : Double {\n    return 0.5 * a * h\n}\n\n// Example usage:\nfun main() {\n    println(triangleArea(5, 3)) // Output: 7.5\n}"}
{"task_id": "HumanEval_kotlin/46", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    // Initialize the base cases\n    val fib4Sequence = mutableListOf(0, 0, 2, 0)\n    \n    // Compute the sequence iteratively up to n\n    for (i in 4..n) {\n        val nextValue = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4]\n        fib4Sequence.add(nextValue)\n    }\n    \n    return fib4Sequence[n]\n}\n\n// Test cases\nfun main() {\n    println(fib4(5)) // Output: 4\n    println(fib4(6)) // Output: 8\n    println(fib4(7)) // Output: 14\n}"}
{"task_id": "HumanEval_kotlin/47", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    // Step 1: Sort the list\n    val sortedList = l.sorted()\n    \n    // Step 2: Find the size of the list\n    val size = sortedList.size\n    \n    // Step 3: Check if the size is odd or even\n    return if (size % 2 == 1) {\n        // If odd, return the middle element\n        sortedList[size / 2]\n    } else {\n        // If even, return the average of the two middle elements\n        val mid1 = sortedList[size / 2 - 1]\n        val mid2 = sortedList[size / 2]\n        (mid1 + mid2) / 2.0\n    }\n}\n\n// Test cases\nfun main() {\n    println(median(listOf(3, 1, 2, 4, 5))) // Output: 3\n    println(median(listOf(-10, 4, 6, 1000, 10, 20))) // Output: 15.0\n}"}
{"task_id": "HumanEval_kotlin/48", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    // Remove all non-alphanumeric characters and convert to lowercase\n    val cleanedText = text.filter { it.isLetterOrDigit() }.toLowerCase()\n    \n    // Check if the cleaned text is equal to its reverse\n    return cleanedText == cleanedText.reversed()\n}\n\n// Test cases\nfun main() {\n    println(isPalindrome(\"\"))         // True\n    println(isPalindrome(\"aba\"))      // True\n    println(isPalindrome(\"aaaaa\"))    // True\n    println(isPalindrome(\"zbcd\"))     // False\n}"}
{"task_id": "HumanEval_kotlin/49", "language": "kotlin", "completion": "fun modp(n: Int, p: Int): Int {\n    // Calculate 2^n modulo p\n    var result = 1\n    for (i in 0 until n) {\n        result = (result * 2) % p\n    }\n    return result\n}\n\n// Test cases\nfun main() {\n    println(modp(3, 5))       // Output: 3\n    println(modp(1101, 101)) // Output: 2\n    println(modp(0, 101))    // Output: 1\n    println(modp(3, 11))     // Output: 8\n    println(modp(100, 101))  // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/51", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    // Define a regex pattern for matching vowels (a, e, i, o, u) in both cases\n    val vowelsPattern = \"[aeiouAEIOU]\"\n    \n    // Replace all matched vowels with an empty string\n    return text.replace(vowelsPattern, \"\")\n}\n\n// Test cases\nfun main() {\n    println(removeVowels(\"\")) // ''\n    println(removeVowels(\"abcdef\\nghijklm\")) // 'bcdf\\nghjklm'\n    println(removeVowels('abcdef')) // 'bcdf'\n    println(removeVowels('aaaaa')) // ''\n    println(removeVowels('aaBAA')) // 'B'\n    println(removeVowels('zbcd')) // 'zbcd'\n}"}
{"task_id": "HumanEval_kotlin/52", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}\n\n// Test cases\nfun main() {\n    println(belowThreshold(listOf(1, 2, 4, 10), 100)) // True\n    println(belowThreshold(listOf(1, 20, 4, 10), 5))   // False\n}"}
{"task_id": "HumanEval_kotlin/53", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}"}
{"task_id": "HumanEval_kotlin/54", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    // Convert both strings to character arrays\n    val chars0 = s0.toCharArray()\n    val chars1 = s1.toCharArray()\n    \n    // Sort the character arrays\n    chars0.sort()\n    chars1.sort()\n    \n    // Compare the sorted arrays as strings\n    return chars0.contentEquals(chars1)\n}\n\n// Test cases\nfun main() {\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")) // True\n    println(sameChars(\"abcd\", \"dddddddabc\")) // True\n    println(sameChars(\"dddddddabc\", \"abcd\")) // True\n    println(sameChars(\"eabcd\", \"dddddddabc\")) // False\n    println(sameChars(\"abcd\", \"dddddddabce\")) // False\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")) // False\n}"}
{"task_id": "HumanEval_kotlin/55", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 0) return 0\n    if (n == 1) return 1\n    return fib(n - 1) + fib(n - 2)\n}"}
{"task_id": "HumanEval_kotlin/56", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    var balance = 0\n    \n    for (char in brackets) {\n        if (char == '<') {\n            balance++\n        } else if (char == '>') {\n            balance--\n        }\n        \n        // If at any point the balance is negative, it means there are more closing brackets than opening ones.\n        if (balance < 0) {\n            return false\n        }\n    }\n    \n    // The bracket sequence is correct if the balance is zero after processing all characters.\n    return balance == 0\n}\n\n// Test cases\nfun main() {\n    println(correctBracketing(\"<\")) // False\n    println(correctBracketing(\"<>\")) // True\n    println(correctBracketing(\"<<><>>\")) // True\n    println(correctBracketing(\"><<>\")) // False\n}"}
{"task_id": "HumanEval_kotlin/57", "language": "kotlin", "completion": "fun monotonic(l: List<Int>): Boolean {\n    if (l.isEmpty()) return true // An empty list is considered monotonic\n\n    var increasing = true\n    var decreasing = true\n\n    for (i in 1 until l.size) {\n        if (l[i] < l[i - 1]) {\n            increasing = false\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n\n// Test cases\nfun main() {\n    println(monotonic(listOf(1, 2, 4, 20))) // True\n    println(monotonic(listOf(1, 20, 4, 10))) // False\n    println(monotonic(listOf(4, 1, 0, -10))) // True\n}"}
{"task_id": "HumanEval_kotlin/58", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Any>): List<Any> {\n    // Convert l2 to a List of Int (assuming all elements are integers)\n    val intL2 = l2.mapNotNull { if (it is Int) it else null }.toList()\n    \n    // Find the intersection and convert to a set to ensure uniqueness\n    val commonSet = l1.toSet().intersect(intL2.toSet())\n    \n    // Convert the set back to a list and sort it\n    return commonSet.sorted()\n}\n\n// Test cases\nfun main() {\n    println(common(listOf(1, 4, 3, 34, 653, 2, 5), listOf(5, 7, 1, 5, 9, 653, 121))) // [1, 5, 653]\n    println(common(listOf(5, 3, 2, 8), listOf(3, 2))) // [2, 3]\n}"}
{"task_id": "HumanEval_kotlin/59", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var factor = 2\n    var maxFactor = 1 // Initialize to 1 because we may not find any factors other than 1 and n itself.\n\n    while (num > 1) {\n        if (num % factor == 0) {\n            maxFactor = factor\n            num /= factor\n        } else {\n            factor++\n        }\n    }\n\n    return maxFactor\n}\n\n// Test cases\nfun main() {\n    println(largestPrimeFactor(13195)) // Output: 29\n    println(largestPrimeFactor(2048))  // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/60", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}\n\n// Test cases\nfun main() {\n    println(sumToN(30)) // 465\n    println(sumToN(100)) // 5050\n    println(sumToN(5)) // 15\n    println(sumToN(10)) // 55\n    println(sumToN(1)) // 1\n}"}
{"task_id": "HumanEval_kotlin/61", "language": "kotlin", "completion": "fun correctBracketing(brackets: String): Boolean {\n    val stack = mutableListOf<Char>()\n    \n    for (char in brackets) {\n        when (char) {\n            '(' -> stack.add(char)\n            ')' -> {\n                if (stack.isEmpty()) {\n                    return false\n                }\n                stack.removeAt(stack.size - 1)\n            }\n        }\n    }\n    \n    return stack.isEmpty()\n}"}
{"task_id": "HumanEval_kotlin/62", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    if (xs.isEmpty()) return emptyList()\n    \n    val result = mutableListOf<Int>()\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    return result\n}\n\n// Test cases\nfun main() {\n    println(derivative(listOf(3, 1, 2, 4, 5))) // [1, 4, 12, 20]\n    println(derivative(listOf(1, 2, 3)))       // [2, 6]\n}"}
{"task_id": "HumanEval_kotlin/63", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 1\n\n    val dp = mutableListOf(0, 0, 1)\n    \n    for (i in 3..n) {\n        val nextValue = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        dp.add(nextValue)\n    }\n    \n    return dp[n]\n}\n\n// Test cases\nfun main() {\n    println(fibfib(1)) // Output: 0\n    println(fibfib(5)) // Output: 4\n    println(fibfib(8)) // Output: 24\n}"}
{"task_id": "HumanEval_kotlin/64", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    var count = 0\n    \n    for (char in s) {\n        if (vowels.contains(char.toLowerCase())) {\n            count++\n        }\n    }\n    \n    return count\n}\n\n// Example usage:\nfun main() {\n    println(vowelsCount(\"abcde\")) // Output: 2\n    println(vowelsCount(\"ACEDY\")) // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/65", "language": "kotlin", "completion": "fun circularShift(x: Int, shift: Int): String {\n    // Convert the integer to a string to manipulate its digits\n    val numStr = x.toString()\n    val len = numStr.length\n    \n    // If the shift is greater than the number of digits, return the reversed string\n    if (shift > len) {\n        return numStr.reversed()\n    }\n    \n    // Calculate the effective shift within the bounds of the digit length\n    val effectiveShift = shift % len\n    \n    // Perform the circular shift\n    val shiftedString = numStr.substring(len - effectiveShift) + numStr.substring(0, len - effectiveShift)\n    \n    return shiftedString\n}\n\n// Test cases\nfun main() {\n    println(circularShift(12, 1)) // \"21\"\n    println(circularShift(12, 2)) // \"12\"\n    println(circularShift(12345, 2)) // \"45123\"\n    println(circularShift(12345, 6)) // \"51234\"\n}"}
{"task_id": "HumanEval_kotlin/66", "language": "kotlin", "completion": "fun digitSum(s: String): Int {\n    var sum = 0\n    for (char in s) {\n        if (char.isUpperCase()) {\n            sum += char.toInt()\n        }\n    }\n    return sum\n}\n\n// Test cases\nfun main() {\n    println(digitSum(\"\")) // 0\n    println(digitSum(\"abAB\")) // 131\n    println(digitSum(\"abcCd\")) // 67\n    println(digitSum(\"helloE\")) // 69\n    println(digitSum(\"woArBld\")) // 131\n    println(digitSum(\"aAaaaXa\")) // 153\n}"}
{"task_id": "HumanEval_kotlin/67", "language": "kotlin", "completion": "fun fruitDistribution(s: String, n: Int): Int {\n    // Split the string to extract the number of apples and oranges\n    val parts = s.split(\" \")\n    var apples = 0\n    var oranges = 0\n    \n    for (i in parts.indices) {\n        if (parts[i] == \"apples\") {\n            apples = parts[i - 1].toInt()\n        } else if (parts[i] == \"oranges\") {\n            oranges = parts[i - 1].toInt()\n        }\n    }\n    \n    // Calculate the number of mango fruits\n    val mangoes = n - apples - oranges\n    return mangoes\n}\n\n// Test cases\nfun main() {\n    println(fruitDistribution(\"5 apples and 6 oranges\", 19)) // Output: 8\n    println(fruitDistribution(\"0 apples and 1 oranges\", 3))   // Output: 2\n    println(fruitDistribution(\"2 apples and 3 oranges\", 100)) // Output: 95\n    println(fruitDistribution(\"100 apples and 1 oranges\", 120)) // Output: 19\n}"}
{"task_id": "HumanEval_kotlin/68", "language": "kotlin", "completion": "fun pluck(arr: List<Any>): List<Any> {\n    // Initialize variables to store the smallest even value and its index\n    var smallestEvenValue = -1\n    var smallestIndex = -1\n    \n    // Iterate through the list to find the smallest even value and its index\n    for ((index, node) in arr.withIndex()) {\n        if (node is Int && node % 2 == 0) {\n            val intValue = node as Int\n            if (smallestEvenValue == -1 || intValue < smallestEvenValue) {\n                smallestEvenValue = intValue\n                smallestIndex = index\n            }\n        }\n    }\n    \n    // If no even values are found, return an empty list\n    if (smallestEvenValue == -1) {\n        return emptyList()\n    }\n    \n    // Return the result as a list containing the smallest even value and its index\n    return listOf(smallestEvenValue, smallestIndex)\n}"}
{"task_id": "HumanEval_kotlin/69", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    // Create a map to count the frequency of each number\n    val frequencyMap = mutableMapOf<Int, Int>()\n    \n    for (num in lst) {\n        frequencyMap[num] = frequencyMap.getOrDefault(num, 0) + 1\n    }\n    \n    // Find the greatest integer that has a frequency >= its value\n    var result = -1\n    for ((key, value) in frequencyMap) {\n        if (value >= key) {\n            result = maxOf(result, key)\n        }\n    }\n    \n    return result\n}\n\n// Test cases\nfun main() {\n    println(search(listOf(4, 1, 2, 2, 3, 1))) // Output: 2\n    println(search(listOf(1, 2, 2, 3, 3, 3, 4, 4, 4))) // Output: 3\n    println(search(listOf(5, 5, 4, 4, 4))) // Output: -1\n}"}
{"task_id": "HumanEval_kotlin/70", "language": "kotlin", "completion": "fun strangeSortList(lst: List<Int>): List<Int> {\n    if (lst.isEmpty()) return emptyList()\n    \n    // Sort the list\n    val sortedList = lst.sorted()\n    \n    // Create a new list to store the result\n    val result = mutableListOf<Int>()\n    \n    // Use two pointers, one starting from the beginning and one from the end\n    var i = 0\n    var j = sortedList.size - 1\n    \n    while (i <= j) {\n        if (i == j) {\n            result.add(sortedList[i])\n        } else {\n            result.add(sortedList[i])\n            result.add(sortedList[j])\n        }\n        i++\n        j--\n    }\n    \n    return result\n}\n\n// Examples\nfun main() {\n    println(strangeSortList(listOf(1, 2, 3, 4))) // [1, 4, 2, 3]\n    println(strangeSortList(listOf(5, 5, 5, 5))) // [5, 5, 5, 5]\n    println(strangeSortList(emptyList()))       // []\n}"}
{"task_id": "HumanEval_kotlin/71", "language": "kotlin", "completion": "import kotlin.math.*\n\nfun triangleArea(a : Int, b : Int, c : Int) : Any {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1\n    }\n    \n    // Calculate the semi-perimeter\n    val s = (a + b + c) / 2.0\n    \n    // Calculate the area using Heron's formula\n    val area = sqrt(s * (s - a.toDouble()) * (s - b.toDouble()) * (s - c.toDouble()))\n    \n    // Return the area rounded to 2 decimal places\n    return String.format(\"%.2f\", area).toFloat()\n}\n\n// Example usage:\nfun main() {\n    println(triangleArea(3, 4, 5)) // Output: 6.00\n    println(triangleArea(1, 2, 10)) // Output: -1\n}"}
{"task_id": "HumanEval_kotlin/72", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list is a palindrome\n    val isPalindrome = q == q.reversed()\n    \n    // Calculate the sum of elements in the list\n    val sumOfElements = q.sum()\n    \n    // Return true if both conditions are met, false otherwise\n    return isPalindrome && sumOfElements <= w\n}\n\n// Test cases\nfun main() {\n    println(willItFly(listOf(1, 2), 5)) // False\n    println(willItFly(listOf(3, 2, 3), 1)) // False\n    println(willItFly(listOf(3, 2, 3), 9)) // True\n    println(willItFly(listOf(3), 5)) // True\n}"}
{"task_id": "HumanEval_kotlin/73", "language": "kotlin", "completion": "fun smallestChange(arr: List<Int>): Int {\n    var count = 0\n    val n = arr.size\n    for (i in 0 until n / 2) {\n        if (arr[i] != arr[n - i - 1]) {\n            count++\n        }\n    }\n    return count\n}\n\n// Test cases\nfun main() {\n    println(smallestChange(listOf(1, 2, 3, 5, 4, 7, 9, 6))) // Output: 4\n    println(smallestChange(listOf(1, 2, 3, 4, 3, 2, 2))) // Output: 1\n    println(smallestChange(listOf(1, 2, 3, 2, 1))) // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/74", "language": "kotlin", "completion": "fun totalMatch(lst1: List<String>, lst2: List<String>): List<String> {\n    // Function to calculate the total number of characters in a list of strings\n    fun totalChars(list: List<String>): Int {\n        return list.sumBy { it.length }\n    }\n\n    // Calculate the total number of characters for both lists\n    val total1 = totalChars(lst1)\n    val total2 = totalChars(lst2)\n\n    // Compare the totals and return the appropriate list\n    return if (total1 < total2) lst1 else lst2\n}\n\n// Test cases\nfun main() {\n    println(totalMatch(listOf(), listOf())) // \u279e []\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"Hi\"))) // \u279e ['hI', 'Hi']\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hi\", \"hi\", \"admin\", \"project\"))) // \u279e ['hi', 'admin']\n    println(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"hi\", \"hi\"))) // \u279e ['hI', 'hi', 'hi']\n    println(totalMatch(listOf(\"4\"), listOf(\"1\", \"2\", \"3\", \"4\", \"5\"))) // \u279e ['4']\n}"}
{"task_id": "HumanEval_kotlin/75", "language": "kotlin", "completion": "fun isMultiplyPrime(a: Int): Boolean {\n    // Helper function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n <= 3) return true\n        if (n % 2 == 0 || n % 3 == 0) return false\n        var i = 5\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) return false\n            i += 6\n        }\n        return true\n    }\n\n    // Generate all primes less than or equal to sqrt(a)\n    val primes = mutableListOf<Int>()\n    for (i in 2..Math.sqrt(a.toDouble()).toInt()) {\n        if (isPrime(i)) {\n            primes.add(i)\n        }\n    }\n\n    // Check all combinations of three primes\n    val size = primes.size\n    for (i in 0 until size) {\n        for (j in i until size) {\n            for (k in j until size) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true\n                }\n            }\n        }\n    }\n\n    return false\n}\n\n// Example usage\nfun main() {\n    println(isMultiplyPrime(30))  // True, because 30 = 2 * 3 * 5\n    println(isMultiplyPrime(60))  // False, because 60 is not a product of three primes\n}"}
{"task_id": "HumanEval_kotlin/76", "language": "kotlin", "completion": "fun isSimplePower(x: Int, n: Int): Boolean {\n    if (n == 1 && x != 1) return false // Special case for base 1, only power of 1 is 1\n    var value = 1\n    while (value < x) {\n        value *= n\n        if (value == x) {\n            return true\n        }\n    }\n    return false\n}\n\n// Test cases\nfun main() {\n    println(isSimplePower(1, 4)) // true\n    println(isSimplePower(2, 2)) // true\n    println(isSimplePower(8, 2)) // true\n    println(isSimplePower(3, 2)) // false\n    println(isSimplePower(3, 1)) // false\n    println(isSimplePower(5, 3)) // false\n}"}
{"task_id": "HumanEval_kotlin/77", "language": "kotlin", "completion": "fun iscube(a: Int): Boolean {\n    val cubeRoot = Math.cbrt(a.toDouble())\n    return cubeRoot == cubeRoot.roundToInt().toDouble()\n}\n\n// Examples\nprintln(iscube(1))   // True\nprintln(iscube(2))   // False\nprintln(iscube(-1))  // True\nprintln(iscube(64))  // True\nprintln(iscube(0))   // True\nprintln(iscube(180)) // False"}
{"task_id": "HumanEval_kotlin/78", "language": "kotlin", "completion": "fun hexKey(num: Any): Int {\n    // Define a set of prime numbers for quick lookup\n    val primes = setOf(2, 3, 5, 7, 11, 13, 17)\n    \n    // Define the hexadecimal digits that are prime\n    val hexPrimes = \"2357BD\"\n    \n    // Convert the input to a string and iterate over each character\n    val strNum = num.toString()\n    var count = 0\n    \n    for (char in strNum) {\n        if (hexPrimes.contains(char)) {\n            count++\n        }\n    }\n    \n    return count\n}\n\n// Test cases\nfun main() {\n    println(hexKey(\"AB\")) // Output: 1\n    println(hexKey(\"1077E\")) // Output: 2\n    println(hexKey(\"ABED1A33\")) // Output: 4\n    println(hexKey(\"123456789ABCDEF0\")) // Output: 6\n    println(hexKey(\"2020\")) // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/79", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    // Convert the decimal number to binary\n    val binaryString = Integer.toBinaryString(decimal)\n    \n    // Add 'db' at the beginning and end of the string\n    return \"db$binaryString\" + if (binaryString.length == 1) \"0\" else \"\" + \"db\"\n}\n\n// Examples\nfun main() {\n    println(decimalToBinary(15))   // Output: \"db1111db\"\n    println(decimalToBinary(32))   // Output: \"db100000db\"\n}"}
{"task_id": "HumanEval_kotlin/80", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) return false\n    \n    // Iterate through the string and check every 3 consecutive letters\n    for (i in 0 until s.length - 2) {\n        val sub = s.substring(i, i + 3)\n        // Check if there are any duplicate characters in the substring\n        if (sub[0] == sub[1] || sub[0] == sub[2] || sub[1] == sub[2]) {\n            return false\n        }\n    }\n    \n    return true\n}"}
{"task_id": "HumanEval_kotlin/81", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Double>): List<String> {\n    return grades.map { grade ->\n        when {\n            grade == 4.0 -> \"A+\"\n            grade > 3.7 -> \"A\"\n            grade > 3.3 -> \"A-\"\n            grade > 3.0 -> \"B+\"\n            grade > 2.7 -> \"B\"\n            grade > 2.3 -> \"B-\"\n            grade > 2.0 -> \"C+\"\n            grade > 1.7 -> \"C\"\n            grade > 1.3 -> \"C-\"\n            grade > 1.0 -> \"D+\"\n            grade > 0.7 -> \"D\"\n            grade > 0.0 -> \"D-\"\n            else -> \"E\"\n        }\n    }\n}\n\n// Example usage:\nfun main() {\n    val grades = listOf(4.0, 3.0, 1.7, 2.0, 3.5)\n    println(numericalLetterGrade(grades)) // Output: ['A+', 'B', 'C-', 'C', 'A-']\n}"}
{"task_id": "HumanEval_kotlin/82", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    if (length <= 1) return false\n    if (length == 2) return true // 2 is the only even prime number\n\n    for (i in 2..Math.sqrt(length.toDouble()).toInt()) {\n        if (length % i == 0) return false\n    }\n    return true\n}\n\n// Test cases\nfun main() {\n    println(primeLength(\"Hello\")) // True\n    println(primeLength(\"abcdcba\")) // True\n    println(primeLength(\"kittens\")) // True\n    println(primeLength(\"orange\")) // False\n}"}
{"task_id": "HumanEval_kotlin/83", "language": "kotlin", "completion": "fun startsOneEnds(n: Int): Int {\n    if (n == 1) {\n        // For single-digit numbers, only '1' itself fits the criteria.\n        return 1\n    }\n    \n    val countStartsWithOne = 9.toDouble().pow(n - 1).toInt()\n    val countEndsWithOne = if (n == 2) 0 else 9.toDouble().pow(n - 2).toInt() * 9\n    \n    return countStartsWithOne + countEndsWithOne\n}"}
{"task_id": "HumanEval_kotlin/84", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    // Step 1: Calculate the sum of digits of N\n    val digitSum = n.toString().map { it - '0' }.sum()\n    \n    // Step 2: Convert the sum to binary\n    return digitSum.toBinaryString()\n}\n\n// Extension function to convert an integer to its binary string representation\nfun Int.toBinaryString(): String {\n    if (this == 0) return \"0\"\n    var num = this\n    val sb = StringBuilder()\n    while (num > 0) {\n        sb.append(num % 2)\n        num /= 2\n    }\n    return sb.reverse().toString()\n}"}
{"task_id": "HumanEval_kotlin/85", "language": "kotlin", "completion": "fun add(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst.indices) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/86", "language": "kotlin", "completion": "fun antiShuffle(s: String): String {\n    // Split the string into words and spaces\n    val parts = s.split(\" \")\n    \n    // Map each part to its sorted version\n    val orderedParts = parts.map { it.toCharArray().sorted().joinToString(\"\") }\n    \n    // Join the ordered parts back together with spaces\n    return orderedParts.joinToString(\" \")\n}\n\n// Test cases\nfun main() {\n    println(antiShuffle(\"Hi\")) // Output: \"Hi\"\n    println(antiShuffle(\"hello\")) // Output: \"ehllo\"\n    println(antiShuffle(\"Hello World!!!\")) // Output: \"Hello !!!Wdlor\"\n}"}
{"task_id": "HumanEval_kotlin/87", "language": "kotlin", "completion": "fun getRow(lst: List<List<Int>>, x: Int): List<Pair<Int, Int>> {\n    val coordinates = mutableListOf<Pair<Int, Int>>()\n    \n    for ((rowIndex, row) in lst.withIndex()) {\n        for ((colIndex, value) in row.withIndex()) {\n            if (value == x) {\n                coordinates.add(Pair(rowIndex, colIndex))\n            }\n        }\n    }\n    \n    // Sort by rows first, then by columns within each row\n    val sortedCoordinates = coordinates.sortedWith(compareBy({ it.first }, { -it.second }))\n    \n    return sortedCoordinates\n}\n\n// Example usage:\nfun main() {\n    println(getRow(listOf(\n        listOf(1, 2, 3, 4, 5, 6),\n        listOf(1, 2, 3, 4, 1, 6),\n        listOf(1, 2, 3, 4, 5, 1)\n    ), 1)) // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    \n    println(getRow(listOf(), 1)) // Output: []\n    \n    println(getRow(listOf(\n        listOf(),\n        listOf(1),\n        listOf(1, 2, 3)\n    ), 3)) // Output: [(2, 2)]\n}"}
{"task_id": "HumanEval_kotlin/88", "language": "kotlin", "completion": "fun sortArray(array: List<Int>): List<Int> {\n    if (array.isEmpty()) return emptyList()\n    val first = array[0]\n    val last = array[array.size - 1]\n    val sumIsOdd = (first + last) % 2 != 0\n    return if (sumIsOdd) {\n        array.sorted()\n    } else {\n        array.sortedDescending()\n    }\n}\n\n// Test cases\nfun main() {\n    println(sortArray(listOf())) // []\n    println(sortArray(listOf(5))) // [5]\n    println(sortArray(listOf(2, 4, 3, 0, 1, 5))) // [0, 1, 2, 3, 4, 5]\n    println(sortArray(listOf(2, 4, 3, 0, 1, 5, 6))) // [6, 5, 4, 3, 2, 1, 0]\n}"}
{"task_id": "HumanEval_kotlin/89", "language": "kotlin", "completion": "fun encrypt(s: String): String {\n    val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    val encryptedString = StringBuilder()\n\n    for (char in s) {\n        if (char.isLetter()) {\n            // Find the position of the character in the alphabet\n            val originalIndex = alphabet.indexOf(char.toLowerCase())\n            // Calculate the new index after shifting by 2 * 2 = 4 places\n            val newIndex = (originalIndex + 8) % 26\n            // Append the encrypted character to the result string\n            if (char.isUpperCase()) {\n                encryptedString.append(alphabet[newIndex].toUpperCase())\n            } else {\n                encryptedString.append(alphabet[newIndex])\n            }\n        } else {\n            // If it's not a letter, just append the character as is (handles spaces and punctuation)\n            encryptedString.append(char)\n        }\n    }\n\n    return encryptedString.toString()\n}\n\n// Test cases\nfun main() {\n    println(encrypt(\"hi\"))      // returns 'lm'\n    println(encrypt(\"asdfghjkl\")) // returns 'ewhjklnop'\n    println(encrypt(\"gf\"))      // returns 'kj'\n    println(encrypt(\"et\"))      // returns 'ix'\n}"}
{"task_id": "HumanEval_kotlin/90", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Int>): Int? {\n    if (lst.isEmpty() || lst.size < 2) {\n        return null\n    }\n    \n    val distinctSortedList = lst.distinct().sorted()\n    \n    if (distinctSortedList.size < 2) {\n        return null\n    }\n    \n    return distinctSortedList[1]\n}"}
{"task_id": "HumanEval_kotlin/91", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    // Split the string into sentences based on delimiters '.', '?', or '!'\n    val sentences = s.split(\".\", \"?\", \"!\")\n    \n    // Initialize a counter for boredoms\n    var boredomCount = 0\n    \n    // Iterate through each sentence\n    for (sentence in sentences) {\n        // Trim leading and trailing whitespace from the sentence\n        val trimmedSentence = sentence.trim()\n        \n        // Check if the sentence starts with \"I\"\n        if (trimmedSentence.startsWith(\"I\")) {\n            boredomCount++\n        }\n    }\n    \n    return boredomCount\n}\n\n// Test cases\nfun main() {\n    println(isBored(\"Hello world\")) // Output: 0\n    println(isBored(\"The sky is blue. The sun is shining. I love this weather\")) // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/92", "language": "kotlin", "completion": "fun anyInt(x: Any, y: Any, z: Any): Boolean {\n    // Check if all inputs are numbers (integers or floating-point numbers)\n    if (listOf(x, y, z).all { it is Number }) {\n        val numX = x as Number\n        val numY = y as Number\n        val numZ = z as Number\n        \n        // Check if one of the numbers is equal to the sum of the other two\n        return listOf(numX.toDouble() + numY.toDouble(), numX.toDouble() + numZ.toDouble(), numY.toDouble() + numZ.toDouble()).any { it == numX.toDouble() || it == numY.toDouble() || it == numZ.toDouble() }\n    }\n    return false\n}\n\n// Test cases\nfun main() {\n    println(anyInt(5, 2, 7)) // \u279e True\n    println(anyInt(3, 2, 2)) // \u279e False\n    println(anyInt(3, -2, 1)) // \u279e True\n    println(anyInt(3.6, -2.2, 2.0)) // \u279e False\n}"}
{"task_id": "HumanEval_kotlin/93", "language": "kotlin", "completion": "fun encode(message: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return message.map { char ->\n        when {\n            char in vowels -> {\n                // Find the position of the vowel in the alphabet\n                val originalPosition = vowels.indexOf(char)\n                // Calculate the new character 2 positions ahead\n                val newCharCode = if (originalPosition + 2 <= vowels.length - 1) {\n                    vowels[originalPosition + 2]\n                } else {\n                    vowels[originalPosition + 2 - vowels.length]\n                }\n                // Swap case of the character\n                if (char.isUpperCase()) newCharCode.toUpperCase() else newCharCode.toLowerCase()\n            }\n            char.isLowerCase() -> char.toUpperCase()\n            char.isUpperCase() -> char.toLowerCase()\n            else -> char\n        }\n    }.joinToString(\"\")\n}\n\n// Test cases\nfun main() {\n    println(encode(\"test\")) // 'TGST'\n    println(encode(\"This is a message\")) // 'tHKS KS C MGSSCGG'\n}"}
{"task_id": "HumanEval_kotlin/94", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) return -1 // Return -1 if there are no prime numbers in the list\n    \n    val largestPrime = primes.maxOrNull() ?: 0\n    return sumOfDigits(largestPrime)\n}\n\nfun sumOfDigits(n: Int): Int {\n    var num = n\n    var sum = 0\n    while (num > 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\n// Test cases\nfun main() {\n    println(skjkasdkd(listOf(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3))) // Output: 10\n    println(skjkasdkd(listOf(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1))) // Output: 25\n    println(skjkasdkd(listOf(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3))) // Output: 13\n    println(skjkasdkd(listOf(0,724,32,71,99,32,6,0,5,91,83,0,5,6))) // Output: 11\n    println(skjkasdkd(listOf(0,81,12,3,1,21))) // Output: 3\n    println(skjkasdkd(listOf(0,8,1,2,1,7))) // Output: 7\n}"}
{"task_id": "HumanEval_kotlin/95", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    if (dict.isEmpty()) {\n        return false\n    }\n    \n    var allLowerCase = true\n    var allUpperCase = true\n    \n    for ((key, _) in dict) {\n        when {\n            key is String -> {\n                if (!key.equals(key.toLowerCase(), ignoreCase = true)) {\n                    allLowerCase = false\n                }\n                if (!key.equals(key.toUpperCase(), ignoreCase = true)) {\n                    allUpperCase = false\n                }\n            } else {\n                return false\n            }\n        }\n    }\n    \n    return allLowerCase || allUpperCase\n}\n\n// Test cases\nfun main() {\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"b\" to \"banana\"))) // True\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"A\" to \"banana\", \"B\" to \"banana\"))) // False\n    println(checkDictCase(mapOf(\"a\" to \"apple\", 8 to \"banana\", \"a\" to \"apple\"))) // False\n    println(checkDictCase(mapOf(\"Name\" to \"John\", \"Age\" to \"36\", \"City\" to \"Houston\"))) // False\n    println(checkDictCase(mapOf(\"STATE\" to \"NC\", \"ZIP\" to \"12345\"))) // True\n}"}
{"task_id": "HumanEval_kotlin/96", "language": "kotlin", "completion": "fun countUpTo(n: Int): List<Int> {\n    if (n <= 1) return emptyList()\n    \n    fun isPrime(num: Int): Boolean {\n        if (num <= 1) return false\n        if (num == 2) return true\n        if (num % 2 == 0) return false\n        for (i in 3..kotlin.math.sqrt(num.toDouble()).toInt() step 2) {\n            if (num % i == 0) return false\n        }\n        return true\n    }\n    \n    val primes = mutableListOf<Int>()\n    for (i in 2 until n) {\n        if (isPrime(i)) {\n            primes.add(i)\n        }\n    }\n    return primes\n}\n\n// Test cases\nfun main() {\n    println(countUpTo(5)) // Output: [2, 3]\n    println(countUpTo(11)) // Output: [2, 3, 5, 7]\n    println(countUpTo(0)) // Output: []\n    println(countUpTo(20)) // Output: [2, 3, 5, 7, 11, 13, 17, 19]\n    println(countUpTo(1)) // Output: []\n    println(countUpTo(18)) // Output: [2, 3, 5, 7, 11, 13, 17]\n}"}
{"task_id": "HumanEval_kotlin/97", "language": "kotlin", "completion": "fun multiply(a: Int, b: Int): Int {\n    // Get the unit digits of both numbers\n    val unitDigitA = Math.abs(a) % 10\n    val unitDigitB = Math.abs(b) % 10\n    \n    // Return the product of their unit digits\n    return unitDigitA * unitDigitB\n}\n\n// Test cases\nfun main() {\n    println(multiply(148, 412)) // should return 16\n    println(multiply(19, 28))   // should return 72\n    println(multiply(2020, 1851)) // should return 0\n    println(multiply(14, -15))  // should return 20\n}"}
{"task_id": "HumanEval_kotlin/98", "language": "kotlin", "completion": "fun countUpper(s: String): Int {\n    val uppercaseVowels = setOf('A', 'E', 'I', 'O', 'U')\n    var count = 0\n    \n    for (i in s.indices step 2) {\n        if (s[i] in uppercaseVowels) {\n            count++\n        }\n    }\n    \n    return count\n}\n\n// Test cases\nfun main() {\n    println(countUpper(\"aBCdEf\")) // returns 1\n    println(countUpper(\"abcdefg\")) // returns 0\n    println(countUpper(\"dBBE\")) // returns 0\n}"}
{"task_id": "HumanEval_kotlin/99", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    // Convert the string to a floating-point number\n    val num = value.toDouble()\n    \n    // Get the integer part and the fractional part\n    val intPart = num.toInt()\n    val fracPart = num - intPart\n    \n    // Determine if we need to round up or down based on the fractional part\n    return when {\n        fracPart == 0.0 -> intPart\n        fracPart < 0.5 -> intPart\n        else -> intPart + 1\n    }\n}\n\n// Examples\nfun main() {\n    println(closestInteger(\"10\")) // Output: 10\n    println(closestInteger(\"15.3\")) // Output: 15\n    println(closestInteger(\"14.5\")) // Output: 15\n    println(closestInteger(\"-14.5\")) // Output: -15\n}"}
{"task_id": "HumanEval_kotlin/100", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf<Int>()\n    var currentLevelStones = n\n    \n    for (i in 0 until n) {\n        pile.add(currentLevelStones)\n        if (n % 2 == 0) {\n            // If n is even, the next level will have the next even number\n            currentLevelStones += 2\n        } else {\n            // If n is odd, the next level will have the next odd number\n            currentLevelStones += 2\n        }\n    }\n    \n    return pile\n}\n\n// Example usage\nfun main() {\n    println(makeAPile(3)) // Output: [3, 5, 7]\n}"}
{"task_id": "HumanEval_kotlin/101", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    // Split the string by spaces and commas, then filter out empty strings\n    return s.split(\" \", \",\").filter { it.isNotEmpty() }\n}"}
{"task_id": "HumanEval_kotlin/102", "language": "kotlin", "completion": "fun chooseNum(x: Int, y: Int): Int {\n    // Ensure x is less than or equal to y for the range [x, y] inclusive\n    if (x > y) return -1\n    \n    // Iterate through the range from y down to x\n    for (i in y downTo x) {\n        // Check if the number is even and greater than or equal to x\n        if (i % 2 == 0 && i >= x) {\n            return i\n        }\n    }\n    \n    // If no even number found, return -1\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/103", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) return -1\n    \n    // Calculate the sum of numbers from n to m\n    val sum = (n..m).sum()\n    \n    // Calculate the number of integers in this range\n    val count = m - n + 1\n    \n    // Calculate the average and round it to the nearest integer\n    val avg = (sum.toDouble() / count).roundToInt()\n    \n    // Convert the rounded average to binary string\n    return \"0b${avg.toString(2)}\"\n}\n\n// Helper function to round to the nearest integer\nfun Double.roundToInt(): Int {\n    return if (this - this.toInt() >= 0.5) this.toInt() + 1 else this.toInt()\n}"}
{"task_id": "HumanEval_kotlin/104", "language": "kotlin", "completion": "fun uniqueDigits(x: List<Int>): List<Int> {\n    // Filter out elements that contain any even digits\n    val filteredList = x.filter { num -> \n        num.toString().none { digit -> digit in \"02468\" }\n    }\n    \n    // Sort the filtered list in increasing order\n    return filteredList.sorted()\n}\n\n// Example usage:\nfun main() {\n    println(uniqueDigits(listOf(15, 33, 1422, 1))) // Output: [1, 15, 33]\n    println(uniqueDigits(listOf(152, 323, 1422, 10))) // Output: []\n}"}
{"task_id": "HumanEval_kotlin/105", "language": "kotlin", "completion": "fun byLength(arr: List<Any>): List<String> {\n    // Step 1: Filter the array to include only integers between 1 and 9 inclusive\n    val filteredList = arr.filterIsInstance<Int>().filter { it in 1..9 }\n    \n    // Step 2: Sort the filtered list\n    val sortedList = filteredList.sorted()\n    \n    // Step 3: Reverse the sorted list\n    val reversedList = sortedList.reversed()\n    \n    // Step 4: Replace each digit with its corresponding name\n    val resultNames = reversedList.map { numberToName(it) }\n    \n    return resultNames\n}\n\n// Helper function to convert a number to its corresponding name\nfun numberToName(number: Int): String {\n    return when (number) {\n        1 -> \"One\"\n        2 -> \"Two\"\n        3 -> \"Three\"\n        4 -> \"Four\"\n        5 -> \"Five\"\n        6 -> \"Six\"\n        7 -> \"Seven\"\n        8 -> \"Eight\"\n        9 -> \"Nine\"\n        else -> throw IllegalArgumentException(\"Invalid number\")\n    }\n}\n\n// Example usage:\nfun main() {\n    val arr1 = listOf(2, 1, 1, 4, 5, 8, 2, 3)\n    println(byLength(arr1)) // Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    val arr2 = listOf<Any>()\n    println(byLength(arr2)) // Output: []\n    \n    val arr3 = listOf(1, -1, 55)\n    println(byLength(arr3)) // Output: [\"One\"]\n}"}
{"task_id": "HumanEval_kotlin/106", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    \n    fun factorial(num: Int): Int {\n        return if (num == 0 || num == 1) 1 else (1..num).reduce { acc, i -> acc * i }\n    }\n    \n    fun sumUpTo(num: Int): Int {\n        return (1..num).sum()\n    }\n    \n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(factorial(i))\n        } else {\n            result.add(sumUpTo(i))\n        }\n    }\n    \n    return result\n}\n\n// Example usage:\nfun main() {\n    println(f(5))  // Output: [1, 2, 6, 24, 15]\n}"}
{"task_id": "HumanEval_kotlin/107", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): Pair<Int, Int> {\n    var evenCount = 0\n    var oddCount = 0\n\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++\n            } else {\n                oddCount++\n            }\n        }\n    }\n\n    return Pair(evenCount, oddCount)\n}\n\nfun isPalindrome(number: Int): Boolean {\n    val str = number.toString()\n    return str == str.reversed()\n}\n\n// Example usage:\nfun main() {\n    val result1 = evenOddPalindrome(3)\n    println(\"${result1.first}, ${result1.second}\") // Output: 1, 2\n\n    val result2 = evenOddPalindrome(12)\n    println(\"${result2.first}, ${result2.second}\") // Output: 4, 6\n}"}
{"task_id": "HumanEval_kotlin/108", "language": "kotlin", "completion": "fun countNums(arr: List<Any>): Int {\n    return arr.count { num ->\n        when (num) {\n            is Int -> num.toString().sumBy { it - '0' } > 0\n            else -> false\n        }\n    }\n}\n\n// Helper extension function to sum the digits of a string representation of an integer\nfun String.sumBy(transform: (Char) -> Int): Int {\n    return this.map(transform).sum()\n}\n\n// Test cases\nfun main() {\n    println(countNums(listOf())) // Output: 0\n    println(countNums(listOf(-1, 11, -11))) // Output: 1\n    println(countNums(listOf(1, 1, 2))) // Output: 3\n}"}
{"task_id": "HumanEval_kotlin/109", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n    \n    // Generate all rotations of the array\n    val n = arr.size\n    for (shift in 0 until n) {\n        val rotatedArr = arr.drop(shift) + arr.take(shift)\n        if (isSorted(rotatedArr)) {\n            return true\n        }\n    }\n    return false\n}\n\nfun isSorted(arr: List<Int>): Boolean {\n    for (i in 1 until arr.size) {\n        if (arr[i] < arr[i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\n// Example usage\nfun main() {\n    println(moveOneBall(listOf(3, 4, 5, 1, 2))) // True\n    println(moveOneBall(listOf(3, 5, 4, 1, 2))) // False\n}"}
{"task_id": "HumanEval_kotlin/110", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    // Check if all elements in lst1 are even\n    val hasAllEven = lst1.all { it % 2 == 0 }\n    \n    // If already all even, return \"YES\"\n    if (hasAllEven) return \"YES\"\n    \n    // Find the odd numbers in lst1\n    val oddNumbersInLst1 = lst1.filter { it % 2 != 0 }\n    \n    // Check if there are any odd numbers in lst1 that can be replaced by even numbers from lst2\n    for (oddNumber in oddNumbersInLst1) {\n        if (lst2.any { it % 2 == 0 }) {\n            return \"YES\"\n        }\n    }\n    \n    // If no such replacement is possible, return \"NO\"\n    return \"NO\"\n}"}
{"task_id": "HumanEval_kotlin/111", "language": "kotlin", "completion": "fun histogram(test: String): Map<Char, Int> {\n    if (test.isEmpty()) return emptyMap()\n    \n    val letters = test.split(' ')\n    val countMap = mutableMapOf<Char, Int>()\n    \n    for (letter in letters) {\n        if (letter.isNotEmpty()) {\n            val char = letter[0]\n            countMap[char] = countMap.getOrDefault(char, 0) + 1\n        }\n    }\n    \n    val maxCount = countMap.values.maxOrNull() ?: 0\n    return countMap.filterValues { it == maxCount }.toMap()\n}"}
{"task_id": "HumanEval_kotlin/112", "language": "kotlin", "completion": "fun reverseDelete(s : String, c : String) : List<Any> {\n    // Step 1: Remove characters in `s` that are present in `c`\n    val filteredString = s.filterNot { c.contains(it) }\n    \n    // Step 2: Check if the resulting string is a palindrome\n    val isPalindrome = filteredString == filteredString.reversed()\n    \n    // Return the result as a list containing the filtered string and whether it's a palindrome\n    return listOf(filteredString, isPalindrome)\n}\n\n// Example usage:\nfun main() {\n    println(reverseDelete(\"abcde\", \"ae\")) // Output: ['bcd', False]\n    println(reverseDelete(\"abcdef\", \"b\"))  // Output: ['acdef', False]\n    println(reverseDelete(\"abcdedcba\", \"ab\")) // Output: ['cdedc', True]\n}"}
{"task_id": "HumanEval_kotlin/113", "language": "kotlin", "completion": "fun oddCount(lst: List<String>): List<String> {\n    val result = mutableListOf<String>()\n    \n    for (s in lst) {\n        var countOdd = 0\n        for (char in s) {\n            if (char.toString().toInt() % 2 != 0) {\n                countOdd++\n            }\n        }\n        val modifiedString = \"the number of odd elements ${countOdd}n the str${countOdd}ng ${countOdd} of the ${countOdd}nput.\"\n        result.add(modifiedString)\n    }\n    \n    return result\n}"}
{"task_id": "HumanEval_kotlin/114", "language": "kotlin", "completion": "fun minSubArraySum(nums: List<Int>): Int {\n    if (nums.isEmpty()) return 0\n\n    // Initialize variables\n    var currentMin = 0\n    var globalMin = nums[0]\n\n    for (num in nums) {\n        currentMin = minOf(currentMin + num, num)\n        globalMin = minOf(globalMin, currentMin)\n    }\n\n    return globalMin\n}\n\n// Test cases\nfun main() {\n    println(minSubArraySum(listOf(2, 3, 4, 1, 2, 4))) // Output: 1\n    println(minSubArraySum(listOf(-1, -2, -3)))       // Output: -6\n}"}
{"task_id": "HumanEval_kotlin/115", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var totalWater = 0\n    \n    // Calculate the total number of units of water in all wells\n    for (row in grid) {\n        for (waterUnit in row) {\n            if (waterUnit == 1) {\n                totalWater += 1\n            }\n        }\n    }\n    \n    // If there is no water, return 0\n    if (totalWater == 0) {\n        return 0\n    }\n    \n    // Calculate the number of times we need to lower the buckets\n    val fillsNeeded = totalWater / capacity\n    \n    // If there's any remainder, we need one more fill\n    if (totalWater % capacity != 0) {\n        return fillsNeeded + 1\n    }\n    \n    return fillsNeeded\n}\n\n// Example usage:\nfun main() {\n    val grid1 = listOf(listOf(0, 0, 1, 0), listOf(0, 1, 0, 0), listOf(1, 1, 1, 1))\n    val capacity1 = 1\n    println(maxFill(grid1, capacity1)) // Output: 6\n    \n    val grid2 = listOf(listOf(0, 0, 1, 1), listOf(0, 0, 0, 0), listOf(1, 1, 1, 1), listOf(0, 1, 1, 1))\n    val capacity2 = 2\n    println(maxFill(grid2, capacity2)) // Output: 5\n    \n    val grid3 = listOf(listOf(0, 0, 0), listOf(0, 0, 0))\n    val capacity3 = 5\n    println(maxFill(grid3, capacity3)) // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/116", "language": "kotlin", "completion": "fun sortArray(arr: List<Any>): List<Any> {\n    return arr.sortedWith(compareBy({ countOnes(it) }, { it }))\n}\n\n// Helper function to count the number of ones in the binary representation of an integer\nfun countOnes(n: Any): Int {\n    val num = when (n) {\n        is Int -> n\n        else -> throw IllegalArgumentException(\"Unsupported type\")\n    }\n    return Integer.toBinaryString(num).count { it == '1' }\n}\n\n// Example usage\nfun main() {\n    println(sortArray(listOf(1, 5, 2, 3, 4))) // Output: [1, 2, 3, 4, 5]\n    println(sortArray(listOf(-2, -3, -4, -5, -6))) // Output: [-6, -5, -4, -3, -2]\n    println(sortArray(listOf(1, 0, 2, 3, 4))) // Output: [0, 1, 2, 3, 4]\n}"}
{"task_id": "HumanEval_kotlin/117", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    if (s.isEmpty()) return emptyList()\n    \n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    \n    fun countConsonants(word: String): Int {\n        return word.count { char -> !vowels.contains(char) && char.isLetter() }\n    }\n    \n    val words = s.split(\" \")\n    return words.filter { word -> countConsonants(word) == n }.map { it }\n}\n\n// Test cases\nfun main() {\n    println(selectWords(\"Mary had a little lamb\", 4)) // [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3)) // [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2)) // []\n    println(selectWords(\"Hello world\", 4)) // [\"world\"]\n    println(selectWords(\"Uncle sam\", 3)) // [\"Uncle\"]\n}"}
{"task_id": "HumanEval_kotlin/118", "language": "kotlin", "completion": "fun getClosestVowel(word: String): String {\n    // Define vowels\n    val vowels = \"aeiouAEIOU\"\n    \n    // Iterate through the word from right to left, starting from the second last character\n    for (i in word.length - 2 downTo 1) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i + 1]) && !vowels.contains(word[i - 1])) {\n            return word[i].toString()\n        }\n    }\n    \n    // Return empty string if no vowel is found meeting the condition\n    return \"\"\n}\n\n// Test cases\nfun main() {\n    println(getClosestVowel(\"yogurt\"))  // Output: \"u\"\n    println(getClosestVowel(\"FULL\"))    // Output: \"U\"\n    println(getClosestVowel(\"quick\"))   // Output: \"\"\n    println(getClosestVowel(\"ab\"))      // Output: \"\"\n}"}
{"task_id": "HumanEval_kotlin/119", "language": "kotlin", "completion": "fun matchParens(lst: List<String>): String {\n    // Concatenate the two strings in both possible orders\n    val s1 = lst[0] + lst[1]\n    val s2 = lst[1] + lst[0]\n    \n    // Check if either concatenated string is a valid good string\n    return if (isValid(s1) || isValid(s2)) \"Yes\" else \"No\"\n}\n\n// Helper function to check if a string of parentheses is balanced\nfun isValid(s: String): Boolean {\n    var balance = 0\n    for (char in s) {\n        if (char == '(') {\n            balance++\n        } else {\n            balance--\n        }\n        // If at any point the balance becomes negative, it means there are more closing parentheses than opening ones\n        if (balance < 0) return false\n    }\n    // The string is balanced if the final balance is zero\n    return balance == 0\n}\n\n// Test cases\nfun main() {\n    println(matchParens(listOf(\"()(\", \")\"))) // Output: Yes\n    println(matchParens(listOf(\")\", \")\"))) // Output: No\n}"}
{"task_id": "HumanEval_kotlin/120", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Any> {\n    // Convert arr to a mutable list if it isn't already\n    val mutableArr = arr.toMutableList()\n    \n    // Sort the list in descending order\n    mutableArr.sortDescending()\n    \n    // Take the first k elements\n    val result = mutableArr.take(k)\n    \n    return result\n}\n\n// Example usage:\nfun main() {\n    println(maximum(listOf(-3, -4, 5), 3)) // Output: [-4, -3, 5]\n    println(maximum(listOf(4, -4, 4), 2)) // Output: [4, 4]\n    println(maximum(listOf(-3, 2, 1, 2, -1, -2, 1), 1)) // Output: [2]\n}"}
{"task_id": "HumanEval_kotlin/121", "language": "kotlin", "completion": "fun solution(lst: List<Int>): Int {\n    var sum = 0\n    for (i in lst.indices) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}"}
{"task_id": "HumanEval_kotlin/122", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    // Take the first k elements from the array\n    val selectedElements = arr.take(k)\n    \n    // Filter out the elements with at most two digits\n    val filteredElements = selectedElements.filter { it.toString().length <= 2 }\n    \n    // Calculate and return the sum of these elements\n    return filteredElements.sum()\n}\n\n// Example usage:\nfun main() {\n    val arr = listOf(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    val k = 4\n    println(addElements(arr, k)) // Output: 24\n}"}
{"task_id": "HumanEval_kotlin/123", "language": "kotlin", "completion": "fun getOddCollatz(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    \n    // Generate the Collatz sequence starting from n\n    var current = n\n    \n    while (current != 1) {\n        if (current % 2 != 0) {\n            result.add(current)\n        }\n        if (current % 2 == 0) {\n            current /= 2\n        } else {\n            current = 3 * current + 1\n        }\n    }\n    \n    // Add the last element which is always 1\n    result.add(1)\n    \n    // Filter out odd numbers and sort them\n    val sortedOdds = result.filter { it % 2 != 0 }.sorted()\n    \n    return sortedOdds\n}\n\n// Example usage:\nfun main() {\n    println(getOddCollatz(5)) // Output: [1, 5]\n}"}
{"task_id": "HumanEval_kotlin/124", "language": "kotlin", "completion": "import java.util.regex.Pattern\n\nfun validDate(date: String): Boolean {\n    // Define the regex pattern for the date format mm-dd-yyyy\n    val pattern = Pattern.compile(\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\")\n    \n    // Match the input string against the pattern\n    val matcher = pattern.matcher(date)\n    \n    // Check if the date string matches the pattern\n    if (!matcher.matches()) {\n        return false\n    }\n    \n    // Extract month, day, and year from the matched groups\n    val monthStr = matcher.group(1)\n    val dayStr = matcher.group(2)\n    val yearStr = matcher.group(3)\n    \n    // Convert the extracted strings to integers\n    val month = monthStr.toInt()\n    val day = dayStr.toInt()\n    val year = yearStr.toInt()\n    \n    // Check if the month is valid (1-12)\n    if (month !in 1..12) {\n        return false\n    }\n    \n    // Define the number of days in each month\n    val daysInMonth = listOf(31, -1, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n    \n    // Check if the day is valid for the given month\n    val daysInMonthForCurrentMonth = daysInMonth[month - 1]\n    if (day < 1 || day > daysInMonthForCurrentMonth) {\n        return false\n    }\n    \n    // If all checks pass, the date is valid\n    return true\n}\n\n// Test cases\nfun main() {\n    println(validDate(\"03-11-2000\")) // True\n    println(validDate(\"15-01-2012\")) // False\n    println(validDate(\"04-0-2040\"))  // False\n    println(validDate(\"06-04-2020\")) // True\n    println(validDate(\"06/04/2020\")) // False\n}"}
{"task_id": "HumanEval_kotlin/125", "language": "kotlin", "completion": "fun splitWords(txt: String): Any {\n    // Check for whitespace and split on it if found\n    val whitespaceSplit = txt.split(\" \")\n    if (whitespaceSplit.size > 1) {\n        return whitespaceSplit\n    }\n    \n    // If no whitespaces, check for commas and split on them if found\n    val commaSplit = txt.split(\",\")\n    if (commaSplit.size > 1) {\n        return commaSplit\n    }\n    \n    // If no whitespaces or commas, count lower-case letters with odd order in the alphabet\n    var oddCount = 0\n    for (char in txt) {\n        if (char in 'a'..'z') {\n            val ordValue = char - 'a'\n            if (ordValue % 2 == 1) {\n                oddCount++\n            }\n        }\n    }\n    return oddCount\n}\n\n// Examples\nfun main() {\n    println(splitWords(\"Hello world!\")) // \u279e [\"Hello\", \"world!\"]\n    println(splitWords(\"Hello,world!\")) // \u279e [\"Hello\", \"world!\"]\n    println(splitWords(\"abcdef\")) // == 3\n}"}
{"task_id": "HumanEval_kotlin/126", "language": "kotlin", "completion": "fun isSorted(lst: List<Int>): Boolean {\n    if (lst.size <= 1) return true\n    \n    var prev = lst[0]\n    for (i in 1 until lst.size) {\n        if (lst[i] <= prev) return false\n        prev = lst[i]\n    }\n    return true\n}\n\n// Test cases\nfun main() {\n    println(isSorted(listOf(5))) // True\n    println(isSorted(listOf(1, 2, 3, 4, 5))) // True\n    println(isSorted(listOf(1, 3, 2, 4, 5))) // False\n    println(isSorted(listOf(1, 2, 3, 4, 5, 6))) // True\n    println(isSorted(listOf(1, 2, 3, 4, 5, 6, 7))) // True\n    println(isSorted(listOf(1, 3, 2, 4, 5, 6, 7))) // False\n    println(isSorted(listOf(1, 2, 2, 3, 3, 4))) // True\n    println(isSorted(listOf(1, 2, 2, 2, 3, 4))) // False\n}"}
{"task_id": "HumanEval_kotlin/127", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    // Find the start and end of the intersection\n    val start = maxOf(interval1[0], interval2[0])\n    val end = minOf(interval1[1], interval2[1])\n    \n    // Check if there is an intersection\n    if (start > end) {\n        return \"NO\"\n    }\n    \n    // Calculate the length of the intersection\n    val length = end - start + 1\n    \n    // Check if the length is a prime number\n    if (isPrime(length)) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n// Function to check if a number is prime\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    \n    for (i in 3..sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    \n    return true\n}"}
{"task_id": "HumanEval_kotlin/128", "language": "kotlin", "completion": "fun prodSigns(arr: List<Any>): Int? {\n    if (arr.isEmpty()) return null\n\n    var sumMagnitudes = 0\n    val signs = mutableListOf<Int>()\n\n    for (num in arr) {\n        when (num) {\n            is Int -> {\n                sumMagnitudes += Math.abs(num)\n                signs.add(if (num > 0) 1 else if (num < 0) -1 else 0)\n            }\n            else -> throw IllegalArgumentException(\"All elements in the array must be integers.\")\n        }\n    }\n\n    val productOfSigns = signs.reduce { acc, i -> acc * i }\n    return sumMagnitudes * productOfSigns\n}\n\n// Test cases\nfun main() {\n    println(prodSigns(listOf(1, 2, 2, -4)) == -9) // true\n    println(prodSigns(listOf(0, 1)) == 0)         // true\n    println(prodSigns(emptyList<Any>()) == null)  // true\n}"}
{"task_id": "HumanEval_kotlin/129", "language": "kotlin", "completion": "import java.util.*\n\nfun minpath(grid: List<List<Int>>, k: Int): List<Int> {\n    val n = grid.size\n    val directions = listOf(Pair(-1, 0), Pair(1, 0), Pair(0, -1), Pair(0, 1))\n    \n    // Function to check if a cell is within the bounds of the grid\n    fun isValid(x: Int, y: Int): Boolean {\n        return x >= 0 && x < n && y >= 0 && y < n\n    }\n\n    // BFS initialization\n    val queue: Queue<Pair<Int, List<Int>>> = LinkedList()\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            queue.add(Pair(grid[i][j], listOf(grid[i][j])))\n        }\n    }\n\n    // Variable to store the minimum path found so far\n    var minPath = mutableListOf<Int>()\n\n    while (queue.isNotEmpty()) {\n        val (currentValue, currentPath) = queue.poll()\n        \n        if (currentPath.size == k) {\n            if (minPath.isEmpty() || currentPath < minPath) {\n                minPath = mutableListOf<Int>().apply { addAll(currentPath) }\n            }\n            continue\n        }\n\n        // Explore all possible moves from the current cell\n        for ((dx, dy) in directions) {\n            val newX = dx + (currentPath.size / n)\n            val newY = dy + (currentPath.size % n)\n            \n            if (isValid(newX, newY)) {\n                queue.add(Pair(grid[newX][newY], currentPath + listOf(grid[newX][newY])))\n            }\n        }\n    }\n\n    return minPath\n}\n\n// Example usage:\nfun main() {\n    val grid1 = listOf(listOf(1, 2, 3), listOf(4, 5, 6), listOf(7, 8, 9))\n    val k1 = 3\n    println(minpath(grid1, k1)) // Output: [1, 2, 1]\n\n    val grid2 = listOf(listOf(5, 9, 3), listOf(4, 1, 6), listOf(7, 8, 2))\n    val k2 = 1\n    println(minpath(grid2, k2)) // Output: [1]\n}"}
{"task_id": "HumanEval_kotlin/130", "language": "kotlin", "completion": "fun tri(n: Int): List<Int> {\n    if (n < 0) return emptyList() // Handle negative input gracefully\n\n    val result = mutableListOf<Int>()\n    \n    for (i in 0..n) {\n        result.add(calculateTribonacci(i))\n    }\n    \n    return result\n}\n\nfun calculateTribonacci(n: Int): Int {\n    if (n == 0) return 1 // Base case for n = 0\n    if (n == 1) return 3 // Base case for n = 1\n    \n    return when {\n        n % 2 == 0 -> 1 + n / 2\n        else -> calculateTribonacci(n - 1) + calculateTribonacci(n - 2) + calculateTribonacci(n + 1)\n    }\n}\n\n// Example usage:\nfun main() {\n    val n = 3\n    println(tri(n)) // Output: [1, 3, 2, 8]\n}"}
{"task_id": "HumanEval_kotlin/131", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    val numStr = n.toString()\n    var productOfOddDigits = 1\n    var hasOddDigit = false\n\n    for (char in numStr) {\n        val digit = char.toInt() - '0'.toInt()\n        if (digit % 2 != 0) {\n            productOfOddDigits *= digit\n            hasOddDigit = true\n        }\n    }\n\n    return if (hasOddDigit) productOfOddDigits else 0\n}"}
{"task_id": "HumanEval_kotlin/132", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    val stack = mutableListOf<Char>()\n    \n    for (char in string) {\n        when (char) {\n            '[' -> stack.add(char)\n            ']' -> {\n                if (stack.isEmpty() || stack.last() != '[') {\n                    return false\n                } else {\n                    stack.removeAt(stack.size - 1)\n                }\n            }\n        }\n    }\n    \n    // Check for nested brackets after processing the string\n    var hasNested = false\n    val remainingStack = mutableListOf<Char>()\n    while (stack.isNotEmpty()) {\n        val top = stack.removeAt(stack.size - 1)\n        if (top == '[') {\n            if (remainingStack.isNotEmpty() && remainingStack.last() == ']') {\n                hasNested = true\n            }\n        }\n        remainingStack.add(top)\n    }\n    \n    return hasNested\n}\n\n// Test cases\nfun main() {\n    println(isNested(\"[[]]\")) // \u279e True\n    println(isNested(\"[]]]]]]][[[[[]\")) // \u279e False\n    println(isNested(\"[][]\")) // \u279e False\n    println(isNested(\"[]\")) // \u279e False\n    println(isNested(\"[[][]]\")) // \u279e True\n    println(isNested(\"[[]][[\")) // \u279e True\n}"}
{"task_id": "HumanEval_kotlin/133", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    return lst.map { it as? Double ?: it.toDouble() } // Convert all elements to Double, if not already a number\n            .map { Math.ceil(it).toInt() } // Round up each element\n            .map { it * it } // Square each element\n            .sum() // Sum the squared values\n}\n\n// Test cases\nfun main() {\n    println(sumSquares(listOf(1, 2, 3))) // Output: 14\n    println(sumSquares(listOf(1, 4, 9))) // Output: 98\n    println(sumSquares(listOf(1, 3, 5, 7))) // Output: 84\n    println(sumSquares(listOf(1.4, 4.2, 0))) // Output: 29\n    println(sumSquares(listOf(-2.4, 1, 1))) // Output: 6\n}"}
{"task_id": "HumanEval_kotlin/134", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    // Check if the string is empty\n    if (txt.isEmpty()) return false\n    \n    // Get the last character of the string\n    val lastChar = txt[txt.length - 1]\n    \n    // Check if the last character is a letter\n    if (!lastChar.isLetter()) return false\n    \n    // Check if the last character is part of a word\n    // by ensuring it is not preceded by a space or at the start of the string\n    val index = txt.length - 1\n    if (index > 0 && txt[index - 1] == ' ') {\n        return true\n    } else if (index == 0) {\n        // If the string has only one character, it must be a letter to satisfy the condition\n        return lastChar.isLetter()\n    } else {\n        return false\n    }\n}\n\n// Test cases\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\")) // \u279e False\n    println(checkIfLastCharIsALetter(\"apple pi e\")) // \u279e True\n    println(checkIfLastCharIsALetter(\"apple pi e \")) // \u279e False\n    println(checkIfLastCharIsALetter(\"\")) // \u279e False\n}"}
{"task_id": "HumanEval_kotlin/135", "language": "kotlin", "completion": "fun canArrange(arr: List<Int>): Int {\n    for (i in arr.size - 2 downTo 0) {\n        if (arr[i] > arr[i + 1]) {\n            return i\n        }\n    }\n    return -1\n}"}
{"task_id": "HumanEval_kotlin/136", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    var maxNegative: Int? = null\n    var minPositive: Int? = null\n\n    for (item in lst) {\n        if (item is Int) {\n            when {\n                item < 0 -> {\n                    if (maxNegative == null || item > maxNegative) {\n                        maxNegative = item\n                    }\n                }\n                item > 0 -> {\n                    if (minPositive == null || item < minPositive) {\n                        minPositive = item\n                    }\n                }\n            }\n        }\n    }\n\n    return listOf(maxNegative, minPositive)\n}\n\n// Examples\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // Output: [null, 1]\n    println(largestSmallestIntegers(emptyList<Any>())) // Output: [null, null]\n    println(largestSmallestInteggers(listOf(0))) // Output: [null, null]\n}"}
{"task_id": "HumanEval_kotlin/137", "language": "kotlin", "completion": "fun compareOne(a: Any, b: Any): Any? {\n    val aNum = parseNumber(a)\n    val bNum = parseNumber(b)\n\n    // If both values are numbers, compare them\n    if (aNum != null && bNum != null) {\n        return if (aNum > bNum) a else b\n    }\n\n    // If one value is not a number, handle the comparison based on whether it's greater than the other value\n    if (aNum == null && bNum != null) return b\n    if (bNum == null && aNum != null) return a\n\n    // Return null if both values are equal or neither can be parsed as a number\n    return null\n}\n\n// Helper function to parse numbers from strings, handling different decimal separators\nfun parseNumber(value: Any): Number? {\n    return when (value) {\n        is Int -> value.toDouble() // Convert int to float for comparison\n        is Float -> value\n        is Double -> value\n        is String -> {\n            val str = value.replace(\",\", \".\") // Normalize the decimal separator\n            try {\n                str.toDouble()\n            } catch (e: NumberFormatException) {\n                null\n            }\n        }\n        else -> null\n    }\n}"}
{"task_id": "HumanEval_kotlin/138", "language": "kotlin", "completion": "fun isEqualToSumEven(n: Int): Boolean {\n    return n >= 8 && n % 2 == 0\n}"}
{"task_id": "HumanEval_kotlin/139", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    // Helper function to calculate factorial of a number\n    fun factorial(num: Int): Int {\n        if (num == 0 || num == 1) return 1\n        var result = 1\n        for (i in 2..num) {\n            result *= i\n        }\n        return result\n    }\n\n    // Calculate the product of factorials from n down to 1\n    var result = 1\n    for (i in n downTo 1) {\n        result *= factorial(i)\n    }\n    return result\n}\n\n// Example usage:\nfun main() {\n    println(specialFactorial(4)) // Output should be 288\n}"}
{"task_id": "HumanEval_kotlin/140", "language": "kotlin", "completion": "fun fixSpaces(text: String): String {\n    // Replace single spaces with underscores\n    var result = text.replace(' ', '_')\n    \n    // While there are more than 2 consecutive underscores, replace them with a single hyphen\n    while (result.contains(\"___\")) {\n        result = result.replace(\"___\", \"__\")\n    }\n    \n    return result\n}\n\n// Test cases\nfun main() {\n    println(fixSpaces(\"Example\")) // \"Example\"\n    println(fixSpaces(\"Example 1\")) // \"Example_1\"\n    println(fixSpaces(\" Example 2\")) // \"_Example_2\"\n    println(fixSpaces(\" Example   3\")) // \"_Example-3\"\n}"}
{"task_id": "HumanEval_kotlin/141", "language": "kotlin", "completion": "fun fileNameCheck(fileName: String): String {\n    // Check if there is exactly one dot in the filename\n    val parts = fileName.split(\".\")\n    if (parts.size != 2) {\n        return \"No\"\n    }\n    \n    val namePart = parts[0]\n    val extensionPart = parts[1]\n    \n    // Check if the name part is not empty and starts with a letter\n    if (namePart.isEmpty() || !namePart[0].isLetter()) {\n        return \"No\"\n    }\n    \n    // Check if the extension part is one of the allowed extensions\n    val validExtensions = listOf(\"txt\", \"exe\", \"dll\")\n    if (!validExtensions.contains(extensionPart)) {\n        return \"No\"\n    }\n    \n    // Check if there are more than three digits in the name part\n    var digitCount = 0\n    for (char in namePart) {\n        if (char.isDigit()) {\n            digitCount++\n        }\n    }\n    \n    if (digitCount > 3) {\n        return \"No\"\n    }\n    \n    // If all conditions are met, return 'Yes'\n    return \"Yes\"\n}\n\n// Examples\nfun main() {\n    println(fileNameCheck(\"example.txt\")) // => 'Yes'\n    println(fileNameCheck(\"1example.dll\")) // => 'No'\n}"}
{"task_id": "HumanEval_kotlin/142", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    var sum = 0\n    \n    for ((index, value) in lst.withIndex()) {\n        val num = value as? Int ?: continue\n        \n        if (index % 3 == 0) {\n            sum += Math.pow(num.toDouble(), 2.0).toInt()\n        } else if (index % 4 == 0 && index % 3 != 0) {\n            sum += Math.pow(num.toDouble(), 3.0).toInt()\n        } else {\n            sum += num\n        }\n    }\n    \n    return sum\n}"}
{"task_id": "HumanEval_kotlin/143", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    // Split the sentence into words\n    val words = sentence.split(\" \")\n\n    // Function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n        for (i in 3..kotlin.math.sqrt(n.toFloat()).toInt() step 2) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n\n    // Filter words whose lengths are prime numbers\n    val filteredWords = words.filter { isPrime(it.length) }\n\n    // Join the filtered words into a single string with spaces\n    return filteredWords.joinToString(\" \")\n}\n\n// Example usage:\nfun main() {\n    println(wordsInSentence(\"This is a test\")) // Output: \"is\"\n    println(wordsInSentence(\"lets go for swimming\")) // Output: \"go for\"\n}"}
{"task_id": "HumanEval_kotlin/144", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    // Split the input strings to get numerators and denominators\n    val (numeratorX, denominatorX) = x.split(\"/\").map { it.toInt() }\n    val (numeratorN, denominatorN) = n.split(\"/\").map { it.toInt() }\n    \n    // Multiply the fractions\n    val numeratorResult = numeratorX * numeratorN\n    val denominatorResult = denominatorX * denominatorN\n    \n    // Check if the result is a whole number\n    return numeratorResult % denominatorResult == 0\n}\n\n// Test cases\nfun main() {\n    println(simplify(\"1/5\", \"5/1\")) // True\n    println(simplify(\"1/6\", \"2/1\")) // False\n    println(simplify(\"7/10\", \"10/2\")) // False\n}"}
{"task_id": "HumanEval_kotlin/145", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Int>): List<Int> {\n    return nums.sortedWith(compareBy({ digitSum(it) }, { nums.indexOf(it) }))\n}\n\nfun digitSum(n: Int): Int {\n    var sum = 0\n    var num = n\n    while (num != 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\n// Example usage\nfun main() {\n    val numbers = listOf(1, 11, -1, -11, -12)\n    println(orderByPoints(numbers)) // Output: [-1, -11, 1, -12, 11]\n}"}
{"task_id": "HumanEval_kotlin/146", "language": "kotlin", "completion": "fun specialFilter(nums: List<Int>): Int {\n    return nums.count { num ->\n        val strNum = Math.abs(num).toString()\n        val firstDigit = strNum[0].toInt() - '0'.toInt() // Convert the first character to an integer\n        val lastDigit = strNum[strNum.length - 1].toInt() - '0'.toInt() // Convert the last character to an integer\n        isOdd(firstDigit) && isOdd(lastDigit) && num > 10\n    }\n}\n\nfun isOdd(digit: Int): Boolean {\n    return digit in listOf(1, 3, 5, 7, 9)\n}\n\n// Example usage:\nfun main() {\n    println(specialFilter(listOf(15, -73, 14, -15))) // Output: 1\n    println(specialFilter(listOf(33, -2, -3, 45, 21, 109))) // Output: 2\n}"}
{"task_id": "HumanEval_kotlin/147", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    // Step 1: Generate the array `a`\n    val a = Array(n) { i -> i * i - i + 1 }\n    \n    var count = 0\n    \n    // Step 2: Iterate through all possible triples (i, j, k)\n    for (i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    \n    // Step 3: Return the number of valid triples\n    return count\n}\n\n// Example usage\nfun main() {\n    val n = 5\n    println(getMaxTriples(n))  // Output: 1\n}"}
{"task_id": "HumanEval_kotlin/148", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    // Get the indices of the given planets\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n    \n    // Check if either planet is not in the list\n    if (index1 == -1 || index2 == -1) {\n        return emptyList()\n    }\n    \n    // Ensure index1 is less than index2 for easier handling\n    val startIndex = minOf(index1, index2)\n    val endIndex = maxOf(index1, index2)\n    \n    // Get the planets between the two indices (inclusive)\n    return if (startIndex + 1 == endIndex) {\n        listOf(planets[startIndex + 1])\n    } else {\n        planets.subList(startIndex + 1, endIndex).toList()\n    }\n}\n\n// Example usage:\nfun main() {\n    println(bf(\"Jupiter\", \"Neptune\")) // Output: [\"Saturn\", \"Uranus\"]\n    println(bf(\"Earth\", \"Mercury\")) // Output: [\"Venus\"]\n    println(bf(\"Mercury\", \"Uranus\")) // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n}"}
{"task_id": "HumanEval_kotlin/149", "language": "kotlin", "completion": "fun sortedListSum(lst: List<String>): List<String> {\n    // Filter out strings with odd lengths\n    val filteredList = lst.filter { it.length % 2 == 0 }\n    \n    // Sort the list by length and then alphabetically if lengths are equal\n    return filteredList.sortedWith(compareBy({ it.length }, { it }))\n}\n\n// Test cases\nfun main() {\n    assert(sortedListSum(listOf(\"aa\", \"a\", \"aaa\")) == listOf(\"aa\"))\n    assert(sortedListSum(listOf(\"ab\", \"a\", \"aaa\", \"cd\")) == listOf(\"ab\", \"cd\"))\n}"}
{"task_id": "HumanEval_kotlin/150", "language": "kotlin", "completion": "fun xOrY(n: Int, x: Int, y: Int): Int {\n    if (isPrime(n)) {\n        return x\n    } else {\n        return y\n    }\n}\n\n// Helper function to check if a number is prime\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num == 2) return true\n    if (num % 2 == 0) return false\n    for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n        if (num % i == 0) return false\n    }\n    return true\n}"}
{"task_id": "HumanEval_kotlin/151", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    return lst.filterIsInstance<Int>() // Filter out only integers\n        .filter { it % 2 != 0 } // Filter out odd numbers\n        .map { it * it } // Square each number\n        .sum() // Sum the squared values\n}\n\n// Test cases\nfun main() {\n    println(doubleTheDifference(listOf(1, 3, 2, 0))) // Output: 10\n    println(doubleTheDifference(listOf(-1, -2, 0))) // Output: 0\n    println(doubleTheDifference(listOf(9, -2))) // Output: 81\n    println(doubleTheDifference(listOf(0))) // Output: 0\n}"}
{"task_id": "HumanEval_kotlin/152", "language": "kotlin", "completion": "fun compare(game: List<Int>, guess: List<Int>): List<Int> {\n    // Create a list to store the differences\n    val result = mutableListOf<Int>()\n    \n    // Iterate through both lists simultaneously\n    for (i in game.indices) {\n        // Calculate the absolute difference between the score and the guess\n        val diff = Math.abs(game[i] - guess[i])\n        // Add the difference to the result list\n        result.add(diff)\n    }\n    \n    return result\n}\n\n// Example usage\nfun main() {\n    println(compare(listOf(1, 2, 3, 4, 5, 1), listOf(1, 2, 3, 4, 2, -2))) // [0, 0, 0, 0, 3, 3]\n    println(compare(listOf(0, 5, 0, 0, 0, 4), listOf(4, 1, 1, 0, 0, -2))) // [4, 4, 1, 0, 0, 6]\n}"}
{"task_id": "HumanEval_kotlin/153", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var strongestName = \"\"\n    var maxStrength = Int.MIN_VALUE\n    \n    for (extension in extensions) {\n        val capCount = extension.count { it.isUpperCase() }\n        val smCount = extension.count { it.isLowerCase() }\n        val strength = capCount - smCount\n        \n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestName = extension\n        }\n    }\n    \n    return \"$className.$strongestName\"\n}"}
{"task_id": "HumanEval_kotlin/154", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    // If b is longer than a, it can never be a substring\n    if (b.length > a.length) return false\n    \n    // Generate all rotations of b\n    val rotations = generateRotations(b)\n    \n    // Check if any rotation is a substring of a\n    for (rotation in rotations) {\n        if (a.contains(rotation)) return true\n    }\n    \n    return false\n}\n\n// Function to generate all rotations of a string\nfun generateRotations(s: String): List<String> {\n    val rotations = mutableListOf<String>()\n    for (i in s.indices) {\n        // Create a rotation by taking the substring from index i to end and appending the substring from start to index i\n        val rotation = s.substring(i) + s.substring(0, i)\n        rotations.add(rotation)\n    }\n    return rotations\n}\n\n// Test cases\nfun main() {\n    println(cycpatternCheck(\"abcd\", \"abd\")) // False\n    println(cycpatternCheck(\"hello\", \"ell\")) // True\n    println(cycpatternCheck(\"whassup\", \"psus\")) // False\n    println(cycpatternCheck(\"abab\", \"baa\")) // True\n    println(cycpatternCheck(\"efef\", \"eeff\")) // False\n    println(cycpatternCheck(\"himenss\", \"simen\")) // True\n}"}
{"task_id": "HumanEval_kotlin/155", "language": "kotlin", "completion": "fun evenOddCount(num: Int): List<Int> {\n    var evenCount = 0\n    var oddCount = 0\n    \n    // Convert the number to a positive if it is negative\n    val absNum = Math.abs(num)\n    \n    // Iterate through each digit of the number\n    for (char in absNum.toString()) {\n        val digit = char.toInt() - '0'.toInt() // Convert character to integer\n        \n        if (digit % 2 == 0) {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    \n    return listOf(evenCount, oddCount)\n}"}
{"task_id": "HumanEval_kotlin/156", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    // Define the mappings of integers to Roman numerals\n    val romanNumerals = listOf(\n        1000 to \"m\", 900 to \"cm\", 500 to \"d\", 400 to \"cd\",\n        100 to \"c\", 90 to \"xc\", 50 to \"l\", 40 to \"xl\",\n        10 to \"x\", 9 to \"ix\", 5 to \"v\", 4 to \"iv\", 1 to \"i\"\n    )\n    \n    var num = number\n    val result = StringBuilder()\n    \n    // Iterate through the list of Roman numeral mappings\n    for ((value, symbol) in romanNumerals) {\n        while (num >= value) {\n            num -= value\n            result.append(symbol)\n        }\n    }\n    \n    return result.toString().toLowerCase()\n}\n\n// Test cases\nfun main() {\n    println(intToMiniRoman(19))  // Output: \"xix\"\n    println(intToMiniRoman(152)) // Output: \"clii\"\n    println(intToMiniRoman(426)) // Output: \"cdxxvi\"\n}"}
{"task_id": "HumanEval_kotlin/157", "language": "kotlin", "completion": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    // First, identify the longest side, which will be our hypotenuse (c)\n    val sides = listOf(a, b, c).sorted()\n    \n    // Check if the square of the largest side is equal to the sum of squares of the other two sides\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\n// Example usage:\nfun main() {\n    println(rightAngleTriangle(3, 4, 5)) // True\n    println(rightAngleTriangle(1, 2, 3)) // False\n}"}
{"task_id": "HumanEval_kotlin/158", "language": "kotlin", "completion": "fun findMax(words: List<String>): String {\n    if (words.isEmpty()) return \"\"\n\n    var maxUniqueCount = 0\n    var resultWord = \"\"\n\n    for (word in words) {\n        val uniqueChars = word.toSet()\n        if (uniqueChars.size > maxUniqueCount || (uniqueChars.size == maxUniqueCount && word < resultWord)) {\n            maxUniqueCount = uniqueChars.size\n            resultWord = word\n        }\n    }\n\n    return resultWord\n}"}
{"task_id": "HumanEval_kotlin/159", "language": "kotlin", "completion": "fun eat(number: Int, need: Int, remaining: Int): List<Int> {\n    // Calculate the total number of carrots eaten after meals\n    val totalEaten = number + need\n    \n    // Determine the number of carrots left after eating\n    val carrotsLeft = if (totalEaten <= remaining) {\n        remaining - totalEaten\n    } else {\n        // If there are not enough remaining carrots, eat all that are available\n        0\n    }\n    \n    return listOf(totalEaten, carrotsLeft)\n}\n\n// Example usage:\nfun main() {\n    println(eat(5, 6, 10)) // Output: [11, 4]\n    println(eat(4, 8, 9))  // Output: [12, 1]\n    println(eat(1, 10, 10)) // Output: [11, 0]\n    println(eat(2, 11, 5))  // Output: [7, 0]\n}"}
{"task_id": "HumanEval_kotlin/160", "language": "kotlin", "completion": "fun doAlgebra(operator: List<String>, operand: List<Int>): Int {\n    if (operator.size != operand.size - 1) {\n        throw IllegalArgumentException(\"The length of the operator list must be equal to the length of the operand list minus one.\")\n    }\n\n    var result = operand[0]\n    for (i in operator.indices) {\n        when (operator[i]) {\n            \"+\" -> result += operand[i + 1]\n            \"-\" -> result -= operand[i + 1]\n            \"*\" -> result *= operand[i + 1]\n            \"//\" -> result = Math.floorDiv(result, operand[i + 1])\n            \"**\" -> result = Math.pow(result.toDouble(), operand[i + 1].toDouble()).toInt()\n            else -> throw IllegalArgumentException(\"Unknown operator: ${operator[i]}\")\n        }\n    }\n\n    return result\n}\n\n// Example usage:\nfun main() {\n    val operators = listOf('+', '*', '-')\n    val operands = listOf(2, 3, 4, 5)\n    println(doAlgebra(operators.map { it.toString() }, operands)) // Output: 9\n}"}
{"task_id": "HumanEval_kotlin/161", "language": "kotlin", "completion": "fun solve(s: String): String {\n    val letters = s.filter { it in 'a'..'z' || it in 'A'..'Z' }\n    \n    if (letters.isEmpty()) {\n        return s.reversed()\n    } else {\n        return s.map { \n            if (it in 'a'..'z') it.toUpperCase() \n            else if (it in 'A'..'Z') it.toLowerCase() \n            else it \n        }.joinToString(\"\")\n    }\n}\n\n// Examples\nprintln(solve(\"1234\")) // \"4321\"\nprintln(solve(\"ab\")) // \"AB\"\nprintln(solve(\"#a@C\")) // \"#A@c\""}
{"task_id": "HumanEval_kotlin/162", "language": "kotlin", "completion": "import java.security.MessageDigest\nimport java.security.NoSuchAlgorithmException\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return null\n\n    val md = MessageDigest.getInstance(\"MD5\")\n    val bytes = text.toByteArray()\n    val digest = md.digest(bytes)\n    \n    return digest.joinToString(\"\") { \"%02x\".format(it) }\n}\n\n// Example usage:\nfun main() {\n    println(stringToMd5(\"Hello world\")) // Output: 3e25960a79dbc69b674cd4ec67a72c62\n}"}
{"task_id": "HumanEval_kotlin/163", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    // Determine the start and end of the range\n    val start = if (a < b) a else b\n    val end = if (a > b) a else b\n    \n    // Create a list to hold the even numbers\n    val result = mutableListOf<Int>()\n    \n    // Iterate through the range and collect even numbers\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    \n    // Return the list sorted in ascending order\n    return result.sorted()\n}\n\n// Example usage:\nfun main() {\n    println(generateIntegers(2, 8)) // Output: [2, 4, 6, 8]\n    println(generateIntegers(8, 2)) // Output: [2, 4, 6, 8]\n    println(generateIntegers(10, 14)) // Output: []\n}"}

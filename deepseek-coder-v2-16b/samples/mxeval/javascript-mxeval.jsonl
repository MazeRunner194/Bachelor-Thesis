{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "function hasCloseElements(numbers, threshold) {\n    // Iterate through each pair of elements in the list\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n                return true; // Found a pair that satisfies the condition\n            }\n        }\n    }\n    return false; // No pairs satisfy the condition\n}\n\n// Test cases\nconsole.log(hasCloseElements([1.0, 2.0, 3.0], 0.5)); // False\nconsole.log(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)); // True"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "function separateParenGroups(parenstring) {\n    // Remove all spaces from the input string\n    parenstring = parenstring.replace(/\\s+/g, '');\n    \n    let result = [];\n    let stack = [];\n    let currentGroup = '';\n    \n    for (let char of parenstring) {\n        if (char === '(') {\n            // If we encounter an opening parenthesis, push it onto the stack\n            stack.push(char);\n            // Start a new group\n            if (currentGroup !== '') {\n                result.push(currentGroup);\n                currentGroup = '';\n            }\n        } else if (char === ')') {\n            // If we encounter a closing parenthesis, pop from the stack\n            if (stack.length > 0) {\n                stack.pop();\n            }\n            // Append to the current group\n            currentGroup += char;\n            // If the stack is empty after popping, it means this group is balanced\n            if (stack.length === 0 && currentGroup !== '') {\n                result.push(currentGroup);\n                currentGroup = '';\n            }\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(separateParenGroups('( ) (( )) (( )( ))')); // ['()', '(())', '(()())']"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "function truncateNumber(number) {\n  // Get the integer part of the number\n  const integerPart = Math.floor(number);\n  \n  // Subtract the integer part from the original number to get the decimal part\n  const decimalPart = number - integerPart;\n  \n  return decimalPart;\n}\n\n// Example usage:\nconsole.log(truncateNumber(3.5)); // Output: 0.5"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Test cases\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "function meanAbsoluteDeviation(numbers) {\n  if (numbers.length === 0) return 0; // Handle edge case for empty array\n\n  // Calculate the mean of the numbers\n  const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n\n  // Calculate the absolute differences from the mean\n  const absoluteDifferences = numbers.map(num => Math.abs(num - mean));\n\n  // Calculate the average of these absolute differences\n  const mad = absoluteDifferences.reduce((sum, diff) => sum + diff, 0) / numbers.length;\n\n  return mad;\n}\n\n// Example usage:\nconsole.log(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])); // Output: 1.0"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "function intersperse(numbers, delimeter) {\n  if (numbers.length === 0) {\n    return [];\n  }\n  \n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i > 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n  }\n  \n  return result;\n}\n\n// Test cases\nconsole.log(intersperse([], 4)); // []\nconsole.log(intersperse([1, 2, 3], 4)); // [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "function parseNestedParens(parenstring) {\n    // Split the input string by spaces to get individual groups\n    const groups = parenstring.split(' ');\n    \n    // Initialize an array to store the deepest levels of each group\n    const results = [];\n    \n    // Iterate over each group\n    for (let group of groups) {\n        let depth = 0; // To track the current nesting depth\n        let maxDepth = 0; // To track the maximum nesting depth in this group\n        \n        // Iterate through each character in the group\n        for (let char of group) {\n            if (char === '(') {\n                depth++; // Increase depth when encountering an opening parenthesis\n                if (depth > maxDepth) {\n                    maxDepth = depth; // Update maxDepth if current depth is greater\n                }\n            } else if (char === ')') {\n                depth--; // Decrease depth when encountering a closing parenthesis\n            }\n        }\n        \n        results.push(maxDepth); // Add the maximum depth of this group to the results array\n    }\n    \n    return results;\n}\n\n// Example usage:\nconsole.log(parseNestedParens('(()()) ((())) () ((())()())')); // [2, 3, 1, 3]"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "function filterBySubstring(strings, substring) {\n  // Initialize an empty array to store the filtered strings\n  let filteredStrings = [];\n  \n  // Iterate over each string in the input list\n  for (let str of strings) {\n    // Check if the current string contains the specified substring\n    if (str.includes(substring)) {\n      // If it does, add it to the filteredStrings array\n      filteredStrings.push(str);\n    }\n  }\n  \n  // Return the array of filtered strings\n  return filteredStrings;\n}\n\n// Test cases\nconsole.log(filterBySubstring([], 'a')); // []\nconsole.log(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')); // ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "function sumProduct(numbers) {\n    // Initialize sum and product\n    let sum = 0;\n    let product = 1;\n\n    // Iterate through the list to calculate sum and product\n    for (let number of numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    // Return the result as a tuple (array with two elements)\n    return [sum, product];\n}\n\n// Test cases\nconsole.log(sumProduct([]));       // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "function rollingMax(numbers) {\n    // Initialize an empty array to store the rolling maximum values\n    let result = [];\n    \n    // Check if the input array is empty\n    if (numbers.length === 0) {\n        return result;\n    }\n    \n    // Initialize the first element as the initial maximum value\n    let currentMax = numbers[0];\n    \n    // Iterate through each number in the list\n    for (let i = 0; i < numbers.length; i++) {\n        // Update the current maximum if the current number is greater than the current max\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n        }\n        \n        // Add the current maximum to the result list\n        result.push(currentMax);\n    }\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2])); // Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "function makePalindrome(string) {\n    if (string === '') return '';\n\n    // Helper function to check if a substring is a palindrome\n    function isPalindrome(str) {\n        return str === str.split('').reverse().join('');\n    }\n\n    let longestPalindromicSuffix = '';\n    for (let i = 0; i < string.length; i++) {\n        if (isPalindrome(string.substring(i))) {\n            longestPalindromicSuffix = string.substring(i);\n        }\n    }\n\n    // The prefix that is not part of the palindromic suffix\n    let prefix = string.slice(0, -longestPalindromicSuffix.length || undefined);\n    // Reverse the prefix and append it to the end of the string\n    return string + prefix.split('').reverse().join('');\n}\n\n// Test cases\nconsole.log(makePalindrome('')); // ''\nconsole.log(makePalindrome('cat')); // 'catac'\nconsole.log(makePalindrome('cata')); // 'catac'"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "function stringXor(a, b) {\n    // Ensure both strings are of equal length by padding with leading zeros if necessary\n    while (a.length < b.length) a = '0' + a;\n    while (b.length < a.length) b = '0' + b;\n\n    let result = '';\n    \n    // Iterate through each character of the strings and perform XOR operation\n    for (let i = 0; i < a.length; i++) {\n        // Perform XOR on each pair of bits ('1' XOR '1' => '0', '0' XOR '0' => '0', '1' XOR '0' => '1', '0' XOR '1' => '1')\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(stringXor('010', '110')); // Output: '100'"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) {\n        return \"none\";\n    }\n    \n    let longestString = strings[0];\n    \n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    \n    return longestString;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // Ensure that both numbers are positive integers\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    // Use the Euclidean algorithm with modulo operation for efficiency\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n}\n\n// Test cases\nconsole.log(greatestCommonDivisor(3, 5)); // Output: 1\nconsole.log(greatestCommonDivisor(25, 15)); // Output: 5"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "function allPrefixes(string) {\n  let prefixes = [];\n  for (let i = 1; i <= string.length; i++) {\n    prefixes.push(string.substring(0, i));\n  }\n  return prefixes;\n}\n\n// Example usage:\nconsole.log(allPrefixes('abc')); // ['a', 'ab', 'abc']"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "function stringSequence(n) {\n    let numbers = [];\n    for (let i = 0; i <= n; i++) {\n        numbers.push(i);\n    }\n    return numbers.join(' ');\n}\n\n// Test cases\nconsole.log(stringSequence(0)); // '0'\nconsole.log(stringSequence(5)); // '0 1 2 3 4 5'"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "function countDistinctCharacters(string) {\n    // Convert the string to lowercase to handle case insensitivity\n    const lowerCaseString = string.toLowerCase();\n    \n    // Create a set to store unique characters\n    const charSet = new Set(lowerCaseString);\n    \n    // Return the number of distinct characters\n    return charSet.size;\n}\n\n// Test cases\nconsole.log(countDistinctCharacters('xyzXYZ')); // Output: 3\nconsole.log(countDistinctCharacters('Jerry')); // Output: 4"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "function parseMusic(musicstring) {\n    // Split the input string by spaces to get individual notes\n    const notes = musicstring.split(' ');\n    \n    // Define a mapping from note symbols to their beat values\n    const noteMap = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n    \n    // Map each note to its corresponding beat value using the map\n    const beats = notes.map(note => noteMap[note]);\n    \n    return beats;\n}\n\n// Example usage:\nconsole.log(parseMusic('o o| .| o| o| .| .| .| .| o o')); // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "function howManyTimes(string, substring) {\n    if (substring === '') return 0; // If the substring is empty, it can't be found\n    \n    let count = 0;\n    let index = 0;\n    \n    while ((index = string.indexOf(substring, index)) !== -1) {\n        count++;\n        index += substring.length; // Move the index to check for overlapping occurrences\n    }\n    \n    return count;\n}\n\n// Test cases\nconsole.log(howManyTimes('', 'a')); // 0\nconsole.log(howManyTimes('aaa', 'a')); // 3\nconsole.log(howManyTimes('aaaa', 'aa')); // 3"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Define a mapping from number words to their corresponding numerical values\n    const numMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    // Split the input string into an array of words\n    const numArray = numbers.split(' ');\n\n    // Map each word to its corresponding numerical value and sort based on these values\n    numArray.sort((a, b) => numMap[a] - numMap[b]);\n\n    // Join the sorted array back into a space-delimited string\n    return numArray.join(' ');\n}\n\n// Example usage:\nconsole.log(sortNumbers('three one five')); // Output: 'one three five'"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "function findClosestElements(numbers) {\n    // Initialize variables to store the minimum difference and the pair of closest elements\n    let minDiff = Infinity;\n    let closestPair = [];\n\n    // Iterate through all pairs of numbers\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            // Calculate the absolute difference between the current pair\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\n            // Update the minimum difference and the closest pair if a smaller difference is found\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = [Math.min(numbers[i], numbers[j]), Math.max(numbers[i], numbers[j])];\n            }\n        }\n    }\n\n    // Return the pair of closest elements\n    return closestPair;\n}\n\n// Test cases\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Output: [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Output: [2.0, 2.0]"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two elements.\");\n    }\n\n    // Find the minimum and maximum values in the list\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    // Apply the rescaling formula to each number in the list\n    return numbers.map(num => (num - min) / (max - min));\n}\n\n// Example usage:\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "function filterIntegers(values) {\n    return values.filter(value => Number.isInteger(value));\n}\n\n// Test cases\nconsole.log(filterIntegers(['a', 3.14, 5])); // [5]\nconsole.log(filterIntegers([1, 2, 3, 'abc', {}, []])); // [1, 2, 3]"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "/**\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n */\nfunction strlen(string) {\n    return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "function largestDivisor(n) {\n    // Start with the smallest possible divisor, which is 2\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return i; // Return the first divisor found that divides n evenly\n        }\n    }\n    // If no divisors are found, return null or a specific value indicating an error\n    return null; // Assuming you should always find at least one divisor for any positive integer greater than 1\n}\n\n// Example usage:\nconsole.log(largestDivisor(15)); // Output: 5"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "function factorize(n) {\n    const factors = [];\n    \n    // Start with the smallest prime number, which is 2\n    for (let divisor = 2; n > 1; divisor++) {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        }\n    }\n    \n    return factors;\n}\n\n// Test cases\nconsole.log(factorize(8));   // [2, 2, 2]\nconsole.log(factorize(25));  // [5, 5]\nconsole.log(factorize(70));  // [2, 5, 7]"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "function removeDuplicates(numbers) {\n    // Create an empty object to store the count of each number\n    let counts = {};\n    \n    // Iterate through the numbers and count occurrences\n    for (let num of numbers) {\n        if (counts[num]) {\n            counts[num]++;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    \n    // Create a new array to store unique elements\n    let result = [];\n    \n    // Iterate through the numbers again and add to result if count is 1\n    for (let num of numbers) {\n        if (counts[num] === 1) {\n            result.push(num);\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(removeDuplicates([1, 2, 3, 2, 4])); // Output: [1, 3, 4]"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "function flipCase(string) {\n  // Split the string into an array of characters\n  let flippedArray = [];\n  \n  for (let char of string) {\n    if (char === char.toLowerCase()) {\n      // If the character is lowercase, convert it to uppercase\n      flippedArray.push(char.toUpperCase());\n    } else {\n      // Otherwise, convert it to lowercase\n      flippedArray.push(char.toLowerCase());\n    }\n  }\n  \n  // Join the array back into a string and return it\n  return flippedArray.join('');\n}\n\n// Example usage:\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "function concatenate(strings) {\n  // Use the join method to concatenate the array elements into a single string\n  return strings.join('');\n}\n\n// Test cases\nconsole.log(concatenate([])); // ''\nconsole.log(concatenate(['a', 'b', 'c'])); // 'abc'"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "function filterByPrefix(strings, prefix) {\n    // Use the filter method to include only those strings that start with the specified prefix\n    return strings.filter(string => string.startsWith(prefix));\n}\n\n// Test cases\nconsole.log(filterByPrefix([], 'a')); // []\nconsole.log(filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')); // ['abc', 'array']"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(num => num > 0);\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n    // Check if n is less than 2, then it is not a prime number\n    if (n <= 1) return false;\n    \n    // Only need to check up to the square root of n for divisors\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false; // If n is divisible by any number other than 1 and itself, it's not prime\n    }\n    \n    // If no divisors were found, n is a prime number\n    return true;\n}\n\n// Test cases\nconsole.log(isPrime(6)); // False\nconsole.log(isPrime(101)); // True\nconsole.log(isPrime(11)); // True\nconsole.log(isPrime(13441)); // True\nconsole.log(isPrime(61)); // True\nconsole.log(isPrime(4)); // False\nconsole.log(isPrime(1)); // False"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "function sortThird(l) {\n    // Step 1: Identify the elements at indices divisible by three\n    let indices = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            indices.push(l[i]);\n        }\n    }\n    \n    // Step 2: Sort the identified elements\n    indices.sort((a, b) => a - b);\n    \n    // Step 3: Replace the original elements at these indices with sorted ones\n    let index = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 3 === 0) {\n            l[i] = indices[index];\n            index++;\n        }\n    }\n    \n    // Step 4: Return the modified list\n    return l;\n}\n\n// Test cases\nconsole.log(sortThird([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2])); // [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "function unique(l) {\n    // Convert the list to a Set to remove duplicates\n    let uniqueSet = new Set(l);\n    \n    // Convert the set back to an array\n    let uniqueArray = Array.from(uniqueSet);\n    \n    // Sort the array\n    uniqueArray.sort((a, b) => a - b);\n    \n    // Return the sorted array\n    return uniqueArray;\n}\n\n// Example usage:\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "function maxElement(l) {\n  if (l.length === 0) return undefined; // Handle empty list case\n  return Math.max(...l);\n}\n\n// Test cases\nconsole.log(maxElement([1, 2, 3])); // 3\nconsole.log(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // 123"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "function fizzBuzz(n) {\n    let count = 0;\n    \n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0) && containsSeven(i)) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\nfunction containsSeven(num) {\n    while (num > 0) {\n        if (num % 10 === 7) {\n            return true;\n        }\n        num = Math.floor(num / 10);\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(fizzBuzz(50)); // Output: 0\nconsole.log(fizzBuzz(78)); // Output: 2\nconsole.log(fizzBuzz(79)); // Output: 3"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "function sortEven(l) {\n    // Extract the values at even indices\n    let evens = l.filter((_, index) => index % 2 === 0);\n    \n    // Sort the extracted even-indexed values\n    evens.sort((a, b) => a - b);\n    \n    // Create a new list where the sorted even-indexed values are placed back into their original positions\n    let result = [];\n    let evenIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            result[i] = evens[evenIndex++];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    \n    return result;\n}\n\n// Test cases\nconsole.log(sortEven([1, 2, 3])); // [1, 2, 3]\nconsole.log(sortEven([5, 6, 3, 4])); // [3, 6, 5, 4]"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let fibs = [1, 2];\n  let count = 2; // Start from the third Fibonacci number since we already have the first two (1 and 2)\n\n  while (count < n) {\n    let nextFib = fibs[fibs.length - 1] + fibs[fibs.length - 2];\n    if (isPrime(nextFib)) {\n      count++;\n      fibs.push(nextFib);\n    } else {\n      fibs.push(nextFib); // Even though it's not prime, we still need to generate the sequence\n    }\n  }\n\n  return fibs[n - 1];\n}\n\n// Test cases\nconsole.log(primeFib(1)); // 2\nconsole.log(primeFib(2)); // 3\nconsole.log(primeFib(3)); // 5\nconsole.log(primeFib(4)); // 13\nconsole.log(primeFib(5)); // 89"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "function triplesSumToZero(nums) {\n    // Sort the array first\n    nums.sort((a, b) => a - b);\n    \n    // Iterate through the list to fix one element at a time\n    for (let i = 0; i < nums.length - 2; i++) {\n        // To avoid duplicates, skip if the current element is same as the previous one\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        \n        // Initialize two pointers for the remaining elements\n        let left = i + 1;\n        let right = nums.length - 1;\n        \n        while (left < right) {\n            const sum = nums[i] + nums[left] + nums[right];\n            \n            if (sum === 0) {\n                return true; // Found three elements that sum to zero\n            } else if (sum < 0) {\n                left++; // Move the left pointer to increase the sum\n            } else {\n                right--; // Move the right pointer to decrease the sum\n            }\n        }\n    }\n    \n    return false; // No such triplet found\n}\n\n// Test cases\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // False\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // True\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // False\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triplesSumToZero([1])); // False"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "function carRaceCollision(n) {\n    // Calculate the number of collisions using the combination formula\n    let collisions = (n * (2 * n - 1)) / 2;\n    return collisions;\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "function incrList(l) {\n    return l.map(element => element + 1);\n}"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    // Iterate through each element in the list\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            // Check if the sum of the pair is zero\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    // If no such pair is found, return false\n    return false;\n}\n\n// Test cases\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "function changeBase(x, base) {\n    if (base < 2 || base > 10) {\n        throw new Error(\"Base must be between 2 and 10\");\n    }\n    \n    let result = '';\n    while (x > 0) {\n        let remainder = x % base;\n        // Convert the remainder to its string representation since it's a digit in the given base.\n        result = remainder + result;\n        x = Math.floor(x / base);\n    }\n    \n    return result || '0'; // If x is 0, return '0'.\n}\n\n// Test cases\nconsole.log(changeBase(8, 3)); // Output: '22'\nconsole.log(changeBase(8, 2)); // Output: '1000'\nconsole.log(changeBase(7, 2)); // Output: '111'"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "function triangleArea(a, h) {\n    return 0.5 * a * h;\n}\n\n// Example usage:\nconsole.log(triangleArea(5, 3)); // Output: 7.5"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "function fib4(n) {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n    \n    // Initialize an array to store the sequence values\n    let fib4Sequence = [0, 0, 2, 0];\n    \n    // Compute the sequence iteratively up to n\n    for (let i = 4; i <= n; i++) {\n        fib4Sequence[i] = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4];\n    }\n    \n    // Return the n-th element\n    return fib4Sequence[n];\n}\n\n// Test cases\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "function median(l) {\n  // Step 1: Sort the list in ascending order\n  l.sort((a, b) => a - b);\n\n  const len = l.length;\n  // Step 2: Find the middle element or average the two central elements\n  if (len % 2 === 0) {\n    // If even number of elements, average the two central ones\n    return (l[len / 2 - 1] + l[len / 2]) / 2;\n  } else {\n    // If odd number of elements, take the middle one\n    return l[(len - 1) / 2];\n  }\n}\n\n// Test cases\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "function isPalindrome(text) {\n    // Remove non-alphanumeric characters and convert to lowercase\n    const cleanedText = text.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n    \n    // Check if the cleaned text is a palindrome\n    return cleanedText === cleanedText.split('').reverse().join('');\n}\n\n// Test cases\nconsole.log(isPalindrome(''));         // True\nconsole.log(isPalindrome('aba'));      // True\nconsole.log(isPalindrome('aaaaa'));    // True\nconsole.log(isPalindrome('zbcd'));     // False"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "function modp(n, p) {\n    // Handle the case where n is 0\n    if (n === 0) return 1;\n\n    // Initialize result to 1 (since anything to the power of 0 is 1)\n    let result = 1;\n    let base = 2;\n\n    // Use exponentiation by squaring\n    while (n > 0) {\n        if (n % 2 === 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n / 2);\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(modp(3, 5)); // Expected output: 3\nconsole.log(modp(1101, 101)); // Expected output: 2\nconsole.log(modp(0, 101)); // Expected output: 1\nconsole.log(modp(3, 11)); // Expected output: 8\nconsole.log(modp(100, 101)); // Expected output: 1"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "function removeVowels(text) {\n    // Define a regular expression to match all vowels (a, e, i, o, u) both in lowercase and uppercase\n    const vowels = /[aeiouAEIOU]/g;\n    \n    // Replace all matched vowels with an empty string\n    return text.replace(vowels, '');\n}\n\n// Test cases\nconsole.log(removeVowels('')); // ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // 'bcdf'\nconsole.log(removeVowels('aaaaa')); // ''\nconsole.log(removeVowels('aaBAA')); // 'B'\nconsole.log(removeVowels('zbcd')); // 'zbcd'"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    return l.every(num => num < t);\n}\n\n// Test cases\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\nconsole.log(belowThreshold([1, 20, 4, 10], 5)); // False"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "function add(x, y) {\n    return x + y;\n}\n\n// Test cases\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    // Helper function to sort a string and return the sorted version\n    const sortString = (str) => str.split('').sort().join('');\n    \n    // Sort both strings\n    const sortedS0 = sortString(s0);\n    const sortedS1 = sortString(s1);\n    \n    // Compare the sorted strings\n    return sortedS0 === sortedS1;\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 0) {\n        return 0; // Return 0 for non-positive inputs\n    } else if (n === 1 || n === 2) {\n        return 1; // The first two Fibonacci numbers are both 1\n    } else {\n        let a = 1, b = 1;\n        for (let i = 3; i <= n; i++) {\n            let c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    let stack = [];\n    \n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === '>') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    \n    return stack.length === 0;\n}\n\n// Test cases\nconsole.log(correctBracketing(\"<\")); // False\nconsole.log(correctBracketing(\"<>\")); // True\nconsole.log(correctBracketing(\"<<><>>\")); // True\nconsole.log(correctBracketing(\"><<>\")); // False"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "function monotonic(l) {\n    let increasing = true;\n    let decreasing = true;\n\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\n// Test cases\nconsole.log(monotonic([1, 2, 4, 20])); // True\nconsole.log(monotonic([1, 20, 4, 10])); // False\nconsole.log(monotonic([4, 1, 0, -10])); // True"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "function common(l1, l2) {\n    // Convert lists to sets to remove duplicates\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    \n    // Find the intersection of the two sets\n    const intersection = [...set1].filter(x => set2.has(x));\n    \n    // Sort the result before returning\n    return intersection.sort((a, b) => a - b);\n}\n\n// Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    // Handle the smallest prime factor case\n    while (n % 2 === 0) {\n        n = Math.floor(n / 2);\n    }\n    \n    // Check for odd factors from 3 onwards\n    let maxPrime = 1; // To handle the case where n remains 1 after division\n    for (let i = 3; i * i <= n; i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n = Math.floor(n / i);\n        }\n    }\n    \n    // If n is still greater than 1, then it must be a prime number itself\n    if (n > 1) {\n        maxPrime = n;\n    }\n    \n    return maxPrime;\n}\n\n// Test cases\nconsole.log(largestPrimeFactor(13195)); // Output: 29\nconsole.log(largestPrimeFactor(2048));  // Output: 2"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "function sumToN(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n// Test cases\nconsole.log(sumToN(30)); // 465\nconsole.log(sumToN(100)); // 5050\nconsole.log(sumToN(5)); // 15\nconsole.log(sumToN(10)); // 55\nconsole.log(sumToN(1)); // 1"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "function correctBracketing(brackets) {\n    // Initialize an empty stack to keep track of opening brackets\n    let stack = [];\n\n    // Traverse each character in the input string\n    for (let char of brackets) {\n        if (char === '(') {\n            // Push opening bracket onto the stack\n            stack.push(char);\n        } else if (char === ')') {\n            // If stack is empty or top element is not an opening bracket, return false\n            if (stack.length === 0) {\n                return false;\n            }\n            // Pop the last opening bracket from the stack\n            stack.pop();\n        }\n    }\n\n    // If stack is empty, all opening brackets have corresponding closing brackets\n    return stack.length === 0;\n}\n\n// Test cases\nconsole.log(correctBracketing(\"(\"));       // False\nconsole.log(correctBracketing(\"()\"));      // True\nconsole.log(correctBracketing(\"(()())\"));  // True\nconsole.log(correctBracketing(\")(()\"));    // False"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "function derivative(xs) {\n    // Initialize an empty array to store the coefficients of the derived polynomial\n    let result = [];\n    \n    // Iterate through the coefficients, starting from the second coefficient (index 1)\n    for (let i = 1; i < xs.length; i++) {\n        // Multiply each coefficient by its index and add it to the result array\n        result.push(xs[i] * i);\n    }\n    \n    return result;\n}\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // [2, 6]"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "function fibfib(n) {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Create an array to store the computed values\n    let dp = new Array(n + 1).fill(0);\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n\n    // Compute the sequence using dynamic programming\n    for (let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    return dp[n];\n}\n\n// Test cases\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "function vowelsCount(s) {\n    // Define the set of vowels we are interested in\n    const vowels = 'aeiouAEIOU';\n    \n    // Initialize a counter for vowels\n    let count = 0;\n    \n    // Loop through each character in the string\n    for (let i = 0; i < s.length; i++) {\n        // Check if the current character is a vowel\n        if (vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    \n    // Return the total count of vowels found in the string\n    return count;\n}\n\n// Example usage:\nconsole.log(vowelsCount(\"abcde\")); // Output: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Output: 3"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "function circularShift(x, shift) {\n    // Convert the integer to a string\n    let str = x.toString();\n    \n    // Get the number of digits\n    let length = str.length;\n    \n    // Adjust the shift if it is greater than the number of digits\n    if (shift > length) {\n        shift = length;\n    }\n    \n    // Perform the circular shift\n    let shiftedStr = str.slice(-shift) + str.slice(0, -shift);\n    \n    return shiftedStr;\n}\n\n// Test cases\nconsole.log(circularShift(12, 1)); // \"21\"\nconsole.log(circularShift(12, 2)); // \"12\""}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "function digitSum(s) {\n    // Initialize the sum to 0\n    let sum = 0;\n    \n    // Iterate through each character in the string\n    for (let char of s) {\n        // Check if the character is an uppercase letter\n        if (char >= 'A' && char <= 'Z') {\n            // Add the ASCII code of the uppercase letter to the sum\n            sum += char.charCodeAt(0);\n        }\n    }\n    \n    // Return the final sum\n    return sum;\n}\n\n// Examples\nconsole.log(digitSum(\"\")); // 0\nconsole.log(digitSum(\"abAB\")); // 131\nconsole.log(digitSum(\"abcCd\")); // 67\nconsole.log(digitSum(\"helloE\")); // 69\nconsole.log(digitSum(\"woArBld\")); // 131\nconsole.log(digitSum(\"aAaaaXa\")); // 153"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "function fruitDistribution(s, n) {\n    // Use a regular expression to find all numbers in the string\n    const matches = s.match(/\\d+/g);\n    \n    // Convert the extracted strings to integers\n    let apples = parseInt(matches[0], 10);\n    let oranges = parseInt(matches[1], 10);\n    \n    // Calculate and return the number of mango fruits\n    return n - (apples + oranges);\n}\n\n// Test cases\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); // -> 8\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3)); // -> 2\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); // -> 95\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120)); // -> 19"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "function pluck(arr) {\n    // Initialize variables to keep track of the smallest even value and its index\n    let smallestEvenValue = null;\n    let smallestIndex = -1;\n\n    // Iterate through the array\n    for (let i = 0; i < arr.length; i++) {\n        const node = arr[i];\n        \n        // Check if the current node is even and smaller than the current smallestEvenValue\n        if (node % 2 === 0) {\n            if (smallestEvenValue === null || node < smallestEvenValue) {\n                smallestEvenValue = node;\n                smallestIndex = i;\n            }\n        }\n    }\n\n    // If no even values are found, return an empty array\n    if (smallestEvenValue === null) {\n        return [];\n    }\n\n    // Return the result in the required format\n    return [smallestEvenValue, smallestIndex];\n}\n\n// Example usage:\nconsole.log(pluck([4, 2, 3])); // Output: [2, 1]\nconsole.log(pluck([1, 2, 3])); // Output: [2, 1]\nconsole.log(pluck([]));        // Output: []\nconsole.log(pluck([5, 0, 3, 0, 4, 2])); // Output: [0, 1]"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "function search(lst) {\n    // Step 1: Count the frequency of each integer in the list\n    const frequencyMap = {};\n    for (const num of lst) {\n        if (!frequencyMap[num]) {\n            frequencyMap[num] = 1;\n        } else {\n            frequencyMap[num]++;\n        }\n    }\n\n    // Step 2: Find the greatest integer that satisfies the condition\n    let result = -1;\n    for (const num in frequencyMap) {\n        const freq = frequencyMap[num];\n        if (freq >= parseInt(num)) {\n            result = Math.max(result, parseInt(num));\n        }\n    }\n\n    // Step 3: Return the result\n    return result;\n}\n\n// Examples\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "function strangeSortList(lst) {\n    if (lst.length === 0) return [];\n    \n    // Sort the list in ascending order\n    lst.sort((a, b) => a - b);\n    \n    let result = [];\n    let left = 0;\n    let right = lst.length - 1;\n    \n    // Alternate between picking from the start and end of the sorted list\n    while (left <= right) {\n        if (left === right) {\n            result.push(lst[left]);\n        } else {\n            result.push(lst[left]);\n            result.push(lst[right]);\n        }\n        left++;\n        right--;\n    }\n    \n    return result;\n}\n\n// Examples\nconsole.log(strangeSortList([1, 2, 3, 4])); // [1, 4, 2, 3]\nconsole.log(strangeSortList([5, 5, 5, 5])); // [5, 5, 5, 5]\nconsole.log(strangeSortList([])); // []"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n    \n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Round the result to 2 decimal points\n    return parseFloat(area.toFixed(2));\n}\n\n// Example usage:\nconsole.log(triangleArea(3, 4, 5)); // Output: 6.00\nconsole.log(triangleArea(1, 2, 10)); // Output: -1"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Helper function to check if a list is palindrome (balanced)\n    function isPalindrome(list) {\n        for (let i = 0; i < list.length / 2; i++) {\n            if (list[i] !== list[list.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Calculate the sum of elements in the list\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Check if the list is palindrome and if the sum is less than or equal to w\n    return isPalindrome(q) && sum <= w;\n}\n\n// Test cases\nconsole.log(willItFly([1, 2], 5)); // False\nconsole.log(willItFly([3, 2, 3], 1)); // False\nconsole.log(willItFly([3, 2, 3], 9)); // True\nconsole.log(willItFly([3], 5)); // True"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "function smallestChange(arr) {\n    let n = arr.length;\n    let changes = 0;\n    \n    // Initialize two pointers, one at the start and one at the end of the array\n    for (let i = 0, j = n - 1; i < j;) {\n        if (arr[i] !== arr[j]) {\n            // If the elements are not equal, increment the changes counter\n            // We can change either arr[i] or arr[j] to make them equal\n            if (arr[i + 1] === arr[j]) {\n                i++; // Change arr[i] to match arr[j]\n            } else if (arr[i] === arr[j - 1]) {\n                j--; // Change arr[j] to match arr[i]\n            } else {\n                // If both neighbors are not equal, we can change either one\n                i++;\n                j--;\n            }\n            changes++;\n        } else {\n            // If they are already equal, move the pointers inward\n            i++;\n            j--;\n        }\n    }\n    \n    return changes;\n}\n\n// Test cases\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6])); // Output: 4\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));    // Output: 1\nconsole.log(smallestChange([1, 2, 3, 2, 1]));          // Output: 0"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "function totalMatch(lst1, lst2) {\n  // Helper function to calculate the total number of characters in a list of strings\n  const totalChars = (list) => list.reduce((total, str) => total + str.length, 0);\n  \n  // Calculate the total number of characters for each list\n  const total1 = totalChars(lst1);\n  const total2 = totalChars(lst2);\n  \n  // Compare the totals and return the appropriate list\n  if (total1 < total2) {\n    return lst1;\n  } else if (total2 < total1) {\n    return lst2;\n  } else {\n    return lst1; // If they are equal, return the first list\n  }\n}\n\n// Test cases\nconsole.log(totalMatch([], [])); // \u279e []\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi'])); // \u279e ['hI', 'Hi']\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])); // \u279e ['hi', 'admin']\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])); // \u279e ['hI', 'hi', 'hi']\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5'])); // \u279e ['4']"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    // Helper function to generate all prime numbers less than 100 using Sieve of Eratosthenes\n    function generatePrimes() {\n        const primes = [];\n        const sieve = Array(100).fill(true);\n        for (let p = 2; p < 100; p++) {\n            if (sieve[p]) {\n                primes.push(p);\n                for (let i = p * p; i < 100; i += p) {\n                    sieve[i] = false;\n                }\n            }\n        }\n        return primes;\n    }\n\n    // Generate all prime numbers less than 100\n    const primes = generatePrimes();\n\n    // Check all combinations of three primes to see if their product equals 'a'\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i; j < primes.length; j++) {\n            for (let k = j; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // If no combination of three primes multiplies to 'a', return false\n    return false;\n}\n\n// Example usage:\nconsole.log(isMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\nconsole.log(isMultiplyPrime(60)); // False, no combination of primes less than 100 multiplies to 60"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "function isSimplePower(x, n) {\n  // If x is less than 1, it cannot be a simple power of any number greater than or equal to 2\n  if (x < 1) return false;\n\n  // Find the logarithm base n of x and check if it's an integer\n  const logResult = Math.log(x) / Math.log(n);\n  \n  // Check if the result is close enough to an integer (within a small tolerance for floating-point comparison)\n  return Math.abs(logResult - Math.round(logResult)) < 1e-9;\n}\n\n// Test cases\nconsole.log(isSimplePower(1, 4)); // true\nconsole.log(isSimplePower(2, 2)); // true\nconsole.log(isSimplePower(8, 2)); // true\nconsole.log(isSimplePower(3, 2)); // false\nconsole.log(isSimplePower(3, 1)); // false\nconsole.log(isSimplePower(5, 3)); // false"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "function iscube(a) {\n    // Calculate the cube root of the absolute value of 'a'\n    let cubeRoot = Math.cbrt(Math.abs(a));\n    \n    // Check if the cube root, when rounded to the nearest integer, \n    // gives back the original number when cubed.\n    return Math.round(cubeRoot) ** 3 === Math.abs(a);\n}\n\n// Examples:\nconsole.log(iscube(1));   // True\nconsole.log(iscube(2));   // False\nconsole.log(iscube(-1));  // True\nconsole.log(iscube(64));  // True\nconsole.log(iscube(0));   // True\nconsole.log(iscube(180)); // False"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "function hexKey(num) {\n    // Define the list of hexadecimal digits that correspond to prime numbers\n    const primesInHex = ['2', '3', '5', '7', 'B', 'D'];\n    \n    // Initialize a counter for prime hex digits\n    let count = 0;\n    \n    // Iterate through each character in the input string\n    for (let char of num) {\n        // Check if the current character is one of the hex digits corresponding to primes\n        if (primesInHex.includes(char)) {\n            count++;\n        }\n    }\n    \n    // Return the count of prime hex digits\n    return count;\n}\n\n// Examples\nconsole.log(hexKey(\"AB\")); // Output: 1\nconsole.log(hexKey(\"1077E\")); // Output: 2\nconsole.log(hexKey(\"ABED1A33\")); // Output: 4\nconsole.log(hexKey(\"123456789ABCDEF0\")); // Output: 6\nconsole.log(hexKey(\"2020\")); // Output: 2"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n  // Convert the decimal number to a binary string\n  let binaryString = decimal.toString(2);\n  \n  // Add 'db' at the beginning and end of the binary string\n  return `db${binaryString}db`;\n}\n\n// Examples\nconsole.log(decimalToBinary(15));   // returns \"db1111db\"\nconsole.log(decimalToBinary(32));   // returns \"db100000db\""}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "function isHappy(s) {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n    \n    // Loop through the string to check every 3 consecutive letters\n    for (let i = 0; i <= s.length - 3; i++) {\n        const subStr = s.substring(i, i + 3);\n        \n        // Check if all characters in the substring are distinct\n        if (new Set(subStr).size !== 3) {\n            return false;\n        }\n    }\n    \n    // If both conditions are met, return true\n    return true;\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        if (gpa > 3.7) return 'A';\n        if (gpa > 3.3) return 'A-';\n        if (gpa > 3.0) return 'B+';\n        if (gpa > 2.7) return 'B';\n        if (gpa > 2.3) return 'B-';\n        if (gpa > 2.0) return 'C+';\n        if (gpa > 1.7) return 'C';\n        if (gpa > 1.3) return 'C-';\n        if (gpa > 1.0) return 'D+';\n        if (gpa > 0.7) return 'D';\n        if (gpa > 0.0) return 'D-';\n        return 'E';\n    });\n}\n\n// Example usage:\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "function isPrime(num) {\n  // Check if num is less than 2 (not a prime number)\n  if (num <= 1) return false;\n  // Only need to check up to the square root of num for factors\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) return false; // Found a factor, not prime\n  }\n  return true; // No factors found, it's a prime number\n}\n\nfunction primeLength(string) {\n  const length = string.length;\n  return isPrime(length);\n}\n\n// Examples\nconsole.log(primeLength('Hello'));    // True\nconsole.log(primeLength('abcdcba'));  // True\nconsole.log(primeLength('kittens'));  // True\nconsole.log(primeLength('orange'));   // False"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "function startsOneEnds(n) {\n    if (n === 1) {\n        return 1; // Special case for single digit numbers\n    }\n    let countStartsWith1 = Math.pow(9, n - 1);\n    let countEndsWith1 = Math.pow(9, n - 1);\n    let overlap = Math.pow(9, n - 2);\n    return 2 * countStartsWith1 - overlap;\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "function solve(n) {\n    // Step 1: Convert the integer to a string and then split it into individual digits\n    let digits = n.toString().split('');\n    \n    // Step 2: Sum all the digits together\n    let sumOfDigits = digits.reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    \n    // Step 3: Convert the sum to binary representation\n    let binaryRepresentation = sumOfDigits.toString(2);\n    \n    // Step 4: Return the binary representation as a string\n    return binaryRepresentation;\n}\n\n// Example usage:\nconsole.log(solve(1000)); // Output: \"1\"\nconsole.log(solve(150));  // Output: \"110\"\nconsole.log(solve(147));  // Output: \"1100\""}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "function add(lst) {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) { // Start from index 1 and increment by 2 to skip odd indices\n        if (lst[i] % 2 === 0) { // Check if the element at the current index is even\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n// Examples\nconsole.log(add([4, 2, 6, 7])); // Output: 2"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "function antiShuffle(s) {\n    // Split the input string into an array of characters including spaces\n    let result = [];\n    \n    // Use a regular expression to match words and spaces separately\n    let parts = s.split(/(\\s+)/);\n    \n    for (let part of parts) {\n        if (/^\\s+$/.test(part)) {\n            // If the part is a space, add it directly to the result array\n            result.push(part);\n        } else {\n            // Otherwise, sort the characters in the word by ASCII value\n            let sortedPart = part.split('').sort().join('');\n            result.push(sortedPart);\n        }\n    }\n    \n    // Join the array back into a string and return it\n    return result.join('');\n}\n\n// Test cases\nconsole.log(antiShuffle('Hi')); // 'Hi'\nconsole.log(antiShuffle('hello')); // 'ehllo'\nconsole.log(antiShuffle('Hello World!!!')); // 'Hello !!!Wdlor'"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "function getRow(lst, x) {\n    // Initialize an empty array to store the coordinates\n    let coordinates = [];\n\n    // Iterate through each row with its index (row)\n    for (let rowIndex = 0; rowIndex < lst.length; rowIndex++) {\n        // Iterate through each element in the current row with its column index\n        for (let colIndex = 0; colIndex < lst[rowIndex].length; colIndex++) {\n            // If the current element matches x, add the coordinate to the list\n            if (lst[rowIndex][colIndex] === x) {\n                coordinates.push([rowIndex, colIndex]);\n            }\n        }\n    }\n\n    // Sort the coordinates first by rows in ascending order, then by columns in descending order\n    coordinates.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // Descending order for columns within the same row\n        } else {\n            return a[0] - b[0]; // Ascending order for rows\n        }\n    });\n\n    return coordinates;\n}\n\n// Test cases\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nconsole.log(getRow([], 1)); // []\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // [(2, 2)]"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "function sortArray(array) {\n    if (array.length === 0) return [];\n    if (array.length === 1) return [...array];\n\n    const first = array[0];\n    const last = array[array.length - 1];\n    const sum = first + last;\n\n    if (sum % 2 === 0) {\n        // Sort in descending order\n        return [...array].sort((a, b) => b - a);\n    } else {\n        // Sort in ascending order\n        return [...array].sort((a, b) => a - b);\n    }\n}\n\n// Examples\nconsole.log(sortArray([])); // []\nconsole.log(sortArray([5])); // [5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5])); // [0, 1, 2, 3, 4, 5]\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6])); // [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "function encrypt(s) {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encryptedString = '';\n\n    for (let char of s) {\n        // Find the index of the current character in the alphabet\n        let index = alphabet.indexOf(char);\n        \n        if (index !== -1) {\n            // Calculate the new position after shifting by 4\n            let newIndex = (index + 4) % 26;\n            // Append the shifted character to the encrypted string\n            encryptedString += alphabet[newIndex];\n        } else {\n            // If the character is not in the alphabet, just append it as is\n            encryptedString += char;\n        }\n    }\n\n    return encryptedString;\n}\n\n// Test cases\nconsole.log(encrypt('hi')); // 'lm'\nconsole.log(encrypt('asdfghjkl')); // 'ewhjklnop'\nconsole.log(encrypt('gf')); // 'kj'\nconsole.log(encrypt('et')); // 'ix'"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) return \"none\";\n    \n    // Remove duplicates and sort the unique elements\n    let uniqueSorted = [...new Set(lst)].sort((a, b) => a - b);\n    \n    if (uniqueSorted.length < 2) return \"none\";\n    \n    // The second smallest element is at index 1 in the sorted list of unique elements\n    return uniqueSorted[1];\n}\n\n// Test cases\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // 2\nconsole.log(nextSmallest([])); // None\nconsole.log(nextSmallest([1, 1])); // None"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "function isBored(s) {\n    // Split the string into sentences based on '.', '?', and '!' followed by a space or end of string\n    const sentences = s.split(/([.!?])/).filter(sentence => sentence.trim() !== '');\n    \n    let count = 0;\n    \n    // Iterate through each sentence\n    for (let sentence of sentences) {\n        // Check if the sentence starts with 'I'\n        if (sentence.match(/^I\\s/i)) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage:\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "function anyInt(x, y, z) {\n  // Check if all inputs are numbers (integers or floats) using Number.isInteger() method\n  if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n    return false;\n  }\n  \n  // Check if one of the numbers is equal to the sum of the other two\n  if (x === y + z || y === x + z || z === x + y) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Examples\nconsole.log(anyInt(5, 2, 7)); // \u279e True\nconsole.log(anyInt(3, 2, 2)); // \u279e False\nconsole.log(anyInt(3, -2, 1)); // \u279e True\nconsole.log(anyInt(3.6, -2.2, 2)); // \u279e False"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "function encode(message) {\n    // Helper function to swap case and replace vowels\n    function swapCaseAndReplaceVowels(char) {\n        if (char === char.toLowerCase()) {\n            // Swap to uppercase\n            return char.toUpperCase();\n        } else {\n            // Swap to lowercase\n            return char.toLowerCase();\n        }\n    }\n\n    // Helper function to shift vowels\n    function shiftVowel(char) {\n        const vowels = 'aeiouAEIOU';\n        const shiftedIndex = (vowels.indexOf(char) + 2) % vowels.length;\n        return vowels[shiftedIndex];\n    }\n\n    let encodedMessage = '';\n\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        \n        if (/[aeiouAEIOU]/.test(char)) {\n            // Replace vowel with the letter that appears 2 places ahead\n            char = shiftVowel(char);\n        } else {\n            // Swap case of the character\n            char = swapCaseAndReplaceVowels(char);\n        }\n        \n        encodedMessage += char;\n    }\n\n    return encodedMessage;\n}\n\n// Examples\nconsole.log(encode('test')); // 'TGST'\nconsole.log(encode('This is a message')); // 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Find all prime numbers in the list\n    let primes = lst.filter(isPrime);\n\n    // If there are no prime numbers, return 0 or handle as needed\n    if (primes.length === 0) {\n        return 0;\n    }\n\n    // Find the largest prime number\n    let largestPrime = Math.max(...primes);\n\n    // Calculate the sum of the digits of the largest prime number\n    let digitSum = String(largestPrime).split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n\n    return digitSum;\n}\n\n// Test cases\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Check if the dictionary is empty\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    // Variables to track whether all keys are lowercase or uppercase\n    let allLower = true;\n    let allUpper = true;\n\n    // Iterate through the dictionary keys\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false; // If any key is not a string, return False\n        }\n        if (key.toLowerCase() !== key) {\n            allLower = false; // At least one key is not lowercase\n        }\n        if (key.toUpperCase() !== key) {\n            allUpper = false; // At least one key is not uppercase\n        }\n    }\n\n    // Return True if all keys are either all lowercase or all uppercase, else False\n    return allLower || allUpper;\n}\n\n// Test cases\nconsole.log(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // True\nconsole.log(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // False\nconsole.log(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // False\nconsole.log(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // False\nconsole.log(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); // True"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "function countUpTo(n) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        \n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n    \n    const primes = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\n// Test cases\nconsole.log(countUpTo(5)); // [2, 3]\nconsole.log(countUpTo(11)); // [2, 3, 5, 7]\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "function multiply(a, b) {\n    // Extract the unit digit of each number\n    let unitDigitA = Math.abs(a) % 10;\n    let unitDigitB = Math.abs(b) % 10;\n    \n    // Multiply the unit digits together\n    return unitDigitA * unitDigitB;\n}\n\n// Examples:\nconsole.log(multiply(148, 412)); // should return 16\nconsole.log(multiply(19, 28));   // should return 72\nconsole.log(multiply(2020, 1851)); // should return 0\nconsole.log(multiply(14, -15));    // should return 20 (since the absolute value of -15 is taken)"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "function countUpper(s) {\n    // Define a set of uppercase vowels\n    const uppercaseVowels = new Set(['A', 'E', 'I', 'O', 'U']);\n    \n    // Initialize a counter for uppercase vowels at even indices\n    let count = 0;\n    \n    // Iterate through the string, considering only characters at even indices\n    for (let i = 0; i < s.length; i += 2) {\n        if (uppercaseVowels.has(s[i])) {\n            count++;\n        }\n    }\n    \n    // Return the count of uppercase vowels found at even indices\n    return count;\n}\n\n// Test cases\nconsole.log(countUpper('aBCdEf')); // returns 1\nconsole.log(countUpper('abcdefg')); // returns 0\nconsole.log(countUpper('dBBE')); // returns 0"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "function closestInteger(value) {\n    // Convert the string to a float\n    let num = parseFloat(value);\n    \n    // If the number is NaN (not-a-number), return 0 as a default value\n    if (isNaN(num)) {\n        return 0;\n    }\n    \n    // Use Math.round() to round towards zero if equidistant from two integers\n    let rounded = Math.round(num);\n    \n    // If the number is exactly halfway between two integers, round away from zero\n    if (num > 0 && num - Math.floor(num) === 0.5) {\n        return Math.ceil(num);\n    } else if (num < 0 && Math.ceil(num) - num === 0.5) {\n        return Math.floor(num);\n    }\n    \n    // Return the rounded number\n    return rounded;\n}\n\n// Test cases\nconsole.log(closestInteger(\"10\"));      // Output: 10\nconsole.log(closestInteger(\"15.3\"));    // Output: 15\nconsole.log(closestInteger(\"14.5\"));    // Output: 15\nconsole.log(closestInteger(\"-14.5\"));   // Output: -15"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "function makeAPile(n) {\n    let pile = [];\n    for (let i = 0; i < n; i++) {\n        if (i === 0) {\n            // The first level has n stones.\n            pile.push(n);\n        } else {\n            // Determine the next odd or even number based on whether n is odd or even.\n            let nextStoneCount = pile[i - 1] + 2;\n            pile.push(nextStoneCount);\n        }\n    }\n    return pile;\n}\n\n// Examples:\nconsole.log(makeAPile(3)); // [3, 5, 7]\nconsole.log(makeAPile(4)); // [4, 6, 8, 10]"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "function wordsString(s) {\n    // Use a regular expression to match both commas and spaces as delimiters\n    return s.split(/[\\s,]+/);\n}\n\n// Example usage:\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Ensure x is less than or equal to y for a valid range\n    if (x > y) {\n        return -1;\n    }\n\n    let maxEven = -1; // Initialize the maximum even number found to -1\n\n    // Iterate through the range from x to y inclusive\n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) { // Check if the current number is even\n            if (i > maxEven) {\n                maxEven = i; // Update the maximum even number found\n            }\n        }\n    }\n\n    return maxEven; // Return the largest even number or -1 if none found\n}\n\n// Test cases\nconsole.log(chooseNum(12, 15)); // Output: 14\nconsole.log(chooseNum(13, 12)); // Output: -1\nconsole.log(chooseNum(8, 10));  // Output: 10\nconsole.log(chooseNum(7, 7));   // Output: -1\nconsole.log(chooseNum(6, 6));   // Output: 6"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return -1;\n    }\n\n    // Step 2: Calculate the sum of integers from n to m\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    // Step 3: Compute the average\n    let count = m - n + 1;\n    let avg = sum / count;\n\n    // Step 4: Round the average to the nearest integer\n    let roundedAvg = Math.round(avg);\n\n    // Step 5: Convert the rounded average to binary and return it as a string prefixed with \"0b\"\n    return `0b${roundedAvg.toString(2)}`;\n}\n\n// Test cases\nconsole.log(roundedAvg(1, 5)); // \"0b11\"\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\""}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "function uniqueDigits(x) {\n    // Helper function to check if a number has any even digits\n    function hasEvenDigit(num) {\n        let str = num.toString();\n        for (let char of str) {\n            let digit = parseInt(char);\n            if (digit % 2 === 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Filter the list to include only numbers without even digits\n    let filteredList = x.filter(num => !hasEvenDigit(num));\n\n    // Sort the filtered list in increasing order\n    filteredList.sort((a, b) => a - b);\n\n    return filteredList;\n}\n\n// Example usage:\nconsole.log(uniqueDigits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(uniqueDigits([152, 323, 1422, 10])); // []"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "function byLength(arr) {\n    // Step 1: Filter the array to include only integers between 1 and 9 inclusive\n    const filteredArr = arr.filter(num => num >= 1 && num <= 9);\n    \n    // Step 2: Sort the filtered array in ascending order\n    const sortedArr = filteredArr.sort((a, b) => a - b);\n    \n    // Step 3: Reverse the sorted array\n    const reversedArr = sortedArr.reverse();\n    \n    // Step 4: Map each digit to its corresponding name\n    const names = reversedArr.map(num => {\n        switch (num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\"; // This should never happen since we filtered the numbers\n        }\n    });\n    \n    // Step 5: Return the resulting array of names\n    return names;\n}\n\n// Example usage:\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3])); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nconsole.log(byLength([])); // []\nconsole.log(byLength([1, -1, 55])); // [\"One\"]"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "function f(n) {\n    let result = [];\n    \n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let fact = 1;\n        for (let i = 2; i <= num; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n    \n    function sumUpTo(num) {\n        if (num === 0) return 0;\n        let sum = 0;\n        for (let i = 1; i <= num; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sumUpTo(i));\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    // Helper function to check if a number is a palindrome\n    function isPalindrome(num) {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\n// Example usage:\nconsole.log(evenOddPalindrome(3)); // Output: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Output: [4, 6]"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "function countNums(arr) {\n    // Helper function to calculate the sum of digits of a given number\n    function sumOfDigits(num) {\n        let sum = 0;\n        let n = Math.abs(num);\n        while (n > 0) {\n            sum += n % 10;\n            n = Math.floor(n / 10);\n        }\n        return num < 0 ? -sum : sum;\n    }\n\n    // Count the number of elements whose sum of digits is greater than 0\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (sumOfDigits(arr[i]) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Test cases\nconsole.log(countNums([])); // Output: 0\nconsole.log(countNums([-1, 11, -11])); // Output: 1\nconsole.log(countNums([1, 1, 2])); // Output: 3"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "def moveOneBall(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    # Function to check if a list is sorted in non-decreasing order\n    def is_sorted(lst):\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i - 1]:\n                return False\n        return True\n    \n    # Generate all rotations and check if any of them is sorted\n    for shift in range(n):\n        rotated_arr = arr[shift:] + arr[:shift]\n        if is_sorted(rotated_arr):\n            return True\n    \n    return False\n\n# Test cases\nprint(moveOneBall([3, 4, 5, 1, 2]))  # Output: True\nprint(moveOneBall([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // Helper function to check if a list contains only even numbers\n    const allEven = (list) => list.every(num => num % 2 === 0);\n    \n    // Check if lst1 is already all even\n    if (allEven(lst1)) {\n        return \"YES\";\n    }\n    \n    // Separate even and odd numbers in both lists\n    const evensInLst1 = lst1.filter(num => num % 2 === 0);\n    const oddsInLst1 = lst1.filter(num => num % 2 !== 0);\n    const evensInLst2 = lst2.filter(num => num % 2 === 0);\n    \n    // If there are no odd numbers in lst1, it's impossible to make all even\n    if (oddsInLst1.length === 0) {\n        return \"NO\";\n    }\n    \n    // Check if we can replace each odd number in lst1 with an even number from lst2\n    for (let odd of oddsInLst1) {\n        if (evensInLst2.length > 0) {\n            evensInLst2.pop(); // Use one even number from lst2\n        } else {\n            return \"NO\"; // No more evens available to replace all odds in lst1\n        }\n    }\n    \n    // If we can replace all odd numbers with evens, then lst1 can be all even\n    return \"YES\";\n}\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "function histogram(test) {\n    // Split the input string into an array of lowercase letters\n    const letters = test.split(' ');\n    \n    // Create a dictionary to store the counts of each letter\n    const countDict = {};\n    \n    // Count the occurrences of each letter\n    for (const letter of letters) {\n        if (letter !== '') {\n            if (!countDict[letter]) {\n                countDict[letter] = 0;\n            }\n            countDict[letter]++;\n        }\n    }\n    \n    // If the input string is empty, return an empty dictionary\n    if (Object.keys(countDict).length === 0) {\n        return {};\n    }\n    \n    // Find the maximum count\n    let maxCount = Math.max(...Object.values(countDict));\n    \n    // Create a result dictionary containing all letters with the maximum count\n    const result = {};\n    for (const letter in countDict) {\n        if (countDict[letter] === maxCount) {\n            result[letter] = countDict[letter];\n        }\n    }\n    \n    return result;\n}\n\n// Test cases\nconsole.log(histogram('a b c')); // {'a': 1, 'b': 1, 'c': 1}\nconsole.log(histogram('a b b a')); // {'a': 2, 'b': 2}\nconsole.log(histogram('a b c a b')); // {'a': 2, 'b': 2}\nconsole.log(histogram('b b b b a')); // {'b': 4}\nconsole.log(histogram('')); // {}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // Step 1: Remove all characters in s that are equal to any character in c\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n    \n    // Step 2: Check if the resulting string is a palindrome\n    const isPalindrome = (str) => {\n        return str === str.split('').reverse().join('');\n    };\n    \n    // Step 3: Return the result and whether it is a palindrome\n    return [result, isPalindrome(result)];\n}\n\n// Example usage:\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', False]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', False]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', True]"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "function oddCount(lst) {\n    // Function to count the number of odd digits in a string\n    function countOddDigits(str) {\n        let count = 0;\n        for (let char of str) {\n            let digit = parseInt(char, 10);\n            if (digit % 2 !== 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Create the output list based on the input list\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let numOddDigits = countOddDigits(lst[i]);\n        // Replace 'n' with the number of odd digits and other numbers with their respective positions\n        let message = `the number of odd elements ${numOddDigits}n the str${numOddDigits}ng ${numOddDigits} of the str${numOddDigits}put.`;\n        result.push(message);\n    }\n    return result;\n}\n\n// Test cases\nconsole.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(oddCount(['3', \"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "function minSubArraySum(nums) {\n    if (nums.length === 0) return null; // Handle empty array case\n\n    let maxSoFar = nums[0];\n    let minSoFar = nums[0];\n    let currentMax = nums[0];\n    let currentMin = nums[0];\n\n    for (let i = 1; i < nums.length; i++) {\n        // Update the maximum and minimum sums considering the current element\n        currentMax = Math.max(nums[i], currentMax + nums[i]);\n        currentMin = Math.min(nums[i], currentMin + nums[i]);\n\n        // Update the overall max and min sums\n        maxSoFar = Math.max(maxSoFar, currentMax);\n        minSoFar = Math.min(minSoFar, currentMin);\n    }\n\n    return minSoFar;\n}\n\n// Test cases\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output: 1\nconsole.log(minSubArraySum([-1, -2, -3])); // Output: -6"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let totalBucketsUsed = 0;\n    \n    // Iterate through each row in the grid\n    for (let row of grid) {\n        let waterUnits = 0;\n        \n        // Count the number of units of water in this well\n        for (let unit of row) {\n            if (unit === 1) {\n                waterUnits++;\n            }\n        }\n        \n        // Calculate the number of times we need to use the bucket for this well\n        let bucketsUsedForThisWell = Math.ceil(waterUnits / capacity);\n        \n        // Add the number of buckets used for this well to the total count\n        totalBucketsUsed += bucketsUsedForThisWell;\n    }\n    \n    return totalBucketsUsed;\n}\n\n// Example 1:\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\n\n// Example 2:\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\n\n// Example 3:\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "function sortArray(arr) {\n    return arr.sort((a, b) => {\n        const countOnes = (num) => num.toString(2).split('1').length - 1;\n        \n        const countA = countOnes(a);\n        const countB = countOnes(b);\n        \n        if (countA === countB) {\n            return a - b;\n        } else {\n            return countA - countB;\n        }\n    });\n}\n\n// Test cases\nconsole.log(sortArray([1, 5, 2, 3, 4])); // [1, 2, 3, 4, 5]\nconsole.log(sortArray([-2, -3, -4, -5, -6])); // [-6, -5, -4, -3, -2]\nconsole.log(sortArray([1, 0, 2, 3, 4])); // [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "function selectWords(s, n) {\n    if (s.length === 0) return [];\n\n    // Helper function to count consonants in a word\n    function countConsonants(word) {\n        const vowels = \"aeiouAEIOU\";\n        let count = 0;\n        for (let char of word) {\n            if (!vowels.includes(char) && char.match(/[a-zA-Z]/)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Split the string into words\n    const words = s.split(' ');\n\n    // Filter and select words with exactly n consonants\n    const result = [];\n    for (let word of words) {\n        if (countConsonants(word) === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "function getClosestVowel(word) {\n    // Define vowels\n    const vowels = \"aeiouAEIOU\";\n    \n    // Iterate through the word from right to left, starting from the second last character\n    for (let i = word.length - 2; i >= 1; i--) {\n        let currentChar = word[i];\n        \n        // Check if the current character is a vowel\n        if (vowels.includes(currentChar)) {\n            // Check if the characters before and after the current character are consonants\n            let prevChar = word[i - 1];\n            let nextChar = word[i + 1];\n            \n            if (!vowels.includes(prevChar) && !vowels.includes(nextChar)) {\n                return currentChar;\n            }\n        }\n    }\n    \n    // If no vowel is found meeting the condition, return an empty string\n    return \"\";\n}\n\n// Test cases\nconsole.log(getClosestVowel(\"yogurt\")); // \"u\"\nconsole.log(getClosestVowel(\"FULL\"));   // \"U\"\nconsole.log(getClosestVowel(\"quick\"));  // \"\"\nconsole.log(getClosestVowel(\"ab\"));     // \"\""}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "function matchParens(lst) {\n    // Helper function to check if a string has balanced parentheses\n    function isBalanced(str) {\n        let stack = [];\n        for (let char of str) {\n            if (char === '(') {\n                stack.push(char);\n            } else if (char === ')') {\n                if (stack.length === 0) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.length === 0;\n    }\n\n    // Concatenate the strings in both possible orders\n    let str1 = lst[0];\n    let str2 = lst[1];\n    \n    // Check if either concatenation is balanced\n    if (isBalanced(str1 + str2) || isBalanced(str2 + str1)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n// Test cases\nconsole.log(matchParens(['()(', ')']) === 'Yes'); // true\nconsole.log(matchParens([')', ')']) === 'No'); // true"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    \n    // Slice the first k elements from the sorted array\n    return arr.slice(0, k).sort((a, b) => a - b);\n}\n\n// Example 1:\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\n\n// Example 2:\nconsole.log(maximum([4, -4, 4], 2)); // Output: [4, 4]\n\n// Example 3:\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "function solution(lst) {\n    let sum = 0; // Initialize sum of odd elements at even positions\n    \n    for (let i = 0; i < lst.length; i += 2) { // Iterate over even indices\n        if (lst[i] % 2 !== 0) { // Check if the element at even index is odd\n            sum += lst[i]; // Add to sum if it's odd\n        }\n    }\n    \n    return sum; // Return the final sum\n}\n\n// Examples\nconsole.log(solution([5, 8, 7, 1])); // Output: 12\nconsole.log(solution([3, 3, 3, 3, 3])); // Output: 9\nconsole.log(solution([30, 13, 24, 321])); // Output: 0"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage:\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)); // Output: 24"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "function getOddCollatz(n) {\n    // Initialize an array to store the odd numbers from the Collatz sequence\n    let oddNumbers = [];\n    \n    // Generate the Collatz sequence until it reaches 1\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            // If n is odd, add it to the list of odd numbers\n            oddNumbers.push(n);\n        }\n        // Generate the next number in the sequence\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    \n    // Add the final number 1 to the list of odd numbers\n    oddNumbers.push(1);\n    \n    // Sort the array of odd numbers in increasing order\n    oddNumbers.sort((a, b) => a - b);\n    \n    return oddNumbers;\n}\n\n// Example usage:\nconsole.log(getOddCollatz(5)); // Output: [1, 5]"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "function validDate(date) {\n    // Check if the date string is empty\n    if (!date) {\n        return false;\n    }\n\n    // Define month lengths and leap year check for February\n    const monthLengths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    \n    // Check if the date string is in the correct format: mm-dd-yyyy\n    const parts = date.split('-');\n    if (parts.length !== 3) {\n        return false;\n    }\n\n    const mm = parseInt(parts[0], 10);\n    const dd = parseInt(parts[1], 10);\n    const yyyy = parseInt(parts[2], 10);\n\n    // Check if the month is valid (1 <= mm <= 12)\n    if (mm < 1 || mm > 12) {\n        return false;\n    }\n\n    // Adjust for leap years in February\n    if ((yyyy % 4 === 0 && yyyy % 100 !== 0) || yyyy % 400 === 0) {\n        monthLengths[1] = 29;\n    }\n\n    // Check if the day is valid for the given month\n    if (dd < 1 || dd > monthLengths[mm - 1]) {\n        return false;\n    }\n\n    // If all checks pass, the date is valid\n    return true;\n}\n\n// Test cases\nconsole.log(validDate('03-11-2000')); // True\nconsole.log(validDate('15-01-2012')); // False\nconsole.log(validDate('04-0-2040'));  // False\nconsole.log(validDate('06-04-2020')); // True\nconsole.log(validDate('06/04/2020')); // False"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "function splitWords(txt) {\n    // Check for whitespace first\n    if (/\\s/.test(txt)) {\n        return txt.split(/\\s+/);\n    }\n    \n    // If no whitespaces, check for commas\n    else if (/,./.test(txt)) {\n        return txt.split(/,/);\n    }\n    \n    // If no commas or spaces, count lowercase letters with odd alphabetical order\n    else {\n        let count = 0;\n        for (let char of txt) {\n            if (char >= 'a' && char <= 'z') {\n                // Calculate the position in the alphabet and check if it's odd\n                if ((char.charCodeAt(0) - 'a'.charCodeAt(0)) % 2 === 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n\n// Examples\nconsole.log(splitWords(\"Hello world!\")); // \u279e [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"Hello,world!\")); // \u279e [\"Hello\", \"world!\"]\nconsole.log(splitWords(\"abcdef\")); // == 3"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "function isSorted(lst) {\n    if (lst.length <= 1) return true; // An array with one or zero elements is always sorted\n\n    let prev = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] === prev || lst[i] < prev) {\n            return false; // If the current element is less than or equal to the previous, it's not sorted\n        }\n        prev = lst[i];\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(isSorted([5])); // \u279e True\nconsole.log(isSorted([1, 2, 3, 4, 5])); // \u279e True\nconsole.log(isSorted([1, 3, 2, 4, 5])); // \u279e False\nconsole.log(isSorted([1, 2, 3, 4, 5, 6])); // \u279e True\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7])); // \u279e True\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7])); // \u279e False\nconsole.log(isSorted([1, 2, 2, 3, 3, 4])); // \u279e True\nconsole.log(isSorted([1, 2, 2, 2, 3, 4])); // \u279e False"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Find the intersection of the two intervals\n    let startIntersection = Math.max(interval1[0], interval2[0]);\n    let endIntersection = Math.min(interval1[1], interval2[1]);\n\n    // If there is no intersection, return \"NO\"\n    if (startIntersection > endIntersection) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    let lengthIntersection = endIntersection - startIntersection + 1;\n\n    // Check if the length is a prime number\n    if (isPrime(lengthIntersection)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Test cases\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "function prodSigns(arr) {\n    if (arr.length === 0) {\n        return \"none\";\n    }\n\n    // Step 2: Sum of magnitudes\n    let sumMagnitudes = arr.reduce((sum, num) => sum + Math.abs(num), 0);\n\n    // Step 3: Product of signs\n    let productSigns = arr.reduce((product, num) => {\n        if (num > 0) {\n            return product * 1;\n        } else if (num < 0) {\n            return product * -1;\n        } else {\n            return product * 0;\n        }\n    }, 1);\n\n    // Step 4: Multiply sum of magnitudes by product of signs\n    let result = sumMagnitudes * productSigns;\n\n    // Return the result\n    return result;\n}\n\n// Test cases\nconsole.log(prodSigns([1, 2, 2, -4])); // Output: -9\nconsole.log(prodSigns([0, 1])); // Output: 0\nconsole.log(prodSigns([])); // Output: \"none\""}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "function minpath(grid, k) {\n    const N = grid.length;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]; // right, down, left, up\n    \n    function getKey(row, col, length, path) {\n        return `${row},${col},${length},${path.join(',')}`;\n    }\n    \n    let minPath = null;\n    \n    for (let startRow = 0; startRow < N; startRow++) {\n        for (let startCol = 0; startCol < N; startCol++) {\n            const queue = [[startRow, startCol, [grid[startRow][startCol]]]];\n            const visited = new Set();\n            \n            while (queue.length > 0) {\n                const [row, col, path] = queue.shift();\n                \n                if (path.length === k) {\n                    if (!minPath || path < minPath) {\n                        minPath = path;\n                    }\n                    continue;\n                }\n                \n                for (const [dRow, dCol] of directions) {\n                    const newRow = row + dRow;\n                    const newCol = col + dCol;\n                    \n                    if (newRow >= 0 && newRow < N && newCol >= 0 && newCol < N) {\n                        const newPath = path.concat(grid[newRow][newCol]);\n                        const key = getKey(newRow, newCol, path.length + 1, newPath);\n                        \n                        if (!visited.has(key)) {\n                            visited.add(key);\n                            queue.push([newRow, newCol, newPath]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return minPath;\n}\n\n// Example usage:\nconsole.log(minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)); // Output: [1, 2, 1]\nconsole.log(minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)); // Output: [1]"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "function tri(n) {\n    // Initialize an array to store the Tribonacci sequence values\n    let tribSequence = new Array(n + 1);\n    \n    // Base case for n = 0\n    tribSequence[0] = 0; // This is not explicitly defined in the problem, but it's a common starting point\n    \n    // Base cases\n    tribSequence[1] = 3;\n    \n    // Fill the array based on whether the index is even or odd\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            tribSequence[i] = 1 + i / 2;\n        } else {\n            tribSequence[i] = tribSequence[i - 1] + tribSequence[i - 2] + tribSequence[i + 1];\n        }\n    }\n    \n    return tribSequence;\n}\n\n// Example usage:\nconsole.log(tri(3)); // Output: [0, 3, 2, 8]"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "function digits(n) {\n    // Convert the number to a string\n    let numStr = n.toString();\n    \n    // Initialize the product variable\n    let product = 1;\n    \n    // Flag to check if there are any odd digits\n    let hasOddDigit = false;\n    \n    // Iterate through each character in the string\n    for (let char of numStr) {\n        // Convert the character back to a number\n        let digit = parseInt(char);\n        \n        // Check if the digit is odd\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n    }\n    \n    // If no odd digits were found, return 0\n    if (!hasOddDigit) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n// Test cases\nconsole.log(digits(1));   // Output: 1\nconsole.log(digits(4));   // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "function isNested(string) {\n  let stack = [];\n  let isNested = false; // Flag to track if we found at least one nested pair\n\n  for (let char of string) {\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length > 0 && stack[stack.length - 1] === '[') {\n        stack.pop(); // Match found, pop the opening bracket from the stack\n        isNested = true; // Set flag to True since we found a nested pair\n      } else {\n        stack.push(char); // Push closing bracket onto the stack (should not happen in valid cases)\n      }\n    }\n  }\n\n  return isNested;\n}\n\n// Test cases\nconsole.log(isNested('[[]]')); // \u279e True\nconsole.log(isNested('[]]]]]]][[[[[]')); // \u279e False\nconsole.log(isNested('[][]')); // \u279e False\nconsole.log(isNested('[]')); // \u279e False\nconsole.log(isNested('[[][]]')); // \u279e True\nconsole.log(isNested('[[]][[')); // \u279e True"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Step 1: Round each element to the upper integer (ceiling value)\n    let roundedList = lst.map(num => Math.ceil(num));\n    \n    // Step 2: Square each of the rounded values\n    let squaredList = roundedList.map(num => num * num);\n    \n    // Step 3: Sum all the squared values\n    let sumSquares = squaredList.reduce((sum, num) => sum + num, 0);\n    \n    // Step 4: Return the sum\n    return sumSquares;\n}\n\n// Examples\nconsole.log(sumSquares([1,2,3])); // Output: 14\nconsole.log(sumSquares([1,4,9])); // Output: 98\nconsole.log(sumSquares([1,3,5,7])); // Output: 84\nconsole.log(sumSquares([1.4,4.2,0])); // Output: 29\nconsole.log(sumSquares([-2.4,1,1])); // Output: 6"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Check if the string is empty\n    if (txt.length === 0) return false;\n    \n    // Get the last character of the string\n    const lastChar = txt[txt.length - 1];\n    \n    // Check if the last character is a letter and not part of a word\n    // Using regular expression to check if it's an alphabetical character\n    // And ensuring it's not followed by another alphabetical character or a space (indicating part of a word)\n    return /^[a-zA-Z]$/.test(lastChar) && !/\\s/.test(txt[txt.length - 2]);\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"\")); // \u279e False"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "function canArrange(arr) {\n    // Iterate through the array starting from the second element\n    for (let i = 1; i < arr.length; i++) {\n        // Check if the current element is not greater than or equal to the previous element\n        if (arr[i] < arr[i - 1]) {\n            return i; // Return the index of the found element\n        }\n    }\n    // If no such element exists, return -1\n    return -1;\n}\n\n// Examples\nconsole.log(canArrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(canArrange([1, 2, 3])); // Output: -1"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let largestNegative = null;\n    let smallestPositive = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (largestNegative === null || num > largestNegative) {\n                largestNegative = num;\n            }\n        } else if (num > 0) {\n            if (smallestPositive === null || num < smallestPositive) {\n                smallestPositive = num;\n            }\n        }\n    }\n\n    return [largestNegative, smallestPositive];\n}\n\n// Examples:\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largestSmallestIntegers([])); // Output: [null, null]\nconsole.log(largestSmallestIntegers([0])); // Output: [null, null]"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "function compareOne(a, b) {\n    // Helper function to convert string to float, handling different decimal separators\n    function parseNumber(value) {\n        return parseFloat(value.replace(',', '.'));\n    }\n\n    // Check if both values are numbers or strings that can be converted to numbers\n    let isANumber = typeof a === 'number' || !isNaN(parseFloat(a));\n    let isBNumber = typeof b === 'number' || !isNaN(parseFloat(b));\n\n    // If both are numbers, compare them directly\n    if (isANumber && isBNumber) {\n        return Math.max(parseFloat(a), parseFloat(b));\n    }\n\n    // If one of the values can be converted to a number and the other cannot, convert the valid one\n    if (isANumber || isBNumber) {\n        let num = isANumber ? parseNumber(a) : parseNumber(b);\n        return Math.max(num, parseFloat(isANumber ? b : a));\n    }\n\n    // If both values are strings that cannot be converted to numbers, compare lexicographically\n    if (typeof a === 'string' && typeof b === 'string') {\n        let numA = parseNumber(a);\n        let numB = parseNumber(b);\n        if (numA > numB) return a;\n        if (numA < numB) return b;\n    }\n\n    // If none of the above conditions are met, return \"none\"\n    return null;\n}\n\n// Test cases\nconsole.log(compareOne(1, 2.5)); // \u279e 2.5\nconsole.log(compareOne(1, \"2,3\")); // \u279e \"2,3\"\nconsole.log(compareOne(\"5,1\", \"6\")); // \u279e \"6\"\nconsole.log(compareOne(\"1\", 1)); // \u279e null"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "function isEqualToSumEven(n) {\n    // A number can be expressed as the sum of four positive even numbers only if it is >= 8\n    return n >= 8;\n}\n\n// Test cases\nconsole.log(isEqualToSumEven(4));  // False\nconsole.log(isEqualToSumEven(6));  // False\nconsole.log(isEqualToSumEven(8));  // True"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "function specialFactorial(n) {\n    // Helper function to calculate factorial\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Initialize the result to 1\n    let result = 1;\n\n    // Calculate the product of factorials from n down to 1\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(specialFactorial(4)); // Output: 288"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "function fixSpaces(text) {\n    // Replace all spaces with underscores initially\n    let result = text.replace(/ /g, '_');\n    \n    // Then handle multiple consecutive underscores\n    while (result.includes('__')) {\n        result = result.replace('__', '-');\n    }\n    \n    return result;\n}\n\n// Test cases\nconsole.log(fixSpaces(\"Example\")); // \"Example\"\nconsole.log(fixSpaces(\"Example 1\")); // \"Example_1\"\nconsole.log(fixSpaces(\" Example 2\")); // \"_Example_2\"\nconsole.log(fixSpaces(\" Example   3\")); // \"_Example-3\""}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "function fileNameCheck(filename) {\n    // Check if the filename contains exactly one dot\n    const parts = filename.split('.');\n    if (parts.length !== 2) {\n        return 'No';\n    }\n\n    const namePart = parts[0];\n    const extensionPart = parts[1];\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    if (namePart.length === 0 || !/^[a-zA-Z]/.test(namePart)) {\n        return 'No';\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    const validExtensions = ['txt', 'exe', 'dll'];\n    if (!validExtensions.includes(extensionPart)) {\n        return 'No';\n    }\n\n    // Check if there are more than three digits in the name part\n    const digitCount = (namePart.match(/\\d/g) || []).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n\n    // If all conditions are met, return 'Yes'\n    return 'Yes';\n}\n\n// Examples\nconsole.log(fileNameCheck(\"example.txt\")); // => 'Yes'\nconsole.log(fileNameCheck(\"1example.dll\")); // => 'No'"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Initialize the sum to 0\n    let sum = 0;\n\n    // Iterate through the list with index\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            // If the index is a multiple of 3, square the element\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            // If the index is a multiple of 4 but not a multiple of 3, cube the element\n            sum += Math.pow(lst[i], 3);\n        } else {\n            // Otherwise, add the element as it is to the sum\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n\n// Examples\nconsole.log(sumSquares([1, 2, 3])); // Output: 6\nconsole.log(sumSquares([])); // Output: 0\nconsole.log(sumSquares([-1, -5, 2, -1, -5])); // Output: -126"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    // Split the sentence into words\n    const words = sentence.split(' ');\n    \n    // Filter the words whose lengths are prime numbers\n    const filteredWords = words.filter(word => isPrime(word.length));\n    \n    // Join the filtered words back into a string\n    return filteredWords.join(' ');\n}\n\n// Example usage:\nconsole.log(wordsInSentence(\"This is a test\")); // Output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "function simplify(x, n) {\n    // Helper function to convert fraction string to array [numerator, denominator]\n    function parseFraction(fraction) {\n        const parts = fraction.split('/');\n        return [parseInt(parts[0], 10), parseInt(parts[1], 10)];\n    }\n\n    // Parse the input fractions\n    const [xNumerator, xDenominator] = parseFraction(x);\n    const [nNumerator, nDenominator] = parseFraction(n);\n\n    // Multiply the fractions\n    const resultNumerator = xNumerator * nNumerator;\n    const resultDenominator = xDenominator * nDenominator;\n\n    // Check if the resulting fraction is a whole number\n    return (resultNumerator % resultDenominator === 0);\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "function orderByPoints(nums) {\n    return nums.map((num, index) => ({ value: num, index: index })) // Create an array of objects with each number and its original index\n               .sort((a, b) => {\n                   const sumA = Math.abs(a.value).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n                   const sumB = Math.abs(b.value).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n                   if (sumA === sumB) {\n                       return a.index - b.index; // If sums are equal, sort by original index\n                   } else {\n                       return sumA - sumB; // Otherwise, sort by the sum of digits\n                   }\n               })\n               .map(item => item.value); // Extract the values back into an array\n}\n\n// Test cases\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // Output: []"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "function specialFilter(nums) {\n    // Helper function to check if a digit is odd\n    function isOddDigit(digit) {\n        return digit === 1 || digit === 3 || digit === 5 || digit === 7 || digit === 9;\n    }\n\n    // Helper function to get the first and last digits of a number\n    function getFirstAndLastDigits(num) {\n        let strNum = Math.abs(num).toString();\n        if (strNum.length < 2) return null; // Single-digit numbers are not considered\n        let firstDigit = parseInt(strNum[0]);\n        let lastDigit = parseInt(strNum[strNum.length - 1]);\n        return [firstDigit, lastDigit];\n    }\n\n    let count = 0;\n\n    for (let num of nums) {\n        if (num > 10) {\n            let digits = getFirstAndLastDigits(num);\n            if (digits && isOddDigit(digits[0]) && isOddDigit(digits[1])) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "function getMaxTriples(n) {\n    // Step 1: Create the array a\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    // Step 2: Initialize the count of valid triples\n    let count = 0;\n\n    // Step 3: Iterate through all possible triples (i, j, k)\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                // Step 4: Check if the sum is a multiple of 3\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example usage:\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Find the indices of the given planets in the array\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // If either planet is not found, return an empty tuple\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Ensure the indices are in the correct order for slicing\n    const start = Math.min(index1, index2);\n    const end = Math.max(index1, index2);\n    \n    // Get the planets between the two given planets\n    const result = [];\n    for (let i = start + 1; i < end; i++) {\n        result.push(planets[i]);\n    }\n    \n    return result;\n}\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "function sortedListSum(lst) {\n    // Filter out strings with odd lengths\n    let filteredList = lst.filter(str => str.length % 2 === 0);\n    \n    // Sort the list by length and then alphabetically\n    filteredList.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        } else {\n            return a.length - b.length;\n        }\n    });\n    \n    return filteredList;\n}\n\n// Test cases\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"])); // [\"aa\"]\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"])); // [\"ab\", \"cd\"]"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "function xOrY(n, x, y) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        \n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    }\n    \n    // Check if n is a prime number\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Examples\nconsole.log(xOrY(7, 34, 12)); // Output: 34\nconsole.log(xOrY(15, 8, 5)); // Output: 5"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    // Filter out negative numbers, non-integers, and even numbers\n    let filteredList = lst.filter(num => Number.isInteger(num) && num >= 0 && num % 2 !== 0);\n    \n    // Square each number in the filtered list\n    let squaredList = filteredList.map(num => num * num);\n    \n    // Sum the squares of the numbers\n    let sumOfSquares = squaredList.reduce((sum, current) => sum + current, 0);\n    \n    return sumOfSquares;\n}\n\n// Test cases\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // Output: 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // Output: 0\nconsole.log(doubleTheDifference([9, -2])); // Output: 81\nconsole.log(doubleTheDifference([0])); // Output: 0"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "function compare(game, guess) {\n    // Initialize an array to store the differences\n    let result = [];\n    \n    // Iterate through both arrays simultaneously\n    for (let i = 0; i < game.length; i++) {\n        // Calculate the absolute difference between the current elements in both arrays\n        if (game[i] === guess[i]) {\n            // If they match, push 0 to the result array\n            result.push(0);\n        } else {\n            // If they don't match, push the absolute difference to the result array\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    \n    // Return the result array\n    return result;\n}\n\n// Test cases\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])); // [0,0,0,0,3,3]\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])); // [4,4,1,0,0,6]"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let maxStrength = -Infinity;\n    let strongestName = '';\n\n    for (let ext of extensions) {\n        let capCount = 0;\n        let smCount = 0;\n        \n        // Calculate CAP and SM counts for the current extension\n        for (let char of ext) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n        \n        // Calculate the strength of the current extension\n        let strength = capCount - smCount;\n        \n        // Update the strongest extension if this one is stronger or if it's the first one we found\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestName = ext;\n        }\n    }\n    \n    return `${classname}.${strongestName}`;\n}\n\n// Example usage:\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: 'my_class.AA'\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: 'Slices.SErviNGSliCes'"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Function to generate all rotations of a string\n    function getRotations(str) {\n        let rotations = [];\n        for (let i = 0; i < str.length; i++) {\n            let rotation = str.slice(i) + str.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    }\n\n    // Get all rotations of the second word\n    const rotations = getRotations(b);\n\n    // Check if any rotation is a substring of the first word\n    for (let rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(cycpatternCheck(\"abcd\", \"abd\")); // False\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); // True\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); // False\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); // True\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); // False\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); // True"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "function evenOddCount(num) {\n  // Convert the number to a string to easily iterate over each digit\n  let numStr = Math.abs(num).toString();\n  \n  // Initialize counters for even and odd digits\n  let evenCount = 0;\n  let oddCount = 0;\n  \n  // Iterate over each character in the string representation of the number\n  for (let char of numStr) {\n    // Convert the character back to a digit\n    let digit = parseInt(char);\n    \n    // Check if the digit is even or odd and update the respective counter\n    if (digit % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  \n  // Return the tuple (array with two elements) containing the counts\n  return [evenCount, oddCount];\n}\n\n// Example usage:\nconsole.log(evenOddCount(-12)); // Output: [1, 1]\nconsole.log(evenOddCount(123)); // Output: [1, 2]"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    // Define the Roman numeral symbols and their values\n    const romanNumerals = [\n        { symbol: 'm', value: 1000 },\n        { symbol: 'cm', value: 900 },\n        { symbol: 'd', value: 500 },\n        { symbol: 'cd', value: 400 },\n        { symbol: 'c', value: 100 },\n        { symbol: 'xc', value: 90 },\n        { symbol: 'l', value: 50 },\n        { symbol: 'xl', value: 40 },\n        { symbol: 'x', value: 10 },\n        { symbol: 'ix', value: 9 },\n        { symbol: 'v', value: 5 },\n        { symbol: 'iv', value: 4 },\n        { symbol: 'i', value: 1 }\n    ];\n\n    // Initialize an empty string for the result\n    let romanString = '';\n\n    // Iterate through the list of Roman numeral symbols and values\n    for (const { symbol, value } of romanNumerals) {\n        // While the current value can be subtracted from the number\n        while (number >= value) {\n            // Append the symbol to the result string\n            romanString += symbol;\n            // Subtract the value from the number\n            number -= value;\n        }\n    }\n\n    // Return the result string in lowercase\n    return romanString.toLowerCase();\n}\n\n// Examples\nconsole.log(intToMiniRoman(19));  // Output: 'xix'\nconsole.log(intToMiniRoman(152)); // Output: 'clii'\nconsole.log(intToMiniRoman(426)); // Output: 'cdxxvi'"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // First, identify the longest side, which will be the hypotenuse (c)\n    let sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Apply the Pythagorean theorem: a^2 + b^2 = c^2\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\n// Examples\nconsole.log(rightAngleTriangle(3, 4, 5)); // True\nconsole.log(rightAngleTriangle(1, 2, 3)); // False"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "function findMax(words) {\n    let maxWord = \"\";\n    let maxUniqueCount = 0;\n\n    words.forEach(word => {\n        const uniqueChars = new Set(word);\n        if (uniqueChars.size > maxUniqueCount || \n            (uniqueChars.size === maxUniqueCount && word < maxWord)) {\n            maxUniqueCount = uniqueChars.size;\n            maxWord = word;\n        }\n    });\n\n    return maxWord;\n}\n\n// Test cases\nconsole.log(findMax([\"name\", \"of\", \"string\"])); // Output: \"string\"\nconsole.log(findMax([\"name\", \"enam\", \"game\"])); // Output: \"enam\"\nconsole.log(findMax([\"aaaaaaa\", \"bb\" ,\"cc\"])); // Output: \"aaaaaaa\""}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "function eat(number, need, remaining) {\n    // Determine the total number of carrots eaten by adding the already eaten carrots to the minimum of need and remaining\n    let totalEaten = number + Math.min(need, remaining);\n    \n    // Calculate the number of carrots left after eating the necessary amount\n    let remainingCarrots = Math.max(0, remaining - need);\n    \n    return [totalEaten, remainingCarrots];\n}\n\n// Test cases\nconsole.log(eat(5, 6, 10)); // [11, 4]\nconsole.log(eat(4, 8, 9)); // [12, 1]\nconsole.log(eat(1, 10, 10)); // [11, 0]\nconsole.log(eat(2, 11, 5)); // [7, 0]"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "function doAlgebra(operator, operand) {\n    // Initialize the result with the first operand\n    let result = operand[0];\n    \n    // Iterate through the operators and operands to apply each operator sequentially\n    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n            case '+':\n                result += operand[i + 1];\n                break;\n            case '-':\n                result -= operand[i + 1];\n                break;\n            case '*':\n                result *= operand[i + 1];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i + 1]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i + 1]);\n                break;\n            default:\n                throw new Error('Unsupported operator');\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconst operators = ['+', '*', '-'];\nconst operands = [2, 3, 4, 5];\nconsole.log(doAlgebra(operators, operands)); // Output: 9"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "function solve(s) {\n    // Check if the string contains any letters\n    const hasLetters = /[a-zA-Z]/.test(s);\n    \n    if (!hasLetters) {\n        // If there are no letters, reverse the entire string\n        return s.split('').reverse().join('');\n    } else {\n        // Iterate through each character and reverse its case if it's a letter\n        let result = '';\n        for (let i = 0; i < s.length; i++) {\n            if (/[a-z]/.test(s[i])) {\n                result += s[i].toUpperCase();\n            } else if (/[A-Z]/.test(s[i])) {\n                result += s[i].toLowerCase();\n            } else {\n                result += s[i];\n            }\n        }\n        return result;\n    }\n}\n\n// Examples\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\"));   // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n  if (!text) return \"none\";\n  const hashSum = crypto.createHash('md5');\n  hashSum.update(text);\n  return hashSum.digest('hex');\n}\n\n// Example usage:\nconsole.log(stringToMd5('Hello world')); // Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Ensure a is less than or equal to b\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    \n    // Initialize an empty array to store the even digits\n    let result = [];\n    \n    // Iterate through the range from start to end (inclusive)\n    for (let i = start; i <= end; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    \n    return result;\n}\n\n// Test cases\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []"}

{"task_id": "HumanEval_csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Check if in given list of numbers, are any two numbers closer to each other than\n        /// given threshold.\n        /// >>> HasCloseElements([1.0, 2.0, 3.0], 0.5)\n        /// False\n        /// >>> HasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        /// True\n        /// </summary>\n        public static bool HasCloseElements(List<double> numbers, double threshold) \n        {\n            // Sort the list of numbers to ensure we only need to compare adjacent elements\n            numbers.Sort();\n            \n            // Iterate through the sorted list and check if any two adjacent elements are closer than the threshold\n            for (int i = 0; i < numbers.Count - 1; i++)\n            {\n                if (numbers[i + 1] - numbers[i] <= threshold)\n                {\n                    return true; // Found a pair that is closer than the threshold\n                }\n            }\n            \n            return false; // No pairs are closer than the threshold\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(HasCloseElements(new List<double> { 1.0, 2.0, 3.0 }, 0.5)); // False\n            Console.WriteLine(HasCloseElements(new List<double> { 1.0, 2.8, 3.0, 4.0, 5.0, 2.0 }, 0.3)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class Program\n{\n    public static List<string> SeparateParenGroups(string paren_string)\n    {\n        // Remove all spaces from the input string\n        string cleanedString = Regex.Replace(paren_string, @\"\\s+\", \"\");\n        \n        List<string> result = new List<string>();\n        int balance = 0;\n        int startIndex = -1;\n\n        for (int i = 0; i < cleanedString.Length; i++)\n        {\n            if (cleanedString[i] == '(')\n            {\n                if (balance == 0 && startIndex != -1)\n                {\n                    // If we encounter an opening parenthesis and there's a pending group, add the current group to the list\n                    result.Add(cleanedString.Substring(startIndex, i - startIndex));\n                    startIndex = -1;\n                }\n                balance++;\n                if (balance == 1)\n                {\n                    startIndex = i; // Mark the start of a new group\n                }\n            }\n            else if (cleanedString[i] == ')')\n            {\n                balance--;\n                if (balance == 0 && startIndex != -1)\n                {\n                    // If we encounter a closing parenthesis and there's a pending group, add the current group to the list\n                    result.Add(cleanedString.Substring(startIndex, i - startIndex + 1));\n                    startIndex = -1;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void Main()\n    {\n        string input = \"( ) (( )) (( )( ))\";\n        List<string> groups = SeparateParenGroups(input);\n        Console.WriteLine(string.Join(\", \", groups)); // Output: (), (()), (()())\n    }\n}"}
{"task_id": "HumanEval_csharp/2", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive floating point number, it can be decomposed into\n        /// and integer part (largest integer smaller than given number) and decimals\n        /// (leftover part always smaller than 1).\n        /// \n        /// Return the decimal part of the number.\n        /// >>> TruncateNumber(3.5)\n        /// 0.5\n        /// \n        /// </summary>\n        public static double TruncateNumber(double number) \n        {\n            // Extract the integer part using Math.Floor\n            int integerPart = (int)Math.Floor(number);\n            \n            // Subtract the integer part from the original number to get the decimal part\n            double decimalPart = number - integerPart;\n            \n            return decimalPart;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(TruncateNumber(3.5)); // Output: 0.5\n            Console.WriteLine(TruncateNumber(123.456)); // Output: 0.456\n            Console.WriteLine(TruncateNumber(0.789)); // Output: 0.789\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You're given a list of deposit and withdrawal operations on a bank account that starts with\n        /// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n        /// at that point function should return True. Otherwise it should return False.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero(List<int> operations) \n        {\n            int balance = 0;\n            foreach (var operation in operations)\n            {\n                balance += operation;\n                if (balance < 0)\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(BelowZero(new List<int> { 1, 2, 3 })); // False\n            Console.WriteLine(BelowZero(new List<int> { 1, 2, -4, 5 })); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/4", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static double MeanAbsoluteDeviation(List<double> numbers)\n    {\n        if (numbers == null || numbers.Count == 0)\n        {\n            throw new ArgumentException(\"The list of numbers cannot be null or empty.\");\n        }\n\n        // Calculate the mean of the numbers\n        double mean = numbers.Average();\n\n        // Compute the absolute differences from the mean\n        List<double> absoluteDifferences = numbers.Select(x => Math.Abs(x - mean)).ToList();\n\n        // Calculate the average of these absolute differences\n        double mad = absoluteDifferences.Average();\n\n        return mad;\n    }\n\n    public static void Main()\n    {\n        List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0 };\n        double mad = MeanAbsoluteDeviation(numbers);\n        Console.WriteLine(mad); // Output: 1.0\n    }\n}"}
{"task_id": "HumanEval_csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n        /// >>> Intersperse([], 4)\n        /// []\n        /// >>> Intersperse([1, 2, 3], 4)\n        /// [1, 4, 2, 4, 3]\n        /// \n        /// </summary>\n        public static List<int> Intersperse(List<int> numbers, int delimeter) \n        {\n            if (numbers == null || numbers.Count == 0)\n                return new List<int>();\n\n            List<int> result = new List<int>();\n            for (int i = 0; i < numbers.Count; i++)\n            {\n                result.Add(numbers[i]);\n                if (i < numbers.Count - 1)\n                {\n                    result.Add(delimeter);\n                }\n            }\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int>();\n            Console.WriteLine(\"Test 1: \" + string.Join(\", \", Intersperse(test1, 4))); // Expected output: []\n\n            List<int> test2 = new List<int> { 1, 2, 3 };\n            Console.WriteLine(\"Test 2: \" + string.Join(\", \", Intersperse(test2, 4))); // Expected output: [1, 4, 2, 4, 3]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n        /// For each of the group, output the deepest level of nesting of parentheses.\n        /// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n        /// \n        /// >>> ParseNestedParens('(()()) ((())) () ((())()())')\n        /// [2, 3, 1, 3]\n        /// \n        /// </summary>\n        public static List<int> ParseNestedParens(string paren_string) \n        {\n            // Split the input string into individual groups of parentheses\n            var groups = paren_string.Split(' ');\n            \n            // Initialize a list to store the depths of each group\n            var depths = new List<int>();\n            \n            foreach (var group in groups)\n            {\n                // Use a stack to keep track of the depth as we traverse the string\n                int maxDepth = 0;\n                int currentDepth = 0;\n                \n                foreach (char ch in group)\n                {\n                    if (ch == '(')\n                    {\n                        currentDepth++;\n                        if (currentDepth > maxDepth)\n                        {\n                            maxDepth = currentDepth;\n                        }\n                    }\n                    else if (ch == ')')\n                    {\n                        currentDepth--;\n                    }\n                }\n                \n                // Add the maximum depth of the current group to the list\n                depths.Add(maxDepth);\n            }\n            \n            return depths;\n        }\n        \n        static void Main(string[] args)\n        {\n            // Test the function with a sample input\n            string testInput = \"(()()) ((())) () ((())()())\";\n            List<int> result = ParseNestedParens(testInput);\n            \n            // Print the result\n            Console.WriteLine(string.Join(\", \", result)); // Output: 2, 3, 1, 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/7", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Filter an input list of strings only for ones that contain given substring\n        /// >>> FilterBySubstring([], 'a')\n        /// []\n        /// >>> FilterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n        /// ['abc', 'bacd', 'array']\n        /// \n        /// </summary>\n        public static List<string> FilterBySubstring(List<string> strings, string substring) \n        {\n            if (strings == null || substring == null)\n            {\n                return new List<string>(); // Return an empty list if input is null\n            }\n            \n            return strings.Where(s => s.Contains(substring)).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Test Case 1: Empty List\");\n            var result1 = FilterBySubstring(new List<string>(), 'a');\n            Console.WriteLine($\"Expected: [] Actual: [{string.Join(\", \", result1)}]\");\n\n            Console.WriteLine(\"Test Case 2: Single Match\");\n            var result2 = FilterBySubstring(new List<string> { \"abc\", \"bacd\", \"cde\", \"array\" }, 'a');\n            Console.WriteLine($\"Expected: [abc, bacd, array] Actual: [{string.Join(\", \", result2)}]\");\n\n            Console.WriteLine(\"Test Case 3: No Match\");\n            var result3 = FilterBySubstring(new List<string> { \"bacd\", \"cde\", \"array\" }, 'x');\n            Console.WriteLine($\"Expected: [] Actual: [{string.Join(\", \", result3)}]\");\n\n            Console.WriteLine(\"Test Case 4: Multiple Match\");\n            var result4 = FilterBySubstring(new List<string> { \"axxx\", \"baxyz\", \"cdefg\", \"array\" }, 'a');\n            Console.WriteLine($\"Expected: [axxx, baxyz, array] Actual: [{string.Join(\", \", result4)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        /// Empty sum should be equal to 0 and empty product should be equal to 1.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static List<int> SumProduct(List<int> numbers) \n        {\n            if (numbers == null || numbers.Count == 0)\n            {\n                return new List<int> { 0, 1 };\n            }\n\n            int sum = numbers.Sum();\n            int product = numbers.Aggregate(1, (acc, num) => acc * num);\n\n            return new List<int> { sum, product };\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine($\"SumProduct([]): {string.Join(\", \", SumProduct(new List<int>()))}\");\n            Console.WriteLine($\"SumProduct([1, 2, 3, 4]): {string.Join(\", \", SumProduct(new List<int> { 1, 2, 3, 4 }))}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/9", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// From a given list of integers, generate a list of rolling maximum element found until given moment\n        /// in the sequence.\n        /// >>> RollingMax([1, 2, 3, 2, 3, 4, 2])\n        /// [1, 2, 3, 3, 3, 4, 4]\n        /// \n        /// </summary>\n        public static List<int> RollingMax(List<int> numbers)\n        {\n            if (numbers == null || numbers.Count == 0)\n                return new List<int>();\n\n            List<int> rollingMax = new List<int>();\n            int currentMax = int.MinValue;\n\n            foreach (int number in numbers)\n            {\n                if (number > currentMax)\n                {\n                    currentMax = number;\n                }\n                rollingMax.Add(currentMax);\n            }\n\n            return rollingMax;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> numbers = new List<int> { 1, 2, 3, 2, 3, 4, 2 };\n            List<int> result = RollingMax(numbers);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 2, 3, 3, 3, 4, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/10", "language": "csharp", "completion": "using System;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Find the shortest palindrome that begins with a supplied string.\n        /// Algorithm idea is simple:\n        /// - Find the longest postfix of supplied string that is a palindrome.\n        /// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        /// >>> MakePalindrome('')\n        /// ''\n        /// >>> MakePalindrome('cat')\n        /// 'catac'\n        /// >>> MakePalindrome('cata')\n        /// 'catac'\n        /// \n        /// </summary>\n        public static string MakePalindrome(string string0) \n        {\n            if (string.IsNullOrEmpty(string0))\n                return string0;\n\n            int length = string0.Length;\n            for (int i = length - 1; i >= 0; i--)\n            {\n                if (IsPalindrome(string0.Substring(i)))\n                {\n                    string prefix = string0.Substring(0, i);\n                    string reversedPrefix = ReverseString(prefix);\n                    return string0 + reversedPrefix;\n                }\n            }\n\n            // If no palindromic suffix is found, simply reverse the entire string and append it to the original string.\n            return ReverseString(string0) + string0;\n        }\n\n        private static bool IsPalindrome(string s)\n        {\n            int left = 0;\n            int right = s.Length - 1;\n\n            while (left < right)\n            {\n                if (s[left] != s[right])\n                    return false;\n                left++;\n                right--;\n            }\n\n            return true;\n        }\n\n        private static string ReverseString(string s)\n        {\n            char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(MakePalindrome(\"\")); // Output: \"\"\n            Console.WriteLine(MakePalindrome(\"cat\")); // Output: \"catac\"\n            Console.WriteLine(MakePalindrome(\"cata\")); // Output: \"catac\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/11", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input are two strings a and b consisting only of 1s and 0s.\n        /// Perform binary XOR on these inputs and return result also as a string.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor(string a, string b)\n        {\n            // Check if the lengths of the strings are equal\n            if (a.Length != b.Length)\n            {\n                throw new ArgumentException(\"Strings must be of equal length.\");\n            }\n\n            char[] result = new char[a.Length];\n\n            for (int i = 0; i < a.Length; i++)\n            {\n                // Perform XOR operation on each character\n                if (a[i] != b[i])\n                {\n                    result[i] = '1';\n                }\n                else\n                {\n                    result[i] = '0';\n                }\n            }\n\n            return new string(result);\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StringXor(\"010\", \"110\")); // Output: 100\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest(List<string> strings)\n        {\n            if (strings == null || strings.Count == 0)\n            {\n                return \"None\";\n            }\n\n            string longestString = strings[0];\n            foreach (var str in strings)\n            {\n                if (str.Length > longestString.Length)\n                {\n                    longestString = str;\n                }\n            }\n\n            return longestString;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Longest(new List<string>())); // Output: None\n            Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" })); // Output: a\n            Console.WriteLine(Longest(new List<string> { \"a\", \"bb\", \"ccc\" })); // Output: ccc\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/13", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    /// <summary> \n    /// Returns the greatest common divisor of two integers a and b\n    /// </summary>\n    public static int GreatestCommonDivisor(int a, int b)\n    {\n        // Ensure both numbers are positive for simplicity in the algorithm\n        a = Math.Abs(a);\n        b = Math.Abs(b);\n\n        // Use the Euclidean algorithm to find the GCD\n        while (b != 0)\n        {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(GreatestCommonDivisor(3, 5)); // Output: 1\n        Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n        Console.WriteLine(GreatestCommonDivisor(-25, 15)); // Output: 5 (ignoring sign)\n    }\n}"}
{"task_id": "HumanEval_csharp/14", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return list of all prefixes from shortest to longest of the input string\n        /// >>> AllPrefixes('abc')\n        /// ['a', 'ab', 'abc']\n        /// \n        /// </summary>\n        public static List<string> AllPrefixes(string string0) \n        {\n            List<string> prefixes = new List<string>();\n            \n            for (int i = 1; i <= string0.Length; i++)\n            {\n                prefixes.Add(string0.Substring(0, i));\n            }\n            \n            return prefixes;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Example usage\n            List<string> result = AllPrefixes(\"abc\");\n            Console.WriteLine(string.Join(\", \", result)); // Output: a, ab, abc\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/15", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n        /// >>> StringSequence(0)\n        /// '0'\n        /// >>> StringSequence(5)\n        /// '0 1 2 3 4 5'\n        /// \n        /// </summary>\n        public static string StringSequence(int n)\n        {\n            if (n < 0)\n            {\n                throw new ArgumentException(\"The parameter must be non-negative.\");\n            }\n\n            List<string> numbers = new List<string>();\n\n            for (int i = 0; i <= n; i++)\n            {\n                numbers.Add(i.ToString());\n            }\n\n            return string.Join(\" \", numbers);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(StringSequence(0));  // Output: '0'\n            Console.WriteLine(StringSequence(5));  // Output: '0 1 2 3 4 5'\n            Console.WriteLine(StringSequence(10)); // Output: '0 1 2 3 4 5 6 7 8 9 10'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/16", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int CountDistinctCharacters(string string0)\n    {\n        // Create a HashSet to store distinct characters\n        HashSet<char> distinctChars = new HashSet<char>();\n\n        // Convert the string to lowercase to make the comparison case-insensitive\n        string lowerCaseString = string0.ToLower();\n\n        // Iterate through each character in the string\n        foreach (char c in lowerCaseString)\n        {\n            // Add the character to the HashSet\n            distinctChars.Add(c);\n        }\n\n        // Return the number of distinct characters\n        return distinctChars.Count;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(CountDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        Console.WriteLine(CountDistinctCharacters(\"Jerry\"));   // Output: 4\n    }\n}"}
{"task_id": "HumanEval_csharp/17", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input to this function is a string representing musical notes in a special ASCII format.\n        /// Your task is to parse this string and return list of integers corresponding to how many beats does each\n        /// note last.\n        /// \n        /// Here is a legend:\n        /// 'o' - whole note, lasts four beats\n        /// 'o|' - half note, lasts two beats\n        /// '.|' - quarter note, lasts one beat\n        /// \n        /// >>> ParseMusic('o o| .| o| o| .| .| .| .| o o')\n        /// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n        /// \n        /// </summary>\n        public static List<int> ParseMusic(string music_string)\n        {\n            // Define a list to store the beats\n            List<int> beats = new List<int>();\n            \n            // Use regular expressions to find all matches of note patterns in the input string\n            Regex regex = new Regex(@\"(o|o\\||\\.\\|)\");\n            MatchCollection matches = regex.Matches(music_string);\n            \n            // Iterate through each match and determine its beat value\n            foreach (Match match in matches)\n            {\n                string note = match.Value;\n                int beatValue;\n                \n                switch (note)\n                {\n                    case \"o\":\n                        beatValue = 4;\n                        break;\n                    case \"o|\":\n                        beatValue = 2;\n                        break;\n                    case \".|\":\n                        beatValue = 1;\n                        break;\n                    default:\n                        throw new ArgumentException(\"Invalid note format\");\n                }\n                \n                // Add the beat value to the list\n                beats.Add(beatValue);\n            }\n            \n            return beats;\n        }\n        \n        static void Main(string[] args)\n        {\n            string musicString = \"o o| .| o| o| .| .| .| .| o o\";\n            List<int> result = ParseMusic(musicString);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/18", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Find how many times a given substring can be found in the original string. Count overlaping cases.\n        /// >>> HowManyTimes('', 'a')\n        /// 0\n        /// >>> HowManyTimes('aaa', 'a')\n        /// 3\n        /// >>> HowManyTimes('aaaa', 'aa')\n        /// 3\n        /// \n        /// </summary>\n        public static int HowManyTimes(string string0, string substring) \n        {\n            if (string.IsNullOrEmpty(substring) || string.IsNullOrEmpty(string0))\n                return 0;\n\n            int count = 0;\n            int index = 0;\n\n            while ((index = string0.IndexOf(substring, index)) != -1)\n            {\n                count++;\n                index++; // Move to the next character to allow for overlapping matches\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(HowManyTimes(\"\", \"a\")); // Output: 0\n            Console.WriteLine(HowManyTimes(\"aaa\", \"a\")); // Output: 3\n            Console.WriteLine(HowManyTimes(\"aaaa\", \"aa\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/19", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        /// Return the string with numbers sorted from smallest to largest\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers(string numbers) \n        {\n            // Dictionary to map number words to their corresponding integer values\n            var numberMap = new Dictionary<string, int>\n            {\n                {\"zero\", 0},\n                {\"one\", 1},\n                {\"two\", 2},\n                {\"three\", 3},\n                {\"four\", 4},\n                {\"five\", 5},\n                {\"six\", 6},\n                {\"seven\", 7},\n                {\"eight\", 8},\n                {\"nine\", 9}\n            };\n\n            // Split the input string into an array of number words\n            var numberWords = numbers.Split(' ');\n\n            // Create a list to store tuples of (number word, corresponding integer value)\n            var numberTuples = new List<Tuple<string, int>>();\n\n            foreach (var word in numberWords)\n            {\n                if (numberMap.ContainsKey(word))\n                {\n                    numberTuples.Add(new Tuple<string, int>(word, numberMap[word]));\n                }\n            }\n\n            // Sort the list of tuples based on the integer value\n            var sortedNumbers = numberTuples.OrderBy(t => t.Item2).Select(t => t.Item1).ToArray();\n\n            // Join the sorted number words back into a space-delimited string\n            return string.Join(\" \", sortedNumbers);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SortNumbers(\"three one five\")); // Output: \"one three five\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/20", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n        /// other and return them in order (smaller number, larger number).\n        /// >>> FindClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        /// (2.0, 2.2)\n        /// >>> FindClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        /// (2.0, 2.0)\n        /// \n        /// </summary>\n        public static List<double> FindClosestElements(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n\n            double minDifference = double.MaxValue;\n            double firstNumber = 0;\n            double secondNumber = 0;\n\n            for (int i = 0; i < numbers.Count; i++)\n            {\n                for (int j = i + 1; j < numbers.Count; j++)\n                {\n                    double difference = Math.Abs(numbers[i] - numbers[j]);\n                    if (difference < minDifference)\n                    {\n                        minDifference = difference;\n                        firstNumber = numbers[i];\n                        secondNumber = numbers[j];\n                    }\n                }\n            }\n\n            return new List<double> { Math.Min(firstNumber, secondNumber), Math.Max(firstNumber, secondNumber) };\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.2 }))); // Output: 2.0, 2.2\n            Console.WriteLine(string.Join(\", \", FindClosestElements(new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0, 2.0 }))); // Output: 2.0, 2.0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/21", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Rescales a list of numbers to the range [0, 1] such that the smallest number becomes 0 and the largest becomes 1.\n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n            }\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n            double range = max - min;\n\n            List<double> rescaledNumbers = new List<double>();\n            foreach (double number in numbers)\n            {\n                double rescaledValue = (number - min) / range;\n                rescaledNumbers.Add(rescaledValue);\n            }\n\n            return rescaledNumbers;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n            List<double> rescaledNumbers = RescaleToUnit(numbers);\n            Console.WriteLine(string.Join(\", \", rescaledNumbers)); // Output: 0.0, 0.25, 0.5, 0.75, 1.0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Filter given list of any python values only for integers\n        /// >>> FilterIntegers(['a', 3.14, 5])\n        /// [5]\n        /// >>> FilterIntegers([1, 2, 3, 'abc', {}, []])\n        /// [1, 2, 3]\n        /// \n        /// </summary>\n        public static List<int> FilterIntegers(List<object> values) \n        {\n            List<int> integers = new List<int>();\n            \n            foreach (var value in values)\n            {\n                if (value is int integerValue)\n                {\n                    integers.Add(integerValue);\n                }\n            }\n            \n            return integers;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<object> values1 = new List<object> { 'a', 3.14, 5 };\n            List<int> result1 = FilterIntegers(values1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 5\n\n            List<object> values2 = new List<object> { 1, 2, 3, 'abc', new Dictionary<string, string>(), new List<int>() };\n            List<int> result2 = FilterIntegers(values2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 1, 2, 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/23", "language": "csharp", "completion": "if (string.IsNullOrEmpty(string0))\n            {\n                return 0;\n            }\n            else\n            {\n                return string0.Length;\n            }\n        }\n\n        /// <summary>\n        /// You're an expert C# programmer\n        /// Check if a given string is palindrome or not\n        /// >>> Palindrome(\"abc\")\n        /// False\n        /// >>> Palindrome(\"aba\")\n        /// True\n        /// </summary>\n        public static bool Palindrome(string str)\n        {\n            if (string.IsNullOrEmpty(str))\n            {\n                return false;\n            }\n\n            string reversed = new string(str.Reverse().ToArray());\n            return str == reversed;\n        }\n\n        /// <summary>\n        /// You're an expert C# programmer\n        /// Reverse the given string\n        /// >>> Reverse(\"abc\")\n        /// \"cba\"\n        /// </summary>\n        public static string Reverse(string str)\n        {\n            if (string.IsNullOrEmpty(str))\n            {\n                return \"\";\n            }\n\n            char[] charArray = str.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n\n        /// <summary>\n        /// You're an expert C# programmer\n        /// Remove duplicate characters from a given string\n        /// >>> Removeduplicates(\"abc\")\n        /// \"abc\"\n        /// >>> Removeduplicates(\"aabcc\")\n        /// \"abc\"\n        /// </summary>\n        public static string RemoveDuplicates(string str)\n        {\n            if (string.IsNullOrEmpty(str))\n            {\n                return \"\";\n            }\n\n            HashSet<char> charSet = new HashSet<char>(str);\n            return new string(charSet.ToArray());\n        }\n\n        /// <summary>\n        /// You're an expert C# programmer\n        /// Compare two objects and return true if they are equal, otherwise false\n        /// using KellermanSoftware.CompareNetObjects library\n        /// >>> CompareObjects(obj1, obj2)\n        /// True or False\n        /// </summary>\n        public static bool CompareObjects(object obj1, object obj2)\n        {\n            CompareLogic compareLogic = new CompareLogic();\n            ComparisonResult result = compareLogic.Compare(obj1, obj2);\n            return result.AreEqual;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases for Strlen\n            Console.WriteLine(Strlen(\"\"));         // Output: 0\n            Console.WriteLine(Strlen(\"abc\"));      // Output: 3\n\n            // Test cases for Palindrome\n            Console.WriteLine(Palindrome(\"abc\"));  // Output: False\n            Console.WriteLine(Palindrome(\"aba\"));  // Output: True\n\n            // Test cases for Reverse\n            Console.WriteLine(Reverse(\"abc\"));    // Output: \"cba\"\n\n            // Test cases for RemoveDuplicates\n            Console.WriteLine(RemoveDuplicates(\"abc\"));     // Output: \"abc\"\n            Console.WriteLine(RemoveDuplicates(\"aabcc\"));   // Output: \"abc\"\n\n            // Test cases for CompareObjects\n            var obj1 = new { Name = \"John\", Age = 30 };\n            var obj2 = new { Name = \"John\", Age = 30 };\n            Console.WriteLine(CompareObjects(obj1, obj2));  // Output: True\n\n            var obj3 = new { Name = \"John\", Age = 40 };\n            Console.WriteLine(CompareObjects(obj1, obj3));  // Output: False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/24", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// For a given number n, find the largest number that divides n evenly, smaller than n\n        /// </summary>\n        public static int LargestDivisor(int n) \n        {\n            if (n <= 0) throw new ArgumentException(\"Number must be positive\");\n            \n            for (int i = (int)Math.Sqrt(n); i >= 1; i--)\n            {\n                if (n % i == 0)\n                {\n                    return i; // Return the largest divisor found\n                }\n            }\n            \n            throw new ArgumentException(\"No divisors found\"); // If no divisors are found, this should not happen for positive numbers\n        }\n        \n        static void Main(string[] args)\n        {\n            Console.WriteLine(LargestDivisor(15)); // Output: 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return list of prime factors of given integer in the order from smallest to largest.\n        /// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n        /// Input number should be equal to the product of all factors\n        /// >>> Factorize(8)\n        /// [2, 2, 2]\n        /// >>> Factorize(25)\n        /// [5, 5]\n        /// >>> Factorize(70)\n        /// [2, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> Factorize(int n)\n        {\n            if (n <= 1) return new List<int>(); // No prime factors for numbers less than or equal to 1\n\n            List<int> factors = new List<int>();\n            // Check for the number of 2s that divide n\n            while (n % 2 == 0)\n            {\n                factors.Add(2);\n                n /= 2;\n            }\n\n            // n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n            for (int i = 3; i * i <= n; i += 2)\n            {\n                // While i divides n, add i and divide n\n                while (n % i == 0)\n                {\n                    factors.Add(i);\n                    n /= i;\n                }\n            }\n\n            // This condition is to handle the case when n is a prime number\n            // greater than 2\n            if (n > 2)\n            {\n                factors.Add(n);\n            }\n\n            return factors;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Factorize(8): \" + string.Join(\", \", Factorize(8))); // Output: [2, 2, 2]\n            Console.WriteLine(\"Factorize(25): \" + string.Join(\", \", Factorize(25))); // Output: [5, 5]\n            Console.WriteLine(\"Factorize(70): \" + string.Join(\", \", Factorize(70))); // Output: [2, 5, 7]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/26", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// From a list of integers, remove all elements that occur more than once.\n        /// Keep order of elements left the same as in the input.\n        /// >>> RemoveDuplicates([1, 2, 3, 2, 4])\n        /// [1, 3, 4]\n        /// \n        /// </summary>\n        public static List<int> RemoveDuplicates(List<int> numbers) \n        {\n            // Use a HashSet to track elements that have been seen\n            HashSet<int> seen = new HashSet<int>();\n            List<int> result = new List<int>();\n\n            foreach (int number in numbers)\n            {\n                if (!seen.Contains(number))\n                {\n                    // If the number hasn't been seen, add it to the result list and mark it as seen\n                    result.Add(number);\n                    seen.Add(number);\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            List<int> numbers = new List<int> { 1, 2, 3, 2, 4 };\n            List<int> uniqueNumbers = RemoveDuplicates(numbers);\n            Console.WriteLine(string.Join(\", \", uniqueNumbers)); // Output: 1, 3, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/27", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase(string str)\n        {\n            char[] chars = str.ToCharArray();\n            for (int i = 0; i < chars.Length; i++)\n            {\n                if (char.IsLower(chars[i]))\n                {\n                    chars[i] = char.ToUpper(chars[i]);\n                }\n                else if (char.IsUpper(chars[i]))\n                {\n                    chars[i] = char.ToLower(chars[i]);\n                }\n            }\n            return new string(chars);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FlipCase(\"Hello\")); // Output: hELLO\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Concatenate list of strings into a single string\n        /// >>> Concatenate([])\n        /// ''\n        /// >>> Concatenate(['a', 'b', 'c'])\n        /// 'abc'\n        /// </summary>\n        public static string Concatenate(List<string> strings) \n        {\n            if (strings == null || strings.Count == 0)\n            {\n                return \"\";\n            }\n            return string.Join(\"\", strings);\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<string> list1 = new List<string> { \"a\", \"b\", \"c\" };\n            Console.WriteLine(Concatenate(list1)); // Output: 'abc'\n\n            List<string> list2 = new List<string>();\n            Console.WriteLine(Concatenate(list2)); // Output: ''\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/29", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Filters an input list of strings to include only those that start with the specified prefix.\n        /// </summary>\n        public static List<string> FilterByPrefix(List<string> strings, string prefix) \n        {\n            if (strings == null || prefix == null)\n            {\n                throw new ArgumentNullException(\"Input list or prefix cannot be null\");\n            }\n\n            return strings.Where(s => s.StartsWith(prefix)).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<string> test1 = new List<string>();\n            Console.WriteLine(\"Test 1: \" + string.Join(\", \", FilterByPrefix(test1, \"a\"))); // Expected output: []\n\n            List<string> test2 = new List<string> { \"abc\", \"bcd\", \"cde\", \"array\" };\n            Console.WriteLine(\"Test 2: \" + string.Join(\", \", FilterByPrefix(test2, \"a\"))); // Expected output: ['abc', 'array']\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive(List<int> l) \n        {\n            return l.Where(x => x > 0).ToList();\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/31", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool IsPrime(int n)\n    {\n        // Numbers less than 2 are not prime\n        if (n < 2) return false;\n        \n        // Check divisibility by 2 or any odd number up to the square root of n\n        for (int i = 2; i * i <= n; i++)\n        {\n            if (n % i == 0) return false;\n        }\n        \n        return true;\n    }\n\n    // Example usage\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(IsPrime(6));   // False\n        Console.WriteLine(IsPrime(101)); // True\n        Console.WriteLine(IsPrime(11));  // True\n        Console.WriteLine(IsPrime(13441)); // True\n        Console.WriteLine(IsPrime(61));  // True\n        Console.WriteLine(IsPrime(4));   // False\n        Console.WriteLine(IsPrime(1));   // False\n    }\n}"}
{"task_id": "HumanEval_csharp/33", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// This function takes a list l and returns a list l' such that\n        /// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n        /// to the values of the corresponding indicies of l, but sorted.\n        /// >>> SortThird([1, 2, 3])\n        /// [1, 2, 3]\n        /// >>> SortThird([5, 6, 3, 4, 8, 9, 2])\n        /// [2, 6, 3, 4, 8, 9, 5]\n        /// \n        /// </summary>\n        public static List<int> SortThird(List<int> l) \n        {\n            // Extract elements at indices divisible by three\n            var thirdElements = new List<int>();\n            for (int i = 0; i < l.Count; i++)\n            {\n                if (i % 3 == 0)\n                {\n                    thirdElements.Add(l[i]);\n                }\n            }\n\n            // Sort the extracted elements\n            thirdElements.Sort();\n\n            // Create a new list to store the result\n            var sortedList = l.ToList();\n\n            // Replace elements at indices divisible by three with sorted values\n            int j = 0;\n            for (int i = 0; i < sortedList.Count; i++)\n            {\n                if (i % 3 == 0)\n                {\n                    sortedList[i] = thirdElements[j];\n                    j++;\n                }\n            }\n\n            return sortedList;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 1, 2, 3 };\n            Console.WriteLine($\"[{string.Join(\", \", SortThird(test1))}]\"); // Expected output: [1, 2, 3]\n\n            List<int> test2 = new List<int> { 5, 6, 3, 4, 8, 9, 2 };\n            Console.WriteLine($\"[{string.Join(\", \", SortThird(test2))}]\"); // Expected output: [2, 6, 3, 4, 8, 9, 5]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique(List<int> l) \n        {\n            // Use LINQ to select distinct elements and then convert to a list\n            var uniqueElements = l.Distinct().ToList();\n            \n            // Sort the list of unique elements\n            uniqueElements.Sort();\n            \n            return uniqueElements;\n        }\n        \n        static void Main(string[] args)\n        {\n            List<int> numbers = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> uniqueSortedNumbers = Unique(numbers);\n            \n            Console.WriteLine(string.Join(\", \", uniqueSortedNumbers)); // Output: 0, 2, 3, 5, 9, 123\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/35", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return maximum element in the list.\n        /// >>> MaxElement([1, 2, 3])\n        /// 3\n        /// >>> MaxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// 123\n        /// \n        /// </summary>\n        public static int MaxElement(List<int> l) \n        {\n            if (l == null || !l.Any())\n            {\n                throw new ArgumentException(\"The list is empty or null.\");\n            }\n            \n            return l.Max();\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> numbers1 = new List<int> { 1, 2, 3 };\n            Console.WriteLine(MaxElement(numbers1)); // Output: 3\n\n            List<int> numbers2 = new List<int> { 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 };\n            Console.WriteLine(MaxElement(numbers2)); // Output: 123\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/36", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n        /// >>> FizzBuzz(50)\n        /// 0\n        /// >>> FizzBuzz(78)\n        /// 2\n        /// >>> FizzBuzz(79)\n        /// 3\n        /// \n        /// </summary>\n        public static int FizzBuzz (int n) \n        {\n            int count = 0;\n\n            for (int i = 0; i < n; i++)\n            {\n                if (i % 11 == 0 || i % 13 == 0)\n                {\n                    string numberStr = i.ToString();\n                    count += numberStr.Count(c => c == '7');\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FizzBuzz(50));  // Output: 0\n            Console.WriteLine(FizzBuzz(78));  // Output: 2\n            Console.WriteLine(FizzBuzz(79));  // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// This function takes a list l and returns a list l' such that\n        /// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n        /// to the values of the even indicies of l, but sorted.\n        /// >>> SortEven([1, 2, 3])\n        /// [1, 2, 3]\n        /// >>> SortEven([5, 6, 3, 4])\n        /// [3, 6, 5, 4]\n        /// \n        /// </summary>\n        public static List<int> SortEven(List<int> l) \n        {\n            // Extract the values at even indices\n            var evens = new List<int>();\n            for (int i = 0; i < l.Count; i += 2)\n            {\n                evens.Add(l[i]);\n            }\n            \n            // Sort the extracted even-indexed values\n            evens.Sort();\n            \n            // Reconstruct the list with sorted even-indexed values and original odd-indexed values\n            var result = new List<int>(l);\n            int evenIndex = 0;\n            for (int i = 0; i < l.Count; i += 2)\n            {\n                result[i] = evens[evenIndex++];\n            }\n            \n            return result;\n        }\n        \n        // Example usage\n        public static void Main(string[] args)\n        {\n            var list1 = new List<int> { 1, 2, 3 };\n            var sortedList1 = SortEven(list1);\n            Console.WriteLine($\"[{string.Join(\", \", sortedList1)}]\"); // Output: [1, 2, 3]\n            \n            var list2 = new List<int> { 5, 6, 3, 4 };\n            var sortedList2 = SortEven(list2);\n            Console.WriteLine($\"[{string.Join(\", \", sortedList2)}]\"); // Output: [3, 6, 5, 4]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/39", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// PrimeFib returns n-th number that is a Fibonacci number and it's also prime.\n        /// >>> PrimeFib(1)\n        /// 2\n        /// >>> PrimeFib(2)\n        /// 3\n        /// >>> PrimeFib(3)\n        /// 5\n        /// >>> PrimeFib(4)\n        /// 13\n        /// >>> PrimeFib(5)\n        /// 89\n        /// \n        /// </summary>\n        public static int PrimeFib(int n)\n        {\n            List<int> fibonacciNumbers = new List<int>();\n            int a = 0, b = 1;\n            \n            while (fibonacciNumbers.Count < 1000) // Generate enough Fibonacci numbers to find the n-th one\n            {\n                int nextFib = a + b;\n                fibonacciNumbers.Add(nextFib);\n                a = b;\n                b = nextFib;\n            }\n            \n            List<int> primeFibs = new List<int>();\n            \n            foreach (var fib in fibonacciNumbers)\n            {\n                if (IsPrime(fib))\n                {\n                    primeFibs.Add(fib);\n                }\n            }\n            \n            return primeFibs[n - 1];\n        }\n        \n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n            \n            for (int i = 3; i * i <= number; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// TriplesSumToZero takes a list of integers as an input.\n        /// it returns True if there are three distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// </summary>\n        public static bool TriplesSumToZero(List<int> l) \n        {\n            // Sort the list to facilitate two-pointer technique\n            l.Sort();\n            \n            // Iterate through the list\n            for (int i = 0; i < l.Count - 2; i++)\n            {\n                // Avoid duplicates by skipping same elements\n                if (i > 0 && l[i] == l[i - 1]) continue;\n                \n                // Initialize two pointers: one starting right after the current element, and the other at the end of the list\n                int left = i + 1;\n                int right = l.Count - 1;\n                \n                while (left < right)\n                {\n                    int sum = l[i] + l[left] + l[right];\n                    \n                    // If the sum is zero, we found a triplet that sums to zero\n                    if (sum == 0) return true;\n                    \n                    // Move the pointers based on the comparison of sum with zero\n                    if (sum < 0) left++;\n                    else right--;\n                }\n            }\n            \n            // If no such triplet is found, return false\n            return false;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/41", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Imagine a road that's a perfectly straight infinitely long line.\n        /// n cars are driving left to right;  simultaneously, a different set of n cars\n        /// are driving right to left.   The two sets of cars start out being very far from\n        /// each other.  All cars move in the same speed.  Two cars are said to collide\n        /// when a car that's moving left to right hits a car that's moving right to left.\n        /// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n        /// in their trajectory as if they did not collide.\n        /// \n        /// This function outputs the number of such collisions.\n        /// \n        /// </summary>\n        public static int CarRaceCollision(int n) \n        {\n            // Each car from the left-to-right set will collide with a car from the right-to-left set.\n            // Since there are n cars in each direction, the total number of collisions is 2n.\n            return 2 * n;\n        }\n\n        public static void Main(string[] args)\n        {\n            int n = 5; // Example input\n            Console.WriteLine($\"Number of collisions for {n} cars: {CarRaceCollision(n)}\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/42", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return list with elements incremented by 1.\n        /// >>> IncrList([1, 2, 3])\n        /// [2, 3, 4]\n        /// >>> IncrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [6, 4, 6, 3, 4, 4, 10, 1, 124]\n        /// \n        /// </summary>\n        public static List<int> IncrList(List<int> l) \n        {\n            // Create a new list to store the incremented values\n            List<int> result = new List<int>();\n            \n            // Iterate through each element in the input list\n            foreach (int num in l)\n            {\n                // Increment the value by 1 and add it to the result list\n                result.Add(num + 1);\n            }\n            \n            // Return the resulting list\n            return result;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 1, 2, 3 };\n            List<int> test2 = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            \n            // Call the IncrList method and print the results\n            Console.WriteLine(string.Join(\", \", IncrList(test1))); // Output: 2, 3, 4\n            Console.WriteLine(string.Join(\", \", IncrList(test2))); // Output: 6, 4, 6, 3, 4, 4, 10, 1, 124\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// PairsSumToZero takes a list of integers as an input.\n        /// it returns True if there are two distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool PairsSumToZero(List<int> l) \n        {\n            if (l == null || l.Count < 2)\n                return false;\n\n            for (int i = 0; i < l.Count - 1; i++)\n            {\n                for (int j = i + 1; j < l.Count; j++)\n                {\n                    if (l[i] + l[j] == 0)\n                        return true;\n                }\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 2, 4, -5, 3, 5, 7 })); // True\n            Console.WriteLine(PairsSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/44", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Change numerical base of input number x to base.\n        /// return string representation after the conversion.\n        /// base numbers are less than 10.\n        /// >>> ChangeBase(8, 3)\n        /// '22'\n        /// >>> ChangeBase(8, 2)\n        /// '1000'\n        /// >>> ChangeBase(7, 2)\n        /// '111'\n        /// </summary>\n        public static string ChangeBase(int x, int @base)\n        {\n            if (@base < 2 || @base > 9)\n            {\n                throw new ArgumentOutOfRangeException(\"Base must be between 2 and 9.\");\n            }\n\n            if (x == 0) return \"0\";\n\n            string result = \"\";\n            while (x > 0)\n            {\n                int remainder = x % @base;\n                result = remainder.ToString() + result;\n                x /= @base;\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ChangeBase(8, 3)); // Output: \"22\"\n            Console.WriteLine(ChangeBase(8, 2)); // Output: \"1000\"\n            Console.WriteLine(ChangeBase(7, 2)); // Output: \"111\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/45", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given length of a side and high return area for a triangle.\n        /// >>> TriangleArea(5, 3)\n        /// 7.5\n        /// \n        /// </summary>\n        public static double TriangleArea(int a, int h) \n        {\n            // Calculate the area using the formula: (base * height) / 2\n            return 0.5 * a * h;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            double area = TriangleArea(5, 3);\n            Console.WriteLine(area); // Output: 7.5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/46", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static int Fib4(int n)\n    {\n        if (n < 0)\n        {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        List<int> fib4Sequence = new List<int> { 0, 0, 2, 0 };\n\n        for (int i = 4; i <= n; i++)\n        {\n            int nextValue = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4];\n            fib4Sequence.Add(nextValue);\n        }\n\n        return fib4Sequence[n];\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(Fib4(5)); // Output: 4\n        Console.WriteLine(Fib4(6)); // Output: 8\n        Console.WriteLine(Fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "HumanEval_csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static object Median(List<int> l)\n    {\n        // Sort the list\n        l.Sort();\n        \n        int count = l.Count;\n        if (count % 2 == 0)\n        {\n            // If even number of elements, average the two middle numbers\n            int midIndex1 = count / 2 - 1;\n            int midIndex2 = count / 2;\n            return (l[midIndex1] + l[midIndex2]) / 2.0;\n        }\n        else\n        {\n            // If odd number of elements, take the middle number\n            int midIndex = count / 2;\n            return l[midIndex];\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        List<int> list1 = new List<int> { 3, 1, 2, 4, 5 };\n        Console.WriteLine(Median(list1)); // Output: 3\n\n        List<int> list2 = new List<int> { -10, 4, 6, 1000, 10, 20 };\n        Console.WriteLine(Median(list2)); // Output: 15.0\n    }\n}"}
{"task_id": "HumanEval_csharp/48", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if given string is a palindrome\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// </summary>\n        public static bool IsPalindrome(string text) \n        {\n            // Remove all non-alphanumeric characters and convert to lowercase\n            string cleanedText = new string(text.Where(char.IsLetterOrDigit).ToArray()).ToLower();\n            \n            // Check if the cleaned text is a palindrome\n            int left = 0;\n            int right = cleanedText.Length - 1;\n            \n            while (left < right)\n            {\n                if (cleanedText[left] != cleanedText[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsPalindrome(\"\")); // True\n            Console.WriteLine(IsPalindrome(\"aba\")); // True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/49", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Return 2^n modulo p (be aware of numerics).\n        /// </summary>\n        public static int Modp(int n, int p)\n        {\n            // Helper function to perform modular exponentiation\n            int ModularExponentiation(int baseValue, int exponent, int modulus)\n            {\n                if (modulus == 1) return 0; // Edge case: p is 1\n                int result = 1;\n                baseValue = baseValue % modulus;\n                while (exponent > 0)\n                {\n                    if ((exponent % 2) == 1) // If exponent is odd, multiply the base with result\n                        result = (result * baseValue) % modulus;\n                    exponent = exponent >> 1; // Divide exponent by 2\n                    baseValue = (baseValue * baseValue) % modulus; // Square the base\n                }\n                return result;\n            }\n\n            return ModularExponentiation(2, n, p);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Modp(3, 5));    // Output: 3\n            Console.WriteLine(Modp(1101, 101)); // Output: 2\n            Console.WriteLine(Modp(0, 101));   // Output: 1\n            Console.WriteLine(Modp(3, 11));    // Output: 8\n            Console.WriteLine(Modp(100, 101)); // Output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/51", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// RemoveVowels is a function that takes string and returns string without vowels.\n        /// </summary>\n        public static string RemoveVowels(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return \"\";\n            }\n\n            // Define a regex pattern to match all vowels (both uppercase and lowercase)\n            string pattern = \"[aeiouAEIOU]\";\n            \n            // Use Regex.Replace to remove all matched vowels from the text\n            string result = Regex.Replace(text, pattern, \"\");\n            \n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(RemoveVowels(\"\")); // Output: \"\"\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\n            Console.WriteLine(RemoveVowels('abcdef')); // Output: 'bcdf'\n            Console.WriteLine(RemoveVowels('aaaaa')); // Output: ''\n            Console.WriteLine(RemoveVowels('aaBAA')); // Output: 'B'\n            Console.WriteLine(RemoveVowels('zbcd')); // Output: 'zbcd'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if all numbers in the list l are below threshold t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold(List<int> l, int t) \n        {\n            foreach (int number in l)\n            {\n                if (number >= t)\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 2, 4, 10 }, 100)); // True\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 20, 4, 10 }, 5)); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/53", "language": "csharp", "completion": "public static int Add(int x, int y)\n{\n    return x + y;\n}"}
{"task_id": "HumanEval_csharp/54", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Check if two words have the same characters.\n        /// </summary>\n        public static bool SameChars(string s0, string s1) \n        {\n            // Remove any non-alphabetic characters and convert to lowercase for accurate comparison\n            var cleanedS0 = new string(s0.Where(char.IsLetter).ToArray()).ToLower();\n            var cleanedS1 = new string(s1.Where(char.IsLetter).ToArray()).ToLower();\n            \n            // Sort the characters in both strings\n            var sortedS0 = String.Concat(cleanedS0.OrderBy(c => c));\n            var sortedS1 = String.Concat(cleanedS1.OrderBy(c => c));\n            \n            // Compare the sorted strings\n            return sortedS0 == sortedS1;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n            Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n            Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/55", "language": "csharp", "completion": "public static int Fib(int n) \n{\n    if (n <= 0) throw new ArgumentException(\"Input must be a positive integer.\");\n    if (n == 1 || n == 2) return 1;\n    \n    int a = 1, b = 1;\n    for (int i = 3; i <= n; i++)\n    {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}"}
{"task_id": "HumanEval_csharp/56", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// brackets is a string of \"<\" and \">\".\n    /// return True if every opening bracket has a corresponding closing bracket.\n    /// \n    /// >>> CorrectBracketing(\"<\")\n    /// False\n    /// >>> CorrectBracketing(\"<>\")\n    /// True\n    /// >>> CorrectBracketing(\"<<><>>\")\n    /// True\n    /// >>> CorrectBracketing(\"><<>\")\n    /// False\n    /// \n    /// </summary>\n    public static bool CorrectBracketing(string brackets) \n    {\n        // Initialize a stack to keep track of opening brackets\n        Stack<char> stack = new Stack<char>();\n\n        // Iterate through each character in the string\n        foreach (char ch in brackets)\n        {\n            if (ch == '<')\n            {\n                // Push opening bracket onto the stack\n                stack.Push(ch);\n            }\n            else if (ch == '>')\n            {\n                // If stack is empty or top of stack is not an opening bracket, return false\n                if (stack.Count == 0)\n                {\n                    return false;\n                }\n                // Pop the last opening bracket from the stack\n                stack.Pop();\n            }\n        }\n\n        // If stack is empty, all brackets are matched correctly\n        return stack.Count == 0;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(CorrectBracketing(\"<\"));       // False\n        Console.WriteLine(CorrectBracketing(\"<>\"));      // True\n        Console.WriteLine(CorrectBracketing(\"<<><>>\"));  // True\n        Console.WriteLine(CorrectBracketing(\"><<>\"));   // False\n    }\n}"}
{"task_id": "HumanEval_csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if list elements are Monotonically increasing or decreasing.\n        /// >>> Monotonic([1, 2, 4, 20])\n        /// True\n        /// >>> Monotonic([1, 20, 4, 10])\n        /// False\n        /// >>> Monotonic([4, 1, 0, -10])\n        /// True\n        /// \n        /// </summary>\n        public static bool Monotonic(List<int> l) \n        {\n            if (l == null || l.Count <= 1)\n                return true; // A single element or an empty list is trivially monotonic.\n\n            bool increasing = true;\n            bool decreasing = true;\n\n            for (int i = 1; i < l.Count; i++)\n            {\n                if (l[i] < l[i - 1])\n                    increasing = false;\n                if (l[i] > l[i - 1])\n                    decreasing = false;\n            }\n\n            return increasing || decreasing;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Monotonic(new List<int> { 1, 2, 4, 20 })); // True\n            Console.WriteLine(Monotonic(new List<int> { 1, 20, 4, 10 })); // False\n            Console.WriteLine(Monotonic(new List<int> { 4, 1, 0, -10 })); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/58", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted unique Common elements for two lists.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// </summary>\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Convert lists to sets to remove duplicates and find intersection\n            HashSet<int> set1 = new HashSet<int>(l1);\n            HashSet<int> set2 = new HashSet<int>(l2);\n            \n            // Find the common elements\n            HashSet<int> commonSet = new HashSet<int>(set1);\n            commonSet.IntersectWith(set2);\n            \n            // Convert back to list and sort it\n            List<int> result = new List<int>(commonSet);\n            result.Sort();\n            \n            return result;\n        }\n        \n        static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", Common(new List<int> {1, 4, 3, 34, 653, 2, 5}, new List<int> {5, 7, 1, 5, 9, 653, 121}))); // Output: [1, 5, 653]\n            Console.WriteLine(string.Join(\", \", Common(new List<int> {5, 3, 2, 8}, new List<int> {3, 2}))); // Output: [2, 3]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/59", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static int LargestPrimeFactor(int n)\n    {\n        // Handle the smallest prime factor, which is 2\n        while (n % 2 == 0)\n        {\n            n /= 2;\n        }\n        \n        // Check for odd factors starting from 3 up to the square root of n\n        int largestPrimeFactor = 1;\n        for (int i = 3; i * i <= n; i += 2)\n        {\n            while (n % i == 0)\n            {\n                largestPrimeFactor = i;\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 1, then it must be a prime number itself\n        if (n > 1)\n        {\n            largestPrimeFactor = n;\n        }\n        \n        return largestPrimeFactor;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n        Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "HumanEval_csharp/60", "language": "csharp", "completion": "public static int SumToN(int n)\n{\n    return n * (n + 1) / 2;\n}"}
{"task_id": "HumanEval_csharp/61", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// brackets is a string of \"(\" and \")\".\n    /// return True if every opening bracket has a corresponding closing bracket.\n    /// \n    /// >>> CorrectBracketing(\"(\")\n    /// False\n    /// >>> CorrectBracketing(\"()\")\n    /// True\n    /// >>> CorrectBracketing(\"(()())\")\n    /// True\n    /// >>> CorrectBracketing(\")(()\")\n    /// False\n    /// \n    /// </summary>\n    public static bool CorrectBracketing(string brackets) \n    {\n        if (brackets == null || brackets.Length % 2 != 0)\n        {\n            return false; // An odd number of brackets means it can't be balanced\n        }\n\n        Stack<char> stack = new Stack<char>();\n\n        foreach (char ch in brackets)\n        {\n            if (ch == '(')\n            {\n                stack.Push(ch);\n            }\n            else if (ch == ')')\n            {\n                if (stack.Count == 0)\n                {\n                    return false; // No matching opening bracket\n                }\n                stack.Pop();\n            }\n        }\n\n        return stack.Count == 0; // If the stack is empty, all brackets were matched\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(CorrectBracketing(\"(\"));      // False\n        Console.WriteLine(CorrectBracketing(\"()\"));     // True\n        Console.WriteLine(CorrectBracketing(\"(()())\")); // True\n        Console.WriteLine(CorrectBracketing(\")(()\"));   // False\n    }\n}"}
{"task_id": "HumanEval_csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// xs represent coefficients of a polynomial.\n        /// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        /// Return Derivative of this polynomial in the same form.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative(List<int> xs)\n        {\n            // Initialize the result list\n            List<int> result = new List<int>();\n            \n            // Iterate through the coefficients starting from index 1\n            for (int i = 1; i < xs.Count; i++)\n            {\n                // Multiply each coefficient by its position to get the derivative\n                int derivativeCoefficient = xs[i] * i;\n                result.Add(derivativeCoefficient);\n            }\n            \n            return result;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 3, 1, 2, 4, 5 };\n            List<int> test2 = new List<int> { 1, 2, 3 };\n            \n            Console.WriteLine(string.Join(\", \", Derivative(test1))); // Output: 1, 4, 12, 20\n            Console.WriteLine(string.Join(\", \", Derivative(test2))); // Output: 2, 6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/63", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Computes the n-th element of the Fibfib number sequence.\n        /// </summary>\n        public static int Fibfib(int n)\n        {\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 1;\n\n            // Initialize an array to store the computed values\n            int[] fibfib = new int[n + 1];\n            fibfib[0] = 0;\n            fibfib[1] = 0;\n            fibfib[2] = 1;\n\n            // Compute the sequence using a loop\n            for (int i = 3; i <= n; i++)\n            {\n                fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n            }\n\n            return fibfib[n];\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Fibfib(1)); // Output: 0\n            Console.WriteLine(Fibfib(5)); // Output: 4\n            Console.WriteLine(Fibfib(8)); // Output: 24\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/64", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function VowelsCount which takes a string representing\n        /// a word as input and returns the number of vowels in the string.\n        /// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        /// vowel, but only when it is at the end of the given word.\n        /// \n        /// Example:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount(string s)\n        {\n            if (string.IsNullOrEmpty(s))\n                return 0;\n\n            string lowerCaseString = s.ToLower();\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n            int count = 0;\n\n            foreach (char c in lowerCaseString)\n            {\n                if (vowels.Contains(c))\n                {\n                    count++;\n                }\n            }\n\n            // Check for the special case where 'y' is at the end of the word\n            if (lowerCaseString.EndsWith('y'))\n            {\n                count++;\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n            Console.WriteLine(VowelsCount(\"happy\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"rhythm\")); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/65", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Circular shift the digits of the integer x, shift the digits right by shift\n        /// and return the result as a string.\n        /// If shift > number of digits, return digits reversed.\n        /// >>> CircularShift(12, 1)\n        /// \"21\"\n        /// >>> CircularShift(12, 2)\n        /// \"12\"\n        /// \n        /// </summary>\n        public static string CircularShift(int x, int shift) \n        {\n            // Convert the integer to a string\n            string numberStr = x.ToString();\n            \n            // Get the length of the string\n            int length = numberStr.Length;\n            \n            // Normalize the shift value if it's greater than the number of digits\n            shift = shift % length;\n            \n            // If shift is zero, return the original string\n            if (shift == 0)\n            {\n                return numberStr;\n            }\n            \n            // Perform the circular shift\n            string shiftedString = numberStr.Substring(length - shift) + numberStr.Substring(0, length - shift);\n            \n            return shiftedString;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CircularShift(12, 1)); // Output: \"21\"\n            Console.WriteLine(CircularShift(12, 2)); // Output: \"12\"\n            Console.WriteLine(CircularShift(12345, 3)); // Output: \"34512\"\n            Console.WriteLine(CircularShift(12345, 8)); // Output: \"12345\" (shift > length)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/66", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task\n        /// Write a function that takes a string as input and returns the sum of the upper characters only'\n        /// ASCII codes.\n        /// \n        /// Examples:\n        /// DigitSum(\"\") => 0\n        /// DigitSum(\"abAB\") => 131\n        /// DigitSum(\"abcCd\") => 67\n        /// DigitSum(\"helloE\") => 69\n        /// DigitSum(\"woArBld\") => 131\n        /// DigitSum(\"aAaaaXa\") => 153\n        /// \n        /// </summary>\n        public static int DigitSum(string s)\n        {\n            int sum = 0;\n            foreach (char c in s)\n            {\n                if (Char.IsUpper(c))\n                {\n                    sum += (int)c;\n                }\n            }\n            return sum;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(DigitSum(\"\")); // 0\n            Console.WriteLine(DigitSum(\"abAB\")); // 131\n            Console.WriteLine(DigitSum(\"abcCd\")); // 67\n            Console.WriteLine(DigitSum(\"helloE\")); // 69\n            Console.WriteLine(DigitSum(\"woArBld\")); // 131\n            Console.WriteLine(DigitSum(\"aAaaaXa\")); // 153\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/67", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// In this task, you will be given a string that represents a number of apples and oranges \n        /// that are distributed in a basket of fruit this basket contains \n        /// apples, oranges, and mango fruits. Given the string that represents the total number of \n        /// the oranges and apples and an integer that represent the total number of the fruits \n        /// in the basket return the number of the mango fruits in the basket.\n        /// for examble:\n        /// FruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n        /// FruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n        /// FruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n        /// FruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n        /// \n        /// </summary>\n        public static int FruitDistribution(string s, int n) \n        {\n            // Use regular expressions to find the number of apples and oranges in the string\n            var appleMatch = Regex.Match(s, @\"(\\d+) apples\");\n            var orangeMatch = Regex.Match(s, @\"(\\d+) oranges\");\n\n            // Extract the numbers from the matches or default to 0 if no match is found\n            int apples = appleMatch.Success ? int.Parse(appleMatch.Groups[1].Value) : 0;\n            int oranges = orangeMatch.Success ? int.Parse(orangeMatch.Groups[1].Value) : 0;\n\n            // Calculate the number of mango fruits by subtracting the sum of apples and oranges from n\n            return n - apples - oranges;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n            Console.WriteLine(FruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n            Console.WriteLine(FruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n            Console.WriteLine(FruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// \"Given an array representing a branch of a tree that has non-negative integer nodes\n        /// your task is to Pluck one of the nodes and return it.\n        /// The Plucked node should be the node with the smallest even value.\n        /// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n        /// \n        /// The Plucked node should be returned in a list, [ smalest_value, its index ],\n        /// If there are no even values or the given array is empty, return [].\n        /// \n        /// Example 1:\n        /// Input: [4,2,3]\n        /// Output: [2, 1]\n        /// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n        /// \n        /// Example 2:\n        /// Input: [1,2,3]\n        /// Output: [2, 1]\n        /// Explanation: 2 has the smallest even value, and 2 has the smallest index. \n        /// \n        /// Example 3:\n        /// Input: []\n        /// Output: []\n        /// \n        /// Example 4:\n        /// Input: [5, 0, 3, 0, 4, 2]\n        /// Output: [0, 1]\n        /// Explanation: 0 is the smallest value, but  there are two zeros,\n        /// so we will choose the first zero, which has the smallest index.\n        /// \n        /// Constraints:\n        /// * 1 <= nodes.length <= 10000\n        /// * 0 <= node.value\n        /// \n        /// </summary>\n        public static List<int> Pluck(List<int> arr) \n        {\n            if (arr == null || arr.Count == 0)\n                return new List<int>();\n\n            int smallestEvenValue = -1;\n            int indexOfSmallestEvenValue = -1;\n\n            for (int i = 0; i < arr.Count; i++)\n            {\n                if (arr[i] % 2 == 0)\n                {\n                    if (smallestEvenValue == -1 || arr[i] < smallestEvenValue)\n                    {\n                        smallestEvenValue = arr[i];\n                        indexOfSmallestEvenValue = i;\n                    }\n                }\n            }\n\n            if (indexOfSmallestEvenValue == -1)\n                return new List<int>();\n\n            return new List<int> { smallestEvenValue, indexOfSmallestEvenValue };\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(String.Join(\", \", Pluck(new List<int> { 4, 2, 3 }))); // Output: [2, 1]\n            Console.WriteLine(String.Join(\", \", Pluck(new List<int> { 1, 2, 3 }))); // Output: [2, 1]\n            Console.WriteLine(String.Join(\", \", Pluck(new List<int> { }))); // Output: []\n            Console.WriteLine(String.Join(\", \", Pluck(new List<int> { 5, 0, 3, 0, 4, 2 }))); // Output: [0, 1]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/69", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n        /// zero, and has a frequency greater than or equal to the value of the integer itself. \n        /// The frequency of an integer is the number of times it appears in the list.\n        /// If no such a value exist, return -1.\n        /// Examples:\n        /// Search([4, 1, 2, 2, 3, 1]) == 2\n        /// Search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        /// Search([5, 5, 4, 4, 4]) == -1\n        /// \n        /// </summary>\n        public static int Search(List<int> lst)\n        {\n            // Count the frequency of each integer in the list\n            var frequencyDict = new Dictionary<int, int>();\n            foreach (var num in lst)\n            {\n                if (frequencyDict.ContainsKey(num))\n                {\n                    frequencyDict[num]++;\n                }\n                else\n                {\n                    frequencyDict[num] = 1;\n                }\n            }\n\n            // Find the greatest integer that satisfies the condition\n            int result = -1;\n            foreach (var kvp in frequencyDict)\n            {\n                if (kvp.Key <= kvp.Value && kvp.Key > result)\n                {\n                    result = kvp.Key;\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // Output: 2\n            Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Output: 3\n            Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // Output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given list of integers, return list in strange order.\n        /// Strange sorting, is when you start with the minimum value,\n        /// then maximum of the remaining integers, then minimum and so on.\n        /// \n        /// Examples:\n        /// StrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n        /// StrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n        /// StrangeSortList([]) == []\n        /// \n        /// </summary>\n        public static List<int> StrangeSortList(List<int> lst) \n        {\n            // If the list is empty or null, return an empty list\n            if (lst == null || lst.Count == 0)\n                return new List<int>();\n\n            // Sort the list in ascending order\n            lst = lst.OrderBy(x => x).ToList();\n\n            // Create a new list to hold the result\n            List<int> strangeOrderList = new List<int>();\n\n            // Use two pointers, one starting from the beginning and one from the end\n            int start = 0;\n            int end = lst.Count - 1;\n\n            // Alternate between picking elements from the start and end of the list\n            while (start <= end)\n            {\n                if (start == end)\n                {\n                    // If there's only one element left, add it to the result\n                    strangeOrderList.Add(lst[start]);\n                }\n                else\n                {\n                    // Add the first and last elements alternately\n                    strangeOrderList.Add(lst[start]);\n                    strangeOrderList.Add(lst[end]);\n                }\n                start++;\n                end--;\n            }\n\n            return strangeOrderList;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(String.Join(\", \", StrangeSortList(new List<int> { 1, 2, 3, 4 }))); // Output: 1, 4, 2, 3\n            Console.WriteLine(String.Join(\", \", StrangeSortList(new List<int> { 5, 5, 5, 5 }))); // Output: 5, 5, 5, 5\n            Console.WriteLine(String.Join(\", \", StrangeSortList(new List<int> {}))); // Output: (empty)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/71", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given the lengths of the three sides of a triangle. Return the area of\n        /// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n        /// Otherwise return -1\n        /// Three sides make a valid triangle when the sum of any two sides is greater \n        /// than the third side.\n        /// Example:\n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea(int a, int b, int c)\n        {\n            // Check if the sides form a valid triangle\n            if (a + b <= c || a + c <= b || b + c <= a)\n            {\n                return -1;\n            }\n\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2.0;\n\n            // Calculate the area using Heron's formula\n            double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n\n            // Round to 2 decimal points\n            return Math.Round(area, 2);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriangleArea(3, 4, 5)); // Output: 6.00\n            Console.WriteLine(TriangleArea(1, 2, 10)); // Output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function that returns True if the object q will fly, and False otherwise.\n        /// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n        /// \n        /// Example:\n        /// WillItFly([1, 2], 5) \u279e False \n        /// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n        /// \n        /// WillItFly([3, 2, 3], 1) \u279e False\n        /// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n        /// \n        /// WillItFly([3, 2, 3], 9) \u279e True\n        /// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n        /// \n        /// WillItFly([3], 5) \u279e True\n        /// # 3 is less than the maximum possible weight, and it's balanced.\n        /// \n        /// </summary>\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // Check if the list is a palindrome\n            string qStr = string.Join(\"\", q);\n            string reversedQStr = new string(qStr.Reverse().ToArray());\n            bool isPalindrome = qStr == reversedQStr;\n            \n            // Calculate the sum of the elements in the list\n            int sumOfElements = q.Sum();\n            \n            // Check if the sum of elements is less than or equal to the maximum possible weight\n            return isPalindrome && sumOfElements <= w;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array arr of integers, find the minimum number of elements that\n        /// need to be changed to make the array palindromic. A palindromic array is an array that\n        /// is read the same backwards and forwards. In one change, you can change one element to any other element.\n        /// \n        /// For example:\n        /// SmallestChange([1,2,3,5,4,7,9,6]) == 4\n        /// SmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n        /// SmallestChange([1, 2, 3, 2, 1]) == 0\n        /// \n        /// </summary>\n        public static int SmallestChange(List<int> arr)\n        {\n            int n = arr.Count;\n            int changes = 0;\n            \n            for (int i = 0; i < n / 2; i++)\n            {\n                if (arr[i] != arr[n - i - 1])\n                {\n                    changes++;\n                }\n            }\n            \n            return changes;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 5, 4, 7, 9, 6 })); // Output: 4\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 4, 3, 2, 2 })); // Output: 1\n            Console.WriteLine(SmallestChange(new List<int> { 1, 2, 3, 2, 1 })); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/74", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function that accepts two lists of strings and returns the list that has \n        /// total number of chars in the all strings of the list less than the other list.\n        /// \n        /// if the two lists have the same number of chars, return the first list.\n        /// \n        /// Examples\n        /// TotalMatch([], []) \u279e []\n        /// TotalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n        /// TotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n        /// TotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n        /// TotalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n        /// \n        /// </summary>\n        public static List<string> TotalMatch(List<string> lst1, List<string> lst2) \n        {\n            // Calculate the total number of characters in each list\n            int totalCharsLst1 = lst1.Sum(s => s.Length);\n            int totalCharsLst2 = lst2.Sum(s => s.Length);\n            \n            // Compare and return the appropriate list\n            if (totalCharsLst1 < totalCharsLst2)\n            {\n                return lst1;\n            }\n            else if (totalCharsLst2 < totalCharsLst1)\n            {\n                return lst2;\n            }\n            else\n            {\n                return lst1; // If both lists have the same number of characters, return the first list\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine($\"[{string.Join(\", \", TotalMatch(new List<string> {}, new List<string> {}))}]\");\n            Console.WriteLine($\"[{string.Join(\", \", TotalMatch(new List<string> {\"hi\", \"admin\"}, new List<string> {\"hI\", \"Hi\"}))}]\");\n            Console.WriteLine($\"[{string.Join(\", \", TotalMatch(new List<string> {\"hi\", \"admin\"}, new List<string> {\"hi\", \"hi\", \"admin\", \"project\"}))}]\");\n            Console.WriteLine($\"[{string.Join(\", \", TotalMatch(new List<string> {\"hi\", \"admin\"}, new List<string> {\"hI\", \"hi\", \"hi\"}))}]\");\n            Console.WriteLine($\"[{string.Join(\", \", TotalMatch(new List<string> {\"4\"}, new List<string> {\"1\", \"2\", \"3\", \"4\", \"5\"}))}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    /// and false otherwise.\n    /// Knowing that (a) is less then 100. \n    /// Example:\n    /// IsMultiplyPrime(30) == True\n    /// 30 = 2 * 3 * 5\n    /// \n    /// </summary>\n    public static bool IsMultiplyPrime(int a)\n    {\n        // Generate all prime numbers less than 100 using Sieve of Eratosthenes\n        List<int> primes = GetPrimesLessThanN(100);\n        \n        // Check all combinations of three primes to see if their product equals 'a'\n        for (int i = 0; i < primes.Count; i++)\n        {\n            for (int j = i; j < primes.Count; j++)\n            {\n                for (int k = j; k < primes.Count; k++)\n                {\n                    if (primes[i] * primes[j] * primes[k] == a)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private static List<int> GetPrimesLessThanN(int n)\n    {\n        bool[] isPrime = new bool[n];\n        for (int i = 2; i < n; i++)\n        {\n            isPrime[i] = true;\n        }\n        \n        for (int p = 2; p * p < n; p++)\n        {\n            if (isPrime[p])\n            {\n                for (int i = p * p; i < n; i += p)\n                {\n                    isPrime[i] = false;\n                }\n            }\n        }\n        \n        List<int> primes = new List<int>();\n        for (int i = 2; i < n; i++)\n        {\n            if (isPrime[i])\n            {\n                primes.Add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    public static void Main(string[] args)\n    {\n        Console.WriteLine(IsMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\n        Console.WriteLine(IsMultiplyPrime(60)); // False, because no combination of primes less than 100 multiplies to 60\n    }\n}"}
{"task_id": "HumanEval_csharp/76", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool IsSimplePower(int x, int n)\n    {\n        if (x == 1) return true; // Any number to the power of 0 is 1\n        if (n == 1) return false; // Anything other than 1 raised to the power of 1 will not be equal to a larger number\n        \n        int k = 2; // Start checking from the smallest possible power greater than 1\n        while (Math.Pow(n, k) <= x)\n        {\n            if (Math.Pow(n, k) == x)\n                return true;\n            k++;\n        }\n        return false;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(IsSimplePower(1, 4)); // True\n        Console.WriteLine(IsSimplePower(2, 2)); // True\n        Console.WriteLine(IsSimplePower(8, 2)); // True\n        Console.WriteLine(IsSimplePower(3, 2)); // False\n        Console.WriteLine(IsSimplePower(3, 1)); // False\n        Console.WriteLine(IsSimplePower(5, 3)); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/77", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    /// <summary> \n    /// Write a function that takes an integer a and returns True \n    /// if this integer is a cube of some integer number.\n    /// Note: you may assume the input is always valid.\n    /// </summary>\n    public static bool Iscube(int a)\n    {\n        // Calculate the cube root of 'a'\n        double cubeRoot = Math.Cbrt((double)a);\n        \n        // Check if the cube root is an integer by comparing it to its floor value\n        return Math.Abs(cubeRoot - Math.Floor(cubeRoot)) < 1e-9;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(Iscube(1));   // True\n        Console.WriteLine(Iscube(2));   // False\n        Console.WriteLine(Iscube(-1));  // True\n        Console.WriteLine(Iscube(64));  // True\n        Console.WriteLine(Iscube(0));   // True\n        Console.WriteLine(Iscube(180)); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/78", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You have been tasked to write a function that receives \n        /// a hexadecimal number as a string and counts the number of hexadecimal \n        /// digits that are primes (prime number, or a prime, is a natural number \n        /// greater than 1 that is not a product of two smaller natural numbers).\n        /// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n        /// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n        /// So you have to determine a number of the following digits: 2, 3, 5, 7, \n        /// B (=decimal 11), D (=decimal 13).\n        /// Note: you may assume the input is always correct or empty string, \n        /// and symbols A,B,C,D,E,F are always uppercase.\n        /// Examples:\n        /// For num = \"AB\" the output should be 1.\n        /// For num = \"1077E\" the output should be 2.\n        /// For num = \"ABED1A33\" the output should be 4.\n        /// For num = \"123456789ABCDEF0\" the output should be 6.\n        /// For num = \"2020\" the output should be 2.\n        /// \n        /// </summary>\n        public static int HexKey(object num) \n        {\n            if (num == null || string.IsNullOrEmpty(num as string))\n                return 0;\n\n            string hexString = num as string;\n            HashSet<char> primeHexDigits = new HashSet<char> { '2', '3', '5', '7', 'B', 'D' };\n            int count = 0;\n\n            foreach (char c in hexString)\n            {\n                if (primeHexDigits.Contains(c))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(HexKey(\"AB\")); // Output: 1\n            Console.WriteLine(HexKey(\"1077E\")); // Output: 2\n            Console.WriteLine(HexKey(\"ABED1A33\")); // Output: 4\n            Console.WriteLine(HexKey(\"123456789ABCDEF0\")); // Output: 6\n            Console.WriteLine(HexKey(\"2020\")); // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/79", "language": "csharp", "completion": "using System;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You will be given a number in decimal form and your task is to convert it to\n        /// binary format. The function should return a string, with each character representing a binary\n        /// number. Each character in the string will be '0' or '1'.\n        /// \n        /// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n        /// The extra characters are there to help with the format.\n        /// \n        /// Examples:\n        /// DecimalToBinary(15)   # returns \"db1111db\"\n        /// DecimalToBinary(32)   # returns \"db100000db\"\n        /// \n        /// </summary>\n        public static string DecimalToBinary(int decimalNumber) \n        {\n            // Convert the decimal number to binary\n            string binaryString = Convert.ToString(decimalNumber, 2);\n            \n            // Add 'db' at the beginning and end of the binary string\n            StringBuilder result = new StringBuilder(\"db\");\n            result.Append(binaryString);\n            result.Append(\"db\");\n            \n            return result.ToString();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(DecimalToBinary(15));  // Output: \"db1111db\"\n            Console.WriteLine(DecimalToBinary(32));  // Output: \"db100000db\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/80", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// Your task is to check if the string is happy or not.\n        /// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n        /// For example:\n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy(string s) \n        {\n            // Check if the string length is less than 3, return false immediately\n            if (s.Length < 3)\n            {\n                return false;\n            }\n\n            // Loop through the string to check every 3 consecutive characters\n            for (int i = 0; i <= s.Length - 3; i++)\n            {\n                // Extract a substring of 3 characters starting from position i\n                string triplet = s.Substring(i, 3);\n\n                // Check if all three characters in the triplet are distinct\n                if (triplet[0] == triplet[1] || triplet[0] == triplet[2] || triplet[1] == triplet[2])\n                {\n                    return false;\n                }\n            }\n\n            // If we pass through the loop without finding any repeating characters, return true\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsHappy(\"a\"));       // False\n            Console.WriteLine(IsHappy(\"aa\"));      // False\n            Console.WriteLine(IsHappy(\"abcd\"));    // True\n            Console.WriteLine(IsHappy(\"aabb\"));    // False\n            Console.WriteLine(IsHappy(\"adb\"));     // True\n            Console.WriteLine(IsHappy(\"xyy\"));     // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/81", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// It is the last week of the semester and the teacher has to give the grades\n        /// to students. The teacher has been making her own algorithm for grading.\n        /// The only problem is, she has lost the code she used for grading.\n        /// She has given you a list of GPAs for some students and you have to write \n        /// a function that can output a list of letter grades using the following table:\n        /// GPA       |    Letter grade\n        /// 4.0                A+\n        /// > 3.7                A \n        /// > 3.3                A- \n        /// > 3.0                B+\n        /// > 2.7                B \n        /// > 2.3                B-\n        /// > 2.0                C+\n        /// > 1.7                C\n        /// > 1.3                C-\n        /// > 1.0                D+ \n        /// > 0.7                D \n        /// > 0.0                D-\n        /// 0.0                E\n        /// \n        /// \n        /// Example:\n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// \n        /// </summary>\n        public static List<string> NumericalLetterGrade(List<double> grades)\n        {\n            List<string> letterGrades = new List<string>();\n            \n            foreach (var grade in grades)\n            {\n                if (grade == 4.0)\n                {\n                    letterGrades.Add(\"A+\");\n                }\n                else if (grade > 3.7)\n                {\n                    letterGrades.Add(\"A\");\n                }\n                else if (grade > 3.3)\n                {\n                    letterGrades.Add(\"A-\");\n                }\n                else if (grade > 3.0)\n                {\n                    letterGrades.Add(\"B+\");\n                }\n                else if (grade > 2.7)\n                {\n                    letterGrades.Add(\"B\");\n                }\n                else if (grade > 2.3)\n                {\n                    letterGrades.Add(\"B-\");\n                }\n                else if (grade > 2.0)\n                {\n                    letterGrades.Add(\"C+\");\n                }\n                else if (grade > 1.7)\n                {\n                    letterGrades.Add(\"C\");\n                }\n                else if (grade > 1.3)\n                {\n                    letterGrades.Add(\"C-\");\n                }\n                else if (grade > 1.0)\n                {\n                    letterGrades.Add(\"D+\");\n                }\n                else if (grade > 0.7)\n                {\n                    letterGrades.Add(\"D\");\n                }\n                else if (grade > 0.0)\n                {\n                    letterGrades.Add(\"D-\");\n                }\n                else if (grade == 0.0)\n                {\n                    letterGrades.Add(\"E\");\n                }\n            }\n            \n            return letterGrades;\n        }\n\n        static void Main(string[] args)\n        {\n            List<double> grades = new List<double> { 4.0, 3, 1.7, 2, 3.5 };\n            List<string> result = NumericalLetterGrade(grades);\n            Console.WriteLine(string.Join(\", \", result)); // Output: A+, B, C-, C, A-\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/82", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// Write a function that takes a string and returns True if the string\n    /// length is a prime number or False otherwise\n    /// Examples\n    /// PrimeLength('Hello') == True\n    /// PrimeLength('abcdcba') == True\n    /// PrimeLength('kittens') == True\n    /// PrimeLength('orange') == False\n    /// \n    /// </summary>\n    public static bool PrimeLength(string string0)\n    {\n        int length = string0.Length;\n        \n        // Check if the length is less than 2, then it's not a prime number\n        if (length < 2)\n        {\n            return false;\n        }\n        \n        // Check for factors from 2 to the square root of length\n        for (int i = 2; i * i <= length; i++)\n        {\n            if (length % i == 0)\n            {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(PrimeLength(\"Hello\"));       // True\n        Console.WriteLine(PrimeLength(\"abcdcba\"));     // True\n        Console.WriteLine(PrimeLength(\"kittens\"));     // True\n        Console.WriteLine(PrimeLength(\"orange\"));      // False\n    }\n}"}
{"task_id": "HumanEval_csharp/83", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a positive integer n, return the count of the numbers of n-digit\n        /// positive integers that start or end with 1.\n        /// \n        /// </summary>\n        public static int StartsOneEnds(int n) \n        {\n            if (n <= 0)\n            {\n                throw new ArgumentException(\"n must be a positive integer greater than 0.\");\n            }\n            \n            // Calculate the number of numbers that start with 1\n            int countStartingWithOne = (int)Math.Pow(9, n - 1);\n            \n            // Calculate the number of numbers that end with 1\n            int countEndingWithOne = (int)Math.Pow(9, n - 1);\n            \n            // Total count is the sum of both counts minus the overlap where a number starts and ends with 1\n            return countStartingWithOne + countEndingWithOne;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(StartsOneEnds(2)); // Example usage\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/84", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive integer N, return the total sum of its digits in binary.\n        /// \n        /// Example\n        /// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        /// For N = 150, the sum of digits will be 6 the output should be \"110\".\n        /// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        /// \n        /// Variables:\n        /// @N integer\n        /// Constraints: 0 \u2264 N \u2264 10000.\n        /// Output:\n        /// a string of binary number\n        /// \n        /// </summary>\n        public static string Solve(int N) \n        {\n            // Convert the integer to its binary representation as a string\n            string binaryString = Convert.ToString(N, 2);\n            \n            // Calculate the sum of the digits in the binary string\n            int sumOfDigits = binaryString.Sum(c => c - '0');\n            \n            // Convert the sum back to a binary string and return it\n            return Convert.ToString(sumOfDigits, 2);\n        }\n        \n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Solve(1000)); // Output: \"1\"\n            Console.WriteLine(Solve(150));  // Output: \"110\"\n            Console.WriteLine(Solve(147));  // Output: \"1100\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/85", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a non-empty list of integers lst. Add the even elements that are at odd indices..\n        /// \n        /// Examples:\n        /// Add([4, 2, 6, 7]) ==> 2 \n        /// </summary>\n        public static int Add(List<int> lst) \n        {\n            int sum = 0;\n            for (int i = 1; i < lst.Count; i += 2) // Start from index 1 and increment by 2 to get odd indices\n            {\n                if (lst[i] % 2 == 0) // Check if the element at the odd index is even\n                {\n                    sum += lst[i];\n                }\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> testList = new List<int> { 4, 2, 6, 7 };\n            Console.WriteLine(Add(testList)); // Output should be 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/86", "language": "csharp", "completion": "using System;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function that takes a string and returns an ordered version of it.\n        /// Ordered version of string, is a string where all words (separated by space)\n        /// are replaced by a new word where all the characters arranged in\n        /// ascending order based on ascii value.\n        /// Note: You should keep the order of words and blank spaces in the sentence.\n        /// \n        /// For example:\n        /// AntiShuffle('Hi') returns 'Hi'\n        /// AntiShuffle('hello') returns 'ehllo'\n        /// AntiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n        /// \n        /// </summary>\n        public static string AntiShuffle(string s)\n        {\n            // Split the input string into words and spaces\n            var words = Regex.Split(s, @\"(\\s+)\");\n\n            for (int i = 0; i < words.Length; i++)\n            {\n                if (!Regex.IsMatch(words[i], @\"^\\s+$\"))\n                {\n                    // Sort the characters in each word\n                    char[] chars = words[i].ToCharArray();\n                    Array.Sort(chars);\n                    words[i] = new string(chars);\n                }\n            }\n\n            // Join the sorted words and spaces back into a single string\n            return string.Join(\"\", words);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(AntiShuffle(\"Hi\")); // Hi\n            Console.WriteLine(AntiShuffle(\"hello\")); // ehllo\n            Console.WriteLine(AntiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/87", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<(int, int)> GetRow(List<List<int>> lst, int x) \n        {\n            var coordinates = new List<(int, int)>();\n\n            for (int row = 0; row < lst.Count; row++)\n            {\n                for (int col = 0; col < lst[row].Count; col++)\n                {\n                    if (lst[row][col] == x)\n                    {\n                        coordinates.Add((row, col));\n                    }\n                }\n            }\n\n            // Sort by rows in ascending order and then by columns in descending order\n            var sortedCoordinates = coordinates\n                .OrderBy(coord => coord.Item1)\n                .ThenByDescending(coord => coord.Item2)\n                .ToList();\n\n            return sortedCoordinates;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = new List<List<int>>()\n            {\n                new List<int> { 1, 2, 3, 4, 5, 6 },\n                new List<int> { 1, 2, 3, 4, 1, 6 },\n                new List<int> { 1, 2, 3, 4, 5, 1 }\n            };\n            Console.WriteLine(string.Join(\", \", GetRow(test1, 1))); // Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n            var test2 = new List<List<int>>();\n            Console.WriteLine(string.Join(\", \", GetRow(test2, 1))); // Output: []\n\n            var test3 = new List<List<int>>()\n            {\n                new List<int>(),\n                new List<int> { 1 },\n                new List<int> { 1, 2, 3 }\n            };\n            Console.WriteLine(string.Join(\", \", GetRow(test3, 3))); // Output: [(2, 2)]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/88", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array of non-negative integers, return a copy of the given array after sorting,\n        /// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n        /// or sort it in descending order if the sum( first index value, last index value) is even.\n        /// \n        /// Note:\n        /// * don't change the given array.\n        /// \n        /// Examples:\n        /// * SortArray([]) => []\n        /// * SortArray([5]) => [5]\n        /// * SortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n        /// * SortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n        /// \n        /// </summary>\n        public static List<int> SortArray(List<int> array)\n        {\n            if (array == null || array.Count == 0)\n                return new List<int>();\n\n            int first = array[0];\n            int last = array[array.Count - 1];\n            int sum = first + last;\n\n            if (sum % 2 == 0)\n            {\n                // Sort in descending order\n                var sortedDescending = new List<int>(array);\n                sortedDescending.Sort((a, b) => b.CompareTo(a));\n                return sortedDescending;\n            }\n            else\n            {\n                // Sort in ascending order\n                var sortedAscending = new List<int>(array);\n                sortedAscending.Sort();\n                return sortedAscending;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> {}))); // []\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> {5}))); // [5]\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> {2, 4, 3, 0, 1, 5}))); // [0, 1, 2, 3, 4, 5]\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> {2, 4, 3, 0, 1, 5, 6}))); // [6, 5, 4, 3, 2, 1, 0]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/89", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Create a function Encrypt that takes a string as an argument and\n        /// returns a string Encrypted with the alphabet being rotated. \n        /// The alphabet should be rotated in a manner such that the letters \n        /// shift down by two multiplied to two places.\n        /// For example:\n        /// Encrypt('hi') returns 'lm'\n        /// Encrypt('asdfghjkl') returns 'ewhjklnop'\n        /// Encrypt('gf') returns 'kj'\n        /// Encrypt('et') returns 'ix'\n        /// \n        /// </summary>\n        public static string Encrypt(string s)\n        {\n            if (string.IsNullOrEmpty(s)) return s;\n\n            char[] result = new char[s.Length];\n            for (int i = 0; i < s.Length; i++)\n            {\n                char c = s[i];\n                if (char.IsLetter(c))\n                {\n                    // Shift the letter by two positions in the alphabet\n                    char shifted = (char)(c + 2 * 2);\n                    // Wrap around if necessary\n                    if ((char.IsLower(c) && shifted > 'z') || (char.IsUpper(c) && shifted > 'Z'))\n                    {\n                        shifted = (char)(shifted - 26);\n                    }\n                    result[i] = shifted;\n                }\n                else\n                {\n                    // Non-letter characters remain unchanged\n                    result[i] = c;\n                }\n            }\n            return new string(result);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Encrypt(\"hi\")); // returns 'lm'\n            Console.WriteLine(Encrypt(\"asdfghjkl\")); // returns 'ewhjklnop'\n            Console.WriteLine(Encrypt(\"gf\")); // returns 'kj'\n            Console.WriteLine(Encrypt(\"et\")); // returns 'ix'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/90", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a list of integers.\n        /// Write a function NextSmallest() that returns the 2nd smallest element of the list.\n        /// Return None if there is no such element.\n        /// \n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest(List<int> lst)\n        {\n            if (lst == null || lst.Count < 2)\n            {\n                return \"None\";\n            }\n\n            // Remove duplicates and sort the list\n            var uniqueSorted = lst.Distinct().OrderBy(x => x).ToList();\n\n            if (uniqueSorted.Count < 2)\n            {\n                return \"None\";\n            }\n\n            return uniqueSorted[1];\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { })); // Output: None\n            Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: None\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/91", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You'll be given a string of words, and your task is to count the number\n        /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n        /// Sentences are delimited by '.', '?' or '!'.\n        /// \n        /// For example:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored(string S) \n        {\n            if (string.IsNullOrEmpty(S)) return 0;\n\n            // Split the string into sentences based on '.', '?', and '!' followed by a space or end of string\n            var sentences = Regex.Split(S, @\"(?<=[.!?])\\s+\");\n\n            int count = 0;\n\n            foreach (var sentence in sentences)\n            {\n                // Trim leading and trailing whitespace from the sentence\n                var trimmedSentence = sentence.Trim();\n\n                // Check if the sentence starts with \"I\"\n                if (!string.IsNullOrEmpty(trimmedSentence) && Regex.IsMatch(trimmedSentence, @\"^\\s*I\\s\", RegexOptions.IgnoreCase))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n            Console.WriteLine(IsBored(\"I am happy. Are you? I think so!\")); // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/92", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool AnyInt(object x, object y, object z)\n    {\n        // Helper function to check if a number can be converted to an integer without losing precision\n        bool IsInteger(double num)\n        {\n            return num % 1 == 0;\n        }\n\n        // Convert inputs to double for comparison (to handle both int and float)\n        if (IsInteger((double)x) && IsInteger((double)y) && IsInteger((double)z))\n        {\n            double a = (double)x;\n            double b = (double)y;\n            double c = (double)z;\n\n            // Calculate the sum of the first two numbers\n            double sumAB = a + b;\n\n            // Check if any one of the numbers is equal to the sum of the other two\n            return a == sumAB || b == sumAB || c == sumAB;\n        }\n\n        // Return false if any input is not an integer\n        return false;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(AnyInt(5, 2, 7)); // True\n        Console.WriteLine(AnyInt(3, 2, 2)); // False\n        Console.WriteLine(AnyInt(3, -2, 1)); // True\n        Console.WriteLine(AnyInt(3.6, -2.2, 2)); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/93", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Encodes a message by swapping case of all letters and replacing vowels with the letter that appears two places ahead in the English alphabet.\n        /// </summary>\n        public static string Encode(string message)\n        {\n            // Define the vowels\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n            \n            // Create a character array from the input message to modify it in place\n            char[] chars = message.ToCharArray();\n            \n            for (int i = 0; i < chars.Length; i++)\n            {\n                if (char.IsLetter(chars[i]))\n                {\n                    // Swap case\n                    if (char.IsUpper(chars[i]))\n                    {\n                        chars[i] = char.ToLower(chars[i]);\n                    }\n                    else\n                    {\n                        chars[i] = char.ToUpper(chars[i]);\n                    }\n                    \n                    // Replace vowels with the letter two places ahead in the alphabet\n                    if (vowels.Contains(char.ToLower(chars[i])))\n                    {\n                        int vowelIndex = Array.IndexOf(vowels, char.ToLower(chars[i]));\n                        int newVowelIndex = (vowelIndex + 2) % vowels.Length;\n                        chars[i] = char.IsUpper(message[i]) ? char.ToUpper(vowels[newVowelIndex]) : char.ToLower(vowels[newVowelIndex]);\n                    }\n                }\n            }\n            \n            // Convert the modified character array back to a string and return it\n            return new string(chars);\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Encode(\"test\"));       // Output: 'TGST'\n            Console.WriteLine(Encode(\"This is a message\")); // Output: 'tHKS KS C MGSSCGG'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/94", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int Skjkasdkd(List<int> lst)\n    {\n        // Helper function to check if a number is prime\n        bool IsPrime(int num)\n        {\n            if (num <= 1) return false;\n            if (num == 2) return true;\n            if (num % 2 == 0) return false;\n            for (int i = 3; i * i <= num; i += 2)\n            {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Find the largest prime number in the list\n        int largestPrime = lst.Where(x => IsPrime(x)).DefaultIfEmpty(-1).Max();\n\n        if (largestPrime == -1)\n        {\n            throw new ArgumentException(\"No prime numbers found in the list.\");\n        }\n\n        // Calculate the sum of the digits of the largest prime number\n        int sumOfDigits = 0;\n        while (largestPrime > 0)\n        {\n            sumOfDigits += largestPrime % 10;\n            largestPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    public static void Main(string[] args)\n    {\n        List<int> lst1 = new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 };\n        List<int> lst2 = new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 };\n        List<int> lst3 = new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 };\n        List<int> lst4 = new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 };\n        List<int> lst5 = new List<int> { 0, 81, 12, 3, 1, 21 };\n        List<int> lst6 = new List<int> { 0, 8, 1, 2, 1, 7 };\n\n        Console.WriteLine(Skjkasdkd(lst1)); // Output: 10\n        Console.WriteLine(Skjkasdkd(lst2)); // Output: 25\n        Console.WriteLine(Skjkasdkd(lst3)); // Output: 13\n        Console.WriteLine(Skjkasdkd(lst4)); // Output: 11\n        Console.WriteLine(Skjkasdkd(lst5)); // Output: 3\n        Console.WriteLine(Skjkasdkd(lst6)); // Output: 7\n    }\n}"}
{"task_id": "HumanEval_csharp/95", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a dictionary, return True if all keys are strings in lower \n        /// case or all keys are strings in upper case, else return False.\n        /// The function should return False is the given dictionary is empty.\n        /// Examples:\n        /// CheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n        /// CheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n        /// CheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n        /// CheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n        /// CheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n        /// \n        /// </summary>\n        public static bool CheckDictCase(Dictionary<object, string> dict) \n        {\n            if (dict == null || dict.Count == 0)\n            {\n                return false;\n            }\n\n            bool allLowerCase = true;\n            bool allUpperCase = true;\n\n            foreach (var key in dict.Keys)\n            {\n                string strKey = key.ToString();\n                if (!strKey.All(char.IsLower))\n                {\n                    allLowerCase = false;\n                }\n                if (!strKey.All(char.IsUpper))\n                {\n                    allUpperCase = false;\n                }\n            }\n\n            return allLowerCase || allUpperCase;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Dictionary<object, string> dict1 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"b\", \"banana\" } };\n            Console.WriteLine(CheckDictCase(dict1)); // True\n\n            Dictionary<object, string> dict2 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } };\n            Console.WriteLine(CheckDictCase(dict2)); // False\n\n            Dictionary<object, string> dict3 = new Dictionary<object, string> { { \"a\", \"apple\" }, { 8, \"banana\" }, { \"a\", \"apple\" } };\n            Console.WriteLine(CheckDictCase(dict3)); // False\n\n            Dictionary<object, string> dict4 = new Dictionary<object, string> { { \"Name\", \"John\" }, { \"Age\", \"36\" }, { \"City\", \"Houston\" } };\n            Console.WriteLine(CheckDictCase(dict4)); // False\n\n            Dictionary<object, string> dict5 = new Dictionary<object, string> { { \"STATE\", \"NC\" }, { \"ZIP\", \"12345\" } };\n            Console.WriteLine(CheckDictCase(dict5)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/96", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// Implement a function that takes an non-negative integer and returns an array of the first n\n    /// integers that are prime numbers and less than n.\n    /// for example:\n    /// CountUpTo(5) => [2,3]\n    /// CountUpTo(11) => [2,3,5,7]\n    /// CountUpTo(0) => []\n    /// CountUpTo(20) => [2,3,5,7,11,13,17,19]\n    /// CountUpTo(1) => []\n    /// CountUpTo(18) => [2,3,5,7,11,13,17]\n    /// \n    /// </summary>\n    public static List<int> CountUpTo(int n) \n    {\n        if (n <= 1) return new List<int>();\n\n        List<int> primes = new List<int>();\n        \n        for (int number = 2; number < n; number++)\n        {\n            bool isPrime = true;\n            for (int divisor = 2; divisor * divisor <= number; divisor++)\n            {\n                if (number % divisor == 0)\n                {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime)\n            {\n                primes.Add(number);\n            }\n        }\n        \n        return primes;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(string.Join(\", \", CountUpTo(5))); // [2,3]\n        Console.WriteLine(string.Join(\", \", CountUpTo(11))); // [2,3,5,7]\n        Console.WriteLine(string.Join(\", \", CountUpTo(0))); // []\n        Console.WriteLine(string.Join(\", \", CountUpTo(20))); // [2,3,5,7,11,13,17,19]\n        Console.WriteLine(string.Join(\", \", CountUpTo(1))); // []\n        Console.WriteLine(string.Join(\", \", CountUpTo(18))); // [2,3,5,7,11,13,17]\n    }\n}"}
{"task_id": "HumanEval_csharp/97", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Complete the function that takes two integers and returns \n        /// the product of their unit digits.\n        /// Assume the input is always valid.\n        /// Examples:\n        /// Multiply(148, 412) should return 16.\n        /// Multiply(19, 28) should return 72.\n        /// Multiply(2020, 1851) should return 0.\n        /// Multiply(14,-15) should return 20.\n        /// \n        /// </summary>\n        public static int Multiply (int a, int b) \n        {\n            // Extract the unit digits of both integers\n            int unitDigitA = Math.Abs(a) % 10;\n            int unitDigitB = Math.Abs(b) % 10;\n            \n            // Multiply the unit digits together\n            return unitDigitA * unitDigitB;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Multiply(148, 412)); // Should return 16\n            Console.WriteLine(Multiply(19, 28));   // Should return 72\n            Console.WriteLine(Multiply(2020, 1851)); // Should return 0\n            Console.WriteLine(Multiply(14, -15)); // Should return 20\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/98", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a string s, count the number of uppercase vowels in even indices.\n        /// \n        /// For example:\n        /// CountUpper('aBCdEf') returns 1\n        /// CountUpper('abcdefg') returns 0\n        /// CountUpper('dBBE') returns 0\n        /// \n        /// </summary>\n        public static int CountUpper(string s)\n        {\n            // Define the set of uppercase vowels\n            string uppercaseVowels = \"AEIOU\";\n            \n            // Initialize a counter for uppercase vowels at even indices\n            int count = 0;\n            \n            // Iterate through the string, checking only even indices\n            for (int i = 0; i < s.Length; i += 2)\n            {\n                // Check if the character at index i is an uppercase vowel\n                if (uppercaseVowels.Contains(s[i]) && char.IsUpper(s[i]))\n                {\n                    count++;\n                }\n            }\n            \n            return count;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CountUpper(\"aBCdEf\"));  // Output: 1\n            Console.WriteLine(CountUpper(\"abcdefg\")); // Output: 0\n            Console.WriteLine(CountUpper(\"dBBE\"));     // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/99", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger(string value)\n        {\n            // Parse the string to a double\n            if (!double.TryParse(value, out double number))\n            {\n                throw new ArgumentException(\"Invalid input: not a valid number.\");\n            }\n\n            // Get the integer part and fractional part\n            int integerPart = (int)number;\n            double fractionalPart = number - integerPart;\n\n            // Determine if we need to round up or down based on the fractional part\n            if (fractionalPart > 0.5)\n            {\n                return (int)(number + 0.5);\n            }\n            else if (fractionalPart < -0.5)\n            {\n                return (int)(number - 0.5);\n            }\n            else\n            {\n                // If the fractional part is exactly 0.5 or less, round to the nearest integer\n                return integerPart;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(ClosestInteger(\"10\"));    // Output: 10\n            Console.WriteLine(ClosestInteger(\"15.3\"));  // Output: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\")); // Output: -15\n            Console.WriteLine(ClosestInteger(\"14.5\"));  // Output: 15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/100", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<int> MakeAPile(int n)\n    {\n        List<int> pile = new List<int>();\n        \n        // Determine the parity of n to decide whether to start with an odd or even number for the next level\n        bool isOdd = n % 2 != 0;\n        \n        int currentLevel = n;\n        \n        for (int i = 0; i < n; i++)\n        {\n            pile.Add(currentLevel);\n            \n            // Calculate the next level based on parity\n            if (isOdd)\n            {\n                currentLevel += 2; // Next odd number\n            }\n            else\n            {\n                currentLevel++; // Next even number\n                if (currentLevel % 2 != 0) // Ensure it's even\n                {\n                    currentLevel++;\n                }\n            }\n        }\n        \n        return pile;\n    }\n\n    public static void Main(string[] args)\n    {\n        int n = 3; // Example input\n        List<int> result = MakeAPile(n);\n        Console.WriteLine($\"[{string.Join(\", \", result)}]\");\n    }\n}"}
{"task_id": "HumanEval_csharp/101", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You will be given a string of words separated by commas or spaces. Your task is\n        /// to split the string into words and return an array of the words.\n        /// \n        /// For example:\n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString(string s) \n        {\n            // Split the string by spaces and commas\n            var words = Regex.Split(s, @\"[\\s,]\");\n            \n            // Filter out any empty strings resulting from splits\n            var filteredWords = words.Where(word => !string.IsNullOrEmpty(word)).ToList();\n            \n            return filteredWords;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", WordsString(\"Hi, my name is John\")));\n            Console.WriteLine(string.Join(\", \", WordsString(\"One, two, three, four, five, six\")));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/102", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// This function takes two positive numbers x and y and returns the\n        /// biggest even integer number that is in the range [x, y] inclusive. If \n        /// there's no such number, then the function should return -1.\n        /// \n        /// For example:\n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// \n        /// </summary>\n        public static int ChooseNum(int x, int y) \n        {\n            // Ensure x is less than or equal to y\n            if (x > y) return -1;\n\n            int maxEven = -1;\n\n            for (int i = x; i <= y; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    if (i > maxEven)\n                    {\n                        maxEven = i;\n                    }\n                }\n            }\n\n            return maxEven;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n            Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/103", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two positive integers n and m, and your task is to compute the\n        /// average of the integers from n through m (including n and m). \n        /// Round the answer to the nearest integer and convert that to binary.\n        /// If n is greater than m, return -1.\n        /// Example:\n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg(int n, int m) \n        {\n            if (n > m)\n                return -1;\n\n            // Calculate the sum of integers from n to m\n            int sum = ((m - n + 1) * (n + m)) / 2;\n\n            // Compute the average\n            double avg = (double)sum / (m - n + 1);\n\n            // Round to the nearest integer\n            int roundedAvg = (int)Math.Round(avg);\n\n            // Convert the rounded integer to binary string\n            string binaryString = \"0b\" + Convert.ToString(roundedAvg, 2);\n\n            return binaryString;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // Output: -1\n            Console.WriteLine(RoundedAvg(10, 20)); // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/104", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a list of positive integers x. return a sorted list of all \n        /// elements that hasn't any even digit.\n        /// \n        /// Note: Returned list should be sorted in increasing order.\n        /// \n        /// For example:\n        /// >>> UniqueDigits([15, 33, 1422, 1])\n        /// [1, 15, 33]\n        /// >>> UniqueDigits([152, 323, 1422, 10])\n        /// []\n        /// \n        /// </summary>\n        public static List<int> UniqueDigits(List<int> x)\n        {\n            // Filter the list to include only numbers with no even digits\n            var result = x.Where(num => !HasEvenDigit(num)).ToList();\n            \n            // Sort the filtered list in increasing order\n            result.Sort();\n            \n            return result;\n        }\n        \n        private static bool HasEvenDigit(int num)\n        {\n            string strNum = num.ToString();\n            foreach (char digit in strNum)\n            {\n                int digitValue = int.Parse(digit.ToString());\n                if (digitValue % 2 == 0)\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", UniqueDigits(new List<int> { 15, 33, 1422, 1 }))); // [1, 15, 33]\n            Console.WriteLine(string.Join(\", \", UniqueDigits(new List<int> { 152, 323, 1422, 10 }))); // []\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/105", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<string> ByLength(List<int> arr)\n    {\n        // Step 1: Filter the array to include only integers between 1 and 9 inclusive\n        var filteredArray = arr.Where(num => num >= 1 && num <= 9).ToList();\n        \n        // Step 2: Sort the filtered array in ascending order\n        filteredArray.Sort();\n        \n        // Step 3: Reverse the sorted array\n        filteredArray.Reverse();\n        \n        // Step 4: Map each digit to its corresponding name\n        var result = new List<string>();\n        foreach (var num in filteredArray)\n        {\n            switch (num)\n            {\n                case 1:\n                    result.Add(\"One\");\n                    break;\n                case 2:\n                    result.Add(\"Two\");\n                    break;\n                case 3:\n                    result.Add(\"Three\");\n                    break;\n                case 4:\n                    result.Add(\"Four\");\n                    break;\n                case 5:\n                    result.Add(\"Five\");\n                    break;\n                case 6:\n                    result.Add(\"Six\");\n                    break;\n                case 7:\n                    result.Add(\"Seven\");\n                    break;\n                case 8:\n                    result.Add(\"Eight\");\n                    break;\n                case 9:\n                    result.Add(\"Nine\");\n                    break;\n            }\n        }\n        \n        // Step 5: Return the resulting list of strings\n        return result;\n    }\n\n    public static void Main(string[] args)\n    {\n        var arr1 = new List<int> { 2, 1, 1, 4, 5, 8, 2, 3 };\n        Console.WriteLine(string.Join(\", \", ByLength(arr1))); // Output: Eight, Five, Four, Three, Two, Two, One, One\n\n        var arr2 = new List<int> { };\n        Console.WriteLine(string.Join(\", \", ByLength(arr2))); // Output: \n\n        var arr3 = new List<int> { 1, -1, 55 };\n        Console.WriteLine(string.Join(\", \", ByLength(arr3))); // Output: One\n    }\n}"}
{"task_id": "HumanEval_csharp/106", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Implement the Function F that takes n as a parameter,\n        /// and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n        /// or the sum oF numbers From 1 to i otherwise.\n        /// i starts From 1.\n        /// the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n        /// Example:\n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F(int n) \n        {\n            List<int> result = new List<int>();\n            \n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0) // Check if the index is even\n                {\n                    result.Add(Factorial(i)); // Calculate factorial if even\n                }\n                else\n                {\n                    result.Add(SumFromOneToN(i)); // Calculate sum from 1 to i if odd\n                }\n            }\n            \n            return result;\n        }\n        \n        private static int Factorial(int number)\n        {\n            int factorial = 1;\n            for (int i = 1; i <= number; i++)\n            {\n                factorial *= i;\n            }\n            return factorial;\n        }\n        \n        private static int SumFromOneToN(int number)\n        {\n            int sum = 0;\n            for (int i = 1; i <= number; i++)\n            {\n                sum += i;\n            }\n            return sum;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> result = F(5);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 2, 6, 24, 15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/107", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> EvenOddPalindrome(int n)\n    {\n        List<int> palindromes = new List<int>();\n        \n        // Generate all numbers from 1 to n and check if they are palindromes\n        for (int i = 1; i <= n; i++)\n        {\n            if (IsPalindrome(i))\n            {\n                palindromes.Add(i);\n            }\n        }\n        \n        // Count even and odd palindromes\n        int evenCount = palindromes.Count(p => p % 2 == 0);\n        int oddCount = palindromes.Count(p => p % 2 != 0);\n        \n        return new List<int> { evenCount, oddCount };\n    }\n    \n    private static bool IsPalindrome(int number)\n    {\n        string strNumber = number.ToString();\n        char[] charArray = strNumber.ToCharArray();\n        Array.Reverse(charArray);\n        string reversedStrNumber = new string(charArray);\n        return strNumber == reversedStrNumber;\n    }\n    \n    public static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(String.Join(\", \", EvenOddPalindrome(3))); // Output: 1, 2\n        Console.WriteLine(String.Join(\", \", EvenOddPalindrome(12))); // Output: 4, 6\n    }\n}"}
{"task_id": "HumanEval_csharp/108", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function CountNums which takes an array of integers and returns\n        /// the number of elements which has a sum of digits > 0.\n        /// If a number is negative, then its first signed digit will be negative:\n        /// e.g. -123 has signed digits -1, 2, and 3.\n        /// >>> CountNums([]) == 0\n        /// >>> CountNums([-1, 11, -11]) == 1\n        /// >>> CountNums([1, 1, 2]) == 3\n        /// \n        /// </summary>\n        public static int CountNums(List<int> arr) \n        {\n            int count = 0;\n            \n            foreach (var number in arr)\n            {\n                string numStr = Math.Abs(number).ToString();\n                int sumOfDigits = 0;\n                \n                for (int i = 0; i < numStr.Length; i++)\n                {\n                    int digit = int.Parse(numStr[i].ToString());\n                    if (number < 0 && i == 0)\n                    {\n                        digit *= -1;\n                    }\n                    sumOfDigits += digit;\n                }\n                \n                if (sumOfDigits > 0)\n                {\n                    count++;\n                }\n            }\n            \n            return count;\n        }\n        \n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(CountNums(new List<int>())); // Output: 0\n            Console.WriteLine(CountNums(new List<int>{-1, 11, -11})); // Output: 1\n            Console.WriteLine(CountNums(new List<int>{1, 1, 2})); // Output: 3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/109", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool MoveOneBall(List<int> arr)\n    {\n        if (arr == null || arr.Count == 0)\n            return true;\n\n        int n = arr.Count;\n        for (int shift = 0; shift < n; shift++)\n        {\n            List<int> rotatedArray = new List<int>(arr);\n            RotateRight(rotatedArray, shift);\n            if (IsSorted(rotatedArray))\n                return true;\n        }\n        return false;\n    }\n\n    private static void RotateRight(List<int> arr, int positions)\n    {\n        if (arr == null || arr.Count == 0)\n            return;\n\n        int n = arr.Count;\n        positions = positions % n; // In case the shift is larger than the array size\n        List<int> temp = new List<int>(arr);\n        for (int i = 0; i < n; i++)\n        {\n            arr[i] = temp[(i + n - positions) % n];\n        }\n    }\n\n    private static bool IsSorted(List<int> arr)\n    {\n        if (arr == null || arr.Count <= 1)\n            return true;\n\n        for (int i = 1; i < arr.Count; i++)\n        {\n            if (arr[i - 1] > arr[i])\n                return false;\n        }\n        return true;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(MoveOneBall(new List<int> { 3, 4, 5, 1, 2 })); // True\n        Console.WriteLine(MoveOneBall(new List<int> { 3, 5, 4, 1, 2 })); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/110", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// In this problem, you will implement a function that takes two lists of numbers,\n        /// and determines whether it is possible to perform an Exchange of elements\n        /// between them to make lst1 a list of only even numbers.\n        /// There is no limit on the number of Exchanged elements between lst1 and lst2.\n        /// If it is possible to Exchange elements between the lst1 and lst2 to make\n        /// all the elements of lst1 to be even, return \"YES\".\n        /// Otherwise, return \"NO\".\n        /// For example:\n        /// Exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n        /// Exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n        /// It is assumed that the input lists will be non-empty.\n        /// \n        /// </summary>\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Find all odd numbers in lst1\n            var oddNumbersInLst1 = lst1.Where(x => x % 2 != 0).ToList();\n            \n            // If there are no odd numbers in lst1, return \"YES\"\n            if (oddNumbersInLst1.Count == 0)\n            {\n                return \"YES\";\n            }\n            \n            // Find all even numbers in lst2\n            var evenNumbersInLst2 = lst2.Where(x => x % 2 == 0).ToList();\n            \n            // If there are fewer even numbers than odd numbers, it's impossible to make all elements in lst1 even\n            if (evenNumbersInLst2.Count < oddNumbersInLst1.Count)\n            {\n                return \"NO\";\n            }\n            \n            // Otherwise, it is possible to exchange elements to make lst1 all even\n            return \"YES\";\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Output: \"YES\"\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Output: \"NO\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/111", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a string representing a space separated lowercase letters, return a dictionary\n        /// of the letter with the most repetition and containing the corresponding count.\n        /// If several letters have the same occurrence, return all of them.\n        /// \n        /// Example:\n        /// Histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n        /// Histogram('a b b a') == {'a': 2, 'b': 2}\n        /// Histogram('a b c a b') == {'a': 2, 'b': 2}\n        /// Histogram('b b b b a') == {'b': 4}\n        /// Histogram('') == {}\n        /// \n        /// </summary>\n        public static Dictionary<string, int> Histogram(string test)\n        {\n            if (string.IsNullOrEmpty(test))\n            {\n                return new Dictionary<string, int>();\n            }\n\n            // Split the input string into individual letters\n            var letters = test.Split(' ');\n\n            // Create a dictionary to count occurrences of each letter\n            var counts = new Dictionary<string, int>();\n\n            foreach (var letter in letters)\n            {\n                if (!counts.ContainsKey(letter))\n                {\n                    counts[letter] = 0;\n                }\n                counts[letter]++;\n            }\n\n            // Find the maximum count\n            var maxCount = counts.Values.Max();\n\n            // Collect all letters with the maximum count\n            var result = new Dictionary<string, int>();\n            foreach (var kvp in counts)\n            {\n                if (kvp.Value == maxCount)\n                {\n                    result[kvp.Key] = kvp.Value;\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Histogram(\"a b c\")); // Output: {}\n            Console.WriteLine(Histogram(\"a b b a\")); // Output: {\"a\": 2, \"b\": 2}\n            Console.WriteLine(Histogram(\"a b c a b\")); // Output: {\"a\": 2, \"b\": 2}\n            Console.WriteLine(Histogram(\"b b b b a\")); // Output: {\"b\": 4}\n            Console.WriteLine(Histogram(\"\")); // Output: {}\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/112", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task\n        /// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n        /// then check if the result string is palindrome.\n        /// A string is called palindrome if it reads the same backward as forward.\n        /// You should return a tuple containing the result string and True/False for the check.\n        /// Example\n        /// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n        /// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n        /// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n        /// \n        /// </summary>\n        public static List<object> ReverseDelete(string s, string c) \n        {\n            // Step 1: Remove all characters in `s` that are present in `c`\n            var result = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n            \n            // Step 2: Check if the resulting string is a palindrome\n            bool isPalindrome = IsPalindrome(result);\n            \n            // Return the modified string and the result of the palindrome check as a list\n            return new List<object> { result, isPalindrome };\n        }\n        \n        private static bool IsPalindrome(string str)\n        {\n            int left = 0;\n            int right = str.Length - 1;\n            \n            while (left < right)\n            {\n                if (str[left] != str[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"Test 1: ({test1[0]}, {test1[1]})\"); // Expected output: ('bcd', False)\n            \n            var test2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"Test 2: ({test2[0]}, {test2[1]})\"); // Expected output: ('acdef', False)\n            \n            var test3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"Test 3: ({test3[0]}, {test3[1]})\"); // Expected output: ('cdedc', True)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/113", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a list of strings, where each string consists of only digits, return a list.\n        /// Each element i of the output should be \"the number of odd elements in the\n        /// string i of the input.\" where all the i's should be replaced by the number\n        /// of odd digits in the i'th string of the input.\n        /// \n        /// >>> OddCount(['1234567'])\n        /// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        /// >>> OddCount(['3',\"11111111\"])\n        /// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n        /// \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n        /// \n        /// </summary>\n        public static List<string> OddCount(List<string> lst)\n        {\n            List<string> result = new List<string>();\n\n            for (int i = 0; i < lst.Count; i++)\n            {\n                string inputString = lst[i];\n                int oddDigitCount = inputString.Count(c => \"13579\".Contains(c));\n                string outputString = $\"the number of odd elements {oddDigitCount}n the str{oddDigitCount}ng {oddDigitCount} of the {oddDigitCount}nput.\";\n                result.Add(outputString);\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<string> test1 = new List<string> { \"1234567\" };\n            List<string> test2 = new List<string> { \"3\", \"11111111\" };\n\n            Console.WriteLine(String.Join(\", \", OddCount(test1))); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n            Console.WriteLine(String.Join(\", \", OddCount(test2))); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/114", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        /// of nums.\n        /// Example\n        /// MinSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n        /// MinSubArraySum([-1, -2, -3]) == -6\n        /// \n        /// </summary>\n        public static int MinSubArraySum(List<int> nums)\n        {\n            if (nums == null || nums.Count == 0)\n                throw new ArgumentException(\"The input list cannot be null or empty.\");\n\n            // Initialize minSoFar to a very large number and currentMin to the first element\n            int minSoFar = int.MaxValue;\n            int currentMin = int.MaxValue;\n\n            foreach (int num in nums)\n            {\n                // Update currentMin with the minimum value between the current number and the sum of itself plus the previous currentMin\n                currentMin = Math.Min(num, num + currentMin);\n                // Update minSoFar if a smaller minimum is found\n                minSoFar = Math.Min(minSoFar, currentMin);\n            }\n\n            return minSoFar;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> nums1 = new List<int> { 2, 3, 4, 1, 2, 4 };\n            Console.WriteLine(MinSubArraySum(nums1)); // Output: 1\n\n            List<int> nums2 = new List<int> { -1, -2, -3 };\n            Console.WriteLine(MinSubArraySum(nums2)); // Output: -6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/115", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a rectangular grid of wells. Each row represents a single well,\n        /// and each 1 in a row represents a single unit of water.\n        /// Each well has a corresponding bucket that can be used to extract water from it, \n        /// and all buckets have the same capacity.\n        /// Your task is to use the buckets to empty the wells.\n        /// Output the number of times you need to lower the buckets.\n        /// \n        /// Example 1:\n        /// Input: \n        /// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        /// bucket_capacity : 1\n        /// Output: 6\n        /// \n        /// Example 2:\n        /// Input: \n        /// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        /// bucket_capacity : 2\n        /// Output: 5\n        /// \n        /// Example 3:\n        /// Input: \n        /// grid : [[0,0,0], [0,0,0]]\n        /// bucket_capacity : 5\n        /// Output: 0\n        /// \n        /// Constraints:\n        /// * all wells have the same length\n        /// * 1 <= grid.length <= 10^2\n        /// * 1 <= grid[:,1].length <= 10^2\n        /// * grid[i][j] -> 0 | 1\n        /// * 1 <= capacity <= 10\n        /// \n        /// </summary>\n        public static int MaxFill(List<List<int>> grid, int capacity)\n        {\n            int totalWater = 0;\n            \n            // Calculate the sum of all units of water in the grid\n            foreach (var row in grid)\n            {\n                totalWater += row.Sum();\n            }\n            \n            // If there is no water, return 0\n            if (totalWater == 0)\n            {\n                return 0;\n            }\n            \n            // Calculate the number of times we need to lower the bucket\n            int numberOfBuckets = totalWater / capacity;\n            \n            // If there is a remainder, we need one more bucket pull\n            if (totalWater % capacity != 0)\n            {\n                numberOfBuckets++;\n            }\n            \n            return numberOfBuckets;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<List<int>> grid1 = new List<List<int>> { new List<int> { 0, 0, 1, 0 }, new List<int> { 0, 1, 0, 0 }, new List<int> { 1, 1, 1, 1 } };\n            int bucketCapacity1 = 1;\n            Console.WriteLine(MaxFill(grid1, bucketCapacity1)); // Output: 6\n            \n            List<List<int>> grid2 = new List<List<int>> { new List<int> { 0, 0, 1, 1 }, new List<int> { 0, 0, 0, 0 }, new List<int> { 1, 1, 1, 1 }, new List<int> { 0, 1, 1, 1 } };\n            int bucketCapacity2 = 2;\n            Console.WriteLine(MaxFill(grid2, bucketCapacity2)); // Output: 5\n            \n            List<List<int>> grid3 = new List<List<int>> { new List<int> { 0, 0, 0 }, new List<int> { 0, 0, 0 } };\n            int bucketCapacity3 = 5;\n            Console.WriteLine(MaxFill(grid3, bucketCapacity3)); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/116", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// In this Kata, you have to sort an array of non-negative integers according to\n        /// number of ones in their binary representation in ascending order.\n        /// For similar number of ones, sort based on decimal value.\n        /// \n        /// It must be implemented like this:\n        /// >>> SortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n        /// >>> SortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n        /// >>> SortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n        /// \n        /// </summary>\n        public static List<int> SortArray(List<int> arr)\n        {\n            // Use LINQ to sort the array based on the number of ones in binary representation\n            return arr.OrderBy(num => Convert.ToString(num, 2).Count(c => c == '1')).ThenBy(num => num).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> { 1, 5, 2, 3, 4 }))); // Output: 1, 2, 3, 4, 5\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> { -2, -3, -4, -5, -6 }))); // Output: -6, -5, -4, -3, -2\n            Console.WriteLine(String.Join(\", \", SortArray(new List<int> { 1, 0, 2, 3, 4 }))); // Output: 0, 1, 2, 3, 4\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/117", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a string s and a natural number n, you have been tasked to implement \n        /// a function that returns a list of all words from string s that contain exactly \n        /// n consonants, in order these words appear in the string s.\n        /// If the string s is empty then the function should return an empty list.\n        /// Note: you may assume the input string contains only letters and spaces.\n        /// Examples:\n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords(string s, int n)\n        {\n            if (string.IsNullOrEmpty(s))\n                return new List<string>();\n\n            // Split the string into words\n            var words = s.Split(' ');\n\n            // Define a list to store words with exactly n consonants\n            List<string> result = new List<string>();\n\n            // Iterate through each word and check for the number of consonants\n            foreach (var word in words)\n            {\n                if (HasExactlyNConsonants(word, n))\n                {\n                    result.Add(word);\n                }\n            }\n\n            return result;\n        }\n\n        private static bool HasExactlyNConsonants(string word, int n)\n        {\n            // Define consonants\n            string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\n            // Count the number of consonants in the word\n            int count = 0;\n            foreach (char c in word)\n            {\n                if (consonants.Contains(c))\n                {\n                    count++;\n                }\n            }\n\n            // Check if the count matches n\n            return count == n;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // [\"little\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // [\"Mary\", \"lamb\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"simple white space\", 2))); // []\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Hello world\", 4))); // [\"world\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Uncle sam\", 3))); // [\"Uncle\"]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/118", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a word. Your task is to find the closest vowel that stands between \n        /// two consonants from the right side of the word (case sensitive).\n        /// \n        /// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n        /// find any vowel met the above condition. \n        /// \n        /// You may assume that the given string contains English letter only.\n        /// \n        /// Example:\n        /// GetClosestVowel(\"yogurt\") ==> \"u\"\n        /// GetClosestVowel(\"FULL\") ==> \"U\"\n        /// GetClosestVowel(\"quick\") ==> \"\"\n        /// GetClosestVowel(\"ab\") ==> \"\"\n        /// \n        /// </summary>\n        public static string GetClosestVowel(string word)\n        {\n            if (word.Length < 3) return \"\"; // If the word is too short, no vowel can be closest\n\n            string vowels = \"aeiouAEIOU\";\n            for (int i = word.Length - 2; i >= 1; i--)\n            {\n                char currentChar = word[i];\n                if (vowels.Contains(currentChar)) // Check if the character is a vowel\n                {\n                    char prevChar = word[i - 1];\n                    char nextChar = word[i + 1];\n                    if (!vowels.Contains(prevChar) && !vowels.Contains(nextChar))\n                    {\n                        return currentChar.ToString(); // Found the closest vowel\n                    }\n                }\n            }\n            return \"\"; // No vowel found meeting the criteria\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(GetClosestVowel(\"yogurt\")); // Output: \"u\"\n            Console.WriteLine(GetClosestVowel(\"FULL\"));   // Output: \"U\"\n            Console.WriteLine(GetClosestVowel(\"quick\"));  // Output: \"\"\n            Console.WriteLine(GetClosestVowel(\"ab\"));     // Output: \"\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/119", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static string MatchParens(List<string> lst)\n    {\n        // Helper function to check if a string has balanced parentheses\n        bool IsBalanced(string s)\n        {\n            int balance = 0;\n            foreach (char c in s)\n            {\n                if (c == '(')\n                {\n                    balance++;\n                }\n                else if (c == ')')\n                {\n                    balance--;\n                }\n                \n                // If balance is negative, there are more closing parentheses than opening ones\n                if (balance < 0)\n                {\n                    return false;\n                }\n            }\n            // If balance is zero at the end, all parentheses are balanced\n            return balance == 0;\n        }\n        \n        // Concatenate both strings in both possible orders\n        string s1s2 = lst[0] + lst[1];\n        string s2s1 = lst[1] + lst[0];\n        \n        // Check if either concatenated string is balanced\n        if (IsBalanced(s1s2) || IsBalanced(s2s1))\n        {\n            return \"Yes\";\n        }\n        else\n        {\n            return \"No\";\n        }\n    }\n    \n    public static void Main()\n    {\n        // Test cases\n        Console.WriteLine(MatchParens(new List<string> { \"(\", \")\" })); // Output: Yes\n        Console.WriteLine(MatchParens(new List<string> { \"()(\", \")\" })); // Output: Yes\n        Console.WriteLine(MatchParens(new List<string> { \")\", \")\" })); // Output: No\n    }\n}"}
{"task_id": "HumanEval_csharp/120", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array arr of integers and a positive integer k, return a sorted list \n        /// of length k with the Maximum k numbers in arr.\n        /// \n        /// Example 1:\n        /// \n        /// Input: arr = [-3, -4, 5], k = 3\n        /// Output: [-4, -3, 5]\n        /// \n        /// Example 2:\n        /// \n        /// Input: arr = [4, -4, 4], k = 2\n        /// Output: [4, 4]\n        /// \n        /// Example 3:\n        /// \n        /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        /// Output: [2]\n        /// \n        /// Note:\n        /// 1. The length of the array will be in the range of [1, 1000].\n        /// 2. The elements in the array will be in the range of [-1000, 1000].\n        /// 3. 0 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static List<int> Maximum(List<int> arr, int k) \n        {\n            // Sort the array in descending order\n            var sortedArr = arr.OrderByDescending(x => x).ToList();\n            \n            // Select the top k elements\n            var result = sortedArr.Take(k).ToList();\n            \n            // Return the result list\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int> {-3, -4, 5}, 3))); // Output: [-4, -3, 5]\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int> {4, -4, 4}, 2))); // Output: [4, 4]\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int> {-3, 2, 1, 2, -1, -2, 1}, 1))); // Output: [2]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/121", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n        /// \n        /// Examples\n        /// Solution([5, 8, 7, 1]) ==> 12\n        /// Solution([3, 3, 3, 3, 3]) ==> 9\n        /// Solution([30, 13, 24, 321]) ==>0\n        /// \n        /// </summary>\n        public static int Solution(List<int> lst)\n        {\n            int sum = 0;\n            for (int i = 0; i < lst.Count; i += 2) // Iterate over even indices\n            {\n                if (lst[i] % 2 != 0) // Check if the element at the even index is odd\n                {\n                    sum += lst[i];\n                }\n            }\n            return sum;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Solution(new List<int> { 5, 8, 7, 1 })); // Output: 12\n            Console.WriteLine(Solution(new List<int> { 3, 3, 3, 3, 3 })); // Output: 9\n            Console.WriteLine(Solution(new List<int> { 30, 13, 24, 321 })); // Output: 0\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/122", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a non-empty array of integers arr and an integer k, return\n        /// the sum of the elements with at most two digits from the first k elements of arr.\n        /// \n        /// Example:\n        /// \n        /// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        /// Output: 24 # sum of 21 + 3\n        /// \n        /// Constraints:\n        /// 1. 1 <= len(arr) <= 100\n        /// 2. 1 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static int AddElements(List<int> arr, int k)\n        {\n            // Ensure k is within the bounds of the array length\n            if (k > arr.Count || k < 1)\n            {\n                throw new ArgumentOutOfRangeException(nameof(k), \"The value of k must be between 1 and the length of the array.\");\n            }\n\n            // Sum the elements with at most two digits from the first k elements\n            int sum = 0;\n            for (int i = 0; i < k; i++)\n            {\n                if (arr[i].ToString().Length <= 2)\n                {\n                    sum += arr[i];\n                }\n            }\n\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> arr = new List<int> { 111, 21, 3, 4000, 5, 6, 7, 8, 9 };\n            int k = 4;\n            Console.WriteLine(AddElements(arr, k)); // Output: 24\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/123", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> GetOddCollatz(int n)\n    {\n        // Initialize a list to store the odd numbers from the Collatz sequence\n        List<int> oddNumbers = new List<int>();\n        \n        // Generate the Collatz sequence starting from n\n        while (n != 1)\n        {\n            if (n % 2 != 0) // Check if the number is odd\n            {\n                oddNumbers.Add(n);\n            }\n            \n            if (n % 2 == 0)\n            {\n                n = n / 2;\n            }\n            else\n            {\n                n = 3 * n + 1;\n            }\n        }\n        \n        // Add the last number 1 to the list since the sequence always ends with 1\n        oddNumbers.Add(1);\n        \n        // Sort the list of odd numbers in increasing order\n        oddNumbers.Sort();\n        \n        return oddNumbers;\n    }\n\n    public static void Main(string[] args)\n    {\n        // Test the function with an example input\n        int testInput = 5;\n        List<int> result = GetOddCollatz(testInput);\n        Console.WriteLine($\"GetOddCollatz({testInput}) returns: [{string.Join(\", \", result)}]\");\n    }\n}"}
{"task_id": "HumanEval_csharp/124", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\npublic class Program\n{\n    public static bool ValidDate(string date)\n    {\n        // Check if the date string is empty\n        if (string.IsNullOrEmpty(date))\n        {\n            return false;\n        }\n\n        // Define the regular expression for the date format mm-dd-yyyy\n        var regex = new Regex(@\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$\");\n        \n        // Check if the date string matches the expected format\n        if (!regex.IsMatch(date))\n        {\n            return false;\n        }\n\n        // Parse the month, day, and year from the date string\n        var match = regex.Match(date);\n        int month = int.Parse(match.Groups[1].Value);\n        int day = int.Parse(match.Groups[2].Value);\n        int year = int.Parse(match.Groups[3].Value);\n\n        // Check if the month is valid (1-12)\n        if (month < 1 || month > 12)\n        {\n            return false;\n        }\n\n        // Define the number of days in each month\n        int[] daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\n        // Adjust for leap years (February has 29 days)\n        if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))\n        {\n            daysInMonth[1] = 29;\n        }\n\n        // Check if the day is valid for the given month\n        if (day < 1 || day > daysInMonth[month - 1])\n        {\n            return false;\n        }\n\n        // If all checks pass, the date is valid\n        return true;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(ValidDate(\"03-11-2000\")); // True\n        Console.WriteLine(ValidDate(\"15-01-2012\")); // False\n        Console.WriteLine(ValidDate(\"04-0-2040\"));  // False\n        Console.WriteLine(ValidDate(\"06-04-2020\")); // True\n        Console.WriteLine(ValidDate(\"06/04/2020\")); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/125", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n        /// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n        /// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n        /// Examples\n        /// SplitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n        /// SplitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n        /// SplitWords(\"abcdef\") == 3 \n        /// \n        /// </summary>\n        public static object SplitWords(string txt) \n        {\n            // Check for whitespace first\n            if (!txt.Contains(' '))\n            {\n                // If no whitespaces, check for commas\n                if (!txt.Contains(','))\n                {\n                    // Count the number of lowercase letters with odd order in the alphabet\n                    int count = 0;\n                    foreach (char c in txt)\n                    {\n                        if (char.IsLower(c))\n                        {\n                            int index = c - 'a';\n                            if (index % 2 == 1) // Check for odd index\n                            {\n                                count++;\n                            }\n                        }\n                    }\n                    return count;\n                }\n                else\n                {\n                    // Split on commas\n                    return txt.Split(',');\n                }\n            }\n            else\n            {\n                // Split on whitespace\n                return txt.Split(' ');\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", (List<string>)SplitWords(\"Hello world!\")));\n            Console.WriteLine(string.Join(\", \", (List<string>)SplitWords(\"Hello,world!\")));\n            Console.WriteLine((int)SplitWords(\"abcdef\"));\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/126", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a list of numbers, return whether or not they are sorted\n        /// in ascending order. If list has more than 1 duplicate of the same\n        /// number, return False. Assume no negative numbers and only integers.\n        /// \n        /// Examples\n        /// IsSorted([5]) \u279e True\n        /// IsSorted([1, 2, 3, 4, 5]) \u279e True\n        /// IsSorted([1, 3, 2, 4, 5]) \u279e False\n        /// IsSorted([1, 2, 3, 4, 5, 6]) \u279e True\n        /// IsSorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n        /// IsSorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n        /// IsSorted([1, 2, 2, 3, 3, 4]) \u279e True\n        /// IsSorted([1, 2, 2, 2, 3, 4]) \u279e False\n        /// \n        /// </summary>\n        public static bool IsSorted(List<int> lst)\n        {\n            if (lst.Count <= 1) return true; // An empty list or a single element list is always sorted\n\n            HashSet<int> seen = new HashSet<int>();\n            for (int i = 0; i < lst.Count - 1; i++)\n            {\n                if (lst[i] >= lst[i + 1]) return false; // Check if the list is not sorted in ascending order\n                if (!seen.Add(lst[i])) return false; // If a duplicate is found, return false\n            }\n            // Add the last element to the set after checking all pairs\n            seen.Add(lst[lst.Count - 1]);\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsSorted(new List<int> { 5 })); // True\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 3, 4, 5 })); // True\n            Console.WriteLine(IsSorted(new List<int> { 1, 3, 2, 4, 5 })); // False\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 3, 4, 5, 6 })); // True\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 3, 4, 5, 6, 7 })); // True\n            Console.WriteLine(IsSorted(new List<int> { 1, 3, 2, 4, 5, 6, 7 })); // False\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 2, 3, 3, 4 })); // True\n            Console.WriteLine(IsSorted(new List<int> { 1, 2, 2, 2, 3, 4 })); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/127", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two intervals,\n        /// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n        /// The given intervals are closed which means that the interval (start, end)\n        /// includes both start and end.\n        /// For each given interval, it is assumed that its start is less or equal its end.\n        /// Your task is to determine whether the length of Intersection of these two \n        /// intervals is a prime number.\n        /// Example, the Intersection of the intervals (1, 3), (2, 4) is (2, 3)\n        /// which its length is 1, which not a prime number.\n        /// If the length of the Intersection is a prime number, return \"YES\",\n        /// otherwise, return \"NO\".\n        /// If the two intervals don't intersect, return \"NO\".\n        /// \n        /// \n        /// [input/output] samples:\n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// \n        /// </summary>\n        public static string Intersection(List<int> interval1, List<int> interval2) \n        {\n            int start1 = interval1[0];\n            int end1 = interval1[1];\n            int start2 = interval2[0];\n            int end2 = interval2[1];\n\n            // Find the intersection of the two intervals\n            int intersectionStart = Math.Max(start1, start2);\n            int intersectionEnd = Math.Min(end1, end2);\n\n            if (intersectionStart > intersectionEnd)\n            {\n                return \"NO\";\n            }\n\n            // Calculate the length of the intersection\n            int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n            // Check if the length is a prime number\n            if (IsPrime(intersectionLength))\n            {\n                return \"YES\";\n            }\n            else\n            {\n                return \"NO\";\n            }\n        }\n\n        private static bool IsPrime(int num)\n        {\n            if (num <= 1)\n            {\n                return false;\n            }\n            if (num == 2)\n            {\n                return true;\n            }\n            if (num % 2 == 0)\n            {\n                return false;\n            }\n            for (int i = 3; i <= Math.Sqrt(num); i += 2)\n            {\n                if (num % i == 0)\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Intersection(new List<int> { 1, 2 }, new List<int> { 2, 3 })); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> { -1, 1 }, new List<int> { 0, 4 })); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> { -3, -1 }, new List<int> { -5, 5 })); // \"YES\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/128", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given an array arr of integers and you need to return\n        /// sum of magnitudes of integers multiplied by product of all signs\n        /// of each number in the array, represented by 1, -1 or 0.\n        /// Note: return None for empty arr.\n        /// \n        /// Example:\n        /// >>> ProdSigns([1, 2, 2, -4]) == -9\n        /// >>> ProdSigns([0, 1]) == 0\n        /// >>> ProdSigns([]) == None\n        /// \n        /// </summary>\n        public static object ProdSigns(List<int> arr) \n        {\n            if (arr == null || arr.Count == 0)\n            {\n                return null;\n            }\n\n            int sumOfMagnitudes = 0;\n            foreach (var num in arr)\n            {\n                sumOfMagnitudes += Math.Abs(num);\n            }\n\n            int productOfSigns = 1;\n            foreach (var num in arr)\n            {\n                if (num > 0)\n                {\n                    productOfSigns *= 1;\n                }\n                else if (num < 0)\n                {\n                    productOfSigns *= -1;\n                }\n                // If num is 0, it doesn't change the product of signs\n            }\n\n            return sumOfMagnitudes * productOfSigns;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(ProdSigns(new List<int> { 1, 2, 2, -4 })); // Output: -9\n            Console.WriteLine(ProdSigns(new List<int> { 0, 1 })); // Output: 0\n            Console.WriteLine(ProdSigns(new List<int> { })); // Output: None\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/129", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> MinPath(List<List<int>> grid, int k)\n    {\n        int N = grid.Count;\n        int[][] directions = new int[][] {\n            new int[] {0, 1}, // right\n            new int[] {1, 0}, // down\n            new int[] {0, -1}, // left\n            new int[] {-1, 0} // up\n        };\n        \n        string MinPath = null;\n        \n        for (int startRow = 0; startRow < N; startRow++)\n        {\n            for (int startCol = 0; startCol < N; startCol++)\n            {\n                Queue<(int row, int col, List<int> path)> queue = new Queue<(int row, int col, List<int> path)>();\n                queue.Enqueue((startRow, startCol, new List<int>() { grid[startRow][startCol] }));\n                \n                while (queue.Count > 0)\n                {\n                    var current = queue.Dequeue();\n                    int row = current.row;\n                    int col = current.col;\n                    List<int> path = new List<int>(current.path);\n                    \n                    if (path.Count == k)\n                    {\n                        string currentPathStr = string.Join(\",\", path);\n                        if (MinPath == null || string.Compare(currentPathStr, MinPath) < 0)\n                        {\n                            MinPath = currentPathStr;\n                        }\n                        continue;\n                    }\n                    \n                    foreach (var direction in directions)\n                    {\n                        int newRow = row + direction[0];\n                        int newCol = col + direction[1];\n                        \n                        if (newRow >= 0 && newRow < N && newCol >= 0 && newCol < N)\n                        {\n                            List<int> newPath = new List<int>(path);\n                            newPath.Add(grid[newRow][newCol]);\n                            queue.Enqueue((newRow, newCol, newPath));\n                        }\n                    }\n                }\n            }\n        }\n        \n        return MinPath.Split(',').Select(int.Parse).ToList();\n    }\n    \n    public static void Main()\n    {\n        List<List<int>> grid1 = new List<List<int>>() {\n            new List<int>() { 1, 2, 3 },\n            new List<int>() { 4, 5, 6 },\n            new List<int>() { 7, 8, 9 }\n        };\n        \n        int k1 = 3;\n        var result1 = MinPath(grid1, k1);\n        Console.WriteLine(string.Join(\", \", result1)); // Output: [1, 2, 1]\n        \n        List<List<int>> grid2 = new List<List<int>>() {\n            new List<int>() { 5, 9, 3 },\n            new List<int>() { 4, 1, 6 },\n            new List<int>() { 7, 8, 2 }\n        };\n        \n        int k2 = 1;\n        var result2 = MinPath(grid2, k2);\n        Console.WriteLine(string.Join(\", \", result2)); // Output: [1]\n    }\n}"}
{"task_id": "HumanEval_csharp/130", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n        /// the last couple centuries. However, what people don't know is Tribonacci sequence.\n        /// Tribonacci sequence is defined by the recurrence:\n        /// Tri(1) = 3\n        /// Tri(n) = 1 + n / 2, if n is even.\n        /// Tri(n) =  Tri(n - 1) + Tri(n - 2) + Tri(n + 1), if n is odd.\n        /// For example:\n        /// Tri(2) = 1 + (2 / 2) = 2\n        /// Tri(4) = 3\n        /// Tri(3) = Tri(2) + Tri(1) + Tri(4)\n        /// = 2 + 3 + 3 = 8 \n        /// You are given a non-negative integer number n, you have to return a list of the \n        /// first n + 1 numbers of the Tribonacci sequence.\n        /// Examples:\n        /// Tri(3) = [1, 3, 2, 8]\n        /// \n        /// </summary>\n        public static List<object> Tri(int n)\n        {\n            // Initialize a list to store the Tribonacci sequence values\n            List<object> result = new List<object>();\n            \n            // Handle the base case for Tri(1)\n            if (n >= 0) result.Add(3);\n            \n            // Calculate the Tribonacci sequence up to n\n            for (int i = 1; i <= n; i++)\n            {\n                int value;\n                if (i == 1)\n                {\n                    value = 3;\n                }\n                else if (i % 2 == 0)\n                {\n                    value = 1 + i / 2;\n                }\n                else\n                {\n                    value = Tri(i - 1) + Tri(i - 2) + Tri(i + 1);\n                }\n                result.Add(value);\n            }\n            \n            return result;\n        }\n        \n        // Helper method to calculate Tribonacci values recursively\n        private static int Tri(int n)\n        {\n            if (n == 1) return 3;\n            if (n % 2 == 0) return 1 + n / 2;\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Example usage\n            int n = 3;\n            List<object> result = Tri(n);\n            Console.WriteLine($\"Tri({n}) = [{string.Join(\", \", result)}]\");\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/131", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive integer n, return the product of the odd Digits.\n        /// Return 0 if all Digits are even.\n        /// For example:\n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits(int n)\n        {\n            string numberStr = n.ToString();\n            bool hasOddDigit = false;\n            int product = 1;\n\n            foreach (char digitChar in numberStr)\n            {\n                int digit = int.Parse(digitChar.ToString());\n                if (digit % 2 != 0)\n                {\n                    product *= digit;\n                    hasOddDigit = true;\n                }\n            }\n\n            return hasOddDigit ? product : 0;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Digits(1));   // Output: 1\n            Console.WriteLine(Digits(4));   // Output: 0\n            Console.WriteLine(Digits(235)); // Output: 15\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/132", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static bool IsNested(string string0)\n    {\n        Stack<char> stack = new Stack<char>();\n        \n        foreach (char ch in string0)\n        {\n            if (ch == '[')\n            {\n                stack.Push(ch);\n            }\n            else if (ch == ']')\n            {\n                if (stack.Count > 0 && stack.Peek() == '[')\n                {\n                    stack.Pop();\n                }\n                else\n                {\n                    return false; // Unmatched closing bracket\n                }\n            }\n        }\n        \n        return stack.Count == 0;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsNested(\"[[]]\")); // True\n        Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // False\n        Console.WriteLine(IsNested(\"[][]\")); // False\n        Console.WriteLine(IsNested(\"[]\")); // False\n        Console.WriteLine(IsNested(\"[[][]]\")); // True\n        Console.WriteLine(IsNested(\"[[]][[\")); // True\n    }\n}"}
{"task_id": "HumanEval_csharp/133", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// \n        /// </summary>\n        public static int SumSquares(List<object> lst)\n        {\n            // Step 1: Round each element in the list to the nearest integer using ceiling method\n            List<double> roundedList = new List<double>();\n            foreach (var item in lst)\n            {\n                if (item is double num)\n                {\n                    roundedList.Add(Math.Ceiling(num));\n                }\n                else if (item is int numInt)\n                {\n                    roundedList.Add((double)numInt);\n                }\n            }\n\n            // Step 2: Square each of the rounded numbers\n            List<int> squaredList = roundedList.Select(x => (int)Math.Pow(x, 2)).ToList();\n\n            // Step 3: Sum all the squared numbers\n            int sumOfSquares = squaredList.Sum();\n\n            // Step 4: Return the sum\n            return sumOfSquares;\n        }\n\n        static void Main(string[] args)\n        {\n            List<object> lst1 = new List<object> { 1, 2, 3 };\n            Console.WriteLine(SumSquares(lst1)); // Output: 14\n\n            List<object> lst2 = new List<object> { 1, 4, 9 };\n            Console.WriteLine(SumSquares(lst2)); // Output: 98\n\n            List<object> lst3 = new List<object> { 1, 3, 5, 7 };\n            Console.WriteLine(SumSquares(lst3)); // Output: 84\n\n            List<object> lst4 = new List<object> { 1.4, 4.2, 0 };\n            Console.WriteLine(SumSquares(lst4)); // Output: 29\n\n            List<object> lst5 = new List<object> { -2.4, 1, 1 };\n            Console.WriteLine(SumSquares(lst5)); // Output: 6\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/134", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns True if the last character\n        /// of a given string is an alphabetical character and is not\n        /// a part of a word, and False otherwise.\n        /// Note: \"word\" is a group of characters separated by space.\n        /// \n        /// Examples:\n        /// CheckIfLastCharIsALetter(\"apple pie\") \u279e False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") \u279e True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") \u279e False\n        /// CheckIfLastCharIsALetter(\"\") \u279e False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            // Trim any trailing spaces from the string\n            txt = txt.Trim();\n\n            // If the string is empty after trimming, return false\n            if (txt == \"\")\n                return false;\n\n            // Get the last character of the string\n            char lastChar = txt[txt.Length - 1];\n\n            // Check if the last character is an alphabetical character\n            if (!char.IsLetter(lastChar))\n                return false;\n\n            // Split the string into words and check if the last character is part of any word\n            string[] words = txt.Split(' ');\n            foreach (string word in words)\n            {\n                if (word.Contains(lastChar))\n                    return false;\n            }\n\n            // If all checks pass, return true\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // \u279e False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/135", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Create a function which returns the largest index of an element which\n        /// is not greater than or equal to the element immediately preceding it. If\n        /// no such element exists then return -1. The given array will not contain\n        /// duplicate values.\n        /// \n        /// Examples:\n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange(List<int> arr)\n        {\n            for (int i = arr.Count - 1; i > 0; i--)\n            {\n                if (arr[i] < arr[i - 1])\n                {\n                    return i;\n                }\n            }\n            return -1;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Output: 3\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 })); // Output: -1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/136", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns a tuple (a, b), where 'a' is\n        /// the largest of negative integers, and 'b' is the smallest\n        /// of positive integers in a list.\n        /// If there is no negative or positive integers, return them as None.\n        /// \n        /// Examples:\n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static Tuple<object, object> LargestSmallestIntegers(List<int> lst)\n        {\n            int? largestNegative = null;\n            int? smallestPositive = null;\n\n            foreach (var num in lst)\n            {\n                if (num < 0)\n                {\n                    if (largestNegative == null || num > largestNegative)\n                    {\n                        largestNegative = num;\n                    }\n                }\n                else if (num > 0)\n                {\n                    if (smallestPositive == null || num < smallestPositive)\n                    {\n                        smallestPositive = num;\n                    }\n                }\n            }\n\n            return Tuple.FromValues(\n                largestNegative != null ? (object)largestNegative : null,\n                smallestPositive != null ? (object)smallestPositive : null\n            );\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 2, 4, 1, 3, 5, 7 })); // (None, 1)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { })); // (None, None)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 0 })); // (None, None)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/137", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes integers, floats, or strings representing\n        /// real numbers, and returns the larger variable in its given variable type.\n        /// Return None if the values are equal.\n        /// Note: If a real number is represented as a string, the floating point might be . or ,\n        /// \n        /// CompareOne(1, 2.5) \u279e 2.5\n        /// CompareOne(1, \"2,3\") \u279e \"2,3\"\n        /// CompareOne(\"5,1\", \"6\") \u279e \"6\"\n        /// CompareOne(\"1\", 1) \u279e None\n        /// \n        /// </summary>\n        public static object CompareOne(object a, object b) \n        {\n            // Helper function to convert string to numeric value\n            bool TryParseNumber(string s, out IComparable number)\n            {\n                if (s.Contains(\".\"))\n                {\n                    return float.TryParse(s.Replace(\",\", \".\"), out var f) ? (number = f, true) : (number = null, false);\n                }\n                else\n                {\n                    return int.TryParse(s.Replace(\",\", \"\"), out var i) ? (number = i, true) : (number = null, false);\n                }\n            }\n\n            // Convert inputs to numeric values if possible\n            if (a is string strA && TryParseNumber(strA, out var numA))\n            {\n                if (b is string strB && TryParseNumber(strB, out var numB))\n                {\n                    int comparison = numA.CompareTo(numB);\n                    return comparison > 0 ? a : (comparison < 0 ? b : null);\n                }\n                else if (b is IComparable numBObj && numBObj is float || numBObj is int)\n                {\n                    int comparison = numA.CompareTo(numBObj);\n                    return comparison > 0 ? a : (comparison < 0 ? b : null);\n                }\n            }\n            else if (b is string strB && TryParseNumber(strB, out var numB))\n            {\n                if (a is string strA && TryParseNumber(strA, out var numA))\n                {\n                    int comparison = numA.CompareTo(numB);\n                    return comparison > 0 ? a : (comparison < 0 ? b : null);\n                }\n                else if (a is IComparable numAObj && numAObj is float || numAObj is int)\n                {\n                    int comparison = numAObj.CompareTo(numB);\n                    return comparison > 0 ? a : (comparison < 0 ? b : null);\n                }\n            }\n            else if (a is IComparable numAObj && numAObj is float || numAObj is int)\n            {\n                if (b is IComparable numBObj && numBObj is float || numBObj is int)\n                {\n                    int comparison = numAObj.CompareTo(numBObj);\n                    return comparison > 0 ? a : (comparison < 0 ? b : null);\n                }\n            }\n\n            // If none of the inputs are numeric strings, compare as objects\n            if (a is IComparable objA && b is IComparable objB)\n            {\n                int comparison = objA.CompareTo(objB);\n                return comparison > 0 ? a : (comparison < 0 ? b : null);\n            }\n\n            // If inputs are not comparable, or if they are equal, return None\n            return null;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CompareOne(1, 2.5)); // \u279e 2.5\n            Console.WriteLine(CompareOne(1, \"2,3\")); // \u279e \"2,3\"\n            Console.WriteLine(CompareOne(\"5,1\", \"6\")); // \u279e \"6\"\n            Console.WriteLine(CompareOne(\"1\", 1)); // \u279e None\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/138", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n        /// Example\n        /// IsEqualToSumEven(4) == False\n        /// IsEqualToSumEven(6) == False\n        /// IsEqualToSumEven(8) == True\n        /// </summary>\n        public static bool IsEqualToSumEven(int n) \n        {\n            // Check if n is less than 8, return false immediately as it's not possible to sum 4 even numbers to get a number less than 8\n            if (n < 8)\n            {\n                return false;\n            }\n            \n            // If n is greater than or equal to 8, check if the remaining value after subtracting 8 is non-negative\n            return (n - 8) >= 0;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsEqualToSumEven(4)); // False\n            Console.WriteLine(IsEqualToSumEven(6)); // False\n            Console.WriteLine(IsEqualToSumEven(8)); // True\n            Console.WriteLine(IsEqualToSumEven(10)); // True\n            Console.WriteLine(IsEqualToSumEven(12)); // True\n            Console.WriteLine(IsEqualToSumEven(14)); // True\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/139", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// The Brazilian factorial is defined as:\n        /// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        /// where n > 0\n        /// \n        /// For example:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial(int n)\n        {\n            if (n <= 0)\n            {\n                throw new ArgumentException(\"n must be greater than 0\");\n            }\n\n            int result = 1;\n            for (int i = n; i > 0; i--)\n            {\n                result *= Factorial(i);\n            }\n\n            return result;\n        }\n\n        private static int Factorial(int number)\n        {\n            if (number == 0 || number == 1)\n            {\n                return 1;\n            }\n\n            int factorial = 1;\n            for (int i = 2; i <= number; i++)\n            {\n                factorial *= i;\n            }\n\n            return factorial;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFactorial(4)); // Output: 288\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/140", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a string text, replace all spaces in it with underscores, \n        /// and if a string has more than 2 consecutive spaces, \n        /// then replace all consecutive spaces with - \n        /// \n        /// FixSpaces(\"Example\") == \"Example\"\n        /// FixSpaces(\"Example 1\") == \"Example_1\"\n        /// FixSpaces(\" Example 2\") == \"_Example_2\"\n        /// FixSpaces(\" Example   3\") == \"_Example-3\"\n        /// \n        /// </summary>\n        public static string FixSpaces(string text)\n        {\n            // Step 1: Replace single spaces with underscores\n            string intermediateResult = Regex.Replace(text, @\"\\s\", \"_\");\n            \n            // Step 2: Replace more than two consecutive underscores with a hyphen\n            string finalResult = Regex.Replace(intermediateResult, @\"_{3,}\", \"-\");\n            \n            return finalResult;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FixSpaces(\"Example\")); // Output: \"Example\"\n            Console.WriteLine(FixSpaces(\"Example 1\")); // Output: \"Example_1\"\n            Console.WriteLine(FixSpaces(\" Example 2\")); // Output: \"_Example_2\"\n            Console.WriteLine(FixSpaces(\" Example   3\")); // Output: \"_Example-3\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/141", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Create a function which takes a string representing a file's name, and returns\n        /// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n        /// A file's name is considered to be valid if and only if all the following conditions \n        /// are met:\n        /// - There should not be more than three digits ('0'-'9') in the file's name.\n        /// - The file's name contains exactly one dot '.'\n        /// - The substring before the dot should not be empty, and it starts with a letter from \n        /// the latin alphapet ('a'-'z' and 'A'-'Z').\n        /// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n        /// Examples:\n        /// FileNameCheck(\"example.txt\") # => 'Yes'\n        /// FileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n        /// \n        /// </summary>\n        public static string FileNameCheck(string file_name)\n        {\n            // Check if the file name contains exactly one dot '.'\n            var parts = file_name.Split('.');\n            if (parts.Length != 2)\n            {\n                return \"No\";\n            }\n\n            string namePart = parts[0];\n            string extensionPart = parts[1];\n\n            // Check if the substring before the dot is not empty and starts with a letter from the latin alphabet\n            if (string.IsNullOrEmpty(namePart) || !Regex.IsMatch(namePart[0].ToString(), \"^[a-zA-Z]\"))\n            {\n                return \"No\";\n            }\n\n            // Check if the substring after the dot is one of the allowed extensions\n            string[] allowedExtensions = { \"txt\", \"exe\", \"dll\" };\n            if (!allowedExtensions.Contains(extensionPart))\n            {\n                return \"No\";\n            }\n\n            // Check if there are more than three digits in the name part\n            if (Regex.IsMatch(namePart, @\"\\d{4,}\"))\n            {\n                return \"No\";\n            }\n\n            // If all conditions are met, return 'Yes'\n            return \"Yes\";\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FileNameCheck(\"example.txt\")); // => 'Yes'\n            Console.WriteLine(FileNameCheck(\"1example.dll\")); // => 'No'\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/142", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// </summary>\n        public static int SumSquares(List<int> lst)\n        {\n            return lst.Sum(x => x * x);\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> numbers = new List<int> { 1, 2, 3, 4 };\n            int result = SumSquares(numbers);\n            Console.WriteLine(\"Sum of squares: \" + result); // Output should be 30 (1^2 + 2^2 + 3^2 + 4^2)\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/143", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Test cases\n        Console.WriteLine(WordsInSentence(\"This is a test\")); // Output: \"is\"\n        Console.WriteLine(WordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n\n    public static string WordsInSentence(string sentence)\n    {\n        // Split the sentence into words\n        var words = sentence.Split(' ');\n\n        // Filter words whose lengths are prime numbers\n        var primeLengthWords = words.Where(word => IsPrime(word.Length)).ToList();\n\n        // Join the filtered words back into a string\n        return string.Join(\" \", primeLengthWords);\n    }\n\n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i += 2)\n        {\n            if (number % i == 0) return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "HumanEval_csharp/144", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Your task is to implement a function that will Simplify the expression\n        /// x * n. The function returns True if x * n evaluates to a whole number and False\n        /// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n        /// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n        /// \n        /// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n        /// \n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify(string x, string n) \n        {\n            // Helper function to parse a fraction string into numerator and denominator\n            (int Numerator, int Denominator) ParseFraction(string fraction)\n            {\n                var parts = fraction.Split('/');\n                return (int.Parse(parts[0]), int.Parse(parts[1]));\n            }\n\n            // Parse the fractions\n            var xParts = ParseFraction(x);\n            var nParts = ParseFraction(n);\n\n            // Multiply the numerators and denominators\n            int numeratorResult = xParts.Numerator * nParts.Numerator;\n            int denominatorResult = xParts.Denominator * nParts.Denominator;\n\n            // Check if the resulting fraction is a whole number\n            return numeratorResult % denominatorResult == 0;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/145", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> OrderByPoints(List<int> nums)\n    {\n        if (nums == null || !nums.Any())\n            return new List<int>();\n\n        // Create a list of tuples where each tuple contains the number and its digit sum\n        var numsWithSum = nums.Select((num, index) => new { Num = num, Sum = Math.Abs(num).ToString().Where(char.IsDigit).Sum(c => c - '0') }).ToList();\n\n        // Sort the list of tuples by the digit sum, and then by the original index if sums are equal\n        var sortedList = numsWithSum.OrderBy(ns => ns.Sum)\n                                    .ThenBy(ns => nums.IndexOf(ns.Num))\n                                    .Select(ns => ns.Num)\n                                    .ToList();\n\n        return sortedList;\n    }\n\n    public static void Main()\n    {\n        // Test cases\n        Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { 1, 11, -1, -11, -12 }))); // Output: -1, -11, 1, -12, 11\n        Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int>()))); // Output: \n    }\n}"}
{"task_id": "HumanEval_csharp/146", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes an array of numbers as input and returns \n        /// the number of elements in the array that are greater than 10 and both \n        /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n        /// For example:\n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter(List<int> nums)\n        {\n            // Helper function to check if a number is odd\n            bool IsOddDigit(char digit)\n            {\n                return \"13579\".Contains(digit);\n            }\n\n            // Helper function to get the first and last digits of a number\n            (char FirstDigit, char LastDigit) GetFirstAndLastDigits(int num)\n            {\n                string numStr = Math.Abs(num).ToString();\n                char firstDigit = numStr[0];\n                char lastDigit = numStr[^1];\n                return (firstDigit, lastDigit);\n            }\n\n            // Filter the numbers based on the conditions\n            int count = 0;\n            foreach (int num in nums)\n            {\n                if (num > 10)\n                {\n                    var digits = GetFirstAndLastDigits(num);\n                    if (IsOddDigit(digits.FirstDigit) && IsOddDigit(digits.LastDigit))\n                    {\n                        count++;\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            List<int> nums1 = new List<int> { 15, -73, 14, -15 };\n            Console.WriteLine(SpecialFilter(nums1)); // Output: 1\n\n            List<int> nums2 = new List<int> { 33, -2, -3, 45, 21, 109 };\n            Console.WriteLine(SpecialFilter(nums2)); // Output: 2\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/147", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a positive integer n. You have to create an integer array a of length n.\n        /// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        /// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        /// and a[i] + a[j] + a[k] is a multiple of 3.\n        /// \n        /// Example :\n        /// Input: n = 5\n        /// Output: 1\n        /// Explanation: \n        /// a = [1, 3, 7, 13, 21]\n        /// The only valid triple is (1, 7, 13).\n        /// \n        /// </summary>\n        public static int GetMaxTriples(int n)\n        {\n            // Generate the array a based on the given formula\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n            {\n                a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n            }\n\n            // Initialize the count of valid triples\n            int count = 0;\n\n            // Iterate through all possible triples (i, j, k) where i < j < k\n            for (int i = 0; i < n - 2; i++)\n            {\n                for (int j = i + 1; j < n - 1; j++)\n                {\n                    for (int k = j + 1; k < n; k++)\n                    {\n                        if ((a[i] + a[j] + a[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        public static void Main(string[] args)\n        {\n            int n = 5; // Example input\n            Console.WriteLine(GetMaxTriples(n)); // Output: 1\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/148", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// There are eight planets in our solar system: the closerst to the Sun \n        /// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n        /// Uranus, Neptune.\n        /// Write a function that takes two planet names as strings planet1 and planet2. \n        /// The function should return a tuple containing all planets whose orbits are \n        /// located between the orbit of planet1 and the orbit of planet2, sorted by \n        /// the proximity to the sun. \n        /// The function should return an empty tuple if planet1 or planet2\n        /// are not correct planet names. \n        /// Examples\n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static List<string> Bf(string planet1, string planet2)\n        {\n            // Define the list of planets in order of their proximity to the Sun\n            List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\n            // Validate input planets\n            if (!planets.Contains(planet1) || !planets.Contains(planet2))\n            {\n                return new List<string>();\n            }\n\n            // Find the indices of the given planets\n            int index1 = planets.IndexOf(planet1);\n            int index2 = planets.IndexOf(planet2);\n\n            // Ensure index1 is less than index2 for easier processing\n            if (index1 > index2)\n            {\n                int temp = index1;\n                index1 = index2;\n                index2 = temp;\n            }\n\n            // Get the planets between the two indices (inclusive of both ends)\n            List<string> result = planets.Skip(index1 + 1).Take(index2 - index1 - 1).ToList();\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))); // Output: Saturn, Uranus\n            Console.WriteLine(string.Join(\", \", Bf(\"Earth\", \"Mercury\"))); // Output: Venus\n            Console.WriteLine(string.Join(\", \", Bf(\"Mercury\", \"Uranus\"))); // Output: Venus, Earth, Mars, Jupiter, Saturn\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/149", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that accepts a list of strings as a parameter,\n        /// deletes the strings that have odd lengths from it,\n        /// and returns the resulted list with a sorted order,\n        /// The list is always a list of strings and never an array of numbers,\n        /// and it may contain duplicates.\n        /// The order of the list should be ascending by length of each word, and you\n        /// should return the list sorted by that rule.\n        /// If two words have the same length, sort the list alphabetically.\n        /// The function should return a list of strings in sorted order.\n        /// You may assume that all words will have the same length.\n        /// For example:\n        /// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n        /// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n        /// \n        /// </summary>\n        public static List<string> SortedListSum(List<string> lst) \n        {\n            // Filter out strings with odd lengths\n            var filteredList = lst.Where(s => s.Length % 2 == 0).ToList();\n\n            // Sort the list by length, then alphabetically if lengths are equal\n            filteredList.Sort((a, b) => \n            {\n                int lengthComparison = a.Length.CompareTo(b.Length);\n                return lengthComparison != 0 ? lengthComparison : string.Compare(a, b, StringComparison.Ordinal);\n            });\n\n            return filteredList;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<string> test1 = new List<string> { \"aa\", \"a\", \"aaa\" };\n            List<string> test2 = new List<string> { \"ab\", \"a\", \"aaa\", \"cd\" };\n\n            Console.WriteLine(string.Join(\", \", SortedListSum(test1))); // Output: [\"aa\"]\n            Console.WriteLine(string.Join(\", \", SortedListSum(test2))); // Output: [\"ab\", \"cd\"]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/150", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// A simple program which should return the value of x if n is \n        /// a prime number and should return the value of y otherwise.\n        /// \n        /// Examples:\n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// </summary>\n        public static int XOrY(int n, int x, int y) \n        {\n            if (IsPrime(n))\n            {\n                return x;\n            }\n            else\n            {\n                return y;\n            }\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true; // 2 is the only even prime number\n            if (number % 2 == 0) return false; // exclude all other even numbers\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(XOrY(7, 34, 12)); // Output: 34\n            Console.WriteLine(XOrY(15, 8, 5));  // Output: 5\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/151", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int DoubleTheDifference(List<object> lst)\n    {\n        // Step 1: Filter out negative numbers and non-integer numbers\n        var filteredNumbers = lst.Where(num => num is int && (int)num >= 0).ToList();\n        \n        // Step 2: Square the remaining odd numbers\n        var squaredOdds = new List<int>();\n        foreach (var num in filteredNumbers)\n        {\n            int number = (int)num;\n            if (number % 2 != 0)\n            {\n                squaredOdds.Add(number * number);\n            }\n        }\n        \n        // Step 3: Sum the squared values of the filtered odd numbers\n        int sumOfSquares = squaredOdds.Sum();\n        \n        // Step 4: Return the sum\n        return sumOfSquares;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(DoubleTheDifference(new List<object> { 1, 3, 2, 0 })); // Output: 10\n        Console.WriteLine(DoubleTheDifference(new List<object> { -1, -2, 0 })); // Output: 0\n        Console.WriteLine(DoubleTheDifference(new List<object> { 9, -2 })); // Output: 81\n        Console.WriteLine(DoubleTheDifference(new List<object> { 0 })); // Output: 0\n    }\n}"}
{"task_id": "HumanEval_csharp/152", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// I think we all remember that feeling when the result of some long-awaited\n        /// event is finally known. The feelings and thoughts you have at that moment are\n        /// definitely worth noting down and comparing.\n        /// Your task is to determine if a person correctly guessed the results of a number of matches.\n        /// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n        /// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n        /// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n        /// \n        /// \n        /// example:\n        /// \n        /// Compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n        /// Compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n        /// \n        /// </summary>\n        public static List<int> Compare(List<int> game, List<int> guess) \n        {\n            List<int> result = new List<int>();\n            \n            for (int i = 0; i < game.Count; i++)\n            {\n                int difference = Math.Abs(game[i] - guess[i]);\n                if (difference == 0)\n                {\n                    result.Add(0);\n                }\n                else\n                {\n                    result.Add(difference);\n                }\n            }\n            \n            return result;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Example usage:\n            List<int> gameScores = new List<int> { 1, 2, 3, 4, 5, 1 };\n            List<int> guesses = new List<int> { 1, 2, 3, 4, 2, -2 };\n            List<int> result = Compare(gameScores, guesses);\n            \n            Console.WriteLine(string.Join(\",\", result)); // Output: 0,0,0,0,3,3\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/153", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You will be given the name of a class (a string) and a list of extensions.\n        /// The extensions are to be used to load additional classes to the class. The\n        /// strength of the extension is as follows: Let CAP be the number of the uppercase\n        /// letters in the extension's name, and let SM be the number of lowercase letters \n        /// in the extension's name, the strength is given by the fraction CAP - SM. \n        /// You should find the strongest extension and return a string in this \n        /// format: ClassName.StrongestExtensionName.\n        /// If there are two or more extensions with the same strength, you should\n        /// choose the one that comes first in the list.\n        /// For example, if you are given \"Slices\" as the class and a list of the\n        /// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n        /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n        /// (its strength is -1).\n        /// Example:\n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension(string class_name, List<string> extensions)\n        {\n            if (extensions == null || extensions.Count == 0)\n                return $\"{class_name}.\";\n\n            int maxStrength = int.MinValue;\n            string strongestExtension = \"\";\n\n            foreach (var extension in extensions)\n            {\n                int CAP = Regex.Matches(extension, \"[A-Z]\").Count;\n                int SM = Regex.Matches(extension, \"[a-z]\").Count;\n                int strength = CAP - SM;\n\n                if (strength > maxStrength)\n                {\n                    maxStrength = strength;\n                    strongestExtension = extension;\n                }\n            }\n\n            return $\"{class_name}.{strongestExtension}\";\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Slices.SErviNGSliCes\n            Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // my_class.AA\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/154", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool CycpatternCheck(string a, string b)\n    {\n        // Check if any rotation of b is a substring of a\n        for (int i = 0; i < b.Length; i++)\n        {\n            // Rotate b by shifting characters to the left\n            string rotatedB = b.Substring(i) + b.Substring(0, i);\n            \n            // Check if this rotation is a substring of a\n            if (a.Contains(rotatedB))\n            {\n                return true;\n            }\n        }\n        \n        // If no rotation is found to be a substring of a, return false\n        return false;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n        Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n        Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n        Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n        Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n        Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "HumanEval_csharp/155", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given an integer. return a tuple that has the number of even and odd digits respectively.\n        /// \n        /// Example:\n        /// EvenOddCount(-12) ==> (1, 1)\n        /// EvenOddCount(123) ==> (1, 2)\n        /// \n        /// </summary>\n        public static List<int> EvenOddCount(int num) \n        {\n            // Convert the number to its absolute value to handle negative numbers\n            int absNum = Math.Abs(num);\n            \n            // Convert the number to a string for easy iteration over digits\n            string numStr = absNum.ToString();\n            \n            int evenCount = 0;\n            int oddCount = 0;\n            \n            // Iterate over each character in the string representation of the number\n            foreach (char digit in numStr)\n            {\n                // Convert the character to an integer\n                int digitInt = int.Parse(digit.ToString());\n                \n                // Check if the digit is even or odd and update the respective count\n                if (digitInt % 2 == 0)\n                {\n                    evenCount++;\n                }\n                else\n                {\n                    oddCount++;\n                }\n            }\n            \n            // Return a list containing the counts of even and odd digits\n            return new List<int> { evenCount, oddCount };\n        }\n        \n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(EvenOddCount(-12)); // Output: [1, 1]\n            Console.WriteLine(EvenOddCount(123)); // Output: [1, 2]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/156", "language": "csharp", "completion": "using System;\nusing System.Text;\n\npublic class Program\n{\n    /// <summary> \n    /// Convert a positive integer to its Roman numeral equivalent in lowercase.\n    /// </summary>\n    public static string IntToMiniRoman(int number)\n    {\n        if (number <= 0 || number > 1000)\n        {\n            throw new ArgumentOutOfRangeException(\"Number must be between 1 and 1000.\");\n        }\n\n        // Define the mapping of integers to Roman numerals\n        var romanNumerals = new[] {\n            (1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n            (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"),\n            (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"), (1, \"i\")\n        };\n\n        StringBuilder roman = new StringBuilder();\n\n        // Iterate through the mapping and build the Roman numeral string\n        foreach ((int value, string symbol) in romanNumerals)\n        {\n            while (number >= value)\n            {\n                number -= value;\n                roman.Append(symbol);\n            }\n        }\n\n        return roman.ToString().ToLower();\n    }\n\n    // Example usage\n    public static void Main()\n    {\n        Console.WriteLine(IntToMiniRoman(19));  // Output: xix\n        Console.WriteLine(IntToMiniRoman(152)); // Output: clii\n        Console.WriteLine(IntToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "HumanEval_csharp/157", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// \n    /// Given the lengths of the three sides of a triangle. Return True if the three\n    /// sides form a right-angled triangle, False otherwise.\n    /// A right-angled triangle is a triangle in which one angle is right angle or \n    /// 90 degree.\n    /// Example:\n    /// RightAngleTriangle(3, 4, 5) == True\n    /// RightAngleTriangle(1, 2, 3) == False\n    /// \n    /// </summary>\n    public static bool RightAngleTriangle(int a, int b, int c)\n    {\n        // First, we need to identify the longest side, which will be our hypotenuse.\n        int max = Math.Max(a, Math.Max(b, c));\n        \n        // Then, we determine the other two sides based on which one is the largest.\n        if (max == a)\n        {\n            return a * a == b * b + c * c;\n        }\n        else if (max == b)\n        {\n            return b * b == a * a + c * c;\n        }\n        else // max == c\n        {\n            return c * c == a * a + b * b;\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(RightAngleTriangle(3, 4, 5)); // True\n        Console.WriteLine(RightAngleTriangle(1, 2, 3)); // False\n    }\n}"}
{"task_id": "HumanEval_csharp/158", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that accepts a list of strings.\n        /// The list contains different words. Return the word with maximum number\n        /// of unique characters. If multiple strings have maximum number of unique\n        /// characters, return the one which comes first in lexicographical order.\n        /// \n        /// FindMax([\"name\", \"of\", \"string\"]) == \"string\"\n        /// FindMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n        /// FindMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n        /// \n        /// </summary>\n        public static string FindMax(List<string> words) \n        {\n            if (words == null || words.Count == 0) return \"\";\n\n            Dictionary<string, HashSet<char>> wordUniqueChars = new Dictionary<string, HashSet<char>>();\n\n            foreach (var word in words)\n            {\n                var uniqueChars = new HashSet<char>(word);\n                wordUniqueChars[word] = uniqueChars;\n            }\n\n            string maxWord = \"\";\n            int maxCount = -1;\n\n            foreach (var entry in wordUniqueChars)\n            {\n                if (entry.Value.Count > maxCount || \n                    (entry.Value.Count == maxCount && string.Compare(entry.Key, maxWord) < 0))\n                {\n                    maxCount = entry.Value.Count;\n                    maxWord = entry.Key;\n                }\n            }\n\n            return maxWord;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(FindMax(new List<string> { \"name\", \"of\", \"string\" })); // Output: \"string\"\n            Console.WriteLine(FindMax(new List<string> { \"name\", \"enam\", \"game\" })); // Output: \"enam\"\n            Console.WriteLine(FindMax(new List<string> { \"aaaaaaa\", \"bb\", \"cc\" })); // Output: \"aaaaaaa\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/159", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You're a hungry rabbit, and you already have Eaten a certain number of carrots,\n        /// but now you need to Eat more carrots to complete the day's meals.\n        /// you should return an array of [ total number of Eaten carrots after your meals,\n        /// the number of carrots left after your meals ]\n        /// if there are not enough remaining carrots, you will Eat all remaining carrots, but will still be hungry.\n        /// \n        /// Example:\n        /// * Eat(5, 6, 10) -> [11, 4]\n        /// * Eat(4, 8, 9) -> [12, 1]\n        /// * Eat(1, 10, 10) -> [11, 0]\n        /// * Eat(2, 11, 5) -> [7, 0]\n        /// \n        /// Variables:\n        /// @number : integer\n        /// the number of carrots that you have Eaten.\n        /// @need : integer\n        /// the number of carrots that you need to Eat.\n        /// @remaining : integer\n        /// the number of remaining carrots that exist in stock\n        /// \n        /// Constrain:\n        /// * 0 <= number <= 1000\n        /// * 0 <= need <= 1000\n        /// * 0 <= remaining <= 1000\n        /// \n        /// Have fun :)\n        /// \n        /// </summary>\n        public static List<int> Eat(int number, int need, int remaining)\n        {\n            // Calculate the total number of carrots eaten after meals\n            int totalEaten = number + Math.Min(need, remaining);\n            \n            // Calculate the number of carrots left after meals\n            int carrotsLeft = Math.Max(remaining - (need - Math.Min(need, remaining)), 0);\n            \n            return new List<int> { totalEaten, carrotsLeft };\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine($\"[{string.Join(\", \", Eat(5, 6, 10))}]\"); // [11, 4]\n            Console.WriteLine($\"[{string.Join(\", \", Eat(4, 8, 9))}]\"); // [12, 1]\n            Console.WriteLine($\"[{string.Join(\", \", Eat(1, 10, 10))}]\"); // [11, 0]\n            Console.WriteLine($\"[{string.Join(\", \", Eat(2, 11, 5))}]\"); // [7, 0]\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/160", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given two lists operator, and operand. The first list has basic algebra operations, and \n        /// the second list is a list of integers. Use the two given lists to build the algebric \n        /// expression and return the evaluation of this expression.\n        /// \n        /// The basic algebra operations:\n        /// Addition ( + ) \n        /// Subtraction ( - ) \n        /// Multiplication ( * ) \n        /// Floor division ( // ) \n        /// Exponentiation ( ** ) \n        /// \n        /// Example:\n        /// operator['+', '*', '-']\n        /// array = [2, 3, 4, 5]\n        /// result = 2 + 3 * 4 - 5\n        /// => result = 9\n        /// \n        /// Note:\n        /// The length of operator list is equal to the length of operand list minus one.\n        /// Operand is a list of non-negative integers.\n        /// Operator list has at least one operator, and operand list has at least two operands.\n        /// \n        /// </summary>\n        public static int DoAlgebra(List<string> operators, List<int> operands)\n        {\n            if (operators == null || operands == null || operators.Count + 1 != operands.Count)\n                throw new ArgumentException(\"Invalid input: The length of the operator list must be one less than the length of the operand list.\");\n\n            // Start with the first operand as the initial result\n            int result = operands[0];\n\n            // Iterate through the operators and operands to evaluate the expression\n            for (int i = 0; i < operators.Count; i++)\n            {\n                string op = operators[i];\n                int nextOperand = operands[i + 1];\n\n                switch (op)\n                {\n                    case \"+\":\n                        result += nextOperand;\n                        break;\n                    case \"-\":\n                        result -= nextOperand;\n                        break;\n                    case \"*\":\n                        result *= nextOperand;\n                        break;\n                    case \"//\":\n                        if (nextOperand == 0)\n                            throw new DivideByZeroException(\"Division by zero is not allowed.\");\n                        result /= nextOperand;\n                        break;\n                    case \"**\":\n                        result = (int)Math.Pow(result, nextOperand);\n                        break;\n                    default:\n                        throw new ArgumentException($\"Unsupported operator: {op}\");\n                }\n            }\n\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<string> operators = new List<string> { \"+\", \"*\", \"-\" };\n            List<int> operands = new List<int> { 2, 3, 4, 5 };\n            int result = DoAlgebra(operators, operands);\n            Console.WriteLine($\"Result: {result}\"); // Output should be 9\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/161", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n        /// otherwise keep it as it is.\n        /// If the string contains no letters, reverse the string.\n        /// The function should return the resulted string.\n        /// Examples\n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve(string s) \n        {\n            // Check if the string contains any letters\n            bool hasLetters = false;\n            foreach (char c in s)\n            {\n                if (Char.IsLetter(c))\n                {\n                    hasLetters = true;\n                    break;\n                }\n            }\n\n            if (!hasLetters)\n            {\n                // Reverse the string if it contains no letters\n                char[] charArray = s.ToCharArray();\n                Array.Reverse(charArray);\n                return new string(charArray);\n            }\n            else\n            {\n                // Reverse the case of each letter\n                char[] charArray = s.ToCharArray();\n                for (int i = 0; i < charArray.Length; i++)\n                {\n                    if (Char.IsLetter(charArray[i]))\n                    {\n                        if (Char.IsLower(charArray[i]))\n                        {\n                            charArray[i] = Char.ToUpper(charArray[i]);\n                        }\n                        else if (Char.IsUpper(charArray[i]))\n                        {\n                            charArray[i] = Char.ToLower(charArray[i]);\n                        }\n                    }\n                }\n                return new string(charArray);\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Solve(\"1234\")); // Output: \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/162", "language": "csharp", "completion": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a string 'text', return its md5 hash equivalent string.\n        /// If 'text' is an empty string, return None.\n        /// \n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static object StringToMd5(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                return sb.ToString();\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            string exampleText = \"Hello world\";\n            object md5Hash = StringToMd5(exampleText);\n            Console.WriteLine(md5Hash); // Output: 3e25960a79dbc69b674cd4ec67a72c62\n        }\n    }\n}"}
{"task_id": "HumanEval_csharp/163", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers(int a, int b)\n        {\n            // Ensure the range is in ascending order\n            int start = Math.Min(a, b);\n            int end = Math.Max(a, b);\n\n            // Create a list to store even digits\n            List<int> result = new List<int>();\n\n            // Iterate through the range from start to end (inclusive)\n            for (int i = start; i <= end; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    result.Add(i);\n                }\n            }\n\n            // Return the list of even digits in ascending order\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(2, 8))); // Output: [2, 4, 6, 8]\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(8, 2))); // Output: [2, 4, 6, 8]\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(10, 14))); // Output: []\n        }\n    }\n}"}

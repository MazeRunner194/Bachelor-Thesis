{"task_id": "java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     */\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        \n        for (Object operation : operations) {\n            if (operation instanceof Integer) {\n                balance += (Integer) operation;\n                if (balance < 0) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(belowZero(Arrays.asList(1, 2, 3))); // False\n        System.out.println(belowZero(Arrays.asList(1, 2, -4, 5))); // True\n    }\n}"}
{"task_id": "java/1", "language": "java", "completion": "// Check if the list is empty and return the appropriate values for sum and product\n        if (numbers.isEmpty()) {\n            return Arrays.asList(0, 1);\n        }\n\n        int sum = 0;\n        BigInteger product = BigInteger.ONE;\n\n        // Iterate through the list to calculate the sum and product\n        for (Object num : numbers) {\n            if (num instanceof Integer) {\n                int number = (int) num;\n                sum += number;\n                product = product.multiply(BigInteger.valueOf(number));\n            }\n        }\n\n        // Return the results as a list of integers\n        return Arrays.asList(sum, product.intValue());\n    }\n\n    public static void main(String[] args) {\n        List<Object> numbers1 = new ArrayList<>();\n        System.out.println(sumProduct(numbers1)); // Output: [0, 1]\n\n        List<Object> numbers2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(sumProduct(numbers2)); // Output: [10, 24]\n    }\n}"}
{"task_id": "java/2", "language": "java", "completion": "class StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     */\n    public static String stringXor(String a, String b) {\n        // Ensure both strings are the same length\n        if (a.length() != b.length()) {\n            throw new IllegalArgumentException(\"Input strings must be of the same length\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        // Perform XOR operation on each character\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            char xorResult = (charA == charB) ? '0' : '1';\n            result.append(xorResult);\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        // Test the method\n        String a = \"010\";\n        String b = \"110\";\n        System.out.println(\"XOR Result: \" + stringXor(a, b)); // Output should be '100'\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n     * null\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     */\n    public static String longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n        \n        String longestString = \"\";\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        return longestString;\n    }\n\n    public static void main(String[] args) {\n        List<String> list1 = new ArrayList<>();\n        System.out.println(longest(list1)); // should print null\n\n        List<String> list2 = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(longest(list2)); // should print 'a'\n\n        List<String> list3 = Arrays.asList(\"a\", \"bb\", \"ccc\");\n        System.out.println(longest(list3)); // should print 'ccc'\n    }\n}"}
{"task_id": "java/4", "language": "java", "completion": "if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter the first integer: \");\n        int num1 = scanner.nextInt();\n        \n        System.out.print(\"Enter the second integer: \");\n        int num2 = scanner.nextInt();\n        \n        int gcd = greatestCommonDivisor(num1, num2);\n        System.out.println(\"The Greatest Common Divisor of \" + num1 + \" and \" + num2 + \" is: \" + gcd);\n    }\n}\n\nThis code defines a class `GreatestCommonDivisor` with a method `greatestCommonDivisor` that uses the Euclidean algorithm to find the greatest common divisor (GCD) of two integers. The main method takes user input for two integers and prints their GCD."}
{"task_id": "java/5", "language": "java", "completion": "// Split the input string into an array of words\n        String[] numberWords = numbers.split(\" \");\n\n        // Create a list to hold the numeric values represented by the words\n        List<Integer> numericValues = new ArrayList<>();\n\n        // Map each word to its corresponding numeric value\n        Map<String, Integer> wordToNumberMap = new HashMap<>();\n        wordToNumberMap.put(\"zero\", 0);\n        wordToNumberMap.put(\"one\", 1);\n        wordToNumberMap.put(\"two\", 2);\n        wordToNumberMap.put(\"three\", 3);\n        wordToNumberMap.put(\"four\", 4);\n        wordToNumberMap.put(\"five\", 5);\n        wordToNumberMap.put(\"six\", 6);\n        wordToNumberMap.put(\"seven\", 7);\n        wordToNumberMap.put(\"eight\", 8);\n        wordToNumberMap.put(\"nine\", 9);\n\n        // Convert each word to its numeric value and add it to the list\n        for (String word : numberWords) {\n            numericValues.add(wordToNumberMap.get(word));\n        }\n\n        // Sort the list of numeric values\n        Collections.sort(numericValues);\n\n        // Create a StringBuilder to build the sorted string of numbers\n        StringBuilder sortedNumbers = new StringBuilder();\n\n        // Convert each sorted numeric value back to its word representation and append it to the result string\n        for (int number : numericValues) {\n            for (Map.Entry<String, Integer> entry : wordToNumberMap.entrySet()) {\n                if (entry.getValue() == number) {\n                    if (sortedNumbers.length() > 0) {\n                        sortedNumbers.append(\" \");\n                    }\n                    sortedNumbers.append(entry.getKey());\n                    break;\n                }\n            }\n        }\n\n        // Return the sorted string of numbers\n        return sortedNumbers.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a space-delimited string of numberals from 'zero' to 'nine':\");\n        String input = scanner.nextLine();\n        String sortedOutput = sortNumbers(input);\n        System.out.println(\"Sorted numbers: \" + sortedOutput);\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaledList = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledValue = (num - min) / (max - min);\n            rescaledList.add(rescaledValue);\n        }\n\n        return rescaledList;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        System.out.println(rescaleToUnit(numbers)); // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     */\n    public static String flipCase(String string) {\n        StringBuilder flipped = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                flipped.append(Character.toUpperCase(c));\n            } else if (Character.isUpperCase(c)) {\n                flipped.append(Character.toLowerCase(c));\n            } else {\n                // If the character is neither uppercase nor lowercase, just append it as is.\n                flipped.append(c);\n            }\n        }\n        \n        return flipped.toString();\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        System.out.println(\"Flipped case string: \" + flipCase(input));\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Integer> getPositive(List<Object> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (Object num : l) {\n            if (num instanceof Integer && ((Integer) num) > 0) {\n                positiveNumbers.add((Integer) num);\n            }\n        }\n        return positiveNumbers;\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "class IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     */\n    public static Boolean isPrime(int n) {\n        // Handle edge cases\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        \n        // Check for factors from 3 to the square root of n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "java/10", "language": "java", "completion": "// Create a HashSet to store unique elements\n        Set<Integer> set = new HashSet<>(l);\n        \n        // Convert the set back to a list and sort it\n        List<Integer> sortedUniqueList = new ArrayList<>(set);\n        Collections.sort(sortedUniqueList);\n        \n        return sortedUniqueList;\n    }\n\n    public static void main(String[] args) {\n        // Test the unique method\n        List<Integer> testList = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(\"Original list: \" + testList);\n        System.out.println(\"Unique and sorted list: \" + unique(testList));\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     */\n    public static int primeFib(int n) {\n        List<Integer> fibPrimes = new ArrayList<>();\n        int a = 0, b = 1;\n        \n        while (true) {\n            int currentFib = a + b;\n            if (isPrime(currentFib)) {\n                fibPrimes.add(currentFib);\n            }\n            if (fibPrimes.size() >= n) {\n                break;\n            }\n            a = b;\n            b = currentFib;\n        }\n        \n        return fibPrimes.get(n - 1);\n    }\n    \n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(primeFib(1)); // Output: 2\n        System.out.println(primeFib(2)); // Output: 3\n        System.out.println(primeFib(3)); // Output: 5\n        System.out.println(primeFib(4)); // Output: 13\n        System.out.println(primeFib(5)); // Output: 89\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.util.*;\n\nclass TriplesSumToZero {\n    /**\n     * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        // Sort the list to make it easier to find triplets\n        Collections.sort(l);\n        \n        int n = l.size();\n        \n        // Iterate through each element in the list\n        for (int i = 0; i < n - 2; i++) {\n            // Use two pointers to find the other two elements that sum to zero with the current element\n            int left = i + 1;\n            int right = n - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                \n                if (sum == 0) {\n                    return true; // Found a triplet that sums to zero\n                } else if (sum < 0) {\n                    left++; // Move the left pointer to the right\n                } else {\n                    right--; // Move the right pointer to the left\n                }\n            }\n        }\n        \n        return false; // No triplet found that sums to zero\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // False\n        System.out.println(triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // True\n        System.out.println(triplesSumToZero(Arrays.asList(1))); // False\n    }\n}"}
{"task_id": "java/13", "language": "java", "completion": "import java.util.*;\n\nclass PairsSumToZero {\n    /**\n     * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        // Create a HashSet to store the elements we have seen so far.\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            // Check if the negative of the current number exists in the set.\n            if (seen.contains(-num)) {\n                return true;\n            }\n            // Add the current number to the set.\n            seen.add(num);\n        }\n        \n        // If no such pair is found, return false.\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 3, 5, 0);\n        System.out.println(pairsSumToZero(list1)); // False\n\n        List<Integer> list2 = Arrays.asList(1, 3, -2, 1);\n        System.out.println(pairsSumToZero(list2)); // True\n\n        List<Integer> list3 = Arrays.asList(1, 2, 3, 7);\n        System.out.println(pairsSumToZero(list3)); // False\n\n        List<Integer> list4 = Arrays.asList(2, 4, -5, 3, 5, 7);\n        System.out.println(pairsSumToZero(list4)); // True\n\n        List<Integer> list5 = Arrays.asList(1);\n        System.out.println(pairsSumToZero(list5)); // False\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     */\n    public static int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        // Initialize the base cases\n        int[] fib4Sequence = new int[n + 1];\n        fib4Sequence[0] = 0;\n        fib4Sequence[1] = 0;\n        fib4Sequence[2] = 2;\n        fib4Sequence[3] = 0;\n\n        // Build up the sequence iteratively\n        for (int i = 4; i <= n; i++) {\n            fib4Sequence[i] = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4];\n        }\n\n        return fib4Sequence[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib4(5)); // Output: 4\n        System.out.println(fib4(6)); // Output: 8\n        System.out.println(fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     */\n    public static Number median(List<Integer> l) {\n        // Sort the list\n        Collections.sort(l);\n        \n        int size = l.size();\n        \n        // If the list has an odd number of elements, return the middle element\n        if (size % 2 == 1) {\n            return l.get(size / 2);\n        } else {\n            // If the list has an even number of elements, return the average of the two middle elements\n            int mid1 = size / 2 - 1;\n            int mid2 = size / 2;\n            double sum = l.get(mid1) + l.get(mid2);\n            return sum / 2;\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(median(list1)); // Output: 3\n        \n        List<Integer> list2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(median(list2)); // Output: 15.0\n    }\n}"}
{"task_id": "java/16", "language": "java", "completion": "class IsPalindrome {\n    /**\n     * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     */\n    public static Boolean isPalindrome(String text) {\n        // Remove all non-alphanumeric characters and convert to lower case\n        String cleanedText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        \n        // Check if the cleaned text is a palindrome\n        int left = 0;\n        int right = cleanedText.length() - 1;\n        \n        while (left < right) {\n            if (cleanedText.charAt(left) != cleanedText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\")); // True\n        System.out.println(isPalindrome(\"aba\")); // True\n        System.out.println(isPalindrome(\"aaaaa\")); // True\n        System.out.println(isPalindrome(\"zbcd\")); // False\n    }\n}"}
{"task_id": "java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RemoveVowels {\n    /**\n     * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     */\n    public static String removeVowels(String text) {\n        if (text == null || text.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (char c : text.toCharArray()) {\n            if (!vowels.contains(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(removeVowels(\"\")); // ''\n        System.out.println(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n        System.out.println(removeVowels(\"abcdef\")); // 'bcdf'\n        System.out.println(removeVowels(\"aaaaa\")); // ''\n        System.out.println(removeVowels(\"aaBAA\")); // 'B'\n        System.out.println(removeVowels(\"zbcd\")); // 'zbcd'\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n\n        System.out.println(belowThreshold(list1, 100)); // True\n        System.out.println(belowThreshold(list2, 5));   // False\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    // You can test the method with a main function if you like.\n    public static void main(String[] args) {\n        System.out.println(add(2, 3)); // Output: 5\n        System.out.println(add(5, 7)); // Output: 12\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "// Remove duplicate characters from both strings to ensure we only consider the presence of each character without regard to its frequency.\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n\n        // Compare the sets of characters from both strings. If they are equal, then the two strings have the same characters.\n        return set0.equals(set1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n        System.out.println(sameChars(\"abcd\", \"dddddddabc\")); // True\n        System.out.println(sameChars(\"dddddddabc\", \"abcd\")); // True\n        System.out.println(sameChars(\"eabcd\", \"dddddddabc\")); // False\n        System.out.println(sameChars(\"abcd\", \"dddddddabce\")); // False\n        System.out.println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n    }\n}\n\nThis code defines a class `SameChars` with a method `sameChars` that takes two strings as input and returns `True` if the strings contain the same set of characters (ignoring their frequencies), and `False` otherwise. The main method includes test cases to demonstrate the functionality of the `sameChars` method."}
{"task_id": "java/21", "language": "java", "completion": "public static int fib(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input should be a positive integer.\");\n    }\n    if (n == 1 || n == 2) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}"}
{"task_id": "java/22", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n     */\n    public static List<Integer> common(List<Integer> l1, List<Object> l2) {\n        // Convert the second list to a set for faster lookup\n        Set<Integer> set = new HashSet<>(l2.size());\n        for (Object obj : l2) {\n            if (obj instanceof Integer) {\n                set.add((Integer) obj);\n            }\n        }\n\n        // List to store common elements\n        List<Integer> commonElements = new ArrayList<>();\n\n        // Iterate through the first list and check for common elements\n        for (Integer num : l1) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n\n        // Sort the resulting list of common elements\n        Collections.sort(commonElements);\n\n        return commonElements;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Object> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(common(l1, l2)); // Output: [1, 5, 653]\n\n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Object> l4 = Arrays.asList(3, 2);\n        System.out.println(common(l3, l4)); // Output: [2, 3]\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "// Initialize the largest prime factor to -1 (assuming all numbers are positive and greater than 1)\n        int largestFactor = -1;\n\n        // Handle the case where n is even, then divide by 2 until it becomes odd\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n\n        // Check for factors from 3 onwards, incrementing by 2 (since we already handled the even numbers)\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n\n        // If n is a prime number greater than 2, then its largest prime factor will be itself\n        if (n > 2) {\n            largestFactor = n;\n        }\n\n        return largestFactor;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        System.out.println(\"The largest prime factor is: \" + largestPrimeFactor(number));\n    }\n}"}
{"task_id": "java/24", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     */\n    public static int sumToN(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Sum from 1 to \" + n + \" is: \" + sumToN(n));\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.util.*;\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     */\n    public static List<Integer> derivative(List<Integer> xs) {\n        // Create a new list to store the coefficients of the derived polynomial\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through the input list starting from index 1\n        for (int i = 1; i < xs.size(); i++) {\n            // Multiply each coefficient by its index and add to the result list\n            result.add(i * xs.get(i));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(derivative(Arrays.asList(3, 1, 2, 4, 5))); // [1, 4, 12, 20]\n        System.out.println(derivative(Arrays.asList(1, 2, 3))); // [2, 6]\n    }\n}"}
{"task_id": "java/26", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     */\n    public static int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        \n        // Create an array to store the computed values of the sequence\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        // Compute each value in the sequence using the given formula\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(fibfib(1)); // Output: 0\n        System.out.println(fibfib(5)); // Output: 4\n        System.out.println(fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "class VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     */\n    public static int vowelsCount(String s) {\n        if (s == null || s.isEmpty()) {\n            return 0;\n        }\n\n        String lowerCaseStr = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < lowerCaseStr.length(); i++) {\n            char ch = lowerCaseStr.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(vowelsCount(\"abcde\")); // 2\n        System.out.println(vowelsCount(\"ACEDY\")); // 3\n        System.out.println(vowelsCount(\"y\"));     // 1\n        System.out.println(vowelsCount(\"Hello World\")); // 3\n    }\n}"}
{"task_id": "java/28", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Search {\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * If no such a value exist, return -1.\n     */\n    public static int search(List<Integer> lst) {\n        // Create a map to store the frequency of each integer\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Populate the frequency map\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Initialize the result to -1 (default value if no valid integer is found)\n        int result = -1;\n        \n        // Iterate through the map to find the greatest integer that satisfies the condition\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            \n            if (freq >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n    /**\n     * Given the lengths of the three sides of a triangle, return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        // Check if the sides form a valid triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        \n        // Calculate the semi-perimeter\n        double s = (a + b + c) / 2.0;\n        \n        // Calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round to 2 decimal places\n        return BigDecimal.valueOf(area).setScale(2, BigDecimal.ROUND_HALF_UP);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(triangleArea(3, 4, 5)); // Should print 6.00\n        System.out.println(triangleArea(1, 2, 10)); // Should print -1\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n    /**\n     * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n     * Example:\n     * will_it_fly([1, 2], 5) \u279e False \n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n     * will_it_fly([3, 2, 3], 1) \u279e False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n     * will_it_fly([3, 2, 3], 9) \u279e True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n     * will_it_fly([3], 5) \u279e True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Check if the list is a palindrome\n        boolean isPalindrome = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        \n        // Check the sum of elements\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return isPalindrome && sum <= w;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(willItFly(Arrays.asList(1, 2), 5)); // False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 1)); // False\n        System.out.println(willItFly(Arrays.asList(3, 2, 3), 9)); // True\n        System.out.println(willItFly(Arrays.asList(3), 5)); // True\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.util.*;\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        // Generate all prime numbers less than or equal to sqrt(a)\n        List<Integer> primes = generatePrimes(100);\n        \n        // Check if there are three distinct primes that multiply to 'a'\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to generate all prime numbers less than or equal to n\n    private static List<Integer> generatePrimes(int n) {\n        boolean[] isPrime = new boolean[n + 1];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n        \n        for (int i = 2; i * i <= n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime[i]) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\n        System.out.println(isMultiplyPrime(60)); // False, no three primes multiply to 60\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     */\n    public static String decimalToBinary(int decimal) {\n        // Convert the decimal number to binary\n        String binaryString = Integer.toBinaryString(decimal);\n        \n        // Add 'db' at the beginning and end of the string\n        return \"db\" + binaryString + \"db\";\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(decimalToBinary(15));  // Output: db1111db\n        System.out.println(decimalToBinary(32));  // Output: db100000db\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "import java.util.*;\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n        // Check if the length of the string is less than 3\n        if (s.length() < 3) {\n            return false;\n        }\n        \n        // Iterate through the string and check every 3 consecutive letters\n        for (int i = 0; i <= s.length() - 3; i++) {\n            char a = s.charAt(i);\n            char b = s.charAt(i + 1);\n            char c = s.charAt(i + 2);\n            \n            // Check if the three characters are distinct\n            if (a == b || b == c || a == c) {\n                return false;\n            }\n        }\n        \n        // If all checks pass, the string is happy\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isHappy(\"a\"));       // False\n        System.out.println(isHappy(\"aa\"));      // False\n        System.out.println(isHappy(\"abcd\"));    // True\n        System.out.println(isHappy(\"aabb\"));    // False\n        System.out.println(isHappy(\"adb\"));     // True\n        System.out.println(isHappy(\"xyy\"));     // False\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.util.*;\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        \n        for (Number grade : grades) {\n            double gpa = grade.doubleValue();\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Number> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        System.out.println(numericalLetterGrade(grades)); // Output: ['A+', 'B', 'C-', 'C', 'A-']\n    }\n}"}
{"task_id": "java/35", "language": "java", "completion": "class PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        return isPrime(length);\n    }\n\n    /**\n     * Helper method to check if a number is prime\n     */\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(primeLength(\"Hello\")); // True\n        System.out.println(primeLength(\"abcdcba\")); // True\n        System.out.println(primeLength(\"kittens\")); // True\n        System.out.println(primeLength(\"orange\")); // False\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 \u2264 N \u2264 10000.\n     * Output:\n     *      a string of binary number\n     */\n    public static String solve(int n) {\n        // Convert the integer to a string to easily iterate over its digits\n        String numStr = Integer.toString(n);\n        \n        // Initialize sum of digits\n        int sumOfDigits = 0;\n        \n        // Sum all the digits in the number\n        for (char digit : numStr.toCharArray()) {\n            sumOfDigits += Character.getNumericValue(digit);\n        }\n        \n        // Convert the sum to binary and return it as a string\n        String binaryString = Integer.toBinaryString(sumOfDigits);\n        \n        return binaryString;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(solve(n));\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.util.*;\n\nclass GetRow {\n    /**\n     * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<int[]> coordinates = new ArrayList<>();\n        \n        // Iterate through the list to find the coordinates of x\n        for (int i = 0; i < lst.size(); i++) {\n            List<?> row = (List<?>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if ((Integer) row.get(j) == x) {\n                    coordinates.add(new int[]{i, j});\n                }\n            }\n        }\n        \n        // Sort the coordinates by rows in ascending order and then by columns in descending order\n        Collections.sort(coordinates, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                if (a[0] != b[0]) {\n                    return Integer.compare(a[0], b[0]);\n                } else {\n                    return Integer.compare(b[1], a[1]);\n                }\n            }\n        });\n        \n        // Convert the coordinates to the required list of tuples\n        List<Object> result = new ArrayList<>();\n        for (int[] coord : coordinates) {\n            result.add(Arrays.asList(coord[0], coord[1]));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getRow(Arrays.asList(\n            Arrays.asList(1, 2, 3, 4, 5, 6),\n            Arrays.asList(1, 2, 3, 4, 1, 6),\n            Arrays.asList(1, 2, 3, 4, 5, 1)\n        ), 1)); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        \n        System.out.println(getRow(Arrays.asList(), 1)); // []\n        \n        System.out.println(getRow(Arrays.asList(\n            Arrays.asList(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        ), 3)); // [(2, 2)]\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.util.*;\n\nclass NextSmallest {\n    /**\n     * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     */\n    public static Integer nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() < 2) {\n            return null;\n        }\n        \n        // Use a TreeSet to maintain the order of elements and avoid duplicates\n        TreeSet<Integer> treeSet = new TreeSet<>(lst);\n        \n        // Convert the set back to a list and get the second smallest element\n        List<Integer> sortedList = new ArrayList<>(treeSet);\n        \n        if (sortedList.size() < 2) {\n            return null;\n        }\n        \n        return sortedList.get(1);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(nextSmallest(list1)); // Output: 2\n\n        List<Integer> list2 = Arrays.asList(5, 1, 4, 3, 2);\n        System.out.println(nextSmallest(list2)); // Output: 2\n\n        List<Integer> list3 = new ArrayList<>();\n        System.out.println(nextSmallest(list3)); // Output: null\n\n        List<Integer> list4 = Arrays.asList(1, 1);\n        System.out.println(nextSmallest(list4)); // Output: null\n    }\n}"}
{"task_id": "java/39", "language": "java", "completion": "// Split the input string by sentence delimiters ('.', '?', '!')\n        String[] sentences = s.split(\"[.?!]\");\n        \n        // Initialize a counter for boredoms\n        int count = 0;\n        \n        // Iterate through each sentence\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespace from the sentence\n            sentence = sentence.trim();\n            \n            // Check if the sentence starts with \"I\"\n            if (!sentence.isEmpty() && sentence.startsWith(\"I \")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(isBored(\"Hello world\")); // Output: 0\n        System.out.println(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        System.out.println(isBored(\"I am happy. Are you? I think so!\")); // Output: 2\n        System.out.println(isBored(\"This is a test. Not a boredom.\")); // Output: 0\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        // Helper method to check if a number is prime\n        boolean isPrime(int num) {\n            if (num <= 1) return false;\n            if (num == 2) return true;\n            if (num % 2 == 0) return false;\n            for (int i = 3; i <= Math.sqrt(num); i += 2) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Find all prime numbers in the list\n        List<Integer> primes = new ArrayList<>();\n        for (int num : lst) {\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n\n        // If there are no prime numbers, return 0 or handle as needed\n        if (primes.isEmpty()) {\n            return 0;\n        }\n\n        // Find the largest prime number\n        int maxPrime = Collections.max(primes);\n\n        // Compute the sum of the digits of the largest prime number\n        int digitSum = 0;\n        while (maxPrime > 0) {\n            digitSum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return digitSum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        List<Integer> lst2 = Arrays.asList(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);\n        List<Integer> lst3 = Arrays.asList(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);\n        List<Integer> lst4 = Arrays.asList(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);\n        List<Integer> lst5 = Arrays.asList(0, 81, 12, 3, 1, 21);\n        List<Integer> lst6 = Arrays.asList(0, 8, 1, 2, 1, 7);\n\n        System.out.println(skjkasdkd(lst1)); // Output: 10\n        System.out.println(skjkasdkd(lst2)); // Output: 25\n        System.out.println(skjkasdkd(lst3)); // Output: 13\n        System.out.println(skjkasdkd(lst4)); // Output: 11\n        System.out.println(skjkasdkd(lst5)); // Output: 3\n        System.out.println(skjkasdkd(lst6)); // Output: 7\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.util.*;\n\nclass CheckDictCase {\n    /**\n     * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False if the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public static Boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(checkDictCase(dict1)); // true\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(checkDictCase(dict2)); // false\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(checkDictCase(dict3)); // false\n\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(checkDictCase(dict4)); // false\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(checkDictCase(dict5)); // true\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "// Convert the string to a double for precise calculations\n        double num = Double.parseDouble(value);\n\n        // Use Math.round to round towards zero if the number is equidistant from two integers\n        long roundedNum = Math.round(num);\n\n        // If the original number was positive, return the result of rounding\n        // If the original number was negative, return the negation of the result of rounding\n        return (int) ((num >= 0 || num % 1 == 0) ? roundedNum : -roundedNum);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(closestInteger(\"10\")); // Should print 10\n        System.out.println(closestInteger(\"15.3\")); // Should print 15\n        System.out.println(closestInteger(\"14.5\")); // Should print 15\n        System.out.println(closestInteger(\"-14.5\")); // Should print -15\n    }\n}\n\nThis code defines a class `ClosestInteger` with a static method `closestInteger` that takes a string representing a number and returns the closest integer to it, rounding away from zero if the number is equidistant from two integers. The main method demonstrates how to use this function with several examples."}
{"task_id": "java/43", "language": "java", "completion": "List<Integer> pile = new ArrayList<>();\n        int currentStones;\n        if (n % 2 == 0) {\n            currentStones = n + 1; // Next even number if n is even\n        } else {\n            currentStones = n + 2; // Next odd number if n is odd\n        }\n        \n        for (int i = 0; i < n; i++) {\n            pile.add(currentStones);\n            currentStones += 2; // Increment by 2 to get the next odd or even number\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        int n = scanner.nextInt();\n        List<Integer> pile = makeAPile(n);\n        System.out.println(pile);\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsString {\n    /**\n     * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<String> wordsString(String s) {\n        // Split the string by both commas and spaces\n        String[] wordsArray = s.split(\"[ ,]+\");\n        \n        // Convert the array to a list and return it\n        return new ArrayList<>(Arrays.asList(wordsArray));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        System.out.println(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n     */\n    public static int chooseNum(int x, int y) {\n        // Ensure x is less than or equal to y\n        if (x > y) {\n            return -1;\n        }\n        \n        // Iterate from y down to x\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        \n        // If no even number is found, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter the first number (x): \");\n        int x = scanner.nextInt();\n        \n        System.out.print(\"Enter the second number (y): \");\n        int y = scanner.nextInt();\n        \n        int result = chooseNum(x, y);\n        System.out.println(\"The biggest even number in the range [\" + x + \", \" + y + \"] is: \" + result);\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RoundedAvg {\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n        long sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        double average = (double)sum / (m - n + 1);\n        int roundedAverage = Math.round(average);\n        \n        String binaryString = Integer.toBinaryString(roundedAverage);\n        return \"0b\" + binaryString;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(roundedAvg(1, 5)); // \"0b11\"\n        System.out.println(roundedAvg(7, 5)); // -1\n        System.out.println(roundedAvg(10, 20)); // \"0b1111\"\n        System.out.println(roundedAvg(20, 33)); // \"0b11010\"\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>(n);\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                // Calculate factorial of i\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                // Calculate sum from 1 to i\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(f(5)); // Output: [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "// Initialize counters for even and odd palindromes\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Iterate through all numbers from 1 to n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        // Return the result as a list of integers\n        return Arrays.asList(evenCount, oddCount);\n    }\n\n    // Helper method to check if a number is a palindrome\n    private static boolean isPalindrome(int num) {\n        String str = Integer.toString(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        System.out.println(evenOddPalindrome(3));  // Output: [1, 2]\n        System.out.println(evenOddPalindrome(12)); // Output: [4, 6]\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.util.*;\n\nclass MoveOneBall {\n    public static Boolean moveOneBall(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return true;\n        }\n        \n        int n = arr.size();\n        \n        // Check each possible shift\n        for (int shift = 0; shift < n; shift++) {\n            if (isSortedAfterShift(arr, shift)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    private static boolean isSortedAfterShift(List<Integer> arr, int shift) {\n        List<Integer> shiftedArr = new ArrayList<>(arr);\n        // Perform the shift\n        Collections.rotate(shiftedArr, -shift);\n        \n        // Check if the shifted array is sorted\n        for (int i = 1; i < shiftedArr.size(); i++) {\n            if (shiftedArr.get(i) < shiftedArr.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(3, 4, 5, 1, 2);\n        List<Integer> arr2 = Arrays.asList(3, 5, 4, 1, 2);\n        \n        System.out.println(moveOneBall(arr1)); // True\n        System.out.println(moveOneBall(arr2)); // False\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.util.*;\n\nclass Exchange {\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Step 1: Identify odd elements in lst1\n        List<Integer> oddElementsInLst1 = new ArrayList<>();\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddElementsInLst1.add(num);\n            }\n        }\n\n        // Step 2: Check availability of even elements in lst2 to replace odd elements in lst1\n        for (int odd : oddElementsInLst1) {\n            boolean canReplace = false;\n            for (int even : lst2) {\n                if (even % 2 == 0 && !oddElementsInLst1.contains(even)) { // Ensure the even number is not already in lst1 as an odd\n                    canReplace = true;\n                    break;\n                }\n            }\n            if (!canReplace) {\n                return \"NO\";\n            }\n        }\n\n        return \"YES\";\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // YES\n        System.out.println(exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // NO\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.util.*;\n\nclass ReverseDelete {\n    public static List<Object> reverseDelete(String s, String c) {\n        // Create a set from string c for quick lookup\n        Set<Character> charsToRemove = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            charsToRemove.add(ch);\n        }\n\n        // Build the resulting string by removing characters in s that are present in charsToRemove\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!charsToRemove.contains(ch)) {\n                result.append(ch);\n            }\n        }\n\n        // Convert the resulting string to a char array and check if it is a palindrome\n        String finalString = result.toString();\n        boolean isPalindrome = isPalindrome(finalString);\n\n        // Return the result as a list containing the string and whether it is a palindrome\n        List<Object> output = new ArrayList<>();\n        output.add(finalString);\n        output.add(isPalindrome);\n        return output;\n    }\n\n    // Helper method to check if a string is a palindrome\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', False]\n        System.out.println(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', False]\n        System.out.println(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', True]\n    }\n}"}
{"task_id": "java/52", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MaxFill {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int totalWater = 0;\n        \n        // Calculate the total number of units of water in all wells\n        for (List<Integer> row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    totalWater++;\n                }\n            }\n        }\n        \n        // If there is no water, return 0\n        if (totalWater == 0) {\n            return 0;\n        }\n        \n        // Calculate the number of times to lower the bucket\n        int bucketsNeeded = (int) Math.ceil((double) totalWater / capacity);\n        \n        return bucketsNeeded;\n    }\n    \n    public static void main(String[] args) {\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 0),\n            Arrays.asList(0, 1, 0, 0),\n            Arrays.asList(1, 1, 1, 1)\n        );\n        int capacity1 = 1;\n        System.out.println(maxFill(grid1, capacity1)); // Output: 6\n        \n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(0, 0, 1, 1),\n            Arrays.asList(0, 0, 0, 0),\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(0, 1, 1, 1)\n        );\n        int capacity2 = 2;\n        System.out.println(maxFill(grid2, capacity2)); // Output: 5\n        \n        List<List<Integer>> grid3 = Arrays.asList(\n            Arrays.asList(0, 0, 0),\n            Arrays.asList(0, 0, 0)\n        );\n        int capacity3 = 5;\n        System.out.println(maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<String> selectWords(String s, int n) {\n        if (s == null || s.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n\n        for (String word : words) {\n            if (countConsonants(word) == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private static int countConsonants(String word) {\n        String vowels = \"aeiouAEIOU\";\n        int count = 0;\n        for (char c : word.toCharArray()) {\n            if (!vowels.contains(String.valueOf(c)) && Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(selectWords(\"simple white space\", 2)); // []\n        System.out.println(selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "java/54", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Maximum {\n    /**\n     * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        // Create a priority queue to store the elements in descending order\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements from the array to the heap\n        for (int num : arr) {\n            maxHeap.offer(num);\n        }\n        \n        // Create a list to store the result\n        List<Object> result = new ArrayList<>();\n        \n        // Poll the maximum k elements from the heap\n        for (int i = 0; i < k && !maxHeap.isEmpty(); i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        // Sort the result list in ascending order before returning\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(\"Input: \" + arr1 + \", k = \" + k1);\n        System.out.println(\"Output: \" + maximum(arr1, k1));\n        \n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(\"Input: \" + arr2 + \", k = \" + k2);\n        System.out.println(\"Output: \" + maximum(arr2, k2));\n        \n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(\"Input: \" + arr3 + \", k = \" + k3);\n        System.out.println(\"Output: \" + maximum(arr3, k3));\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AddElements {\n    /**\n     * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     * \n     * Example:\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n     * \n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n        System.out.println(addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.util.*;\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Find the start and end of the intersection\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        // Check if there is an intersection\n        if (start > end) {\n            return \"NO\";\n        }\n        \n        // Calculate the length of the intersection\n        int length = end - start + 1;\n        \n        // Check if the length is a prime number\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.util.*;\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     */\n    public static List<Number> tri(int n) {\n        // Create a list to store the Tribonacci sequence values\n        List<Number> tribonacciSequence = new ArrayList<>();\n        \n        // Handle base cases\n        if (n < 0) {\n            return tribonacciSequence; // Return an empty list for negative input\n        }\n        \n        // Initialize the first few values of the sequence\n        for (int i = 0; i <= n; i++) {\n            tribonacciSequence.add(calculateTribonacci(i));\n        }\n        \n        return tribonacciSequence;\n    }\n    \n    private static int calculateTribonacci(int n) {\n        if (n == 0) return 1; // Base case for n = 0, as per the problem statement\n        if (n == 1) return 3; // Base case for n = 1\n        \n        if (n % 2 == 0) {\n            return 1 + n / 2; // For even n\n        } else {\n            return calculateTribonacci(n - 1) + calculateTribonacci(n - 2) + calculateTribonacci(n + 1); // For odd n\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(tri(3)); // Output: [1, 3, 2, 8]\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     */\n    public static int digits(int n) {\n        // Convert the integer to a string\n        String numStr = Integer.toString(n);\n        \n        // Initialize the product of odd digits\n        int product = 1;\n        \n        // Flag to check if there are any odd digits\n        boolean hasOddDigit = false;\n        \n        // Iterate through each character in the string representation\n        for (char digitChar : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(digitChar);\n            \n            // Check if the digit is odd\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n        }\n        \n        // If all digits are even, return 0\n        if (!hasOddDigit) {\n            return 0;\n        }\n        \n        return product;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(digits(1));   // Output: 1\n        System.out.println(digits(4));   // Output: 0\n        System.out.println(digits(235)); // Output: 15\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.util.*;\n\nclass IsNested {\n    /**\n     * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n     */\n    public static Boolean isNested(String string) {\n        Stack<Integer> stack = new Stack<>();\n        \n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            \n            if (ch == '[') {\n                stack.push(i);\n            } else if (ch == ']') {\n                if (!stack.isEmpty()) {\n                    // Found a matching opening bracket for the current closing bracket\n                    stack.pop();\n                    // If there are still elements in the stack, it means there's at least one nested pair\n                    if (!stack.isEmpty()) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        // If we finish processing and there are no unmatched opening brackets left, return false\n        return false;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isNested(\"[[]]\")); // \u279e True\n        System.out.println(isNested(\"[]]]]]]][[[[[]\")); // \u279e False\n        System.out.println(isNested(\"[][]\")); // \u279e False\n        System.out.println(isNested(\"[]\")); // \u279e False\n        System.out.println(isNested(\"[[][]]\")); // \u279e True\n        System.out.println(isNested(\"[[]][[\")); // \u279e True\n    }\n}"}
{"task_id": "java/60", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number num : lst) {\n            // Ceiling of the number\n            double ceilNum = Math.ceil(num.doubleValue());\n            // Square the ceiling value and add to sum\n            sum += ((int) ceilNum * (int) ceilNum);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Number> lst1 = Arrays.asList(1, 2, 3);\n        System.out.println(sumSquares(lst1)); // Output: 14\n\n        List<Number> lst2 = Arrays.asList(1, 4, 9);\n        System.out.println(sumSquares(lst2)); // Output: 98\n\n        List<Number> lst3 = Arrays.asList(1, 3, 5, 7);\n        System.out.println(sumSquares(lst3)); // Output: 84\n\n        List<Number> lst4 = Arrays.asList(1.4, 4.2, 0);\n        System.out.println(sumSquares(lst4)); // Output: 29\n\n        List<Number> lst5 = Arrays.asList(-2.4, 1, 1);\n        System.out.println(sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "// Check if the string is empty or null\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        // Get the last character of the string\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        // Check if the last character is a letter\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        // Split the string by spaces to check if the last character is part of a word\n        String[] words = txt.split(\" \");\n        for (String word : words) {\n            if (word.length() > 0 && word.charAt(word.length() - 1) == lastChar) {\n                return false;\n            }\n        }\n\n        // If none of the conditions are met, return true\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n        System.out.println(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n        System.out.println(checkIfLastCharIsALetter(\"\")); // \u279e False\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.util.*;\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     */\n    public static int canArrange(List<Object> arr) {\n        // Iterate through the list from index 1 to the end\n        for (int i = 1; i < arr.size(); i++) {\n            // Compare each element with its predecessor\n            if ((Integer)arr.get(i) <= (Integer)arr.get(i - 1)) {\n                return i - 1; // Return the index of the preceding element\n            }\n        }\n        // If no such element exists, return -1\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        List<Object> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Object> arr2 = Arrays.asList(1, 2, 3);\n        \n        System.out.println(canArrange(arr1)); // Output: 3\n        System.out.println(canArrange(arr2)); // Output: -1\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestSmallestIntegers {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num < 0) {\n                    if (largestNegative == null || num > largestNegative) {\n                        largestNegative = num;\n                    }\n                } else if (num > 0) {\n                    if (smallestPositive == null || num < smallestPositive) {\n                        smallestPositive = num;\n                    }\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (None, 1)\n        System.out.println(largestSmallestIntegers(new ArrayList<>())); // (None, None)\n        System.out.println(largestSmallestInteggers(Arrays.asList(0))); // (None, None)\n    }\n}"}
{"task_id": "java/64", "language": "java", "completion": "if (n <= 0) {\n            throw new IllegalArgumentException(\"Input must be a positive integer.\");\n        }\n\n        BigInteger result = BigInteger.ONE;\n        for (int i = n; i > 0; i--) {\n            result = result.multiply(factorial(i));\n        }\n\n        return result.longValue();\n    }\n\n    private static BigInteger factorial(int num) {\n        BigInteger fact = BigInteger.ONE;\n        for (int i = 1; i <= num; i++) {\n            fact = fact.multiply(BigInteger.valueOf(i));\n        }\n        return fact;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a positive integer: \");\n        int n = scanner.nextInt();\n        long result = specialFactorial(n);\n        System.out.println(\"Special factorial of \" + n + \" is: \" + result);\n    }\n}\n\nThis code defines the `specialFactorial` method, which calculates the Brazilian factorial of a given positive integer \\( n \\). It uses BigInteger for handling large numbers since factorials grow very quickly. The main method reads an input from the user and prints out the special factorial result."}
{"task_id": "java/65", "language": "java", "completion": "import java.util.*;\n\nclass WordsInSentence {\n    /**\n     * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     */\n    public static String wordsInSentence(String sentence) {\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // List to store words with prime length\n        List<String> resultWords = new ArrayList<>();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                resultWords.add(word);\n            }\n        }\n        \n        // Join the words back together into a single string\n        return String.join(\" \", resultWords);\n    }\n    \n    // Helper method to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "java/66", "language": "java", "completion": "import java.math.BigDecimal;\n\nclass Simplify {\n    public static Boolean simplify(String x, String n) {\n        // Split the input strings to get numerator and denominator for both fractions\n        String[] partsX = x.split(\"/\");\n        int numX = Integer.parseInt(partsX[0]);\n        int denomX = Integer.parseInt(partsX[1]);\n\n        String[] partsN = n.split(\"/\");\n        int numN = Integer.parseInt(partsN[0]);\n        int denomN = Integer.parseInt(partsN[1]);\n\n        // Multiply the numerators and denominators to get the resulting fraction\n        int resultNum = numX * numN;\n        int resultDenom = denomX * denomN;\n\n        // Create a BigDecimal from the resulting fraction\n        BigDecimal result = new BigDecimal(resultNum).divide(new BigDecimal(resultDenom));\n\n        // Check if the result is a whole number by checking its remainder when divided by 1\n        return result.remainder(BigDecimal.ONE).equals(BigDecimal.ZERO);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(simplify(\"1/5\", \"5/1\")); // True\n        System.out.println(simplify(\"1/6\", \"2/1\")); // False\n        System.out.println(simplify(\"7/10\", \"10/2\")); // False\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass OrderByPoints {\n    /**\n     * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n        // Create a list of pairs (number, sum_of_digits)\n        List<Pair> pairs = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int number = (Integer) nums.get(i);\n            int sumOfDigits = sumDigits(number);\n            pairs.add(new Pair(number, sumOfDigits, i));\n        }\n\n        // Sort the list of pairs based on the sum of digits and then by index\n        pairs.sort((a, b) -> {\n            if (a.sumOfDigits != b.sumOfDigits) {\n                return Integer.compare(a.sumOfDigits, b.sumOfDigits);\n            } else {\n                return Integer.compare(a.index, b.index);\n            }\n        });\n\n        // Extract the sorted numbers from the pairs\n        List<Object> result = new ArrayList<>();\n        for (Pair pair : pairs) {\n            result.add(pair.number);\n        }\n\n        return result;\n    }\n\n    // Helper method to calculate the sum of digits of a number\n    private static int sumDigits(int num) {\n        num = Math.abs(num);\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    // Helper class to store the number, its sum of digits, and its index\n    static class Pair {\n        int number;\n        int sumOfDigits;\n        int index;\n\n        Pair(int number, int sumOfDigits, int index) {\n            this.number = number;\n            this.sumOfDigits = sumOfDigits;\n            this.index = index;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Object> nums = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(orderByPoints(nums)); // Output: [-1, -11, 1, -12, 11]\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.util.*;\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Integer> nums) {\n        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isOddDigit(num)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private static boolean isOddDigit(int num) {\n        String strNum = Integer.toString(Math.abs(num));\n        int firstDigit = Character.getNumericValue(strNum.charAt(0));\n        int lastDigit = Character.getNumericValue(strNum.charAt(strNum.length() - 1));\n        \n        return isOdd(firstDigit) && isOdd(lastDigit);\n    }\n    \n    private static boolean isOdd(int digit) {\n        return digit == 1 || digit == 3 || digit == 5 || digit == 7 || digit == 9;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> nums1 = Arrays.asList(15, -73, 14, -15);\n        List<Integer> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        \n        System.out.println(specialfilter(nums1)); // Output: 1\n        System.out.println(specialfilter(nums2)); // Output: 2\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetMaxTriples {\n    /**\n     * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     */\n    public static int getMaxTriples(int n) {\n        // Step 1: Generate the array based on the given formula\n        int[] a = new int[n];\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        // Step 2: Iterate through all possible triples (i, j, k) where i < j < k\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        // Step 3: Return the number of valid triples\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(\"Output: \" + getMaxTriples(n)); // Output should be 1\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.util.*;\n\nclass Bf {\n    public static List<Object> bf(String planet1, String planet2) {\n        // Map each planet to its position in the solar system\n        Map<String, Integer> planets = new HashMap<>();\n        planets.put(\"Mercury\", 1);\n        planets.put(\"Venus\", 2);\n        planets.put(\"Earth\", 3);\n        planets.put(\"Mars\", 4);\n        planets.put(\"Jupiter\", 5);\n        planets.put(\"Saturn\", 6);\n        planets.put(\"Uranus\", 7);\n        planets.put(\"Neptune\", 8);\n\n        // Check if both planet1 and planet2 are valid planets\n        if (!planets.containsKey(planet1) || !planets.containsKey(planet2)) {\n            return new ArrayList<>();\n        }\n\n        // Get the positions of the two planets\n        int pos1 = planets.get(planet1);\n        int pos2 = planets.get(planet2);\n\n        // Ensure pos1 is less than pos2 for easier processing\n        if (pos1 > pos2) {\n            int temp = pos1;\n            pos1 = pos2;\n            pos2 = temp;\n        }\n\n        // Collect all planets between pos1 and pos2\n        List<Object> result = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : planets.entrySet()) {\n            int position = entry.getValue();\n            if (position > pos1 && position < pos2) {\n                result.add(entry.getKey());\n            }\n        }\n\n        // Sort the results by their positions in the solar system\n        Collections.sort(result, new Comparator<Object>() {\n            public int compare(Object o1, Object o2) {\n                return planets.get(o1).compareTo(planets.get(o2));\n            }\n        });\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "class XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n     */\n    public static int xOrY(int n, int x, int y) {\n        // Check if n is a prime number\n        if (isPrime(n)) {\n            return y;\n        } else {\n            return x;\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/72", "language": "java", "completion": "import java.util.*;\n\nclass DoubleTheDifference {\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer && (int)obj > 0 && (int)obj % 2 != 0) {\n                int num = (int) obj;\n                sum += num * num;\n            }\n        }\n        \n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        List<Object> lst1 = Arrays.asList(1, 3, 2, 0);\n        System.out.println(doubleTheDifference(lst1)); // Output: 10\n        \n        List<Object> lst2 = Arrays.asList(-1, -2, 0);\n        System.out.println(doubleTheDifference(lst2)); // Output: 0\n        \n        List<Object> lst3 = Arrays.asList(9, -2);\n        System.out.println(doubleTheDifference(lst3)); // Output: 81\n        \n        List<Object> lst4 = Arrays.asList(0);\n        System.out.println(doubleTheDifference(lst4)); // Output: 0\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "// Initialize variables to keep track of the strongest extension and its strength\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        // Iterate through each extension in the list\n        for (String ext : extensions) {\n            // Calculate the number of uppercase and lowercase letters in the extension name\n            int CAP = 0, SM = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n\n            // Calculate the strength of the current extension\n            int strength = CAP - SM;\n\n            // Update the strongestExtension and maxStrength if the current extension is stronger\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = ext;\n            }\n        }\n\n        // Return the result in the required format\n        return className + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(strongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // Output: my_class.AA\n        System.out.println(strongestExtension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n        if (b.length() > a.length()) {\n            return false;\n        }\n        \n        // Generate all rotations of the second word\n        List<String> rotations = new ArrayList<>();\n        for (int i = 0; i < b.length(); i++) {\n            String rotation = b.substring(i) + b.substring(0, i);\n            rotations.add(rotation);\n        }\n        \n        // Check if any rotation is a substring of the first word\n        for (String rotation : rotations) {\n            if (a.contains(rotation)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(cycpatternCheck(\"abcd\", \"abd\")); // False\n        System.out.println(cycpatternCheck(\"hello\", \"ell\")); // True\n        System.out.println(cycpatternCheck(\"whassup\", \"psus\")); // False\n        System.out.println(cycpatternCheck(\"abab\", \"baa\")); // True\n        System.out.println(cycpatternCheck(\"efef\", \"eeff\")); // False\n        System.out.println(cycpatternCheck(\"himenss\", \"simen\")); // True\n    }\n}"}
{"task_id": "java/75", "language": "java", "completion": "import java.util.*;\n\nclass IntToMiniRoman {\n    /**\n     * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n     */\n    public static String intToMiniRoman(int number) {\n        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        // Define the Roman numerals for each place value\n        String[] thousands = {\"\", \"m\", \"mm\", \"mmm\"};\n        String[] hundreds = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n        String[] tens = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n        String[] units = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"};\n\n        // Extract the digits of the number\n        int thousandPart = number / 1000;\n        int hundredPart = (number % 1000) / 100;\n        int tenPart = (number % 100) / 10;\n        int unitPart = number % 10;\n\n        // Construct the Roman numeral string\n        String romanNumeral = thousands[thousandPart] + hundreds[hundredPart] + tens[tenPart] + units[unitPart];\n\n        // Convert to lowercase and return\n        return romanNumeral.toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(intToMiniRoman(19));  // Output: xix\n        System.out.println(intToMiniRoman(152)); // Output: clii\n        System.out.println(intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "java/76", "language": "java", "completion": "// To determine if three sides form a right-angled triangle, we can use the Pythagorean theorem.\n        // The Pythagorean theorem states that in a right-angled triangle, the square of the length of the hypotenuse \n        // (the side opposite the right angle) is equal to the sum of the squares of the lengths of the other two sides.\n        \n        // First, we need to identify the longest side, which will be the potential hypotenuse.\n        int maxSide = Math.max(a, Math.max(b, c));\n        \n        // Then, we check if the square of this side is equal to the sum of the squares of the other two sides.\n        if (maxSide == a) {\n            return b * b + c * c == a * a;\n        } else if (maxSide == b) {\n            return a * a + c * c == b * b;\n        } else {\n            return a * a + b * b == c * c;\n        }\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(rightAngleTriangle(3, 4, 5)); // True\n        System.out.println(rightAngleTriangle(1, 2, 3)); // False\n        System.out.println(rightAngleTriangle(5, 12, 13)); // True\n        System.out.println(rightAngleTriangle(7, 24, 25)); // True\n        System.out.println(rightAngleTriangle(8, 15, 17)); // True\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n        StringBuilder result = new StringBuilder();\n        boolean hasLetter = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c));\n                } else {\n                    result.append(Character.toUpperCase(c));\n                }\n            } else {\n                result.append(c);\n            }\n        }\n        \n        if (!hasLetter) {\n            return result.reverse().toString();\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(solve(\"1234\")); // \"4321\"\n        System.out.println(solve(\"ab\"));   // \"AB\"\n        System.out.println(solve(\"#a@C\"));  // \"#A@c\"\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "if (text == null || text.isEmpty()) {\n            return null;\n        }\n\n        try {\n            // Get a MessageDigest instance for MD5\n            java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\n            \n            // Compute the MD5 hash of the input string\n            byte[] digest = md.digest(text.getBytes());\n            \n            // Convert the byte array into a hexadecimal string representation\n            StringBuilder sb = new StringBuilder();\n            for (byte b : digest) {\n                sb.append(String.format(\"%02x\", b & 0xff));\n            }\n            \n            return sb.toString();\n        } catch (java.security.NoSuchAlgorithmException e) {\n            // This exception should not occur as \"MD5\" is a standard algorithm\n            throw new RuntimeException(\"MD5 algorithm not found\", e);\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(stringToMd5(\"Hello world\")); // Expected output: 3e25960a79dbc69b674cd4ec67a72c62\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.util.*;\n\nclass GenerateIntegers {\n    /**\n     * Given two positive integers a and b, return the even digits between a and b, in ascending order.\n     * \n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     */\n    public static List<Integer> generateIntegers(int a, int b) {\n        // Determine the start and end of the range\n        int start = Math.min(a, b);\n        int end = Math.max(a, b);\n        \n        // Create a list to store even numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through the range from start to end\n        for (int i = start; i <= end; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        // Test cases\n        System.out.println(generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(generateIntegers(10, 14)); // []\n    }\n}"}

{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))       # Output: False\nprint(below_zero([1, 2, -4, 5]))   # Output: True"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\n    Eine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return (total_sum, total_product)"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Stellen Sie sicher, dass die Strings dieselbe L\u00e4nge haben\n    if len(a) != len(b):\n        raise ValueError(\"Die Eingabestrings m\u00fcssen dieselbe L\u00e4nge haben\")\n    \n    result = []\n    \n    # F\u00fchren Sie die XOR-Operation durch\n    for bit_a, bit_b in zip(a, b):\n        if bit_a == bit_b:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)\n\n# Beispieltest\nprint(string_xor('010', '110'))  # Ausgabe sollte sein: '100'"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_length = -1\n    longest_string = None\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n            \n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Beispieltests\nprint(greatest_common_divisor(3, 5))  # Ausgabe: 1\nprint(greatest_common_divisor(25, 15))  # Ausgabe: 5"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Mapping of number words to their corresponding numeric values\n    number_order = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    numbers_list = numbers.split()\n    \n    # Convert the list of number words to their numeric values and sort them\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_order[x])\n    \n    # Join the sorted list back into a string and return it\n    return ' '.join(sorted_numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))  # Output should be 'one three five'"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Die Liste muss mindestens zwei Elemente enthalten.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    rescaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    \n    return rescaled_numbers\n\n# Beispielaufruf\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Ausgabe: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    flipped = \"\"\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n        elif char.isupper():\n            flipped += char.lower()\n        else:\n            flipped += char\n    return flipped\n\n# Beispielaufruf\nprint(flip_case('Hello'))  # Ausgabe: 'hELLO'"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list) -> list:\n    \"\"\"Gib nur positive Zahlen in der Liste zur\u00fcck.\n    \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zur\u00fcck.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list) -> list:\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if not l:\n        return []\n    \n    sorted_list = sorted(l)\n    result = []\n    for element in sorted_list:\n        if element not in result:\n            result.append(element)\n    return result\n\n# Test der Funktion\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Ausgabe: [0, 2, 3, 5, 9, 123]"}
{"task_id": "python/11", "language": "python", "completion": "def is_prime(num):\n    \"\"\"\u00dcberpr\u00fcft, ob eine Zahl eine Primzahl ist.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(n):\n    \"\"\"\u00dcberpr\u00fcft, ob eine Zahl eine Fibonacci-Zahl ist.\"\"\"\n    a, b = 0, 1\n    while a < n:\n        a, b = b, a + b\n    return a == n\n\ndef prime_fib(n: int):\n    \"\"\"\n    Gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n    \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    if len(l) < 3:\n        return False\n    \n    l.sort()  # Sortiere die Liste, um doppelte Elemente zu vermeiden und leichtere Suche nach Tripeln zu erm\u00f6glichen\n    \n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:  # \u00dcberspringe doppelte Elemente, um Redundanzen zu vermeiden\n            continue\n        \n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Testcases\nprint(triples_sum_to_zero([1, 3, 5, 0]))       # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))      # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))       # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))# True\nprint(triples_sum_to_zero([1]))                # False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    # Iteriere \u00fcber alle m\u00f6glichen Paare in der Liste\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n# Testf\u00e4lle\nprint(pairs_sum_to_zero([1, 3, 5, 0]))       # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))      # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))       # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))# True\nprint(pairs_sum_to_zero([1]))                # False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialisierung der ersten vier Elemente der Folge\n    fib4_values = [0, 0, 2, 0]\n    \n    # Iterative Berechnung der Folge von 4 bis n\n    for i in range(4, n + 1):\n        next_value = fib4_values[i - 1] + fib4_values[i - 2] + fib4_values[i - 3] + fib4_values[i - 4]\n        fib4_values.append(next_value)\n    \n    return fib4_values[n]\n\n# Testf\u00e4lle\nprint(fib4(5))  # Ausgabe: 4\nprint(fib4(6))  # Ausgabe: 8\nprint(fib4(7))  # Ausgabe: 14"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        # Wenn die Anzahl der Elemente ungerade ist, gib den mittleren Wert zur\u00fcck\n        return float(sorted_list[n // 2])\n    else:\n        # Wenn die Anzahl der Elemente gerade ist, gib den Durchschnitt der beiden mittleren Werte zur\u00fcck\n        mid1 = sorted_list[(n // 2) - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Testf\u00e4lle\nprint(median([3, 1, 2, 4, 5]))       # Ausgabe: 3.0\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Ausgabe: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Entferne alle Leerzeichen und wandle den String in Kleinbuchstaben um\n    cleaned_text = ''.join(text.split()).lower()\n    \n    # Vergleiche den String mit seiner Umkehrung\n    return cleaned_text == cleaned_text[::-1]\n\n# Testf\u00e4lle\nprint(is_palindrome(''))         # True\nprint(is_palindrome('aba'))      # True\nprint(is_palindrome('aaaaa'))    # True\nprint(is_palindrome('zbcd'))     # False"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nprint(remove_vowels(''))  # ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))  # 'bcdf'\nprint(remove_vowels('aaaaa'))  # ''\nprint(remove_vowels('aaBAA'))  # 'B'\nprint(remove_vowels('zbcd'))  # 'zbcd'"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Addiere zwei Zahlen x und y.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    \n    # Erstellen Sie zwei Counter f\u00fcr die beiden Strings\n    counter0 = Counter(s0)\n    counter1 = Counter(s1)\n    \n    # Vergleichen Sie die Counter\n    return counter0 == counter1\n\n# Testf\u00e4lle\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))              # True\nprint(same_chars('dddddddabc', 'abcd'))              # True\nprint(same_chars('eabcd', 'dddddddabc'))             # False\nprint(same_chars('abcd', 'dddddddabce'))             # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int) -> int:\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\"\"\"\n    if n <= 0:\n        raise ValueError(\"n muss eine positive ganze Zahl sein.\")\n    \n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n# Testf\u00e4lle\nif __name__ == \"__main__\":\n    print(fib(10))  # Ausgabe: 55\n    print(fib(1))   # Ausgabe: 1\n    print(fib(8))   # Ausgabe: 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Konvertiere die Listen in Mengen\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Finde den Schnitt der beiden Mengen\n    intersection = set1.intersection(set2)\n    \n    # Wandle das Ergebnis in eine sortierte Liste um\n    result = sorted(list(intersection))\n    \n    return result\n\n# Testf\u00e4lle\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\"\"\"\n    \n    # Starte mit dem kleinsten Primfaktor 2\n    largest_factor = None\n    divisor = 2\n    \n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            # Wenn der aktuelle Faktor ein Teiler ist, dividiere die Zahl durch diesen Faktor\n            while n % divisor == 0:\n                n //= divisor\n            largest_factor = divisor\n        divisor += 1\n    \n    # Wenn nach dem Entfernen aller kleineren Faktoren n noch gr\u00f6\u00dfer als 1 ist, dann ist n der gr\u00f6\u00dfte Primfaktor\n    if n > 1:\n        largest_factor = n\n    \n    return largest_factor\n\n# Testcases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n ist eine Funktion, die Zahlen von 1 bis n summiert.\n    \n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Leere Liste f\u00fcr die Ableitungskoeffizienten\n    deriv_xs = []\n    \n    # Durchlaufe die Koeffizientenliste von hinten nach vorne\n    for i in range(len(xs) - 1, 0, -1):\n        # Berechne den neuen Koeffizienten als Produkt des alten Koeffizienten mit dem Index\n        deriv_xs.insert(0, xs[i] * i)\n    \n    return deriv_xs\n\n# Testf\u00e4lle\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # [2, 6]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int, memo=None):\n    if memo is None:\n        memo = {}\n    \n    # Basisf\u00e4lle definieren\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Memoization verwenden, um bereits berechnete Werte zu speichern\n    if n in memo:\n        return memo[n]\n    \n    # Die rekursive Beziehung anwenden\n    result = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    \n    # Ergebnis im Memo speichern\n    memo[n] = result\n    \n    return result\n\n# Testf\u00e4lle\nprint(fibfib(1))  # Ausgabe: 0\nprint(fibfib(5))  # Ausgabe: 4\nprint(fibfib(8))  # Ausgabe: 24"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\n    Beispiel:\n    \n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Define the set of vowels to check against\n    vowels = \"aeiouAEIOU\"\n    # Count and return the number of vowels in the string\n    return sum(1 for char in s if char in vowels)\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"Hello World!\"))  # Expected output: 3\nprint(vowels_count(\"Python programming is fun.\"))  # Expected output: 5\nprint(vowels_count(\"rhythm\"))  # Expected output: 0\nprint(vowels_count(\"sky\"))  # Expected output: 1\nprint(vowels_count(\"12345\"))  # Expected output: 0\nprint(vowels_count(\"yYyYyY\"))  # Expected output: 0 (assuming 'y' is not counted as a vowel if it appears in the middle)\nprint(vowels_count(\"endswithy\"))  # Expected output: 2 (if 'y' at the end is considered a vowel)"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    from collections import Counter\n    \n    # Z\u00e4hlen der H\u00e4ufigkeiten aller Zahlen in der Liste\n    counts = Counter(lst)\n    \n    # Initialisieren des Ergebnisses mit -1 (Standardwert, falls keine passende Zahl gefunden wird)\n    result = -1\n    \n    # Durchlaufen aller eindeutigen Zahlen in der Liste\n    for num in counts:\n        if counts[num] >= num:\n            # Aktualisieren des Ergebnisses, wenn die Bedingung erf\u00fcllt ist und die Zahl gr\u00f6\u00dfer als das aktuelle Ergebnis ist\n            result = max(result, num)\n    \n    return result\n\n# Testf\u00e4lle\nprint(search([4, 1, 2, 2, 3, 1]))  # == 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # == 3\nprint(search([5, 5, 4, 4, 4]))  # == -1"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # \u00dcberpr\u00fcfen, ob die drei Seiten ein g\u00fcltiges Dreieck bilden\n    if a + b > c and a + c > b and b + c > a:\n        # Berechnen des halben Umfangs\n        s = (a + b + c) / 2\n        # Berechnen der Fl\u00e4che mit der Formel von Heron\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Runden auf zwei Dezimalstellen und zur\u00fcckgeben\n        return round(area, 2)\n    else:\n        # Wenn die Seiten kein g\u00fcltiges Dreieck bilden, gib -1 zur\u00fcck\n        return -1\n\n# Beispiele\nprint(triangle_area(3, 4, 5))  # == 6.00\nprint(triangle_area(1, 2, 10)) # == -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Pr\u00fcfen, ob q eine palindromische Liste ist\n    is_palindrome = (q == q[::-1])\n    \n    # Berechnen der Summe der Elemente in q\n    total_weight = sum(q)\n    \n    # \u00dcberpr\u00fcfen, ob die Bedingungen erf\u00fcllt sind\n    return is_palindrome and (total_weight <= w)\n\n# Beispieltests\nprint(will_it_fly([1, 2], 5))      # False\nprint(will_it_fly([3, 2, 3], 1))   # False\nprint(will_it_fly([3, 2, 3], 9))   # True\nprint(will_it_fly([3], 5))         # True"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Pr\u00fcft, ob eine Zahl n eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Schreibt eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist.\"\"\"\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            j = a // i\n            if is_prime(i) and is_prime(j) and i != j:\n                k = j // i\n                if is_prime(k):\n                    return True\n    return False\n\n# Beispielaufrufe\nprint(is_multiply_prime(30))  # True, da 30 = 2 * 3 * 5\nprint(is_multiply_prime(60))  # True, da 60 = 2 * 3 * 10 (10 ist keine Primzahl)\nprint(is_multiply_prime(70))  # False, da 70 nicht das Produkt von drei Primzahlen ist"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Sie erhalten eine Zahl in Dezimalform und Ihre Aufgabe besteht darin, sie in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n\n    Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen zeichen dienen zur Formatierungshilfe.\n\n    Beispiele:\n    \n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Die Dezimalzahl in bin\u00e4r umwandeln\n    binary_str = bin(decimal)[2:]  # [2:] entfernt das '0b' am Anfang des Strings\n    \n    # Den Bin\u00e4rstring mit 'db' versehen\n    result = \"db\" + binary_str + \"db\"\n    \n    return result\n\n# Beispiele\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        group = s[i:i+3]\n        if len(set(group)) != 3:\n            return False\n            \n    return True\n\n# Test cases\nprint(is_happy(\"a\"))       # False\nprint(is_happy(\"aa\"))      # False\nprint(is_happy(\"abcd\"))    # True\nprint(is_happy(\"aabb\"))    # False\nprint(is_happy(\"adb\"))     # True\nprint(is_happy(\"xyy\"))     # False"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n\n# Beispielaufruf\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Ausgabe: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Pr\u00fcft, ob eine Zahl n eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Schreibt eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Beispiele\nprint(prime_length('Hello'))      # True\nprint(prime_length('abcdcba'))    # True\nprint(prime_length('kittens'))    # True\nprint(prime_length('orange'))     # False"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # 1. Berechne die Summe aller Ziffern von N\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    \n    # 2. Wandle die Summe der Ziffern in eine bin\u00e4re Darstellung um\n    binary_representation = bin(sum_of_digits)[2:]  # [2:] entfernt das '0b' am Anfang der bin\u00e4ren Zeichenkette\n    \n    # 3. Gebe die bin\u00e4re Darstellung zur\u00fcck\n    return binary_representation\n\n# Beispieltests\nprint(solve(1000))  # Ausgabe: \"1\"\nprint(solve(150))   # Ausgabe: \"110\"\nprint(solve(147))   # Ausgabe: \"1100\""}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    \n    # Sortieren nach Zeilen (aufsteigend) und dann nach Spalten (absteigend)\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result\n\n# Beispiele\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # == []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # == [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    second_smallest = sorted_lst[1]\n    \n    return second_smallest\n\n# Testcases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))                # Output: None\nprint(next_smallest([1, 1]))            # Output: None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Langeweilen zu z\u00e4hlen. Eine Langeweile ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Liste der Satzendenkerzeichen\n    sentence_enders = ['.', '?', '!']\n    \n    # Anzahl der Langeweile (S\u00e4tze, die mit \"Ich\" beginnen)\n    boredom_count = 0\n    \n    # Splitte den String in S\u00e4tze\n    sentences = []\n    current_sentence = \"\"\n    for char in S:\n        current_sentence += char\n        if char in sentence_enders:\n            sentences.append(current_sentence)\n            current_sentence = \"\"\n    \n    # \u00dcberpr\u00fcfe jeden Satz, ob er mit \"Ich\" beginnt\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == \"ich\":\n            boredom_count += 1\n    \n    return boredom_count\n\n# Testbeispiele\nprint(is_bored(\"Hello world\")) # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\")) # 1"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    \"\"\"\u00dcberpr\u00fcft, ob eine Zahl n eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Berechnet die Summe der Ziffern einer Zahl n.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return None  # Keine Primzahlen gefunden\n    \n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n\n# Beispielaufrufe\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))            # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))               # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))                                    # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))                                        # Output: 7"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Pr\u00fcfen, ob das W\u00f6rterbuch leer ist\n        return False\n    \n    all_lower = True  # Annahme, dass alle Schl\u00fcssel in Kleinbuchstaben sind\n    all_upper = True   # Annahme, dass alle Schl\u00fcssel in Gro\u00dfbuchstaben sind\n    \n    for key in dictionary.keys():\n        if not isinstance(key, str):  # Pr\u00fcfen, ob der Schl\u00fcssel eine Zeichenkette ist\n            return False\n        if not key.islower():  # \u00dcberpr\u00fcfen, ob der Schl\u00fcssel nicht nur aus Kleinbuchstaben besteht\n            all_lower = False\n        if not key.isupper():  # \u00dcberpr\u00fcfen, ob der Schl\u00fcssel nicht nur aus Gro\u00dfbuchstaben besteht\n            all_upper = False\n    \n    return all_lower or all_upper  # True, wenn alle Schl\u00fcssel entweder nur Klein- oder nur Gro\u00dfbuchstaben haben\n\n# Beispieltests\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    # Wandeln Sie den String in eine Zahl um\n    number = float(value)\n    \n    # Runde die Zahl auf die n\u00e4chste Ganzzahl\n    if number > 0:\n        rounded = round(number)\n    else:\n        rounded = -round(-number)\n    \n    return rounded\n\n# Testf\u00e4lle\nprint(closest_integer(\"10\"))       # Ausgabe: 10\nprint(closest_integer(\"15.3\"))     # Ausgabe: 15\nprint(closest_integer(\"-14.5\"))    # Ausgabe: -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:  # wenn n gerade ist, dann n\u00e4chste gerade Zahl\n            pile.append(n + (i * 2) + 1)\n        else:           # wenn n ungerade ist, dann n\u00e4chste ungerade Zahl\n            pile.append(n + (i * 2))\n    return pile\n\n# Beispiele\nprint(make_a_pile(3))  # [3, 5, 7]\nprint(make_a_pile(4))  # [4, 6, 8, 10]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    # Entfernen Sie alle Kommas und Leerzeichen aus dem String\n    s = s.replace(',', '').replace(' ', '')\n    \n    # Teilen Sie den String anhand von Leerzeichen auf\n    words = s.split()\n    \n    return words\n\n# Beispieltests\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1  # Wenn x gr\u00f6\u00dfer als y ist, gibt es keine L\u00f6sung.\n    \n    # Durchlaufe die Zahlen vom Ende von [x, y] bis zum Anfang und suche die gr\u00f6\u00dfte gerade Zahl.\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # Wenn keine gerade Zahl gefunden wird, gib -1 zur\u00fcck.\n    return -1\n\n# Testf\u00e4lle\nprint(choose_num(12, 15))  # Sollte 14 zur\u00fcckgeben\nprint(choose_num(13, 12))  # Sollte -1 zur\u00fcckgeben"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Berechnung der Summe aller Zahlen von n bis m\n    summe = sum(range(n, m + 1))\n    \n    # Berechnung der Anzahl der Zahlen in diesem Bereich\n    anzahl = m - n + 1\n    \n    # Durchschnitt berechnen und runden\n    durchschnitt = round(summe / anzahl)\n    \n    # Bin\u00e4rkonvertierung des gerundeten Durchschnitts\n    return bin(durchschnitt)[2:]  # [2:] entfernt das \"0b\" am Anfang der bin\u00e4ren Darstellung\n\n# Beispiele\nprint(rounded_avg(1, 5))   # Ausgabe: \"0b11\"\nprint(rounded_avg(7, 5))   # Ausgabe: -1\nprint(rounded_avg(10, 20)) # Ausgabe: \"0b1111\"\nprint(rounded_avg(20, 33)) # Ausgabe: \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Berechne die Fakult\u00e4t von i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Berechne die Summe der Zahlen von 1 bis i\n            sum_up_to_i = sum(range(1, i + 1))\n            result.append(sum_up_to_i)\n    \n    return result\n\n# Beispielaufruf\nprint(f(5))  # Ausgabe: [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)\n\n# Beispiel 1\nprint(even_odd_palindrome(3))  # Ausgabe: (1, 2)\n\n# Beispiel 2\nprint(even_odd_palindrome(12)) # Ausgabe: (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # Wenn das Array leer ist, return True\n        return True\n    \n    n = len(arr)\n    \n    # Durchlaufen aller m\u00f6glichen Rechtsschiebeoperationen\n    for shift in range(n):\n        is_sorted = True  # Annahme: das Array ist sortiert\n        \n        # \u00dcberpr\u00fcfen, ob das verschobene Array sortiert ist\n        for i in range(1, n):\n            if arr[(shift + i) % n] > arr[(shift + i + 1) % n]:\n                is_sorted = False\n                break\n        \n        # Wenn das verschobene Array sortiert ist, return True\n        if is_sorted:\n            return True\n    \n    # Wenn keine Verschiebung zum Sortieren f\u00fchrt, return False\n    return False\n\n# Testf\u00e4lle\nprint(move_one_ball([3, 4, 5, 1, 2]))  # ==> True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # ==> False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Pr\u00fcfen, ob alle Elemente in lst1 gerade sind\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    # Erstellen einer Liste der ungeraden Zahlen in lst1\n    odd_in_lst1 = [x for x in lst1 if x % 2 != 0]\n    \n    # Pr\u00fcfen, ob es m\u00f6glich ist, die ungeraden Zahlen von lst1 durch gerade Zahlen aus lst2 zu tauschen\n    for num in odd_in_lst1:\n        if any(x % 2 == 0 for x in lst2):\n            return \"YES\"\n    \n    # Wenn keine geraden Zahlen gefunden werden k\u00f6nnen, um alle ungeraden Zahlen von lst1 zu tauschen, geben wir \"NO\" zur\u00fcck\n    return \"NO\"\n\n# Beispiele\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # L\u00f6schen aller Zeichen in s, die auch in c vorkommen\n    filtered_s = ''.join([char for char in s if char not in c])\n    \n    # \u00dcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist\n    is_palindrome = filtered_s == filtered_s[::-1]\n    \n    return (filtered_s, is_palindrome)\n\n# Beispieltests\nprint(reverse_delete(\"abcde\", \"ae\"))  # Ausgabe: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))   # Ausgabe: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Ausgabe: ('cdedc', True)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    total_fills = 0\n    \n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            fills_needed = math.ceil(water_units / capacity)\n            total_fills += fills_needed\n    \n    return total_fills"}
{"task_id": "python/53", "language": "python", "completion": "import re\n\ndef select_words(s, n):\n    def count_consonants(word):\n        # Entferne alle Vokale und z\u00e4hle die verbliebenen Buchstaben\n        consonants = len([c for c in word if c.lower() not in 'aeiou'])\n        return consonants\n    \n    # W\u00f6rter trennen, wobei Leerzeichen als Trennzeichen dienen\n    words = s.split()\n    \n    # Filter die W\u00f6rter, die genau n Konsonanten enthalten\n    selected_words = [word for word in words if count_consonants(word) == n]\n    \n    return selected_words\n\n# Testf\u00e4lle\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    # Sortiere das Array in aufsteigender Reihenfolge\n    sorted_arr = sorted(arr)\n    \n    # W\u00e4hle die letzten k Elemente aus dem sortierten Array heraus\n    result = sorted_arr[-k:]\n    \n    return result\n\n# Beispiel 1\nprint(maximum([-3, -4, 5], 3))  # Ausgabe: [-4, -3, 5]\n\n# Beispiel 2\nprint(maximum([4, -4, 4], 2))   # Ausgabe: [4, 4]\n\n# Beispiel 3\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Ausgabe: [2]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    # Summe initialisieren\n    total_sum = 0\n    \n    # Alle Elemente von 0 bis k-1 durchlaufen\n    for i in range(k):\n        # Wenn das Element h\u00f6chstens zwei Ziffern hat, zur Summe addieren\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    \n    return total_sum\n\n# Beispieltestfall\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Ausgabe: 24"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Pr\u00fcft, ob die Zahl n eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection_length(interval1, interval2):\n    \"\"\"Berechnet die L\u00e4nge des Schnitts der beiden Intervalle.\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return end - start + 1\n    else:\n        return 0\n\ndef intersection(interval1, interval2):\n    \"\"\"Bestimmt, ob die L\u00e4nge des Schnitts eine Primzahl ist.\"\"\"\n    length = intersection_length(interval1, interval2)\n    if length == 0:\n        return \"NO\"\n    else:\n        return \"YES\" if is_prime(length) else \"NO\"\n\n# Beispieltests\nprint(intersection((1, 2), (2, 3)))  # ==> \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # ==> \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # ==> \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n < 0:\n        raise ValueError(\"n muss eine nicht-negative ganze Zahl sein\")\n    \n    # Erstellen einer Liste zur Speicherung der Tribonacci-Folge\n    trib_sequence = [None] * (n + 1)\n    \n    def tribonacci(k):\n        if k == 0:\n            return 3\n        elif k == 1:\n            return 3\n        elif k % 2 == 0:\n            if trib_sequence[k] is None:\n                trib_sequence[k] = 1 + k // 2\n        else:\n            if trib_sequence[k] is None:\n                trib_sequence[k] = tribonacci(k - 1) + tribonacci(k - 2) + tribonacci(k + 1)\n        return trib_sequence[k]\n    \n    # Berechnen der Tribonacci-Folge von 0 bis n\n    for i in range(n + 1):\n        tribonacci(i)\n    \n    return trib_sequence\n\n# Beispielaufrufe\nprint(tri(3))  # Ausgabe: [3, 3, 2, 8]\nprint(tri(4))  # Ausgabe: [3, 3, 2, 8, 3]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib das Produkt der ungeraden Ziffern zur\u00fcck.\n    Gib 0 zur\u00fcck, wenn alle Ziffern gerade sind.\n    Zum Beispiel:\n    \n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Wandle die Zahl in eine Zeichenkette um, um jede Ziffer zu betrachten\n    str_n = str(n)\n    \n    # Initialisiere das Produkt der ungeraden Ziffern\n    produkt = 1\n    \n    # Durchlaufe jede Ziffer in der Zeichenkette\n    for ziffer in str_n:\n        if int(ziffer) % 2 != 0:\n            # Wenn die Ziffer ungerade ist, multipliziere sie mit dem Produkt\n            produkt *= int(ziffer)\n    \n    return produkt\n\n# Testf\u00e4lle\nprint(digits(1))   # == 1\nprint(digits(4))   # == 0\nprint(digits(235)) # == 15"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    # Wenn der String leer ist oder nur eine Klammer enth\u00e4lt, gib False zur\u00fcck\n    if len(string) <= 1:\n        return False\n    \n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            # Wenn der Stack nicht leer ist, entfernen wir die oberste Klammer\n            if stack:\n                stack.pop()\n    \n    # Wenn der Stack am Ende nicht leer ist und keine Verschachtelung vorhanden ist, gib False zur\u00fcck\n    return len(stack) == 0\n\n# Testf\u00e4lle\nprint(is_nested('[[]]'))         # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]'))         # False\nprint(is_nested('[]'))           # False\nprint(is_nested('[[][]]'))      # True\nprint(is_nested('[[]][['))      # True"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    # Auf die n\u00e4chste Ganzzahl aufrunden\n    rounded_list = [math.ceil(x) for x in lst]\n    \n    # Quadrieren und Summieren der Werte\n    return sum([x**2 for x in rounded_list])\n\n# Beispiele\nprint(sum_squares([1, 2, 3]))       # Ausgabe: 14\nprint(sum_squares([1, 4, 9]))       # Ausgabe: 98\nprint(sum_squares([1, 3, 5, 7]))    # Ausgabe: 84\nprint(sum_squares([1.4, 4.2, 0]))   # Ausgabe: 29\nprint(sum_squares([-2.4, 1, 1]))    # Ausgabe: 6"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # \u00dcberpr\u00fcfen, ob der String leer ist\n        return False\n    \n    last_char = txt[-1]  # Extrahieren Sie das letzte Zeichen\n    \n    if last_char.isalpha():  # \u00dcberpr\u00fcfen, ob es sich um ein Alphabetzeichen handelt\n        if len(txt) == 1 or txt[len(txt) - 2] == ' ':  # Stellen Sie sicher, dass das letzte Zeichen nicht Teil eines Wortes ist\n            return True\n    return False\n\n# Testf\u00e4lle\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Beispiele\nprint(can_arrange([1, 2, 4, 3, 5]))  # Ausgabe: 3\nprint(can_arrange([1, 2, 3]))         # Ausgabe: -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    '''\n    Erstellen Sie eine Funktion, die ein Tupel (a, b) zur\u00fcckgibt, wobei 'a' die gr\u00f6\u00dfte negative Ganzzahl und 'b' die kleinste positive Ganzzahl in einer Liste ist. Wenn es keine negativen oder positiven Ganzzahlen gibt, geben Sie sie als None zur\u00fcck.\n\n    Beispiele:\n    \n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    # Initialisieren Sie die Variablen f\u00fcr die gr\u00f6\u00dfte negative Zahl und die kleinste positive Zahl mit None\n    max_negative = None\n    min_positive = None\n    \n    # Durchlaufen der Liste, um nach den Werten zu suchen\n    for num in lst:\n        if num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        elif num > 0:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n    \n    # Geben Sie das Ergebnis als Tupel zur\u00fcck\n    return (max_negative, min_positive)\n\n# Testf\u00e4lle\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # == (None, 1)\nprint(largest_smallest_integers([]))                   # == (None, None)\nprint(largest_smallest_integers([0]))                  # == (None, None)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    # Hilfsfunktion zur Berechnung der Fakult\u00e4t einer einzelnen Zahl\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    # Initialisiere das Ergebnis mit 1\n    result = 1\n    \n    # Berechne die spezielle Fakult\u00e4t\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    \n    return result\n\n# Beispieltest\nprint(special_factorial(4))  # Ausgabe sollte 288 sein"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Pr\u00fcft, ob eine Zahl n eine Primzahl ist.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"Gibt die W\u00f6rter eines Satzes zur\u00fcck, deren L\u00e4nge eine Primzahl ist.\"\"\"\n    words = sentence.split()\n    result_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(result_words)\n\n# Beispiel 1\nsentence1 = \"This is a test\"\nprint(words_in_sentence(sentence1))  # Ausgabe: \"is\"\n\n# Beispiel 2\nsentence2 = \"lets go for swimming\"\nprint(words_in_sentence(sentence2))  # Ausgabe: \"go for\""}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Funktion zum Parsen einer Bruchzahl aus einem String\n    def parse_fraction(s):\n        zaehler, nenner = map(int, s.split('/'))\n        return zaehler, nenner\n    \n    # Parse die beiden Eingabestrings zu Bruchzahlen\n    x_zaehler, x_nenner = parse_fraction(x)\n    n_zaehler, n_nenner = parse_fraction(n)\n    \n    # Berechne das Produkt der beiden Bruchzahlen\n    produkt_zaehler = x_zaehler * n_zaehler\n    produkt_nenner = x_nenner * n_nenner\n    \n    # Pr\u00fcfe, ob das Produkt eine ganze Zahl ist\n    return produkt_zaehler % produkt_nenner == 0\n\n# Testf\u00e4lle\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Erstellen einer Liste von Tupeln (num, index), sortieren nach Summe der Ziffern und dann nach Index\n    indexed_nums = [(num, idx) for idx, num in enumerate(nums)]\n    sorted_indexed_nums = sorted(indexed_nums, key=lambda x: (sum_of_digits(x[0]), x[1]))\n    \n    # Extrahieren der sortierten Zahlen und geben Sie sie zur\u00fcck\n    return [num for num, idx in sorted_indexed_nums]\n\n# Beispieltests\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # Wandle die Zahl in eine Zeichenkette um (f\u00fcr einfachere Indexierung)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n\n# Testf\u00e4lle\nprint(specialFilter([15, -73, 14, -15]))  # => 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # => 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Erstellen des Arrays a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    \n    # \u00dcberpr\u00fcfen aller m\u00f6glichen Tripel (i, j, k) mit i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\n# Beispiel\nn = 5\nprint(get_max_triples(n))  # Ausgabe: 1"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # Liste der Planeten im Sonnensystem\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # \u00dcberpr\u00fcfen, ob die Eingabeparameter korrekte Planetennamen sind\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Finden der Positionen der beiden Planeten\n    pos1 = planets.index(planet1)\n    pos2 = planets.index(planet2)\n    \n    # Stellen sicher, dass pos1 kleiner als pos2 ist (falls nicht, tauschen Sie sie)\n    if pos1 > pos2:\n        pos1, pos2 = pos2, pos1\n    \n    # Finden aller Planeten zwischen pos1 und pos2\n    result = planets[pos1 + 1:pos2]\n    \n    # Zur\u00fcckgeben der Ergebnisse als Tupel\n    return tuple(result)\n\n# Beispiele\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))     # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))    # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Beispiele\nprint(x_or_y(7, 34, 12))  # Ausgabe: 34 (da 7 eine Primzahl ist)\nprint(x_or_y(15, 8, 5))   # Ausgabe: 5 (da 15 keine Primzahl ist)"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # Filtern der ungeraden und nicht negativen Zahlen\n    filtered_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    \n    # Berechnen der Quadrate der gefilterten Zahlen\n    squares = [num ** 2 for num in filtered_numbers]\n    \n    # Summieren der Quadrate\n    result = sum(squares) if squares else 0\n    \n    return result\n\n# Testf\u00e4lle\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))   # Output: 0\nprint(double_the_difference([9, -2]))        # Output: 81\nprint(double_the_difference([0]))            # Output: 0"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for ext in extensions:\n        current_strength = strength(ext)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = ext\n    \n    return f\"{class_name}.{strongest_extension}\"\n\n# Beispielaufrufe\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Ausgabe: my_class.AA\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Ausgabe: Slices.SErviNGSliCes"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    \n    # Erstellen einer Liste aller Rotationen von b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # \u00dcberpr\u00fcfen, ob eine der Rotationen ein Teilstring von a ist\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False\n\n# Testf\u00e4lle\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    roman_numerals = [\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result)\n\n# Beispiele\nprint(int_to_mini_roman(19))  # Ausgabe: 'xix'\nprint(int_to_mini_roman(152)) # Ausgabe: 'clii'\nprint(int_to_mini_roman(426)) # Ausgabe: 'cdxxvi'"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib True zur\u00fcck, wenn die drei Seiten ein rechtwinkliges Dreieck bilden, ansonsten False. Ein rechtwinkliges Dreieck ist ein Dreieck, bei dem ein Winkel ein rechter Winkel oder 90 Grad ist. Beispiel:\n    \n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Stellen wir sicher, dass a die l\u00e4ngste Seite ist\n    if a > b:\n        if a > c:\n            return a**2 == b**2 + c**2\n        else:\n            return c**2 == a**2 + b**2\n    else:\n        if b > c:\n            return b**2 == a**2 + c**2\n        else:\n            return c**2 == a**2 + b**2\n\n# Beispiele\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        return s[::-1]  # Kehre den String um, wenn keine Buchstaben vorhanden sind\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n\n# Beispiele\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))    # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\""}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n    Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # MD5-Hash berechnen\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n\n# Test der Funktion\nprint(string_to_md5('Hello world'))  # Ausgabe: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n\n    Zum Beispiel:\n    \n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Stellen wir sicher, dass a kleiner oder gleich b ist\n    if a > b:\n        a, b = b, a\n    \n    # Leere Liste f\u00fcr die geraden Zahlen\n    even_numbers = []\n    \n    # Durchlaufen der Zahlen von a bis b\n    for number in range(a, b + 1):\n        if number % 2 == 0:\n            even_numbers.append(number)\n    \n    return even_numbers\n\n# Beispiele\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []"}

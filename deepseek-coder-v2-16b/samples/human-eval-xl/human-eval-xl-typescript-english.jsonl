{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n};\n\n// Test cases\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n    if (numbers.length === 0) {\n        return [0, 1];\n    }\n    \n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    const product = numbers.reduce((acc, num) => acc * num, 1);\n    \n    return [sum, product];\n};\n\n// Test cases\nconsole.log(sum_product([])); // (0, 1)\nconsole.log(sum_product([1, 2, 3, 4])); // (10, 24)"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n    // Check if both strings are of equal length\n    if (a.length !== b.length) {\n        throw new Error(\"Input strings must be of the same length\");\n    }\n\n    let result = \"\";\n\n    // Iterate through each character in the strings\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            result += '1';\n        } else {\n            result += '0';\n        }\n    }\n\n    return result;\n};\n\n// Example usage:\nconsole.log(string_xor('010', '110')); // Output: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n};"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    // Ensure a and b are positive integers\n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    // Use the Euclidean algorithm to find the GCD\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n\n    return a;\n};\n\n// Test cases\nconsole.log(greatest_common_divisor(3, 5)); // Output: 1\nconsole.log(greatest_common_divisor(25, 15)); // Output: 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const numeralMap = new Map([\n    ['zero', 0],\n    ['one', 1],\n    ['two', 2],\n    ['three', 3],\n    ['four', 4],\n    ['five', 5],\n    ['six', 6],\n    ['seven', 7],\n    ['eight', 8],\n    ['nine', 9]\n]);\n\nconst sort_numbers = function (numbers: string): string {\n    // Split the input string into an array of words\n    const numArray = numbers.split(' ');\n    \n    // Map each word to its numerical value using the numeralMap\n    const numValues = numArray.map(num => numeralMap.get(num));\n    \n    // Sort the numerical values\n    numValues.sort((a, b) => a - b);\n    \n    // Convert the sorted numerical values back to words\n    const sortedWords = numValues.map(num => {\n        return Object.keys(numeralMap).find(key => numeralMap.get(key) === num);\n    });\n    \n    // Join the sorted words into a space-delimited string and return\n    return sortedWords.join(' ');\n};\n\n// Example usage:\nconsole.log(sort_numbers('three one five')); // Output: 'one three five'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two elements.\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range = max - min;\n\n    return numbers.map(num => (num - min) / range);\n};\n\n// Example usage:\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = (string0: string): string => {\n    return string0.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\n// Example usage:\nconsole.log(flip_case('Hello')); // Output: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(n => n > 0);\n};\n\n// Example usage:\nconsole.log(get_positive([-1, 2, -4, 5, 6])); // Output: [2, 5, 6]\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n\n    // Check divisibility by 2 and 3\n    if (n % 2 === 0 || n % 3 === 0) return false;\n\n    // Check for factors from 5 to the square root of n\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(is_prime(6)); // False\nconsole.log(is_prime(101)); // True\nconsole.log(is_prime(11)); // True\nconsole.log(is_prime(13441)); // True\nconsole.log(is_prime(61)); // True\nconsole.log(is_prime(4)); // False\nconsole.log(is_prime(1)); // False"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n    // Use a Set to filter out duplicates and then convert it back to an array\n    const uniqueSet = new Set(l);\n    // Convert the set back to an array and sort it\n    return Array.from(uniqueSet).sort((a, b) => a - b);\n};\n\n// Example usage:\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import * as math from 'mathjs';\n\n// Function to check if a number is prime\nconst isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n};\n\n// Function to find the n-th Fibonacci number that is prime\nconst prime_fib = function (n: number): number {\n  let fibNum = 0;\n  let count = 0;\n\n  while (count < n) {\n    fibNum++;\n    if (isPrime(math.fibonacci(fibNum))) {\n      count++;\n    }\n  }\n\n  return math.fibonacci(fibNum);\n};\n\n// Test cases\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    // Sort the array first\n    l.sort((a, b) => a - b);\n    \n    const n = l.length;\n    \n    // Iterate through the list\n    for (let i = 0; i < n - 2; i++) {\n        let left = i + 1;\n        let right = n - 1;\n        \n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            \n            if (sum === 0) {\n                return true; // Found a triplet that sums to zero\n            } else if (sum < 0) {\n                left++; // Move the left pointer rightward to increase the sum\n            } else {\n                right--; // Move the right pointer leftward to decrease the sum\n            }\n        }\n    }\n    \n    return false; // No triplet found that sums to zero\n};\n\n// Test cases\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    const seenNumbers = new Set<number>();\n    \n    for (let num of l) {\n        if (seenNumbers.has(-num)) {\n            return true;\n        }\n        seenNumbers.add(num);\n    }\n    \n    return false;\n};\n\n// Test cases\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Initialize the base values of the sequence\n    let a = 0, b = 0, c = 2, d = 0;\n\n    for (let i = 4; i <= n; i++) {\n        const nextFib = a + b + c + d;\n        // Update the values for the next iteration\n        a = b;\n        b = c;\n        c = d;\n        d = nextFib;\n    }\n\n    return d;\n};\n\n// Test cases\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n    // Step 1: Sort the array\n    l.sort((a, b) => a - b);\n\n    const len = l.length;\n    const midIndex = Math.floor(len / 2);\n\n    // If the length is odd, return the middle element\n    if (len % 2 !== 0) {\n        return l[midIndex];\n    } else {\n        // If the length is even, return the average of the two middle elements\n        const median1 = l[midIndex - 1];\n        const median2 = l[midIndex];\n        return (median1 + median2) / 2;\n    }\n};\n\n// Test cases\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15.0"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n    // Remove non-alphanumeric characters and convert to lowercase for a case-insensitive comparison\n    const cleanedText = text.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    \n    // Compare the cleaned text with its reverse\n    return cleanedText === cleanedText.split('').reverse().join('');\n};\n\n// Test cases\nconsole.log(is_palindrome(''));         // True\nconsole.log(is_palindrome('aba'));      // True\nconsole.log(is_palindrome('aaaaa'));    // True\nconsole.log(is_palindrome('zbcd'));     // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n    if (!text) return text; // If the input text is empty, return it immediately\n\n    const vowels = 'aeiouAEIOU';\n    return text.split('').filter(char => !vowels.includes(char)).join('');\n};\n\n// Test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number) : boolean  {\n    for (let num of l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// Test cases\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // True\nconsole.log(below_threshold([1, 20, 4, 10], 5)); // False"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n    // Helper function to sort and join characters of a string\n    const sortedString = (str: string) => str.split('').sort().join('');\n    \n    // Sort both strings and compare them\n    return sortedString(s0) === sortedString(s1);\n};\n\n// Test cases\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) return 0; // Return 0 for non-positive inputs as per standard Fibonacci sequence definition\n    if (n === 1 || n === 2) return 1; // The first two Fibonacci numbers are both 1\n\n    let a = 1, b = 1; // Initialize the first two Fibonacci numbers\n    for (let i = 3; i <= n; i++) {\n        const c = a + b; // Calculate the next number in the sequence\n        a = b; // Update variables to move forward in the sequence\n        b = c;\n    }\n    return b; // The last calculated value is the n-th Fibonacci number\n};\n\n// Test cases\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>): Array<number> {\n    // Convert both lists to sets to remove duplicates and enable efficient comparison\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    \n    // Find the intersection of the two sets\n    const intersectionSet = new Set([...set1].filter(x => set2.has(x)));\n    \n    // Convert the result back to an array and sort it (assuming you want a sorted output)\n    return Array.from(intersectionSet).sort((a, b) => a - b);\n};\n\n// Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    let maxPrime = -1;\n\n    // Check for smallest prime factors\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n /= 2;\n    }\n\n    // Check for odd factors from 3 onwards\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n\n    // If n is still greater than 2, then it must be prime\n    if (n > 2) {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n};\n\n// Test cases\nconsole.log(largest_prime_factor(13195)); // Output: 29\nconsole.log(largest_prime_factor(2048));  // Output: 2"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    return n * (n + 1) / 2;\n};\n\n// Test cases\nconsole.log(sum_to_n(30)); // 465\nconsole.log(sum_to_n(100)); // 5050\nconsole.log(sum_to_n(5)); // 15\nconsole.log(sum_to_n(10)); // 55\nconsole.log(sum_to_n(1)); // 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    // Initialize an array to store the derivatives of the coefficients\n    const derivateCoefficients: number[] = [];\n    \n    // Loop through the coefficients, starting from the second element\n    for (let i = 1; i < xs.length; i++) {\n        // Multiply each coefficient by its position (index + 1)\n        derivateCoefficients.push(xs[i] * i);\n    }\n    \n    return derivateCoefficients;\n};\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));        // [2, 6]"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Create an array to store the computed values\n    const dp: number[] = [0, 0, 1];\n\n    // Compute the sequence up to n using dynamic programming\n    for (let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    // Return the n-th element of the sequence\n    return dp[n];\n};\n\n// Test cases\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    const vowels = \"aeiouAEIOU\";\n    let count = 0;\n\n    for (let char of s) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n\n    return count;\n};\n\n// Example usage:\nconsole.log(vowels_count(\"abcde\")); // 2\nconsole.log(vowels_count(\"ACEDY\")); // 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n    // Create a map to store the frequency of each integer in the list\n    const frequencyMap = new Map<number, number>();\n\n    // Populate the frequency map\n    for (const num of lst) {\n        if (frequencyMap.has(num)) {\n            frequencyMap.set(num, frequencyMap.get(num)! + 1);\n        } else {\n            frequencyMap.set(num, 1);\n        }\n    }\n\n    // Initialize the result to -1 (default value if no valid integer is found)\n    let result = -1;\n\n    // Iterate through the map entries to find the greatest integer that meets the criteria\n    for (const [num, freq] of frequencyMap.entries()) {\n        if (num <= freq && freq >= num) {\n            if (num > result) {\n                result = num;\n            }\n        }\n    }\n\n    return result;\n};\n\n// Test cases\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    // Check if the sides form a valid triangle\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Round to 2 decimal places\n    return parseFloat(area.toFixed(2));\n};\n\n// Example usage:\nconsole.log(triangle_area(3, 4, 5)); // Output: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Output: -1"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number): boolean {\n    // Check if the list is a palindrome\n    const isPalindrome = (arr: Array<number>): boolean => {\n        for (let i = 0; i < arr.length / 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Calculate the sum of elements in the list\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Check if the list is a palindrome and if the sum is less than or equal to w\n    return isPalindrome(q) && sum <= w;\n};\n\n// Test cases\nconsole.log(will_it_fly([1, 2], 5)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 1)); // \u279e False\nconsole.log(will_it_fly([3, 2, 3], 9)); // \u279e True\nconsole.log(will_it_fly([3], 5)); // \u279e True"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_multiply_prime = function (a: number): boolean {\n    // Helper function to generate prime numbers less than 100 using Sieve of Eratosthenes\n    const generatePrimes = (limit: number) => {\n        const sieve = Array(limit).fill(true);\n        sieve[0] = sieve[1] = false;\n        for (let i = 2; i * i < limit; i++) {\n            if (sieve[i]) {\n                for (let j = i * i; j < limit; j += i) {\n                    sieve[j] = false;\n                }\n            }\n        }\n        return sieve.map((isPrime, num) => isPrime ? num : null).filter(num => num !== null);\n    };\n\n    const primes = generatePrimes(100);\n\n    // Check all combinations of three primes\n    for (let i = 0; i < primes.length; i++) {\n        for (let j = i; j < primes.length; j++) {\n            for (let k = j; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n};\n\n// Example usage:\nconsole.log(is_multiply_prime(30)); // True, because 30 = 2 * 3 * 5\nconsole.log(is_multiply_prime(60)); // False, no combination of primes less than 100 gives 60"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    // Convert the decimal number to a binary string\n    const binaryString = decimal.toString(2);\n    \n    // Add 'db' at the beginning and end of the binary string\n    return `db${binaryString}db`;\n};\n\n// Examples\nconsole.log(decimal_to_binary(15));   // returns \"db1111db\"\nconsole.log(decimal_to_binary(32));   // returns \"db100000db\""}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n    // Check if the length of the string is less than 3, return false immediately\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Iterate through the string up to the third last character\n    for (let i = 0; i <= s.length - 3; i++) {\n        // Extract a set of three consecutive characters\n        const triplet = s.substring(i, i + 3);\n        \n        // Check if all characters in the triplet are distinct\n        if (new Set(triplet).size !== 3) {\n            return false;\n        }\n    }\n\n    // If all triplets are distinct, return true\n    return true;\n};\n\n// Test cases\nconsole.log(is_happy(\"a\"));       // False\nconsole.log(is_happy(\"aa\"));      // False\nconsole.log(is_happy(\"abcd\"));    // True\nconsole.log(is_happy(\"aabb\"));    // False\nconsole.log(is_happy(\"adb\"));     // True\nconsole.log(is_happy(\"xyy\"));     // False"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        if (gpa > 3.7) return 'A';\n        if (gpa > 3.3) return 'A-';\n        if (gpa > 3.0) return 'B+';\n        if (gpa > 2.7) return 'B';\n        if (gpa > 2.3) return 'B-';\n        if (gpa > 2.0) return 'C+';\n        if (gpa > 1.7) return 'C';\n        if (gpa > 1.3) return 'C-';\n        if (gpa > 1.0) return 'D+';\n        if (gpa > 0.7) return 'D';\n        if (gpa > 0.0) return 'D-';\n        return 'E';\n    });\n};\n\n// Example usage:\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false; // Numbers less than or equal to 1 are not prime\n  if (num === 2) return true; // 2 is the only even prime number\n  if (num % 2 === 0) return false; // Other even numbers are not prime\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst prime_length = function (string0: string): boolean {\n  const length = string0.length;\n  return isPrime(length);\n};\n\n// Examples\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    // Convert the number to a binary string\n    const binaryString = N.toString(2);\n    \n    // Sum up all the digits in the binary string\n    let sumOfDigits = 0;\n    for (let char of binaryString) {\n        sumOfDigits += parseInt(char, 10);\n    }\n    \n    // Return the result as a string\n    return sumOfDigits.toString();\n};\n\n// Example usage:\nconsole.log(solve(1000)); // Output: \"1\"\nconsole.log(solve(150));  // Output: \"6\"\nconsole.log(solve(147));  // Output: \"12\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number): Array<[number, number]> {\n    // Initialize an empty array to store the coordinates\n    let result: Array<[number, number]> = [];\n\n    // Iterate through each row in the matrix\n    for (let i = 0; i < lst.length; i++) {\n        // Iterate through each element in the current row\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                // If the element matches `x`, add its coordinates to the result array\n                result.push([i, j]);\n            }\n        }\n    }\n\n    // Sort the result first by rows in ascending order, then by columns in descending order\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // If rows are the same, sort by columns in descending order\n        }\n        return a[0] - b[0]; // Otherwise, sort by rows in ascending order\n    });\n\n    return result;\n};\n\n// Examples:\nconsole.log(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1)); // Output: [(0, 5), (0, 0), (1, 4), (1, 0), (2, 0)]\nconsole.log(get_row([], 1)); // Output: []\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // Output: [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): number | null {\n    if (lst.length < 2) {\n        return null;\n    }\n\n    // Remove duplicates and sort the list\n    const uniqueSortedList = [...new Set(lst)].sort((a, b) => a - b);\n\n    if (uniqueSortedList.length < 2) {\n        return null;\n    }\n\n    return uniqueSortedList[1];\n};\n\n// Test cases\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // 2\nconsole.log(next_smallest([])); // null\nconsole.log(next_smallest([1, 1])); // null"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n    // Split the input string into sentences using ., ?, and ! as delimiters\n    const sentences = S.split(/[.?!]/);\n    \n    let boredomCount = 0;\n    \n    // Iterate over each sentence\n    for (const sentence of sentences) {\n        // Trim any leading or trailing whitespace from the sentence\n        const trimmedSentence = sentence.trim();\n        \n        // Check if the trimmed sentence starts with \"I\"\n        if (trimmedSentence.startsWith(\"I \")) {\n            boredomCount += 1;\n        }\n    }\n    \n    return boredomCount;\n};\n\n// Example usage:\nconsole.log(is_bored(\"Hello world\")); // Output: 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst sumOfDigits = (num: number): number => {\n    return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\nconst skjkasdkd = function (lst: Array<number>): number {\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) return -1; // Return -1 if no prime numbers are found\n    \n    const largestPrime = Math.max(...primes);\n    return sumOfDigits(largestPrime);\n};\n\n// Test cases\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    if (dict.size === 0) {\n        return false;\n    }\n\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key of dict.keys()) {\n        if (typeof key !== 'string') {\n            return false; // If any key is not a string, return false\n        }\n        if (key.toLowerCase() !== key) {\n            allLowerCase = false;\n        }\n        if (key.toUpperCase() !== key) {\n            allUpperCase = false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n};\n\n// Test cases\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"b\", \"banana\"]]))); // True\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [8, \"banana\"], [\"a\", \"apple\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]]))); // True"}
{"task_id": "typescript/42", "language": "typescript", "completion": "const closest_integer = function (value: string): number {\n    const num = parseFloat(value);\n    \n    // Check if the number is already an integer\n    if (Number.isInteger(num)) {\n        return num;\n    }\n    \n    // Find the two closest integers\n    const lowerInt = Math.floor(num);\n    const upperInt = Math.ceil(num);\n    \n    // Calculate distances from the original number\n    const distToLower = num - lowerInt;\n    const distToUpper = upperInt - num;\n    \n    // Decide which integer to return based on distance and sign\n    if (distToLower < distToUpper) {\n        return lowerInt;\n    } else if (distToLower > distToUpper) {\n        return upperInt;\n    } else {\n        // If equidistant, choose the one farthest from zero\n        return num > 0 ? upperInt : lowerInt;\n    }\n};\n\n// Examples\nconsole.log(closest_integer(\"10\"));      // 10\nconsole.log(closest_integer(\"15.3\"));    // 15\nconsole.log(closest_integer(\"-14.5\"));   // -15\nconsole.log(closest_integer(\"14.5\"));    // 15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    const pile: number[] = [];\n    let currentStones = n;\n    \n    for (let i = 0; i < n; i++) {\n        pile.push(currentStones);\n        if (n % 2 === 0) {\n            // If n is even, the next level should have an even number of stones\n            currentStones += 2;\n        } else {\n            // If n is odd, the next level should have an odd number of stones\n            currentStones += 2;\n        }\n    }\n    \n    return pile;\n};\n\n// Examples:\nconsole.log(make_a_pile(3)); // [3, 5, 7]\nconsole.log(make_a_pile(4)); // [4, 6, 8, 10]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n    // Use a regular expression to match spaces or commas followed by at least one word character\n    return s.split(/[\\s,]+/);\n};\n\n// Example usage:\nconsole.log(words_string(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    // Ensure x is less than or equal to y\n    if (x > y) return -1;\n\n    // Iterate from y down to x to find the biggest even number\n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1;\n};\n\n// Example usage:\nconsole.log(choose_num(12, 15)); // Output: 14\nconsole.log(choose_num(13, 12)); // Output: -1"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any {\n    if (n > m) {\n        return -1;\n    }\n\n    // Compute the sum of integers from n to m\n    const sum = ((m - n + 1) * (n + m)) / 2;\n    \n    // Calculate the average and round it to the nearest integer\n    const avg = Math.round(sum / (m - n + 1));\n    \n    // Convert the rounded average to binary string\n    return `0b${avg.toString(2)}`;\n};\n\n// Example usage:\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    const result: number[] = [];\n    \n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) {\n            // Calculate factorial of even numbers\n            let factorial = 1;\n            for (let j = 2; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            // Sum of numbers from 1 to odd numbers\n            const sum = (i + 1) * (i / 2);\n            result.push(sum);\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(f(5)); // Output: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): [number, number] {\n    let evens = 0;\n    let odds = 0;\n\n    // Helper function to check if a number is a palindrome\n    const isPalindrome = (num: number) => {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    };\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evens++;\n            } else {\n                odds++;\n            }\n        }\n    }\n\n    return [evens, odds];\n};\n\n// Example usage:\nconsole.log(even_odd_palindrome(3)); // Output: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Output: [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>): boolean {\n    if (arr.length === 0) return true;\n    \n    // Helper function to check if an array is sorted in non-decreasing order\n    const isSorted = (arr: Array<number>): boolean => {\n        for (let i = 1; i < arr.length; i++) {\n            if (arr[i] < arr[i - 1]) return false;\n        }\n        return true;\n    };\n    \n    // Generate all possible rotations and check if any is sorted\n    const n = arr.length;\n    for (let i = 0; i < n; i++) {\n        let rotatedArr = arr.slice(i).concat(arr.slice(0, i));\n        if (isSorted(rotatedArr)) return true;\n    }\n    \n    return false;\n};\n\n// Test cases\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False\nconsole.log(move_one_ball([])); // True"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n    // Helper function to check if a number is even\n    const isEven = (num: number) => num % 2 === 0;\n\n    // Identify odd numbers in lst1\n    let oddsInLst1 = lst1.filter(num => !isEven(num));\n\n    // If there are no odd numbers, return \"YES\" immediately\n    if (oddsInLst1.length === 0) {\n        return \"YES\";\n    }\n\n    // Check availability of even numbers in lst2 for each odd number in lst1\n    for (let odd of oddsInLst1) {\n        let canSwap = false;\n        for (let even of lst2) {\n            if (isEven(even)) {\n                canSwap = true;\n                break;\n            }\n        }\n        // If no even number was found to swap with, return \"NO\"\n        if (!canSwap) {\n            return \"NO\";\n        }\n    }\n\n    // If all odd numbers in lst1 have a corresponding even number in lst2, return \"YES\"\n    return \"YES\";\n};\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string): Array<any> {\n    // Create a set from characters in `c` for quick lookup\n    const charsToRemove = new Set(c);\n    \n    // Filter out the characters that are present in `charsToRemove`\n    let result = s.split('').filter(char => !charsToRemove.has(char)).join('');\n    \n    // Check if the resulting string is a palindrome\n    const isPalindrome = (str: string): boolean => {\n        return str === str.split('').reverse().join('');\n    };\n    \n    return [result, isPalindrome(result)];\n};\n\n// Example usage:\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverse_delete(\"abcdef\", \"b\"));  // Output: ['acdef', false]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number): number {\n    let totalWaterUnits = 0;\n    \n    // Calculate the total number of water units in the grid\n    for (let row of grid) {\n        for (let unit of row) {\n            if (unit === 1) {\n                totalWaterUnits++;\n            }\n        }\n    }\n    \n    // If there are no water units, return 0\n    if (totalWaterUnits === 0) {\n        return 0;\n    }\n    \n    // Calculate the number of times we need to use the bucket\n    const bucketsNeeded = Math.ceil(totalWaterUnits / capacity);\n    \n    return bucketsNeeded;\n};\n\n// Example usage:\nconsole.log(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)); // Output: 6\nconsole.log(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)); // Output: 5\nconsole.log(max_fill([[0, 0, 0], [0, 0, 0]], 5)); // Output: 0"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function (s: string, n: number): Array<string> {\n    if (!s) return []; // Return an empty list if the input string is empty\n\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    \n    const hasExactlyNC consonants = (word: string, n: number): boolean => {\n        let consonantCount = 0;\n        for (const char of word) {\n            if (!vowels.has(char.toLowerCase())) {\n                consonantCount++;\n            }\n        }\n        return consonantCount === n;\n    };\n\n    const words = s.split(' ');\n    const result: string[] = [];\n\n    for (const word of words) {\n        if (word.length > 0 && hasExactlyNC(word, n)) {\n            result.push(word);\n        }\n    }\n\n    return result;\n};\n\n// Examples\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Sort the array in descending order to get the largest numbers first\n    arr.sort((a, b) => b - a);\n    \n    // Return the first k elements from the sorted array\n    return arr.slice(0, k).sort((a, b) => a - b);\n};\n\n// Example 1\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\n\n// Example 2\nconsole.log(maximum([4, -4, 4], 2)); // Output: [4, 4]\n\n// Example 3\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n};\n\n// Example usage:\nconst result = add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4);\nconsole.log(result); // Output: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  if (num === 2) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst intersection = function (interval1: Array<number>, interval2: Array<number>): string {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  // Find the start and end of the intersection\n  const intersectionStart = Math.max(start1, start2);\n  const intersectionEnd = Math.min(end1, end2);\n\n  // Check if there is an intersection\n  if (intersectionStart > intersectionEnd) {\n    return \"NO\";\n  }\n\n  // Calculate the length of the intersection\n  const intersectionLength = intersectionEnd - intersectionStart + 1;\n\n  // Check if the length is a prime number\n  if (isPrime(intersectionLength)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n// Example usage:\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n    // Base case for n = 0 and n = 1\n    if (n === 0) return [1];\n    if (n === 1) return [1, 3];\n\n    // Initialize the sequence with known values\n    const seq: number[] = [1, 3];\n\n    // Calculate the sequence for n >= 2\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(1 + i / 2);\n        } else {\n            const prevIndex1 = i - 1;\n            const prevIndex2 = i - 2;\n            const nextIndex = i + 1;\n            seq.push(seq[prevIndex1] + seq[prevIndex2] + tri(nextIndex)[0]);\n        }\n    }\n\n    return seq;\n};\n\n// Example usage:\nconsole.log(tri(3)); // Output: [1, 3, 2, 8]"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n    // Convert the number to a string to iterate over its digits\n    const numStr = n.toString();\n    \n    // Filter out the odd digits\n    let oddDigits = [];\n    for (let char of numStr) {\n        if ((parseInt(char, 10) % 2 !== 0)) {\n            oddDigits.push(parseInt(char, 10));\n        }\n    }\n    \n    // If there are no odd digits, return 0\n    if (oddDigits.length === 0) {\n        return 0;\n    }\n    \n    // Calculate the product of the odd digits\n    let product = 1;\n    for (let digit of oddDigits) {\n        product *= digit;\n    }\n    \n    return product;\n};\n\n// Test cases\nconsole.log(digits(1));   // Output: 1\nconsole.log(digits(4));   // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n    // Initialize a stack to keep track of the opening brackets\n    const stack = [];\n    \n    // Iterate through each character in the string\n    for (let char of string0) {\n        if (char === '[') {\n            // Push opening bracket onto the stack\n            stack.push(char);\n        } else if (char === ']') {\n            // If a closing bracket is found, check if there's a corresponding opening bracket in the stack\n            if (stack.length > 0) {\n                // Pop the last opening bracket from the stack\n                stack.pop();\n            } else {\n                // If no matching opening bracket is found, return false\n                return false;\n            }\n        }\n    }\n    \n    // If there are any remaining opening brackets in the stack after processing the string,\n    // it means there are unmatched opening brackets, so return false\n    if (stack.length > 0) {\n        return false;\n    }\n    \n    // If at least one nested bracket is found, return true, otherwise return false\n    return true;\n};\n\n// Test cases\nconsole.log(is_nested('[[]]')); // True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // False\nconsole.log(is_nested('[][]')); // False\nconsole.log(is_nested('[]')); // False\nconsole.log(is_nested('[[][]]')); // True\nconsole.log(is_nested('[[]][[')); // True"}
{"task_id": "typescript/60", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst sum_squares = function (lst: Array<number>): number {\n    // Round each element to the nearest integer using ceiling operation\n    const roundedList = lst.map(num => math.ceil(num));\n    \n    // Square each of the rounded numbers\n    const squaredList = roundedList.map(num => num * num);\n    \n    // Sum all the squared numbers\n    const sumSquares = squaredList.reduce((sum, num) => sum + num, 0);\n    \n    return sumSquares;\n};\n\n// Test cases\nconsole.log(sum_squares([1, 2, 3])); // Output: 14\nconsole.log(sum_squares([1, 4, 9])); // Output: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Output: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Output: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Output: 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n    // Check if the string is empty or consists only of spaces\n    if (txt.length === 0 || txt.trim().length === 0) {\n        return false;\n    }\n    \n    // Get the last character of the string\n    const lastChar = txt[txt.length - 1];\n    \n    // Check if the last character is an alphabetical character and not part of a word\n    return /^[a-zA-Z]$/.test(lastChar) && !/\\s/.test(lastChar);\n};\n\n// Test cases\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n// Test cases\nconsole.log(can_arrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(can_arrange([1, 2, 3])); // Output: -1"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): [any, any] {\n    let negativeLargest: number | null = null;\n    let positiveSmallest: number | null = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (negativeLargest === null || num > negativeLargest) {\n                negativeLargest = num;\n            }\n        } else if (num > 0) {\n            if (positiveSmallest === null || num < positiveSmallest) {\n                positiveSmallest = num;\n            }\n        }\n    }\n\n    return [negativeLargest, positiveSmallest];\n};\n\n// Examples:\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largest_smallest_integers([])); // [null, null]\nconsole.log(largest_smallest_integers([0])); // [null, null]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "function factorial(num: number): number {\n    if (num === 0 || num === 1) return 1;\n    let result = 1;\n    for (let i = 2; i <= num; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nfunction special_factorial(n: number): number {\n    if (n <= 0) throw new Error(\"Input must be a positive integer.\");\n    \n    let product = 1;\n    for (let i = n; i > 0; i--) {\n        product *= factorial(i);\n    }\n    return product;\n}\n\n// Example usage:\nconsole.log(special_factorial(4)); // Output: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst words_in_sentence = function (sentence: string): string {\n  const words = sentence.split(' ');\n  const primeWords = words.filter(word => isPrime(word.length));\n  return primeWords.join(' ');\n};\n\n// Example usage:\nconsole.log(words_in_sentence(\"This is a test\")); // Output: \"is\"\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string): boolean {\n    // Helper function to parse the fraction string into numerator and denominator\n    const parseFraction = (fraction: string) => {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return { numerator, denominator };\n    };\n\n    // Parse the fractions\n    const xFrac = parseFraction(x);\n    const nFrac = parseFraction(n);\n\n    // Convert to floating-point numbers\n    const floatX = xFrac.numerator / xFrac.denominator;\n    const floatN = nFrac.numerator / nFrac.denominator;\n\n    // Multiply the two fractions\n    const result = floatX * floatN;\n\n    // Check if the result is a whole number\n    return Number.isInteger(result);\n};\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const order_by_points = function (nums: Array<number>): Array<number> {\n    return nums.sort((a, b) => {\n        const sumDigits = (num: number) => Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n        \n        const sumA = sumDigits(a);\n        const sumB = sumDigits(b);\n        \n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        } else {\n            return sumA - sumB;\n        }\n    });\n};\n\n// Example usage:\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // Output: []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    // Helper function to check if a digit is odd\n    const isOddDigit = (digit: number) => [1, 3, 5, 7, 9].includes(Math.abs(digit));\n\n    // Helper function to get the first digit of a number\n    const firstDigit = (num: number) => {\n        let n = Math.abs(num);\n        while (n >= 10) {\n            n /= 10;\n        }\n        return n % 10;\n    };\n\n    // Helper function to get the last digit of a number\n    const lastDigit = (num: number) => Math.abs(num) % 10;\n\n    // Filter and count numbers that are greater than 10, and have both first and last digits as odd\n    return nums.filter(num => {\n        let first = firstDigit(num);\n        let last = lastDigit(num);\n        return num > 10 && isOddDigit(first) && isOddDigit(last);\n    }).length;\n};\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n    // Step 1: Generate the array `a`\n    const a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    let count = 0;\n\n    // Step 2: Iterate through all possible triples (i, j, k) where i < j < k\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    // Step 3: Return the count of valid triples\n    return count;\n};\n\n// Example usage:\nconsole.log(get_max_triples(5)); // Output: 1"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const bf = function (planet1: string, planet2: string): Array<string> {\n    const planetsOrder: { [key: string]: number } = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    };\n\n    if (!(planet1 in planetsOrder) || !(planet2 in planetsOrder)) {\n        return [];\n    }\n\n    const start = Math.min(planetsOrder[planet1], planetsOrder[planet2]);\n    const end = Math.max(planetsOrder[planet1], planetsOrder[planet2]);\n\n    const result: string[] = [];\n    for (const planet in planetsOrder) {\n        if (planetsOrder[planet] > start && planetsOrder[planet] < end) {\n            result.push(planet);\n        }\n    }\n\n    return result;\n};\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const x_or_y = function (n: number, x: number, y: number): number {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n};\n\nfunction isPrime(num: number): boolean {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 === 0 || num % 3 === 0) return false;\n\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n\n    return true;\n}\n\n// Examples:\nconsole.log(x_or_y(7, 34, 12)); // Output: 34\nconsole.log(x_or_y(15, 8, 5));  // Output: 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    // Filter the list to include only odd numbers and non-negative integers\n    const filteredList = lst.filter(num => Number.isInteger(num) && num >= 0 && num % 2 !== 0);\n    \n    // Calculate the sum of squares of the filtered list\n    const sumOfSquares = filteredList.reduce((sum, num) => sum + Math.pow(num, 2), 0);\n    \n    return sumOfSquares;\n};\n\n// Test cases\nconsole.log(double_the_difference([1, 3, 2, 0])); // 10\nconsole.log(double_the_difference([-1, -2, 0])); // 0\nconsole.log(double_the_difference([9, -2])); // 81\nconsole.log(double_the_difference([0])); // 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n    let strongestExtension = null;\n    let maxStrength = -Infinity;\n\n    for (const extension of extensions) {\n        let CAP = 0;\n        let SM = 0;\n\n        for (const char of extension) {\n            if (char >= 'A' && char <= 'Z') {\n                CAP++;\n            } else if (char >= 'a' && char <= 'z') {\n                SM++;\n            }\n        }\n\n        const strength = CAP - SM;\n\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = extension;\n        }\n    }\n\n    return `${class_name}.${strongestExtension}`;\n};\n\n// Example usage:\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // Output: 'my_class.AA'\nconsole.log(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: 'Slices.SErviNGSliCes'"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n    // Function to generate all rotations of a given string\n    const getRotations = (str: string): string[] => {\n        let rotations = [];\n        for (let i = 0; i < str.length; i++) {\n            let rotation = str.slice(i) + str.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    };\n\n    // Generate all rotations of the second word\n    const rotations = getRotations(b);\n\n    // Check if any rotation is a substring of the first word\n    for (let rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// Test cases\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number: number): string {\n    if (number < 1 || number > 1000) {\n        throw new Error(\"Number must be between 1 and 1000\");\n    }\n\n    const romanNumerals: [number, string][] = [\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i']\n    ];\n\n    let result = '';\n    for (const [value, symbol] of romanNumerals) {\n        while (number >= value) {\n            number -= value;\n            result += symbol.toLowerCase();\n        }\n    }\n\n    return result;\n};\n\n// Examples:\nconsole.log(int_to_mini_roman(19)); // 'xix'\nconsole.log(int_to_mini_roman(152)); // 'clii'\nconsole.log(int_to_mini_roman(426)); // 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // First, identify the longest side, which will be our hypotenuse candidate\n    const sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Apply the Pythagorean theorem\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};\n\n// Test cases\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n    // Check if the string contains any letters\n    const hasLetters = /[a-zA-Z]/.test(s);\n    \n    if (!hasLetters) {\n        return s.split('').reverse().join('');\n    }\n\n    // Iterate through each character in the string\n    let result = '';\n    for (let char of s) {\n        if (/[a-z]/.test(char)) {\n            result += char.toUpperCase();\n        } else if (/[A-Z]/.test(char)) {\n            result += char.toLowerCase();\n        } else {\n            result += char;\n        }\n    }\n    \n    return result;\n};\n\n// Examples\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\"));   // \"AB\"\nconsole.log(solve(\"#a@C\"));  // \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import crypto from 'crypto';\n\nconst string_to_md5 = function (text: string): any {\n    if (!text) return null;\n    const hash = crypto.createHash('md5');\n    hash.update(text);\n    return hash.digest('hex');\n};\n\n// Example usage:\nconsole.log(string_to_md5('Hello world')); // Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n    // Ensure that `a` is less than or equal to `b`\n    const start = Math.min(a, b);\n    const end = Math.max(a, b);\n    \n    // Initialize an empty array to store the even digits\n    const result: number[] = [];\n    \n    // Iterate through the range from `start` to `end`\n    for (let i = start; i <= end; i++) {\n        // Check if the current number is even\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    \n    return result;\n};\n\n// Example usage:\nconsole.log(generate_integers(2, 8)); // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2)); // Output: [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // Output: []"}

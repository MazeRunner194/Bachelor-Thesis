{"task_id": "kotlin/0", "language": "kotlin", "completion": "fun belowZero(operations: List<Any>): Boolean {\n    var balance = 0\n    \n    for (operation in operations) {\n        when (operation) {\n            is Int -> {\n                balance += operation\n                if (balance < 0) return true\n            }\n            else -> throw IllegalArgumentException(\"Unsupported operation type\")\n        }\n    }\n    \n    return false\n}"}
{"task_id": "kotlin/1", "language": "kotlin", "completion": "fun sumProduct(numbers: List<Int>): Pair<Int, Int> {\n    if (numbers.isEmpty()) {\n        return Pair(0, 1)\n    }\n    \n    var sum = 0\n    var product = 1\n    \n    for (number in numbers) {\n        sum += number\n        product *= number\n    }\n    \n    return Pair(sum, product)\n}\n\n// Example usage:\nfun main() {\n    println(sumProduct(listOf())) // Output: (0, 1)\n    println(sumProduct(listOf(1, 2, 3, 4))) // Output: (10, 24)\n}"}
{"task_id": "kotlin/2", "language": "kotlin", "completion": "fun stringXor(a : String, b : String) : String {\n    // Ensure both strings are of the same length\n    val maxLength = a.length.coerceAtLeast(b.length)\n    val paddedA = a.padStart(maxLength, '0')\n    val paddedB = b.padStart(maxLength, '0')\n    \n    // Perform XOR operation and build the result string\n    val result = StringBuilder()\n    for (i in 0 until maxLength) {\n        val charA = paddedA[i]\n        val charB = paddedB[i]\n        if (charA != charB) {\n            result.append('1')\n        } else {\n            result.append('0')\n        }\n    }\n    \n    return result.toString()\n}\n\n// Example usage:\nfun main() {\n    val a = \"010\"\n    val b = \"110\"\n    println(stringXor(a, b)) // Output: '100'\n}"}
{"task_id": "kotlin/3", "language": "kotlin", "completion": "fun longest(strings: List<Any>): String? {\n    if (strings.isEmpty()) return null\n    \n    var longestString: String? = null\n    \n    for (string in strings) {\n        if (string is String && (longestString == null || string.length > longestString!!.length)) {\n            longestString = string as String\n        }\n    }\n    \n    return longestString\n}"}
{"task_id": "kotlin/4", "language": "kotlin", "completion": "fun greatestCommonDivisor(a: Int, b: Int): Int {\n    var x = a\n    var y = b\n    \n    while (y != 0) {\n        val temp = y\n        y = x % y\n        x = temp\n    }\n    \n    return x\n}\n\n// Test cases\nfun main() {\n    println(greatestCommonDivisor(3, 5)) // Output: 1\n    println(greatestCommonDivisor(25, 15)) // Output: 5\n}"}
{"task_id": "kotlin/5", "language": "kotlin", "completion": "fun sortNumbers(numbers: String): String {\n    // Define a map from number words to their numerical values\n    val numberMap = mapOf(\n        \"zero\" to 0,\n        \"one\" to 1,\n        \"two\" to 2,\n        \"three\" to 3,\n        \"four\" to 4,\n        \"five\" to 5,\n        \"six\" to 6,\n        \"seven\" to 7,\n        \"eight\" to 8,\n        \"nine\" to 9\n    )\n\n    // Split the input string into a list of number words\n    val numberWords = numbers.split(\" \")\n\n    // Map each word to its numerical value and sort by the values\n    val sortedNumbers = numberWords.map { numberMap[it] }.sorted()\n\n    // Convert the sorted numerical values back to their corresponding words\n    val sortedWords = sortedNumbers.map { entry ->\n        numberMap.entries.find { it.value == entry }?.key ?: \"\"\n    }\n\n    // Join the sorted words into a space-delimited string and return\n    return sortedWords.joinToString(\" \")\n}\n\n// Example usage\nfun main() {\n    val result = sortNumbers(\"three one five\")\n    println(result)  // Output: \"one three five\"\n}"}
{"task_id": "kotlin/6", "language": "kotlin", "completion": "fun rescaleToUnit(numbers: List<Double>): List<Double> {\n    if (numbers.isEmpty()) throw IllegalArgumentException(\"List cannot be empty\")\n    \n    val min = numbers.minOrNull() ?: 0.0 // Handle possible null with safe call and default to 0.0\n    val max = numbers.maxOrNull() ?: 0.0 // Same here, handle null with safe call\n    \n    return numbers.map { (it - min) / (max - min) }\n}\n\n// Example usage\nfun main() {\n    val numbers = listOf(1.0, 2.0, 3.0, 4.0, 5.0)\n    val rescaledNumbers = rescaleToUnit(numbers)\n    println(rescaledNumbers) // Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n}"}
{"task_id": "kotlin/7", "language": "kotlin", "completion": "fun flipCase(string: String): String {\n    return string.map { char ->\n        if (char.isLowerCase()) {\n            char.toUpperCase()\n        } else {\n            char.toLowerCase()\n        }\n    }.joinToString(\"\")\n}\n\n// Example usage:\nfun main() {\n    println(flipCase(\"Hello\")) // Output: hELLO\n}"}
{"task_id": "kotlin/8", "language": "kotlin", "completion": "fun getPositive(l: List<Any>): List<Any> {\n    return l.filterIsInstance<Number>().filter { it.toDouble() > 0 }.map { it }\n}\n\n// Test cases\nfun main() {\n    println(getPositive(listOf(-1, 2, -4, 5, 6))) // [2, 5, 6]\n    println(getPositive(listOf(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))) // [5, 3, 2, 3, 9, 123, 1]\n}"}
{"task_id": "kotlin/9", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    // Check for numbers less than 2 (including negative numbers)\n    if (n <= 1) return false\n    \n    // Check for divisibility by 2 and odd numbers up to the square root of n\n    if (n == 2 || n == 3) return true // 2 and 3 are prime numbers\n    if (n % 2 == 0 || n % 3 == 0) return false // Eliminate even numbers and multiples of 3\n    \n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    \n    return true\n}\n\n// Test cases\nfun main() {\n    println(isPrime(6)) // False\n    println(isPrime(101)) // True\n    println(isPrime(11)) // True\n    println(isPrime(13441)) // True\n    println(isPrime(61)) // True\n    println(isPrime(4)) // False\n    println(isPrime(1)) // False\n}"}
{"task_id": "kotlin/10", "language": "kotlin", "completion": "fun unique(l: List<Int>): List<Int> {\n    return l.toSet().sorted()\n}\n\n// Example usage\nfun main() {\n    val result = unique(listOf(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    println(result) // Output: [0, 2, 3, 5, 9, 123]\n}"}
{"task_id": "kotlin/11", "language": "kotlin", "completion": "fun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num == 2) return true\n    if (num % 2 == 0) return false\n    for (i in 3..Math.sqrt(num.toDouble()).toInt() step 2) {\n        if (num % i == 0) return false\n    }\n    return true\n}\n\nfun primeFib(n: Int): Int {\n    var count = 0\n    var a = 0\n    var b = 1\n    \n    while (true) {\n        val fib = a + b\n        if (isPrime(fib)) {\n            count++\n            if (count == n) {\n                return fib\n            }\n        }\n        a = b\n        b = fib\n    }\n}\n\n// Test cases\nfun main() {\n    println(primeFib(1)) // 2\n    println(primeFib(2)) // 3\n    println(primeFib(3)) // 5\n    println(primeFib(4)) // 13\n    println(primeFib(5)) // 89\n}"}
{"task_id": "kotlin/12", "language": "kotlin", "completion": "fun triplesSumToZero(l: List<Int>): Boolean {\n    // Sort the list first\n    val sortedList = l.sorted()\n    \n    // Iterate through the list, fixing one element at a time\n    for (i in 0 until sortedList.size - 2) {\n        // Avoid duplicates by skipping same elements\n        if (i > 0 && sortedList[i] == sortedList[i - 1]) continue\n        \n        var left = i + 1\n        var right = sortedList.size - 1\n        \n        while (left < right) {\n            val sum = sortedList[i] + sortedList[left] + sortedList[right]\n            \n            when {\n                sum == 0 -> return true\n                sum < 0 -> left++\n                else -> right--\n            }\n        }\n    }\n    \n    return false\n}\n\n// Test cases\nfun main() {\n    println(triplesSumToZero(listOf(1, 3, 5, 0))) // False\n    println(triplesSumToZero(listOf(1, 3, -2, 1))) // True\n    println(triplesSumToZero(listOf(1, 2, 3, 7))) // False\n    println(triplesSumToZero(listOf(2, 4, -5, 3, 9, 7))) // True\n    println(triplesSumToZero(listOf(1))) // False\n}"}
{"task_id": "kotlin/13", "language": "kotlin", "completion": "fun pairsSumToZero(l: List<Int>): Boolean {\n    // Create a set to store the complements of the elements we have seen so far.\n    val seen = mutableSetOf<Int>()\n    \n    for (num in l) {\n        if (seen.contains(-num)) {\n            return true\n        }\n        seen.add(num)\n    }\n    \n    return false\n}\n\n// Test cases\nfun main() {\n    println(pairsSumToZero(listOf(1, 3, 5, 0))) // False\n    println(pairsSumToZero(listOf(1, 3, -2, 1))) // False\n    println(pairsSumToZero(listOf(1, 2, 3, 7))) // False\n    println(pairsSumToZero(listOf(2, 4, -5, 3, 5, 7))) // True\n    println(pairsSumToZero(listOf(1))) // False\n}"}
{"task_id": "kotlin/14", "language": "kotlin", "completion": "fun fib4(n: Int): Int {\n    if (n < 0) throw IllegalArgumentException(\"Input must be non-negative\")\n    if (n == 0 || n == 1) return 0\n    if (n == 2) return 2\n    if (n == 3) return 0\n\n    // Initialize the base cases\n    val fib4Sequence = mutableListOf(0, 0, 2, 0)\n\n    // Compute the sequence iteratively up to n\n    for (i in 4..n) {\n        val nextValue = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4]\n        fib4Sequence.add(nextValue)\n    }\n\n    return fib4Sequence[n]\n}\n\n// Test the function\nfun main() {\n    println(fib4(5)) // Output: 4\n    println(fib4(6)) // Output: 8\n    println(fib4(7)) // Output: 14\n}"}
{"task_id": "kotlin/15", "language": "kotlin", "completion": "fun median(l: List<Int>): Any {\n    // First, sort the list\n    val sortedList = l.sorted()\n    \n    val size = sortedList.size\n    return if (size % 2 == 1) {\n        // If the size is odd, return the middle element\n        sortedList[size / 2]\n    } else {\n        // If the size is even, return the average of the two middle elements\n        val mid1 = sortedList[size / 2 - 1]\n        val mid2 = sortedList[size / 2]\n        (mid1 + mid2) / 2.0\n    }\n}\n\n// Test cases\nfun main() {\n    println(median(listOf(3, 1, 2, 4, 5))) // Output: 3\n    println(median(listOf(-10, 4, 6, 1000, 10, 20))) // Output: 15.0\n}"}
{"task_id": "kotlin/16", "language": "kotlin", "completion": "fun isPalindrome(text: String): Boolean {\n    // Remove spaces and convert to lowercase for case-insensitive comparison\n    val cleanedText = text.filter { it.isLetterOrDigit() }.toLowerCase()\n    \n    // Check if the cleaned text is a palindrome\n    return cleanedText == cleanedText.reversed()\n}\n\n// Test cases\nfun main() {\n    println(isPalindrome(\"\"))       // True\n    println(isPalindrome(\"aba\"))    // True\n    println(isPalindrome(\"aaaaa\"))  // True\n    println(isPalindrome(\"zbcd\"))   // False\n}"}
{"task_id": "kotlin/17", "language": "kotlin", "completion": "fun removeVowels(text: String): String {\n    val vowels = \"aeiouAEIOU\"\n    return text.filter { it !in vowels }\n}\n\n// Test cases\nfun main() {\n    println(removeVowels(\"\")) // ''\n    println(removeVowels(\"abcdef\\nghijklm\")) // 'bcdf\\nghjklm'\n    println(removeVowels('abcdef')) // 'bcdf'\n    println(removeVowels('aaaaa')) // ''\n    println(removeVowels('aaBAA')) // 'B'\n    println(removeVowels('zbcd')) // 'zbcd'\n}"}
{"task_id": "kotlin/18", "language": "kotlin", "completion": "fun belowThreshold(l: List<Int>, t: Int): Boolean {\n    return l.all { it < t }\n}\n\n// Test cases\nfun main() {\n    println(belowThreshold(listOf(1, 2, 4, 10), 100)) // True\n    println(belowThreshold(listOf(1, 20, 4, 10), 5))   // False\n}"}
{"task_id": "kotlin/19", "language": "kotlin", "completion": "fun add(x: Int, y: Int): Int {\n    return x + y\n}"}
{"task_id": "kotlin/20", "language": "kotlin", "completion": "fun sameChars(s0: String, s1: String): Boolean {\n    // Check if lengths are different, return false immediately if they are\n    if (s0.length != s1.length) {\n        return false\n    }\n    \n    // Convert strings to char arrays and sort them\n    val sortedS0 = s0.toCharArray().sorted()\n    val sortedS1 = s1.toCharArray().sorted()\n    \n    // Compare the sorted arrays\n    for (i in sortedS0.indices) {\n        if (sortedS0[i] != sortedS1[i]) {\n            return false\n        }\n    }\n    \n    return true\n}\n\n// Test cases\nfun main() {\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")) // True\n    println(sameChars(\"abcd\", \"dddddddabc\")) // True\n    println(sameChars(\"dddddddabc\", \"abcd\")) // True\n    println(sameChars(\"eabcd\", \"dddddddabc\")) // False\n    println(sameChars(\"abcd\", \"dddddddabce\")) // False\n    println(sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")) // False\n}"}
{"task_id": "kotlin/21", "language": "kotlin", "completion": "fun fib(n: Int): Int {\n    if (n <= 0) return 0 // Return 0 for non-positive inputs\n    if (n == 1) return 1 // Base case for the first Fibonacci number\n    return fib(n - 1) + fib(n - 2) // Recursive call to get the n-th Fibonacci number\n}"}
{"task_id": "kotlin/22", "language": "kotlin", "completion": "fun common(l1: List<Int>, l2: List<Int>): List<Int> {\n    // Convert both lists to sets to remove duplicates\n    val set1 = l1.toSet()\n    val set2 = l2.toSet()\n    \n    // Find the intersection of the two sets\n    val commonElements = set1.intersect(set2)\n    \n    // Convert the result back to a sorted list and return it\n    return commonElements.sorted()\n}\n\n// Test cases\nfun main() {\n    println(common(listOf(1, 4, 3, 34, 653, 2, 5), listOf(5, 7, 1, 5, 9, 653, 121))) // [1, 5, 653]\n    println(common(listOf(5, 3, 2, 8), listOf(3, 2))) // [2, 3]\n}"}
{"task_id": "kotlin/23", "language": "kotlin", "completion": "fun largestPrimeFactor(n: Int): Int {\n    var num = n\n    var factor = 2\n    var maxFactor = 1\n\n    while (factor * factor <= num) {\n        if (num % factor == 0) {\n            maxFactor = factor\n            num /= factor\n            // Continue dividing by the same factor to remove all occurrences of this factor\n            while (num % factor == 0) {\n                num /= factor\n            }\n        }\n        factor++\n    }\n\n    // If there is a remaining prime number greater than 1, it must be a prime factor itself\n    if (num > 1) {\n        maxFactor = num\n    }\n\n    return maxFactor\n}\n\n// Test cases\nfun main() {\n    println(largestPrimeFactor(13195)) // Output: 29\n    println(largestPrimeFactor(2048))   // Output: 2\n}"}
{"task_id": "kotlin/24", "language": "kotlin", "completion": "fun sumToN(n: Int): Int {\n    return n * (n + 1) / 2\n}\n\n// Test cases\nfun main() {\n    println(sumToN(30)) // 465\n    println(sumToN(100)) // 5050\n    println(sumToN(5)) // 15\n    println(sumToN(10)) // 55\n    println(sumToN(1)) // 1\n}"}
{"task_id": "kotlin/25", "language": "kotlin", "completion": "fun derivative(xs: List<Int>): List<Int> {\n    // If the input list has fewer than 2 elements, the derivative will be an empty list\n    if (xs.size < 2) return emptyList()\n    \n    // Initialize a result list with the size of xs - 1\n    val result = mutableListOf<Int>()\n    \n    // Compute the derivative by shifting and scaling each coefficient\n    for (i in 1 until xs.size) {\n        result.add(xs[i] * i)\n    }\n    \n    return result\n}\n\n// Test cases\nfun main() {\n    println(derivative(listOf(3, 1, 2, 4, 5))) // Output: [1, 4, 12, 20]\n    println(derivative(listOf(1, 2, 3)))       // Output: [2, 6]\n}"}
{"task_id": "kotlin/26", "language": "kotlin", "completion": "fun fibfib(n: Int): Int {\n    if (n == 0) return 0\n    if (n == 1) return 0\n    if (n == 2) return 1\n\n    // Create an array to store the computed values of the sequence\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 1\n\n    // Compute each value in the sequence using the given recurrence relation\n    for (i in 3..n) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    }\n\n    // Return the n-th element of the sequence\n    return dp[n]\n}\n\n// Test cases\nfun main() {\n    println(fibfib(1)) // Output: 0\n    println(fibfib(5)) // Output: 4\n    println(fibfib(8)) // Output: 24\n}"}
{"task_id": "kotlin/27", "language": "kotlin", "completion": "fun vowelsCount(s: String): Int {\n    val vowels = \"aeiouAEIOU\"\n    var count = 0\n    \n    for (char in s) {\n        if (vowels.contains(char)) {\n            count++\n        }\n    }\n    \n    // Check the last character for 'y' being a vowel\n    if (s.isNotEmpty() && s.last().toLowerCase() == 'y') {\n        count++\n    }\n    \n    return count\n}\n\n// Example usage:\nfun main() {\n    println(vowelsCount(\"abcde\")) // Output: 2\n    println(vowelsCount(\"ACEDY\")) // Output: 3\n}"}
{"task_id": "kotlin/28", "language": "kotlin", "completion": "fun search(lst: List<Int>): Int {\n    // Create a map to store the frequency of each number\n    val frequencyMap = mutableMapOf<Int, Int>()\n    \n    // Populate the frequency map\n    for (num in lst) {\n        frequencyMap[num] = frequencyMap.getOrDefault(num, 0) + 1\n    }\n    \n    // Variable to track the greatest integer that satisfies the condition\n    var result = -1\n    \n    // Iterate through the map to find the greatest integer with the required property\n    for ((key, value) in frequencyMap) {\n        if (key <= value && key > result) {\n            result = key\n        }\n    }\n    \n    return result\n}\n\n// Test cases\nfun main() {\n    println(search(listOf(4, 1, 2, 2, 3, 1))) // Output: 2\n    println(search(listOf(1, 2, 2, 3, 3, 3, 4, 4, 4))) // Output: 3\n    println(search(listOf(5, 5, 4, 4, 4))) // Output: -1\n}"}
{"task_id": "kotlin/29", "language": "kotlin", "completion": "import kotlin.math.*\n\nfun triangleArea(a: Int, b: Int, c: Int): Any {\n    // Check if the sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the semi-perimeter\n        val s = (a + b + c) / 2.0\n        \n        // Calculate the area using Heron's formula\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        // Return the area rounded to 2 decimal places\n        return \"%.2f\".format(area).toDouble()\n    } else {\n        // If not a valid triangle, return -1\n        return -1\n    }\n}\n\n// Example usage:\nfun main() {\n    println(triangleArea(3, 4, 5)) // Output: 6.00\n    println(triangleArea(1, 2, 10)) // Output: -1\n}"}
{"task_id": "kotlin/30", "language": "kotlin", "completion": "fun willItFly(q: List<Int>, w: Int): Boolean {\n    // Check if the list is a palindrome\n    val isPalindrome = q == q.reversed()\n    \n    // Calculate the sum of the elements in the list\n    val sumOfElements = q.sum()\n    \n    // Return true if both conditions are satisfied, otherwise false\n    return isPalindrome && sumOfElements <= w\n}\n\n// Test cases\nfun main() {\n    println(willItFly(listOf(1, 2), 5)) // False\n    println(willItFly(listOf(3, 2, 3), 1)) // False\n    println(willItFly(listOf(3, 2, 3), 9)) // True\n    println(willItFly(listOf(3), 5)) // True\n}"}
{"task_id": "kotlin/31", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}"}
{"task_id": "kotlin/32", "language": "kotlin", "completion": "fun decimalToBinary(decimal: Int): String {\n    // Convert the decimal number to binary\n    val binaryString = Integer.toBinaryString(decimal)\n    \n    // Add 'db' at the beginning and end of the string\n    return \"db$binaryString\" + \"db\".reversed()\n}\n\n// Test cases\nfun main() {\n    println(decimalToBinary(15))  // Output: db1111db\n    println(decimalToBinary(32))  // Output: db100000db\n}"}
{"task_id": "kotlin/33", "language": "kotlin", "completion": "fun isHappy(s: String): Boolean {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) return false\n    \n    // Iterate through the string and check every 3 consecutive characters\n    for (i in 0..s.length - 3) {\n        val sub = s.substring(i, i + 3)\n        if (sub[0] == sub[1] || sub[0] == sub[2] || sub[1] == sub[2]) {\n            return false\n        }\n    }\n    \n    return true\n}\n\n// Test cases\nfun main() {\n    println(isHappy(\"a\"))       // False\n    println(isHappy(\"aa\"))      // False\n    println(isHappy(\"abcd\"))    // True\n    println(isHappy(\"aabb\"))    // False\n    println(isHappy(\"adb\"))     // True\n    println(isHappy(\"xyy\"))     // False\n}"}
{"task_id": "kotlin/34", "language": "kotlin", "completion": "fun numericalLetterGrade(grades: List<Any>): List<String> {\n    return grades.map { grade ->\n        when (grade) {\n            in 4.0 downTo 3.7 -> \"A+\"\n            in 3.7 downTo 3.3 -> \"A\"\n            in 3.3 downTo 3.0 -> \"A-\"\n            in 3.0 downTo 2.7 -> \"B+\"\n            in 2.7 downTo 2.3 -> \"B\"\n            in 2.3 downTo 2.0 -> \"B-\"\n            in 2.0 downTo 1.7 -> \"C+\"\n            in 1.7 downTo 1.3 -> \"C\"\n            in 1.3 downTo 1.0 -> \"C-\"\n            in 1.0 downTo 0.7 -> \"D+\"\n            in 0.7 downTo 0.0 -> \"D\"\n            else -> \"E\"\n        }\n    }\n}\n\n// Example usage:\nfun main() {\n    val grades = listOf(4.0, 3.0, 1.7, 2.0, 3.5)\n    val letterGrades = numericalLetterGrade(grades)\n    println(letterGrades) // Output: [A+, B, C-, C, A-]\n}"}
{"task_id": "kotlin/35", "language": "kotlin", "completion": "fun primeLength(string: String): Boolean {\n    val length = string.length\n    if (length <= 1) return false\n    for (i in 2 until length) {\n        if (length % i == 0) return false\n    }\n    return true\n}\n\n// Examples\nprintln(primeLength(\"Hello\")) // True\nprintln(primeLength(\"abcdcba\")) // True\nprintln(primeLength(\"kittens\")) // True\nprintln(primeLength(\"orange\")) // False"}
{"task_id": "kotlin/36", "language": "kotlin", "completion": "fun solve(n: Int): String {\n    // Convert the integer to its binary representation as a string\n    val binaryString = Integer.toBinaryString(n)\n    \n    // Sum up all the digits (bits) in the binary string\n    var sumOfDigits = 0\n    for (char in binaryString) {\n        sumOfDigits += char.toString().toInt()\n    }\n    \n    // Return the sum as a binary number\n    return Integer.toBinaryString(sumOfDigits)\n}"}
{"task_id": "kotlin/37", "language": "kotlin", "completion": "fun getRow(lst: List<List<Int>>, x: Int): List<Any> {\n    val coordinates = mutableListOf<Pair<Int, Int>>()\n    \n    // Iterate through the list to find all occurrences of x\n    for ((rowIndex, row) in lst.withIndex()) {\n        for ((colIndex, value) in row.withIndex()) {\n            if (value == x) {\n                coordinates.add(Pair(rowIndex, colIndex))\n            }\n        }\n    }\n    \n    // Sort the coordinates by rows first and then by columns\n    val sortedCoordinates = coordinates.sortedWith(compareBy({ it.first }, { -it.second }))\n    \n    return sortedCoordinates.map { listOf(it.first, it.second) }\n}\n\n// Test cases\nfun main() {\n    println(getRow(listOf(\n        listOf(1, 2, 3, 4, 5, 6),\n        listOf(1, 2, 3, 4, 1, 6),\n        listOf(1, 2, 3, 4, 5, 1)\n    ), 1)) // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    \n    println(getRow(listOf(), 1)) // == []\n    \n    println(getRow(listOf(\n        listOf(),\n        listOf(1),\n        listOf(1, 2, 3)\n    ), 3)) // == [(2, 2)]\n}"}
{"task_id": "kotlin/38", "language": "kotlin", "completion": "fun nextSmallest(lst: List<Any>): Int? {\n    if (lst.size < 2) return null\n    \n    // Convert to a set to remove duplicates, then back to a list and sort it\n    val uniqueSortedList = lst.toSet().toList().sorted()\n    \n    // Return the second element or null if there is no such element\n    return if (uniqueSortedList.size > 1) uniqueSortedList[1] else null\n}\n\n// Test cases\nfun main() {\n    println(nextSmallest(listOf(1, 2, 3, 4, 5))) // Output: 2\n    println(nextSmallest(listOf(5, 1, 4, 3, 2))) // Output: 2\n    println(nextSmallest(emptyList<Any>()))     // Output: null\n    println(nextSmallest(listOf(1, 1)))         // Output: null\n}"}
{"task_id": "kotlin/39", "language": "kotlin", "completion": "fun isBored(s: String): Int {\n    // Split the string into sentences based on delimiters '.', '?', or '!'\n    val sentences = s.split(\".\", \"?\", \"!\")\n    \n    // Initialize a counter for boredoms\n    var boredomCount = 0\n    \n    // Iterate through each sentence\n    for (sentence in sentences) {\n        // Trim leading and trailing whitespace from the sentence\n        val trimmedSentence = sentence.trim()\n        \n        // Check if the sentence starts with \"I\"\n        if (trimmedSentence.startsWith(\"I\", ignoreCase = true)) {\n            boredomCount++\n        }\n    }\n    \n    return boredomCount\n}"}
{"task_id": "kotlin/40", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\nfun sumOfDigits(n: Int): Int {\n    var num = n\n    var sum = 0\n    while (num > 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}\n\nfun skjkasdkd(lst: List<Int>): Int {\n    val primes = lst.filter { isPrime(it) }\n    if (primes.isEmpty()) return -1 // Return -1 if no prime numbers are found\n    \n    val largestPrime = primes.maxOrNull() ?: 0\n    return sumOfDigits(largestPrime)\n}\n\n// Helper function to check if a number is prime\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (i in 3..sqrt(n.toDouble()).toInt() step 2) {\n        if (n % i == 0) return false\n    }\n    return true\n}\n\n// Helper function to sum the digits of a number\nfun sumOfDigits(n: Int): Int {\n    var num = n\n    var sum = 0\n    while (num > 0) {\n        sum += num % 10\n        num /= 10\n    }\n    return sum\n}"}
{"task_id": "kotlin/41", "language": "kotlin", "completion": "fun checkDictCase(dict: Map<Any?, Any?>): Boolean {\n    if (dict.isEmpty()) return false\n    \n    var allLowerCase = true\n    var allUpperCase = true\n    \n    for ((key, _) in dict) {\n        when {\n            key is String -> {\n                if (!key.equals(key.toLowerCase(), ignoreCase = true)) {\n                    allLowerCase = false\n                }\n                if (!key.equals(key.toUpperCase(), ignoreCase = true)) {\n                    allUpperCase = false\n                }\n            } else {\n                return false\n            }\n        }\n    }\n    \n    return allLowerCase || allUpperCase\n}\n\n// Test cases\nfun main() {\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"b\" to \"banana\"))) // True\n    println(checkDictCase(mapOf(\"a\" to \"apple\", \"A\" to \"banana\", \"B\" to \"banana\"))) // False\n    println(checkDictCase(mapOf(\"a\" to \"apple\", 8 to \"banana\", \"a\" to \"apple\"))) // False\n    println(checkDictCase(mapOf(\"Name\" to \"John\", \"Age\" to \"36\", \"City\" to \"Houston\"))) // False\n    println(checkDictCase(mapOf(\"STATE\" to \"NC\", \"ZIP\" to \"12345\"))) // True\n}"}
{"task_id": "kotlin/42", "language": "kotlin", "completion": "fun closestInteger(value: String): Int {\n    val num = value.toDouble()\n    val floorNum = Math.floor(num).toInt()\n    val ceilNum = Math.ceil(num).toInt()\n    \n    if (num - floorNum < ceilNum - num) {\n        return floorNum\n    } else {\n        return ceilNum\n    }\n}\n\n// Examples\nfun main() {\n    println(closestInteger(\"10\"))       // Output: 10\n    println(closestInteger(\"15.3\"))     // Output: 15\n    println(closestInteger(\"14.5\"))     // Output: 15\n    println(closestInteger(\"-14.5\"))    // Output: -15\n}"}
{"task_id": "kotlin/43", "language": "kotlin", "completion": "fun makeAPile(n: Int): List<Int> {\n    val pile = mutableListOf<Int>()\n    var currentStones = n\n    \n    for (i in 0 until n) {\n        pile.add(currentStones)\n        if (n % 2 == 0) {\n            currentStones += 2 // Next even number\n        } else {\n            currentStones += 2 // Next odd number\n        }\n    }\n    \n    return pile\n}\n\n// Example usage:\nfun main() {\n    println(makeAPile(3)) // Output: [3, 5, 7]\n}"}
{"task_id": "kotlin/44", "language": "kotlin", "completion": "fun wordsString(s: String): List<String> {\n    // Split the string by spaces and commas to get individual words\n    return s.split(\" \", \",\").filter { it.isNotEmpty() }.map { it.trim() }\n}\n\n// Example usage:\nfun main() {\n    println(wordsString(\"Hi, my name is John\")) // Output: [Hi, my, name, is, John]\n    println(wordsString(\"One, two, three, four, five, six\")) // Output: [One, two, three, four, five, six]\n}"}
{"task_id": "kotlin/45", "language": "kotlin", "completion": "fun chooseNum(x : Int, y : Int) : Int {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1\n    }\n    \n    var largestEven = -1\n    \n    for (i in x..y) {\n        if (i % 2 == 0) {\n            largestEven = i\n        }\n    }\n    \n    return largestEven\n}"}
{"task_id": "kotlin/46", "language": "kotlin", "completion": "fun roundedAvg(n: Int, m: Int): Any {\n    if (n > m) return -1\n    \n    val sum = (n..m).sum()\n    val count = m - n + 1\n    val average = sum / count\n    val roundedAverage = Math.round(average.toDouble())\n    \n    return Integer.toBinaryString(roundedAverage)\n}"}
{"task_id": "kotlin/47", "language": "kotlin", "completion": "fun f(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    \n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result.add(factorial(i))\n        } else {\n            result.add(sumUpTo(i))\n        }\n    }\n    \n    return result\n}\n\nfun factorial(num: Int): Int {\n    var fact = 1\n    for (i in 1..num) {\n        fact *= i\n    }\n    return fact\n}\n\nfun sumUpTo(num: Int): Int {\n    var sum = 0\n    for (i in 1..num) {\n        sum += i\n    }\n    return sum\n}\n\n// Example usage:\nfun main() {\n    println(f(5)) // Output: [1, 2, 6, 24, 15]\n}"}
{"task_id": "kotlin/48", "language": "kotlin", "completion": "fun evenOddPalindrome(n: Int): Pair<Int, Int> {\n    val palindromes = mutableListOf<Int>()\n    \n    // Check each number from 1 to n to see if it is a palindrome\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            palindromes.add(i)\n        }\n    }\n    \n    // Count even and odd palindromes\n    var evenCount = 0\n    var oddCount = 0\n    for (palindrome in palindromes) {\n        if (palindrome % 2 == 0) {\n            evenCount++\n        } else {\n            oddCount++\n        }\n    }\n    \n    return Pair(evenCount, oddCount)\n}\n\n// Helper function to check if a number is a palindrome\nfun isPalindrome(number: Int): Boolean {\n    val str = number.toString()\n    return str == str.reversed()\n}\n\n// Example usage\nfun main() {\n    println(evenOddPalindrome(3))  // Output: (1, 2)\n    println(evenOddPalindrome(12)) // Output: (4, 6)\n}"}
{"task_id": "kotlin/49", "language": "kotlin", "completion": "fun moveOneBall(arr: List<Int>): Boolean {\n    if (arr.isEmpty()) return true\n    \n    // Check if the array is already sorted\n    fun isSorted(arr: List<Int>): Boolean {\n        for (i in 1 until arr.size) {\n            if (arr[i] < arr[i - 1]) return false\n        }\n        return true\n    }\n    \n    // Generate all possible right shifted arrays\n    fun generateRightShiftedArrays(arr: List<Int>): Set<List<Int>> {\n        val result = mutableSetOf<List<Int>>()\n        for (shift in arr.indices) {\n            val newArr = arr.toMutableList()\n            for (i in 0 until shift) {\n                newArr.add(0, newArr.removeAt(newArr.size - 1))\n            }\n            result.add(newArr)\n        }\n        return result\n    }\n    \n    // Check if any right shifted array is sorted\n    val allRightShiftedArrays = generateRightShiftedArrays(arr)\n    for (rightShiftedArray in allRightShiftedArrays) {\n        if (isSorted(rightShiftedArray)) return true\n    }\n    \n    return false\n}\n\n// Test cases\nfun main() {\n    println(moveOneBall(listOf(3, 4, 5, 1, 2))) // True\n    println(moveOneBall(listOf(3, 5, 4, 1, 2))) // False\n}"}
{"task_id": "kotlin/50", "language": "kotlin", "completion": "fun exchange(lst1: List<Int>, lst2: List<Int>): String {\n    // Check if all elements in lst1 are even\n    val hasEvenInLst1 = lst1.any { it % 2 == 0 }\n    \n    // If lst1 already contains only even numbers, return \"YES\"\n    if (hasEvenInLst1) {\n        return \"YES\"\n    }\n    \n    // Check if there are any odd numbers in lst2\n    val hasOddInLst2 = lst2.any { it % 2 != 0 }\n    \n    // If lst2 contains at least one odd number, we can exchange elements to make lst1 even\n    return if (hasOddInLst2) \"YES\" else \"NO\"\n}"}
{"task_id": "kotlin/51", "language": "kotlin", "completion": "fun reverseDelete(s : String, c : String) : List<Any> {\n    // Step 1: Remove all characters in s that are present in c\n    val result = StringBuilder()\n    for (char in s) {\n        if (c.indexOf(char) == -1) {\n            result.append(char)\n        }\n    }\n    \n    // Step 2: Check if the resulting string is a palindrome\n    val isPalindrome = checkPalindrome(result.toString())\n    \n    // Return the result as a list containing the modified string and the boolean value\n    return listOf(result.toString(), isPalindrome)\n}\n\n// Helper function to check if a string is a palindrome\nfun checkPalindrome(s: String): Boolean {\n    val reversed = s.reversed()\n    return s == reversed\n}\n\n// Test cases\nfun main() {\n    println(reverseDelete(\"abcde\", \"ae\")) // Output: ('bcd', False)\n    println(reverseDelete(\"abcdef\", \"b\"))  // Output: ('acdef', False)\n    println(reverseDelete(\"abcdedcba\", \"ab\")) // Output: ('cdedc', True)\n}"}
{"task_id": "kotlin/52", "language": "kotlin", "completion": "fun maxFill(grid: List<List<Int>>, capacity: Int): Int {\n    var totalBuckets = 0\n    \n    for (row in grid) {\n        val waterUnits = row.count { it == 1 }\n        if (waterUnits > 0) {\n            totalBuckets += (waterUnits + capacity - 1) / capacity // Ceiling division to round up\n        }\n    }\n    \n    return totalBuckets\n}\n\n// Example usage:\nfun main() {\n    val grid1 = listOf(listOf(0, 0, 1, 0), listOf(0, 1, 0, 0), listOf(1, 1, 1, 1))\n    val capacity1 = 1\n    println(maxFill(grid1, capacity1)) // Output: 6\n    \n    val grid2 = listOf(listOf(0, 0, 1, 1), listOf(0, 0, 0, 0), listOf(1, 1, 1, 1), listOf(0, 1, 1, 1))\n    val capacity2 = 2\n    println(maxFill(grid2, capacity2)) // Output: 5\n    \n    val grid3 = listOf(listOf(0, 0, 0), listOf(0, 0, 0))\n    val capacity3 = 5\n    println(maxFill(grid3, capacity3)) // Output: 0\n}"}
{"task_id": "kotlin/53", "language": "kotlin", "completion": "fun selectWords(s: String, n: Int): List<String> {\n    if (s.isEmpty()) return emptyList()\n    \n    val vowels = setOf('a', 'e', 'i', 'o', 'u')\n    \n    fun countConsonants(word: String): Int {\n        return word.count { !it.toLowerCase().isLetter || it in vowels }\n    }\n    \n    return s.split(\" \").filter { countConsonants(it) == n }.map { it }\n}\n\n// Test cases\nfun main() {\n    println(selectWords(\"Mary had a little lamb\", 4)) // [\"little\"]\n    println(selectWords(\"Mary had a little lamb\", 3)) // [\"Mary\", \"lamb\"]\n    println(selectWords(\"simple white space\", 2)) // []\n    println(selectWords(\"Hello world\", 4)) // [\"world\"]\n    println(selectWords(\"Uncle sam\", 3)) // [\"Uncle\"]\n}"}
{"task_id": "kotlin/54", "language": "kotlin", "completion": "fun maximum(arr: List<Int>, k: Int): List<Int> {\n    // Sort the array in descending order\n    val sortedArr = arr.sortedByDescending { it }\n    \n    // Take the first k elements from the sorted array\n    return sortedArr.take(k).toList()\n}\n\n// Example usage:\nfun main() {\n    println(maximum(listOf(-3, -4, 5), 3)) // Output: [-4, -3, 5]\n    println(maximum(listOf(4, -4, 4), 2)) // Output: [4, 4]\n    println(maximum(listOf(-3, 2, 1, 2, -1, -2, 1), 1)) // Output: [2]\n}"}
{"task_id": "kotlin/55", "language": "kotlin", "completion": "fun addElements(arr: List<Int>, k: Int): Int {\n    // Initialize a variable to store the sum of valid elements\n    var sum = 0\n    \n    // Iterate through the first `k` elements of the array\n    for (i in 0 until k) {\n        // Check if the element has at most two digits\n        if (arr[i].toString().length <= 2) {\n            // Add the valid element to the sum\n            sum += arr[i]\n        }\n    }\n    \n    // Return the calculated sum\n    return sum\n}\n\n// Example usage:\nfun main() {\n    val arr = listOf(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n    val k = 4\n    println(addElements(arr, k)) // Output: 24\n}"}
{"task_id": "kotlin/56", "language": "kotlin", "completion": "fun intersection(interval1: List<Int>, interval2: List<Int>): String {\n    // Extract start and end values for both intervals\n    val (start1, end1) = interval1\n    val (start2, end2) = interval2\n    \n    // Find the intersection of the two intervals\n    val intersectionStart = maxOf(start1, start2)\n    val intersectionEnd = minOf(end1, end2)\n    \n    // Check if there is an intersection\n    if (intersectionStart > intersectionEnd) {\n        return \"NO\"\n    }\n    \n    // Calculate the length of the intersection\n    val intersectionLength = intersectionEnd - intersectionStart + 1\n    \n    // Check if the length is a prime number\n    return if (isPrime(intersectionLength)) \"YES\" else \"NO\"\n}\n\n// Function to check if a number is prime\nfun isPrime(num: Int): Boolean {\n    if (num <= 1) return false\n    if (num == 2) return true // Only even prime number\n    if (num % 2 == 0) return false\n    \n    for (i in 3..kotlin.math.sqrt(num.toDouble()).toInt() step 2) {\n        if (num % i == 0) return false\n    }\n    \n    return true\n}\n\n// Test cases\nfun main() {\n    println(intersection(listOf(1, 3), listOf(2, 4))) // \"NO\"\n    println(intersection(listOf(-1, 1), listOf(0, 4))) // \"NO\"\n    println(intersection(listOf(-3, -1), listOf(-5, 5))) // \"YES\"\n}"}
{"task_id": "kotlin/57", "language": "kotlin", "completion": "fun tri(n: Int): List<Int> {\n    // Base case for n = 0\n    if (n < 0) return emptyList()\n    \n    // Initialize a list to store the sequence values\n    val tribonacciSequence = mutableListOf<Int>()\n    \n    // Handle base cases\n    if (n >= 0) tribonacciSequence.add(3) // tri(1) = 3\n    \n    // Calculate the sequence up to n\n    for (i in 2..n) {\n        if (i % 2 == 0) {\n            tribonacciSequence.add(1 + i / 2)\n        } else {\n            val prev1 = tribonacciSequence[i - 1]\n            val prev2 = tribonacciSequence[i - 2]\n            val next = if (i + 1 <= n) tribonacciSequence[i + 1] else null\n            val currentValue = prev1 + prev2 + (next ?: 0)\n            tribonacciSequence.add(currentValue)\n        }\n    }\n    \n    return tribonacciSequence\n}\n\n// Example usage\nfun main() {\n    println(tri(3)) // Output: [3, 2, 8]\n}"}
{"task_id": "kotlin/58", "language": "kotlin", "completion": "fun digits(n: Int): Int {\n    // Convert the number to a String to easily iterate over its digits\n    val numStr = n.toString()\n    \n    // Initialize the product of odd digits\n    var product = 1\n    \n    // Flag to check if there are any odd digits\n    var hasOddDigit = false\n    \n    // Iterate over each character in the string representation of the number\n    for (char in numStr) {\n        // Convert the character back to an integer\n        val digit = char.toString().toInt()\n        \n        // Check if the digit is odd\n        if (digit % 2 != 0) {\n            product *= digit\n            hasOddDigit = true\n        }\n    }\n    \n    // Return the product if there are any odd digits, otherwise return 0\n    return if (hasOddDigit) product else 0\n}\n\n// Test cases\nfun main() {\n    println(digits(1))   // Output: 1\n    println(digits(4))   // Output: 0\n    println(digits(235)) // Output: 15\n}"}
{"task_id": "kotlin/59", "language": "kotlin", "completion": "fun isNested(string: String): Boolean {\n    // Use a stack to keep track of the opening brackets\n    val stack = mutableListOf<Char>()\n    \n    for (char in string) {\n        when (char) {\n            '[' -> stack.add(char)  // Push on the stack if it's an opening bracket\n            ']' -> {\n                if (stack.isNotEmpty() && stack.last() == '[') {\n                    stack.removeAt(stack.size - 1)  // Pop from the stack if there's a matching pair\n                } else {\n                    return false  // If it doesn't match, then it's not nested\n                }\n            }\n        }\n    }\n    \n    // Check if any opening bracket was left unmatched (not properly closed)\n    return stack.isNotEmpty()\n}\n\n// Test cases\nfun main() {\n    println(isNested(\"[[]]\"))  // True\n    println(isNested(\"[]]]]]]][[[[[]\"))  // False\n    println(isNested(\"[][]\"))  // False\n    println(isNested(\"[]\"))  // False\n    println(isNested(\"[[][]]\"))  // True\n    println(isNested(\"[[]][[\"))  // True\n}"}
{"task_id": "kotlin/60", "language": "kotlin", "completion": "fun sumSquares(lst: List<Any>): Int {\n    return lst.map { it as Double }.map { Math.ceil(it).toInt() }.map { it * it }.sum()\n}\n\n// Test cases\nfun main() {\n    println(sumSquares(listOf(1, 2, 3))) // Output: 14\n    println(sumSquares(listOf(1, 4, 9))) // Output: 98\n    println(sumSquares(listOf(1, 3, 5, 7))) // Output: 84\n    println(sumSquares(listOf(1.4, 4.2, 0))) // Output: 29\n    println(sumSquares(listOf(-2.4, 1, 1))) // Output: 6\n}"}
{"task_id": "kotlin/61", "language": "kotlin", "completion": "fun checkIfLastCharIsALetter(txt: String): Boolean {\n    // Check if the string is empty\n    if (txt.isEmpty()) return false\n    \n    // Get the last character of the string\n    val lastChar = txt[txt.length - 1]\n    \n    // Check if the last character is a letter and not part of a word\n    return lastChar.isLetter() && (txt.length == 1 || txt[txt.length - 2] == ' ')\n}\n\n// Test cases\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\")) // False\n    println(checkIfLastCharIsALetter(\"apple pi e\")) // True\n    println(checkIfLastCharIsALetter(\"apple pi e \")) // False\n    println(checkIfLastCharIsALetter(\"\")) // False\n}"}
{"task_id": "kotlin/62", "language": "kotlin", "completion": "fun canArrange(arr: List<Int>): Int {\n    for (i in arr.size - 1 downTo 1) {\n        if (arr[i] < arr[i - 1]) {\n            return i\n        }\n    }\n    return -1\n}\n\n// Examples\nfun main() {\n    println(canArrange(listOf(1, 2, 4, 3, 5))) // Output: 3\n    println(canArrange(listOf(1, 2, 3))) // Output: -1\n}"}
{"task_id": "kotlin/63", "language": "kotlin", "completion": "fun largestSmallestIntegers(lst: List<Any>): List<Int?> {\n    var largestNegative: Int? = null\n    var smallestPositive: Int? = null\n\n    for (item in lst) {\n        if (item is Int) {\n            when {\n                item < 0 -> {\n                    if (largestNegative == null || item > largestNegative) {\n                        largestNegative = item\n                    }\n                }\n                item > 0 -> {\n                    if (smallestPositive == null || item < smallestPositive) {\n                        smallestPositive = item\n                    }\n                }\n            }\n        }\n    }\n\n    return listOf(largestNegative, smallestPositive)\n}\n\n// Examples\nfun main() {\n    println(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7))) // Output: [null, 1]\n    println(largestSmallestInteggers(emptyList<Any>())) // Output: [null, null]\n    println(largestSmallestIntegers(listOf(0))) // Output: [null, null]\n}"}
{"task_id": "kotlin/64", "language": "kotlin", "completion": "fun specialFactorial(n: Int): Int {\n    fun factorial(num: Int): Int {\n        if (num == 0) return 1\n        var result = 1\n        for (i in 1..num) {\n            result *= i\n        }\n        return result\n    }\n    \n    var result = 1\n    for (i in n downTo 1) {\n        result *= factorial(i)\n    }\n    return result\n}\n\n// Example usage:\nfun main() {\n    println(specialFactorial(4)) // Output: 288\n}"}
{"task_id": "kotlin/65", "language": "kotlin", "completion": "fun wordsInSentence(sentence: String): String {\n    // Split the sentence into words\n    val words = sentence.split(\" \")\n    \n    // Function to check if a number is prime\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        if (n == 2) return true\n        if (n % 2 == 0) return false\n        for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {\n            if (n % i == 0) return false\n        }\n        return true\n    }\n    \n    // Filter words with prime lengths\n    val filteredWords = words.filter { isPrime(it.length) }\n    \n    // Join the filtered words back into a string\n    return filteredWords.joinToString(\" \")\n}\n\n// Example usage:\nfun main() {\n    println(wordsInSentence(\"This is a test\")) // Output: \"is\"\n    println(wordsInSentence(\"lets go for swimming\")) // Output: \"go for\"\n}"}
{"task_id": "kotlin/66", "language": "kotlin", "completion": "fun simplify(x : String, n : String) : Boolean {\n    // Split the strings to get numerator and denominator\n    val (numeratorX, denominatorX) = x.split(\"/\").map { it.toInt() }\n    val (numeratorN, denominatorN) = n.split(\"/\").map { it.toInt() }\n    \n    // Multiply the numerators and denominators\n    val numeratorProduct = numeratorX * numeratorN\n    val denominatorProduct = denominatorX * denominatorN\n    \n    // Check if the product is a whole number\n    return numeratorProduct % 1 == 0 && denominatorProduct % 1 == 0\n}\n\n// Test cases\nfun main() {\n    println(simplify(\"1/5\", \"5/1\")) // True\n    println(simplify(\"1/6\", \"2/1\")) // False\n    println(simplify(\"7/10\", \"10/2\")) // False\n}"}
{"task_id": "kotlin/67", "language": "kotlin", "completion": "fun orderByPoints(nums: List<Any>): List<Any> {\n    return nums.mapIndexed { index, num -> Pair(index, num) }\n        .sortedWith(compareBy({ digitSum(it.second as Int) }, { it.first }))\n        .map { it.second }\n}\n\nfun digitSum(num: Int): Int {\n    var sum = 0\n    var n = Math.abs(num)\n    while (n > 0) {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n// Test cases\nfun main() {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12))) // Output: [-1, -11, 1, -12, 11]\n    println(orderByPoints(listOf())) // Output: []\n}"}
{"task_id": "kotlin/68", "language": "kotlin", "completion": "fun specialFilter(nums: List<Any>): Int {\n    // Step 1: Filter out only integers from the list\n    val filteredNums = nums.filterIsInstance<Int>()\n    \n    // Step 2: Check if each number's first and last digits are odd\n    fun isOdd(digit: Int) = digit in listOf(1, 3, 5, 7, 9)\n    \n    fun hasOddDigits(n: Int): Boolean {\n        var num = n\n        while (num >= 10) {\n            num /= 10\n        }\n        return isOdd(num) && isOdd(n % 10)\n    }\n    \n    // Step 3: Count numbers that are greater than 10 and have both first and last digits as odd\n    val count = filteredNums.count { it > 10 && hasOddDigits(it) }\n    \n    return count\n}\n\n// Test cases\nfun main() {\n    println(specialFilter(listOf(15, -73, 14, -15))) // Output: 1\n    println(specialFilter(listOf(33, -2, -3, 45, 21, 109))) // Output: 2\n}"}
{"task_id": "kotlin/69", "language": "kotlin", "completion": "fun getMaxTriples(n: Int): Int {\n    // Step 1: Generate the array based on the formula\n    val a = IntArray(n) { i -> i * i - i + 1 }\n    \n    var count = 0\n    \n    // Step 2: Iterate through all possible triples (i, j, k)\n    for (i in 0 until n) {\n        for (j in i+1 until n) {\n            for (k in j+1 until n) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++\n                }\n            }\n        }\n    }\n    \n    // Step 3: Return the count of valid triples\n    return count\n}"}
{"task_id": "kotlin/70", "language": "kotlin", "completion": "fun bf(planet1: String, planet2: String): List<String> {\n    val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    // Get the indices of the planets in the list\n    val index1 = planets.indexOf(planet1)\n    val index2 = planets.indexOf(planet2)\n    \n    // If either planet is not found, return an empty list\n    if (index1 == -1 || index2 == -1) {\n        return emptyList()\n    }\n    \n    // Ensure the indices are in the correct order\n    val startIndex = minOf(index1, index2)\n    val endIndex = maxOf(index1, index2)\n    \n    // Return the planets between the two indices (inclusive of the boundaries)\n    return if (startIndex == endIndex) {\n        listOf()\n    } else {\n        planets.subList(startIndex + 1, endIndex).filter { it != planet1 && it != planet2 }\n    }\n}\n\n// Examples\nfun main() {\n    println(bf(\"Jupiter\", \"Neptune\")) // ==> (\"Saturn\", \"Uranus\")\n    println(bf(\"Earth\", \"Mercury\")) // ==> (\"Venus\")\n    println(bf(\"Mercury\", \"Uranus\")) // ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n}"}
{"task_id": "kotlin/71", "language": "kotlin", "completion": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n\nfun xOrY(n: Int, x: Int, y: Int): Int {\n    return if (isPrime(n)) x else y\n}\n\n// Examples\nprintln(xOrY(7, 34, 12)) // Output: 34\nprintln(xOrY(15, 8, 5))  // Output: 5"}
{"task_id": "kotlin/72", "language": "kotlin", "completion": "fun doubleTheDifference(lst: List<Any>): Int {\n    // Filter out non-integer and negative numbers\n    val filteredList = lst.filterIsInstance<Int>().filter { it >= 0 }\n    \n    // Calculate the sum of squares of odd numbers\n    val result = filteredList.filter { it % 2 != 0 }.map { it * it }.sum()\n    \n    return result\n}\n\n// Test cases\nfun main() {\n    println(doubleTheDifference(listOf(1, 3, 2, 0))) // Output: 10\n    println(doubleTheDifference(listOf(-1, -2, 0))) // Output: 0\n    println(doubleTheDifference(listOf(9, -2))) // Output: 81\n    println(doubleTheDifference(listOf(0))) // Output: 0\n}"}
{"task_id": "kotlin/73", "language": "kotlin", "completion": "fun strongestExtension(className: String, extensions: List<String>): String {\n    var strongestExtension = \"\"\n    var maxStrength = Int.MIN_VALUE\n\n    for (extension in extensions) {\n        val capCount = extension.count { it.isUpperCase() }\n        val smCount = extension.count { it.isLowerCase() }\n        val strength = capCount - smCount\n\n        if (strength > maxStrength) {\n            maxStrength = strength\n            strongestExtension = extension\n        }\n    }\n\n    return \"$className.$strongestExtension\"\n}\n\n// Example usage:\nfun main() {\n    println(strongestExtension(\"my_class\", listOf(\"AA\", \"Be\", \"CC\"))) // Output: my_class.AA\n    println(strongestExtension(\"Slices\", listOf(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))) // Output: Slices.SErviNGSliCes\n}"}
{"task_id": "kotlin/74", "language": "kotlin", "completion": "fun cycpatternCheck(a: String, b: String): Boolean {\n    // If the length of b is greater than a, it cannot be a substring\n    if (b.length > a.length) return false\n    \n    // Generate all rotations of b and check if any of them is a substring of a\n    val rotatedB = generateRotations(b)\n    \n    for (rotation in rotatedB) {\n        if (a.contains(rotation)) return true\n    }\n    \n    return false\n}\n\n// Function to generate all rotations of a string\nfun generateRotations(s: String): List<String> {\n    val rotations = mutableListOf<String>()\n    for (i in s.indices) {\n        val rotation = s.substring(i) + s.substring(0, i)\n        rotations.add(rotation)\n    }\n    return rotations\n}\n\n// Test cases\nfun main() {\n    println(cycpatternCheck(\"abcd\", \"abd\")) // False\n    println(cycpatternCheck(\"hello\", \"ell\")) // True\n    println(cycpatternCheck(\"whassup\", \"psus\")) // False\n    println(cycpatternCheck(\"abab\", \"baa\")) // True\n    println(cycpatternCheck(\"efef\", \"eeff\")) // False\n    println(cycpatternCheck(\"himenss\", \"simen\")) // True\n}"}
{"task_id": "kotlin/75", "language": "kotlin", "completion": "fun intToMiniRoman(number: Int): String {\n    // Define the mappings of integers to their corresponding Roman numerals\n    val romanNumerals = listOf(\n        1000 to \"m\", 900 to \"cm\", 500 to \"d\", 400 to \"cd\",\n        100 to \"c\", 90 to \"xc\", 50 to \"l\", 40 to \"xl\",\n        10 to \"x\", 9 to \"ix\", 5 to \"v\", 4 to \"iv\", 1 to \"i\"\n    )\n    \n    // Initialize an empty StringBuilder to build the result string\n    val sb = StringBuilder()\n    \n    // Iterate through each mapping\n    var remainingNumber = number\n    for ((value, numeral) in romanNumerals) {\n        while (remainingNumber >= value) {\n            sb.append(numeral)\n            remainingNumber -= value\n        }\n    }\n    \n    // Return the constructed Roman numeral string in lowercase\n    return sb.toString().lowercase()\n}\n\n// Test cases\nfun main() {\n    println(intToMiniRoman(19))  // Output: \"xix\"\n    println(intToMiniRoman(152)) // Output: \"clii\"\n    println(intToMiniRoman(426)) // Output: \"cdxxvi\"\n}"}
{"task_id": "kotlin/76", "language": "kotlin", "completion": "fun rightAngleTriangle(a: Int, b: Int, c: Int): Boolean {\n    // First, we need to ensure that the sides are valid for a triangle.\n    // According to the triangle inequality theorem, the sum of any two sides must be greater than the third side.\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return false\n    }\n    \n    // Next, we use the Pythagorean theorem to check if it's a right-angled triangle.\n    // The Pythagorean theorem states that in a right-angled triangle, the square of the length of the hypotenuse (the side opposite the right angle) \n    // is equal to the sum of the squares of the lengths of the other two sides.\n    val sides = listOf(a, b, c).sorted()\n    \n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n}\n\n// Test cases\nfun main() {\n    println(rightAngleTriangle(3, 4, 5)) // True\n    println(rightAngleTriangle(1, 2, 3)) // False\n    println(rightAngleTriangle(5, 12, 13)) // True\n    println(rightAngleTriangle(7, 8, 9)) // False\n}"}
{"task_id": "kotlin/77", "language": "kotlin", "completion": "fun solve(s: String): String {\n    // Check if the string contains any letters\n    val hasLetters = s.any { it.isLetter() }\n    \n    return if (hasLetters) {\n        // If there are letters, reverse their cases\n        s.map { \n            if (it.isLetter()) {\n                if (it.isLowerCase()) it.toUpperCase() else it.toLowerCase()\n            } else {\n                it\n            }\n        }.joinToString(\"\")\n    } else {\n        // If there are no letters, reverse the string\n        s.reversed()\n    }\n}\n\n// Examples\nprintln(solve(\"1234\"))  // Output: \"4321\"\nprintln(solve(\"ab\"))     // Output: \"AB\"\nprintln(solve(\"#a@C\"))   // Output: \"#A@c\""}
{"task_id": "kotlin/78", "language": "kotlin", "completion": "import java.security.MessageDigest\nimport java.security.NoSuchAlgorithmException\n\nfun stringToMd5(text: String): String? {\n    if (text.isEmpty()) return null\n\n    val bytes = text.toByteArray()\n    try {\n        val md5 = MessageDigest.getInstance(\"MD5\")\n        val digest = mdok0xe25960a79dbc69b674cd4ec67a72c62digest.digest(bytes)\n        return digest.joinToString(\"\") { \"%02x\".format(it) }\n    } catch (e: NoSuchAlgorithmException) {\n        // This exception should not occur unless the environment does not support MD5\n        e.printStackTrace()\n    }\n    return null\n}"}
{"task_id": "kotlin/79", "language": "kotlin", "completion": "fun generateIntegers(a: Int, b: Int): List<Int> {\n    // Ensure a is less than or equal to b\n    val start = if (a <= b) a else b\n    val end = if (a <= b) b else a\n\n    // Create a list to store the even numbers\n    val result = mutableListOf<Int>()\n\n    // Iterate from start to end and collect even numbers\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n\n    // Return the list sorted in ascending order\n    return result.sorted()\n}\n\n// Test cases\nfun main() {\n    println(generateIntegers(2, 8)) // Output: [2, 4, 6, 8]\n    println(generateIntegers(8, 2)) // Output: [2, 4, 6, 8]\n    println(generateIntegers(10, 14)) // Output: []\n}"}

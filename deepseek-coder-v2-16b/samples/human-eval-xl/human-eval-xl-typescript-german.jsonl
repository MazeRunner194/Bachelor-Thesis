{"task_id": "typescript/0", "language": "typescript", "completion": "const below_zero = function (operations: Array<number>): boolean {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n};\n\n// Test cases\nconsole.log(below_zero([1, 2, 3])); // False\nconsole.log(below_zero([1, 2, -4, 5])); // True"}
{"task_id": "typescript/1", "language": "typescript", "completion": "const sum_product = function (numbers: Array<number>): [number, number] {\n    if (numbers.length === 0) {\n        return [0, 1];\n    }\n\n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    const product = numbers.reduce((acc, num) => acc * num, 1);\n\n    return [sum, product];\n};\n\n// Beispielaufrufe\nconsole.log(sum_product([])); // (0, 1)\nconsole.log(sum_product([1, 2, 3, 4])); // (10, 24)"}
{"task_id": "typescript/2", "language": "typescript", "completion": "const string_xor = function (a: string, b: string): string {\n    // Stellen sicher, dass die Strings gleiche L\u00e4nge haben\n    if (a.length !== b.length) {\n        throw new Error(\"Die beiden Zeichenketten m\u00fcssen dieselbe L\u00e4nge haben.\");\n    }\n\n    let result = '';\n\n    // Durchlaufen der Zeichenketten und XOR-Operation f\u00fcr jedes Paar von Bits\n    for (let i = 0; i < a.length; i++) {\n        const bitA = parseInt(a[i], 10);\n        const bitB = parseInt(b[i], 10);\n        // XOR-Operation: result ist 1, wenn die Bits unterschiedlich sind, sonst 0\n        const xorBit = bitA ^ bitB;\n        result += xorBit.toString();\n    }\n\n    return result;\n};\n\n// Beispielaufruf\nconsole.log(string_xor('010', '110')); // Ausgabe: '100'"}
{"task_id": "typescript/3", "language": "typescript", "completion": "const longest = function (strings: Array<string>): string | null {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let longestString = strings[0];\n\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n\n    return longestString;\n};\n\n// Beispielaufrufe:\nconsole.log(longest([])); // null\nconsole.log(longest(['a', 'b', 'c'])); // 'a'\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'"}
{"task_id": "typescript/4", "language": "typescript", "completion": "const greatest_common_divisor = function (a: number, b: number): number {\n    while (b !== 0) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n};\n\n// Beispiele\nconsole.log(greatest_common_divisor(3, 5)); // 1\nconsole.log(greatest_common_divisor(25, 15)); // 5"}
{"task_id": "typescript/5", "language": "typescript", "completion": "const sort_numbers = function (numbers: string): string {\n    // Definiere die g\u00fcltigen Optionen f\u00fcr die Zahlen als Array\n    const validNumbers = ['null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht', 'neun'];\n    \n    // Teile den Eingabestring in einzelne W\u00f6rter (Zahlen) auf\n    const numberWords = numbers.split(' ');\n    \n    // Erstelle eine Map, um die Indizes der Zahlen zu speichern\n    const numberIndexMap: { [key: string]: number } = {};\n    \n    // F\u00fclle die Map mit den g\u00fcltigen Zahlen und ihren Indizes\n    validNumbers.forEach((num, index) => {\n        numberIndexMap[num] = index;\n    });\n    \n    // Sortiere die Zahlen basierend auf ihrem Index in der Map\n    const sortedNumberWords = numberWords.sort((a, b) => {\n        return numberIndexMap[a] - numberIndexMap[b];\n    });\n    \n    // Gib den sortierten String zur\u00fcck\n    return sortedNumberWords.join(' ');\n};\n\n// Beispielaufruf\nconsole.log(sort_numbers('three one five')); // 'one three five'"}
{"task_id": "typescript/6", "language": "typescript", "completion": "const rescale_to_unit = function (numbers: Array<number>): Array<number> {\n    if (numbers.length < 2) {\n        throw new Error(\"Die Liste muss mindestens zwei Elemente enthalten.\");\n    }\n\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\n    if (min === max) {\n        throw new Error(\"Alle Zahlen sind gleich, es ist keine Skalierung m\u00f6glich.\");\n    }\n\n    return numbers.map(num => (num - min) / (max - min));\n};\n\n// Beispielaufruf\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "typescript/7", "language": "typescript", "completion": "const flip_case = function (string0: string): string {\n    return string0.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n};\n\n// Beispielaufruf:\nconsole.log(flip_case('Hello')); // Ausgabe: 'hELLO'"}
{"task_id": "typescript/8", "language": "typescript", "completion": "const get_positive = function (l: Array<number>): Array<number> {\n    return l.filter(num => num > 0);\n};"}
{"task_id": "typescript/9", "language": "typescript", "completion": "const is_prime = function (n: number): boolean {\n    // Die Zahlen 0, 1 und negative Zahlen sind keine Primzahlen\n    if (n <= 1) return false;\n    \n    // Wenn die Zahl gr\u00f6\u00dfer als 2 ist, pr\u00fcfen wir auf Teilbarkeit ab 2 bis zur Quadratwurzel von n\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    \n    return true;\n};\n\n// Testf\u00e4lle\nconsole.log(is_prime(6));   // False\nconsole.log(is_prime(101)); // True\nconsole.log(is_prime(11));  // True\nconsole.log(is_prime(13441)); // True\nconsole.log(is_prime(61));  // True\nconsole.log(is_prime(4));   // False\nconsole.log(is_prime(1));   // False"}
{"task_id": "typescript/10", "language": "typescript", "completion": "const unique = function (l: Array<number>): Array<number> {\n    // Erstellen Sie ein Set, um doppelte Werte zu entfernen\n    const uniqueSet = new Set(l);\n    \n    // Konvertieren Sie das Set in ein Array und sortieren Sie es\n    const sortedArray = Array.from(uniqueSet).sort((a, b) => a - b);\n    \n    return sortedArray;\n};\n\n// Beispielaufruf\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "typescript/11", "language": "typescript", "completion": "import * as math from 'mathjs';\n\n// Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\nconst isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n};\n\n// Funktion zur Berechnung der n-ten Fibonacci-Zahl\nconst fib = (n: number): number => {\n  return math.fibonacci(n);\n};\n\n// Hauptfunktion, um die n-te Zahl zu finden, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist\nconst prime_fib = function (n: number): number {\n  let count = 0;\n  let i = 1;\n  \n  while (true) {\n    const fibNum = fib(i);\n    if (isPrime(fibNum)) {\n      count++;\n      if (count === n) {\n        return fibNum;\n      }\n    }\n    i++;\n  }\n};\n\n// Beispielaufrufe\nconsole.log(prime_fib(1)); // 2\nconsole.log(prime_fib(2)); // 3\nconsole.log(prime_fib(3)); // 5\nconsole.log(prime_fib(4)); // 13\nconsole.log(prime_fib(5)); // 89"}
{"task_id": "typescript/12", "language": "typescript", "completion": "const triples_sum_to_zero = function (l: Array<number>): boolean {\n    // Sortiere die Liste zuerst\n    l.sort((a, b) => a - b);\n    \n    // Durchlaufe die Liste mit einer Schleife\n    for (let i = 0; i < l.length - 2; i++) {\n        if (i > 0 && l[i] === l[i - 1]) continue; // \u00dcberspringe Duplikate von a\n        \n        let left = i + 1;\n        let right = l.length - 1;\n        \n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n            \n            if (sum === 0) {\n                return true; // Wenn wir ein solches Tripel finden, geben wir True zur\u00fcck\n            } else if (sum < 0) {\n                left++; // Wenn die Summe zu klein ist, erh\u00f6he den linken Zeiger\n            } else {\n                right--; // Wenn die Summe zu gro\u00df ist, verringere den rechten Zeiger\n            }\n        }\n    }\n    \n    return false; // Wenn wir kein solches Tripel finden, geben wir False zur\u00fcck\n};\n\n// Testf\u00e4lle\nconsole.log(triples_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(triples_sum_to_zero([1, 3, -2, 1])); // True\nconsole.log(triples_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(triples_sum_to_zero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triples_sum_to_zero([1])); // False"}
{"task_id": "typescript/13", "language": "typescript", "completion": "const pairs_sum_to_zero = function (l: Array<number>): boolean {\n    // Eine Menge zum Speichern der Elemente, um schnellen Zugriff zu erm\u00f6glichen\n    const elementsSet = new Set(l);\n    \n    for (let a of l) {\n        if (elementsSet.has(-a)) {\n            return true;\n        }\n    }\n    \n    return false;\n};\n\n// Testf\u00e4lle\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0])); // False\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1])); // False\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7])); // False\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairs_sum_to_zero([1])); // False"}
{"task_id": "typescript/14", "language": "typescript", "completion": "const fib4 = function (n: number): number {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Array to store the Fib4 values up to n\n    const fibArray: number[] = [0, 0, 2, 0];\n\n    for (let i = 4; i <= n; i++) {\n        const nextValue = fibArray[i - 1] + fibArray[i - 2] + fibArray[i - 3] + fibArray[i - 4];\n        fibArray.push(nextValue);\n    }\n\n    return fibArray[n];\n};\n\n// Test cases\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "typescript/15", "language": "typescript", "completion": "const median = function (l: Array<number>): number {\n    // Sortiere die Liste zun\u00e4chst\n    l.sort((a, b) => a - b);\n    \n    const n = l.length;\n    if (n % 2 === 1) {\n        // Wenn die Anzahl der Elemente ungerade ist, gib das mittlere Element zur\u00fcck\n        return l[Math.floor(n / 2)];\n    } else {\n        // Wenn die Anzahl der Elemente gerade ist, gib das arithmetische Mittel der beiden mittleren Elemente zur\u00fcck\n        const mid1 = l[(n / 2) - 1];\n        const mid2 = l[n / 2];\n        return (mid1 + mid2) / 2;\n    }\n};\n\n// Beispielaufrufe\nconsole.log(median([3, 1, 2, 4, 5])); // Ausgabe: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Ausgabe: 15.0"}
{"task_id": "typescript/16", "language": "typescript", "completion": "const is_palindrome = function (text: string): boolean {\n    // Entferne alle nicht-alphanumerischen Zeichen und wandle den Text in Kleinbuchstaben um\n    const cleanedText = text.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    \n    // \u00dcberpr\u00fcfe, ob der bereinigte String gleich dem umgekehrten String ist\n    return cleanedText === cleanedText.split('').reverse().join('');\n};\n\n// Testf\u00e4lle\nconsole.log(is_palindrome(''));        // True\nconsole.log(is_palindrome('aba'));     // True\nconsole.log(is_palindrome('aaaaa'));   // True\nconsole.log(is_palindrome('zbcd'));    // False"}
{"task_id": "typescript/17", "language": "typescript", "completion": "const remove_vowels = function (text: string): string {\n    if (!text) return '';\n    \n    const vowels = 'aeiouAEIOU';\n    return text.split('').filter(char => !vowels.includes(char)).join('');\n};\n\n// Test cases\nconsole.log(remove_vowels('')); // ''\nconsole.log(remove_vowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(remove_vowels('abcdef')); // 'bcdf'\nconsole.log(remove_vowels('aaaaa')); // ''\nconsole.log(remove_vowels('aaBAA')); // 'B'\nconsole.log(remove_vowels('zbcd')); // 'zbcd'"}
{"task_id": "typescript/18", "language": "typescript", "completion": "const below_threshold = function (l: Array<number>, t: number): boolean {\n    // \u00dcberpr\u00fcfen, ob alle Zahlen in der Liste l kleiner als der Schwellenwert t sind\n    return l.every(num => num < t);\n};\n\n// Beispieltests\nconsole.log(below_threshold([1, 2, 4, 10], 100)); // True\nconsole.log(below_threshold([1, 20, 4, 10], 5)); // False"}
{"task_id": "typescript/19", "language": "typescript", "completion": "const add = function (x: number, y: number): number {\n    return x + y;\n};"}
{"task_id": "typescript/20", "language": "typescript", "completion": "const same_chars = function (s0: string, s1: string): boolean {\n    // Erstellen Sie ein Map f\u00fcr die H\u00e4ufigkeit der Zeichen in s0\n    const mapS0 = new Map<string, number>();\n    for (const char of s0) {\n        if (!mapS0.has(char)) {\n            mapS0.set(char, 1);\n        } else {\n            mapS0.set(char, mapS0.get(char)! + 1);\n        }\n    }\n\n    // Erstellen Sie ein Map f\u00fcr die H\u00e4ufigkeit der Zeichen in s1\n    const mapS1 = new Map<string, number>();\n    for (const char of s1) {\n        if (!mapS1.has(char)) {\n            mapS1.set(char, 1);\n        } else {\n            mapS1.set(char, mapS1.get(char)! + 1);\n        }\n    }\n\n    // Vergleichen Sie die beiden Maps\n    if (mapS0.size !== mapS1.size) {\n        return false;\n    }\n\n    for (const [key, value] of mapS0) {\n        if (!mapS1.has(key) || mapS1.get(key)! !== value) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Testf\u00e4lle\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(same_chars('abcd', 'dddddddabc')); // True\nconsole.log(same_chars('dddddddabc', 'abcd')); // True\nconsole.log(same_chars('eabcd', 'dddddddabc')); // False\nconsole.log(same_chars('abcd', 'dddddddabce')); // False\nconsole.log(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "typescript/21", "language": "typescript", "completion": "const fib = function (n: number): number {\n    if (n <= 0) return 0; // Fibonacci-Zahl f\u00fcr n <= 0 ist nicht definiert, aber wir geben 0 zur\u00fcck.\n    if (n === 1 || n === 2) return 1; // Die ersten beiden Fibonacci-Zahlen sind 1.\n\n    let a = 1, b = 1;\n    for (let i = 3; i <= n; i++) {\n        const c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n};\n\n// Testf\u00e4lle\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "typescript/22", "language": "typescript", "completion": "const common = function (l1: Array<number>, l2: Array<number>): Array<number> {\n    // Erstellen Sie ein Set aus der ersten Liste, um doppelte Elemente zu entfernen\n    const set1 = new Set(l1);\n    \n    // Erstellen Sie ein Set aus der zweiten Liste, um doppelte Elemente zu entfernen\n    const set2 = new Set(l2);\n    \n    // Finden Sie die Schnittmenge der beiden Sets\n    const intersectionSet = new Set([...set1].filter(x => set2.has(x)));\n    \n    // Konvertieren Sie das Set mit den gemeinsamen Elementen in ein Array und sortieren Sie es\n    const resultArray = Array.from(intersectionSet).sort((a, b) => a - b);\n    \n    return resultArray;\n};\n\n// Beispielaufrufe\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "typescript/23", "language": "typescript", "completion": "const largest_prime_factor = function (n: number): number {\n    // Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\n    const isPrime = (num: number): boolean => {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        if (num % 2 === 0 || num % 3 === 0) return false;\n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        return true;\n    };\n\n    let largestFactor = 1;\n\n    // Teile durch 2, bis n ungerade wird\n    while (n % 2 === 0) {\n        largestFactor = 2;\n        n /= 2;\n    }\n\n    // Pr\u00fcfe ungerade Zahlen ab 3\n    for (let i = 3; i * i <= n; i += 2) {\n        while (n % i === 0) {\n            largestFactor = i;\n            n /= i;\n        }\n    }\n\n    // Wenn n noch gr\u00f6\u00dfer als 2 ist, dann ist es ein Primfaktor\n    if (n > 2) {\n        largestFactor = n;\n    }\n\n    return largestFactor;\n};\n\n// Testf\u00e4lle\nconsole.log(largest_prime_factor(13195)); // 29\nconsole.log(largest_prime_factor(2048));   // 2"}
{"task_id": "typescript/24", "language": "typescript", "completion": "const sum_to_n = function (n: number): number {\n    return n * (n + 1) / 2;\n};\n\n// Testf\u00e4lle\nconsole.log(sum_to_n(30)); // 465\nconsole.log(sum_to_n(100)); // 5050\nconsole.log(sum_to_n(5)); // 15\nconsole.log(sum_to_n(10)); // 55\nconsole.log(sum_to_n(1)); // 1"}
{"task_id": "typescript/25", "language": "typescript", "completion": "const derivative = function (xs: Array<number>): Array<number> {\n    const result: number[] = [];\n    \n    for (let i = 1; i < xs.length; i++) {\n        result.push(i * xs[i]);\n    }\n    \n    return result;\n};"}
{"task_id": "typescript/26", "language": "typescript", "completion": "const fibfib = function (n: number): number {\n    // Memoization map to store computed values\n    const memo: {[key: number]: number} = {};\n\n    // Helper function to compute fibfib using memoization\n    const helper = (num: number): number => {\n        if (num in memo) {\n            return memo[num];\n        }\n        let result;\n        if (num === 0) {\n            result = 0;\n        } else if (num === 1) {\n            result = 0;\n        } else if (num === 2) {\n            result = 1;\n        } else {\n            result = helper(num - 1) + helper(num - 2) + helper(num - 3);\n        }\n        memo[num] = result;\n        return result;\n    };\n\n    // Call the helper function with the given number\n    return helper(n);\n};\n\n// Test cases\nconsole.log(fibfib(1)); // Output: 0\nconsole.log(fibfib(5)); // Output: 4\nconsole.log(fibfib(8)); // Output: 24"}
{"task_id": "typescript/27", "language": "typescript", "completion": "const vowels_count = function (s: string): number {\n    // Definieren Sie die Vokale\n    const vowels = \"aeiouAEIOU\";\n    \n    // Initialisieren Sie einen Z\u00e4hler f\u00fcr die Vokale\n    let count = 0;\n    \n    // Durchlaufen Sie den String und z\u00e4hlen Sie die Vokale\n    for (let char of s) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Beispielaufrufe\nconsole.log(vowels_count(\"abcde\")); // 2\nconsole.log(vowels_count(\"ACEDY\")); // 3"}
{"task_id": "typescript/28", "language": "typescript", "completion": "const search = function (lst: Array<number>): number {\n    // Erstellen eines Objekts zur Speicherung der H\u00e4ufigkeiten\n    const frequencyMap: { [key: number]: number } = {};\n\n    // Z\u00e4hlen der H\u00e4ufigkeiten aller Zahlen in der Liste\n    for (const num of lst) {\n        if (!frequencyMap[num]) {\n            frequencyMap[num] = 1;\n        } else {\n            frequencyMap[num]++;\n        }\n    }\n\n    // Finden der gr\u00f6\u00dften Zahl, die die Bedingung erf\u00fcllt\n    let result = -1;\n    for (const num in frequencyMap) {\n        const freq = frequencyMap[parseInt(num)];\n        if (freq >= parseInt(num)) {\n            result = Math.max(result, parseInt(num));\n        }\n    }\n\n    return result;\n};\n\n// Beispiele\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1"}
{"task_id": "typescript/29", "language": "typescript", "completion": "const triangle_area = function (a: number, b: number, c: number): number {\n    // \u00dcberpr\u00fcfen, ob die drei Seiten ein g\u00fcltiges Dreieck bilden\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Berechnen des halben Umfangs\n    const s = (a + b + c) / 2;\n    \n    // Berechnen der Fl\u00e4che nach der Heron-Formel\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Runden auf 2 Dezimalstellen\n    return parseFloat(area.toFixed(2));\n};\n\n// Beispielaufrufe\nconsole.log(triangle_area(3, 4, 5)); // Ausgabe: 6.00\nconsole.log(triangle_area(1, 2, 10)); // Ausgabe: -1"}
{"task_id": "typescript/30", "language": "typescript", "completion": "const will_it_fly = function (q: Array<number>, w: number) : boolean  {\n    // Pr\u00fcfen, ob die Liste eine palindromische Liste ist\n    const isPalindrome = (arr: Array<number>): boolean => {\n        for (let i = 0; i < arr.length / 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // Berechnen der Summe der Elemente in der Liste\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // \u00dcberpr\u00fcfen, ob die Liste palindromisch ist und die Summe kleiner oder gleich w ist\n    return isPalindrome(q) && sum <= w;\n};\n\n// Beispieltests\nconsole.log(will_it_fly([1, 2], 5)); // False\nconsole.log(will_it_fly([3, 2, 3], 1)); // False\nconsole.log(will_it_fly([3, 2, 3], 9)); // True\nconsole.log(will_it_fly([3], 5)); // True"}
{"task_id": "typescript/31", "language": "typescript", "completion": "const is_prime = (n: number): boolean => {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst is_multiply_prime = function (a: number): boolean {\n    for (let x = 2; x * x <= a; x++) {\n        if (a % x === 0) {\n            let y = a / x;\n            for (let z = 2; z * z <= y; z++) {\n                if (y % z === 0) {\n                    let w = y / z;\n                    if (is_prime(x) && is_prime(z) && is_prime(w)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n};\n\n// Beispiel:\nconsole.log(is_multiply_prime(30)); // True, da 30 = 2 * 3 * 5\nconsole.log(is_multiply_prime(60)); // False, keine drei Primzahlen deren Produkt 60 ergibt"}
{"task_id": "typescript/32", "language": "typescript", "completion": "const decimal_to_binary = function (decimal: number): string {\n    // Wandeln Sie die Dezimalzahl in eine Bin\u00e4rzahl um\n    const binaryString = decimal.toString(2);\n    \n    // F\u00fcgen Sie die zus\u00e4tzlichen Zeichen 'db' hinzu\n    return `db${binaryString}db`;\n};\n\n// Beispiele\nconsole.log(decimal_to_binary(15));  // \"db1111db\"\nconsole.log(decimal_to_binary(32));  // \"db100000db\""}
{"task_id": "typescript/33", "language": "typescript", "completion": "const is_happy = function (s: string): boolean {\n    // \u00dcberpr\u00fcfen, ob die L\u00e4nge des Strings mindestens 3 betr\u00e4gt\n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i <= s.length - 3; i++) {\n        // Extrahieren der drei aufeinanderfolgenden Buchstaben\n        const substring = s.substring(i, i + 3);\n        \n        // \u00dcberpr\u00fcfen, ob die drei Buchstaben unterschiedlich sind\n        if (new Set(substring).size !== 3) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Testf\u00e4lle\nconsole.log(is_happy(\"a\"));       // False\nconsole.log(is_happy(\"aa\"));      // False\nconsole.log(is_happy(\"abcd\"));    // True\nconsole.log(is_happy(\"aabb\"));    // False\nconsole.log(is_happy(\"adb\"));     // True\nconsole.log(is_happy(\"xyy\"));     // False"}
{"task_id": "typescript/34", "language": "typescript", "completion": "const numerical_letter_grade = function (grades: Array<number>): Array<string> {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        if (gpa > 3.7) return 'A';\n        if (gpa > 3.3) return 'A-';\n        if (gpa > 3.0) return 'B+';\n        if (gpa > 2.7) return 'B';\n        if (gpa > 2.3) return 'B-';\n        if (gpa > 2.0) return 'C+';\n        if (gpa > 1.7) return 'C';\n        if (gpa > 1.3) return 'C-';\n        if (gpa > 1.0) return 'D+';\n        if (gpa > 0.7) return 'D';\n        if (gpa > 0.0) return 'D-';\n        return 'E';\n    });\n};\n\n// Beispielaufruf\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "typescript/35", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst prime_length = function (string0: string): boolean {\n    const length = string0.length;\n    return isPrime(length);\n};\n\n// Beispiele\nconsole.log(prime_length('Hello')); // True\nconsole.log(prime_length('abcdcba')); // True\nconsole.log(prime_length('kittens')); // True\nconsole.log(prime_length('orange')); // False"}
{"task_id": "typescript/36", "language": "typescript", "completion": "const solve = function (N: number): string {\n    // Die Zahl N als Bin\u00e4rzahl in eine Zeichenkette umwandeln\n    const binaryString = N.toString(2);\n    \n    // Jede Ziffer der bin\u00e4ren Zeichenkette extrahieren und als Zahl interpretieren\n    let sum = 0;\n    for (let char of binaryString) {\n        sum += parseInt(char, 10);\n    }\n    \n    // Die Summe der bin\u00e4ren Zahlen in eine Zeichenkette umwandeln\n    return sum.toString();\n};\n\n// Beispieltests\nconsole.log(solve(1000)); // Ausgabe: \"1\"\nconsole.log(solve(150));  // Ausgabe: \"110\"\nconsole.log(solve(147));  // Ausgabe: \"1100\""}
{"task_id": "typescript/37", "language": "typescript", "completion": "const get_row = function (lst: Array<Array<number>>, x: number) : Array<[number, number]> {\n    // Liste f\u00fcr die gefundenen Koordinaten\n    let coordinates: Array<[number, number]> = [];\n    \n    // Alle Werte in der Liste durchlaufen und die Koordinaten finden\n    for (let y = 0; y < lst.length; y++) {\n        for (let z = 0; z < lst[y].length; z++) {\n            if (lst[y][z] === x) {\n                coordinates.push([y, z]);\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen aufsteigend und innerhalb der Zeile absteigend nach Spalten\n    coordinates.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // Absteigende Sortierung innerhalb der Zeile\n        } else {\n            return a[0] - b[0]; // Aufsteigende Sortierung nach Zeilen\n        }\n    });\n    \n    return coordinates;\n};\n\n// Beispiele\nconsole.log(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(get_row([], 1)); // == []\n\nconsole.log(get_row([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]"}
{"task_id": "typescript/38", "language": "typescript", "completion": "const next_smallest = function (lst: Array<number>): any {\n    if (lst.length < 2) return null;\n    \n    // Sort the list and remove duplicates\n    const uniqueSortedList = [...new Set(lst)].sort((a, b) => a - b);\n    \n    // Return the second smallest element or null if there is no such element\n    return uniqueSortedList.length > 1 ? uniqueSortedList[1] : null;\n};\n\n// Test cases\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // 2\nconsole.log(next_smallest([])); // null\nconsole.log(next_smallest([1, 1])); // null"}
{"task_id": "typescript/39", "language": "typescript", "completion": "const is_bored = function (S: string): number {\n    // Split the input string into sentences using '.', '?' or '!' as delimiters\n    const sentences = S.split(/[.!?]/);\n    \n    // Initialize a counter for boring sentences\n    let count = 0;\n    \n    // Iterate over each sentence\n    for (let sentence of sentences) {\n        // Trim any leading or trailing whitespace from the sentence\n        sentence = sentence.trim();\n        \n        // Check if the sentence starts with \"Ich\"\n        if (sentence.startsWith(\"Ich\")) {\n            count++;\n        }\n    }\n    \n    return count;\n};\n\n// Test cases\nconsole.log(is_bored(\"Hello world\")); // 0\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // 1"}
{"task_id": "typescript/40", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst sumOfDigits = (num: number): number => {\n    return num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n\nconst skjkasdkd = function (lst: Array<number>): number {\n    let largestPrime = -1;\n    \n    for (const num of lst) {\n        if (isPrime(num)) {\n            if (num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n    }\n    \n    if (largestPrime === -1) return 0; // No prime number found\n    \n    return sumOfDigits(largestPrime);\n};\n\n// Test cases\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "typescript/41", "language": "typescript", "completion": "const check_dict_case = function (dict: Map<any, string>): boolean {\n    if (dict.size === 0) {\n        return false;\n    }\n\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let [key, value] of dict) {\n        if (typeof key !== 'string' || !/^[a-zA-Z]+$/.test(key)) {\n            return false;\n        }\n        if (key.toLowerCase() !== key) {\n            allLowerCase = false;\n        }\n        if (key.toUpperCase() !== key) {\n            allUpperCase = false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n};\n\n// Testf\u00e4lle\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"b\", \"banana\"]]))); // True\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [\"A\", \"banana\"], [\"B\", \"banana\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"a\", \"apple\"], [8, \"banana\"], [\"a\", \"apple\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"Name\", \"John\"], [\"Age\", \"36\"], [\"City\", \"Houston\"]]))); // False\nconsole.log(check_dict_case(new Map([[\"STATE\", \"NC\"], [\"ZIP\", \"12345\"]]))); // True"}
{"task_id": "typescript/42", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst closest_integer = function (value: string): number {\n    const num = parseFloat(value);\n    \n    // If the number is exactly halfway between two integers, round away from zero.\n    if (num % 1 === 0.5 || num % 1 === -0.5) {\n        return num > 0 ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\n    }\n    \n    // Otherwise, round to the nearest integer.\n    return Math.round(num);\n};\n\n// Test cases\nconsole.log(closest_integer(\"10\"));    // Output: 10\nconsole.log(closest_integer(\"15.3\"));  // Output: 15\nconsole.log(closest_integer(\"14.5\"));  // Output: 15\nconsole.log(closest_integer(\"-14.5\")); // Output: -15"}
{"task_id": "typescript/43", "language": "typescript", "completion": "const make_a_pile = function (n: number): Array<number> {\n    let pile: number[] = [];\n    for (let i = 0; i < n; i++) {\n        if (i === 0) {\n            // Die erste Ebene hat immer n Steine\n            pile.push(n);\n        } else {\n            // Die n\u00e4chste Ebene hat die n\u00e4chste ungerade oder gerade Zahl\n            let nextStoneCount: number;\n            if (pile[i - 1] % 2 === 0) {\n                // Wenn die vorherige Ebene gerade ist, dann die n\u00e4chste gerade Zahl\n                nextStoneCount = pile[i - 1] + 1;\n            } else {\n                // Wenn die vorherige Ebene ungerade ist, dann die n\u00e4chste ungerade Zahl\n                nextStoneCount = pile[i - 1] + 2;\n            }\n            pile.push(nextStoneCount);\n        }\n    }\n    return pile;\n};\n\n// Beispiele:\nconsole.log(make_a_pile(3)); // [3, 5, 7]\nconsole.log(make_a_pile(4)); // [4, 6, 8, 10]"}
{"task_id": "typescript/44", "language": "typescript", "completion": "const words_string = function (s: string): Array<string> {\n    // Verwenden Sie einen regul\u00e4ren Ausdruck, der sowohl Kommas als auch Leerzeichen erkennt\n    return s.split(/[\\s,]+/);\n};\n\n// Beispieltests\nconsole.log(words_string(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(words_string(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "typescript/45", "language": "typescript", "completion": "const choose_num = function (x: number, y: number): number {\n    if (x > y) {\n        return -1;\n    }\n    \n    for (let i = y; i >= x; i--) {\n        if (i % 2 === 0) {\n            return i;\n        }\n    }\n    \n    return -1;\n};\n\n// Beispiele:\nconsole.log(choose_num(12, 15)); // Ausgabe: 14\nconsole.log(choose_num(13, 12)); // Ausgabe: -1"}
{"task_id": "typescript/46", "language": "typescript", "completion": "const rounded_avg = function (n: number, m: number): any {\n    if (n > m) {\n        return -1;\n    }\n    \n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    const average = sum / (m - n + 1);\n    const roundedAverage = Math.round(average);\n    \n    return `0b${roundedAverage.toString(2)}`;\n};\n\n// Beispiele:\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7, 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20, 33)); // \"0b11010\""}
{"task_id": "typescript/47", "language": "typescript", "completion": "const f = function (n: number): Array<number> {\n    const result: number[] = [];\n    \n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // Berechne die Fakult\u00e4t von i\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            // Berechne die Summe der Zahlen von 1 bis i\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    \n    return result;\n};\n\n// Beispielaufruf\nconsole.log(f(5)); // Ausgabe: [1, 2, 6, 24, 15]"}
{"task_id": "typescript/48", "language": "typescript", "completion": "const even_odd_palindrome = function (n: number): Array<number> {\n    // Hilfsfunktion, um zu pr\u00fcfen, ob eine Zahl ein Palindrom ist\n    const isPalindrome = (num: number) => {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    };\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    // Durchlaufen aller Zahlen von 1 bis n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n};\n\n// Beispielausgaben\nconsole.log(even_odd_palindrome(3)); // Ausgabe: [1, 2]\nconsole.log(even_odd_palindrome(12)); // Ausgabe: [4, 6]"}
{"task_id": "typescript/49", "language": "typescript", "completion": "const move_one_ball = function (arr: Array<number>): boolean {\n    if (arr.length === 0) return true;\n\n    // Find the index of the smallest element in the array\n    let minIndex = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[minIndex]) {\n            minIndex = i;\n        }\n    }\n\n    // Check if we can shift the smallest element to the beginning\n    const shiftedArray = [...arr.slice(minIndex + 1), ...arr.slice(0, minIndex + 1)];\n\n    // Check if the shifted array is sorted in non-decreasing order\n    for (let i = 1; i < shiftedArray.length; i++) {\n        if (shiftedArray[i] < shiftedArray[i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n// Test cases\nconsole.log(move_one_ball([3, 4, 5, 1, 2])); // True\nconsole.log(move_one_ball([3, 5, 4, 1, 2])); // False"}
{"task_id": "typescript/50", "language": "typescript", "completion": "const exchange = function (lst1: Array<number>, lst2: Array<number>): string {\n    // Pr\u00fcfe, ob alle Elemente in lst1 gerade sind\n    const isAllEven = (arr: Array<number>) => arr.every(num => num % 2 === 0);\n    \n    if (isAllEven(lst1)) {\n        return \"YES\";\n    }\n    \n    // Pr\u00fcfe, ob es m\u00f6glich ist, ein ungerades Element in lst1 durch ein gerades Element in lst2 zu ersetzen\n    const hasOddInLst1 = lst1.some(num => num % 2 !== 0);\n    const hasEvenInLst2 = lst2.some(num => num % 2 === 0);\n    \n    if (hasOddInLst1 && hasEvenInLst2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n};\n\n// Beispiele\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "typescript/51", "language": "typescript", "completion": "const reverse_delete = function (s: string, c: string) : Array<any>  {\n    // Erstellen einer neuen Zeichenkette ohne die in c enthaltenen Zeichen\n    let result = s.split('').filter(char => !c.includes(char)).join('');\n    \n    // \u00dcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist\n    const isPalindrome = (str: string) => str === str.split('').reverse().join('');\n    \n    return [result, isPalindrome(result)];\n};\n\n// Beispieltests\nconsole.log(reverse_delete(\"abcde\", \"ae\")); // Ausgabe: ['bcd', False]\nconsole.log(reverse_delete(\"abcdef\", \"b\")); // Ausgabe: ['acdef', False]\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\")); // Ausgabe: ['cdedc', True]"}
{"task_id": "typescript/52", "language": "typescript", "completion": "const max_fill = function (grid: Array<Array<number>>, capacity: number) : number {\n    let totalMoves = 0;\n    \n    for (let row of grid) {\n        const waterCount = row.reduce((sum, cell) => sum + cell, 0);\n        if (waterCount > 0) {\n            totalMoves += Math.ceil(waterCount / capacity);\n        }\n    }\n    \n    return totalMoves;\n};\n\n// Beispiel 1:\nconsole.log(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Ausgabe: 6\n\n// Beispiel 2:\nconsole.log(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Ausgabe: 5\n\n// Beispiel 3:\nconsole.log(max_fill([[0,0,0], [0,0,0]], 5)); // Ausgabe: 0"}
{"task_id": "typescript/53", "language": "typescript", "completion": "const select_words = function (s: string, n: number): Array<string> {\n    // Leere Liste zur\u00fcckgeben, wenn die Eingabezeichenkette leer ist\n    if (s.trim() === \"\") {\n        return [];\n    }\n\n    // W\u00f6rter trennen und in ein Array speichern\n    const words = s.split(/\\s+/);\n\n    // Funktion zur \u00dcberpr\u00fcfung, ob ein Buchstabe ein Konsonant ist\n    const isConsonant = (char: string): boolean => /^[a-zA-Z]$/.test(char) && !['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase());\n\n    // Liste der W\u00f6rter mit genau n Konsonanten filtern\n    const result = words.filter(word => {\n        const consonantsCount = word.split('').filter(isConsonant).length;\n        return consonantsCount === n;\n    });\n\n    return result;\n};\n\n// Beispiele\nconsole.log(select_words(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(select_words(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(select_words(\"simple white space\", 2)); // []\nconsole.log(select_words(\"Hello world\", 4)); // [\"world\"]\nconsole.log(select_words(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "typescript/54", "language": "typescript", "completion": "const maximum = function (arr: Array<number>, k: number): Array<number> {\n    // Sortiere das Array in absteigender Reihenfolge\n    const sortedArr = arr.sort((a, b) => b - a);\n    \n    // Gib die ersten k Elemente des sortierten Arrays zur\u00fcck\n    return sortedArr.slice(0, k);\n};\n\n// Beispiel 1\nconsole.log(maximum([-3, -4, 5], 3)); // Ausgabe: [-4, -3, 5]\n\n// Beispiel 2\nconsole.log(maximum([4, -4, 4], 2)); // Ausgabe: [4, 4]\n\n// Beispiel 3\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Ausgabe: [2]"}
{"task_id": "typescript/55", "language": "typescript", "completion": "const add_elements = function (arr: Array<number>, k: number): number {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n};\n\n// Beispiel:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(add_elements(arr, k)); // Ausgabe: 24"}
{"task_id": "typescript/56", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst intersection = function (interval1: Array<number>, interval2: Array<number>): string {\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n\n    // Find the start and end of the intersection\n    const startIntersection = Math.max(start1, start2);\n    const endIntersection = Math.min(end1, end2);\n\n    // Check if there is an intersection\n    if (startIntersection > endIntersection) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection\n    const lengthIntersection = endIntersection - startIntersection + 1;\n\n    // Check if the length is a prime number\n    if (isPrime(lengthIntersection)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n};\n\n// Beispieltests\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\""}
{"task_id": "typescript/57", "language": "typescript", "completion": "const tri = function (n: number): Array<number> {\n    // Hilfsfunktion zur Berechnung von tri(n)\n    const calculateTribonacci = (num: number): number => {\n        if (num === 0) return 1; // tri(0) = 1 nach der gegebenen Definition\n        if (num === 1) return 3; // tri(1) = 3 nach der gegebenen Definition\n        if (num % 2 === 0) {\n            return 1 + num / 2; // wenn n gerade ist\n        } else {\n            return calculateTribonacci(num - 1) + calculateTribonacci(num - 2) + calculateTribonacci(num + 1); // wenn n ungerade ist\n        }\n    };\n\n    const result: Array<number> = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(calculateTribonacci(i));\n    }\n    return result;\n};\n\n// Beispielaufrufe\nconsole.log(tri(3)); // [1, 3, 2, 8]\nconsole.log(tri(4)); // [1, 3, 2, 8, 3]\nconsole.log(tri(5)); // [1, 3, 2, 8, 3, 14]"}
{"task_id": "typescript/58", "language": "typescript", "completion": "const digits = function (n: number): number {\n    // Wandeln Sie die Zahl in eine Zeichenkette um\n    const str = n.toString();\n    \n    // Initialisieren Sie das Produkt der ungeraden Ziffern\n    let product = 1;\n    \n    // Durchlaufen Sie jede Ziffer im String\n    for (let char of str) {\n        const digit = parseInt(char, 10);\n        \n        // \u00dcberpr\u00fcfen Sie, ob die Ziffer ungerade ist\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n    }\n    \n    // Wenn alle Ziffern gerade sind, gib 0 zur\u00fcck\n    return product === 1 && str.length > 0 ? 0 : product;\n};\n\n// Testf\u00e4lle\nconsole.log(digits(1));   // 1\nconsole.log(digits(4));   // 0\nconsole.log(digits(235)); // 15"}
{"task_id": "typescript/59", "language": "typescript", "completion": "const is_nested = function (string0: string): boolean {\n    // Initialize a counter to keep track of nested levels\n    let count = 0;\n    \n    // Iterate through each character in the string\n    for (let char of string0) {\n        if (char === '[') {\n            // Increment the counter when an opening bracket is found\n            count++;\n        } else if (char === ']') {\n            // Decrement the counter when a closing bracket is found\n            count--;\n        }\n        \n        // If at any point the counter goes negative, it means there's a closing bracket before an opening one\n        if (count < 0) {\n            return false;\n        }\n    }\n    \n    // The string is validly nested if the counter is zero or positive and not all brackets are used for nesting\n    return count === 0 || count > 1;\n};\n\n// Test cases\nconsole.log(is_nested('[[]]')); // True\nconsole.log(is_nested('[]]]]]]][[[[[]')); // False\nconsole.log(is_nested('[][]')); // False\nconsole.log(is_nested('[]')); // False\nconsole.log(is_nested('[[][]]')); // True\nconsole.log(is_nested('[[]][[')); // True"}
{"task_id": "typescript/60", "language": "typescript", "completion": "import * as math from 'mathjs';\n\nconst sum_squares = function (lst: Array<number>): number {\n    // Runden Sie jedes Element in der Liste auf die n\u00e4chste Ganzzahl (Ceiling)\n    const roundedList = lst.map(num => Math.ceil(num));\n    \n    // Quadrieren Sie jeden gerundeten Wert und summieren Sie sie\n    const squaredSum = roundedList.reduce((sum, num) => sum + math.square(num), 0);\n    \n    return squaredSum;\n};\n\n// Beispiele\nconsole.log(sum_squares([1, 2, 3])); // Ausgabe: 14\nconsole.log(sum_squares([1, 4, 9])); // Ausgabe: 98\nconsole.log(sum_squares([1, 3, 5, 7])); // Ausgabe: 84\nconsole.log(sum_squares([1.4, 4.2, 0])); // Ausgabe: 29\nconsole.log(sum_squares([-2.4, 1, 1])); // Ausgabe: 6"}
{"task_id": "typescript/61", "language": "typescript", "completion": "const check_if_last_char_is_a_letter = function (txt: string): boolean {\n    // Entfernen Sie m\u00f6gliche f\u00fchrende und nachfolgende Leerzeichen\n    txt = txt.trim();\n    \n    // Wenn der String leer ist, geben Sie False zur\u00fcck\n    if (txt.length === 0) {\n        return false;\n    }\n    \n    // \u00dcberpr\u00fcfen Sie das letzte Zeichen des Strings\n    const lastChar = txt[txt.length - 1];\n    \n    // \u00dcberpr\u00fcfen, ob das letzte Zeichen ein Buchstabe ist und nicht Teil eines Wortes\n    return /^[a-zA-Z]$/.test(lastChar) && !/\\s/.test(lastChar);\n};\n\n// Beispiele testen\nconsole.log(check_if_last_char_is_a_letter(\"apple pie\")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e\")); // \u279e True\nconsole.log(check_if_last_char_is_a_letter(\"apple pi e \")); // \u279e False\nconsole.log(check_if_last_char_is_a_letter(\"\")); // \u279e False"}
{"task_id": "typescript/62", "language": "typescript", "completion": "const can_arrange = function (arr: Array<number>): number {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n// Beispiele:\nconsole.log(can_arrange([1, 2, 4, 3, 5])); // Ausgabe: 3\nconsole.log(can_arrange([1, 2, 3]));       // Ausgabe: -1"}
{"task_id": "typescript/63", "language": "typescript", "completion": "const largest_smallest_integers = function (lst: Array<number>): [any, any] {\n    let a: number | null = null;\n    let b: number | null = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (!a || num > a) {\n                a = num;\n            }\n        } else if (num > 0) {\n            if (!b || num < b) {\n                b = num;\n            }\n        }\n    }\n\n    return [a, b];\n};\n\n// Beispiele:\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largest_smallest_integers([])); // [null, null]\nconsole.log(largest_smallest_integers([0])); // [null, null]"}
{"task_id": "typescript/64", "language": "typescript", "completion": "const special_factorial = function (n: number): number {\n    if (n <= 0) {\n        throw new Error(\"Die Eingabe muss gr\u00f6\u00dfer als 0 sein.\");\n    }\n\n    const calculateFactorial = (num: number): number => {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    };\n\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= calculateFactorial(i);\n    }\n\n    return result;\n};\n\n// Beispielaufruf:\nconsole.log(special_factorial(4)); // Ausgabe: 288"}
{"task_id": "typescript/65", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i * i <= num; i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n};\n\nconst words_in_sentence = function (sentence: string): string {\n    const words = sentence.split(' ');\n    const resultWords = words.filter(word => isPrime(word.length));\n    return resultWords.join(' ');\n};\n\n// Beispiel 1\nconsole.log(words_in_sentence(\"This is a test\")); // Ausgabe: \"is\"\n\n// Beispiel 2\nconsole.log(words_in_sentence(\"lets go for swimming\")); // Ausgabe: \"go for\""}
{"task_id": "typescript/66", "language": "typescript", "completion": "const simplify = function (x: string, n: string) : boolean {\n    // Funktion zur Berechnung des gr\u00f6\u00dften gemeinsamen Teilers (GCD)\n    const gcd = (a: number, b: number): number => {\n        while (b !== 0) {\n            const temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    };\n\n    // Funktion zur Vereinfachung eines Bruchs\n    const simplifyFraction = (num: number, den: number): [number, number] => {\n        const divisor = gcd(num, den);\n        return [num / divisor, den / divisor];\n    };\n\n    // Zeichenketten in Zahlen umwandeln\n    const [xNum, xDen] = x.split('/').map(Number);\n    const [nNum, nDen] = n.split('/').map(Number);\n\n    // Multiplikation der Bruchzahlen\n    const resultNum = xNum * nNum;\n    const resultDen = xDen * nDen;\n\n    // Vereinfachung des Ergebnisses\n    const [simplifiedNum, simplifiedDen] = simplifyFraction(resultNum, resultDen);\n\n    // \u00dcberpr\u00fcfung, ob das vereinfachte Ergebnis eine ganze Zahl ist\n    return simplifiedDen === 1;\n};\n\n// Testf\u00e4lle\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "typescript/67", "language": "typescript", "completion": "const sumOfDigits = (num: number): number => {\n    return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n};\n\nconst order_by_points = function (nums: Array<number>): Array<number> {\n    return nums.slice().sort((a, b) => {\n        const sumA = sumOfDigits(a);\n        const sumB = sumOfDigits(b);\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sumA - sumB;\n    });\n};\n\n// Beispieltestf\u00e4lle\nconsole.log(order_by_points([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(order_by_points([])); // []"}
{"task_id": "typescript/68", "language": "typescript", "completion": "const specialFilter = function (nums: Array<number>): number {\n    return nums.filter(num => num > 10 && isOddDigit(getFirstDigit(num)) && isOddDigit(getLastDigit(num))).length;\n};\n\nfunction getFirstDigit(num: number): number {\n    let n = Math.abs(num);\n    while (n >= 10) {\n        n /= 10;\n    }\n    return Math.floor(n);\n}\n\nfunction getLastDigit(num: number): number {\n    return Math.abs(num % 10);\n}\n\nfunction isOddDigit(digit: number): boolean {\n    return digit % 2 !== 0;\n}\n\n// Beispiele\nconsole.log(specialFilter([15, -73, 14, -15])); // Ausgabe: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Ausgabe: 2"}
{"task_id": "typescript/69", "language": "typescript", "completion": "const get_max_triples = function (n: number): number {\n    // Array a erstellen mit den Werten i * i - i + 1 f\u00fcr 1 \u2264 i \u2264 n\n    const a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    // Z\u00e4hler f\u00fcr g\u00fcltige Tripel\n    let count = 0;\n\n    // Alle m\u00f6glichen Tripel (i, j, k) durchlaufen mit i < j < k\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n};\n\n// Beispieltestfall\nconsole.log(get_max_triples(5)); // Ausgabe: 1"}
{"task_id": "typescript/70", "language": "typescript", "completion": "const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\nconst bf = function (planet1: string, planet2: string): Array<string> {\n    // Check if both planet names are valid\n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return [];\n    }\n\n    // Find the indices of the given planets\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\n    // Determine the range between the two indices\n    const startIndex = Math.min(index1, index2) + 1;\n    const endIndex = Math.max(index1, index2) - 1;\n\n    // Collect all planets in the range (excluding the given planets themselves)\n    const result: Array<string> = [];\n    for (let i = startIndex; i <= endIndex; i++) {\n        result.push(planets[i]);\n    }\n\n    return result;\n};\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "typescript/71", "language": "typescript", "completion": "const isPrime = (num: number): boolean => {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n};\n\nconst x_or_y = function (n: number, x: number, y: number): number {\n    return isPrime(n) ? x : y;\n};\n\n// Beispiele:\nconsole.log(x_or_y(7, 34, 12)); // Ausgabe: 34\nconsole.log(x_or_y(15, 8, 5));  // Ausgabe: 5"}
{"task_id": "typescript/72", "language": "typescript", "completion": "const double_the_difference = function (lst: Array<number>): number {\n    // Filter the list to include only positive integers and odd numbers\n    const filteredList = lst.filter(num => num > 0 && Number.isInteger(num) && num % 2 !== 0);\n    \n    // If the filtered list is empty, return 0\n    if (filteredList.length === 0) {\n        return 0;\n    }\n    \n    // Calculate the sum of the squares of the odd numbers\n    const sumOfSquares = filteredList.reduce((sum, num) => sum + num * num, 0);\n    \n    return sumOfSquares;\n};\n\n// Test cases\nconsole.log(double_the_difference([1, 3, 2, 0])); // Output: 10\nconsole.log(double_the_difference([-1, -2, 0])); // Output: 0\nconsole.log(double_the_difference([9, -2])); // Output: 81\nconsole.log(double_the_difference([0])); // Output: 0"}
{"task_id": "typescript/73", "language": "typescript", "completion": "const Strongest_Extension = function (class_name: string, extensions: Array<string>): string {\n    // Function to calculate the strength of an extension\n    const calculateStrength = (extension: string) => {\n        let capCount = 0;\n        let smCount = 0;\n        for (const char of extension) {\n            if (/[A-Z]/.test(char)) {\n                capCount++;\n            } else if (/[a-z]/.test(char)) {\n                smCount++;\n            }\n        }\n        return capCount - smCount;\n    };\n\n    // Find the strongest extension\n    let strongestExtension = '';\n    let maxStrength = Number.MIN_SAFE_INTEGER;\n\n    for (const ext of extensions) {\n        const strength = calculateStrength(ext);\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestExtension = ext;\n        }\n    }\n\n    // Return the result in the format: ClassName.StrongestExtensionName\n    return `${class_name}.${strongestExtension}`;\n};\n\n// Example usage:\nconsole.log(Strongest_Extension('my_class', ['AA', 'Be', 'CC'])); // Output: my_class.AA"}
{"task_id": "typescript/74", "language": "typescript", "completion": "const cycpattern_check = function (a: string, b: string): boolean {\n    if (b.length > a.length) return false;\n    \n    // Erweitern Sie den String b, um alle Rotationen zu testen\n    const extendedB = b + b;\n    \n    // \u00dcberpr\u00fcfen Sie, ob a ein Teilstring von extendedB ist\n    return extendedB.includes(a);\n};\n\n// Testf\u00e4lle\nconsole.log(cycpattern_check(\"abcd\", \"abd\")); // False\nconsole.log(cycpattern_check(\"hello\", \"ell\")); // True\nconsole.log(cycpattern_check(\"whassup\", \"psus\")); // False\nconsole.log(cycpattern_check(\"abab\", \"baa\")); // True\nconsole.log(cycpattern_check(\"efef\", \"eeff\")); // False\nconsole.log(cycpattern_check(\"himenss\", \"simen\")); // True"}
{"task_id": "typescript/75", "language": "typescript", "completion": "const int_to_mini_roman = function (number0: number): string {\n    const romanNumerals: [number, string][] = [\n        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i']\n    ];\n\n    let number = number0;\n    let result = '';\n\n    for (const [value, symbol] of romanNumerals) {\n        while (number >= value) {\n            result += symbol;\n            number -= value;\n        }\n    }\n\n    return result.toLowerCase();\n};\n\n// Beispiele:\nconsole.log(int_to_mini_roman(19)); // 'xix'\nconsole.log(int_to_mini_roman(152)); // 'clii'\nconsole.log(int_to_mini_roman(426)); // 'cdxxvi'"}
{"task_id": "typescript/76", "language": "typescript", "completion": "const right_angle_triangle = function (a: number, b: number, c: number): boolean {\n    // Stellen wir sicher, dass a, b und c der Gr\u00f6\u00dfe nach sortiert sind\n    const sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Anwenden des Satzes von Pythagoras: a^2 + b^2 = c^2\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n};\n\n// Beispiele\nconsole.log(right_angle_triangle(3, 4, 5)); // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False"}
{"task_id": "typescript/77", "language": "typescript", "completion": "const solve = function (s: string): string {\n    let result = '';\n\n    for (let i = 0; i < s.length; i++) {\n        if (/[a-zA-Z]/.test(s[i])) {\n            // Wenn das Zeichen ein Buchstabe ist, kehre die Gro\u00df- und Kleinschreibung um\n            result += /[a-z]/.test(s[i]) ? s[i].toUpperCase() : s[i].toLowerCase();\n        } else {\n            // Andernfalls belasse das Zeichen unver\u00e4ndert\n            result += s[i];\n        }\n    }\n\n    return result;\n};\n\n// Beispiele\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\"));   // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "typescript/78", "language": "typescript", "completion": "import crypto from 'crypto';\n\nconst string_to_md5 = function (text: string): string | null {\n    if (!text) {\n        return null;\n    }\n    const hashSum = crypto.createHash('md5');\n    hashSum.update(text);\n    return hashSum.digest('hex');\n};\n\n// Beispielaufruf:\nconsole.log(string_to_md5('Hello world')); // Ausgabe: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "typescript/79", "language": "typescript", "completion": "const generate_integers = function (a: number, b: number): Array<number> {\n    const result: number[] = [];\n    \n    // Stellen Sie sicher, dass a und b in der richtigen Reihenfolge sind\n    const start = Math.min(a, b);\n    const end = Math.max(a, b);\n    \n    for (let i = start; i <= end; i++) {\n        if (isEven(i)) {\n            result.push(i);\n        }\n    }\n    \n    return result;\n};\n\n// Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl gerade ist\nconst isEven = function (num: number): boolean {\n    return num % 2 === 0;\n};\n\n// Beispiele\nconsole.log(generate_integers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generate_integers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generate_integers(10, 14)); // []"}

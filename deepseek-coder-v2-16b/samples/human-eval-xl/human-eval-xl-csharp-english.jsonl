{"task_id": "csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You're given a list of deposit and withdrawal operations on a bank account that starts with\n        /// zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n        /// at that point function should return True. Otherwise it should return False.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero(List<int> operations) \n        {\n            int balance = 0;\n            \n            foreach (int operation in operations)\n            {\n                balance += operation;\n                \n                if (balance < 0)\n                {\n                    return true;\n                }\n            }\n            \n            return false;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(BelowZero(new List<int> { 1, 2, 3 })); // False\n            Console.WriteLine(BelowZero(new List<int> { 1, 2, -4, 5 })); // True\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        /// Empty sum should be equal to 0 and empty product should be equal to 1.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static List<int> SumProduct(List<int> numbers) \n        {\n            int sum = 0;\n            int product = 1;\n\n            if (numbers.Count > 0)\n            {\n                foreach (int number in numbers)\n                {\n                    sum += number;\n                    product *= number;\n                }\n            }\n\n            return new List<int> { sum, product };\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SumProduct([])); // Output: (0, 1)\n            Console.WriteLine(SumProduct([1, 2, 3, 4])); // Output: (10, 24)\n        }\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input are two strings a and b consisting only of 1s and 0s.\n        /// Perform binary XOR on these inputs and return result also as a string.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor(string a, string b)\n        {\n            // Ensure both strings are of the same length\n            if (a.Length != b.Length)\n            {\n                throw new ArgumentException(\"Input strings must be of the same length\");\n            }\n\n            char[] result = new char[a.Length];\n\n            for (int i = 0; i < a.Length; i++)\n            {\n                // Perform XOR operation on each character\n                if (a[i] == b[i])\n                {\n                    result[i] = '0';\n                }\n                else\n                {\n                    result[i] = '1';\n                }\n            }\n\n            return new string(result);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the StringXor method\n            string a = \"010\";\n            string b = \"110\";\n            Console.WriteLine($\"String XOR of '{a}' and '{b}': {StringXor(a, b)}\");\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest(List<string> strings) \n        {\n            if (strings == null || !strings.Any())\n            {\n                return \"None\";\n            }\n\n            string longestString = strings.First();\n            foreach (var str in strings)\n            {\n                if (str.Length > longestString.Length)\n                {\n                    longestString = str;\n                }\n            }\n\n            return longestString;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Longest(new List<string>())); // Output: None\n            Console.WriteLine(Longest(new List<string> { \"a\", \"b\", \"c\" })); // Output: a\n            Console.WriteLine(Longest(new List<string> { \"a\", \"bb\", \"ccc\" })); // Output: ccc\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return a greatest common divisor of two integers a and b\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor (int a, int b) \n        {\n            // Ensure the inputs are positive integers\n            if (a < 0 || b < 0)\n                throw new ArgumentException(\"Both numbers must be non-negative.\");\n\n            // Euclidean algorithm using modulo operation for efficiency\n            while (b != 0)\n            {\n                int temp = b;\n                b = a % b;\n                a = temp;\n            }\n            return a;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(GreatestCommonDivisor(3, 5)); // Output: 1\n            Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n        }\n    }\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        /// Return the string with numbers sorted from smallest to largest\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers(string numbers) \n        {\n            // Mapping of number words to their numeric values\n            Dictionary<string, int> wordToNumber = new Dictionary<string, int>\n            {\n                { \"zero\", 0 },\n                { \"one\", 1 },\n                { \"two\", 2 },\n                { \"three\", 3 },\n                { \"four\", 4 },\n                { \"five\", 5 },\n                { \"six\", 6 },\n                { \"seven\", 7 },\n                { \"eight\", 8 },\n                { \"nine\", 9 }\n            };\n\n            // Split the input string into individual words\n            List<string> numberWords = numbers.Split(' ').ToList();\n\n            // Convert the words to their numeric values using the mapping\n            List<int> numberValues = numberWords.Select(word => wordToNumber[word]).ToList();\n\n            // Sort the numeric values\n            numberValues.Sort();\n\n            // Map the sorted numeric values back to their word representations\n            List<string> sortedNumberWords = numberValues.Select(value => \n                wordToNumber.FirstOrDefault(pair => pair.Value == value).Key).ToList();\n\n            // Join the sorted words into a space-delimited string\n            string result = string.Join(\" \", sortedNumberWords);\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SortNumbers(\"three one five\")); // Output: \"one three five\"\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit(List<double> numbers)\n        {\n            if (numbers == null || numbers.Count < 2)\n            {\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n            }\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n            double range = max - min;\n\n            List<double> rescaledNumbers = new List<double>();\n            foreach (var number in numbers)\n            {\n                double rescaledValue = (number - min) / range;\n                rescaledNumbers.Add(rescaledValue);\n            }\n\n            return rescaledNumbers;\n        }\n\n        static void Main(string[] args)\n        {\n            List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n            List<double> rescaledNumbers = RescaleToUnit(numbers);\n            Console.WriteLine(string.Join(\", \", rescaledNumbers)); // Output: 0.0, 0.25, 0.5, 0.75, 1.0\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// </summary>\n        public static string FlipCase(string str) \n        {\n            char[] chars = str.ToCharArray();\n            for (int i = 0; i < chars.Length; i++)\n            {\n                if (char.IsLower(chars[i]))\n                {\n                    chars[i] = char.ToUpper(chars[i]);\n                }\n                else if (char.IsUpper(chars[i]))\n                {\n                    chars[i] = char.ToLower(chars[i]);\n                }\n            }\n            return new string(chars);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the FlipCase method\n            string testString = \"Hello\";\n            Console.WriteLine(FlipCase(testString));  // Output: hELLO\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive(List<int> l) \n        {\n            return l.Where(num => num > 0).ToList();\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", GetPositive(new List<int> {-1, 2, -4, 5, 6})));\n            Console.WriteLine(string.Join(\", \", GetPositive(new List<int> {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n        }\n    }\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool IsPrime(int n)\n    {\n        // Handle edge cases: numbers less than 2 are not prime\n        if (n <= 1) return false;\n        \n        // Check divisibility by all numbers from 2 to the square root of n\n        for (int i = 2; i * i <= n; i++)\n        {\n            if (n % i == 0) return false;\n        }\n        \n        return true;\n    }\n\n    public static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(IsPrime(6));   // False\n        Console.WriteLine(IsPrime(101)); // True\n        Console.WriteLine(IsPrime(11));  // True\n        Console.WriteLine(IsPrime(13441)); // True\n        Console.WriteLine(IsPrime(61));  // True\n        Console.WriteLine(IsPrime(4));   // False\n        Console.WriteLine(IsPrime(1));   // False\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique(List<int> l) \n        {\n            // Use LINQ to select distinct elements and then sort them\n            return l.Distinct().OrderBy(x => x).ToList();\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> numbers = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> uniqueSortedNumbers = Unique(numbers);\n            Console.WriteLine(string.Join(\", \", uniqueSortedNumbers)); // Output: 0, 2, 3, 5, 9, 123\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// PrimeFib returns n-th number that is a Fibonacci number and it's also prime.\n        /// >>> PrimeFib(1)\n        /// 2\n        /// >>> PrimeFib(2)\n        /// 3\n        /// >>> PrimeFib(3)\n        /// 5\n        /// >>> PrimeFib(4)\n        /// 13\n        /// >>> PrimeFib(5)\n        /// 89\n        /// \n        /// </summary>\n        public static int PrimeFib(int n)\n        {\n            List<long> fibonacciNumbers = new List<long>();\n            long a = 0, b = 1;\n            while (true)\n            {\n                long next = a + b;\n                if (IsPrime(next))\n                {\n                    fibonacciNumbers.Add(next);\n                    if (fibonacciNumbers.Count >= n)\n                    {\n                        return (int)fibonacciNumbers[n - 1];\n                    }\n                }\n                a = b;\n                b = next;\n            }\n        }\n\n        private static bool IsPrime(long number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            for (long i = 3; i * i <= number; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n        }\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// TriplesSumToZero takes a list of integers as an input.\n        /// it returns True if there are three distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// \n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero(List<int> l)\n        {\n            if (l == null || l.Count < 3)\n                return false;\n\n            for (int i = 0; i < l.Count - 2; i++)\n            {\n                for (int j = i + 1; j < l.Count - 1; j++)\n                {\n                    int target = -(l[i] + l[j]);\n                    if (l.Contains(target) && l.IndexOf(target) != i && l.IndexOf(target) != j)\n                    {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static bool PairsSumToZero(List<int> l)\n    {\n        if (l == null || l.Count < 2)\n            return false;\n\n        HashSet<int> seenNumbers = new HashSet<int>();\n\n        foreach (int number in l)\n        {\n            if (seenNumbers.Contains(-number))\n                return true;\n            seenNumbers.Add(number);\n        }\n\n        return false;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n        Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, -2, 1 })); // False\n        Console.WriteLine(PairsSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n        Console.WriteLine(PairsSumToZero(new List<int> { 2, 4, -5, 3, 5, 7 })); // True\n        Console.WriteLine(PairsSumToZero(new List<int> { 1 })); // False\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Computes the n-th element of the Fib4 number sequence.\n        /// </summary>\n        public static int Fib4(int n)\n        {\n            if (n < 0) throw new ArgumentException(\"n must be non-negative\");\n            \n            // Base cases\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 2;\n            if (n == 3) return 0;\n\n            int[] fib4Sequence = new int[n + 1];\n            fib4Sequence[0] = 0;\n            fib4Sequence[1] = 0;\n            fib4Sequence[2] = 2;\n            fib4Sequence[3] = 0;\n\n            for (int i = 4; i <= n; i++)\n            {\n                fib4Sequence[i] = fib4Sequence[i - 1] + fib4Sequence[i - 2] + fib4Sequence[i - 3] + fib4Sequence[i - 4];\n            }\n\n            return fib4Sequence[n];\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Fib4(5)); // Output: 4\n            Console.WriteLine(Fib4(6)); // Output: 8\n            Console.WriteLine(Fib4(7)); // Output: 14\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return Median of elements in the list l.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median(List<int> l) \n        {\n            // Sort the list\n            l.Sort();\n            \n            int count = l.Count;\n            if (count % 2 == 0)\n            {\n                // If even number of elements, average the two middle values\n                int midIndex1 = count / 2 - 1;\n                int midIndex2 = count / 2;\n                return (l[midIndex1] + l[midIndex2]) / 2.0;\n            }\n            else\n            {\n                // If odd number of elements, return the middle value\n                int midIndex = count / 2;\n                return l[midIndex];\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Median(new List<int> { 3, 1, 2, 4, 5 })); // Output: 3\n            Console.WriteLine(Median(new List<int> { -10, 4, 6, 1000, 10, 20 })); // Output: 15.0\n        }\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Checks if given string is a palindrome\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// </summary>\n        public static bool IsPalindrome(string text)\n        {\n            // Remove all non-letter characters and convert to lowercase\n            string cleanedText = new string(text.Where(char.IsLetter).ToArray()).ToLower();\n            \n            // Check if the cleaned text is a palindrome\n            int left = 0;\n            int right = cleanedText.Length - 1;\n            \n            while (left < right)\n            {\n                if (cleanedText[left] != cleanedText[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            \n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsPalindrome(\"\")); // True\n            Console.WriteLine(IsPalindrome(\"aba\")); // True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// RemoveVowels is a function that takes string and returns string without vowels.\n        /// </summary>\n        public static string RemoveVowels(string text)\n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return text;\n            }\n\n            // Define a regular expression to match all vowels (both lowercase and uppercase)\n            string pattern = \"[aeiouAEIOU]\";\n            Regex regex = new Regex(pattern);\n\n            // Replace all matched vowels with an empty string\n            string result = regex.Replace(text, \"\");\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(RemoveVowels(\"\")); // Output: ''\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // Output: 'bcdf\\nghjklm'\n            Console.WriteLine(RemoveVowels('abcdef')); // Output: 'bcdf'\n            Console.WriteLine(RemoveVowels('aaaaa')); // Output: ''\n            Console.WriteLine(RemoveVowels('aaBAA')); // Output: 'B'\n            Console.WriteLine(RemoveVowels('zbcd')); // Output: 'zbcd'\n        }\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if all numbers in the list l are below threshold t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold(List<int> l, int t) \n        {\n            // Check if all numbers in the list are below the threshold\n            return l.All(num => num < t);\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 2, 4, 10 }, 100)); // True\n            Console.WriteLine(BelowThreshold(new List<int> { 1, 20, 4, 10 }, 5)); // False\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "return x + y;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Add(2, 3)); // Output: 5\n            Console.WriteLine(Add(5, 7)); // Output: 12\n        }\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Check if two words have the same characters.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// </summary>\n        public static bool SameChars(string s0, string s1) \n        {\n            // Remove duplicate characters from both strings and sort them\n            var sortedS0 = new string(s0.Distinct().OrderBy(c => c).ToArray());\n            var sortedS1 = new string(s1.Distinct().OrderBy(c => c).ToArray());\n            \n            // Compare the sorted strings\n            return sortedS0 == sortedS1;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n            Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n            Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return n-th Fibonacci number.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// \n        /// </summary>\n        public static int Fib(int n)\n        {\n            if (n <= 0) throw new ArgumentException(\"n must be a positive integer\");\n            if (n == 1 || n == 2) return 1;\n\n            int a = 1, b = 1;\n            for (int i = 3; i <= n; i++)\n            {\n                int c = a + b;\n                a = b;\n                b = c;\n            }\n            return b;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Fib(10)); // Output: 55\n            Console.WriteLine(Fib(1));  // Output: 1\n            Console.WriteLine(Fib(8));  // Output: 21\n        }\n    }\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted unique Common elements for two lists.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// </summary>\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Convert lists to HashSets to remove duplicates and for faster intersection operation\n            HashSet<int> set1 = new HashSet<int>(l1);\n            HashSet<int> set2 = new HashSet<int>(l2);\n\n            // Perform intersection to find common elements\n            HashSet<int> commonSet = new HashSet<int>(set1);\n            commonSet.IntersectWith(set2);\n\n            // Convert the result back to a List and sort it\n            List<int> commonList = new List<int>(commonSet);\n            commonList.Sort();\n\n            return commonList;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", Common(new List<int> { 1, 4, 3, 34, 653, 2, 5 }, new List<int> { 5, 7, 1, 5, 9, 653, 121 }))); // Output: [1, 5, 653]\n            Console.WriteLine(string.Join(\", \", Common(new List<int> { 5, 3, 2, 8 }, new List<int> { 3, 2 }))); // Output: [2, 3]\n        }\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n        /// >>> LargestPrimeFactor(13195)\n        /// 29\n        /// >>> LargestPrimeFactor(2048)\n        /// 2\n        /// </summary>\n        public static int LargestPrimeFactor(int n)\n        {\n            // Handle the smallest prime factor, which is 2\n            while (n % 2 == 0)\n            {\n                n /= 2;\n            }\n\n            // Check for odd factors from 3 onwards\n            for (int i = 3; i * i <= n; i += 2)\n            {\n                while (n % i == 0)\n                {\n                    n /= i;\n                }\n            }\n\n            // If n is still greater than 2, then it must be a prime number itself\n            if (n > 2)\n            {\n                return n;\n            }\n\n            // The largest factor will be the last non-zero remainder obtained\n            return n / 2;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n            Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// SumToN is a function that sums numbers from 1 to n.\n        /// >>> SumToN(30)\n        /// 465\n        /// >>> SumToN(100)\n        /// 5050\n        /// >>> SumToN(5)\n        /// 15\n        /// >>> SumToN(10)\n        /// 55\n        /// >>> SumToN(1)\n        /// 1\n        /// \n        /// </summary>\n        public static int SumToN(int n)\n        {\n            return n * (n + 1) / 2;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SumToN(30)); // Output: 465\n            Console.WriteLine(SumToN(100)); // Output: 5050\n            Console.WriteLine(SumToN(5)); // Output: 15\n            Console.WriteLine(SumToN(10)); // Output: 55\n            Console.WriteLine(SumToN(1)); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// xs represent coefficients of a polynomial.\n        /// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        /// Return Derivative of this polynomial in the same form.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative(List<int> xs)\n        {\n            if (xs == null || xs.Count == 0)\n                return new List<int>();\n\n            List<int> derivative = new List<int>();\n\n            for (int i = 1; i < xs.Count; i++)\n            {\n                int coefficient = xs[i] * i;\n                derivative.Add(coefficient);\n            }\n\n            return derivative;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 3, 1, 2, 4, 5 };\n            List<int> result1 = Derivative(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 4, 12, 20\n\n            List<int> test2 = new List<int> { 1, 2, 3 };\n            List<int> result2 = Derivative(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 6\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Computes the n-th element of the Fibfib number sequence.\n        /// </summary>\n        public static int Fibfib(int n)\n        {\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 1;\n\n            // Initialize an array to store the computed values\n            int[] fibfib = new int[n + 1];\n            fibfib[0] = 0;\n            fibfib[1] = 0;\n            fibfib[2] = 1;\n\n            // Compute the sequence using a loop\n            for (int i = 3; i <= n; i++)\n            {\n                fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n            }\n\n            return fibfib[n];\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Fibfib(1)); // Output: 0\n            Console.WriteLine(Fibfib(5)); // Output: 4\n            Console.WriteLine(Fibfib(8)); // Output: 24\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function VowelsCount which takes a string representing\n        /// a word as input and returns the number of vowels in the string.\n        /// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        /// vowel, but only when it is at the end of the given word.\n        /// \n        /// Example:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount(string s)\n        {\n            if (string.IsNullOrEmpty(s)) return 0;\n\n            string vowels = \"aeiouAEIOU\";\n            int count = 0;\n\n            for (int i = 0; i < s.Length; i++)\n            {\n                if (vowels.Contains(s[i]) && (i == s.Length - 1 || !vowels.Contains(s[i + 1])))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(VowelsCount(\"abcde\")); // Output: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\")); // Output: 3\n        }\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int Search(List<int> lst)\n    {\n        // Step 1: Count the frequency of each integer\n        var frequencyDict = new Dictionary<int, int>();\n        \n        foreach (var num in lst)\n        {\n            if (!frequencyDict.ContainsKey(num))\n            {\n                frequencyDict[num] = 1;\n            }\n            else\n            {\n                frequencyDict[num]++;\n            }\n        }\n        \n        // Step 2: Find the greatest integer with a frequency >= its value\n        int result = -1;\n        \n        foreach (var kvp in frequencyDict)\n        {\n            if (kvp.Key <= kvp.Value)\n            {\n                if (result == -1 || kvp.Key > result)\n                {\n                    result = kvp.Key;\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // Output: 2\n        Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Output: 3\n        Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // Output: -1\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given the lengths of the three sides of a triangle. Return the area of\n        /// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n        /// Otherwise return -1\n        /// Three sides make a valid triangle when the sum of any two sides is greater \n        /// than the third side.\n        /// Example:\n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea(int a, int b, int c)\n        {\n            // Check if the sides form a valid triangle\n            if (a + b > c && a + c > b && b + c > a)\n            {\n                // Calculate the semi-perimeter\n                double s = (a + b + c) / 2.0;\n                \n                // Calculate the area using Heron's formula\n                double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n                \n                // Return the area rounded to 2 decimal points\n                return Math.Round(area, 2);\n            }\n            else\n            {\n                // If not a valid triangle, return -1\n                return -1;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriangleArea(3, 4, 5)); // Output: 6.00\n            Console.WriteLine(TriangleArea(1, 2, 10)); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function that returns True if the object q will fly, and False otherwise.\n        /// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n        /// \n        /// Example:\n        /// WillItFly([1, 2], 5) \u279e False \n        /// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n        /// \n        /// WillItFly([3, 2, 3], 1) \u279e False\n        /// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n        /// \n        /// WillItFly([3, 2, 3], 9) \u279e True\n        /// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n        /// \n        /// WillItFly([3], 5) \u279e True\n        /// # 3 is less than the maximum possible weight, and it's balanced.\n        /// \n        /// </summary>\n        public static bool WillItFly(List<int> q, int w) \n        {\n            // Check if the list is a palindrome\n            bool isPalindrome = IsPalindrome(q);\n            \n            // Calculate the sum of the elements in the list\n            int sumOfElements = q.Sum();\n            \n            // Return true if both conditions are satisfied, otherwise false\n            return isPalindrome && sumOfElements <= w;\n        }\n        \n        private static bool IsPalindrome(List<int> q)\n        {\n            int left = 0;\n            int right = q.Count - 1;\n            \n            while (left < right)\n            {\n                if (q[left] != q[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool IsMultiplyPrime(int a)\n    {\n        // Generate all prime numbers less than 100\n        List<int> primes = GetPrimesLessThan(100);\n        \n        // Check all combinations of three primes\n        for (int i = 0; i < primes.Count; i++)\n        {\n            for (int j = i; j < primes.Count; j++)\n            {\n                for (int k = j; k < primes.Count; k++)\n                {\n                    if (primes[i] * primes[j] * primes[k] == a)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private static List<int> GetPrimesLessThan(int limit)\n    {\n        List<int> primes = new List<int>();\n        for (int number = 2; number < limit; number++)\n        {\n            if (IsPrime(number))\n            {\n                primes.Add(number);\n            }\n        }\n        return primes;\n    }\n    \n    private static bool IsPrime(int number)\n    {\n        if (number <= 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0) return false;\n        \n        for (int i = 3; i * i <= number; i += 2)\n        {\n            if (number % i == 0) return false;\n        }\n        \n        return true;\n    }\n    \n    public static void Main(string[] args)\n    {\n        Console.WriteLine(IsMultiplyPrime(30)); // True, because 30 = 2 * 3 * 5\n        Console.WriteLine(IsMultiplyPrime(60)); // False, no combination of primes less than 100 multiplies to 60\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "using System;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Converts a decimal number to binary and formats it with extra characters 'db'.\n        /// </summary>\n        public static string DecimalToBinary(int decimalNumber)\n        {\n            // Convert the decimal number to its binary representation.\n            string binaryString = Convert.ToString(decimalNumber, 2);\n            \n            // Pad the binary string with leading zeros if necessary to ensure each character is represented by exactly 8 bits.\n            // This step is not strictly required for this task but can be useful for understanding.\n            // binaryString = binaryString.PadLeft(8, '0');\n            \n            // Add extra characters 'db' at the beginning and end of the string.\n            StringBuilder result = new StringBuilder();\n            result.Append(\"db\");\n            result.Append(binaryString);\n            result.Append(\"db\");\n            \n            return result.ToString();\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(DecimalToBinary(15));   // Output: \"db1111db\"\n            Console.WriteLine(DecimalToBinary(32));   // Output: \"db100000db\"\n        }\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// Your task is to check if the string is happy or not.\n        /// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n        /// For example:\n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy(string s)\n        {\n            // Check if the length of the string is at least 3\n            if (s.Length < 3)\n            {\n                return false;\n            }\n\n            // Iterate through the string and check every 3 consecutive characters\n            for (int i = 0; i <= s.Length - 3; i++)\n            {\n                char a = s[i];\n                char b = s[i + 1];\n                char c = s[i + 2];\n\n                // Check if the three characters are distinct\n                if (a == b || b == c || a == c)\n                {\n                    return false;\n                }\n            }\n\n            // If all 3 consecutive characters are distinct, return true\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsHappy(\"a\"));       // False\n            Console.WriteLine(IsHappy(\"aa\"));      // False\n            Console.WriteLine(IsHappy(\"abcd\"));    // True\n            Console.WriteLine(IsHappy(\"aabb\"));    // False\n            Console.WriteLine(IsHappy(\"adb\"));     // True\n            Console.WriteLine(IsHappy(\"xyy\"));     // False\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// It is the last week of the semester and the teacher has to give the grades\n        /// to students. The teacher has been making her own algorithm for grading.\n        /// The only problem is, she has lost the code she used for grading.\n        /// She has given you a list of GPAs for some students and you have to write \n        /// a function that can output a list of letter grades using the following table:\n        /// GPA       |    Letter grade\n        /// 4.0                A+\n        /// > 3.7                A \n        /// > 3.3                A- \n        /// > 3.0                B+\n        /// > 2.7                B \n        /// > 2.3                B-\n        /// > 2.0                C+\n        /// > 1.7                C\n        /// > 1.3                C-\n        /// > 1.0                D+ \n        /// > 0.7                D \n        /// > 0.0                D-\n        /// 0.0                E\n        /// \n        /// Example:\n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// \n        /// </summary>\n        public static List<string> NumericalLetterGrade(List<double> grades)\n        {\n            // Dictionary to map GPA to letter grade\n            var gradeMapping = new Dictionary<double, string>\n            {\n                {4.0, \"A+\"},\n                {3.7, \"A\"},\n                {3.3, \"A-\"},\n                {3.0, \"B+\"},\n                {2.7, \"B\"},\n                {2.3, \"B-\"},\n                {2.0, \"C+\"},\n                {1.7, \"C\"},\n                {1.3, \"C-\"},\n                {1.0, \"D+\"},\n                {0.7, \"D\"},\n                {0.0, \"D-\"}\n            };\n\n            // List to store the letter grades\n            var letterGrades = new List<string>();\n\n            // Iterate over the list of GPAs and convert them to letter grades\n            foreach (var grade in grades)\n            {\n                if (gradeMapping.ContainsKey(grade))\n                {\n                    letterGrades.Add(gradeMapping[grade]);\n                }\n                else if (grade > 4.0 || grade < 0.0)\n                {\n                    throw new ArgumentException(\"Invalid GPA value.\");\n                }\n                else\n                {\n                    // Handle intermediate values by interpolating between known grades\n                    var keys = gradeMapping.Keys;\n                    var prevKey = keys.Last(k => k <= grade);\n                    letterGrades.Add(gradeMapping[prevKey]);\n                }\n            }\n\n            return letterGrades;\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage\n            var grades = new List<double> { 4.0, 3, 1.7, 2, 3.5 };\n            var letterGrades = NumericalLetterGrade(grades);\n            Console.WriteLine(string.Join(\", \", letterGrades)); // Output: A+, B, C-, C, A-\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes a string and returns True if the string\n        /// length is a prime number or False otherwise\n        /// Examples\n        /// PrimeLength('Hello') == True\n        /// PrimeLength('abcdcba') == True\n        /// PrimeLength('kittens') == True\n        /// PrimeLength('orange') == False\n        /// \n        /// </summary>\n        public static bool PrimeLength(string string0) \n        {\n            if (string0 == null || string0.Length == 0)\n                return false;\n\n            int length = string0.Length;\n            return IsPrime(length);\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true; // 2 is the only even prime number\n            if (number % 2 == 0) return false; // other even numbers are not prime\n\n            int boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeLength(\"Hello\")); // True\n            Console.WriteLine(PrimeLength(\"abcdcba\")); // True\n            Console.WriteLine(PrimeLength(\"kittens\")); // True\n            Console.WriteLine(PrimeLength(\"orange\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive integer N, return the total sum of its digits in binary.\n        /// \n        /// Example\n        /// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        /// For N = 150, the sum of digits will be 6 the output should be \"110\".\n        /// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        /// \n        /// Variables:\n        /// @N integer\n        /// Constraints: 0 \u2264 N \u2264 10000.\n        /// Output:\n        /// a string of binary number\n        /// \n        /// </summary>\n        public static string Solve(int N) \n        {\n            // Convert the integer to its binary representation as a string\n            string binaryString = Convert.ToString(N, 2);\n            \n            // Calculate the sum of the digits in the binary string\n            int sumOfDigits = binaryString.Sum(c => c - '0');\n            \n            // Return the sum as a string\n            return sumOfDigits.ToString();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(1000)); // Output: \"1\"\n            Console.WriteLine(Solve(150));  // Output: \"6\"\n            Console.WriteLine(Solve(147));  // Output: \"12\"\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<(int, int)> GetRow(List<List<int>> lst, int x) \n        {\n            var coordinates = new List<(int, int)>();\n            \n            for (int rowIndex = 0; rowIndex < lst.Count; rowIndex++)\n            {\n                for (int colIndex = 0; colIndex < lst[rowIndex].Count; colIndex++)\n                {\n                    if (lst[rowIndex][colIndex] == x)\n                    {\n                        coordinates.Add((rowIndex, colIndex));\n                    }\n                }\n            }\n            \n            // Sort by rows in ascending order and then by columns in descending order\n            var sortedCoordinates = coordinates\n                .OrderBy(coord => coord.Item1)  // First sort by row index (ascending)\n                .ThenByDescending(coord => coord.Item2)  // Then sort by column index (descending)\n                .ToList();\n            \n            return sortedCoordinates;\n        }\n\n        static void Main(string[] args)\n        {\n            var matrix = new List<List<int>>()\n            {\n                new List<int> { 1, 2, 3, 4, 5, 6 },\n                new List<int> { 1, 2, 3, 4, 1, 6 },\n                new List<int> { 1, 2, 3, 4, 5, 1 }\n            };\n            \n            var result = GetRow(matrix, 1);\n            foreach (var coord in result)\n            {\n                Console.WriteLine($\"({coord.Item1}, {coord.Item2})\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a list of integers.\n        /// Write a function NextSmallest() that returns the 2nd smallest element of the list.\n        /// Return None if there is no such element.\n        /// \n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest(List<int> lst) \n        {\n            if (lst == null || lst.Count < 2)\n            {\n                return \"None\";\n            }\n\n            // Remove duplicates and sort the list\n            var uniqueSorted = lst.Distinct().OrderBy(x => x).ToList();\n\n            if (uniqueSorted.Count < 2)\n            {\n                return \"None\";\n            }\n\n            return uniqueSorted[1];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(NextSmallest(new List<int> { 1, 2, 3, 4, 5 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int> { 5, 1, 4, 3, 2 })); // Output: 2\n            Console.WriteLine(NextSmallest(new List<int>())); // Output: None\n            Console.WriteLine(NextSmallest(new List<int> { 1, 1 })); // Output: None\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You'll be given a string of words, and your task is to count the number\n        /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n        /// Sentences are delimited by '.', '?' or '!'.\n        /// \n        /// For example:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored(string S) \n        {\n            if (string.IsNullOrEmpty(S)) return 0;\n            \n            // Split the string into sentences based on '.', '?', and '!'\n            var sentences = Regex.Split(S, @\"(?<=[.!?])\");\n            \n            int count = 0;\n            foreach (var sentence in sentences)\n            {\n                if (!string.IsNullOrWhiteSpace(sentence))\n                {\n                    // Trim leading and trailing whitespace from the sentence\n                    var trimmedSentence = sentence.Trim();\n                    // Check if the sentence starts with \"I\"\n                    if (trimmedSentence.StartsWith(\"I \", StringComparison.OrdinalIgnoreCase))\n                    {\n                        count++;\n                    }\n                }\n            }\n            \n            return count;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of integers.\n        /// You need to find the largest prime value and return the sum of its digits.\n        /// \n        /// Examples:\n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd(List<int> lst) \n        {\n            // Helper function to check if a number is prime\n            bool IsPrime(int num)\n            {\n                if (num <= 1) return false;\n                if (num == 2) return true;\n                if (num % 2 == 0) return false;\n                for (int i = 3; i * i <= num; i += 2)\n                {\n                    if (num % i == 0) return false;\n                }\n                return true;\n            }\n\n            // Find the largest prime number in the list\n            int largestPrime = -1;\n            foreach (int num in lst)\n            {\n                if (IsPrime(num))\n                {\n                    if (num > largestPrime)\n                    {\n                        largestPrime = num;\n                    }\n                }\n            }\n\n            // If no prime number is found, return 0\n            if (largestPrime == -1) return 0;\n\n            // Calculate the sum of the digits of the largest prime number\n            int digitSum = 0;\n            while (largestPrime > 0)\n            {\n                digitSum += largestPrime % 10;\n                largestPrime /= 10;\n            }\n\n            return digitSum;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> lst1 = new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 };\n            List<int> lst2 = new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 };\n            List<int> lst3 = new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 };\n            List<int> lst4 = new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 };\n            List<int> lst5 = new List<int> { 0, 81, 12, 3, 1, 21 };\n            List<int> lst6 = new List<int> { 0, 8, 1, 2, 1, 7 };\n\n            Console.WriteLine(Skjkasdkd(lst1)); // Output: 10\n            Console.WriteLine(Skjkasdkd(lst2)); // Output: 25\n            Console.WriteLine(Skjkasdkd(lst3)); // Output: 13\n            Console.WriteLine(Skjkasdkd(lst4)); // Output: 11\n            Console.WriteLine(Skjkasdkd(lst5)); // Output: 3\n            Console.WriteLine(Skjkasdkd(lst6)); // Output: 7\n        }\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool CheckDictCase(Dictionary<object, string> dict)\n    {\n        // Return False if the dictionary is empty\n        if (dict.Count == 0)\n        {\n            return false;\n        }\n\n        // Determine the initial case of the first key\n        bool allLower = true;\n        bool allUpper = true;\n\n        foreach (var key in dict.Keys)\n        {\n            string keyString = key.ToString();\n            if (!string.IsNullOrEmpty(keyString))\n            {\n                for (int i = 0; i < keyString.Length; i++)\n                {\n                    if (char.IsLower(keyString[i]))\n                    {\n                        allUpper = false;\n                    }\n                    else if (char.IsUpper(keyString[i]))\n                    {\n                        allLower = false;\n                    }\n                }\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void Main()\n    {\n        // Test cases\n        Dictionary<object, string> dict1 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"b\", \"banana\" } };\n        Console.WriteLine(CheckDictCase(dict1)); // True\n\n        Dictionary<object, string> dict2 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } };\n        Console.WriteLine(CheckDictCase(dict2)); // False\n\n        Dictionary<object, string> dict3 = new Dictionary<object, string> { { \"a\", \"apple\" }, { 8, \"banana\" }, { \"a\", \"apple\" } };\n        Console.WriteLine(CheckDictCase(dict3)); // False\n\n        Dictionary<object, string> dict4 = new Dictionary<object, string> { { \"Name\", \"John\" }, { \"Age\", \"36\" }, { \"City\", \"Houston\" } };\n        Console.WriteLine(CheckDictCase(dict4)); // False\n\n        Dictionary<object, string> dict5 = new Dictionary<object, string> { { \"STATE\", \"NC\" }, { \"ZIP\", \"12345\" } };\n        Console.WriteLine(CheckDictCase(dict5)); // True\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger(string value)\n        {\n            // Parse the input string to a double\n            if (!double.TryParse(value, out double number))\n            {\n                throw new ArgumentException(\"Invalid input: not a valid number.\");\n            }\n\n            // Calculate floor and ceiling values\n            int floor = (int)Math.Floor(number);\n            int ceiling = (int)Math.Ceiling(number);\n\n            // If the number is exactly between two integers, choose the one farthest from zero\n            if (number - floor == 0.5 || number - floor == -0.5)\n            {\n                return ceiling;\n            }\n\n            // Otherwise, return the closest integer\n            if (Math.Abs(number - floor) < Math.Abs(number - ceiling))\n            {\n                return floor;\n            }\n            else\n            {\n                return ceiling;\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(ClosestInteger(\"10\"));     // Output: 10\n            Console.WriteLine(ClosestInteger(\"15.3\"));   // Output: 15\n            Console.WriteLine(ClosestInteger(\"14.5\"));   // Output: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\"));  // Output: -15\n        }\n    }\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<int> MakeAPile(int n)\n    {\n        List<int> pile = new List<int>();\n        int currentLevelStones = n;\n        \n        for (int i = 0; i < n; i++)\n        {\n            pile.Add(currentLevelStones);\n            if (n % 2 == 0) // If n is even, the next number should be odd\n            {\n                currentLevelStones += 2; // Increment by 2 to get the next even number\n            }\n            else // If n is odd, the next number should be even\n            {\n                currentLevelStones += 2; // Increment by 2 to get the next odd number\n            }\n        }\n        \n        return pile;\n    }\n\n    public static void Main(string[] args)\n    {\n        List<int> result = MakeAPile(3);\n        Console.WriteLine(string.Join(\", \", result)); // Output: 3, 5, 7\n\n        result = MakeAPile(4);\n        Console.WriteLine(string.Join(\", \", result)); // Output: 4, 6, 8, 10\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You will be given a string of words separated by commas or spaces. Your task is\n        /// to split the string into words and return an array of the words.\n        /// \n        /// For example:\n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString(string s) \n        {\n            // Use a regular expression to split the string by commas or spaces\n            List<string> words = Regex.Split(s, @\"[\\s,]\").ToList();\n            \n            // Filter out any empty strings that may result from multiple delimiters\n            words = words.Where(word => !string.IsNullOrEmpty(word)).ToList();\n            \n            return words;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", WordsString(\"Hi, my name is John\"))); // Output: Hi, my, name, is, John\n            Console.WriteLine(string.Join(\", \", WordsString(\"One, two, three, four, five, six\"))); // Output: One, two, three, four, five, six\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// This function takes two positive numbers x and y and returns the\n        /// biggest even integer number that is in the range [x, y] inclusive. If \n        /// there's no such number, then the function should return -1.\n        /// \n        /// For example:\n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// \n        /// </summary>\n        public static int ChooseNum (int x, int y) \n        {\n            // Ensure x is less than or equal to y\n            if (x > y) return -1;\n\n            // Start from the upper bound and move downwards\n            for (int i = y; i >= x; i--)\n            {\n                if (i % 2 == 0)\n                {\n                    return i;\n                }\n            }\n\n            // If no even number is found, return -1\n            return -1;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n            Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two positive integers n and m, and your task is to compute the\n        /// average of the integers from n through m (including n and m). \n        /// Round the answer to the nearest integer and convert that to binary.\n        /// If n is greater than m, return -1.\n        /// Example:\n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg(int n, int m) \n        {\n            if (n > m)\n            {\n                return -1;\n            }\n\n            // Calculate the sum of integers from n to m\n            long sum = 0;\n            for (int i = n; i <= m; i++)\n            {\n                sum += i;\n            }\n\n            // Calculate the average and round it to the nearest integer\n            double avg = (double)sum / (m - n + 1);\n            int roundedAvg = (int)Math.Round(avg);\n\n            // Convert the rounded average to binary string\n            string binaryString = Convert.ToString(roundedAvg, 2);\n\n            return $\"0b{binaryString}\";\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // Output: \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // Output: -1\n            Console.WriteLine(RoundedAvg(10, 20)); // Output: \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // Output: \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Implement the Function F that takes n as a parameter,\n        /// and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n        /// or the sum oF numbers From 1 to i otherwise.\n        /// i starts From 1.\n        /// the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n        /// Example:\n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F(int n) \n        {\n            List<int> result = new List<int>();\n            \n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0) // Check if the index is even\n                {\n                    result.Add(Factorial(i)); // Calculate factorial of i\n                }\n                else\n                {\n                    result.Add(SumToN(i)); // Sum numbers from 1 to i\n                }\n            }\n            \n            return result;\n        }\n        \n        private static int Factorial(int number)\n        {\n            if (number == 0 || number == 1) return 1;\n            int factorial = 1;\n            for (int i = 2; i <= number; i++)\n            {\n                factorial *= i;\n            }\n            return factorial;\n        }\n        \n        private static int SumToN(int number)\n        {\n            int sum = 0;\n            for (int i = 1; i <= number; i++)\n            {\n                sum += i;\n            }\n            return sum;\n        }\n        \n        public static void Main(string[] args)\n        {\n            List<int> result = F(5);\n            Console.WriteLine(string.Join(\", \", result)); // Output: 1, 2, 6, 24, 15\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<int> EvenOddPalindrome(int n)\n    {\n        List<int> palindromes = new List<int>();\n        \n        // Generate all integer palindromes up to n\n        for (int i = 1; i <= n; i++)\n        {\n            if (IsPalindrome(i))\n            {\n                palindromes.Add(i);\n            }\n        }\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Count the number of even and odd palindromes\n        foreach (int palindrome in palindromes)\n        {\n            if (palindrome % 2 == 0)\n            {\n                evenCount++;\n            }\n            else\n            {\n                oddCount++;\n            }\n        }\n        \n        return new List<int> { evenCount, oddCount };\n    }\n    \n    private static bool IsPalindrome(int number)\n    {\n        string str = number.ToString();\n        char[] charArray = str.ToCharArray();\n        Array.Reverse(charArray);\n        string reversedStr = new string(charArray);\n        return str == reversedStr;\n    }\n    \n    public static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(String.Join(\", \", EvenOddPalindrome(3)));  // Output: 1, 2\n        Console.WriteLine(String.Join(\", \", EvenOddPalindrome(12))); // Output: 4, 6\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static bool MoveOneBall(List<int> arr)\n        {\n            if (arr.Count == 0) return true;\n\n            for (int shift = 0; shift < arr.Count; shift++)\n            {\n                List<int> shiftedArray = ShiftArrayRight(arr, shift);\n                if (IsSorted(shiftedArray))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private static List<int> ShiftArrayRight(List<int> arr, int shift)\n        {\n            List<int> shiftedArray = new List<int>(arr);\n            for (int i = 0; i < arr.Count; i++)\n            {\n                shiftedArray[(i + shift) % arr.Count] = arr[i];\n            }\n            return shiftedArray;\n        }\n\n        private static bool IsSorted(List<int> arr)\n        {\n            for (int i = 1; i < arr.Count; i++)\n            {\n                if (arr[i - 1] > arr[i])\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(MoveOneBall(new List<int> { 3, 4, 5, 1, 2 })); // True\n            Console.WriteLine(MoveOneBall(new List<int> { 3, 5, 4, 1, 2 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// In this problem, you will implement a function that takes two lists of numbers,\n        /// and determines whether it is possible to perform an Exchange of elements\n        /// between them to make lst1 a list of only even numbers.\n        /// There is no limit on the number of Exchanged elements between lst1 and lst2.\n        /// If it is possible to Exchange elements between the lst1 and lst2 to make\n        /// all the elements of lst1 to be even, return \"YES\".\n        /// Otherwise, return \"NO\".\n        /// For example:\n        /// Exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n        /// Exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n        /// It is assumed that the input lists will be non-empty.\n        /// \n        /// </summary>\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Identify odd numbers in lst1\n            var oddNumbersInLst1 = lst1.Where(n => n % 2 != 0).ToList();\n            \n            // Count the number of even numbers in lst2 that can replace odd numbers in lst1\n            int countEvenInLst2 = lst2.Count(n => n % 2 == 0);\n            \n            // Check if there are enough even numbers in lst2 to replace all odd numbers in lst1\n            if (countEvenInLst2 >= oddNumbersInLst1.Count)\n            {\n                return \"YES\";\n            }\n            else\n            {\n                return \"NO\";\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Output: \"YES\"\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Output: \"NO\"\n        }\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task\n        /// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n        /// then check if the result string is palindrome.\n        /// A string is called palindrome if it reads the same backward as forward.\n        /// You should return a tuple containing the result string and True/False for the check.\n        /// Example\n        /// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n        /// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n        /// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n        /// \n        /// </summary>\n        public static List<object> ReverseDelete(string s, string c) \n        {\n            // Step 1: Remove all characters in s that are present in c\n            var filteredString = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n            \n            // Step 2: Check if the resulting string is a palindrome\n            bool isPalindrome = IsPalindrome(filteredString);\n            \n            // Return the result as a list containing the filtered string and the palindrome check result\n            return new List<object> { filteredString, isPalindrome };\n        }\n        \n        private static bool IsPalindrome(string str)\n        {\n            int left = 0;\n            int right = str.Length - 1;\n            \n            while (left < right)\n            {\n                if (str[left] != str[right])\n                {\n                    return false;\n                }\n                \n                left++;\n                right--;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"Test 1: {test1[0]}, {test1[1]}\"); // Expected output: bcd, False\n            \n            var test2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"Test 2: {test2[0]}, {test2[1]}\"); // Expected output: acdef, False\n            \n            var test3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"Test 3: {test3[0]}, {test3[1]}\"); // Expected output: cdedc, True\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a rectangular grid of wells. Each row represents a single well,\n        /// and each 1 in a row represents a single unit of water.\n        /// Each well has a corresponding bucket that can be used to extract water from it, \n        /// and all buckets have the same capacity.\n        /// Your task is to use the buckets to empty the wells.\n        /// Output the number of times you need to lower the buckets.\n        /// \n        /// Example 1:\n        /// Input: \n        /// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        /// bucket_capacity : 1\n        /// Output: 6\n        /// \n        /// Example 2:\n        /// Input: \n        /// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        /// bucket_capacity : 2\n        /// Output: 5\n        /// \n        /// Example 3:\n        /// Input: \n        /// grid : [[0,0,0], [0,0,0]]\n        /// bucket_capacity : 5\n        /// Output: 0\n        /// \n        /// Constraints:\n        /// * all wells have the same length\n        /// * 1 <= grid.length <= 10^2\n        /// * 1 <= grid[:,1].length <= 10^2\n        /// * grid[i][j] -> 0 | 1\n        /// * 1 <= capacity <= 10\n        /// \n        /// </summary>\n        public static int MaxFill(List<List<int>> grid, int capacity) \n        {\n            int rows = grid.Count;\n            if (rows == 0) return 0;\n            int cols = grid[0].Count;\n            \n            int totalWater = 0;\n            foreach (var row in grid)\n            {\n                foreach (var cell in row)\n                {\n                    if (cell == 1)\n                    {\n                        totalWater++;\n                    }\n                }\n            }\n            \n            int bucketCount = 0;\n            while (totalWater > 0)\n            {\n                int bucketsUsed = Math.Min(capacity, totalWater);\n                totalWater -= bucketsUsed;\n                bucketCount++;\n            }\n            \n            return bucketCount;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<List<int>> grid1 = new List<List<int>>()\n            {\n                new List<int>(){0, 0, 1, 0},\n                new List<int>(){0, 1, 0, 0},\n                new List<int>(){1, 1, 1, 1}\n            };\n            int bucketCapacity1 = 1;\n            Console.WriteLine(MaxFill(grid1, bucketCapacity1)); // Output: 6\n\n            List<List<int>> grid2 = new List<List<int>>()\n            {\n                new List<int>(){0, 0, 1, 1},\n                new List<int>(){0, 0, 0, 0},\n                new List<int>(){1, 1, 1, 1},\n                new List<int>(){0, 1, 1, 1}\n            };\n            int bucketCapacity2 = 2;\n            Console.WriteLine(MaxFill(grid2, bucketCapacity2)); // Output: 5\n\n            List<List<int>> grid3 = new List<List<int>>()\n            {\n                new List<int>(){0, 0, 0},\n                new List<int>(){0, 0, 0}\n            };\n            int bucketCapacity3 = 5;\n            Console.WriteLine(MaxFill(grid3, bucketCapacity3)); // Output: 0\n        }\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a string s and a natural number n, you have been tasked to implement \n        /// a function that returns a list of all words from string s that contain exactly \n        /// n consonants, in order these words appear in the string s.\n        /// If the string s is empty then the function should return an empty list.\n        /// Note: you may assume the input string contains only letters and spaces.\n        /// Examples:\n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords(string s, int n) \n        {\n            if (string.IsNullOrEmpty(s))\n                return new List<string>();\n\n            // Split the string into words\n            var words = s.Split(' ');\n\n            // Define vowels for easy checking\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n\n            // Filter words that contain exactly n consonants\n            var result = new List<string>();\n            foreach (var word in words)\n            {\n                if (ContainsExactlyNConsonants(word, n, vowels))\n                {\n                    result.Add(word);\n                }\n            }\n\n            return result;\n        }\n\n        private static bool ContainsExactlyNConsonants(string word, int n, char[] vowels)\n        {\n            // Remove non-letter characters and count consonants\n            var letters = new string(word.Where(char.IsLetter).ToArray());\n            var consonantCount = letters.Count(c => !vowels.Contains(char.ToLower(c)));\n\n            return consonantCount == n;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // [\"little\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // [\"Mary\", \"lamb\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"simple white space\", 2))); // []\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Hello world\", 4))); // [\"world\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Uncle sam\", 3))); // [\"Uncle\"]\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array arr of integers and a positive integer k, return a sorted list \n        /// of length k with the Maximum k numbers in arr.\n        /// \n        /// Example 1:\n        /// \n        /// Input: arr = [-3, -4, 5], k = 3\n        /// Output: [-4, -3, 5]\n        /// \n        /// Example 2:\n        /// \n        /// Input: arr = [4, -4, 4], k = 2\n        /// Output: [4, 4]\n        /// \n        /// Example 3:\n        /// \n        /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        /// Output: [2]\n        /// \n        /// Note:\n        /// 1. The length of the array will be in the range of [1, 1000].\n        /// 2. The elements in the array will be in the range of [-1000, 1000].\n        /// 3. 0 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static List<int> Maximum(List<int> arr, int k) \n        {\n            // Sort the array in descending order\n            var sortedArr = arr.OrderByDescending(x => x).ToList();\n            \n            // Take the top k elements from the sorted array\n            var result = sortedArr.Take(k).ToList();\n            \n            // Return the result list\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> { -3, -4, 5 }, 3))); // Output: [-4, -3, 5]\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> { 4, -4, 4 }, 2))); // Output: [4, 4]\n            Console.WriteLine(string.Join(\", \", Maximum(new List<int> { -3, 2, 1, 2, -1, -2, 1 }, 1))); // Output: [2]\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a non-empty array of integers arr and an integer k, return\n        /// the sum of the elements with at most two digits from the first k elements of arr.\n        /// \n        /// Example:\n        /// \n        /// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        /// Output: 24 # sum of 21 + 3\n        /// \n        /// Constraints:\n        /// 1. 1 <= len(arr) <= 100\n        /// 2. 1 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static int AddElements(List<int> arr, int k) \n        {\n            int sum = 0;\n            for (int i = 0; i < k && i < arr.Count; i++)\n            {\n                if (arr[i].ToString().Length <= 2)\n                {\n                    sum += arr[i];\n                }\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> arr = new List<int> { 111, 21, 3, 4000, 5, 6, 7, 8, 9 };\n            int k = 4;\n            Console.WriteLine(AddElements(arr, k)); // Output: 24\n        }\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two intervals,\n        /// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n        /// The given intervals are closed which means that the interval (start, end)\n        /// includes both start and end.\n        /// For each given interval, it is assumed that its start is less or equal its end.\n        /// Your task is to determine whether the length of Intersection of these two \n        /// intervals is a prime number.\n        /// Example, the Intersection of the intervals (1, 3), (2, 4) is (2, 3)\n        /// which its length is 1, which not a prime number.\n        /// If the length of the Intersection is a prime number, return \"YES\",\n        /// otherwise, return \"NO\".\n        /// If the two intervals don't intersect, return \"NO\".\n        /// \n        /// \n        /// [input/output] samples:\n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// \n        /// </summary>\n        public static string Intersection(List<int> interval1, List<int> interval2) \n        {\n            // Find the start and end of the intersection\n            int startIntersection = Math.Max(interval1[0], interval2[0]);\n            int endIntersection = Math.Min(interval1[1], interval2[1]);\n            \n            // Check if there is an intersection\n            if (startIntersection > endIntersection)\n            {\n                return \"NO\";\n            }\n            \n            // Calculate the length of the intersection\n            int lengthIntersection = endIntersection - startIntersection + 1;\n            \n            // Check if the length is a prime number\n            if (IsPrime(lengthIntersection))\n            {\n                return \"YES\";\n            }\n            else\n            {\n                return \"NO\";\n            }\n        }\n        \n        private static bool IsPrime(int num)\n        {\n            if (num <= 1) return false;\n            if (num == 2) return true; // 2 is the only even prime number\n            if (num % 2 == 0) return false;\n            \n            for (int i = 3; i * i <= num; i += 2)\n            {\n                if (num % i == 0) return false;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Intersection(new List<int> {1, 2}, new List<int> {2, 3})); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-1, 1}, new List<int> {0, 4})); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-3, -1}, new List<int> {-5, 5})); // \"YES\"\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n        /// the last couple centuries. However, what people don't know is Tribonacci sequence.\n        /// Tribonacci sequence is defined by the recurrence:\n        /// Tri(1) = 3\n        /// Tri(n) = 1 + n / 2, if n is even.\n        /// Tri(n) =  Tri(n - 1) + Tri(n - 2) + Tri(n + 1), if n is odd.\n        /// For example:\n        /// Tri(2) = 1 + (2 / 2) = 2\n        /// Tri(4) = 3\n        /// Tri(3) = Tri(2) + Tri(1) + Tri(4)\n        /// = 2 + 3 + 3 = 8 \n        /// You are given a non-negative integer number n, you have to return a list of the \n        /// first n + 1 numbers of the Tribonacci sequence.\n        /// Examples:\n        /// Tri(3) = [1, 3, 2, 8]\n        /// \n        /// </summary>\n        public static List<object> Tri(int n)\n        {\n            // Create a list to store the Tribonacci sequence values\n            List<object> tribonacciSequence = new List<object>();\n            \n            // Base case for Tri(1)\n            if (n >= 0)\n                tribonacciSequence.Add(3);\n            \n            // Calculate the Tribonacci sequence up to n\n            for (int i = 1; i <= n; i++)\n            {\n                int value;\n                if (i == 1)\n                {\n                    value = 3; // Tri(1) is already added\n                }\n                else if (i % 2 == 0)\n                {\n                    value = 1 + i / 2; // For even i\n                }\n                else\n                {\n                    value = tribonacciSequence[i - 1] + tribonacciSequence[i - 2] + tribonacciSequence[i]; // For odd i\n                }\n                \n                tribonacciSequence.Add(value);\n            }\n            \n            return tribonacciSequence;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test the function with an example\n            int n = 3;\n            List<object> result = Tri(n);\n            Console.WriteLine($\"Tribonacci sequence for n={n}: [{string.Join(\", \", result)}]\");\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive integer n, return the product of the odd Digits.\n        /// Return 0 if all Digits are even.\n        /// For example:\n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits(int n) \n        {\n            // Convert the number to a string and then to an array of characters (digits)\n            char[] digits = n.ToString().ToCharArray();\n            \n            // Initialize the product variable\n            int product = 1;\n            bool hasOddDigit = false;\n            \n            // Iterate through each character (digit) in the array\n            foreach (char digit in digits)\n            {\n                // Convert the character to an integer\n                int num = int.Parse(digit.ToString());\n                \n                // Check if the digit is odd\n                if (num % 2 != 0)\n                {\n                    product *= num;\n                    hasOddDigit = true;\n                }\n            }\n            \n            // If all digits are even, return 0\n            if (!hasOddDigit)\n            {\n                return 0;\n            }\n            \n            // Return the product of the odd digits\n            return product;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Digits(1));   // Output: 1\n            Console.WriteLine(Digits(4));   // Output: 0\n            Console.WriteLine(Digits(235)); // Output: 15\n        }\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static bool IsNested(string string0)\n    {\n        Stack<char> stack = new Stack<char>();\n        \n        foreach (char ch in string0)\n        {\n            if (ch == '[')\n            {\n                stack.Push(ch);\n            }\n            else if (ch == ']')\n            {\n                if (stack.Count > 0 && stack.Peek() == '[')\n                {\n                    stack.Pop();\n                }\n                else\n                {\n                    stack.Push(ch);\n                }\n            }\n        }\n        \n        // If there are unmatched opening brackets left in the stack, return false\n        if (stack.Count > 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsNested(\"[[]]\")); // True\n        Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // False\n        Console.WriteLine(IsNested(\"[][]\")); // False\n        Console.WriteLine(IsNested(\"[]\")); // False\n        Console.WriteLine(IsNested(\"[[][]]\")); // True\n        Console.WriteLine(IsNested(\"[[]][[\")); // True\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// \n        /// </summary>\n        public static int SumSquares(List<object> lst)\n        {\n            // Initialize the sum to 0\n            int sum = 0;\n            \n            // Iterate through each element in the list\n            foreach (var item in lst)\n            {\n                // Round the element to the nearest integer using Math.Ceiling\n                double roundedValue = Math.Ceiling(Convert.ToDouble(item));\n                \n                // Square the rounded value and add it to the sum\n                sum += (int)Math.Pow((double)roundedValue, 2);\n            }\n            \n            // Return the final sum of squared numbers\n            return sum;\n        }\n        \n        public static void Main(string[] args)\n        {\n            List<object> lst1 = new List<object> { 1, 2, 3 };\n            Console.WriteLine(SumSquares(lst1)); // Output: 14\n            \n            List<object> lst2 = new List<object> { 1, 4, 9 };\n            Console.WriteLine(SumSquares(lst2)); // Output: 98\n            \n            List<object> lst3 = new List<object> { 1, 3, 5, 7 };\n            Console.WriteLine(SumSquares(lst3)); // Output: 84\n            \n            List<object> lst4 = new List<object> { 1.4, 4.2, 0 };\n            Console.WriteLine(SumSquares(lst4)); // Output: 29\n            \n            List<object> lst5 = new List<object> { -2.4, 1, 1 };\n            Console.WriteLine(SumSquares(lst5)); // Output: 6\n        }\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns True if the last character\n        /// of a given string is an alphabetical character and is not\n        /// a part of a word, and False otherwise.\n        /// Note: \"word\" is a group of characters separated by space.\n        /// \n        /// Examples:\n        /// CheckIfLastCharIsALetter(\"apple pie\") \u279e False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") \u279e True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") \u279e False\n        /// CheckIfLastCharIsALetter(\"\") \u279e False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter(string txt) \n        {\n            // Trim any trailing spaces from the string\n            txt = txt.Trim();\n            \n            // If the string is empty after trimming, return false\n            if (txt == \"\")\n                return false;\n            \n            // Get the last character of the string\n            char lastChar = txt[txt.Length - 1];\n            \n            // Check if the last character is an alphabetical character\n            if (!char.IsLetter(lastChar))\n                return false;\n            \n            // Split the string into words\n            string[] words = txt.Split(' ');\n            \n            // Iterate through each word to check if the last character is part of a word\n            foreach (string word in words)\n            {\n                if (word.EndsWith(lastChar))\n                    return false;\n            }\n            \n            // If none of the words end with the last character, return true\n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // \u279e True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // \u279e False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // \u279e False\n        }\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Create a function which returns the largest index of an element which\n        /// is not greater than or equal to the element immediately preceding it. If\n        /// no such element exists then return -1. The given array will not contain\n        /// duplicate values.\n        /// \n        /// Examples:\n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange(List<int> arr)\n        {\n            // Iterate through the list starting from the second element\n            for (int i = arr.Count - 1; i > 0; i--)\n            {\n                // Check if the current element is not greater than or equal to the previous element\n                if (arr[i] < arr[i - 1])\n                {\n                    return i;\n                }\n            }\n            // If no such element exists, return -1\n            return -1;\n        }\n\n        public static void Main(string[] args)\n        {\n            List<int> test1 = new List<int> { 1, 2, 4, 3, 5 };\n            List<int> test2 = new List<int> { 1, 2, 3 };\n            \n            Console.WriteLine(CanArrange(test1)); // Output: 3\n            Console.WriteLine(CanArrange(test2)); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns a tuple (a, b), where 'a' is\n        /// the largest of negative integers, and 'b' is the smallest\n        /// of positive integers in a list.\n        /// If there is no negative or positive integers, return them as None.\n        /// \n        /// Examples:\n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static Tuple<object, object> LargestSmallestIntegers(List<int> lst)\n        {\n            // Initialize variables to hold the largest negative and smallest positive integers\n            int? largestNegative = null;\n            int? smallestPositive = null;\n\n            foreach (var num in lst)\n            {\n                if (num < 0)\n                {\n                    if (largestNegative == null || num > largestNegative)\n                    {\n                        largestNegative = num;\n                    }\n                }\n                else if (num > 0)\n                {\n                    if (smallestPositive == null || num < smallestPositive)\n                    {\n                        smallestPositive = num;\n                    }\n                }\n            }\n\n            // Convert the results to None if they are not set\n            var largestNegativeResult = largestNegative.HasValue ? (object)largestNegative : null;\n            var smallestPositiveResult = smallestPositive.HasValue ? (object)smallestPositive : null;\n\n            return Tuple.Create(largestNegativeResult, smallestPositiveResult);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 2, 4, 1, 3, 5, 7 })); // (None, 1)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { })); // (None, None)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 0 })); // (None, None)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { -1, -2, -3 })); // (-1, None)\n            Console.WriteLine(LargestSmallestIntegers(new List<int> { 1, 2, 3 })); // (None, 1)\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "using System;\nusing System.Numerics; // Required for handling large numbers since factorial results can be very large\n\npublic class Program\n{\n    /// <summary>\n    /// Calculates the Brazilian factorial of a given integer n.\n    /// </summary>\n    public static int SpecialFactorial(int n)\n    {\n        if (n <= 0)\n        {\n            throw new ArgumentException(\"n must be greater than 0\");\n        }\n\n        BigInteger result = 1;\n\n        for (int i = n; i > 0; i--)\n        {\n            result *= Factorial(i);\n        }\n\n        return (int)result; // Cast to int, assuming the result will fit within an int range.\n    }\n\n    /// <summary>\n    /// Calculates the factorial of a given integer n using BigInteger for large numbers support.\n    /// </summary>\n    private static BigInteger Factorial(int n)\n    {\n        if (n == 0 || n == 1)\n        {\n            return 1;\n        }\n\n        BigInteger fact = 1;\n        for (int i = 2; i <= n; i++)\n        {\n            fact *= i;\n        }\n\n        return fact;\n    }\n\n    // Example usage\n    public static void Main(string[] args)\n    {\n        int number = 4;\n        Console.WriteLine($\"SpecialFactorial({number}) = {SpecialFactorial(number)}\");\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(WordsInSentence(\"This is a test\")); // Output: \"is\"\n        Console.WriteLine(WordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n\n    public static string WordsInSentence(string sentence)\n    {\n        // Split the sentence into words\n        var words = sentence.Split(' ');\n\n        // Function to check if a number is prime\n        bool IsPrime(int num)\n        {\n            if (num <= 1) return false;\n            if (num == 2) return true;\n            if (num % 2 == 0) return false;\n            for (int i = 3; i * i <= num; i += 2)\n            {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Filter words by their lengths and check if they are prime\n        var filteredWords = words.Where(word => IsPrime(word.Length)).ToList();\n\n        // Join the filtered words into a single string\n        return string.Join(\" \", filteredWords);\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Your task is to implement a function that will Simplify the expression\n        /// x * n. The function returns True if x * n evaluates to a whole number and False\n        /// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n        /// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n        /// \n        /// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n        /// \n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify(string x, string n) \n        {\n            // Split the input strings to get numerator and denominator for both fractions\n            var xParts = x.Split('/');\n            var nParts = n.Split('/');\n            \n            int xNumerator = int.Parse(xParts[0]);\n            int xDenominator = int.Parse(xParts[1]);\n            int nNumerator = int.Parse(nParts[0]);\n            int nDenominator = int.Parse(nParts[1]);\n            \n            // Multiply the numerators and denominators\n            int productNumerator = xNumerator * nNumerator;\n            int productDenominator = xDenominator * nDenominator;\n            \n            // Check if the product is a whole number by checking if the remainder is 0\n            return (productNumerator % productDenominator == 0);\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<int> OrderByPoints(List<int> nums)\n    {\n        if (nums == null || !nums.Any())\n            return new List<int>();\n\n        // Create a list of tuples where each tuple contains the number and its digit sum\n        var numsWithSum = nums.Select((num, index) => new { Number = num, SumOfDigits = Math.Abs(num).ToString().Where(char.IsDigit).Sum(c => c - '0') })\n                              .ToList();\n\n        // Sort the list of tuples by digit sum and then by original index\n        var sortedNums = numsWithSum.OrderBy(x => x.SumOfDigits)\n                                    .ThenBy(x => x.index)\n                                    .Select(x => x.Number)\n                                    .ToList();\n\n        return sortedNums;\n    }\n\n    public static void Main()\n    {\n        // Test cases\n        Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { 1, 11, -1, -11, -12 }))); // Output: -1, -11, 1, -12, 11\n        Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int>()))); // Output: \n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes an array of numbers as input and returns \n        /// the number of elements in the array that are greater than 10 and both \n        /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n        /// For example:\n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter(List<int> nums)\n        {\n            return nums.Count(num => \n            {\n                string numStr = Math.Abs(num).ToString();\n                char firstDigit = numStr[0];\n                char lastDigit = numStr[numStr.Length - 1];\n                \n                bool isFirstOdd = \"13579\".Contains(firstDigit);\n                bool isLastOdd = \"13579\".Contains(lastDigit);\n                \n                return isFirstOdd && isLastOdd && num > 10;\n            });\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a positive integer n. You have to create an integer array a of length n.\n        /// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        /// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        /// and a[i] + a[j] + a[k] is a multiple of 3.\n        /// \n        /// Example :\n        /// Input: n = 5\n        /// Output: 1\n        /// Explanation: \n        /// a = [1, 3, 7, 13, 21]\n        /// The only valid triple is (1, 7, 13).\n        /// \n        /// </summary>\n        public static int GetMaxTriples(int n)\n        {\n            // Step 1: Generate the array a\n            int[] a = new int[n];\n            for (int i = 1; i <= n; i++)\n            {\n                a[i - 1] = i * i - i + 1;\n            }\n\n            // Step 2: Iterate through all possible triples (i, j, k) where i < j < k\n            int count = 0;\n            for (int i = 0; i < n - 2; i++)\n            {\n                for (int j = i + 1; j < n - 1; j++)\n                {\n                    for (int k = j + 1; k < n; k++)\n                    {\n                        // Step 3: Check if the sum a[i] + a[j] + a[k] is a multiple of 3\n                        if ((a[i] + a[j] + a[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            int n = 5;\n            Console.WriteLine(GetMaxTriples(n)); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// There are eight planets in our solar system: the closerst to the Sun \n        /// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n        /// Uranus, Neptune.\n        /// Write a function that takes two planet names as strings planet1 and planet2. \n        /// The function should return a tuple containing all planets whose orbits are \n        /// located between the orbit of planet1 and the orbit of planet2, sorted by \n        /// the proximity to the sun. \n        /// The function should return an empty tuple if planet1 or planet2\n        /// are not correct planet names. \n        /// Examples\n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static List<string> Bf(string planet1, string planet2) \n        {\n            // Define the list of planets in order of their proximity to the Sun\n            List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n            \n            // Validate planet names using regular expressions\n            if (!IsValidPlanetName(planet1) || !IsValidPlanetName(planet2))\n            {\n                return new List<string>();\n            }\n            \n            // Find the indices of the given planets in the list\n            int index1 = planets.IndexOf(planet1);\n            int index2 = planets.IndexOf(planet2);\n            \n            // Ensure the order is correct by swapping if necessary\n            if (index1 > index2)\n            {\n                int temp = index1;\n                index1 = index2;\n                index2 = temp;\n            }\n            \n            // Get the planets between the two indices\n            List<string> result = planets.Skip(index1 + 1).Take(index2 - index1 - 1).ToList();\n            \n            return result;\n        }\n        \n        private static bool IsValidPlanetName(string planetName)\n        {\n            // Define a regular expression to match valid planet names\n            string pattern = @\"^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\";\n            return Regex.IsMatch(planetName, pattern);\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))); // Output: Saturn, Uranus\n            Console.WriteLine(string.Join(\", \", Bf(\"Earth\", \"Mercury\"))); // Output: Venus\n            Console.WriteLine(string.Join(\", \", Bf(\"Mercury\", \"Uranus\"))); // Output: Venus, Earth, Mars, Jupiter, Saturn\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// A simple program which should return the value of x if n is \n        /// a prime number and should return the value of y otherwise.\n        /// \n        /// Examples:\n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// </summary>\n        public static int XOrY(int n, int x, int y) \n        {\n            if (IsPrime(n))\n            {\n                return x;\n            }\n            else\n            {\n                return y;\n            }\n        }\n\n        private static bool IsPrime(int number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true; // 2 is the only even prime number\n            if (number % 2 == 0) return false; // other even numbers are not prime\n\n            var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(XOrY(7, 34, 12)); // Output: 34\n            Console.WriteLine(XOrY(15, 8, 5));  // Output: 5\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a list of numbers, return the sum of squares of the numbers\n        /// in the list that are odd. Ignore numbers that are negative or not integers.\n        /// \n        /// DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        /// DoubleTheDifference([-1, -2, 0]) == 0\n        /// DoubleTheDifference([9, -2]) == 81\n        /// DoubleTheDifference([0]) == 0  \n        /// \n        /// If the input list is empty, return 0.\n        /// \n        /// </summary>\n        public static int DoubleTheDifference(List<object> lst) \n        {\n            // Filter out negative numbers and non-integer values\n            var filteredNumbers = lst.OfType<int>().Where(num => num >= 0 && num % 2 != 0).ToList();\n            \n            // If the list is empty, return 0\n            if (filteredNumbers.Count == 0)\n            {\n                return 0;\n            }\n            \n            // Calculate the sum of squares of the odd numbers\n            int sumOfSquares = filteredNumbers.Sum(num => num * num);\n            \n            return sumOfSquares;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(DoubleTheDifference(new List<object> { 1, 3, 2, 0 })); // Output: 10\n            Console.WriteLine(DoubleTheDifference(new List<object> { -1, -2, 0 })); // Output: 0\n            Console.WriteLine(DoubleTheDifference(new List<object> { 9, -2 })); // Output: 81\n            Console.WriteLine(DoubleTheDifference(new List<object> { 0 })); // Output: 0\n        }\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You will be given the name of a class (a string) and a list of extensions.\n        /// The extensions are to be used to load additional classes to the class. The\n        /// strength of the extension is as follows: Let CAP be the number of the uppercase\n        /// letters in the extension's name, and let SM be the number of lowercase letters \n        /// in the extension's name, the strength is given by the fraction CAP - SM. \n        /// You should find the strongest extension and return a string in this \n        /// format: ClassName.StrongestExtensionName.\n        /// If there are two or more extensions with the same strength, you should\n        /// choose the one that comes first in the list.\n        /// For example, if you are given \"Slices\" as the class and a list of the\n        /// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n        /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n        /// (its strength is -1).\n        /// Example:\n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension(string class_name, List<string> extensions)\n        {\n            if (extensions == null || extensions.Count == 0)\n                return $\"{class_name}.\";\n\n            string strongestExtension = null;\n            int maxStrength = int.MinValue;\n\n            foreach (var extension in extensions)\n            {\n                int CAP = 0, SM = 0;\n                foreach (char c in extension)\n                {\n                    if (char.IsUpper(c))\n                        CAP++;\n                    else if (char.IsLower(c))\n                        SM++;\n                }\n\n                int strength = CAP - SM;\n\n                if (strength > maxStrength)\n                {\n                    maxStrength = strength;\n                    strongestExtension = extension;\n                }\n            }\n\n            return $\"{class_name}.{strongestExtension}\";\n        }\n\n        static void Main(string[] args)\n        {\n            // Example usage:\n            List<string> extensions = new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" };\n            Console.WriteLine(StrongestExtension(\"Slices\", extensions)); // Output: Slices.SErviNGSliCes\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n        /// CycpatternCheck(\"abcd\",\"abd\") => False\n        /// CycpatternCheck(\"hello\",\"ell\") => True\n        /// CycpatternCheck(\"whassup\",\"psus\") => False\n        /// CycpatternCheck(\"abab\",\"baa\") => True\n        /// CycpatternCheck(\"efef\",\"eeff\") => False\n        /// CycpatternCheck(\"himenss\",\"simen\") => True\n        /// \n        /// </summary>\n        public static bool CycpatternCheck(string a, string b)\n        {\n            // Check if b is already a substring of a\n            if (a.Contains(b))\n                return true;\n\n            // Generate all rotations of b and check each one against a\n            string rotatedB = b;\n            for (int i = 0; i < b.Length - 1; i++)\n            {\n                rotatedB = RotateString(rotatedB);\n                if (a.Contains(rotatedB))\n                    return true;\n            }\n\n            // If no rotation is a substring of a, return false\n            return false;\n        }\n\n        private static string RotateString(string s)\n        {\n            if (s.Length <= 1)\n                return s;\n            return s.Substring(1) + s[0];\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n        }\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "using System;\nusing System.Text;\n\npublic class Program\n{\n    /// <summary> \n    /// Converts a positive integer to its Roman numeral equivalent in lowercase.\n    /// </summary>\n    public static string IntToMiniRoman(int number)\n    {\n        if (number <= 0 || number > 1000)\n        {\n            throw new ArgumentOutOfRangeException(\"Number must be between 1 and 1000.\");\n        }\n\n        // Define the Roman numeral mappings\n        var romanNumerals = new List<(int value, string symbol)>\n        {\n            (1000, \"m\"),\n            (900, \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n            (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n            (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n            (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n        };\n\n        // StringBuilder to build the Roman numeral string\n        var sb = new StringBuilder();\n\n        foreach (var (value, symbol) in romanNumerals)\n        {\n            while (number >= value)\n            {\n                sb.Append(symbol);\n                number -= value;\n            }\n        }\n\n        return sb.ToString().ToLower();\n    }\n\n    // Example usage\n    public static void Main()\n    {\n        Console.WriteLine(IntToMiniRoman(19));  // Output: xix\n        Console.WriteLine(IntToMiniRoman(152)); // Output: clii\n        Console.WriteLine(IntToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    /// <summary> \n    /// You're an expert C# programmer\n    /// \n    /// Given the lengths of the three sides of a triangle. Return True if the three\n    /// sides form a right-angled triangle, False otherwise.\n    /// A right-angled triangle is a triangle in which one angle is right angle or \n    /// 90 degree.\n    /// Example:\n    /// RightAngleTriangle(3, 4, 5) == True\n    /// RightAngleTriangle(1, 2, 3) == False\n    /// \n    /// </summary>\n    public static bool RightAngleTriangle(int a, int b, int c)\n    {\n        // First, we need to identify the longest side. In a right-angled triangle, this is the hypotenuse.\n        int max = Math.Max(a, Math.Max(b, c));\n        \n        // Now, check which of the sides is the hypotenuse by comparing it with the sum of squares of the other two sides.\n        if (max == a)\n        {\n            return b * b + c * c == a * a;\n        }\n        else if (max == b)\n        {\n            return a * a + c * c == b * b;\n        }\n        else // max == c\n        {\n            return a * a + b * b == c * c;\n        }\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(RightAngleTriangle(3, 4, 5)); // True\n        Console.WriteLine(RightAngleTriangle(1, 2, 3)); // False\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n        /// otherwise keep it as it is.\n        /// If the string contains no letters, reverse the string.\n        /// The function should return the resulted string.\n        /// Examples\n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve(string s)\n        {\n            // Check if the string contains any letters\n            bool hasLetters = Regex.IsMatch(s, \"[a-zA-Z]\");\n\n            if (!hasLetters)\n            {\n                // If no letters are found, reverse the string\n                char[] charArray = s.ToCharArray();\n                Array.Reverse(charArray);\n                return new string(charArray);\n            }\n            else\n            {\n                // Otherwise, reverse the case of each letter\n                char[] charArray = s.ToCharArray();\n                for (int i = 0; i < charArray.Length; i++)\n                {\n                    if (char.IsLetter(charArray[i]))\n                    {\n                        if (char.IsUpper(charArray[i]))\n                        {\n                            charArray[i] = char.ToLower(charArray[i]);\n                        }\n                        else\n                        {\n                            charArray[i] = char.ToUpper(charArray[i]);\n                        }\n                    }\n                }\n                return new string(charArray);\n            }\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(\"1234\")); // Output: \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a string 'text', return its md5 hash equivalent string.\n        /// If 'text' is an empty string, return None.\n        /// \n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static object StringToMd5(string text) \n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n                return sb.ToString();\n            }\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers(int a, int b) \n        {\n            // Determine the start and end of the range\n            int start = Math.Min(a, b);\n            int end = Math.Max(a, b);\n            \n            // Create a list to store even digits\n            List<int> evenDigits = new List<int>();\n            \n            // Iterate through the range and collect even digits\n            for (int i = start; i <= end; i++) \n            {\n                if (i % 2 == 0) \n                {\n                    evenDigits.Add(i);\n                }\n            }\n            \n            // Sort the list in ascending order\n            evenDigits.Sort();\n            \n            return evenDigits;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(String.Join(\", \", GenerateIntegers(2, 8))); // [2, 4, 6, 8]\n            Console.WriteLine(String.Join(\", \", GenerateIntegers(8, 2))); // [2, 4, 6, 8]\n            Console.WriteLine(String.Join(\", \", GenerateIntegers(10, 14))); // []\n        }\n    }\n}"}

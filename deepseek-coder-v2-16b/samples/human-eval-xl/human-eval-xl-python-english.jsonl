{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))       # Output: False\nprint(below_zero([1, 2, -4, 5]))   # Output: True"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    result = []\n    for bit_a, bit_b in zip(a, b):\n        if bit_a == '1' and bit_b == '1':\n            result.append('0')\n        elif (bit_a == '1' and bit_b == '0') or (bit_a == '0' and bit_b == '1'):\n            result.append('1')\n        else:  # both are '0'\n            result.append('0')\n    \n    return ''.join(result)\n\n# Example usage\nprint(string_xor('010', '110'))  # Output should be '100'"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    max_length = -1\n    longest_string = None\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Mapping of number words to their corresponding integer values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Convert each word to its corresponding integer value and sort them\n    sorted_numbers = sorted(number_words, key=lambda x: word_to_number[x])\n    \n    # Join the sorted number words back into a space-delimited string\n    return ' '.join(sorted_numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    # Calculate the range\n    range_values = max_value - min_value\n    \n    if range_values == 0:\n        raise ValueError(\"All numbers are the same, cannot rescale.\")\n    \n    rescaled_numbers = [(num - min_value) / range_values for num in numbers]\n    \n    return rescaled_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    flipped = []\n    for char in string:\n        if char.islower():\n            flipped.append(char.upper())\n        elif char.isupper():\n            flipped.append(char.lower())\n        else:\n            flipped.append(char)\n    return ''.join(flipped)\n\n# Example usage:\nprint(flip_case('Hello'))  # Output: hELLO"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    # Check for numbers less than or equal to 1\n    if n <= 1:\n        return False\n    # Check for divisibility by 2 and odd numbers up to the square root of n\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n# Test cases\nprint(is_prime(6))      # False\nprint(is_prime(101))    # True\nprint(is_prime(11))     # True\nprint(is_prime(13441))  # True\nprint(is_prime(61))     # True\nprint(is_prime(4))      # False\nprint(is_prime(1))      # False"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    # Step 1 & 2: Convert to set to remove duplicates, then back to list\n    unique_elements = list(set(l))\n    # Step 3: Sort the list\n    unique_elements.sort()\n    # Step 4: Return the sorted list\n    return unique_elements\n\n# Test the function with the provided example\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output should be [0, 2, 3, 5, 9, 123]"}
{"task_id": "python/11", "language": "python", "completion": "def fibonacci(n):\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"Return the n-th number that is a Fibonacci number and also prime.\"\"\"\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0])) # False\nprint(triples_sum_to_zero([1, 3, -2, 1])) # True\nprint(triples_sum_to_zero([1, 2, 3, 7])) # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # True\nprint(triples_sum_to_zero([1])) # False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the sequence with the base cases\n    fib4_sequence = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively up to n\n    for i in range(4, n + 1):\n        next_value = fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4]\n        fib4_sequence.append(next_value)\n    \n    return fib4_sequence[n]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        # If the length is odd, return the middle element\n        return sorted_list[n // 2]\n    else:\n        # If the length is even, return the average of the two middle elements\n        mid1 = sorted_list[(n // 2) - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str) -> bool:\n    # Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]\n\n# Test cases\nprint(is_palindrome(''))         # True\nprint(is_palindrome('aba'))      # True\nprint(is_palindrome('aaaaa'))    # True\nprint(is_palindrome('zbcd'))     # False"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nprint(remove_vowels(''))  # Output: ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # Output: 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(remove_vowels('aaaaa'))  # Output: ''\nprint(remove_vowels('aaBAA'))  # Output: 'B'\nprint(remove_vowels('zbcd'))  # Output: 'zbcd'"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # True\nprint(below_threshold([1, 20, 4, 10], 5))    # False"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    # Sort the characters of both strings\n    sorted_s0 = ''.join(sorted(s0))\n    sorted_s1 = ''.join(sorted(s1))\n    \n    # Compare the sorted strings\n    return sorted_s0 == sorted_s1\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))              # True\nprint(same_chars('dddddddabc', 'abcd'))              # True\nprint(same_chars('eabcd', 'dddddddabc'))            # False\nprint(same_chars('abcd', 'dddddddabce'))            # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')) # False"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to remove duplicates and find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert back to list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the smallest prime number, which is 2\n    factor = 2\n    largest_factor = factor\n    \n    while factor * factor <= n:\n        if n % factor == 0:\n            # If factor divides n, update n and the largest found factor\n            largest_factor = factor\n            n //= factor\n        else:\n            # Move to the next odd number (since even numbers greater than 2 are not prime)\n            factor += 1 if factor == 2 else 2\n    \n    # If n is still greater than 1, then it must be a prime number itself\n    if n > 1:\n        largest_factor = n\n    \n    return largest_factor\n\n# Test cases\nprint(largest_prime_factor(13195))  # Expected output: 29\nprint(largest_prime_factor(2048))   # Expected output: 2"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) <= 1:\n        return []\n    \n    # Compute the coefficients of the derivative polynomial\n    derived_coefficients = [(i + 1) * xs[i + 1] for i in range(len(xs) - 1)]\n    \n    return derived_coefficients\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # Output: [2, 6]"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int) -> int:\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Create a list to store the results of subproblems\n    fibfib_list = [0] * (n + 1)\n    fibfib_list[0] = 0\n    fibfib_list[1] = 0\n    fibfib_list[2] = 1\n    \n    # Fill in the list using the recursive formula\n    for i in range(3, n + 1):\n        fibfib_list[i] = fibfib_list[i - 1] + fibfib_list[i - 2] + fibfib_list[i - 3]\n    \n    return fibfib_list[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "python/27", "language": "python", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    s = s.lower()  # Convert the string to lowercase to make the function case-insensitive\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))       # Expected output: 2\nprint(vowels_count(\"ACEDY\"))       # Expected output: 3\nprint(vowels_count(\"Hello, World!\"))  # Expected output: 3\nprint(vowels_count(\"Python programming is fun\"))  # Expected output: 6\nprint(vowels_count(\"rhythm\"))      # Expected output: 0\nprint(vowels_count(\"skyward bound\"))  # Expected output: 2\nprint(vowels_count(\"12345aeiou\"))   # Expected output: 7\nprint(vowels_count(\"AEIOU\"))        # Expected output: 5\nprint(vowels_count(\"y\"))            # Expected output: 0 (since 'y' is at the end)\nprint(vowels_count(\"happy\"))        # Expected output: 1\nprint(vowels_count(\"unbelievable\"))# Expected output: 5"}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    from collections import Counter\n    \n    # Step 1: Count the frequency of each integer in the list\n    freq_dict = Counter(lst)\n    \n    # Initialize a variable to store the greatest integer that meets the condition\n    result = -1\n    \n    # Step 2: Check for integers with a frequency greater than or equal to their value\n    for num, freq in freq_dict.items():\n        if freq >= num and num > result:\n            result = num\n    \n    return result\n\n# Examples\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1"}
{"task_id": "python/29", "language": "python", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        \n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # If not a valid triangle, return -1\n        return -1\n\n# Example usage:\nprint(triangle_area(3, 4, 5))  # Should print 6.00\nprint(triangle_area(1, 2, 10)) # Should print -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    # Check if q is a palindrome\n    is_palindrome = (q == q[::-1])\n    \n    # Calculate the sum of elements in q\n    total_weight = sum(q)\n    \n    # Return True if both conditions are met, otherwise False\n    return is_palindrome and total_weight <= w\n\n# Test cases\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "python/31", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate all prime numbers less than the given limit.\"\"\"\n    primes = []\n    for num in range(2, limit):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number can be expressed as the multiplication of three prime numbers.\"\"\"\n    # Generate all prime numbers less than 100\n    primes = generate_primes(100)\n    \n    # Check combinations of three different primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage\nprint(is_multiply_prime(30))  # True because 30 = 2 * 3 * 5\nprint(is_multiply_prime(60))  # True because 60 = 2 * 3 * 10 (10 is not prime, but the function checks all combinations)\nprint(is_multiply_prime(70))  # False because no combination of primes less than 100 multiplies to 70"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    formatted_binary = \"db\" + binary_str + \"db\"\n    \n    return formatted_binary\n\n# Examples\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check every 3 consecutive letters\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    # If all checks pass, the string is happy\n    return True\n\n# Test cases\nprint(is_happy(\"a\"))       # False\nprint(is_happy(\"aa\"))      # False\nprint(is_happy(\"abcd\"))    # True\nprint(is_happy(\"aabb\"))    # False\nprint(is_happy(\"adb\"))     # True\nprint(is_happy(\"xyy\"))     # False"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    # Define the grading scale as a dictionary for easy lookup\n    grade_scale = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    # Create a list to store the letter grades for each GPA in the input list\n    letter_grades = []\n    \n    # Iterate over each GPA in the input list and find its corresponding letter grade\n    for gpa in grades:\n        # Find the appropriate letter grade by checking where the GPA falls in the scale\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa >= 3.7:\n            letter_grade = 'A'\n        elif gpa >= 3.3:\n            letter_grade = 'A-'\n        elif gpa >= 3.0:\n            letter_grade = 'B+'\n        elif gpa >= 2.7:\n            letter_grade = 'B'\n        elif gpa >= 2.3:\n            letter_grade = 'B-'\n        elif gpa >= 2.0:\n            letter_grade = 'C+'\n        elif gpa >= 1.7:\n            letter_grade = 'C'\n        elif gpa >= 1.3:\n            letter_grade = 'C-'\n        elif gpa >= 1.0:\n            letter_grade = 'D+'\n        elif gpa >= 0.7:\n            letter_grade = 'D'\n        else: # if gpa < 0.7\n            letter_grade = 'D-'\n        \n        # Append the found letter grade to the list of letter grades\n        letter_grades.append(letter_grade)\n    \n    # Return the list of letter grades\n    return letter_grades\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output should be ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "python/35", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number n is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string length is a prime number or False otherwise.\"\"\"\n    str_len = len(string)\n    return is_prime(str_len)\n\n# Examples\nprint(prime_length('Hello'))     # True\nprint(prime_length('abcdcba'))   # True\nprint(prime_length('kittens'))   # True\nprint(prime_length('orange'))    # False"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # Step 1: Calculate the sum of digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the digit sum to binary\n    binary_representation = bin(digit_sum)[2:]  # [2:] is used to remove the '0b' prefix\n    \n    # Step 3: Return the binary representation as a string\n    return binary_representation\n\n# Test cases\nprint(solve(1000))  # Output should be \"1\"\nprint(solve(150))   # Output should be \"110\"\nprint(solve(147))   # Output should be \"1100\""}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coords = []\n    \n    # Iterate through each row in the nested list\n    for i, row in enumerate(lst):\n        # Iterate through each element in the row\n        for j, elem in enumerate(row):\n            # If the element matches x, add its coordinate to the list\n            if elem == x:\n                coords.append((i, j))\n    \n    # Sort the coordinates first by rows in ascending order, then by columns in descending order\n    coords.sort(key=lambda t: (t[0], -t[1]))\n    \n    return coords\n\n# Examples\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # == []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # == [(2, 2)]"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted_lst = sorted(set(lst))\n    \n    # Return the second smallest element\n    if len(unique_sorted_lst) > 1:\n        return unique_sorted_lst[1]\n    else:\n        return None\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))                # Output: None\nprint(next_smallest([1, 1]))            # Output: None"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences based on delimiters '.', '?', and '!'\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    \n    # Initialize the count of boredoms to 0\n    boredom_count = 0\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Strip any leading or trailing whitespace from the sentence\n        sentence = sentence.strip()\n        \n        # Check if the sentence starts with the word \"I\"\n        if sentence and sentence[0].lower() == 'i':\n            boredom_count += 1\n    \n    return boredom_count\n\n# Example usage:\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "python/40", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    max_prime = float('-inf')\n    \n    # Find the largest prime number in the list\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    # If there are no prime numbers, return 0 (or handle as needed)\n    if max_prime == float('-inf'):\n        return 0\n    \n    # Sum the digits of the largest prime number\n    sum_digits = sum([int(digit) for digit in str(max_prime)])\n    \n    return sum_digits\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))           # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))                # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))                                     # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))                                       # Output: 7"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Check if the dictionary is empty\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if not key.islower():\n                all_lower = False\n            if not key.isupper():\n                all_upper = False\n        else:\n            return False  # If any key is not a string, return False\n    \n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the string to a float\n    num = float(value)\n    \n    # Find the floor and ceiling of the number\n    floor_val = int(num)\n    ceil_val = int(num + 0.999999) if num > 0 else int(num - 0.999999)\n    \n    # Determine which integer is closer, or return the number itself if it's equidistant\n    if abs(num - floor_val) < abs(num - ceil_val):\n        return floor_val\n    elif abs(num - floor_val) > abs(num - ceil_val):\n        return ceil_val\n    else:  # If they are equidistant, round away from zero\n        return ceil_val if num > 0 else floor_val\n\n# Examples\nprint(closest_integer(\"10\"))       # Should print 10\nprint(closest_integer(\"15.3\"))     # Should print 15\nprint(closest_integer(\"14.5\"))     # Should print 15\nprint(closest_integer(\"-14.5\"))    # Should print -15"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    \n    for i in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:  # If n is even\n            current_stones += 2\n        else:           # If n is odd\n            current_stones += 2\n    \n    return pile\n\n# Examples\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string by both commas and spaces\n    words = s.replace(',', ' ').split()\n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    \n    # Iterate from y to x in reverse to find the biggest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    return -1\n\n# Test cases\nprint(choose_num(12, 15))  # Output should be 14\nprint(choose_num(13, 12))  # Output should be -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total = sum(range(n, m + 1))\n    \n    # Calculate the number of integers in the range\n    count = m - n + 1\n    \n    # Compute the average and round it to the nearest integer\n    avg = round(total / count)\n    \n    # Convert the rounded average to binary and return as a string prefixed with \"0b\"\n    return bin(avg)[2:]\n\n# Example usage:\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "python/47", "language": "python", "completion": "def factorial(num):\n    \"\"\" Helper function to calculate the factorial of a number. \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef f(n):\n    \"\"\" Main function that generates the required list based on even/odd index. \"\"\"\n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # Check if the index is even\n            result_list.append(factorial(i))\n        else:  # If the index is odd, calculate the sum of numbers from 1 to i\n            result_list.append(sum(range(1, i + 1)))\n    return result_list\n\n# Example usage:\nprint(f(5))  # Output should be [1, 2, 6, 24, 15]"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(num):\n    \"\"\"Helper function to check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_palindrome(3))   # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if not arr:  # If the array is empty, it is trivially sorted\n        return True\n    \n    def is_sorted(arr):\n        \"\"\"Check if the array is sorted in non-decreasing order.\"\"\"\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    \n    n = len(arr)\n    # Check each possible rotation of the array\n    for shift in range(n):\n        rotated_arr = arr[shift:] + arr[:shift]\n        if is_sorted(rotated_arr):\n            return True\n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Expected: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Expected: False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # Identify odd and even elements in lst1\n    odds_in_lst1 = [x for x in lst1 if x % 2 != 0]\n    \n    # If there are no odd numbers in lst1, return \"YES\" immediately\n    if not odds_in_lst1:\n        return \"YES\"\n    \n    # Identify even elements in lst2\n    evens_in_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    # Check if the number of odd elements in lst1 is less than or equal to the number of even elements in lst2\n    if len(odds_in_lst1) <= len(evens_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4])) # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4])) # Output: \"NO\""}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s, c):\n    # Step 1: Create a new string that does not contain any characters from `c`\n    result = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the resulting string is a palindrome\n    is_palindrome = (result == result[::-1])\n    \n    # Return the tuple containing the result and whether it's a palindrome\n    return (result, is_palindrome)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))   # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize the count of bucket uses to 0\n    total_buckets = 0\n    \n    # Iterate through each row (well) in the grid\n    for well in grid:\n        # Count the number of units of water in the current well\n        water_units = sum(well)\n        \n        # Calculate the number of times we need to use the bucket to empty the well\n        if water_units > 0:\n            buckets_used = math.ceil(water_units / capacity)\n            total_buckets += buckets_used\n    \n    return total_buckets\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "python/53", "language": "python", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    # Step 1: Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Step 2: Select the last `k` elements from the sorted array\n    top_k = arr_sorted[-k:]\n    \n    # Step 3: Return the selected elements as a sorted list\n    return top_k\n\n# Test cases\nprint(maximum([-3, -4, 5], 3))        # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))         # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "python/56", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of the intersection of two intervals is a prime number.\"\"\"\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if there is an intersection\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length_intersection = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    if n < 0:\n        return []  # Return an empty list for non-negative input\n    \n    # Base cases\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    # Initialize the sequence with base values\n    tribonacci_sequence = [1, 3]\n    \n    # Calculate the sequence up to the nth element\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i])\n    \n    return tribonacci_sequence\n\n# Examples\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Convert the number to a string to iterate over its digits\n    str_n = str(n)\n    \n    # Initialize the product variable\n    product = 1\n    \n    # Iterate through each character (digit) in the string representation of n\n    for char in str_n:\n        digit = int(char)\n        \n        # Check if the digit is odd\n        if digit % 2 != 0:\n            product *= digit\n    \n    # If no odd digits were found, return 0\n    if product == 1 and str_n.isdigit():\n        return 0\n    \n    return product\n\n# Test cases\nprint(digits(1))   # Output: 1\nprint(digits(4))   # Output: 0\nprint(digits(235)) # Output: 15"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            else:\n                stack.pop()\n    \n    # If there's at least one bracket left in the stack, it means they are not nested properly\n    return len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True"}
{"task_id": "python/60", "language": "python", "completion": "import math\n\ndef sum_squares(lst):\n    # Step 1: Round each element to the upper integer\n    rounded_list = [math.ceil(num) for num in lst]\n    \n    # Step 2: Square each number in the rounded list\n    squared_list = [num ** 2 for num in rounded_list]\n    \n    # Step 3: Sum all the squared numbers\n    total_sum = sum(squared_list)\n    \n    # Step 4: Return the sum\n    return total_sum\n\n# Test cases\nprint(sum_squares([1,2,3]))       # Output should be 14\nprint(sum_squares([1,4,9]))       # Output should be 98\nprint(sum_squares([1,3,5,7]))     # Output should be 84\nprint(sum_squares([1.4,4.2,0]))   # Output should be 29\nprint(sum_squares([-2.4,1,1]))    # Output should be 6"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Get the last character of the string\n    last_char = txt[-1]\n    \n    # Check if the last character is an alphabetical character and not part of a word\n    # Also, ensure that there are no trailing spaces in the input string\n    if last_char.isalpha() and (len(txt) == 1 or txt[len(txt)-2] == ' '):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"\")) # \u279e False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Examples:\nprint(can_arrange([1,2,4,3,5])) # Output should be 3\nprint(can_arrange([1,2,3]))      # Output should be -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    # Initialize the results to None\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))                   # Output: (None, None)\nprint(largest_smallest_integers([0]))                  # Output: (None, None)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            result = 1\n            for i in range(2, num + 1):\n                result *= i\n            return result\n    \n    product = 1\n    for i in range(n, 0, -1):\n        product *= factorial(i)\n    return product\n\n# Example usage:\nprint(special_factorial(4))  # Output should be 288"}
{"task_id": "python/65", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, returns a string containing the words whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    filtered_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(filtered_words)\n\n# Example usage:\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    # Helper function to parse a fraction string into numerator and denominator\n    def parse_fraction(frac):\n        num, denom = map(int, frac.split('/'))\n        return num, denom\n    \n    # Parse the fractions\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n    \n    # Multiply the numerators and denominators\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n    \n    # Check if the result is a whole number by comparing it to its integer version\n    return result_num % 1 == 0 and result_denom % 1 == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Create a list of tuples where each tuple contains the number and its digit sum\n    nums_with_sum = [(num, digit_sum(num)) for num in nums]\n    \n    # Sort the list of tuples first by the digit sum and then by the original index\n    sorted_nums = sorted(nums_with_sum, key=lambda x: (x[1], nums.index(x[0])))\n    \n    # Extract the numbers from the sorted list of tuples and return them\n    return [item[0] for item in sorted_nums]\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                      # Output: []"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    def is_odd(digit):\n        return digit in [1, 3, 5, 7, 9]\n    \n    def first_and_last_are_odd(num):\n        num_str = str(abs(num))  # Convert number to string and handle negative numbers\n        if len(num_str) < 2:\n            return False\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return is_odd(first_digit) and is_odd(last_digit)\n    \n    count = 0\n    for num in nums:\n        if num > 10 and first_and_last_are_odd(num):\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    # Step 1: Generate the array a based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    \n    # Step 2: Iterate through all possible triples (i, j, k) where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Step 3: Check if a[i] + a[j] + a[k] is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\n# Example usage:\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # Define the list of planets in order of their proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of the given planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for easier slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Get the planets between the two indices (inclusive of the start and end)\n    result = planets[index1+1:index2]\n    \n    # Return the result as a tuple\n    return tuple(result)\n\n# Examples\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "python/71", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Examples\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # Filter out non-positive integers and get the squares of odd numbers\n    odd_squares = [num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0]\n    \n    # If there are no valid numbers, return 0\n    if not odd_squares:\n        return 0\n    \n    # Return the sum of the squares of the odd numbers\n    return sum(odd_squares)\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))       # Output should be 10\nprint(double_the_difference([-1, -2, 0]))        # Output should be 0\nprint(double_the_difference([9, -2]))            # Output should be 81\nprint(double_the_difference([0]))                # Output should be 0"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: my_class.AA\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: Slices.SErviNGSliCes"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    # Generate all possible rotations of the second word\n    def generate_rotations(word):\n        rotations = []\n        for i in range(len(word)):\n            rotated = word[i:] + word[:i]\n            rotations.append(rotated)\n        return rotations\n    \n    # Check if any rotation is a substring of the first word\n    rotations = generate_rotations(b)\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Mapping of integer values to Roman numeral symbols\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    # Initialize an empty string for the result\n    roman_string = ''\n    \n    # Iterate through the mapping in descending order of values\n    for value, symbol in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            # Append the Roman numeral symbol to the result string\n            roman_string += symbol\n            # Subtract the corresponding value from the number\n            number -= value\n    \n    return roman_string.lower()\n\n# Test cases\nprint(int_to_mini_roman(19) == 'xix')  # True\nprint(int_to_mini_roman(152) == 'clii')  # True\nprint(int_to_mini_roman(426) == 'cdxxvi')  # True"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # First, find the maximum of the three sides to identify the hypotenuse\n    max_side = max(a, b, c)\n    \n    # Then check if the Pythagorean theorem holds for this side\n    if max_side == a:\n        return abs(b**2 + c**2 - a**2) < 1e-9  # Use a small tolerance to account for floating point errors\n    elif max_side == b:\n        return abs(a**2 + c**2 - b**2) < 1e-9\n    else:\n        return abs(a**2 + b**2 - c**2) < 1e-9\n\n# Examples\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    # Check if there are any letters in the string\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        # If no letters, reverse the entire string\n        return s[::-1]\n    \n    # Iterate through each character and reverse its case if it's a letter\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    # Join the characters to form the final string and return it\n    return ''.join(result)\n\n# Examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_mdseqrld('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the input string\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal representation of the digest\n    return md5_hash.hexdigest()\n\n# Test case\nprint(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')  # Should print True"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure the range is correctly handled\n    start, end = min(a, b), max(a, b)\n    \n    # Collect even digits in the range\n    even_digits = [num for num in range(start, end + 1) if num % 2 == 0]\n    \n    return even_digits\n\n# Test cases\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []"}

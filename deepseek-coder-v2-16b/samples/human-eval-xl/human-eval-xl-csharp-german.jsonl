{"task_id": "csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero(List<int> operations) \n        {\n            int balance = 0;\n            \n            foreach (var operation in operations)\n            {\n                balance += operation;\n                if (balance < 0)\n                {\n                    return true;\n                }\n            }\n            \n            return false;\n        }\n        \n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(BelowZero(new List<int> {1, 2, 3})); // False\n            Console.WriteLine(BelowZero(new List<int> {1, 2, -4, 5})); // True\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\n        /// Eine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static Tuple<int, int> SumProduct(List<int> numbers)\n        {\n            if (numbers == null || !numbers.Any())\n            {\n                return new Tuple<int, int>(0, 1);\n            }\n\n            int sum = numbers.Sum();\n            int product = numbers.Aggregate(1, (acc, num) => acc * num);\n\n            return new Tuple<int, int>(sum, product);\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            List<int> testCase1 = new List<int>();\n            var result1 = SumProduct(testCase1);\n            Console.WriteLine($\"SumProduct({string.Join(\", \", testCase1)}) -> ({result1.Item1}, {result1.Item2})\");\n\n            List<int> testCase2 = new List<int> { 1, 2, 3, 4 };\n            var result2 = SumProduct(testCase2);\n            Console.WriteLine($\"SumProduct({string.Join(\", \", testCase2)}) -> ({result2.Item1}, {result2.Item2})\");\n        }\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\n        /// F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor(string a, string b) \n        {\n            // Ensure both strings are of the same length\n            if (a.Length != b.Length)\n            {\n                throw new ArgumentException(\"Input strings must be of the same length.\");\n            }\n\n            char[] result = new char[a.Length];\n\n            for (int i = 0; i < a.Length; i++)\n            {\n                // Perform XOR operation on each character\n                if (a[i] == b[i])\n                {\n                    result[i] = '0';\n                }\n                else\n                {\n                    result[i] = '1';\n                }\n            }\n\n            return new string(result);\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(StringXor(\"010\", \"110\")); // Output: '100'\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Aus einer Liste von Zeichenketten soll die l\u00e4ngste zur\u00fcckgegeben werden. Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zur\u00fcckgegeben werden. Falls die Eingabeliste leer ist, soll null zur\u00fcckgegeben werden.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest(List<string> strings) \n        {\n            if (strings == null || !strings.Any())\n            {\n                return null;\n            }\n\n            string longestString = strings.First();\n            foreach (var str in strings)\n            {\n                if (str.Length > longestString.Length)\n                {\n                    longestString = str;\n                }\n            }\n\n            return longestString;\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static int GreatestCommonDivisor(int a, int b)\n    {\n        // Ensure that 'a' and 'b' are positive integers.\n        if (a < 0) a = -a;\n        if (b < 0) b = -b;\n        \n        // Implement the Euclidean algorithm using modulo operation for efficiency.\n        while (b != 0)\n        {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        \n        return a;\n    }\n\n    static void Main(string[] args)\n    {\n        // Test cases\n        Console.WriteLine(GreatestCommonDivisor(3, 5)); // Output: 1\n        Console.WriteLine(GreatestCommonDivisor(25, 15)); // Output: 5\n        \n        // Additional test cases\n        Console.WriteLine(GreatestCommonDivisor(48, 18)); // Output: 6\n        Console.WriteLine(GreatestCommonDivisor(30, 105)); // Output: 15\n    }\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n        ///     G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n        ///     Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers(string numbers) \n        {\n            // Dictionary to map words to their corresponding numeric values\n            var wordToNumber = new Dictionary<string, int>\n            {\n                {\"null\", 0},\n                {\"eins\", 1},\n                {\"zwei\", 2},\n                {\"drei\", 3},\n                {\"vier\", 4},\n                {\"f\u00fcnf\", 5},\n                {\"sechs\", 6},\n                {\"sieben\", 7},\n                {\"acht\", 8},\n                {\"neun\", 9}\n            };\n\n            // Split the input string into words and convert them to their numeric values\n            var numberWords = numbers.Split(' ');\n            var numberedList = numberWords.Select(word => wordToNumber[word]).ToList();\n\n            // Sort the list of numbers\n            numberedList.Sort();\n\n            // Convert the sorted numbers back to words\n            var sortedWords = numberedList.Select(num => wordToNumber.FirstOrDefault(x => x.Value == num).Key).ToArray();\n\n            // Join the sorted words into a single string and return it\n            return string.Join(\" \", sortedWords);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(SortNumbers(\"three one five\")); // Output: \"one three five\"\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "if (numbers == null || numbers.Count < 2)\n                throw new ArgumentException(\"The list must contain at least two elements.\");\n\n            double min = numbers.Min();\n            double max = numbers.Max();\n\n            List<double> rescaledNumbers = new List<double>();\n\n            foreach (double number in numbers)\n            {\n                double rescaledValue = (number - min) / (max - min);\n                rescaledNumbers.Add(rescaledValue);\n            }\n\n            return rescaledNumbers;\n        }\n\n        static void Main(string[] args)\n        {\n            List<double> numbers = new List<double> { 1.0, 2.0, 3.0, 4.0, 5.0 };\n            List<double> rescaledNumbers = RescaleToUnit(numbers);\n\n            Console.WriteLine(string.Join(\", \", rescaledNumbers)); // Output: 0.0, 0.25, 0.5, 0.75, 1.0\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase(string str)\n        {\n            char[] chars = str.ToCharArray();\n            for (int i = 0; i < chars.Length; i++)\n            {\n                if (char.IsUpper(chars[i]))\n                {\n                    chars[i] = char.ToLower(chars[i]);\n                }\n                else if (char.IsLower(chars[i]))\n                {\n                    chars[i] = char.ToUpper(chars[i]);\n                }\n            }\n            return new string(chars);\n        }\n\n        static void Main(string[] args)\n        {\n            // Beispieltestfall\n            string testString = \"Hello\";\n            Console.WriteLine(FlipCase(testString));  // Ausgabe: 'hELLO'\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "public static List<int> GetPositive(List<int> l)\n{\n    return l.Where(num => num > 0).ToList();\n}"}
{"task_id": "csharp/9", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool IsPrime(int n)\n    {\n        // Handle edge cases: numbers less than 2 are not prime\n        if (n < 2)\n        {\n            return false;\n        }\n        \n        // Check for divisors from 2 to the square root of n\n        for (int i = 2; i * i <= n; i++)\n        {\n            if (n % i == 0)\n            {\n                return false; // Found a divisor, so it's not prime\n            }\n        }\n        \n        return true; // No divisors found, so it is prime\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsPrime(6));   // False\n        Console.WriteLine(IsPrime(101)); // True\n        Console.WriteLine(IsPrime(11));  // True\n        Console.WriteLine(IsPrime(13441)); // True\n        Console.WriteLine(IsPrime(61));  // True\n        Console.WriteLine(IsPrime(4));   // False\n        Console.WriteLine(IsPrime(1));   // False\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// </summary>\n        public static List<int> Unique(List<int> l) \n        {\n            // Verwende LINQ um die eindeutigen Elemente zu filtern und dann sortieren\n            return l.Distinct().OrderBy(x => x).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> numbers = new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 };\n            List<int> uniqueNumbers = Unique(numbers);\n            Console.WriteLine(string.Join(\", \", uniqueNumbers)); // Ausgabe: 0, 2, 3, 5, 9, 123\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// PrimeFib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n        /// </summary>\n        public static int PrimeFib(int n)\n        {\n            List<long> fibs = new List<long>();\n            fibs.Add(0);\n            fibs.Add(1);\n            \n            // Generate Fibonacci numbers until we find a prime number\n            while (true)\n            {\n                long nextFib = fibs[fibs.Count - 1] + fibs[fibs.Count - 2];\n                if (IsPrime(nextFib))\n                {\n                    return Convert.ToInt32(nextFib);\n                }\n                fibs.Add(nextFib);\n            }\n        }\n        \n        private static bool IsPrime(long number)\n        {\n            if (number <= 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n            \n            for (int i = 3; i * i <= number; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(PrimeFib(1)); // Output: 2\n            Console.WriteLine(PrimeFib(2)); // Output: 3\n            Console.WriteLine(PrimeFib(3)); // Output: 5\n            Console.WriteLine(PrimeFib(4)); // Output: 13\n            Console.WriteLine(PrimeFib(5)); // Output: 89\n        }\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// TriplesSumToZero nimmt eine Liste von ganzen Zahlen als Eingabe.\n        /// Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero(List<int> l) \n        {\n            if (l.Count < 3) return false; // Wenn die Liste weniger als drei Elemente hat, kann es keine L\u00f6sung geben\n            \n            for (int i = 0; i < l.Count - 2; i++)\n            {\n                for (int j = i + 1; j < l.Count - 1; j++)\n                {\n                    for (int k = j + 1; k < l.Count; k++)\n                    {\n                        if (l[i] + l[j] + l[k] == 0)\n                        {\n                            return true; // Wenn die Summe der drei Elemente null ist, geben wir True zur\u00fcck\n                        }\n                    }\n                }\n            }\n            \n            return false; // Wenn keine solche Kombination gefunden wird, geben wir False zur\u00fcck\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(TriplesSumToZero(new List<int> { 2, 4, -5, 3, 9, 7 })); // True\n            Console.WriteLine(TriplesSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// PairsSumToZero nimmt eine Liste von ganzen Zahlen als Eingabe.\n        /// Es gibt True zur\u00fcck, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls gibt es False zur\u00fcck.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool PairsSumToZero(List<int> l) \n        {\n            HashSet<int> seenNumbers = new HashSet<int>();\n            \n            foreach (int number in l)\n            {\n                if (seenNumbers.Contains(-number))\n                {\n                    return true;\n                }\n                seenNumbers.Add(number);\n            }\n            \n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, 5, 0 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 3, -2, 1 })); // True\n            Console.WriteLine(PairsSumToZero(new List<int> { 1, 2, 3, 7 })); // False\n            Console.WriteLine(PairsSumToZero(new List<int> { 2, 4, -5, 3, 5, 7 })); // True\n            Console.WriteLine(PairsSumToZero(new List<int> { 1 })); // False\n        }\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Berechnet das n-te Element der Fib4-Zahlenfolge iterativ.\n        /// </summary>\n        public static int Fib4(int n)\n        {\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 2;\n            if (n == 3) return 0;\n\n            int[] fib4 = new int[n + 1];\n            fib4[0] = 0;\n            fib4[1] = 0;\n            fib4[2] = 2;\n            fib4[3] = 0;\n\n            for (int i = 4; i <= n; i++)\n            {\n                fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n            }\n\n            return fib4[n];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fib4(5)); // Ausgabe: 4\n            Console.WriteLine(Fib4(6)); // Ausgabe: 8\n            Console.WriteLine(Fib4(7)); // Ausgabe: 14\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static object Median(List<int> l)\n    {\n        // Sortiere die Liste\n        l.Sort();\n        \n        int count = l.Count;\n        \n        if (count % 2 == 0)\n        {\n            // Wenn die Anzahl der Elemente gerade ist, berechne den Durchschnitt der beiden mittleren Elemente\n            int middleIndex1 = count / 2 - 1;\n            int middleIndex2 = count / 2;\n            double median = (l[middleIndex1] + l[middleIndex2]) / 2.0;\n            return median;\n        }\n        else\n        {\n            // Wenn die Anzahl der Elemente ungerade ist, nehme das mittlere Element\n            int middleIndex = count / 2;\n            return l[middleIndex];\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        // Test cases\n        List<int> list1 = new List<int> { 3, 1, 2, 4, 5 };\n        Console.WriteLine(Median(list1)); // Ausgabe: 3\n        \n        List<int> list2 = new List<int> { -10, 4, 6, 1000, 10, 20 };\n        Console.WriteLine(Median(list2)); // Ausgabe: 15.0\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n        /// </summary>\n        public static bool IsPalindrome(string text)\n        {\n            // Remove all non-letter characters and convert to lowercase\n            string cleanedText = new string(text.Where(char.IsLetter).Select(char.ToLower).ToArray());\n            \n            // Check if the cleaned text is a palindrome\n            int left = 0;\n            int right = cleanedText.Length - 1;\n            \n            while (left < right)\n            {\n                if (cleanedText[left] != cleanedText[right])\n                {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            \n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsPalindrome(\"\")); // True\n            Console.WriteLine(IsPalindrome(\"aba\")); // True\n            Console.WriteLine(IsPalindrome(\"aaaaa\")); // True\n            Console.WriteLine(IsPalindrome(\"zbcd\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// RemoveVowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n        /// >>> RemoveVowels('')\n        /// ''\n        /// >>> RemoveVowels(\"abcdef\\nghijklm\")\n        /// 'bcdf\\nghjklm'\n        /// >>> RemoveVowels('abcdef')\n        /// 'bcdf'\n        /// >>> RemoveVowels('aaaaa')\n        /// ''\n        /// >>> RemoveVowels('aaBAA')\n        /// 'B'\n        /// >>> RemoveVowels('zbcd')\n        /// 'zbcd'\n        /// </summary>\n        public static string RemoveVowels(string text) \n        {\n            if (string.IsNullOrEmpty(text))\n                return text;\n\n            // Definieren der Vokale, die entfernt werden sollen\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n\n            // Verwenden eines regul\u00e4ren Ausdrucks, um alle Vokale zu entfernen\n            string result = new string(text.Where(c => !vowels.Contains(c)).ToArray());\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(RemoveVowels(\"\")); // ''\n            Console.WriteLine(RemoveVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\n            Console.WriteLine(RemoveVowels('abcdef')); // 'bcdf'\n            Console.WriteLine(RemoveVowels('aaaaa')); // ''\n            Console.WriteLine(RemoveVowels('aaBAA')); // 'B'\n            Console.WriteLine(RemoveVowels('zbcd')); // 'zbcd'\n        }\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "public static bool BelowThreshold(List<int> l, int t)\n{\n    return l.All(num => num < t);\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Adds two numbers x and y together.\n        /// </summary>\n        public static int Add(int x, int y)\n        {\n            return x + y;\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Add(2, 3)); // Output: 5\n            Console.WriteLine(Add(5, 7)); // Output: 12\n        }\n    }\n}"}
{"task_id": "csharp/20", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n        /// </summary>\n        public static bool SameChars(string s0, string s1) \n        {\n            if (s0.Length != s1.Length)\n                return false;\n\n            // Erstellen Sie Dictionaries zur Speicherung der Zeichenh\u00e4ufigkeiten\n            Dictionary<char, int> charCountS0 = new Dictionary<char, int>();\n            Dictionary<char, int> charCountS1 = new Dictionary<char, int>();\n\n            // Z\u00e4hlen Sie die H\u00e4ufigkeit der Zeichen in s0\n            foreach (char c in s0)\n            {\n                if (!charCountS0.ContainsKey(c))\n                    charCountS0[c] = 1;\n                else\n                    charCountS0[c]++;\n            }\n\n            // Z\u00e4hlen Sie die H\u00e4ufigkeit der Zeichen in s1\n            foreach (char c in s1)\n            {\n                if (!charCountS1.ContainsKey(c))\n                    charCountS1[c] = 1;\n                else\n                    charCountS1[c]++;\n            }\n\n            // Vergleichen Sie die Dictionaries\n            if (charCountS0.Count != charCountS1.Count)\n                return false;\n\n            foreach (var kvp in charCountS0)\n            {\n                if (!charCountS1.ContainsKey(kvp.Key) || charCountS1[kvp.Key] != kvp.Value)\n                    return false;\n            }\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // True\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabc\")); // True\n            Console.WriteLine(SameChars(\"dddddddabc\", \"abcd\")); // True\n            Console.WriteLine(SameChars(\"eabcd\", \"dddddddabc\")); // False\n            Console.WriteLine(SameChars(\"abcd\", \"dddddddabce\")); // False\n            Console.WriteLine(SameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "public static int Fib(int n) \n{\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    return Fib(n - 1) + Fib(n - 2);\n}"}
{"task_id": "csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// </summary>\n        public static List<int> Common(List<int> l1, List<int> l2)\n        {\n            // Convert lists to sets to remove duplicates and find intersection\n            HashSet<int> set1 = new HashSet<int>(l1);\n            HashSet<int> set2 = new HashSet<int>(l2);\n            \n            // Find the intersection of both sets\n            HashSet<int> intersection = new HashSet<int>(set1);\n            intersection.IntersectWith(set2);\n            \n            // Convert the result back to a list and sort it\n            List<int> result = new List<int>(intersection);\n            result.Sort();\n            \n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", Common(new List<int> { 1, 4, 3, 34, 653, 2, 5 }, new List<int> { 5, 7, 1, 5, 9, 653, 121 }))); // [1, 5, 653]\n            Console.WriteLine(string.Join(\", \", Common(new List<int> { 5, 3, 2, 8 }, new List<int> { 3, 2 }))); // [2, 3]\n        }\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static int LargestPrimeFactor(int n)\n    {\n        // Check for smallest possible prime factors\n        if (n <= 1) return -1; // This case should not happen as per the problem statement\n        \n        int largestPrime = 1; // Start with the assumption that the number itself is a factor\n        \n        // Divide by 2 until n becomes odd\n        while (n % 2 == 0)\n        {\n            largestPrime = 2;\n            n /= 2;\n        }\n        \n        // Check for odd factors starting from 3\n        for (int i = 3; i * i <= n; i += 2)\n        {\n            while (n % i == 0)\n            {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n is still greater than 1, then it must be a prime number itself\n        if (n > 1)\n        {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(LargestPrimeFactor(13195)); // Output: 29\n        Console.WriteLine(LargestPrimeFactor(2048));  // Output: 2\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "public static int SumToN(int n)\n{\n    if (n < 1) return 0; // Handle the case where n is less than 1\n    return n * (n + 1) / 2; // Use the formula for the sum of the first n natural numbers\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n        ///     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        ///     Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative(List<int> xs) \n        {\n            List<int> derivative = new List<int>();\n            \n            for (int i = 1; i < xs.Count; i++)\n            {\n                int coefficient = xs[i] * i;\n                derivative.Add(coefficient);\n            }\n            \n            return derivative;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            List<int> test1 = new List<int> { 3, 1, 2, 4, 5 };\n            List<int> result1 = Derivative(test1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: 1, 4, 12, 20\n\n            List<int> test2 = new List<int> { 1, 2, 3 };\n            List<int> result2 = Derivative(test2);\n            Console.WriteLine(string.Join(\", \", result2)); // Output: 2, 6\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die FibFib-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n        ///     Fibfib(0) == 0\n        ///     Fibfib(1) == 0\n        ///     Fibfib(2) == 1\n        ///     Fibfib(n) == Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3).\n        ///     Bitte schreiben Sie eine Funktion, um das n-te Element der FibFib-Zahlenfolge effizient zu berechnen.\n        /// >>> Fibfib(1)\n        /// 0\n        /// >>> Fibfib(5)\n        /// 4\n        /// >>> Fibfib(8)\n        /// 24\n        /// \n        /// </summary>\n        public static int Fibfib(int n)\n        {\n            if (n == 0) return 0;\n            if (n == 1) return 0;\n            if (n == 2) return 1;\n\n            List<int> fibfibSequence = new List<int> { 0, 0, 1 };\n\n            for (int i = 3; i <= n; i++)\n            {\n                int nextValue = fibfibSequence[i - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3];\n                fibfibSequence.Add(nextValue);\n            }\n\n            return fibfibSequence[n];\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Fibfib(1)); // Output: 0\n            Console.WriteLine(Fibfib(5)); // Output: 4\n            Console.WriteLine(Fibfib(8)); // Output: 24\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Schreiben Sie eine Funktion VowelsCount, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n        /// \n        /// Beispiel:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount(string s)\n        {\n            if (string.IsNullOrEmpty(s)) return 0;\n\n            // Definieren der Vokale\n            char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n\n            // Umwandeln des Strings in Kleinbuchstaben, um die Gro\u00df-/Kleinschreibung zu ignorieren\n            s = s.ToLower();\n\n            int count = 0;\n\n            // Durchlaufen des Strings und Z\u00e4hlen der Vokale\n            foreach (char c in s)\n            {\n                if (vowels.Contains(c))\n                {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            // Testbeispiele\n            Console.WriteLine(VowelsCount(\"abcde\"));  // Ausgabe: 2\n            Console.WriteLine(VowelsCount(\"ACEDY\"));  // Ausgabe: 3\n        }\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int Search(List<int> lst)\n    {\n        // Group the numbers by their value and count the frequency of each group\n        var groupedNumbers = lst.GroupBy(num => num).ToDictionary(g => g.Key, g => g.Count());\n        \n        // Find the maximum number that satisfies the condition (frequency >= value)\n        int result = -1;\n        foreach (var kvp in groupedNumbers)\n        {\n            if (kvp.Value >= kvp.Key)\n            {\n                if (kvp.Key > result)\n                {\n                    result = kvp.Key;\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(Search(new List<int> { 4, 1, 2, 2, 3, 1 })); // Output: 2\n        Console.WriteLine(Search(new List<int> { 1, 2, 2, 3, 3, 3, 4, 4, 4 })); // Output: 3\n        Console.WriteLine(Search(new List<int> { 5, 5, 4, 4, 4 })); // Output: -1\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n        /// \n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea(int a, int b, int c) \n        {\n            // \u00dcberpr\u00fcfen, ob die drei Seiten ein g\u00fcltiges Dreieck bilden\n            if (a + b > c && a + c > b && b + c > a)\n            {\n                // Berechnen des halben Umfangs s\n                double s = (a + b + c) / 2.0;\n                \n                // Berechnen der Fl\u00e4che mit der Heron-Formel\n                double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n                \n                // Runden auf 2 Dezimalstellen\n                return Math.Round(area, 2);\n            }\n            else\n            {\n                // Wenn die Seiten kein g\u00fcltiges Dreieck bilden, geben wir -1 zur\u00fcck\n                return -1;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(TriangleArea(3, 4, 5)); // Ausgabe: 6.00\n            Console.WriteLine(TriangleArea(1, 2, 10)); // Ausgabe: -1\n        }\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n        /// \n        ///     Beispiel:\n        ///     WillItFly([1, 2], 5) \u279e False \n        ///     # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n        /// \n        ///     WillItFly([3, 2, 3], 1) \u279e False\n        ///     # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n        /// \n        ///     WillItFly([3, 2, 3], 9) \u279e True\n        ///     # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n        /// \n        ///     WillItFly([3], 5) \u279e True\n        ///     # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n        /// \n        /// </summary>\n        public static bool WillItFly(List<int> q, int w)\n        {\n            // \u00dcberpr\u00fcfen, ob die Liste ein Palindrom ist\n            bool isPalindrome = IsPalindrome(q);\n            \n            // Berechnen der Summe der Elemente in der Liste\n            int sum = q.Sum();\n            \n            // \u00dcberpr\u00fcfen, ob die Summe kleiner oder gleich dem maximal m\u00f6glichen Gewicht ist\n            return isPalindrome && sum <= w;\n        }\n        \n        private static bool IsPalindrome(List<int> q)\n        {\n            // Eine Liste ist ein Palindrom, wenn sie gleich ihrem umgekehrten Wert ist\n            for (int i = 0; i < q.Count / 2; i++)\n            {\n                if (q[i] != q[q.Count - 1 - i])\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n        \n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(WillItFly(new List<int> { 1, 2 }, 5)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 1)); // False\n            Console.WriteLine(WillItFly(new List<int> { 3, 2, 3 }, 9)); // True\n            Console.WriteLine(WillItFly(new List<int> { 3 }, 5)); // True\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool IsMultiplyPrime(int a)\n    {\n        // Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\n        bool IsPrime(int number)\n        {\n            if (number < 2) return false;\n            for (int i = 2; i * i <= number; i++)\n            {\n                if (number % i == 0) return false;\n            }\n            return true;\n        }\n\n        // Liste der Primzahlen bis zur Wurzel von a\n        List<int> primes = new List<int>();\n        for (int i = 2; i * i <= a; i++)\n        {\n            if (IsPrime(i))\n            {\n                primes.Add(i);\n            }\n        }\n\n        // \u00dcberpr\u00fcfung aller Kombinationen von drei Primzahlen\n        foreach (var p1 in primes)\n        {\n            foreach (var p2 in primes)\n            {\n                if (p1 * p2 >= a) break; // Wenn das Produkt der beiden bereits gr\u00f6\u00dfer als a ist, kann keine L\u00f6sung mehr gefunden werden\n                foreach (var p3 in primes)\n                {\n                    if (p1 * p2 * p3 == a) return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsMultiplyPrime(30)); // True, da 30 = 2 * 3 * 5\n        Console.WriteLine(IsMultiplyPrime(60)); // False, da 60 nicht das Produkt von drei Primzahlen ist\n    }\n}"}
{"task_id": "csharp/32", "language": "csharp", "completion": "using System;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Zahl in Dezimalform und Ihre Aufgabe besteht darin, sie in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n        /// \n        /// Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n        /// \n        /// Beispiele:\n        /// \n        /// DecimalToBinary(15)   # returns \"db1111db\"\n        /// DecimalToBinary(32)   # returns \"db100000db\"\n        /// \n        /// </summary>\n        public static string DecimalToBinary(int decimalNumber) \n        {\n            // Konvertiere die Dezimalzahl in eine Bin\u00e4rzahl\n            string binaryString = Convert.ToString(decimalNumber, 2);\n            \n            // F\u00fcge die zus\u00e4tzlichen 'db' Zeichen am Anfang und Ende hinzu\n            StringBuilder result = new StringBuilder();\n            result.Append(\"db\");\n            result.Append(binaryString);\n            result.Append(\"db\");\n            \n            return result.ToString();\n        }\n\n        static void Main(string[] args)\n        {\n            // Beispieltestf\u00e4lle\n            Console.WriteLine(DecimalToBinary(15));  // Ausgabe: db1111db\n            Console.WriteLine(DecimalToBinary(32));  // Ausgabe: db100000db\n        }\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Du erh\u00e4ltst einen String s.\n        /// Deine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der String gl\u00fccklich ist oder nicht.\n        /// Ein String ist gl\u00fccklich, wenn seine L\u00e4nge mindestens 3 betr\u00e4gt und jede Gruppe von 3 aufeinanderfolgenden Buchstaben unterschiedlich ist.\n        /// Zum Beispiel:\n        /// \n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy (string s) \n        {\n            if (s.Length < 3)\n            {\n                return false;\n            }\n\n            for (int i = 0; i <= s.Length - 3; i++)\n            {\n                string triplet = s.Substring(i, 3);\n                string remainingString = s.Substring(i + 3);\n\n                if (remainingString.Contains(triplet))\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(IsHappy(\"a\")); // False\n            Console.WriteLine(IsHappy(\"aa\")); // False\n            Console.WriteLine(IsHappy(\"abcd\")); // True\n            Console.WriteLine(IsHappy(\"aabb\")); // False\n            Console.WriteLine(IsHappy(\"adb\")); // True\n            Console.WriteLine(IsHappy(\"xyy\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<string> NumericalLetterGrade(List<object> grades)\n    {\n        List<string> letterGrades = new List<string>();\n\n        foreach (var grade in grades)\n        {\n            if (grade is double gpa)\n            {\n                string letterGrade = ConvertToLetterGrade(gpa);\n                letterGrades.Add(letterGrade);\n            }\n        }\n\n        return letterGrades;\n    }\n\n    private static string ConvertToLetterGrade(double gpa)\n    {\n        if (gpa == 4.0)\n        {\n            return \"A+\";\n        }\n        else if (gpa > 3.7)\n        {\n            return \"A\";\n        }\n        else if (gpa > 3.3)\n        {\n            return \"A-\";\n        }\n        else if (gpa > 3.0)\n        {\n            return \"B+\";\n        }\n        else if (gpa > 2.7)\n        {\n            return \"B\";\n        }\n        else if (gpa > 2.3)\n        {\n            return \"B-\";\n        }\n        else if (gpa > 2.0)\n        {\n            return \"C+\";\n        }\n        else if (gpa > 1.7)\n        {\n            return \"C\";\n        }\n        else if (gpa > 1.3)\n        {\n            return \"C-\";\n        }\n        else if (gpa > 1.0)\n        {\n            return \"D+\";\n        }\n        else if (gpa > 0.7)\n        {\n            return \"D\";\n        }\n        else if (gpa > 0.0)\n        {\n            return \"D-\";\n        }\n        else\n        {\n            return \"E\";\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        List<object> grades = new List<object> { 4.0, 3, 1.7, 2, 3.5 };\n        List<string> letterGrades = NumericalLetterGrade(grades);\n        Console.WriteLine(string.Join(\", \", letterGrades)); // Output: A+, B, C-, C, A-\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool PrimeLength(string string0)\n    {\n        // Die L\u00e4nge des Strings als Zahl nehmen\n        int length = string0.Length;\n        \n        // Wenn die L\u00e4nge kleiner oder gleich 1 ist, ist sie keine Primzahl\n        if (length <= 1)\n        {\n            return false;\n        }\n        \n        // \u00dcberpr\u00fcfen, ob die Zahl eine Primzahl ist\n        for (int i = 2; i * i <= length; i++)\n        {\n            if (length % i == 0)\n            {\n                return false;\n            }\n        }\n        \n        // Wenn wir hier ankommen, ist die L\u00e4nge eine Primzahl\n        return true;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(PrimeLength(\"Hello\"));     // True\n        Console.WriteLine(PrimeLength(\"abcdcba\"));   // True\n        Console.WriteLine(PrimeLength(\"kittens\"));   // True\n        Console.WriteLine(PrimeLength(\"orange\"));    // False\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n        /// \n        ///     Beispiel\n        ///         F\u00fcr N = 1000 ist die Summe der Ziffern 1, die Ausgabe sollte \"1\" sein.\n        ///         F\u00fcr N = 150 ist die Summe der Ziffern 6, die Ausgabe sollte \"110\" sein.\n        ///         F\u00fcr N = 147 ist die Summe der Ziffern 12, die Ausgabe sollte \"1100\" sein.\n        ///     \n        ///     Variablen:\n        ///         @N Ganzzahl\n        ///              Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n        ///     Ausgabe:\n        ///          eine Zeichenkette mit der bin\u00e4ren Zahl.\n        /// \n        /// </summary>\n        public static string Solve(int N)\n        {\n            // Wandeln Sie die Zahl in eine Zeichenkette um\n            string binaryString = Convert.ToString(N, 2);\n            \n            // Extrahieren Sie die einzelnen Ziffern aus der bin\u00e4ren Zeichenkette\n            int sumOfDigits = binaryString.Sum(c => c - '0');\n            \n            // Wandeln Sie die Summe der Ziffern in eine bin\u00e4re Zeichenkette um\n            return Convert.ToString(sumOfDigits, 2);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(1000)); // Ausgabe: \"1\"\n            Console.WriteLine(Solve(150));  // Ausgabe: \"110\"\n            Console.WriteLine(Solve(147));  // Ausgabe: \"1100\"\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n        /// \n        /// Beispiele:\n        /// \n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<(int, int)> GetRow(List<List<int>> lst, int x) \n        {\n            var coordinates = new List<(int, int)>();\n            \n            for (int rowIndex = 0; rowIndex < lst.Count; rowIndex++)\n            {\n                for (int colIndex = 0; colIndex < lst[rowIndex].Count; colIndex++)\n                {\n                    if (lst[rowIndex][colIndex] == x)\n                    {\n                        coordinates.Add((rowIndex, colIndex));\n                    }\n                }\n            }\n            \n            // Sort by row index in ascending order and then by column index in descending order\n            var sortedCoordinates = coordinates\n                .OrderBy(coord => coord.Item1)  // Sort by row index\n                .ThenByDescending(coord => coord.Item2)  // Then sort by column index in descending order\n                .ToList();\n            \n            return sortedCoordinates;\n        }\n\n        static void Main(string[] args)\n        {\n            var example1 = new List<List<int>>()\n            {\n                new List<int> { 1, 2, 3, 4, 5, 6 },\n                new List<int> { 1, 2, 3, 4, 1, 6 },\n                new List<int> { 1, 2, 3, 4, 5, 1 }\n            };\n            \n            var result1 = GetRow(example1, 1);\n            Console.WriteLine(string.Join(\", \", result1)); // Output: (0, 0), (1, 4), (1, 0), (2, 5), (2, 0)\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten eine Liste von ganzen Zahlen.\n        /// Schreiben Sie eine Funktion NextSmallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\n        /// Geben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest(List<int> lst) \n        {\n            if (lst == null || lst.Count < 2)\n            {\n                return null;\n            }\n\n            // Remove duplicates and sort the list\n            var uniqueSortedList = lst.Distinct().OrderBy(x => x).ToList();\n\n            if (uniqueSortedList.Count < 2)\n            {\n                return null;\n            }\n\n            return uniqueSortedList[1];\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Langeweilen zu z\u00e4hlen. Eine Langeweile ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n        /// \n        /// Zum Beispiel:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored(string S) \n        {\n            // Split the string into sentences based on '.', '?', or '!'\n            var sentences = Regex.Split(S, @\"(?<=[.!?])\\s+\");\n            \n            int count = 0;\n            \n            foreach (var sentence in sentences)\n            {\n                if (sentence.Trim().StartsWith(\"Ich\", StringComparison.OrdinalIgnoreCase))\n                {\n                    count++;\n                }\n            }\n            \n            return count;\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IsBored(\"Hello world\")); // Output: 0\n            Console.WriteLine(IsBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n        }\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Liste von ganzen Zahlen.\n        ///     Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n        /// \n        ///     Beispiele:\n        /// \n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd(List<int> lst)\n        {\n            // Helper function to check if a number is prime\n            bool IsPrime(int num)\n            {\n                if (num <= 1) return false;\n                if (num == 2) return true;\n                if (num % 2 == 0) return false;\n                for (int i = 3; i * i <= num; i += 2)\n                {\n                    if (num % i == 0) return false;\n                }\n                return true;\n            }\n\n            // Find all prime numbers in the list\n            List<int> primes = lst.Where(IsPrime).ToList();\n\n            // If no prime number is found, return 0 or handle as needed\n            if (primes.Count == 0) return 0;\n\n            // Find the largest prime number\n            int largestPrime = primes.Max();\n\n            // Calculate the sum of the digits of the largest prime number\n            int digitSum = largestPrime.ToString().Where(char.IsDigit).Select(c => c - '0').Sum();\n\n            return digitSum;\n        }\n\n        static void Main(string[] args)\n        {\n            List<int> lst1 = new List<int> { 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 };\n            List<int> lst2 = new List<int> { 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 };\n            List<int> lst3 = new List<int> { 1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 };\n            List<int> lst4 = new List<int> { 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6 };\n            List<int> lst5 = new List<int> { 0, 81, 12, 3, 1, 21 };\n            List<int> lst6 = new List<int> { 0, 8, 1, 2, 1, 7 };\n\n            Console.WriteLine(Skjkasdkd(lst1)); // Output: 10\n            Console.WriteLine(Skjkasdkd(lst2)); // Output: 25\n            Console.WriteLine(Skjkasdkd(lst3)); // Output: 13\n            Console.WriteLine(Skjkasdkd(lst4)); // Output: 11\n            Console.WriteLine(Skjkasdkd(lst5)); // Output: 3\n            Console.WriteLine(Skjkasdkd(lst6)); // Output: 7\n        }\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool CheckDictCase(Dictionary<object, string> dict)\n    {\n        if (dict.Count == 0)\n        {\n            return false;\n        }\n\n        bool allLower = true;\n        bool allUpper = true;\n\n        foreach (var key in dict.Keys)\n        {\n            if (!(key is string))\n            {\n                return false; // If any key is not a string, return false\n            }\n\n            string strKey = key as string;\n            if (!strKey.All(char.IsLower))\n            {\n                allLower = false;\n            }\n            if (!strKey.All(char.IsUpper))\n            {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void Main()\n    {\n        // Test cases\n        Dictionary<object, string> dict1 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"b\", \"banana\" } };\n        Dictionary<object, string> dict2 = new Dictionary<object, string> { { \"a\", \"apple\" }, { \"A\", \"banana\" }, { \"B\", \"banana\" } };\n        Dictionary<object, string> dict3 = new Dictionary<object, string> { { \"a\", \"apple\" }, { 8, \"banana\" }, { \"a\", \"apple\" } };\n        Dictionary<object, string> dict4 = new Dictionary<object, string> { { \"Name\", \"John\" }, { \"Age\", \"36\" }, { \"City\", \"Houston\" } };\n        Dictionary<object, string> dict5 = new Dictionary<object, string> { { \"STATE\", \"NC\" }, { \"ZIP\", \"12345\" } };\n\n        Console.WriteLine(CheckDictCase(dict1)); // True\n        Console.WriteLine(CheckDictCase(dict2)); // False\n        Console.WriteLine(CheckDictCase(dict3)); // False\n        Console.WriteLine(CheckDictCase(dict4)); // False\n        Console.WriteLine(CheckDictCase(dict5)); // True\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n        /// \n        ///     Beispiele\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger(string value)\n        {\n            // Konvertieren Sie den String in eine Dezimalzahl\n            if (decimal.TryParse(value, out decimal number))\n            {\n                // Wenn die Zahl genau zwischen zwei Ganzzahlen liegt, runden Sie weg von Null\n                if (number % 1 == 0.5m || number % 1 == -0.5m)\n                {\n                    return (int)(number + Math.Sign(number));\n                }\n                else\n                {\n                    // Runden Sie die Dezimalzahl auf oder ab, basierend darauf, ob sie n\u00e4her an einer Ganzzahl liegt\n                    return (int)Math.Round(number, MidpointRounding.AwayFromZero);\n                }\n            }\n            else\n            {\n                throw new ArgumentException(\"Invalid number format\");\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(ClosestInteger(\"10\"));    // Ausgabe: 10\n            Console.WriteLine(ClosestInteger(\"15.3\"));  // Ausgabe: 15\n            Console.WriteLine(ClosestInteger(\"14.5\"));  // Ausgabe: 15\n            Console.WriteLine(ClosestInteger(\"-14.5\")); // Ausgabe: -15\n        }\n    }\n}"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static List<int> MakeAPile(int n)\n    {\n        List<int> pile = new List<int>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            if (i == 0)\n            {\n                // Die erste Ebene hat n Steine\n                pile.Add(n);\n            }\n            else\n            {\n                int nextStoneCount;\n                if ((pile[i - 1] % 2) != 0)\n                {\n                    // Wenn die vorherige Ebene ungerade ist, finde die n\u00e4chste ungerade Zahl\n                    nextStoneCount = pile[i - 1] + 2;\n                }\n                else\n                {\n                    // Wenn die vorherige Ebene gerade ist, finde die n\u00e4chste gerade Zahl\n                    nextStoneCount = pile[i - 1] + 2;\n                }\n                pile.Add(nextStoneCount);\n            }\n        }\n        \n        return pile;\n    }\n\n    public static void Main()\n    {\n        // Beispielaufruf\n        List<int> result = MakeAPile(3);\n        Console.WriteLine(string.Join(\", \", result)); // Ausgabe: 3, 5, 7\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten einen String von W\u00f6rtern, die durch Kommas oder Leerzeichen getrennt sind. Ihre Aufgabe ist es, den String in W\u00f6rter aufzuteilen und ein Array der W\u00f6rter zur\u00fcckzugeben.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString(string s) \n        {\n            // Split the string by commas and spaces\n            return s.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n        }\n\n        // Example usage\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", WordsString(\"Hi, my name is John\")));\n            Console.WriteLine(string.Join(\", \", WordsString(\"One, two, three, four, five, six\")));\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static int ChooseNum(int x, int y)\n    {\n        // Ensure that x is less than or equal to y\n        if (x > y)\n        {\n            return -1;\n        }\n\n        // Start from the upper bound and move downwards\n        for (int i = y; i >= x; i--)\n        {\n            if (i % 2 == 0)\n            {\n                return i;\n            }\n        }\n\n        // If no even number is found, return -1\n        return -1;\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(ChooseNum(12, 15)); // Output: 14\n        Console.WriteLine(ChooseNum(13, 12)); // Output: -1\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n        /// \n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static object RoundedAvg(int n, int m) \n        {\n            if (n > m)\n            {\n                return -1;\n            }\n            \n            // Berechnen der Summe aller Zahlen von n bis m\n            long sum = 0;\n            for (int i = n; i <= m; i++)\n            {\n                sum += i;\n            }\n            \n            // Berechnen des Durchschnitts und Runden auf die n\u00e4chste Ganzzahl\n            double avg = (double)sum / (m - n + 1);\n            int roundedAvg = (int)Math.Round(avg, MidpointRounding.AwayFromZero);\n            \n            // Konvertieren des gerundeten Durchschnitts in bin\u00e4r und zur\u00fcckgeben als String\n            string binaryString = Convert.ToString(roundedAvg, 2);\n            return $\"0b{binaryString}\";\n        }\n        \n        public static void Main(string[] args)\n        {\n            Console.WriteLine(RoundedAvg(1, 5)); // \"0b11\"\n            Console.WriteLine(RoundedAvg(7, 5)); // -1\n            Console.WriteLine(RoundedAvg(10, 20)); // \"0b1111\"\n            Console.WriteLine(RoundedAvg(20, 33)); // \"0b11010\"\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Implementieren Sie die Funktion F, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Fakult\u00e4t von i ist, wenn i gerade ist, oder die Summe der Zahlen von 1 bis i, wenn i ungerade ist. i beginnt bei 1. Die Fakult\u00e4t von i ist das Produkt der Zahlen von 1 bis i (1 * 2 * ... * i). Beispiel:\n        /// \n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F (int n) \n        {\n            List<int> result = new List<int>();\n            \n            for (int i = 1; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    // Berechne die Fakult\u00e4t von i\n                    int factorial = 1;\n                    for (int j = 1; j <= i; j++)\n                    {\n                        factorial *= j;\n                    }\n                    result.Add(factorial);\n                }\n                else\n                {\n                    // Berechne die Summe von 1 bis i\n                    int sum = 0;\n                    for (int j = 1; j <= i; j++)\n                    {\n                        sum += j;\n                    }\n                    result.Add(sum);\n                }\n            }\n            \n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Beispielaufruf\n            List<int> result = F(5);\n            Console.WriteLine(string.Join(\", \", result)); // Ausgabe: 1, 2, 6, 24, 15\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n        /// \n        ///     Beispiel 1:\n        /// \n        ///         Eingabe: 3\n        ///         Ausgabe: (1, 2)\n        ///         Erkl\u00e4rung:\n        ///         Ganze Palindrome sind 1, 2, 3. Eines davon ist gerade und zwei davon sind ungerade.\n        /// \n        ///     Beispiel 2:\n        /// \n        ///         Eingabe: 12\n        ///         Ausgabe: (4, 6)\n        ///         Erkl\u00e4rung:\n        ///         Ganze Palindrome sind 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier davon sind gerade und sechs davon sind ungerade.\n        /// \n        ///     Hinweis:\n        ///         1. 1 <= n <= 10^3\n        ///         2. Das zur\u00fcckgegebene Tupel enth\u00e4lt die Anzahl der geraden und ungeraden ganzen Palindrome.\n        /// \n        /// </summary>\n        public static List<int> EvenOddPalindrome(int n) \n        {\n            List<int> palindromes = new List<int>();\n            \n            // Generate all integers from 1 to n and check if they are palindromes\n            for (int i = 1; i <= n; i++)\n            {\n                if (IsPalindrome(i))\n                {\n                    palindromes.Add(i);\n                }\n            }\n            \n            int evenCount = palindromes.Count(p => p % 2 == 0);\n            int oddCount = palindromes.Count(p => p % 2 != 0);\n            \n            return new List<int> { evenCount, oddCount };\n        }\n        \n        // Helper method to check if a number is a palindrome\n        private static bool IsPalindrome(int num)\n        {\n            string str = num.ToString();\n            char[] charArray = str.ToCharArray();\n            Array.Reverse(charArray);\n            string reversedStr = new string(charArray);\n            return str == reversedStr;\n        }\n        \n        // Main method for testing\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(String.Join(\", \", EvenOddPalindrome(3))); // Output: 1, 2\n            Console.WriteLine(String.Join(\", \", EvenOddPalindrome(12))); // Output: 4, 6\n        }\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static bool MoveOneBall(List<int> arr)\n    {\n        if (arr == null || arr.Count == 0)\n            return true;\n\n        // Kopieren Sie das Array, um die Originalreihenfolge zu erhalten\n        List<int> sortedArr = new List<int>(arr);\n        sortedArr.Sort();\n\n        // \u00dcberpr\u00fcfen Sie, ob jedes Element im sortierten Array an der richtigen Position ist, nachdem es um eine Position verschoben wurde\n        for (int i = 0; i < arr.Count; i++)\n        {\n            // Erzeugen Sie ein neues Array, das durch Verschieben entsteht\n            List<int> shiftedArr = new List<int>(arr);\n            ShiftRight(shiftedArr, i);\n\n            // Vergleichen Sie das verschobene Array mit dem sortierten Array\n            if (Enumerable.SequenceEqual(sortedArr, shiftedArr))\n                return true;\n        }\n\n        return false;\n    }\n\n    private static void ShiftRight(List<int> arr, int shiftCount)\n    {\n        for (int i = 0; i < shiftCount; i++)\n        {\n            int lastElement = arr[arr.Count - 1];\n            for (int j = arr.Count - 1; j > 0; j--)\n            {\n                arr[j] = arr[j - 1];\n            }\n            arr[0] = lastElement;\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(MoveOneBall(new List<int> { 3, 4, 5, 1, 2 })); // True\n        Console.WriteLine(MoveOneBall(new List<int> { 3, 5, 4, 1, 2 })); // False\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static string Exchange(List<int> lst1, List<int> lst2)\n        {\n            // Pr\u00fcfen, ob alle Elemente in lst1 gerade sind\n            bool allEven = lst1.All(x => x % 2 == 0);\n            \n            if (allEven)\n            {\n                return \"YES\";\n            }\n            \n            // Alle ungeraden Zahlen in lst1 finden\n            List<int> oddNumbersInLst1 = lst1.Where(x => x % 2 != 0).ToList();\n            \n            // Alle geraden Zahlen in lst2 finden\n            List<int> evenNumbersInLst2 = lst2.Where(x => x % 2 == 0).ToList();\n            \n            if (oddNumbersInLst1.Count() <= evenNumbersInLst2.Count())\n            {\n                return \"YES\";\n            }\n            else\n            {\n                return \"NO\";\n            }\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 2, 3, 4 })); // Output: \"YES\"\n            Console.WriteLine(Exchange(new List<int> { 1, 2, 3, 4 }, new List<int> { 1, 5, 3, 4 })); // Output: \"NO\"\n        }\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Aufgabe\n        ///     Wir haben zwei Zeichenketten s und c. Du musst alle Zeichen in s l\u00f6schen, die einem Zeichen in c entsprechen.\n        ///     Dann musst du \u00fcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n        ///     Eine Zeichenkette ist ein Palindrom, wenn sie r\u00fcckw\u00e4rts gelesen genauso aussieht wie vorw\u00e4rts.\n        ///     Du solltest ein Tupel zur\u00fcckgeben, das die resultierende Zeichenkette und True/False f\u00fcr die \u00dcberpr\u00fcfung enth\u00e4lt.\n        ///     Beispiel\n        ///     F\u00fcr s = \"abcde\", c = \"ae\" sollte das Ergebnis ('bcd',False) sein.\n        ///     F\u00fcr s = \"abcdef\", c = \"b\" sollte das Ergebnis ('acdef',False) sein.\n        ///     F\u00fcr s = \"abcdedcba\", c = \"ab\" sollte das Ergebnis ('cdedc',True) sein.\n        /// \n        /// \n        /// </summary>\n        public static List<object> ReverseDelete(string s, string c) \n        {\n            // Entfernen aller Zeichen in s, die auch in c vorkommen\n            var result = new string(s.Where(ch => !c.Contains(ch)).ToArray());\n            \n            // \u00dcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist\n            bool isPalindrome = IsPalindrome(result);\n            \n            return new List<object> { result, isPalindrome };\n        }\n        \n        private static bool IsPalindrome(string s)\n        {\n            if (string.IsNullOrEmpty(s))\n                return false;\n            \n            string reversed = new string(s.Reverse().ToArray());\n            return s == reversed;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            var test1 = ReverseDelete(\"abcde\", \"ae\");\n            Console.WriteLine($\"Result: ({test1[0]}, {test1[1]})\"); // Expected output: ('bcd', False)\n            \n            var test2 = ReverseDelete(\"abcdef\", \"b\");\n            Console.WriteLine($\"Result: ({test2[0]}, {test2[1]})\"); // Expected output: ('acdef', False)\n            \n            var test3 = ReverseDelete(\"abcdedcba\", \"ab\");\n            Console.WriteLine($\"Result: ({test3[0]}, {test3[1]})\"); // Expected output: ('cdedc', True)\n        }\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben eine Zeichenkette s und eine nat\u00fcrliche Zahl n, wurde Ihnen die Aufgabe zugewiesen, eine Funktion zu implementieren, die eine Liste aller W\u00f6rter aus der Zeichenkette s zur\u00fcckgibt, die genau n Konsonanten enthalten, in der Reihenfolge, in der diese W\u00f6rter in der Zeichenkette s erscheinen. Wenn die Zeichenkette s leer ist, sollte die Funktion eine leere Liste zur\u00fcckgeben. Hinweis: Sie k\u00f6nnen davon ausgehen, dass die Eingabezeichenkette nur Buchstaben und Leerzeichen enth\u00e4lt. Beispiele:\n        /// \n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords(string s, int n) \n        {\n            if (string.IsNullOrEmpty(s))\n            {\n                return new List<string>();\n            }\n\n            // Split the string into words\n            var words = s.Split(' ');\n\n            // Define a list to store words with exactly n consonants\n            var result = new List<string>();\n\n            // Define a regex pattern for vowels (ignoring case)\n            var vowelPattern = \"[aeiouAEIOU]\";\n\n            foreach (var word in words)\n            {\n                // Count the number of consonants in the word\n                var consonantCount = Regex.Replace(word, vowelPattern, \"\").Length;\n\n                // If the count matches n, add the word to the result list\n                if (consonantCount == n)\n                {\n                    result.Add(word);\n                }\n            }\n\n            return result;\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 4))); // [\"little\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Mary had a little lamb\", 3))); // [\"Mary\", \"lamb\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"simple white space\", 2))); // []\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Hello world\", 4))); // [\"world\"]\n            Console.WriteLine(string.Join(\", \", SelectWords(\"Uncle sam\", 3))); // [\"Uncle\"]\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sei ein Array arr von ganzen Zahlen und eine positive ganze Zahl k. Gib eine sortierte Liste der L\u00e4nge k zur\u00fcck, die die k gr\u00f6\u00dften Zahlen in arr enth\u00e4lt.\n        /// \n        ///     Beispiel 1:\n        /// \n        ///         Eingabe: arr = [-3, -4, 5], k = 3\n        ///         Ausgabe: [-4, -3, 5]\n        /// \n        ///     Beispiel 2:\n        /// \n        ///         Eingabe: arr = [4, -4, 4], k = 2\n        ///         Ausgabe: [4, 4]\n        /// \n        ///     Beispiel 3:\n        /// \n        ///         Eingabe: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        ///         Ausgabe: [2]\n        /// \n        ///     Hinweis:\n        ///         1. Die L\u00e4nge des Arrays wird im Bereich von [1, 1000] liegen.\n        ///         2. Die Elemente im Array werden im Bereich von [-1000, 1000] liegen.\n        ///         3. 0 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static List<int> Maximum(List<int> arr, int k) \n        {\n            // Sortiere das Array in absteigender Reihenfolge\n            var sortedArr = arr.OrderByDescending(x => x).ToList();\n            \n            // W\u00e4hle die ersten k Elemente aus der sortierten Liste\n            return sortedArr.Take(k).ToList();\n        }\n\n        static void Main(string[] args)\n        {\n            // Testf\u00e4lle\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int> {-3, -4, 5}, 3))); // Ausgabe: [-4, -3, 5]\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int> {4, -4, 4}, 2))); // Ausgabe: [4, 4]\n            Console.WriteLine(String.Join(\", \", Maximum(new List<int> {-3, 2, 1, 2, -1, -2, 1}, 1))); // Ausgabe: [2]\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int AddElements(List<int> arr, int k)\n    {\n        // Step 1: Take the first `k` elements from the array\n        var selectedElements = arr.Take(k).ToList();\n        \n        // Step 2: Filter out numbers with more than two digits\n        var filteredElements = selectedElements.Where(num => num < 100).ToList();\n        \n        // Step 3: Sum the remaining numbers\n        int sum = filteredElements.Sum();\n        \n        return sum;\n    }\n\n    public static void Main()\n    {\n        List<int> arr = new List<int> { 111, 21, 3, 4000, 5, 6, 7, 8, 9 };\n        int k = 4;\n        \n        Console.WriteLine(AddElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten zwei Intervalle,\n        ///     wobei jedes Intervall ein Paar von ganzen Zahlen ist. Zum Beispiel, Intervall = (start, end) = (1, 2).\n        ///     Die gegebenen Intervalle sind geschlossen, was bedeutet, dass das Intervall (start, end)\n        ///     sowohl start als auch end einschlie\u00dft.\n        ///     F\u00fcr jedes gegebene Intervall wird angenommen, dass sein Start kleiner oder gleich seinem Ende ist.\n        ///     Ihre Aufgabe ist es zu bestimmen, ob die L\u00e4nge des Schnitts dieser beiden\n        ///     Intervalle eine Primzahl ist.\n        ///     Zum Beispiel ist der Schnitt der Intervalle (1, 3), (2, 4) (2, 3),\n        ///     dessen L\u00e4nge 1 ist, was keine Primzahl ist.\n        ///     Wenn die L\u00e4nge des Schnitts eine Primzahl ist, geben Sie \"YES\" zur\u00fcck,\n        ///     andernfalls geben Sie \"NO\" zur\u00fcck.\n        ///     Wenn sich die beiden Intervalle nicht \u00fcberschneiden, geben Sie \"NO\" zur\u00fcck.\n        /// \n        /// \n        ///     [Eingabe/Ausgabe] Beispiele:\n        /// \n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// \n        /// </summary>\n        public static string Intersection(List<int> interval1, List<int> interval2) \n        {\n            // Bestimme das Start- und Endpunkt des Schnittsintervalls\n            int start = Math.Max(interval1[0], interval2[0]);\n            int end = Math.Min(interval1[1], interval2[1]);\n            \n            // Wenn sich die Intervalle nicht \u00fcberschneiden, geben Sie \"NO\" zur\u00fcck\n            if (start > end) \n            {\n                return \"NO\";\n            }\n            \n            // Berechne die L\u00e4nge des Schnittsintervalls\n            int length = end - start + 1;\n            \n            // \u00dcberpr\u00fcfe, ob die L\u00e4nge eine Primzahl ist\n            if (IsPrime(length)) \n            {\n                return \"YES\";\n            } \n            else \n            {\n                return \"NO\";\n            }\n        }\n        \n        // Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist\n        private static bool IsPrime(int number) \n        {\n            if (number <= 1) \n            {\n                return false;\n            }\n            \n            for (int i = 2; i * i <= number; i++) \n            {\n                if (number % i == 0) \n                {\n                    return false;\n                }\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args) \n        {\n            // Test cases\n            Console.WriteLine(Intersection(new List<int> {1, 2}, new List<int> {2, 3})); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-1, 1}, new List<int> {0, 4})); // \"NO\"\n            Console.WriteLine(Intersection(new List<int> {-3, -1}, new List<int> {-5, 5})); // \"YES\"\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Jeder kennt die Fibonacci-Folge, die in den letzten Jahrhunderten von Mathematikern tiefgehend untersucht wurde. Was die meisten Menschen jedoch nicht wissen, ist die Tribonacci-Folge. Die Tribonacci-Folge wird durch die Rekursion definiert: Tri(1) = 3 Tri(n) = 1 + n / 2, wenn n gerade ist. Tri(n) = Tri(n - 1) + Tri(n - 2) + Tri(n + 1), wenn n ungerade ist. Zum Beispiel: Tri(2) = 1 + (2 / 2) = 2 Tri(4) = 3 Tri(3) = Tri(2) + Tri(1) + Tri(4) = 2 + 3 + 3 = 8 Sie erhalten eine nicht-negative ganze Zahl n und m\u00fcssen eine Liste der ersten n + 1 Zahlen der Tribonacci-Folge zur\u00fcckgeben. Beispiele: Tri(3) = [1, 3, 2, 8]\n        /// \n        /// </summary>\n        public static List<object> Tri(int n)\n        {\n            List<object> result = new List<object>();\n            if (n < 0) return result; // Handle negative input case\n\n            // Initialize the base cases\n            int[] tribonacci = new int[n + 1];\n            tribonacci[0] = 1; // Assuming Trib(0) is 1 for consistency with other sequences\n            if (n >= 1) tribonacci[1] = 3;\n            if (n >= 2) tribonacci[2] = 2;\n\n            // Fill the array using the given recursion formula\n            for (int i = 3; i <= n; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    tribonacci[i] = 1 + i / 2;\n                }\n                else\n                {\n                    tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1];\n                }\n            }\n\n            // Convert the array to a list and return it\n            result.AddRange(tribonacci);\n            return result;\n        }\n\n        public static void Main(string[] args)\n        {\n            int n = 3; // Example input\n            List<object> result = Tri(n);\n            Console.WriteLine($\"Tribonacci sequence for n={n}: {string.Join(\", \", result)}\");\n        }\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben eine positive ganze Zahl n, gib das Produkt der ungeraden Ziffern zur\u00fcck.\n        ///     Gib 0 zur\u00fcck, wenn alle Ziffern gerade sind.\n        ///     Zum Beispiel:\n        /// \n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits(int n)\n        {\n            // Wandeln Sie die Zahl in eine Zeichenfolge um\n            string digitsStr = n.ToString();\n            \n            // Filtern Sie die ungeraden Ziffern heraus\n            var oddDigits = digitsStr.Where(c => (c - '0') % 2 != 0);\n            \n            // Wenn keine ungeraden Ziffern gefunden wurden, gib 0 zur\u00fcck\n            if (!oddDigits.Any())\n            {\n                return 0;\n            }\n            \n            // Berechnen Sie das Produkt der ungeraden Ziffern\n            int product = oddDigits.Aggregate(1, (acc, c) => acc * (c - '0'));\n            \n            return product;\n        }\n        \n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(Digits(1));  // Output: 1\n            Console.WriteLine(Digits(4));  // Output: 0\n            Console.WriteLine(Digits(235));// Output: 15\n        }\n    }\n}"}
{"task_id": "csharp/59", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool IsNested(string string0)\n    {\n        // Wir verwenden einen Stack, um die Klammern zu verfolgen.\n        Stack<int> stack = new Stack<int>();\n        int maxDepth = 0;\n        \n        foreach (char c in string0)\n        {\n            if (c == '[')\n            {\n                // Wenn eine \u00f6ffnende Klammer gefunden wird, pushen wir sie auf den Stack.\n                stack.Push(1);\n            }\n            else if (c == ']')\n            {\n                // Wenn eine schlie\u00dfende Klammer gefunden wird, pr\u00fcfen wir, ob der Stack nicht leer ist.\n                if (stack.Count > 0)\n                {\n                    stack.Pop();\n                    // Berechnen Sie die aktuelle Tiefe des Stacks.\n                    int currentDepth = stack.Count;\n                    maxDepth = Math.Max(maxDepth, currentDepth);\n                }\n            }\n        }\n        \n        // Wenn die maximale Tiefe gr\u00f6\u00dfer als 0 ist, bedeutet dies, dass es eine verschachtelte Struktur gibt.\n        return maxDepth > 0;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsNested(\"[[]]\")); // True\n        Console.WriteLine(IsNested(\"[]]]]]]][[[[[]\")); // False\n        Console.WriteLine(IsNested(\"[][]\")); // False\n        Console.WriteLine(IsNested(\"[]\")); // False\n        Console.WriteLine(IsNested(\"[[][]]\")); // True\n        Console.WriteLine(IsNested(\"[[]][[\")); // True\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static int SumSquares(List<object> lst)\n    {\n        // Step 1: Round each element to the nearest integer (ceiling)\n        List<double> roundedNumbers = lst.Select(x => Math.Ceiling((double)x)).ToList();\n        \n        // Step 2: Square each of the rounded numbers\n        List<int> squaredNumbers = roundedNumbers.Select(x => (int)Math.Pow(x, 2)).ToList();\n        \n        // Step 3: Sum all the squared numbers\n        int sumOfSquares = squaredNumbers.Sum();\n        \n        // Step 4: Return the sum\n        return sumOfSquares;\n    }\n\n    public static void Main(string[] args)\n    {\n        List<object> lst1 = new List<object> { 1, 2, 3 };\n        Console.WriteLine(SumSquares(lst1)); // Output: 14\n\n        List<object> lst2 = new List<object> { 1, 4, 9 };\n        Console.WriteLine(SumSquares(lst2)); // Output: 98\n\n        List<object> lst3 = new List<object> { 1, 3, 5, 7 };\n        Console.WriteLine(SumSquares(lst3)); // Output: 84\n\n        List<object> lst4 = new List<object> { 1.4, 4.2, 0 };\n        Console.WriteLine(SumSquares(lst4)); // Output: 29\n\n        List<object> lst5 = new List<object> { -2.4, 1, 1 };\n        Console.WriteLine(SumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "csharp/61", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\n        /// Hinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n        /// \n        /// Beispiele:\n        /// \n        /// CheckIfLastCharIsALetter(\"apple pie\") \u279e False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") \u279e True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") \u279e False\n        /// CheckIfLastCharIsALetter(\"\") \u279e False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter(string txt)\n        {\n            // Leerer String oder nur Leerzeichen zur\u00fcckgeben False\n            if (string.IsNullOrWhiteSpace(txt))\n            {\n                return false;\n            }\n\n            // Entfernen Sie alle f\u00fchrenden und nachfolgenden Leerzeichen\n            txt = txt.Trim();\n\n            // Pr\u00fcfen Sie, ob der String leer ist oder nur aus Leerzeichen besteht\n            if (string.IsNullOrWhiteSpace(txt))\n            {\n                return false;\n            }\n\n            // Extrahieren Sie das letzte Zeichen\n            char lastChar = txt[txt.Length - 1];\n\n            // \u00dcberpr\u00fcfen, ob das letzte Zeichen ein Buchstabe ist und nicht Teil eines Wortes\n            if (char.IsLetter(lastChar))\n            {\n                // Pr\u00fcfen Sie, ob das letzte Zeichen isoliert ist (kein vorheriges oder nachfolgendes Leerzeichen)\n                if (!txt.EndsWith(\" \"))\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            // Testf\u00e4lle\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pie\")); // False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e\")); // True\n            Console.WriteLine(CheckIfLastCharIsALetter(\"apple pi e \")); // False\n            Console.WriteLine(CheckIfLastCharIsALetter(\"\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n        /// \n        /// Beispiele:\n        /// \n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange(List<int> arr) \n        {\n            if (arr == null || arr.Count < 2)\n                return -1; // There's no element to compare if the list is empty or has only one element.\n\n            for (int i = 1; i < arr.Count; i++)\n            {\n                if (arr[i] <= arr[i - 1])\n                    return i; // Return the index of the first element that does not satisfy the condition.\n            }\n\n            return -1; // If no such element is found, return -1.\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 4, 3, 5 })); // Output: 3\n            Console.WriteLine(CanArrange(new List<int> { 1, 2, 3 })); // Output: -1\n        }\n    }\n}"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die ein Tupel (a, b) zur\u00fcckgibt, wobei 'a' die gr\u00f6\u00dfte negative Ganzzahl und 'b' die kleinste positive Ganzzahl in einer Liste ist. Wenn es keine negativen oder positiven Ganzzahlen gibt, geben Sie sie als None zur\u00fcck.\n        /// \n        /// Beispiele:\n        /// \n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static List<object> LargestSmallestIntegers(List<int> lst)\n        {\n            // Wenn die Liste leer ist oder nur Nullen enth\u00e4lt, geben wir (None, None) zur\u00fcck\n            if (lst == null || lst.Count == 0 || lst.All(x => x == 0))\n            {\n                return new List<object> { \"None\", \"None\" };\n            }\n\n            // Initialisieren der Variablen f\u00fcr die gr\u00f6\u00dfte negative und kleinste positive Ganzzahl\n            int? largestNegative = null;\n            int? smallestPositive = null;\n\n            foreach (int num in lst)\n            {\n                if (num < 0)\n                {\n                    if (largestNegative == null || num > largestNegative)\n                    {\n                        largestNegative = num;\n                    }\n                }\n                else if (num > 0)\n                {\n                    if (smallestPositive == null || num < smallestPositive)\n                    {\n                        smallestPositive = num;\n                    }\n                }\n            }\n\n            // Wenn keine negativen oder positiven Ganzzahlen gefunden wurden, geben wir (None, None) zur\u00fcck\n            if (largestNegative == null && smallestPositive == null)\n            {\n                return new List<object> { \"None\", \"None\" };\n            }\n\n            // R\u00fcckgabe des Tupels als Liste von Objekten\n            return new List<object> { largestNegative ?? \"None\", smallestPositive ?? \"None\" };\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(string.Join(\", \", LargestSmallestIntegers(new List<int> { 2, 4, 1, 3, 5, 7 }))); // (None, 1)\n            Console.WriteLine(string.Join(\", \", LargestSmallestIntegers(new List<int> {}))); // (None, None)\n            Console.WriteLine(string.Join(\", \", LargestSmallestIntegers(new List<int> { 0 }))); // (None, None)\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Das brasilianische Fakult\u00e4t ist definiert als:\n        ///     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        ///     wobei n > 0\n        /// \n        ///     Zum Beispiel:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial(int n)\n        {\n            if (n <= 0)\n            {\n                throw new ArgumentException(\"The input must be greater than zero.\");\n            }\n\n            int result = 1;\n            for (int i = n; i > 0; i--)\n            {\n                result *= Factorial(i);\n            }\n\n            return result;\n        }\n\n        private static int Factorial(int number)\n        {\n            if (number == 0 || number == 1)\n            {\n                return 1;\n            }\n\n            int factorial = 1;\n            for (int i = 2; i <= number; i++)\n            {\n                factorial *= i;\n            }\n\n            return factorial;\n        }\n\n        public static void Main(string[] args)\n        {\n            try\n            {\n                int input = int.Parse(args[0]);\n                Console.WriteLine(SpecialFactorial(input));\n            }\n            catch (Exception ex)\n            {\n                Console.Error.WriteLine($\"An error occurred: {ex.Message}\");\n            }\n        }\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "using System;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Du erh\u00e4ltst einen String, der einen Satz repr\u00e4sentiert. Der Satz enth\u00e4lt einige W\u00f6rter, die durch ein Leerzeichen getrennt sind. Du musst einen String zur\u00fcckgeben, der die W\u00f6rter aus dem urspr\u00fcnglichen Satz enth\u00e4lt, deren L\u00e4ngen Primzahlen sind. Die Reihenfolge der W\u00f6rter im neuen String sollte dieselbe wie im Original sein.\n        /// \n        ///     Beispiel 1:\n        ///         Eingabe: sentence = \"This is a test\"\n        ///         Ausgabe: \"is\"\n        /// \n        ///     Beispiel 2:\n        ///         Eingabe: sentence = \"lets go for swimming\"\n        ///         Ausgabe: \"go for\"\n        /// \n        ///     Einschr\u00e4nkungen:\n        ///         * 1 <= len(sentence) <= 100\n        ///         * Der Satz enth\u00e4lt nur Buchstaben.\n        /// \n        /// \n        /// </summary>\n        public static string WordsInSentence(string sentence)\n        {\n            // Split the sentence into words\n            var words = sentence.Split(' ');\n\n            // Check if a number is prime\n            bool IsPrime(int num)\n            {\n                if (num <= 1) return false;\n                if (num == 2) return true; // 2 is the only even prime number\n                if (num % 2 == 0) return false;\n                for (int i = 3; i * i <= num; i += 2)\n                {\n                    if (num % i == 0) return false;\n                }\n                return true;\n            }\n\n            // Filter words by their length being a prime number\n            var primeLengthWords = words.Where(word => IsPrime(word.Length)).ToList();\n\n            // Join the filtered words into a single string with spaces\n            return string.Join(\" \", primeLengthWords);\n        }\n\n        static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(WordsInSentence(\"This is a test\")); // Output: \"is\"\n            Console.WriteLine(WordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n        }\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Zahlen sind.\n        /// \n        /// Du kannst davon ausgehen, dass x und n g\u00fcltige Bruchzahlen sind und keinen Nenner von Null haben.\n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify(string x, string n) \n        {\n            // Regex to extract the numerator and denominator from the input strings\n            var regex = new Regex(@\"^(\\d+)/(\\d+)$\");\n            \n            // Extract parts of the fractions using regex\n            var matchX = regex.Match(x);\n            var matchN = regex.Match(n);\n            \n            if (!matchX.Success || !matchN.Success)\n                throw new ArgumentException(\"Invalid fraction format.\");\n            \n            int numeratorX = int.Parse(matchX.Groups[1].Value);\n            int denominatorX = int.Parse(matchX.Groups[2].Value);\n            int numeratorN = int.Parse(matchN.Groups[1].Value);\n            int denominatorN = int.Parse(matchN.Groups[2].Value);\n            \n            // Multiply the numerators and denominators\n            int resultNumerator = numeratorX * numeratorN;\n            int resultDenominator = denominatorX * denominatorN;\n            \n            // Check if the result is a whole number by comparing it to its integer representation\n            return resultNumerator % resultDenominator == 0;\n        }\n        \n        static void Main(string[] args)\n        {\n            Console.WriteLine(Simplify(\"1/5\", \"5/1\")); // True\n            Console.WriteLine(Simplify(\"1/6\", \"2/1\")); // False\n            Console.WriteLine(Simplify(\"7/10\", \"10/2\")); // False\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n        ///     in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n        ///     Hinweis: Wenn es mehrere Elemente mit \u00e4hnlicher Summe ihrer Ziffern gibt,\n        ///     ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n        /// \n        ///     Zum Beispiel:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints(List<int> nums)\n        {\n            if (nums == null || !nums.Any())\n                return new List<int>();\n\n            // Sort the list by the sum of digits, then by index if sums are equal\n            var sortedNums = nums.Select((value, index) => new { Value = value, Index = index })\n                                .OrderBy(x => SumOfDigits(x.Value))\n                                .ThenBy(x => x.Index)\n                                .Select(x => x.Value)\n                                .ToList();\n\n            return sortedNums;\n        }\n\n        private static int SumOfDigits(int num)\n        {\n            int sum = 0;\n            while (num != 0)\n            {\n                sum += Math.Abs(num % 10);\n                num /= 10;\n            }\n            return sum;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int> { 1, 11, -1, -11, -12 }))); // Output: -1, -11, 1, -12, 11\n            Console.WriteLine(string.Join(\", \", OrderByPoints(new List<int>()))); // Output: \n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n        /// \n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter(List<int> nums)\n        {\n            return nums.Count(num => num > 10 && IsOddDigit(num[0]) && IsOddDigit(num[^1]));\n        }\n\n        private static bool IsOddDigit(char digit)\n        {\n            int digitValue = Convert.ToInt32(digit);\n            return digitValue % 2 != 0;\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(SpecialFilter(new List<int> { 15, -73, 14, -15 })); // Output: 1\n            Console.WriteLine(SpecialFilter(new List<int> { 33, -2, -3, 45, 21, 109 })); // Output: 2\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten eine positive ganze Zahl n. Sie m\u00fcssen ein Integer-Array a der L\u00e4nge n erstellen.\n        ///         F\u00fcr jedes i (1 \u2264 i \u2264 n) gilt: a[i] = i * i - i + 1.\n        ///         Geben Sie die Anzahl der Tripel (a[i], a[j], a[k]) von a zur\u00fcck, bei denen i < j < k gilt und a[i] + a[j] + a[k] ein Vielfaches von 3 ist.\n        /// \n        ///     Beispiel:\n        ///         Eingabe: n = 5\n        ///         Ausgabe: 1\n        ///         Erkl\u00e4rung:\n        ///         a = [1, 3, 7, 13, 21]\n        ///         Das einzige g\u00fcltige Tripel ist (1, 7, 13).\n        /// \n        /// </summary>\n        public static int GetMaxTriples(int n)\n        {\n            // Step 1: Create the array a\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n            {\n                a[i] = i * i - i + 1;\n            }\n\n            // Step 2: Initialize the count of valid triples\n            int count = 0;\n\n            // Step 3: Iterate through all possible triples (i, j, k) where i < j < k\n            for (int i = 0; i < n - 2; i++)\n            {\n                for (int j = i + 1; j < n - 1; j++)\n                {\n                    for (int k = j + 1; k < n; k++)\n                    {\n                        if ((a[i] + a[j] + a[k]) % 3 == 0)\n                        {\n                            count++;\n                        }\n                    }\n                }\n            }\n\n            // Step 4: Return the count of valid triples\n            return count;\n        }\n\n        static void Main(string[] args)\n        {\n            int n = 5;\n            Console.WriteLine(GetMaxTriples(n)); // Output should be 1\n        }\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<string> Bf(string planet1, string planet2)\n    {\n        // Define the list of planets in order of their proximity to the Sun\n        List<string> planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        \n        // Check if both planet1 and planet2 are valid planet names\n        if (!planets.Contains(planet1) || !planets.Contains(planet2))\n        {\n            return new List<string>();\n        }\n\n        // Find the indices of the planets\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n        \n        // Ensure index1 is less than index2 for easier range determination\n        if (index1 > index2)\n        {\n            var temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        \n        // Get the planets whose orbits lie between planet1 and planet2\n        List<string> result = planets.Skip(index1 + 1).Take(index2 - index1 - 1).ToList();\n        \n        return result;\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(string.Join(\", \", Bf(\"Jupiter\", \"Neptune\"))); // Output: Saturn, Uranus\n        Console.WriteLine(string.Join(\", \", Bf(\"Earth\", \"Mercury\"))); // Output: Venus\n        Console.WriteLine(string.Join(\", \", Bf(\"Mercury\", \"Uranus\"))); // Output: Venus, Earth, Mars, Jupiter, Saturn\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// This method checks if a number is prime and returns x if it is, or y if it is not.\n        /// </summary>\n        public static int XOrY(int n, int x, int y)\n        {\n            // Check if n is less than 2, then it's not a prime number\n            if (n < 2) return y;\n\n            // A simple method to check for primality:\n            // We only need to check divisibility up to the square root of n\n            for (int i = 2; i * i <= n; i++)\n            {\n                if (n % i == 0) return y; // If divisible by any number other than 1 and itself, it's not prime\n            }\n\n            // If we reach this point, n is a prime number\n            return x;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(XOrY(7, 34, 12)); // Output: 34 (since 7 is not divisible by any number other than 1 and itself)\n            Console.WriteLine(XOrY(15, 8, 5)); // Output: 5 (since 15 is divisible by 3 and 5, so it's not prime)\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine Liste von Zahlen, gib die Summe der Quadrate der Zahlen in der Liste zur\u00fcck, die ungerade sind. Ignoriere Zahlen, die negativ oder keine ganzen Zahlen sind.\n        /// \n        ///     DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        ///     DoubleTheDifference([-1, -2, 0]) == 0\n        ///     DoubleTheDifference([9, -2]) == 81\n        ///     DoubleTheDifference([0]) == 0  \n        ///     \n        ///     Wenn die Eingangsliste leer ist, gib 0 zur\u00fcck.\n        /// \n        /// </summary>\n        public static int DoubleTheDifference(List<object> lst) \n        {\n            // Filter the list to include only integers that are positive and ungerade\n            var filteredNumbers = lst\n                .OfType<int>() // Convert all elements to integers\n                .Where(n => n > 0 && n % 2 != 0); // Filter for positive and ungerade numbers\n\n            // Compute the sum of the squares of the filtered numbers\n            int sumOfSquares = filteredNumbers.Sum(n => n * n);\n\n            return sumOfSquares;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(DoubleTheDifference(new List<object> { 1, 3, 2, 0 })); // Output: 10\n            Console.WriteLine(DoubleTheDifference(new List<object> { -1, -2, 0 })); // Output: 0\n            Console.WriteLine(DoubleTheDifference(new List<object> { 9, -2 })); // Output: 81\n            Console.WriteLine(DoubleTheDifference(new List<object> { 0 })); // Output: 0\n        }\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten den Namen einer Klasse (einen String) und eine Liste von Erweiterungen. Die Erweiterungen sollen verwendet werden, um zus\u00e4tzliche Klassen zur Klasse zu laden. Die St\u00e4rke der Erweiterung wird wie folgt definiert: Sei CAP die Anzahl der Gro\u00dfbuchstaben im Namen der Erweiterung und SM die Anzahl der Kleinbuchstaben im Namen der Erweiterung. Die St\u00e4rke wird durch den Bruch CAP - SM gegeben. Sie sollten die st\u00e4rkste Erweiterung finden und einen String in diesem Format zur\u00fcckgeben: ClassName.StrongestExtensionName. Wenn es zwei oder mehr Erweiterungen mit der gleichen St\u00e4rke gibt, sollten Sie die w\u00e4hlen, die zuerst in der Liste steht. Zum Beispiel, wenn Sie \"Slices\" als Klasse und eine Liste von Erweiterungen erhalten: ['SErviNGSliCes', 'Cheese', 'StuFfed'], sollten Sie 'Slices.SErviNGSliCes' zur\u00fcckgeben, da 'SErviNGSliCes' die st\u00e4rkste Erweiterung ist (ihre St\u00e4rke ist -1). Beispiel:\n        /// \n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension(string class_name, List<string> extensions) \n        {\n            if (extensions == null || extensions.Count == 0)\n                return $\"{class_name}.\";\n\n            Dictionary<string, int> extensionStrengths = new Dictionary<string, int>();\n\n            foreach (var ext in extensions)\n            {\n                int capCount = Regex.Matches(ext, \"[A-Z]\").Count;\n                int smCount = Regex.Matches(ext, \"[a-z]\").Count;\n                extensionStrengths[ext] = capCount - smCount;\n            }\n\n            string strongestExtension = extensions.First();\n            int maxStrength = int.MinValue;\n\n            foreach (var ext in extensionStrengths)\n            {\n                if (ext.Value > maxStrength)\n                {\n                    maxStrength = ext.Value;\n                    strongestExtension = ext.Key;\n                }\n            }\n\n            return $\"{class_name}.{strongestExtension}\";\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(StrongestExtension(\"Slices\", new List<string> { \"SErviNGSliCes\", \"Cheese\", \"StuFfed\" })); // Slices.SErviNGSliCes\n            Console.WriteLine(StrongestExtension(\"my_class\", new List<string> { \"AA\", \"Be\", \"CC\" })); // my_class.AA\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n        /// CycpatternCheck(\"abcd\",\"abd\") => False\n        /// CycpatternCheck(\"hello\",\"ell\") => True\n        /// CycpatternCheck(\"whassup\",\"psus\") => False\n        /// CycpatternCheck(\"abab\",\"baa\") => True\n        /// CycpatternCheck(\"efef\",\"eeff\") => False\n        /// CycpatternCheck(\"himenss\",\"simen\") => True\n        /// \n        /// </summary>\n        public static bool CycpatternCheck(string a, string b)\n        {\n            // Generate all rotations of the second word (b)\n            List<string> rotations = new List<string>();\n            for (int i = 0; i < b.Length; i++)\n            {\n                string rotation = b.Substring(i) + b.Substring(0, i);\n                rotations.Add(rotation);\n            }\n\n            // Check if any of the rotations is a substring of the first word (a)\n            foreach (var rotation in rotations)\n            {\n                if (a.Contains(rotation))\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(CycpatternCheck(\"abcd\", \"abd\")); // False\n            Console.WriteLine(CycpatternCheck(\"hello\", \"ell\")); // True\n            Console.WriteLine(CycpatternCheck(\"whassup\", \"psus\")); // False\n            Console.WriteLine(CycpatternCheck(\"abab\", \"baa\")); // True\n            Console.WriteLine(CycpatternCheck(\"efef\", \"eeff\")); // False\n            Console.WriteLine(CycpatternCheck(\"himenss\", \"simen\")); // True\n        }\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Converts a given positive integer to its Roman numeral equivalent in lowercase.\n        /// </summary>\n        public static string IntToMiniRoman(int number)\n        {\n            if (number <= 0 || number > 1000)\n                throw new ArgumentOutOfRangeException(\"Number must be between 1 and 1000.\");\n\n            // Define the mapping of integers to Roman numerals\n            Dictionary<int, string> romanMap = new Dictionary<int, string>\n            {\n                { 1000, \"m\" },\n                { 900, \"cm\" },\n                { 500, \"d\" },\n                { 400, \"cd\" },\n                { 100, \"c\" },\n                { 90, \"xc\" },\n                { 50, \"l\" },\n                { 40, \"xl\" },\n                { 10, \"x\" },\n                { 9, \"ix\" },\n                { 5, \"v\" },\n                { 4, \"iv\" },\n                { 1, \"i\" }\n            };\n\n            // Initialize the result string\n            string romanNumeral = \"\";\n\n            // Iterate through the mapping and construct the Roman numeral string\n            foreach (var pair in romanMap)\n            {\n                while (number >= pair.Key)\n                {\n                    romanNumeral += pair.Value;\n                    number -= pair.Key;\n                }\n            }\n\n            // Return the result in lowercase\n            return romanNumeral.ToLower();\n        }\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(IntToMiniRoman(19));  // Output: xix\n            Console.WriteLine(IntToMiniRoman(152)); // Output: clii\n            Console.WriteLine(IntToMiniRoman(426)); // Output: cdxxvi\n        }\n    }\n}"}
{"task_id": "csharp/76", "language": "csharp", "completion": "using System;\n\npublic class Program\n{\n    public static bool RightAngleTriangle(int a, int b, int c)\n    {\n        // Wir m\u00fcssen sicherstellen, dass die gr\u00f6\u00dfte Seite als Hypotenuse betrachtet wird.\n        int max = Math.Max(a, Math.Max(b, c));\n        \n        if (max == a)\n        {\n            return a * a == b * b + c * c;\n        }\n        else if (max == b)\n        {\n            return b * b == a * a + c * c;\n        }\n        else\n        {\n            return c * c == a * a + b * b;\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(RightAngleTriangle(3, 4, 5)); // True\n        Console.WriteLine(RightAngleTriangle(1, 2, 3)); // False\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Du erh\u00e4ltst einen String s.\n        ///     Wenn s[i] ein Buchstabe ist, kehre seine Gro\u00df- und Kleinschreibung um, oder umgekehrt,\n        ///     ansonsten belasse es so wie es ist.\n        ///     Wenn der String keine Buchstaben enth\u00e4lt, kehre den String um.\n        ///     Die Funktion sollte den resultierenden String zur\u00fcckgeben.\n        ///     Beispiele\n        /// \n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve(string s)\n        {\n            if (string.IsNullOrEmpty(s))\n                return s;\n\n            char[] characters = s.ToCharArray();\n            for (int i = 0; i < characters.Length; i++)\n            {\n                if (char.IsLetter(characters[i]))\n                {\n                    if (char.IsUpper(characters[i]))\n                    {\n                        characters[i] = char.ToLower(characters[i]);\n                    }\n                    else\n                    {\n                        characters[i] = char.ToUpper(characters[i]);\n                    }\n                }\n            }\n\n            return new string(characters);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Solve(\"1234\")); // Output: \"4321\"\n            Console.WriteLine(Solve(\"ab\"));   // Output: \"AB\"\n            Console.WriteLine(Solve(\"#a@C\")); // Output: \"#A@c\"\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n        ///     Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static object StringToMd5(string text) \n        {\n            if (string.IsNullOrEmpty(text))\n            {\n                return null;\n            }\n\n            using (MD5 md5 = MD5.Create())\n            {\n                byte[] inputBytes = Encoding.ASCII.GetBytes(text);\n                byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n                StringBuilder sb = new StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    sb.Append(hashBytes[i].ToString(\"x2\"));\n                }\n                return sb.ToString();\n            }\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers (int a, int b) \n        {\n            // Ensure the range is from smaller to larger number\n            if (a > b)\n            {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n\n            List<int> evenNumbers = new List<int>();\n\n            for (int i = a; i <= b; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    evenNumbers.Add(i);\n                }\n            }\n\n            return evenNumbers;\n        }\n\n        public static void Main(string[] args)\n        {\n            // Test cases\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(2, 8))); // [2, 4, 6, 8]\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(8, 2))); // [2, 4, 6, 8]\n            Console.WriteLine(string.Join(\", \", GenerateIntegers(10, 14))); // []\n        }\n    }\n}"}

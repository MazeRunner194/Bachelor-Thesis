{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0;\n    \n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Test cases\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    if (numbers.length === 0) {\n        return [0, 1];\n    }\n\n    let sum = 0;\n    let product = 1;\n\n    for (let number of numbers) {\n        sum += number;\n        product *= number;\n    }\n\n    return [sum, product];\n}\n\n// Test cases\nconsole.log(sumProduct([])); // Output: [0, 1]\nconsole.log(sumProduct([1, 2, 3, 4])); // Output: [10, 24]"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    // Ensure both strings are of equal length by padding the shorter one with leading zeros\n    let maxLength = Math.max(a.length, b.length);\n    a = a.padStart(maxLength, '0');\n    b = b.padStart(maxLength, '0');\n\n    // Initialize an empty string to store the result\n    let result = '';\n\n    // Iterate through each character of the strings\n    for (let i = 0; i < maxLength; i++) {\n        // Perform XOR operation on each pair of characters and append to the result string\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    // Return the resulting string\n    return result;\n}\n\n// Example usage:\nconsole.log(stringXor('010', '110')); // Output: '100'"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    // Check if the input list is empty\n    if (strings.length === 0) {\n        return \"none\";\n    }\n\n    // Initialize a variable to keep track of the longest string\n    let longestString = \"\";\n\n    // Iterate through each string in the list\n    for (let str of strings) {\n        // If the current string is longer than the longest string found so far, update it\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    // Return the longest string found\n    return longestString;\n}\n\n// Test cases\nconsole.log(longest([])); // \"none\"\nconsole.log(longest(['a', 'b', 'c'])); // \"a\"\nconsole.log(longest(['a', 'bb', 'ccc'])); // \"ccc\""}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // Ensure that both numbers are positive\n    if (a < 0) a = -a;\n    if (b < 0) b = -b;\n    \n    while (b != 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n// Test cases\nconsole.log(greatestCommonDivisor(3, 5)); // Output: 1\nconsole.log(greatestCommonDivisor(25, 15)); // Output: 5"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Define a mapping from number words to their numeric values\n    const numMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n\n    // Split the input string into an array of number words\n    const numArray = numbers.split(' ');\n\n    // Map each word to its numeric value using the numMap\n    const mappedArray = numArray.map(numWord => numMap[numWord]);\n\n    // Sort the mapped array based on the numeric values\n    mappedArray.sort((a, b) => a - b);\n\n    // Convert the sorted numeric values back to number words\n    const sortedWords = mappedArray.map(numValue => {\n        return Object.keys(numMap).find(key => numMap[key] === numValue);\n    });\n\n    // Join the sorted array into a space-delimited string and return it\n    return sortedWords.join(' ');\n}\n\n// Example usage:\nconsole.log(sortNumbers('three one five')); // Output: 'one three five'"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"The list must contain at least two elements.\");\n    }\n\n    // Find the minimum and maximum values in the list\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    // Calculate the range\n    let range = max - min;\n\n    // Apply the linear transformation to each number\n    return numbers.map(num => (num - min) / range);\n}\n\n// Example usage:\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n  let flippedString = '';\n  \n  for (let char of string) {\n    if (char === char.toLowerCase()) {\n      flippedString += char.toUpperCase();\n    } else {\n      flippedString += char.toLowerCase();\n    }\n  }\n  \n  return flippedString;\n}\n\n// Example usage:\nconsole.log(flipCase('Hello')); // Output: 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    return l.filter(number => number > 0);\n}\n\n// Example usage:\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n    // Handle cases where n is less than 2\n    if (n <= 1) return false;\n    // Check for even numbers greater than 2\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    \n    // Only check odd numbers up to the square root of n\n    let sqrtN = Math.sqrt(n);\n    for (let i = 3; i <= sqrtN; i += 2) {\n        if (n % i === 0) return false;\n    }\n    \n    return true;\n}\n\n// Test cases\nconsole.log(isPrime(6)); // False\nconsole.log(isPrime(101)); // True\nconsole.log(isPrime(11)); // True\nconsole.log(isPrime(13441)); // True\nconsole.log(isPrime(61)); // True\nconsole.log(isPrime(4)); // False\nconsole.log(isPrime(1)); // False"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n  // Create a Set from the list to remove duplicates\n  const uniqueElements = new Set(l);\n  \n  // Convert the Set back to an array and sort it\n  const sortedUniqueArray = Array.from(uniqueElements).sort((a, b) => a - b);\n  \n  return sortedUniqueArray;\n}\n\n// Example usage:\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "javascript/11", "language": "javascript", "completion": "function isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}\n\nfunction primeFib(n) {\n  let fibs = [];\n  let a = 0, b = 1;\n  \n  while (true) {\n    let nextFib = a + b;\n    if (isPrime(nextFib)) {\n      fibs.push(nextFib);\n    }\n    if (fibs.length >= n) break;\n    a = b;\n    b = nextFib;\n  }\n  \n  return fibs[n - 1];\n}\n\n// Test cases\nconsole.log(primeFib(1)); // 2\nconsole.log(primeFib(2)); // 3\nconsole.log(primeFib(3)); // 5\nconsole.log(primeFib(4)); // 13\nconsole.log(primeFib(5)); // 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    // If the list has less than 3 elements, it's impossible to have a triplet summing to zero\n    if (l.length < 3) return false;\n\n    // Sort the array to make it easier to avoid duplicates and find triplets\n    l.sort((a, b) => a - b);\n\n    for (let i = 0; i < l.length - 2; i++) {\n        // Skip duplicate elements\n        if (i > 0 && l[i] === l[i - 1]) continue;\n\n        let left = i + 1;\n        let right = l.length - 1;\n\n        while (left < right) {\n            const sum = l[i] + l[left] + l[right];\n\n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // False\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // True\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // False\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triplesSumToZero([1])); // False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    // Create a set to store the elements we have seen so far\n    const seen = new Set();\n    \n    // Iterate through each element in the list\n    for (let num of l) {\n        // Check if the negative of the current number exists in the set\n        if (seen.has(-num)) {\n            return true;\n        }\n        // Add the current number to the set\n        seen.add(num);\n    }\n    \n    // If no such pair is found, return false\n    return false;\n}\n\n// Test cases\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Initialize an array to store the sequence values\n    let fibArray = [0, 0, 2, 0];\n\n    // Compute the sequence iteratively up to n\n    for (let i = 4; i <= n; i++) {\n        fibArray[i] = fibArray[i - 1] + fibArray[i - 2] + fibArray[i - 3] + fibArray[i - 4];\n    }\n\n    // Return the n-th element of the sequence\n    return fibArray[n];\n}\n\n// Test cases\nconsole.log(fib4(5)); // Output: 4\nconsole.log(fib4(6)); // Output: 8\nconsole.log(fib4(7)); // Output: 14"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n  // Step 1: Sort the list in ascending order\n  l.sort((a, b) => a - b);\n\n  const len = l.length;\n  const midIndex = Math.floor(len / 2);\n\n  // Step 3 and 4: Determine the median based on whether the length is odd or even\n  if (len % 2 === 1) {\n    // Odd number of elements, return the middle one\n    return l[midIndex];\n  } else {\n    // Even number of elements, return the average of the two middle ones\n    return (l[midIndex - 1] + l[midIndex]) / 2;\n  }\n}\n\n// Test cases\nconsole.log(median([3, 1, 2, 4, 5])); // Output: 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // Output: 15"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n    // Remove non-alphanumeric characters and convert to lowercase for accurate comparison\n    const cleanedText = text.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    \n    // Check if the cleaned text is a palindrome\n    return cleanedText === cleanedText.split('').reverse().join('');\n}\n\n// Test cases\nconsole.log(isPalindrome(''));         // True\nconsole.log(isPalindrome('aba'));      // True\nconsole.log(isPalindrome('aaaaa'));    // True\nconsole.log(isPalindrome('zbcd'));     // False"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n    // Define a string containing all vowels (both lowercase and uppercase)\n    const vowels = 'aeiouAEIOU';\n    \n    // Initialize an empty string to store the result without vowels\n    let result = '';\n    \n    // Iterate through each character in the input text\n    for (let char of text) {\n        // Check if the current character is not a vowel by checking its presence in the vowels string\n        if (!vowels.includes(char)) {\n            // If it's not a vowel, append it to the result string\n            result += char;\n        }\n    }\n    \n    // Return the result string which now contains only non-vowel characters\n    return result;\n}\n\n// Test cases\nconsole.log(removeVowels('')); // ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // 'bcdf'\nconsole.log(removeVowels('aaaaa')); // ''\nconsole.log(removeVowels('aaBAA')); // 'B'\nconsole.log(removeVowels('zbcd')); // 'zbcd'"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\nconsole.log(belowThreshold([1, 20, 4, 10], 5)); // False"}
{"task_id": "javascript/19", "language": "javascript", "completion": "function add(x, y) {\n    return x + y;\n}\n\n// Test cases\nconsole.log(add(2, 3)); // Output: 5\nconsole.log(add(5, 7)); // Output: 12"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    // Helper function to sort the string and return the sorted version\n    const sortString = (str) => str.split('').sort().join('');\n    \n    // Sort both strings\n    const sortedS0 = sortString(s0);\n    const sortedS1 = sortString(s1);\n    \n    // Compare the sorted strings and return true if they are equal, otherwise false\n    return sortedS0 === sortedS1;\n}\n\n// Test cases\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 0) {\n        return 0; // Return 0 for non-positive inputs\n    } else if (n === 1) {\n        return 1; // The first Fibonacci number is 1\n    }\n    \n    let a = 0, b = 1, c;\n    for (let i = 2; i <= n; i++) {\n        c = a + b; // Calculate the next Fibonacci number\n        a = b; // Update the first previous number to be the current one\n        b = c; // Update the second previous number to be the current one\n    }\n    return b; // The n-th Fibonacci number is stored in b after the loop\n}\n\n// Test cases\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    // Convert both lists to sets to remove duplicates\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    \n    // Find the intersection of the two sets\n    const intersection = [...set1].filter(x => set2.has(x));\n    \n    // Sort the result\n    intersection.sort((a, b) => a - b);\n    \n    return intersection;\n}\n\n// Test cases\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    let maxPrime = -1; // Initialize the maximum prime factor to negative infinity\n\n    // Divide out all factors of 2\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n /= 2;\n    }\n\n    // Check for odd factors from 3 onwards\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n\n    // If n is a prime number greater than 2, then its largest prime factor is n itself\n    if (n > 2) {\n        maxPrime = n;\n    }\n\n    return maxPrime;\n}\n\n// Test cases\nconsole.log(largestPrimeFactor(13195)); // Output: 29\nconsole.log(largestPrimeFactor(2048));  // Output: 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n    return (n * (n + 1)) / 2;\n}\n\n// Test cases\nconsole.log(sumToN(30)); // 465\nconsole.log(sumToN(100)); // 5050\nconsole.log(sumToN(5)); // 15\nconsole.log(sumToN(10)); // 55\nconsole.log(sumToN(1)); // 1"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    // Initialize an array to store the coefficients of the derivative polynomial\n    let derivatives = [];\n    \n    // Iterate through the coefficients and compute the derivative for each term\n    for (let i = 1; i < xs.length; i++) {\n        derivatives[i - 1] = i * xs[i];\n    }\n    \n    return derivatives;\n}\n\n// Test cases\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));       // [2, 6]"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n    // Base cases\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n\n    // Initialize an array to store the computed values\n    let fibfibArray = [0, 0, 1];\n\n    // Compute the sequence up to n using a loop\n    for (let i = 3; i <= n; i++) {\n        fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n    }\n\n    // Return the n-th element in the sequence\n    return fibfibArray[n];\n}\n\n// Test cases\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n    // Define the set of vowels\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    \n    // Convert the string to lowercase to make the function case-insensitive\n    s = s.toLowerCase();\n    \n    // Initialize a counter for vowels\n    let count = 0;\n    \n    // Iterate over each character in the string\n    for (let char of s) {\n        // Check if the character is a vowel and increment the counter\n        if (vowels.has(char)) {\n            count++;\n        }\n    }\n    \n    // Return the total count of vowels\n    return count;\n}\n\n// Example usage:\nconsole.log(vowelsCount(\"abcde\")); // Output: 2\nconsole.log(vowelsCount(\"ACEDY\")); // Output: 3"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    // Step 1: Count the frequency of each integer in the list\n    const frequencyMap = {};\n    for (const num of lst) {\n        if (!frequencyMap[num]) {\n            frequencyMap[num] = 0;\n        }\n        frequencyMap[num]++;\n    }\n\n    // Step 2: Find integers with a frequency greater than or equal to their value\n    let result = -1;\n    for (const num in frequencyMap) {\n        const freq = frequencyMap[num];\n        if (freq >= parseInt(num)) {\n            if (parseInt(num) > result) {\n                result = parseInt(num);\n            }\n        }\n    }\n\n    // Step 3: Return the greatest integer that satisfies the condition\n    return result;\n}\n\n// Test cases\nconsole.log(search([4, 1, 2, 2, 3, 1])); // Output: 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // Output: 3\nconsole.log(search([5, 5, 4, 4, 4])); // Output: -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function isValidTriangle(a, b, c) {\n    return (a + b > c) && (a + c > b) && (b + c > a);\n}\n\nfunction triangleArea(a, b, c) {\n    if (!isValidTriangle(a, b, c)) {\n        return -1;\n    }\n\n    // Calculate the semi-perimeter\n    const s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Round to 2 decimal places\n    return parseFloat(area.toFixed(2));\n}\n\n// Example usage:\nconsole.log(triangleArea(3, 4, 5)); // Output: 6.00\nconsole.log(triangleArea(1, 2, 10)); // Output: -1"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // Check if q is a palindrome\n    function isPalindrome(arr) {\n        for (let i = 0; i < arr.length / 2; i++) {\n            if (arr[i] !== arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Calculate the sum of elements in q\n    const sum = q.reduce((acc, val) => acc + val, 0);\n\n    // Check if q is a palindrome and if the sum of its elements is less than or equal to w\n    return isPalindrome(q) && sum <= w;\n}\n\n// Test cases\nconsole.log(willItFly([1, 2], 5)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 1)); // \u279e False\nconsole.log(willItFly([3, 2, 3], 9)); // \u279e True\nconsole.log(willItFly([3], 5)); // \u279e True"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isMultiplyPrime(a) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Generate all prime numbers less than 100\n    const primes = [];\n    for (let i = 2; i < 100; i++) {\n        if (isPrime(i)) primes.push(i);\n    }\n\n    // Check all combinations of three primes\n    for (let i = 0; i < primes.length - 2; i++) {\n        for (let j = i + 1; j < primes.length - 1; j++) {\n            for (let k = j + 1; k < primes.length; k++) {\n                if (primes[i] * primes[j] * primes[k] === a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // If no combination found, return false\n    return false;\n}\n\n// Example usage:\nconsole.log(isMultiplyPrime(30)); // True because 30 = 2 * 3 * 5\nconsole.log(isMultiplyPrime(60)); // False (no three primes multiply to 60)"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n    \n    // Add 'db' at the beginning and end of the string\n    return 'db' + binaryString + 'db';\n}\n\n// Examples\nconsole.log(decimalToBinary(15));   // returns \"db1111db\"\nconsole.log(decimalToBinary(32));   // returns \"db100000db\""}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    // Check if the length of the string is less than 3\n    if (s.length < 3) {\n        return false;\n    }\n    \n    // Loop through the string to check every 3 consecutive letters\n    for (let i = 0; i <= s.length - 3; i++) {\n        // Extract the 3 consecutive letters\n        let substring = s.substring(i, i + 3);\n        \n        // Check if all three characters are distinct\n        if (new Set(substring).size !== 3) {\n            return false;\n        }\n    }\n    \n    // If all checks pass, the string is happy\n    return true;\n}\n\n// Test cases\nconsole.log(isHappy(\"a\"));       // False\nconsole.log(isHappy(\"aa\"));      // False\nconsole.log(isHappy(\"abcd\"));    // True\nconsole.log(isHappy(\"aabb\"));    // False\nconsole.log(isHappy(\"adb\"));     // True\nconsole.log(isHappy(\"xyy\"));     // False"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    return grades.map(gpa => {\n        if (gpa === 4.0) return 'A+';\n        if (gpa > 3.7) return 'A';\n        if (gpa > 3.3) return 'A-';\n        if (gpa > 3.0) return 'B+';\n        if (gpa > 2.7) return 'B';\n        if (gpa > 2.3) return 'B-';\n        if (gpa > 2.0) return 'C+';\n        if (gpa > 1.7) return 'C';\n        if (gpa > 1.3) return 'C-';\n        if (gpa > 1.0) return 'D+';\n        if (gpa > 0.7) return 'D';\n        if (gpa > 0.0) return 'D-';\n        return 'E';\n    });\n}\n\n// Example usage:\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num === 2) return true; // 2 is the only even prime number\n        if (num % 2 === 0) return false; // Other even numbers are not prime\n        for (let i = 3; i * i <= num; i += 2) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Get the length of the string\n    const length = string.length;\n\n    // Check if the length is a prime number\n    return isPrime(length);\n}\n\n// Examples\nconsole.log(primeLength('Hello')); // True\nconsole.log(primeLength('abcdcba')); // True\nconsole.log(primeLength('kittens')); // True\nconsole.log(primeLength('orange')); // False"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    // Step 1: Convert the integer to a string and then split it into individual characters (digits).\n    let digits = n.toString().split('');\n    \n    // Step 2: Convert each character back to an integer and sum them up.\n    let sumOfDigits = digits.reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    \n    // Step 3: Convert the sum of the digits into a binary string.\n    let binaryString = sumOfDigits.toString(2);\n    \n    // Step 4: Return the binary string.\n    return binaryString;\n}\n\n// Example usage:\nconsole.log(solve(1000)); // Output: \"1\"\nconsole.log(solve(150));  // Output: \"110\"\nconsole.log(solve(147));  // Output: \"1100\""}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n  // Initialize an empty array to store the coordinates\n  let coordinates = [];\n  \n  // Iterate through each row with its index\n  for (let i = 0; i < lst.length; i++) {\n    // Iterate through each element in the current row with its index\n    for (let j = 0; j < lst[i].length; j++) {\n      // If the current element matches x, add its coordinates to the list\n      if (lst[i][j] === x) {\n        coordinates.push([i, j]);\n      }\n    }\n  }\n  \n  // Sort the coordinates first by rows in ascending order, then by columns in descending order\n  coordinates.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0]; // Compare rows\n    } else {\n      return b[1] - a[1]; // If rows are the same, compare columns in descending order\n    }\n  });\n  \n  // Return the sorted list of coordinates\n  return coordinates;\n}\n\n// Test cases\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(getRow([], 1)); // == []\n\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) {\n        return \"none\";\n    }\n    \n    // Remove duplicates by converting to a set and back to an array\n    let uniqueElements = [...new Set(lst)];\n    \n    // Sort the unique elements\n    uniqueElements.sort((a, b) => a - b);\n    \n    // Check if there are at least two elements\n    if (uniqueElements.length < 2) {\n        return \"none\";\n    }\n    \n    // Return the second smallest element\n    return uniqueElements[1];\n}\n\n// Test cases\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // 2\nconsole.log(nextSmallest([])); // None\nconsole.log(nextSmallest([1, 1])); // None"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n    // Split the input string by '.', '?', and '!' followed by a space to isolate sentences\n    const sentences = s.split(/[.?!]/);\n    \n    // Initialize a counter for boredoms\n    let count = 0;\n    \n    // Loop through each sentence\n    for (let sentence of sentences) {\n        // Trim any leading or trailing whitespace from the sentence\n        sentence = sentence.trim();\n        \n        // Check if the sentence starts with \"I\"\n        if (sentence.startsWith(\"I \")) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage:\nconsole.log(isBored(\"Hello world\")); // Output: 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function skjkasdkd(lst) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Filter out the prime numbers from the list\n    let primes = lst.filter(isPrime);\n\n    // If there are no prime numbers, return 0 or handle as needed\n    if (primes.length === 0) {\n        return 0;\n    }\n\n    // Find the largest prime number\n    let largestPrime = Math.max(...primes);\n\n    // Calculate the sum of the digits of the largest prime number\n    let digitSum = 0;\n    while (largestPrime > 0) {\n        digitSum += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime / 10);\n    }\n\n    return digitSum;\n}\n\n// Test cases\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (key.toLowerCase() !== key) {\n            allLowerCase = false;\n        }\n        if (key.toUpperCase() !== key) {\n            allUpperCase = false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n}\n\n// Examples:\nconsole.log(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // True\nconsole.log(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // False\nconsole.log(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // False\nconsole.log(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // False\nconsole.log(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" })); // True"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    // Convert the string to a float\n    let num = parseFloat(value);\n    \n    // Check if the conversion resulted in NaN (not a number)\n    if (isNaN(num)) {\n        throw new Error(\"Invalid input: must be a valid number\");\n    }\n\n    // Use Math.round with custom logic to round away from zero for ties\n    let rounded = Math.round(num);\n    \n    // If the original number is exactly halfway between two integers, Math.round rounds towards the nearest even number (which effectively rounds away from zero)\n    if (num > 0 || num === 0 && !Number.isInteger(num)) {\n        return rounded;\n    } else {\n        // For negative numbers, we need to adjust the rounding direction\n        if (num < 0 && num !== -0.5 && num !== -0.1) {\n            return Math.floor(num);\n        } else {\n            return Math.ceil(num);\n        }\n    }\n}\n\n// Test cases\nconsole.log(closestInteger(\"10\")); // 10\nconsole.log(closestInteger(\"15.3\")); // 15\nconsole.log(closestInteger(\"14.5\")); // 15\nconsole.log(closestInteger(\"-14.5\")); // -15"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let pile = [];\n    for (let i = 0; i < n; i++) {\n        if (n % 2 === 1) { // If n is odd\n            pile.push(n + 2 * i);\n        } else { // If n is even\n            pile.push(n + 2 * i + 1);\n        }\n    }\n    return pile;\n}\n\n// Examples:\nconsole.log(makeAPile(3)); // [3, 5, 7]\nconsole.log(makeAPile(4)); // [4, 6, 8, 10]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n  // Split the string by commas and spaces\n  let words = s.split(/[\\s,]+/);\n  \n  // Return the array of words\n  return words;\n}\n\n// Example usage:\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1;\n    }\n\n    let maxEven = -1; // Initialize the maximum even number found to -1\n\n    // Iterate through the range from x to y inclusive\n    for (let i = x; i <= y; i++) {\n        if (i % 2 === 0) { // Check if the current number is even\n            if (i > maxEven) {\n                maxEven = i; // Update the maximum even number found\n            }\n        }\n    }\n\n    return maxEven;\n}\n\n// Test cases\nconsole.log(chooseNum(12, 15)); // Output: 14\nconsole.log(chooseNum(13, 12)); // Output: -1"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    // Step 1: Check if n is greater than m\n    if (n > m) {\n        return -1;\n    }\n\n    // Initialize sum to 0\n    let sum = 0;\n\n    // Step 2: Compute the sum of integers from n to m\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    // Step 3: Calculate the average\n    const count = m - n + 1;\n    const avg = sum / count;\n\n    // Step 4: Round to the nearest integer\n    const roundedAvg = Math.round(avg);\n\n    // Step 5: Convert to binary and return as a string prefixed with \"0b\"\n    return `0b${roundedAvg.toString(2)}`;\n}\n\n// Example usage:\nconsole.log(roundedAvg(1, 5)); // \"0b11\"\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\""}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n    // Helper function to calculate factorial\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Initialize the result list\n    const result = [];\n\n    // Iterate from 1 to n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // If index is even, calculate factorial\n            result.push(factorial(i));\n        } else {\n            // If index is odd, calculate sum from 1 to i\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(f(5)); // [1, 2, 6, 24, 15]"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    let evens = 0;\n    let odds = 0;\n\n    // Helper function to check if a number is a palindrome\n    function isPalindrome(num) {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evens++;\n            } else {\n                odds++;\n            }\n        }\n    }\n\n    return [evens, odds];\n}\n\n// Example usage:\nconsole.log(evenOddPalindrome(3)); // Output: [1, 2]\nconsole.log(evenOddPalindrome(12)); // Output: [4, 6]"}
{"task_id": "javascript/49", "language": "javascript", "completion": "function moveOneBall(arr) {\n    // Helper function to check if an array is sorted in non-decreasing order\n    function isSorted(array) {\n        for (let i = 1; i < array.length; i++) {\n            if (array[i] < array[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // If the array is empty, it is trivially sorted\n    if (arr.length === 0) {\n        return true;\n    }\n\n    // Check if the original array is already sorted\n    if (isSorted(arr)) {\n        return true;\n    }\n\n    // Try all possible right shifts\n    for (let shift = 1; shift < arr.length; shift++) {\n        let shiftedArray = arr.slice(-shift).concat(arr.slice(0, -shift));\n        if (isSorted(shiftedArray)) {\n            return true;\n        }\n    }\n\n    // If no right shift results in a sorted array, return False\n    return false;\n}\n\n// Test cases\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // True\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // False\nconsole.log(moveOneBall([])); // True"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // Helper function to check if a number is even\n    const isEven = (num) => num % 2 === 0;\n    \n    // Collect odd numbers from lst1\n    let oddNumbersInLst1 = [];\n    for (let num of lst1) {\n        if (!isEven(num)) {\n            oddNumbersInLst1.push(num);\n        }\n    }\n    \n    // Count the number of even numbers in lst2\n    let evenNumbersInLst2 = [];\n    for (let num of lst2) {\n        if (isEven(num)) {\n            evenNumbersInLst2.push(num);\n        }\n    }\n    \n    // If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n    if (oddNumbersInLst1.length <= evenNumbersInLst2.length) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // Step 1: Remove all characters in s that are present in c\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n    \n    // Step 2: Check if the resulting string is a palindrome\n    function isPalindrome(str) {\n        let len = str.length;\n        for (let i = 0; i < len / 2; i++) {\n            if (str[i] !== str[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    // Step 3: Return the result string and whether it is a palindrome\n    return [result, isPalindrome(result)];\n}\n\n// Example usage:\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // Output: ['bcd', false]\nconsole.log(reverseDelete(\"abcdef\", \"b\"));  // Output: ['acdef', false]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // Output: ['cdedc', true]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let totalBucketUses = 0;\n\n    // Iterate through each row (well) in the grid\n    for (let i = 0; i < grid.length; i++) {\n        const well = grid[i];\n        let waterUnits = 0;\n\n        // Count the number of units of water in the current well\n        for (let j = 0; j < well.length; j++) {\n            if (well[j] === 1) {\n                waterUnits += 1;\n            }\n        }\n\n        // Calculate the number of times we need to use the bucket for this well\n        const bucketUsesForWell = Math.ceil(waterUnits / capacity);\n        totalBucketUses += bucketUsesForWell;\n    }\n\n    return totalBucketUses;\n}\n\n// Example 1:\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Output: 6\n\n// Example 2:\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Output: 5\n\n// Example 3:\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Output: 0"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    // Helper function to count consonants in a word\n    function countConsonants(word) {\n        const vowels = \"aeiouAEIOU\";\n        let consonantCount = 0;\n        for (let char of word) {\n            if (!vowels.includes(char) && char.match(/[a-zA-Z]/)) {\n                consonantCount++;\n            }\n        }\n        return consonantCount;\n    }\n\n    // Split the string into words\n    const words = s.split(' ');\n    \n    // Filter and collect words with exactly n consonants\n    const result = [];\n    for (let word of words) {\n        if (countConsonants(word) === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sort the array in descending order\n    arr.sort((a, b) => b - a);\n    \n    // Return the first k elements from the sorted array\n    return arr.slice(0, k).sort((a, b) => a - b);\n}\n\n// Example 1\nconsole.log(maximum([-3, -4, 5], 3)); // Output: [-4, -3, 5]\n\n// Example 2\nconsole.log(maximum([4, -4, 4], 2)); // Output: [4, 4]\n\n// Example 3\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Output: [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Example usage:\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\nconst k = 4;\nconsole.log(addElements(arr, k)); // Output: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Extract start and end values for both intervals\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n    \n    // Find the intersection of the two intervals\n    const intersectionStart = Math.max(start1, start2);\n    const intersectionEnd = Math.min(end1, end2);\n    \n    // If there is no intersection, return \"NO\"\n    if (intersectionStart > intersectionEnd) {\n        return \"NO\";\n    }\n    \n    // Calculate the length of the intersection\n    const intersectionLength = intersectionEnd - intersectionStart + 1;\n    \n    // Check if the length is a prime number\n    if (isPrime(intersectionLength)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Helper function to check if a number is prime\nfunction isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Example usage:\nconsole.log(intersection((1, 2), (2, 3))); // \"NO\"\nconsole.log(intersection((-1, 1), (0, 4))); // \"NO\"\nconsole.log(intersection((-3, -1), (-5, 5))); // \"YES\""}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    // Initialize an array to store the sequence values\n    let result = [];\n    \n    // Handle the base case separately\n    if (n >= 0) result.push(3);\n    \n    // Generate the sequence up to n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // For even numbers\n            result.push(1 + i / 2);\n        } else {\n            // For odd numbers, use the recurrence relation\n            let index = i - 1;\n            if (index >= 0 && index < result.length) {\n                let prev = result[index];\n                let prevPrev = index - 1 >= 0 ? result[index - 1] : 0;\n                let next = index + 1 < result.length ? result[index + 1] : 0;\n                result.push(prev + prevPrev + next);\n            } else {\n                // If the indices are out of bounds, this should not happen in a correct sequence generation\n                console.log(\"Index out of bounds error\");\n            }\n        }\n    }\n    \n    return result;\n}\n\n// Example usage:\nconsole.log(tri(3)); // Output: [3, 2, 8]"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    // Convert the number to a string to easily iterate over its digits\n    let numStr = n.toString();\n    \n    // Initialize the product of odd digits\n    let product = 1;\n    \n    // Flag to check if there are any odd digits\n    let hasOddDigit = false;\n    \n    // Iterate over each character in the string representation of the number\n    for (let char of numStr) {\n        let digit = parseInt(char);\n        \n        // Check if the digit is odd\n        if (digit % 2 !== 0) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n    }\n    \n    // If there are no odd digits, return 0\n    if (!hasOddDigit) {\n        return 0;\n    }\n    \n    // Return the product of the odd digits\n    return product;\n}\n\n// Test cases\nconsole.log(digits(1));   // Output: 1\nconsole.log(digits(4));   // Output: 0\nconsole.log(digits(235)); // Output: 15"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n  // Initialize a stack to keep track of opening brackets\n  let stack = [];\n\n  // Iterate through each character in the string\n  for (let char of string) {\n    if (char === '[') {\n      // Push opening bracket onto the stack\n      stack.push(char);\n    } else if (char === ']') {\n      // Check if there's a corresponding opening bracket\n      if (stack.length > 0 && stack[stack.length - 1] === '[') {\n        // Pop the matching opening bracket from the stack\n        stack.pop();\n      } else {\n        // If no matching opening bracket, push this closing bracket onto the stack\n        stack.push(char);\n      }\n    }\n  }\n\n  // If there are any unmatched brackets left in the stack, return true\n  // Otherwise, return false as there are no nested brackets\n  return stack.length > 0;\n}\n\n// Test cases\nconsole.log(isNested('[[]]')); // True\nconsole.log(isNested('[]]]]]]][[[[[]')); // False\nconsole.log(isNested('[][]')); // False\nconsole.log(isNested('[]')); // False\nconsole.log(isNested('[[][]]')); // True\nconsole.log(isNested('[[]][[')); // True"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Step 1: Round each element to the nearest integer (ceiling)\n    let roundedList = lst.map(num => Math.ceil(num));\n    \n    // Step 2: Square each of the rounded elements\n    let squaredList = roundedList.map(num => num * num);\n    \n    // Step 3: Sum all the squared values\n    let sumSquares = squaredList.reduce((sum, num) => sum + num, 0);\n    \n    // Step 4: Return the sum\n    return sumSquares;\n}\n\n// Examples\nconsole.log(sumSquares([1,2,3])); // Output should be 14\nconsole.log(sumSquares([1,4,9])); // Output should be 98\nconsole.log(sumSquares([1,3,5,7])); // Output should be 84\nconsole.log(sumSquares([1.4,4.2,0])); // Output should be 29\nconsole.log(sumSquares([-2.4,1,1])); // Output should be 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // Check if the string is empty\n    if (txt.length === 0) {\n        return false;\n    }\n    \n    // Get the last character of the string\n    const lastChar = txt[txt.length - 1];\n    \n    // Check if the last character is a letter and not part of a word\n    if (/^[a-zA-Z]$/.test(lastChar)) {\n        // Check if the last character is followed by a space or end of string\n        const nextChar = txt[txt.length - 2];\n        if (nextChar === undefined || nextChar === ' ') {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"\")); // \u279e False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    // Iterate through the array from the end to the beginning\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    // If no such element is found, return -1\n    return -1;\n}\n\n// Examples\nconsole.log(canArrange([1, 2, 4, 3, 5])); // Output: 3\nconsole.log(canArrange([1, 2, 3])); // Output: -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    let a = null; // To store the largest negative integer\n    let b = null; // To store the smallest positive integer\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (a === null || num > a) {\n                a = num;\n            }\n        } else if (num > 0) {\n            if (b === null || num < b) {\n                b = num;\n            }\n        }\n    }\n\n    return [a, b];\n}\n\n// Examples:\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // Output: [null, 1]\nconsole.log(largestSmallestIntegers([])); // Output: [null, null]\nconsole.log(largestSmallestIntegers([0])); // Output: [null, null]"}
{"task_id": "javascript/64", "language": "javascript", "completion": "function specialFactorial(n) {\n    // Helper function to calculate the factorial of a given number\n    function factorial(num) {\n        if (num === 0 || num === 1) return 1;\n        let result = 1;\n        for (let i = 2; i <= num; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Initialize the result to 1 (since we are multiplying)\n    let result = 1;\n\n    // Calculate the factorial of each number from n down to 1 and multiply them together\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n\n    return result;\n}\n\n// Example usage:\nconsole.log(specialFactorial(4)); // Output: 288"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function wordsInSentence(sentence) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        for (let i = 2, sqrtNum = Math.sqrt(num); i <= sqrtNum; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Split the sentence into words\n    const words = sentence.split(' ');\n\n    // Filter words based on their lengths being prime numbers\n    const primeLengthWords = words.filter(word => isPrime(word.length));\n\n    // Join the filtered words back into a single string\n    return primeLengthWords.join(' ');\n}\n\n// Example usage:\nconsole.log(wordsInSentence(\"This is a test\")); // Output: \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Output: \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    // Helper function to parse the fraction string\n    function parseFraction(fractionStr) {\n        const [numerator, denominator] = fractionStr.split('/').map(Number);\n        return { numerator, denominator };\n    }\n\n    // Parse the input fractions\n    const xFrac = parseFraction(x);\n    const nFrac = parseFraction(n);\n\n    // Multiply the numerators and denominators\n    const resultNumerator = xFrac.numerator * nFrac.numerator;\n    const resultDenominator = xFrac.denominator * nFrac.denominator;\n\n    // Check if the result is a whole number\n    return (resultNumerator / resultDenominator) % 1 === 0;\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    return nums.slice().sort((a, b) => {\n        // Helper function to calculate the sum of digits of a number\n        const digitSum = (num) => Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n        \n        const sumA = digitSum(a);\n        const sumB = digitSum(b);\n        \n        // If the sums are equal, compare their original indices\n        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        \n        // Otherwise, sort by the sum of digits\n        return sumA - sumB;\n    });\n}\n\n// Test cases\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // Output: []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    // Helper function to check if a digit is odd\n    function isOddDigit(digit) {\n        return digit === 1 || digit === 3 || digit === 5 || digit === 7 || digit === 9;\n    }\n\n    // Helper function to get the first and last digits of a number\n    function getFirstAndLastDigits(num) {\n        let strNum = Math.abs(num).toString();\n        if (strNum.length < 2) return [false, false]; // Single-digit numbers are not considered\n        let firstDigit = parseInt(strNum[0]);\n        let lastDigit = parseInt(strNum[strNum.length - 1]);\n        return [isOddDigit(firstDigit), isOddDigit(lastDigit)];\n    }\n\n    // Filter the array based on the conditions\n    return nums.filter(num => {\n        if (num <= 10) return false; // Skip numbers less than or equal to 10\n        let [firstIsOdd, lastIsOdd] = getFirstAndLastDigits(num);\n        return firstIsOdd && lastIsOdd;\n    }).length;\n}\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    // Create the array based on the given formula\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a[i - 1] = i * i - i + 1;\n    }\n\n    let count = 0;\n\n    // Iterate through all possible triples (i, j, k) where i < j < k\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example usage:\nconsole.log(getMaxTriples(5)); // Output: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Get the indices of the given planets\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // Check if both planets are valid\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    \n    // Ensure index1 is less than index2 for easier slicing\n    const startIndex = Math.min(index1, index2);\n    const endIndex = Math.max(index1, index2);\n    \n    // Get the planets between the two indices (inclusive of start and end)\n    return planets.slice(startIndex + 1, endIndex).filter(planet => planet !== planet1 && planet !== planet2);\n}\n\n// Examples\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function xOrY(n, x, y) {\n    // Helper function to check if a number is prime\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num <= 3) return true;\n        \n        if (num % 2 === 0 || num % 3 === 0) return false;\n        \n        for (let i = 5; i * i <= num; i += 6) {\n            if (num % i === 0 || num % (i + 2) === 0) return false;\n        }\n        \n        return true;\n    }\n    \n    // Check if n is a prime number\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Examples\nconsole.log(xOrY(7, 34, 12)); // Output: 34\nconsole.log(xOrY(15, 8, 5));  // Output: 5"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    // Filter out negative numbers and non-integer numbers\n    let filteredList = lst.filter(num => Number.isInteger(num) && num >= 0);\n    \n    // Square each odd number and sum them up\n    let sumOfSquares = filteredList.reduce((sum, num) => {\n        if (num % 2 !== 0) {\n            return sum + Math.pow(num, 2);\n        } else {\n            return sum;\n        }\n    }, 0);\n    \n    return sumOfSquares;\n}\n\n// Test cases\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // Output: 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // Output: 0\nconsole.log(doubleTheDifference([9, -2])); // Output: 81\nconsole.log(doubleTheDifference([0])); // Output: 0"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    let maxStrength = -Infinity;\n    let strongestName = '';\n\n    for (let ext of extensions) {\n        let capCount = 0;\n        let smCount = 0;\n\n        // Calculate CAP and SM counts for the extension name\n        for (let char of ext) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n\n        // Calculate the strength of the extension\n        let strength = capCount - smCount;\n\n        // Update the strongest extension if this one is stronger\n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongestName = ext;\n        }\n    }\n\n    return `${classname}.${strongestName}`;\n}\n\n// Example usage:\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Output: 'Slices.SErviNGSliCes'\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Output: 'my_class.AA'"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Function to generate all rotations of a string\n    function getRotations(str) {\n        let rotations = [];\n        for (let i = 0; i < str.length; i++) {\n            let rotation = str.slice(i) + str.slice(0, i);\n            rotations.push(rotation);\n        }\n        return rotations;\n    }\n\n    // Get all rotations of the second word\n    let rotations = getRotations(b);\n\n    // Check if any rotation is a substring of the first word\n    for (let rotation of rotations) {\n        if (a.includes(rotation)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(cycpatternCheck(\"abcd\", \"abd\")); // False\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); // True\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); // False\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); // True\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); // False\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); // True"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    // Define the mapping of integers to their corresponding Roman numerals\n    const romanNumerals = [\n        { value: 1000, symbol: 'm' },\n        { value: 900, symbol: 'cm' },\n        { value: 500, symbol: 'd' },\n        { value: 400, symbol: 'cd' },\n        { value: 100, symbol: 'c' },\n        { value: 90, symbol: 'xc' },\n        { value: 50, symbol: 'l' },\n        { value: 40, symbol: 'xl' },\n        { value: 10, symbol: 'x' },\n        { value: 9, symbol: 'ix' },\n        { value: 5, symbol: 'v' },\n        { value: 4, symbol: 'iv' },\n        { value: 1, symbol: 'i' }\n    ];\n\n    let result = '';\n    \n    // Iterate through each Roman numeral mapping\n    for (const { value, symbol } of romanNumerals) {\n        while (number >= value) {\n            // Append the corresponding symbol to the result string\n            result += symbol;\n            // Subtract the value from the number\n            number -= value;\n        }\n    }\n    \n    // Return the resulting Roman numeral string in lowercase\n    return result.toLowerCase();\n}\n\n// Examples\nconsole.log(intToMiniRoman(19)); // 'xix'\nconsole.log(intToMiniRoman(152)); // 'clii'\nconsole.log(intToMiniRoman(426)); // 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // First, we need to identify which side could be the hypotenuse (the longest side).\n    let sides = [a, b, c].sort((x, y) => x - y);\n    \n    // Apply the Pythagorean theorem\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n\n// Test cases\nconsole.log(rightAngleTriangle(3, 4, 5)); // True\nconsole.log(rightAngleTriangle(1, 2, 3)); // False"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    // Check if the string contains any letters\n    const hasLetters = /[a-zA-Z]/.test(s);\n    \n    if (!hasLetters) {\n        // If no letters are found, reverse the entire string\n        return s.split('').reverse().join('');\n    } else {\n        // Split the string into an array of characters\n        let result = s.split('').map(char => {\n            // Check if the character is a letter\n            if (/[a-zA-Z]/.test(char)) {\n                // Reverse the case of the letter\n                return char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n            } else {\n                // Keep non-letter characters as they are\n                return char;\n            }\n        });\n        \n        // Join the array back into a string and return it\n        return result.join('');\n    }\n}\n\n// Examples\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\"));   // \"AB\"\nconsole.log(solve(\"#a@C\"));  // \"#A@c\""}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n  if (text === '') {\n    return \"none\";\n  }\n  \n  // Create a MD5 hash from the input text\n  const md5Hash = crypto.createHash('md5').update(text).digest('hex');\n  return mdreflection5Hash;\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Ensure a is less than or equal to b for simplicity\n    if (a > b) {\n        [a, b] = [b, a]; // Swap the values of a and b\n    }\n\n    const result = [];\n\n    // Iterate from a to b\n    for (let i = a; i <= b; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []"}

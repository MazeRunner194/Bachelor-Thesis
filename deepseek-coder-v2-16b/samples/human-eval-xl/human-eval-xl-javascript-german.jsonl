{"task_id": "javascript/0", "language": "javascript", "completion": "function belowZero(operations) {\n    let balance = 0; // Startsaldo des Kontos\n    \n    for (let operation of operations) {\n        balance += operation; // Aktualisiere das Guthaben basierend auf dem Vorgang\n        \n        if (balance < 0) {\n            return true; // Das Guthaben ist unter Null gefallen\n        }\n    }\n    \n    return false; // Das Guthaben blieb \u00fcberall positiv oder war nie negativ\n}\n\n// Testf\u00e4lle\nconsole.log(belowZero([1, 2, 3])); // False\nconsole.log(belowZero([1, 2, -4, 5])); // True"}
{"task_id": "javascript/1", "language": "javascript", "completion": "function sumProduct(numbers) {\n    if (numbers.length === 0) {\n        return [0, 1];\n    }\n    \n    let sum = 0;\n    let product = 1;\n    \n    for (let number of numbers) {\n        sum += number;\n        product *= number;\n    }\n    \n    return [sum, product];\n}\n\n// Testf\u00e4lle\nconsole.log(sumProduct([])); // (0, 1)\nconsole.log(sumProduct([1, 2, 3, 4])); // (10, 24)"}
{"task_id": "javascript/2", "language": "javascript", "completion": "function stringXor(a, b) {\n    // Stellen Sie sicher, dass beide Strings dieselbe L\u00e4nge haben\n    if (a.length !== b.length) {\n        throw new Error(\"Die Eingabestrings m\u00fcssen dieselbe L\u00e4nge haben.\");\n    }\n\n    let result = '';\n\n    // Durchlaufen Sie jedes Zeichen in den Strings und f\u00fchren Sie die XOR-Operation durch\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}\n\n// Beispielaufruf\nconsole.log(stringXor('010', '110')); // Ausgabe: '100'"}
{"task_id": "javascript/3", "language": "javascript", "completion": "function longest(strings) {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let maxLength = -1;\n    let longestString = '';\n\n    for (let str of strings) {\n        if (str.length > maxLength) {\n            maxLength = str.length;\n            longestString = str;\n        }\n    }\n\n    return longestString;\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "function greatestCommonDivisor(a, b) {\n    // Euklidischer Algorithmus zur Berechnung des gr\u00f6\u00dften gemeinsamen Teilers\n    while (b !== 0) {\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n// Beispielaufrufe\nconsole.log(greatestCommonDivisor(3, 5)); // Ausgabe: 1\nconsole.log(greatestCommonDivisor(25, 15)); // Ausgabe: 5"}
{"task_id": "javascript/5", "language": "javascript", "completion": "function sortNumbers(numbers) {\n    // Mapping of valid number words to their corresponding digits\n    const numberMap = {\n        'null': 0,\n        'eins': 1,\n        'zwei': 2,\n        'drei': 3,\n        'vier': 4,\n        'f\u00fcnf': 5,\n        'sechs': 6,\n        'sieben': 7,\n        'acht': 8,\n        'neun': 9\n    };\n\n    // Split the input string into an array of number words\n    const numberWords = numbers.split(' ');\n\n    // Map the number words to their corresponding digits using the numberMap\n    const numberDigits = numberWords.map(word => numberMap[word]);\n\n    // Sort the array of digits\n    numberDigits.sort((a, b) => a - b);\n\n    // Convert the sorted digits back to number words\n    const sortedNumberWords = numberDigits.map(digit => {\n        return Object.keys(numberMap).find(key => numberMap[key] === digit);\n    });\n\n    // Join the sorted number words into a single string and return it\n    return sortedNumberWords.join(' ');\n}\n\n// Example usage:\nconsole.log(sortNumbers('three one five')); // Output: 'one three five'"}
{"task_id": "javascript/6", "language": "javascript", "completion": "function rescaleToUnit(numbers) {\n    if (numbers.length < 2) {\n        throw new Error(\"Die Liste muss mindestens zwei Elemente enthalten.\");\n    }\n\n    // Finde den minimalen und maximalen Wert in der Liste\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\n    // Berechne die Skalierungsfaktoren f\u00fcr jede Zahl\n    return numbers.map(num => (num - min) / (max - min));\n}\n\n// Beispielaufruf\nconsole.log(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])); // [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "javascript/7", "language": "javascript", "completion": "function flipCase(string) {\n    let flippedString = '';\n    \n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n        \n        if (char === char.toLowerCase()) {\n            flippedString += char.toUpperCase();\n        } else {\n            flippedString += char.toLowerCase();\n        }\n    }\n    \n    return flippedString;\n}\n\n// Beispielaufruf\nconsole.log(flipCase('Hello')); // 'hELLO'"}
{"task_id": "javascript/8", "language": "javascript", "completion": "function getPositive(l) {\n    // Filter the list to include only positive numbers\n    return l.filter(number => number > 0);\n}\n\n// Test cases\nconsole.log(getPositive([-1, 2, -4, 5, 6])); // [2, 5, 6]\nconsole.log(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])); // [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "javascript/9", "language": "javascript", "completion": "function isPrime(n) {\n    // Check if n is less than 2\n    if (n <= 1) {\n        return false;\n    }\n    \n    // Check for even numbers greater than 2\n    if (n % 2 === 0 && n !== 2) {\n        return false;\n    }\n    \n    // Check for odd factors from 3 up to the square root of n\n    let sqrtN = Math.sqrt(n);\n    for (let i = 3; i <= sqrtN; i += 2) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    \n    // If no divisors were found, n is a prime number\n    return true;\n}\n\n// Test cases\nconsole.log(isPrime(6));    // False\nconsole.log(isPrime(101));  // True\nconsole.log(isPrime(11));   // True\nconsole.log(isPrime(13441));// True\nconsole.log(isPrime(61));   // True\nconsole.log(isPrime(4));    // False\nconsole.log(isPrime(1));    // False"}
{"task_id": "javascript/10", "language": "javascript", "completion": "function unique(l) {\n    // Sortiere die Liste aufsteigend\n    l = l.sort((a, b) => a - b);\n    \n    // Ergebnisliste mit eindeutigen Elementen\n    let result = [];\n    \n    for (let i = 0; i < l.length; i++) {\n        if (!result.includes(l[i])) {\n            result.push(l[i]);\n        }\n    }\n    \n    return result;\n}\n\n// Beispielaufruf\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])); // [0, 2, 3, 5, 9, 123]"}
{"task_id": "javascript/11", "language": "javascript", "completion": "// Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl prim ist\nfunction isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\n// Funktion zur Generierung der n-ten Fibonacci-Zahl\nfunction fibonacci(n) {\n    let a = 0, b = 1, c;\n    if (n <= 0) return 0;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\n// Hauptfunktion zur Suche der n-ten Fibonacci-Zahl, die eine Primzahl ist\nfunction primeFib(n) {\n    let count = 0;\n    let i = 0;\n    while (count < n) {\n        let fibNum = fibonacci(i);\n        if (isPrime(fibNum)) {\n            count++;\n        }\n        if (count < n) {\n            i++;\n        }\n    }\n    return fibonacci(i);\n}\n\n// Testf\u00e4lle\nconsole.log(primeFib(1)); // 2\nconsole.log(primeFib(2)); // 3\nconsole.log(primeFib(3)); // 5\nconsole.log(primeFib(4)); // 13\nconsole.log(primeFib(5)); // 89"}
{"task_id": "javascript/12", "language": "javascript", "completion": "function triplesSumToZero(l) {\n    // Wenn die Liste weniger als 3 Elemente hat, kann es keine L\u00f6sung geben\n    if (l.length < 3) {\n        return false;\n    }\n    \n    // Sortiere die Liste aufsteigend\n    l.sort((a, b) => a - b);\n    \n    // Durchlaufe die Liste mit drei verschiedenen Indizes\n    for (let i = 0; i < l.length - 2; i++) {\n        let left = i + 1;\n        let right = l.length - 1;\n        \n        while (left < right) {\n            let sum = l[i] + l[left] + l[right];\n            \n            if (sum === 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    // Wenn keine L\u00f6sung gefunden wurde, gib False zur\u00fcck\n    return false;\n}\n\n// Testf\u00e4lle\nconsole.log(triplesSumToZero([1, 3, 5, 0])); // False\nconsole.log(triplesSumToZero([1, 3, -2, 1])); // True\nconsole.log(triplesSumToZero([1, 2, 3, 7])); // False\nconsole.log(triplesSumToZero([2, 4, -5, 3, 9, 7])); // True\nconsole.log(triplesSumToZero([1])); // False"}
{"task_id": "javascript/13", "language": "javascript", "completion": "function pairsSumToZero(l) {\n    // Eine Menge verwenden, um schnell pr\u00fcfen zu k\u00f6nnen, ob ein Element vorhanden ist\n    const seen = new Set();\n    \n    for (let num of l) {\n        if (seen.has(-num)) {\n            return true; // Wenn das negative von num in der Liste ist, geben wir True zur\u00fcck\n        }\n        seen.add(num); // F\u00fcgen Sie das aktuelle Element zur Menge hinzu\n    }\n    \n    return false; // Wenn keine Paare gefunden wurden, die sich zu 0 addieren, geben wir False zur\u00fcck\n}\n\n// Testf\u00e4lle\nconsole.log(pairsSumToZero([1, 3, 5, 0])); // False\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // False\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // False\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7])); // True\nconsole.log(pairsSumToZero([1])); // False"}
{"task_id": "javascript/14", "language": "javascript", "completion": "function fib4(n) {\n    if (n === 0 || n === 1) return 0;\n    if (n === 2) return 2;\n    if (n === 3) return 0;\n\n    // Initialisiere ein Array zur Speicherung der berechneten Werte\n    let fib4Array = [0, 0, 2, 0];\n\n    // Berechne die Werte von n bis 4 aufw\u00e4rts\n    for (let i = 4; i <= n; i++) {\n        fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n    }\n\n    // Gebe das n-te Element der Folge zur\u00fcck\n    return fib4Array[n];\n}\n\n// Testf\u00e4lle\nconsole.log(fib4(5)); // 4\nconsole.log(fib4(6)); // 8\nconsole.log(fib4(7)); // 14"}
{"task_id": "javascript/15", "language": "javascript", "completion": "function median(l) {\n    // Sortiere die Liste\n    l.sort((a, b) => a - b);\n    \n    const n = l.length;\n    if (n % 2 === 1) {\n        // Wenn die Anzahl der Elemente ungerade ist, gib das mittlere Element zur\u00fcck\n        return l[Math.floor(n / 2)];\n    } else {\n        // Wenn die Anzahl der Elemente gerade ist, berechne das arithmetische Mittel der zwei mittleren Elemente\n        const mid1 = l[n / 2 - 1];\n        const mid2 = l[n / 2];\n        return (mid1 + mid2) / 2;\n    }\n}\n\n// Testf\u00e4lle\nconsole.log(median([3, 1, 2, 4, 5])); // 3\nconsole.log(median([-10, 4, 6, 1000, 10, 20])); // 15.0"}
{"task_id": "javascript/16", "language": "javascript", "completion": "function isPalindrome(text) {\n    // Entferne alle nicht-alphanumerischen Zeichen und wandle den Text in Kleinbuchstaben um\n    const cleanText = text.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    \n    // Vergleiche den gereinigten Text mit seiner Umkehrung\n    return cleanText === cleanText.split('').reverse().join('');\n}\n\n// Testf\u00e4lle\nconsole.log(isPalindrome(''));         // True\nconsole.log(isPalindrome('aba'));      // True\nconsole.log(isPalindrome('aaaaa'));    // True\nconsole.log(isPalindrome('zbcd'));     // False"}
{"task_id": "javascript/17", "language": "javascript", "completion": "function removeVowels(text) {\n    // Definieren der Vokale in JavaScript verwenden wir regul\u00e4re Ausdr\u00fccke\n    const vowels = 'aeiouAEIOU';\n    let result = '';\n    \n    for (let char of text) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    \n    return result;\n}\n\n// Testf\u00e4lle\nconsole.log(removeVowels('')); // ''\nconsole.log(removeVowels(\"abcdef\\nghijklm\")); // 'bcdf\\nghjklm'\nconsole.log(removeVowels('abcdef')); // 'bcdf'\nconsole.log(removeVowels('aaaaa')); // ''\nconsole.log(removeVowels('aaBAA')); // 'B'\nconsole.log(removeVowels('zbcd')); // 'zbcd'"}
{"task_id": "javascript/18", "language": "javascript", "completion": "function belowThreshold(l, t) {\n    // Durchlaufen Sie die Liste l und pr\u00fcfen Sie jede Zahl darauf, ob sie kleiner als t ist.\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >= t) {\n            // Wenn eine Zahl gr\u00f6\u00dfer oder gleich t gefunden wird, geben Sie False zur\u00fcck.\n            return false;\n        }\n    }\n    // Wenn keine Zahl gr\u00f6\u00dfer oder gleich t gefunden wird, geben Sie True zur\u00fcck.\n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(belowThreshold([1, 2, 4, 10], 100)); // True\nconsole.log(belowThreshold([1, 20, 4, 10], 5));   // False"}
{"task_id": "javascript/19", "language": "javascript", "completion": "/**\n * Addiere zwei Zahlen x und y.\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\nfunction add(x, y) {\n    return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "function sameChars(s0, s1) {\n    // Wandeln Sie beide Strings in Listen von Zeichen um\n    let chars0 = s0.split('');\n    let chars1 = s1.split('');\n    \n    // Sortieren Sie die Listen\n    chars0.sort();\n    chars1.sort();\n    \n    // Vergleichen Sie die sortierten Listen\n    for (let i = 0; i < Math.max(chars0.length, chars1.length); i++) {\n        if (chars0[i] !== chars1[i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')); // True\nconsole.log(sameChars('abcd', 'dddddddabc')); // True\nconsole.log(sameChars('dddddddabc', 'abcd')); // True\nconsole.log(sameChars('eabcd', 'dddddddabc')); // False\nconsole.log(sameChars('abcd', 'dddddddabce')); // False\nconsole.log(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')); // False"}
{"task_id": "javascript/21", "language": "javascript", "completion": "function fib(n) {\n    if (n <= 0) {\n        return 0; // Fibonacci-Zahl f\u00fcr n = 0 ist 0\n    } else if (n === 1) {\n        return 1; // Fibonacci-Zahl f\u00fcr n = 1 ist 1\n    } else {\n        return fib(n - 1) + fib(n - 2); // Rekursiver Aufruf f\u00fcr die vorherigen beiden Zahlen\n    }\n}\n\n// Beispielaufrufe\nconsole.log(fib(10)); // 55\nconsole.log(fib(1));  // 1\nconsole.log(fib(8));  // 21"}
{"task_id": "javascript/22", "language": "javascript", "completion": "function common(l1, l2) {\n    // Konvertiere die Listen in Sets um Duplikate zu entfernen\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    \n    // Finde die Schnittmenge der beiden Sets\n    const intersection = [...set1].filter(x => set2.has(x));\n    \n    // Sortiere die gemeinsamen Elemente und gib sie zur\u00fcck\n    return intersection.sort((a, b) => a - b);\n}\n\n// Beispielaufrufe\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nconsole.log(common([5, 3, 2, 8], [3, 2])); // [2, 3]"}
{"task_id": "javascript/23", "language": "javascript", "completion": "function largestPrimeFactor(n) {\n    let maxPrime = -1; // Initialisiere den gr\u00f6\u00dften Primfaktor mit -1\n    \n    // Solange n gerade ist, teile durch 2\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n /= 2;\n    }\n    \n    // \u00dcberpr\u00fcfe die ungeraden Zahlen von 3 bis zur Wurzel von n\n    for (let i = 3; i * i <= n; i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    \n    // Wenn n eine Primzahl gr\u00f6\u00dfer als 2 ist, dann ist der gr\u00f6\u00dfte Primfaktor n selbst\n    if (n > 2) {\n        maxPrime = n;\n    }\n    \n    return maxPrime;\n}\n\n// Test Cases\nconsole.log(largestPrimeFactor(13195)); // 29\nconsole.log(largestPrimeFactor(2048));   // 2"}
{"task_id": "javascript/24", "language": "javascript", "completion": "function sumToN(n) {\n    return (n * (n + 1)) / 2;\n}\n\n// Test cases\nconsole.log(sumToN(30)); // 465\nconsole.log(sumToN(100)); // 5050\nconsole.log(sumToN(5)); // 15\nconsole.log(sumToN(10)); // 55\nconsole.log(sumToN(1)); // 1"}
{"task_id": "javascript/25", "language": "javascript", "completion": "function derivative(xs) {\n    // Leere Liste f\u00fcr die Ergebnisse\n    let result = [];\n    \n    // Durchlaufe die Koeffizientenliste\n    for (let i = 1; i < xs.length; i++) {\n        // Multipliziere den Koeffizienten mit der Potenz von x und f\u00fcge das Ergebnis zur Ergebnisliste hinzu\n        result.push(xs[i] * i);\n    }\n    \n    return result;\n}\n\n// Testf\u00e4lle\nconsole.log(derivative([3, 1, 2, 4, 5])); // [1, 4, 12, 20]\nconsole.log(derivative([1, 2, 3]));        // [2, 6]"}
{"task_id": "javascript/26", "language": "javascript", "completion": "function fibfib(n) {\n    // Array zur Speicherung der bereits berechneten Werte\n    let dp = new Array(n + 1).fill(-1);\n    \n    // Basisf\u00e4lle definieren\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n    \n    // Rekursive Funktion zur Berechnung der FibFib-Zahlenfolge\n    function fibfibHelper(n) {\n        if (dp[n] !== -1) {\n            return dp[n];\n        }\n        \n        // Wert berechnen und in das Array speichern\n        dp[n] = fibfibHelper(n - 1) + fibfibHelper(n - 2) + fibfibHelper(n - 3);\n        return dp[n];\n    }\n    \n    // Funktion aufrufen\n    return fibfibHelper(n);\n}\n\n// Testf\u00e4lle\nconsole.log(fibfib(1)); // 0\nconsole.log(fibfib(5)); // 4\nconsole.log(fibfib(8)); // 24"}
{"task_id": "javascript/27", "language": "javascript", "completion": "function vowelsCount(s) {\n  // Liste der Vokale (inklusive 'y' f\u00fcr den Sonderfall am Ende des Wortes)\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  // Initialisieren Sie einen Z\u00e4hler f\u00fcr die Vokale\n  let count = 0;\n  \n  // Durchlaufen Sie jeden Buchstaben im String\n  for (let char of s.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n// Beispielaufrufe\nconsole.log(vowelsCount(\"abcde\")); // 2\nconsole.log(vowelsCount(\"ACEDY\")); // 3"}
{"task_id": "javascript/28", "language": "javascript", "completion": "function search(lst) {\n    // Erstellen eines Dictionaries f\u00fcr H\u00e4ufigkeiten\n    let frequency = {};\n    \n    // Durchlaufen der Liste und Aktualisieren der H\u00e4ufigkeiten\n    for (let num of lst) {\n        if (!frequency[num]) {\n            frequency[num] = 1;\n        } else {\n            frequency[num]++;\n        }\n    }\n    \n    // Finden der gr\u00f6\u00dften Zahl mit H\u00e4ufigkeit >= der Zahl selbst\n    let result = -1;\n    for (let num in frequency) {\n        if (parseInt(num) <= frequency[num]) {\n            result = Math.max(result, parseInt(num));\n        }\n    }\n    \n    return result;\n}\n\n// Beispiele\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1"}
{"task_id": "javascript/29", "language": "javascript", "completion": "function triangleArea(a, b, c) {\n    // \u00dcberpr\u00fcfen, ob die drei Seiten ein g\u00fcltiges Dreieck bilden\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    \n    // Berechnen des halben Umfangs s\n    let s = (a + b + c) / 2;\n    \n    // Berechnen der Fl\u00e4che mit der Formel von Heron\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    \n    // Runden auf 2 Dezimalstellen\n    return parseFloat(area.toFixed(2));\n}\n\n// Beispiele\nconsole.log(triangleArea(3, 4, 5)); // 6.00\nconsole.log(triangleArea(1, 2, 10)); // -1"}
{"task_id": "javascript/30", "language": "javascript", "completion": "function willItFly(q, w) {\n    // \u00dcberpr\u00fcfen, ob q eine palindromische Liste ist\n    let isPalindrome = (arr) => arr.slice(0, Math.floor(arr.length / 2)).join('') === arr.slice(-Math.floor(arr.length / 2)).reverse().join('');\n    \n    // \u00dcberpr\u00fcfen, ob die Summe der Elemente kleiner oder gleich w ist\n    let sum = q.reduce((acc, val) => acc + val, 0);\n    \n    return isPalindrome(q) && sum <= w;\n}\n\n// Testf\u00e4lle\nconsole.log(willItFly([1, 2], 5)); // False\nconsole.log(willItFly([3, 2, 3], 1)); // False\nconsole.log(willItFly([3, 2, 3], 9)); // True\nconsole.log(willItFly([3], 5)); // True"}
{"task_id": "javascript/31", "language": "javascript", "completion": "function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nfunction isMultiplyPrime(a) {\n    // Wir \u00fcberpr\u00fcfen, ob a kleiner als 100 ist\n    if (a >= 100) return false;\n\n    for (let i = 2; i * i <= a; i++) {\n        if (a % i === 0) {\n            let j = a / i;\n            for (let k = 2; k * k <= j; k++) {\n                if (j % k === 0 && isPrime(k) && isPrime(j / k)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n// Beispieltest\nconsole.log(isMultiplyPrime(30)); // True, da 30 = 2 * 3 * 5"}
{"task_id": "javascript/32", "language": "javascript", "completion": "function decimalToBinary(decimal) {\n    // Wandle die Dezimalzahl in eine Bin\u00e4rzahl um\n    let binary = decimal.toString(2);\n    \n    // F\u00fcge die zus\u00e4tzlichen 'db' Zeichen am Anfang und Ende hinzu\n    return `db${binary}db`;\n}\n\n// Beispiele\nconsole.log(decimalToBinary(15));  // \"db1111db\"\nconsole.log(decimalToBinary(32));  // \"db100000db\""}
{"task_id": "javascript/33", "language": "javascript", "completion": "function isHappy(s) {\n    // \u00dcberpr\u00fcfen, ob die L\u00e4nge des Strings mindestens 3 betr\u00e4gt\n    if (s.length < 3) {\n        return false;\n    }\n\n    // Schleife \u00fcber den String, um Gruppen von drei aufeinanderfolgenden Buchstaben zu pr\u00fcfen\n    for (let i = 0; i <= s.length - 3; i++) {\n        let group = s.substring(i, i + 3);\n        // \u00dcberpr\u00fcfen, ob die Gruppe von drei aufeinanderfolgenden Buchstaben unterschiedlich ist\n        if (new Set(group).size !== 3) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Testf\u00e4lle\nconsole.log(isHappy(\"a\")); // False\nconsole.log(isHappy(\"aa\")); // False\nconsole.log(isHappy(\"abcd\")); // True\nconsole.log(isHappy(\"aabb\")); // False\nconsole.log(isHappy(\"adb\")); // True\nconsole.log(isHappy(\"xyy\")); // False"}
{"task_id": "javascript/34", "language": "javascript", "completion": "function numericalLetterGrade(grades) {\n    return grades.map(grade => {\n        if (grade === 4.0) return 'A+';\n        if (grade > 3.7) return 'A';\n        if (grade > 3.3) return 'A-';\n        if (grade > 3.0) return 'B+';\n        if (grade > 2.7) return 'B';\n        if (grade > 2.3) return 'B-';\n        if (grade > 2.0) return 'C+';\n        if (grade > 1.7) return 'C';\n        if (grade > 1.3) return 'C-';\n        if (grade > 1.0) return 'D+';\n        if (grade > 0.7) return 'D';\n        if (grade > 0.0) return 'D-';\n        return 'E';\n    });\n}\n\n// Beispielaufruf\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "javascript/35", "language": "javascript", "completion": "function primeLength(string) {\n    // Funktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist\n    function isPrime(num) {\n        if (num <= 1) return false;\n        if (num === 2) return true;\n        for (let i = 2; i * i <= num; i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Pr\u00fcfen, ob die L\u00e4nge des Strings eine Primzahl ist\n    const length = string.length;\n    return isPrime(length);\n}\n\n// Testf\u00e4lle\nconsole.log(primeLength('Hello'));      // True\nconsole.log(primeLength('abcdcba'));    // True\nconsole.log(primeLength('kittens'));    // True\nconsole.log(primeLength('orange'));     // False"}
{"task_id": "javascript/36", "language": "javascript", "completion": "function solve(n) {\n    // Wandle die Zahl N zu einer bin\u00e4ren Zeichenkette um\n    let binaryString = n.toString(2);\n    \n    // Initialisiere die Summe der Ziffern\n    let sum = 0;\n    \n    // Durchlaufe jede Ziffer in der bin\u00e4ren Zeichenkette und addiere sie zur Summe\n    for (let char of binaryString) {\n        sum += parseInt(char, 10);\n    }\n    \n    // Wandle die Summe zu einer bin\u00e4ren Zeichenkette um und gebe sie zur\u00fcck\n    return sum.toString(2);\n}\n\n// Beispielaufrufe\nconsole.log(solve(1000)); // Ausgabe: \"1\"\nconsole.log(solve(150));  // Ausgabe: \"110\"\nconsole.log(solve(147));  // Ausgabe: \"1100\""}
{"task_id": "javascript/37", "language": "javascript", "completion": "function getRow(lst, x) {\n    let result = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    for (let rowIndex = 0; rowIndex < lst.length; rowIndex++) {\n        for (let colIndex = 0; colIndex < lst[rowIndex].length; colIndex++) {\n            if (lst[rowIndex][colIndex] === x) {\n                result.push([rowIndex, colIndex]);\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen und dann nach Spalten in absteigender Reihenfolge\n    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]; // Sortieren nach Spalten in absteigender Reihenfolge\n        } else {\n            return a[0] - b[0]; // Sortieren nach Zeilen in aufsteigender Reihenfolge\n        }\n    });\n    \n    return result;\n}\n\n// Beispiele\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nconsole.log(getRow([], 1)); // == []\n\nconsole.log(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]"}
{"task_id": "javascript/38", "language": "javascript", "completion": "function nextSmallest(lst) {\n    if (lst.length < 2) {\n        return null;\n    }\n    \n    // Sortiere die Liste aufsteigend\n    lst.sort((a, b) => a - b);\n    \n    // Das zweite Element ist das zweitkleinste\n    return lst[1];\n}\n\n// Testf\u00e4lle\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // 2\nconsole.log(nextSmallest([])); // null\nconsole.log(nextSmallest([1, 1])); // null"}
{"task_id": "javascript/39", "language": "javascript", "completion": "function isBored(s) {\n    // Teilen Sie den String in S\u00e4tze auf, indem Sie '.' , '?' und '!' entfernen\n    const sentences = s.split(/[.!?]/);\n    \n    let count = 0;\n    \n    // Durchlaufen Sie jeden Satz\n    for (let sentence of sentences) {\n        // Entfernen Sie f\u00fchrende und nachfolgende Leerzeichen\n        sentence = sentence.trim();\n        \n        // \u00dcberpr\u00fcfen Sie, ob der Satz mit \"Ich\" beginnt\n        if (sentence.startsWith(\"Ich\")) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Beispiele\nconsole.log(isBored(\"Hello world\")); // 0\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1"}
{"task_id": "javascript/40", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 === 0 || num % 3 === 0) return false;\n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction digitSum(num) {\n    let sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num = Math.floor(num / 10);\n    }\n    return sum;\n}\n\nfunction skjkasdkd(lst) {\n    let maxPrime = -1;\n    for (let num of lst) {\n        if (isPrime(num) && num > maxPrime) {\n            maxPrime = num;\n        }\n    }\n    if (maxPrime === -1) return 0; // Wenn keine Primzahl gefunden wurde, geben wir 0 zur\u00fcck\n    return digitSum(maxPrime);\n}\n\n// Beispieltests\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7"}
{"task_id": "javascript/41", "language": "javascript", "completion": "function checkDictCase(dict) {\n    // Pr\u00fcfen, ob das W\u00f6rterbuch leer ist\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    let allLowerCase = true;\n    let allUpperCase = true;\n\n    for (let key in dict) {\n        if (typeof key !== 'string') {\n            // Wenn ein Schl\u00fcssel kein String ist, sollten wir False zur\u00fcckgeben\n            return false;\n        }\n        if (!key.match(/^[a-z]+$/)) {\n            allLowerCase = false;\n        }\n        if (!key.match(/^[A-Z]+$/)) {\n            allUpperCase = false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n}\n\n// Testf\u00e4lle\nconsole.log(checkDictCase({\"a\":\"apple\", \"b\":\"banana\"})); // True\nconsole.log(checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})); // False\nconsole.log(checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})); // False\nconsole.log(checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})); // False\nconsole.log(checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\"})); // True"}
{"task_id": "javascript/42", "language": "javascript", "completion": "function closestInteger(value) {\n    // Parse the string to a float number\n    let num = parseFloat(value);\n    \n    // Check if the parsed number is equal to its integer part\n    if (num === Math.floor(num)) {\n        return Math.floor(num);\n    } else {\n        // Use Math.round to round towards the nearest integer, then check again for equality\n        let rounded = Math.round(num);\n        if (rounded === Math.floor(num)) {\n            return Math.floor(num);\n        } else {\n            return rounded;\n        }\n    }\n}\n\n// Test cases\nconsole.log(closestInteger(\"10\")); // 10\nconsole.log(closestInteger(\"15.3\")); // 15\nconsole.log(closestInteger(\"14.5\")); // 15\nconsole.log(closestInteger(\"-14.5\")); // -15"}
{"task_id": "javascript/43", "language": "javascript", "completion": "function makeAPile(n) {\n    let pile = [];\n    for (let i = 0; i < n; i++) {\n        if (i === 0) {\n            pile.push(n); // Die erste Ebene hat n Steine\n        } else {\n            if (pile[i - 1] % 2 === 0) {\n                // Wenn die vorherige Ebene gerade ist, nehmen wir die n\u00e4chste ungerade Zahl\n                pile.push(pile[i - 1] + 1);\n            } else {\n                // Wenn die vorherige Ebene ungerade ist, nehmen wir die n\u00e4chste gerade Zahl\n                pile.push(pile[i - 1] + 1);\n            }\n        }\n    }\n    return pile;\n}\n\n// Beispiele:\nconsole.log(makeAPile(3)); // [3, 5, 7]"}
{"task_id": "javascript/44", "language": "javascript", "completion": "function wordsString(s) {\n    // Ersetzen Sie alle Kommas und Leerzeichen durch ein einzelnes Leerzeichen, um sicherzustellen, dass jedes Wort getrennt ist.\n    let wordsArray = s.replace(/[, ]+/g, ' ').trim().split(' ');\n    return wordsArray;\n}\n\n// Beispielaufrufe\nconsole.log(wordsString(\"Hi, my name is John\")); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "javascript/45", "language": "javascript", "completion": "function chooseNum(x, y) {\n    // \u00dcberpr\u00fcfen, ob x und y positive Zahlen sind\n    if (typeof x !== 'number' || typeof y !== 'number' || x <= 0 || y <= 0) {\n        return -1;\n    }\n\n    // Wenn x gr\u00f6\u00dfer als y ist, geben wir -1 zur\u00fcck\n    if (x > y) {\n        return -1;\n    }\n\n    // Starten bei der gr\u00f6\u00dferen der beiden Zahlen und gehen r\u00fcckw\u00e4rts bis zur kleineren Zahl\n    for (let i = Math.max(x, y); i >= Math.min(x, y); i--) {\n        if (i % 2 === 0) {\n            return i; // Wir finden die gr\u00f6\u00dfte gerade Zahl im Bereich [x, y]\n        }\n    }\n\n    // Wenn keine gerade Zahl gefunden wird, geben wir -1 zur\u00fcck\n    return -1;\n}\n\n// Beispiele\nconsole.log(chooseNum(12, 15)); // Ausgabe: 14\nconsole.log(chooseNum(13, 12)); // Ausgabe: -1"}
{"task_id": "javascript/46", "language": "javascript", "completion": "function roundedAvg(n, m) {\n    if (n > m) {\n        return -1;\n    }\n    \n    // Berechnen der Summe von n bis m\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    \n    // Berechnen des Durchschnitts und runden auf die n\u00e4chste Ganzzahl\n    let avg = Math.round(sum / (m - n + 1));\n    \n    // Konvertieren in bin\u00e4r mit \"0b\" als Pr\u00e4fix\n    return `0b${avg.toString(2)}`;\n}\n\n// Beispiele\nconsole.log(roundedAvg(1, 5)); // \"0b11\"\nconsole.log(roundedAvg(7, 5)); // -1\nconsole.log(roundedAvg(10, 20)); // \"0b1111\"\nconsole.log(roundedAvg(20, 33)); // \"0b11010\""}
{"task_id": "javascript/47", "language": "javascript", "completion": "function f(n) {\n    let result = [];\n    \n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            // Berechne Fakult\u00e4t von i\n            let factorial = 1;\n            for (let j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result.push(factorial);\n        } else {\n            // Berechne Summe von 1 bis i\n            let sum = 0;\n            for (let j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result.push(sum);\n        }\n    }\n    \n    return result;\n}\n\n// Beispielaufruf\nconsole.log(f(5)); // [1, 2, 6, 24, 15]"}
{"task_id": "javascript/48", "language": "javascript", "completion": "function evenOddPalindrome(n) {\n    // Helper function to check if a number is a palindrome\n    function isPalindrome(num) {\n        const str = num.toString();\n        return str === str.split('').reverse().join('');\n    }\n\n    let evenCount = 0;\n    let oddCount = 0;\n\n    // Loop through all numbers from 1 to n\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n\n// Beispiel 1:\nconsole.log(evenOddPalindrome(3)); // Ausgabe: (1, 2)\n\n// Beispiel 2:\nconsole.log(evenOddPalindrome(12)); // Ausgabe: (4, 6)"}
{"task_id": "javascript/49", "language": "javascript", "completion": "def moveOneBall(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    # Wir verschieben das Array um eine Position nach rechts und pr\u00fcfen, ob es sortiert ist.\n    for shift in range(n):\n        shifted_arr = arr[shift:] + arr[:shift]\n        if is_sorted(shifted_arr):\n            return True\n    \n    return False\n\ndef is_sorted(arr):\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\n# Beispiele\nprint(moveOneBall([3, 4, 5, 1, 2]))  # True\nprint(moveOneBall([3, 5, 4, 1, 2]))  # False"}
{"task_id": "javascript/50", "language": "javascript", "completion": "function exchange(lst1, lst2) {\n    // Hilfsfunktion, um zu pr\u00fcfen, ob eine Zahl gerade ist\n    function isEven(num) {\n        return num % 2 === 0;\n    }\n\n    // Pr\u00fcfen, ob alle Elemente in lst1 gerade sind\n    let allEven = lst1.every(isEven);\n\n    if (allEven) {\n        return \"YES\";\n    } else {\n        // Z\u00e4hlen der ungeraden Elemente in lst1 und der geraden Elemente in lst2\n        let oddCountInLst1 = lst1.filter(num => !isEven(num)).length;\n        let evenCountInLst2 = lst2.filter(num => isEven(num)).length;\n\n        // Wenn es genug gerade Elemente in lst2 gibt, um die ungeraden Elemente in lst1 zu ersetzen, geben wir \"YES\" zur\u00fcck\n        if (oddCountInLst1 <= evenCountInLst2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n\n// Beispiele\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\""}
{"task_id": "javascript/51", "language": "javascript", "completion": "function reverseDelete(s, c) {\n    // Entferne alle Zeichen aus s, die auch in c vorkommen\n    let result = '';\n    for (let char of s) {\n        if (!c.includes(char)) {\n            result += char;\n        }\n    }\n    \n    // \u00dcberpr\u00fcfe, ob die resultierende Zeichenkette ein Palindrom ist\n    let isPalindrome = false;\n    if (result.length > 0) {\n        let reversedResult = result.split('').reverse().join('');\n        isPalindrome = (result === reversedResult);\n    } else {\n        // Wenn die resultierende Zeichenkette leer ist, ist sie immer ein Palindrom\n        isPalindrome = true;\n    }\n    \n    return [result, isPalindrome];\n}\n\n// Beispieltests\nconsole.log(reverseDelete(\"abcde\", \"ae\")); // ['bcd', False]\nconsole.log(reverseDelete(\"abcdef\", \"b\")); // ['acdef', False]\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\")); // ['cdedc', True]"}
{"task_id": "javascript/52", "language": "javascript", "completion": "function maxFill(grid, capacity) {\n    let totalBuckets = 0;\n    \n    for (let row of grid) {\n        let waterUnits = 0;\n        for (let cell of row) {\n            if (cell === 1) {\n                waterUnits++;\n            }\n        }\n        // Berechnen der notwendigen Eimer f\u00fcr diese Zeile\n        totalBuckets += Math.ceil(waterUnits / capacity);\n    }\n    \n    return totalBuckets;\n}\n\n// Beispiel 1:\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)); // Ausgabe: 6\n\n// Beispiel 2:\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)); // Ausgabe: 5\n\n// Beispiel 3:\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5)); // Ausgabe: 0"}
{"task_id": "javascript/53", "language": "javascript", "completion": "function selectWords(s, n) {\n    // Wenn die Zeichenkette leer ist, geben wir eine leere Liste zur\u00fcck\n    if (s.length === 0) return [];\n\n    // Definieren der Vokale\n    const vowels = 'aeiouAEIOU';\n\n    // Tokenisierung der Zeichenkette in W\u00f6rter\n    const words = s.split(' ');\n\n    // Filterung der W\u00f6rter nach Konsonantenzahl\n    const result = [];\n    for (const word of words) {\n        let consonantCount = 0;\n        for (const char of word) {\n            if (!vowels.includes(char)) {\n                consonantCount++;\n            }\n        }\n        if (consonantCount === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}\n\n// Beispiele\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]"}
{"task_id": "javascript/54", "language": "javascript", "completion": "function maximum(arr, k) {\n    // Sortiere das Array in absteigender Reihenfolge\n    arr.sort((a, b) => b - a);\n    \n    // Extrahiere die ersten k Elemente aus dem sortierten Array\n    return arr.slice(0, k).sort((a, b) => a - b); // Zur\u00fcck in aufsteigender Reihenfolge sortieren\n}\n\n// Beispiel 1\nconsole.log(maximum([-3, -4, 5], 3)); // Ausgabe: [-4, -3, 5]\n\n// Beispiel 2\nconsole.log(maximum([4, -4, 4], 2)); // Ausgabe: [4, 4]\n\n// Beispiel 3\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)); // Ausgabe: [2]"}
{"task_id": "javascript/55", "language": "javascript", "completion": "function addElements(arr, k) {\n    let sum = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    \n    return sum;\n}\n\n// Beispiel:\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)); // Ausgabe: 24"}
{"task_id": "javascript/56", "language": "javascript", "completion": "function intersection(interval1, interval2) {\n    // Extrahieren der Start- und Endwerte der Intervalle\n    const [start1, end1] = interval1;\n    const [start2, end2] = interval2;\n    \n    // Bestimmen des Schnitts der beiden Intervalle\n    const startSchnitt = Math.max(start1, start2);\n    const endSchnitt = Math.min(end1, end2);\n    \n    // Wenn sich die Intervalle nicht \u00fcberschneiden\n    if (startSchnitt > endSchnitt) {\n        return \"NO\";\n    }\n    \n    // Berechnen der L\u00e4nge des Schnitts\n    const laengeSchnitt = endSchnitt - startSchnitt + 1;\n    \n    // \u00dcberpr\u00fcfen, ob die L\u00e4nge eine Primzahl ist\n    if (istPrimzahl(laengeSchnitt)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Hilfsfunktion zur \u00dcberpr\u00fcfung, ob eine Zahl eine Primzahl ist\nfunction istPrimzahl(num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    \n    if (num % 2 === 0 || num % 3 === 0) return false;\n    \n    for (let i = 5; i * i <= num; i += 6) {\n        if (num % i === 0 || num % (i + 2) === 0) return false;\n    }\n    \n    return true;\n}\n\n// Beispielaufrufe\nconsole.log(intersection((1, 2), (2, 3))); // \"NO\"\nconsole.log(intersection((-1, 1), (0, 4))); // \"NO\"\nconsole.log(intersection((-3, -1), (-5, 5))); // \"YES\""}
{"task_id": "javascript/57", "language": "javascript", "completion": "function tri(n) {\n    // Erstellen eines Arrays zur Speicherung der Tribonacci-Folge\n    let sequence = new Array(n + 1);\n    \n    // Initialisieren der ersten Werte der Folge\n    sequence[0] = 1; // tri(0) ist nicht definiert, aber wir setzen es willk\u00fcrlich auf 1\n    if (n >= 1) sequence[1] = 3;\n    \n    // Berechnung der Folge f\u00fcr jedes n von 2 bis n\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            // F\u00fcr gerade i: 1 + i / 2\n            sequence[i] = 1 + i / 2;\n        } else {\n            // F\u00fcr ungerade i: tri(i - 1) + tri(i - 2) + tri(i + 1)\n            sequence[i] = sequence[i - 1] + sequence[i - 2] + (i + 1 <= n ? sequence[i + 1] : 0);\n        }\n    }\n    \n    return sequence;\n}\n\n// Beispielaufruf:\nconsole.log(tri(3)); // Ausgabe: [1, 3, 2, 8]"}
{"task_id": "javascript/58", "language": "javascript", "completion": "function digits(n) {\n    // Wandeln Sie die Zahl in eine Zeichenkette um\n    let str = n.toString();\n    \n    // Initialisieren Sie das Produkt mit 1 (da wir multiplizieren werden)\n    let product = 1;\n    \n    // Durchlaufen Sie jede Ziffer der Zeichenkette\n    for (let char of str) {\n        let digit = parseInt(char);\n        \n        // \u00dcberpr\u00fcfen, ob die Ziffer ungerade ist\n        if (digit % 2 !== 0) {\n            product *= digit;\n        }\n    }\n    \n    // Wenn das Produkt nach dem Durchlaufen aller Ziffern immer noch 1 ist,\n    // bedeutet dies, dass alle Ziffern gerade waren. In diesem Fall geben wir 0 zur\u00fcck.\n    return product === 1 ? 0 : product;\n}\n\n// Testf\u00e4lle\nconsole.log(digits(1));   // 1\nconsole.log(digits(4));   // 0\nconsole.log(digits(235)); // 15"}
{"task_id": "javascript/59", "language": "javascript", "completion": "function isNested(string) {\n    // Stack to keep track of opening brackets\n    let stack = [];\n    \n    for (let char of string) {\n        if (char === '[') {\n            // Push opening bracket onto the stack\n            stack.push(char);\n        } else if (char === ']') {\n            // If we find a closing bracket, check if there's a corresponding opening bracket in the stack\n            if (stack.length > 0) {\n                stack.pop(); // Remove the matching opening bracket from the stack\n            } else {\n                // If no corresponding opening bracket is found, it means the string is not nested properly\n                return false;\n            }\n        }\n    }\n    \n    // The stack should be empty if all brackets are matched correctly\n    return stack.length === 0;\n}\n\n// Test cases\nconsole.log(isNested('[[]]')); // True\nconsole.log(isNested('[]]]]]]][[[[[]')); // False\nconsole.log(isNested('[][]')); // False\nconsole.log(isNested('[]')); // False\nconsole.log(isNested('[[][]]')); // True\nconsole.log(isNested('[[]][[')); // True"}
{"task_id": "javascript/60", "language": "javascript", "completion": "function sumSquares(lst) {\n    // Runden Sie jedes Element auf die n\u00e4chste Ganzzahl (ceiling)\n    let roundedList = lst.map(Math.ceil);\n    \n    // Quadrieren Sie jeden gerundeten Wert und summieren Sie sie\n    let sumOfSquares = roundedList.reduce((sum, num) => sum + num * num, 0);\n    \n    return sumOfSquares;\n}\n\n// Beispiele\nconsole.log(sumSquares([1,2,3])); // Ausgabe: 14\nconsole.log(sumSquares([1,4,9])); // Ausgabe: 98\nconsole.log(sumSquares([1,3,5,7])); // Ausgabe: 84\nconsole.log(sumSquares([1.4,4.2,0])); // Ausgabe: 29\nconsole.log(sumSquares([-2.4,1,1])); // Ausgabe: 6"}
{"task_id": "javascript/61", "language": "javascript", "completion": "function checkIfLastCharIsALetter(txt) {\n    // \u00dcberpr\u00fcfen, ob der String leer ist\n    if (txt === \"\") {\n        return false;\n    }\n    \n    // Letztes Zeichen des Strings extrahieren\n    let lastChar = txt[txt.length - 1];\n    \n    // \u00dcberpr\u00fcfen, ob das letzte Zeichen ein alphabetisches Zeichen ist\n    if (/^[a-zA-Z]$/.test(lastChar)) {\n        // Jetzt m\u00fcssen wir sicherstellen, dass es kein Teil eines Wortes ist\n        // Dazu \u00fcberpr\u00fcfen wir, ob das letzte Zeichen von hinten aus ein Leerzeichen ist\n        if (txt.slice(-2).includes(\" \")) {\n            return false;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\n// Testf\u00e4lle\nconsole.log(checkIfLastCharIsALetter(\"apple pie\")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"apple pi e\")); // \u279e True\nconsole.log(checkIfLastCharIsALetter(\"apple pi e \")); // \u279e False\nconsole.log(checkIfLastCharIsALetter(\"\")); // \u279e False"}
{"task_id": "javascript/62", "language": "javascript", "completion": "function canArrange(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// Beispiele\nconsole.log(canArrange([1, 2, 4, 3, 5])); // Ausgabe: 3\nconsole.log(canArrange([1, 2, 3]));       // Ausgabe: -1"}
{"task_id": "javascript/63", "language": "javascript", "completion": "function largestSmallestIntegers(lst) {\n    if (lst.length === 0) {\n        return [null, null];\n    }\n\n    let maxNegative = null;\n    let minPositive = null;\n\n    for (let num of lst) {\n        if (num < 0) {\n            if (maxNegative === null || num > maxNegative) {\n                maxNegative = num;\n            }\n        } else if (num > 0) {\n            if (minPositive === null || num < minPositive) {\n                minPositive = num;\n            }\n        }\n    }\n\n    return [maxNegative, minPositive];\n}\n\n// Beispiele:\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7])); // [null, 1]\nconsole.log(largestSmallestIntegers([])); // [null, null]\nconsole.log(largestSmallestIntegers([0])); // [null, null]"}
{"task_id": "javascript/64", "language": "javascript", "completion": "special_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!"}
{"task_id": "javascript/65", "language": "javascript", "completion": "function isPrime(num) {\n    if (num <= 1) return false;\n    for (let i = 2; i * i <= num; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nfunction wordsInSentence(sentence) {\n    const words = sentence.split(' ');\n    const resultWords = [];\n    \n    for (const word of words) {\n        if (isPrime(word.length)) {\n            resultWords.push(word);\n        }\n    }\n    \n    return resultWords.join(' ');\n}\n\n// Beispiel 1\nconsole.log(wordsInSentence(\"This is a test\")); // Ausgabe: \"is\"\n\n// Beispiel 2\nconsole.log(wordsInSentence(\"lets go for swimming\")); // Ausgabe: \"go for\""}
{"task_id": "javascript/66", "language": "javascript", "completion": "function simplify(x, n) {\n    // Hilfsfunktion zur Berechnung des gr\u00f6\u00dften gemeinsamen Teilers (GCD)\n    function gcd(a, b) {\n        while (b !== 0) {\n            let temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    // Funktion zur Umwandlung eines Bruchs in eine Dezimalzahl\n    function fractionToDecimal(fraction) {\n        const [numerator, denominator] = fraction.split('/').map(Number);\n        return numerator / denominator;\n    }\n\n    // Parse die gegebenen Bruchzahlen\n    const xDec = fractionToDecimal(x);\n    const nDec = fractionToDecimal(n);\n\n    // Multipliziere die beiden Dezimalzahlen\n    const result = xDec * nDec;\n\n    // \u00dcberpr\u00fcfe, ob das Ergebnis eine ganze Zahl ist\n    return Number.isInteger(result);\n}\n\n// Testf\u00e4lle\nconsole.log(simplify(\"1/5\", \"5/1\")); // True\nconsole.log(simplify(\"1/6\", \"2/1\")); // False\nconsole.log(simplify(\"7/10\", \"10/2\")); // False"}
{"task_id": "javascript/67", "language": "javascript", "completion": "function orderByPoints(nums) {\n    // Hilfsfunktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits(num) {\n        return Math.abs(num).toString().split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    }\n\n    // Sortieren der Liste basierend auf der Summe der Ziffern und dann nach dem Index\n    return nums.map((num, index) => ({ num, index })).sort((a, b) => {\n        const sumA = sumOfDigits(a.num);\n        const sumB = sumOfDigits(b.num);\n        if (sumA === sumB) {\n            return a.index - b.index;\n        } else {\n            return sumA - sumB;\n        }\n    }).map(item => item.num);\n}\n\n// Beispieltests\nconsole.log(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nconsole.log(orderByPoints([])); // []"}
{"task_id": "javascript/68", "language": "javascript", "completion": "function specialFilter(nums) {\n    // Filter the array to include only numbers greater than 10 and whose first and last digits are odd\n    return nums.filter(num => num > 10 && isOddDigit(num[0]) && isOddDigit(num[num.length - 1])).length;\n}\n\n// Helper function to check if a digit is odd\nfunction isOddDigit(digit) {\n    // Convert the digit to an integer and check if it's odd\n    return Math.abs(digit) % 2 !== 0;\n}\n\n// Test cases\nconsole.log(specialFilter([15, -73, 14, -15])); // Output: 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // Output: 2"}
{"task_id": "javascript/69", "language": "javascript", "completion": "function getMaxTriples(n) {\n    // Erstellen Sie das Array a mit den Werten i * i - i + 1 f\u00fcr jedes i von 1 bis n\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n\n    // Initialisieren Sie die Anzahl der g\u00fcltigen Tripel\n    let count = 0;\n\n    // Durchlaufen Sie alle m\u00f6glichen Tripel (i, j, k) mit i < j < k\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n// Beispieltestfall\nconsole.log(getMaxTriples(5)); // Ausgabe: 1"}
{"task_id": "javascript/70", "language": "javascript", "completion": "function bf(planet1, planet2) {\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    \n    // Pr\u00fcfen, ob die Planetennamen korrekt sind\n    if (!planets.includes(planet1) || !planets.includes(planet2)) {\n        return [];\n    }\n    \n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n    \n    // Stellen Sie sicher, dass index1 kleiner als index2 ist\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n    \n    // Alle Planeten zwischen den Indizes finden\n    const result = planets.slice(index1 + 1, index2).filter(planet => planet !== undefined);\n    \n    return result;\n}\n\n// Beispiele\nconsole.log(bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\nconsole.log(bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\nconsole.log(bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]"}
{"task_id": "javascript/71", "language": "javascript", "completion": "function isPrime(n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    \n    // This is checked so that we can skip middle five numbers in below loop\n    if (n % 2 === 0 || n % 3 === 0) return false;\n    \n    for (let i = 5; i * i <= n; i += 6) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n    }\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\n// Beispiele:\nconsole.log(xOrY(7, 34, 12)); // sollte 7 zur\u00fcckgeben, da 7 eine Primzahl ist\nconsole.log(xOrY(15, 8, 5));  // sollte 5 zur\u00fcckgeben, da 15 keine Primzahl ist"}
{"task_id": "javascript/72", "language": "javascript", "completion": "function doubleTheDifference(lst) {\n    // Wenn die Liste leer ist, gib 0 zur\u00fcck\n    if (lst.length === 0) return 0;\n\n    // Filter die Zahlen, um nur ungerade und positive Zahlen zu ber\u00fccksichtigen\n    let filteredList = lst.filter(num => num > 0 && num % 2 !== 0);\n\n    // Berechne die Summe der Quadrate der gefilterten Zahlen\n    let sumOfSquares = filteredList.reduce((sum, num) => sum + (num * num), 0);\n\n    return sumOfSquares;\n}\n\n// Testf\u00e4lle\nconsole.log(doubleTheDifference([1, 3, 2, 0])); // 10\nconsole.log(doubleTheDifference([-1, -2, 0])); // 0\nconsole.log(doubleTheDifference([9, -2])); // 81\nconsole.log(doubleTheDifference([0])); // 0"}
{"task_id": "javascript/73", "language": "javascript", "completion": "function strongestExtension(classname, extensions) {\n    // Funktion zur Berechnung der St\u00e4rke einer Erweiterung\n    function calculateStrength(extensionName) {\n        let capCount = 0;\n        let smCount = 0;\n        \n        for (let char of extensionName.toUpperCase()) {\n            if (char >= 'A' && char <= 'Z') {\n                capCount++;\n            } else if (char >= 'a' && char <= 'z') {\n                smCount++;\n            }\n        }\n        \n        return capCount - smCount;\n    }\n    \n    // Initialisierung der Variablen f\u00fcr die st\u00e4rkste Erweiterung\n    let strongest = '';\n    let maxStrength = Number.NEGATIVE_INFINITY;\n    \n    for (let extension of extensions) {\n        let strength = calculateStrength(extension);\n        \n        if (strength > maxStrength) {\n            maxStrength = strength;\n            strongest = extension;\n        }\n    }\n    \n    return `${classname}.${strongest}`;\n}\n\n// Beispielaufrufe\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // Ausgabe: 'my_class.AA'\nconsole.log(strongestExtension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])); // Ausgabe: 'Slices.SErviNGSliCes'"}
{"task_id": "javascript/74", "language": "javascript", "completion": "function cycpatternCheck(a, b) {\n    // Wenn b l\u00e4nger ist als a, kann es keine Teilstring sein\n    if (b.length > a.length) return false;\n    \n    // Erstellen einer Funktion, um eine Rotation von b zu erzeugen\n    function isRotation(str1, str2) {\n        // Wenn die L\u00e4nge der beiden Strings nicht gleich ist, k\u00f6nnen sie keine Rotationen voneinander sein\n        if (str1.length !== str2.length) return false;\n        \n        // Verdoppeln von str2 und pr\u00fcfen, ob str1 in diesem verdoppelten String enthalten ist\n        let doubled = str2 + str2;\n        return doubled.includes(str1);\n    }\n    \n    // \u00dcberpr\u00fcfen aller Rotationen von b, ob einer davon ein Teilstring von a ist\n    for (let i = 0; i < b.length; i++) {\n        let rotation = b.slice(i) + b.slice(0, i);\n        if (isRotation(a, rotation)) return true;\n    }\n    \n    // Wenn keine Rotation ein Teilstring von a ist, geben wir false zur\u00fcck\n    return false;\n}\n\n// Testf\u00e4lle\nconsole.log(cycpatternCheck(\"abcd\",\"abd\")); // False\nconsole.log(cycpatternCheck(\"hello\",\"ell\")); // True\nconsole.log(cycpatternCheck(\"whassup\",\"psus\")); // False\nconsole.log(cycpatternCheck(\"abab\",\"baa\")); // True\nconsole.log(cycpatternCheck(\"efef\",\"eeff\")); // False\nconsole.log(cycpatternCheck(\"himenss\",\"simen\")); // True"}
{"task_id": "javascript/75", "language": "javascript", "completion": "function intToMiniRoman(number) {\n    if (number <= 0 || number > 1000) {\n        throw new Error(\"Die Zahl muss zwischen 1 und 1000 liegen.\");\n    }\n\n    const romanNumerals = [\n        { value: 1000, numeral: 'm' },\n        { value: 900, numeral: 'cm' },\n        { value: 500, numeral: 'd' },\n        { value: 400, numeral: 'cd' },\n        { value: 100, numeral: 'c' },\n        { value: 90, numeral: 'xc' },\n        { value: 50, numeral: 'l' },\n        { value: 40, numeral: 'xl' },\n        { value: 10, numeral: 'x' },\n        { value: 9, numeral: 'ix' },\n        { value: 5, numeral: 'v' },\n        { value: 4, numeral: 'iv' },\n        { value: 1, numeral: 'i' }\n    ];\n\n    let result = '';\n\n    for (const { value, numeral } of romanNumerals) {\n        while (number >= value) {\n            number -= value;\n            result += numeral.toLowerCase();\n        }\n    }\n\n    return result;\n}\n\n// Beispiele:\nconsole.log(intToMiniRoman(19)); // 'xix'\nconsole.log(intToMiniRoman(152)); // 'clii'\nconsole.log(intToMiniRoman(426)); // 'cdxxvi'"}
{"task_id": "javascript/76", "language": "javascript", "completion": "function rightAngleTriangle(a, b, c) {\n    // Sortiere die Seitenl\u00e4ngen, um sicherzustellen, dass a die kleinste und c die gr\u00f6\u00dfte ist\n    let sides = [a, b, c].sort((x, y) => x - y);\n    \n    // \u00dcberpr\u00fcfe, ob das Quadrat der gr\u00f6\u00dften Seite gleich der Summe der Quadrate der kleineren beiden Seiten ist\n    return Math.pow(sides[2], 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2);\n}\n\n// Beispiele:\nconsole.log(rightAngleTriangle(3, 4, 5)); // True\nconsole.log(rightAngleTriangle(1, 2, 3)); // False"}
{"task_id": "javascript/77", "language": "javascript", "completion": "function solve(s) {\n    // Pr\u00fcfen, ob der String nur nicht-buchst\u00e4bliche Zeichen enth\u00e4lt\n    if (!/[a-zA-Z]/.test(s)) {\n        return s.split('').reverse().join('');\n    }\n    \n    // Umwandeln des Strings in ein Array von Zeichen und umkehren der Buchstaben\n    let result = s.split('').map(char => {\n        if (/[a-z]/.test(char)) {\n            return char.toUpperCase();\n        } else if (/[A-Z]/.test(char)) {\n            return char.toLowerCase();\n        } else {\n            return char;\n        }\n    });\n    \n    // Den resultierenden Array wieder in einen String umwandeln\n    return result.join('');\n}\n\n// Beispiele\nconsole.log(solve(\"1234\")); // \"4321\"\nconsole.log(solve(\"ab\"));   // \"AB\"\nconsole.log(solve(\"#a@C\")); // \"#A@c\""}
{"task_id": "javascript/78", "language": "javascript", "completion": "const crypto = require('crypto');\n\nfunction stringToMd5(text) {\n    if (text === '') {\n        return null;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\n// Beispielaufruf\nconsole.log(stringToMd5('Hello world')); // Ausgabe: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "javascript/79", "language": "javascript", "completion": "function generateIntegers(a, b) {\n    // Stellen Sie sicher, dass a kleiner oder gleich b ist\n    if (a > b) {\n        [a, b] = [b, a]; // Tausche die Werte von a und b, wenn a gr\u00f6\u00dfer als b ist\n    }\n\n    const result = [];\n\n    for (let i = a; i <= b; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n\n// Beispielaufrufe\nconsole.log(generateIntegers(2, 8)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // [2, 4, 6, 8]\nconsole.log(generateIntegers(10, 14)); // []"}

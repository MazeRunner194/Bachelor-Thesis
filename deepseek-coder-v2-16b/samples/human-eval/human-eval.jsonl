{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()  # Sort the list to make it easier to find close elements\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    stack = []\n    result = []\n    current_group = []\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            # Push the index onto the stack to track the corresponding closing parenthesis\n            stack.append(i)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                # Pop from the stack to match the opening parenthesis\n                stack.pop()\n                current_group.append(char)\n                # If the stack is empty, we have a complete group\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Use floor division to get the integer part\n    integer_part = int(number)\n    # Subtract the integer part from the original number to get the fractional part\n    fractional_part = number - integer_part\n    return fractional_part\n\n# Test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))       # Output: False\nprint(below_zero([1, 2, -4, 5]))   # Output: True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average | x - x_mean |\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return 0.0\n    \n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(numbers)\n    \n    return mad\n\n# Example usage:\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output should be 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimiter)\n        result.append(number)\n    \n    return result\n\n# Test cases\nprint(intersperse([], 4))  # Output: []\nprint(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting_level = 0\n        current_level = 0\n        \n        for char in group:\n            if char == '(':\n                current_level += 1\n                if current_level > max_nesting_level:\n                    max_nesting_level = current_level\n            elif char == ')':\n                current_level -= 1\n        \n        results.append(max_nesting_level)\n    \n    return results\n\n# Test the function with an example\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:  # Check if the list is empty\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    rolling_max_values = [numbers[0]]\n    \n    for num in numbers[1:]:\n        current_max = max(rolling_max_values[-1], num)\n        rolling_max_values.append(current_max)\n    \n    return rolling_max_values"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:  # If the input string is empty, return an empty string\n        return ''\n    \n    for i in range(len(string)):\n        substring = string[i:]\n        if is_palindrome(substring):\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, simply reverse the entire string and append it to the original string\n    return string + string[::-1]\n\n# Test cases\nprint(make_palindrome(''))      # Output: ''\nprint(make_palindrome('cat'))   # Output: 'catac'\nprint(make_palindrome('cata'))  # Output: 'catac'"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    result = []\n    for bit_a, bit_b in zip(a, b):\n        xor_result = int(bit_a) ^ int(bit_b)\n        result.append(str(xor_result))\n    \n    return ''.join(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(string_xor('010', '110'))  # Output should be '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_length = -1\n    longest_string = None\n    \n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_string = s\n            \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to make the comparison case-insensitive\n    lower_string = string.lower()\n    # Use a set to store distinct characters\n    distinct_chars = set()\n    for char in lower_string:\n        distinct_chars.add(char)\n    return len(distinct_chars)\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output should be 3\nprint(count_distinct_characters('Jerry'))   # Output should be 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Create a list to store the beat values\n    beats = []\n    \n    # Define the mapping from note representation to beat value\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Iterate over each note and convert it to its corresponding beat value\n    for note in notes:\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n    \n    return beats\n\n# Example usage\nif __name__ == \"__main__\":\n    print(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    index = 0\n    \n    while True:\n        index = string.find(substring, index) + 1\n        if index > 0:\n            count += 1\n        else:\n            break\n    \n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # Expected output: 0\nprint(how_many_times('aaa', 'a'))  # Expected output: 3\nprint(how_many_times('aaaa', 'aa'))  # Expected output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Mapping from word representations to their corresponding integer values\n    number_to_digit = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    word_list = numbers.split()\n    \n    # Convert each word to its corresponding integer value\n    digit_list = [number_to_digit[word] for word in word_list]\n    \n    # Sort the list of integers\n    sorted_digits = sorted(digit_list)\n    \n    # Convert the sorted integers back to their word representations\n    sorted_words = [str(digit) for digit in sorted_digits]\n    \n    # Join the sorted words into a space-delimited string and return it\n    return ' '.join(sorted_words)\n\n# Test the function\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[0] - sorted_numbers[1])\n    \n    for i in range(1, len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i] - sorted_numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Handle the case where all numbers are the same, to avoid division by zero\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    rescaled_values = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return rescaled_values\n\n# Example usage\nif __name__ == \"__main__\":\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n % 2 == 0:\n        return n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return n // i\n    return 1  # If no divisors are found (only happens if n is prime and greater than 2)\n\n# Test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    \n    factors = []\n    # Start with the smallest prime number, which is 2\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    \n    return factors\n\n# Test cases\nprint(factorize(8))   # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string\n\n# Example usage:\nprint(flip_case('Hello'))  # Output: 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\n# Example usage:\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    # Check if n is less than 2, which means it's not a prime number\n    if n <= 1:\n        return False\n    # Only need to check up to the square root of n for potential factors\n    for i in range(2, int(n**0.5) + 1):\n        # If n is divisible by any number other than 1 and itself, it's not prime\n        if n % i == 0:\n            return False\n    # If no divisors were found, n is a prime number\n    return True\n\n# Test cases\nprint(is_prime(6))      # False\nprint(is_prime(101))    # True\nprint(is_prime(11))     # True\nprint(is_prime(13441))  # True\nprint(is_prime(61))     # True\nprint(is_prime(4))      # False\nprint(is_prime(1))      # False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n\n    def poly_derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs[1:], start=1)]\n\n    # Initial guess using the largest non-zero coefficient as a starting point\n    if xs[0] != 0:\n        x0 = -xs[0] / xs[1]\n    else:\n        raise ValueError(\"The list of coefficients must have at least one non-zero element.\")\n\n    # Newton-Raphson iteration\n    tolerance = 1e-7\n    max_iterations = 1000\n    for _ in range(max_iterations):\n        p = poly(xs, x0)\n        dp = sum([coeff * math.pow(x0, i - 1) * (i) for i, coeff in enumerate(xs[1:], start=2)])\n        x1 = x0 - p / dp\n        if abs(x1 - x0) < tolerance:\n            return x1\n        x0 = x1\n\n    raise ValueError(\"The method did not converge to a solution.\")\n\n# Test cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\n    print(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    third_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    third_elements.sort()\n    \n    # Create a new list to store the result\n    l_prime = l[:]\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    for i, val in enumerate(third_elements):\n        l_prime[i * 3] = val\n    \n    return l_prime\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))\n\n# Example usage\nif __name__ == \"__main__\":\n    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)\n\n# Test cases\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and str(i).count('7') > 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Expected output: 0\nprint(fizz_buzz(78))  # Expected output: 2\nprint(fizz_buzz(79))  # Expected output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract elements at even indices\n    evens = [l[i] for i in range(len(l)) if i % 2 == 0]\n    \n    # Sort the extracted elements\n    evens.sort()\n    \n    # Create a new list to hold the result\n    sorted_list = l[:]\n    \n    # Replace the elements at even indices with the sorted ones\n    for idx, value in enumerate(evens):\n        sorted_list[idx * 2] = value\n    \n    return sorted_list\n\n# Test cases\nprint(sort_even([1, 2, 3]))          # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))       # Output: [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split the string into groups of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cyclic shift for each group\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)\n\n# Example usage:\nencoded = encode_cyclic(\"hello world\")\nprint(f\"Encoded: {encoded}\")\ndecoded = decode_cyclic(encoded)\nprint(f\"Decoded: {decoded}\")"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci(n):\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number that is also prime.\"\"\"\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # If the list has less than 3 elements, it's impossible to have three distinct elements summing to zero.\n    if len(l) < 3:\n        return False\n    \n    # Sort the list for efficient checking of duplicates and possible solutions\n    l.sort()\n    \n    # Iterate through the list to check all combinations of three different elements\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * 2\n\n# Example usage:\nprint(car_race_collision(3))  # Output should be 6 (3 from left to right and 3 from right to left)"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))          # Output: [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    \n    digits = \"0123456789\"\n    result = \"\"\n    \n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    \n    return result\n\n# Test cases\nprint(change_base(8, 3))   # Output should be '22'\nprint(change_base(8, 2))   # Output should be '1000'\nprint(change_base(7, 2))   # Output should be '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(b, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * b * h\n\n# Example usage:\nprint(triangle_area(5, 3))  # Output should be 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the list with the base cases\n    fib_sequence = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively up to n\n    for i in range(4, n + 1):\n        next_value = fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3] + fib_sequence[i - 4]\n        fib_sequence.append(next_value)\n    \n    return fib_sequence[n]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        # If odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If even, return the average of the two middle elements\n        mid1 = sorted_list[(n // 2) - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))         # Output: 3.0\nprint(median([-10, 4, 6, 1000, 10, 20])) # Output: 7.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    # Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]\n\n# Test cases\nprint(is_palindrome(''))        # True\nprint(is_palindrome('aba'))     # True\nprint(is_palindrome('aaaaa'))   # True\nprint(is_palindrome('zbcd'))    # False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n\n# Test cases\nprint(modp(3, 5))       # Expected output: 3\nprint(modp(1101, 101))  # Expected output: 2\nprint(modp(0, 101))     # Expected output: 1\nprint(modp(3, 11))      # Expected output: 8\nprint(modp(100, 101))   # Expected output: 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nprint(remove_vowels(''))  # ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))  # 'bcdf'\nprint(remove_vowels('aaaaa'))  # ''\nprint(remove_vowels('aaBAA'))  # 'B'\nprint(remove_vowels('zbcd'))  # 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(item < t for item in l)\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # Should return True\nprint(below_threshold([1, 20, 4, 10], 5))   # Should return False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    Args:\n        x (int): The first number to be added.\n        y (int): The second number to be added.\n    \n    Returns:\n        int: The sum of the two numbers.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))               # True\nprint(same_chars('dddddddabc', 'abcd'))               # True\nprint(same_chars('eabcd', 'dddddddabc'))             # False\nprint(same_chars('abcd', 'dddddddabce'))              # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer.\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n# Test cases\nprint(fib(10))  # Output: 34\nprint(fib(1))   # Output: 0\nprint(fib(8))   # Output: 13"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))          # False\nprint(correct_bracketing(\"<>\"))         # True\nprint(correct_bracketing(\"<<><>>\"))     # True\nprint(correct_bracketing(\"><<>\"))       # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    if len(l) <= 2:\n        return True  # Any list of length 1 or 2 is trivially monotonic\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert both lists to sets\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Start with the smallest prime factor, which is 2\n    while n % 2 == 0:\n        n //= 2\n    \n    # Now check for odd factors starting from 3\n    largest_factor = 1\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n        i += 2\n    \n    # If n is still greater than 1, then it must be a prime number itself\n    if n > 1:\n        return n\n    \n    return largest_factor\n\n# Test cases\nprint(largest_prime_factor(13195))  # Expected output: 29\nprint(largest_prime_factor(2048))   # Expected output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))\n\n# Test cases\nif __name__ == \"__main__\":\n    print(sum_to_n(30))  # Expected: 465\n    print(sum_to_n(100)) # Expected: 5050\n    print(sum_to_n(5))   # Expected: 15\n    print(sum_to_n(10))  # Expected: 55\n    print(sum_to_n(1))   # Expected: 1"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            else:\n                stack.pop()\n    \n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))       # False\nprint(correct_bracketing(\"()\"))      # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))    # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 1:\n        return []\n    \n    # Compute the derivative by shifting and scaling coefficients\n    result = [(i + 1) * xs[i + 1] for i in range(len(xs) - 1)]\n    return result\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the list with base cases\n    fibfib_list = [0] * (n + 1)\n    fibfib_list[2] = 1\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        fibfib_list[i] = fibfib_list[i - 1] + fibfib_list[i - 2] + fibfib_list[i - 3]\n    \n    return fibfib_list[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))          # Expected output: 2\nprint(vowels_count(\"ACEDY\"))          # Expected output: 3\nprint(vowels_count(\"hello\"))          # Expected output: 2\nprint(vowels_count(\"world\"))          # Expected output: 1\nprint(vowels_count(\"rhythm\"))         # Expected output: 0\nprint(vowels_count(\"sky\"))            # Expected output: 1\nprint(vowels_count(\"banana\"))         # Expected output: 3\nprint(vowels_count(\"programming\"))    # Expected output: 3\nprint(vowels_count(\"beautiful\"))      # Expected output: 4\nprint(vowels_count(\"algorithm\"))      # Expected output: 3\nprint(vowels_count(\"python\"))         # Expected output: 1\nprint(vowels_count(\"code\"))           # Expected output: 2\nprint(vowels_count(\"example\"))        # Expected output: 3\nprint(vowels_count(\"testcase\"))       # Expected output: 3\nprint(vowels_count(\"inputoutput\"))    # Expected output: 4"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_num = str(x)\n    length = len(str_num)\n    \n    if length == 0:\n        return \"\"\n    \n    shift = shift % length\n    \n    shifted_part = str_num[-shift:]\n    remaining_part = str_num[:-shift]\n    \n    result = shifted_part + remaining_part\n    return result\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    def is_upper(c):\n        return 'A' <= c <= 'Z'\n    \n    total_sum = 0\n    for char in s:\n        if is_upper(char):\n            total_sum += ord(char)\n    \n    return total_sum\n\n# Test cases\nprint(digitSum(\"\")) # => 0\nprint(digitSum(\"abAB\")) # => 131\nprint(digitSum(\"abcCd\")) # => 67\nprint(digitSum(\"helloE\")) # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    # Use regular expression to find all occurrences of \"apples\" and \"oranges\" with their quantities\n    apples = re.findall(r'(\\d+)\\s*apples', s)\n    oranges = re.findall(r'(\\d+)\\s*oranges', s)\n    \n    # Convert the found strings to integers, defaulting to 0 if no match is found\n    apples_count = int(apples[0]) if apples else 0\n    oranges_count = int(oranges[0]) if oranges else 0\n    \n    # Calculate and return the number of mango fruits\n    mangoes = n - apples_count - oranges_count\n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # -> 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # -> 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # -> 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # -> 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:  # Check if the array is empty\n        return []\n    \n    min_even = float('inf')  # Initialize the minimum even value to a large number\n    index_of_min_even = -1  # Initialize the index of the minimum even value to an invalid index\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:  # Check if the number is even and smaller than the current minimum\n            min_even = num\n            index_of_min_even = i\n    \n    if index_of_min_even == -1:  # If no even numbers were found, return an empty list\n        return []\n    \n    return [min_even, index_of_min_even]  # Return the result as a list containing the minimum even value and its index\n\n# Test cases\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))         # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # Step 1: Count the frequency of each integer\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Step 2: Iterate through the integers and check the condition\n    result = -1\n    for num, count in freq_dict.items():\n        if count >= num:\n            result = max(result, num)\n    \n    return result\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:  # If the list is empty, return an empty list\n        return []\n    \n    sorted_lst = sorted(lst)  # Sort the list to easily find min and max values\n    result = []\n    low, high = 0, len(sorted_lst) - 1  # Pointers for minimums (low) and maximums (high)\n    \n    while low <= high:\n        if low == high:  # If there's one element left, add it to the result\n            result.append(sorted_lst[low])\n        else:  # Add both min and max values to the result alternately\n            result.append(sorted_lst[low])\n            result.append(sorted_lst[high])\n        low += 1\n        high -= 1\n    \n    return result\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1\n\n# Example usage:\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10)) # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    # Check if the list is a palindrome\n    is_balanced = is_palindrome(q)\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Return True if it's balanced and the total weight is less than or equal to w, False otherwise\n    return is_balanced and total_weight <= w\n\n# Example usage:\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    \n    # Use two pointers to compare elements from the start and end of the array\n    left, right = 0, n - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6])) # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1])) # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def char_count(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = char_count(lst1)\n    count2 = char_count(lst2)\n    \n    if count1 < count2:\n        return lst1\n    elif count2 < count1:\n        return lst2\n    else:\n        return lst1  # or lst2, since they are equal\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_prime_factors(n):\n    \"\"\"Find all prime factors of a number.\"\"\"\n    primes = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0 and is_prime(i):\n            primes.append(i)\n            n //= i\n    if n > 1 and is_prime(n):\n        primes.append(n)\n    return primes\n\ndef is_multiply_prime(a):\n    \"\"\"Check if the number is a product of exactly three prime numbers.\"\"\"\n    prime_factors = find_prime_factors(a)\n    # Check if there are exactly three prime factors\n    if len(prime_factors) == 3 and (prime_factors[0] * prime_factors[1] * prime_factors[2] == a):\n        return True\n    else:\n        return False\n\n# Examples\nprint(is_multiply_prime(30))  # True, because 30 = 2 * 3 * 5\nprint(is_multiply_prime(60))  # False, because 60 = 2 * 2 * 3 * 5 (more than three factors)\nprint(is_multiply_prime(105)) # True, because 105 = 3 * 5 * 7"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif n == 1 and x != 1:\n        return False\n    \n    original_x = x\n    k = 0\n    while abs(n**k - x) <= 1e-9:  # Using a small tolerance to check for equality\n        if abs(n**k - x) <= 1e-9:\n            return True\n        k += 1\n    return False\n\n# Test cases\nprint(is_simple_power(1, 4))  # true\nprint(is_simple_power(2, 2))  # true\nprint(is_simple_power(8, 2))  # true\nprint(is_simple_power(3, 2))  # false\nprint(is_simple_power(3, 1))  # false\nprint(is_simple_power(5, 3))  # false"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    # Calculate the cube root of a\n    cube_root = abs(a) ** (1.0/3)\n    \n    # Check if the absolute value of the cube root, rounded to the nearest integer, cubed equals the original number\n    return round(cube_root) ** 3 == abs(a)\n\n# Test cases\nprint(iscube(1))   # True\nprint(iscube(2))   # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))   # True\nprint(iscube(180)) # False"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef hex_key(num):\n    \"\"\"Main function to count the number of prime hexadecimal digits.\"\"\"\n    # List of prime numbers corresponding to the hexadecimal digits we are interested in\n    primes = [2, 3, 5, 7, 11, 13]\n    \n    # Dictionary to map hexadecimal digits to their decimal values\n    hex_to_decimal = {\n        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n        '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15\n    }\n    \n    # Count the number of prime hexadecimal digits\n    count = 0\n    for digit in num:\n        if is_prime(hex_to_decimal[digit]):\n            count += 1\n            \n    return count\n\n# Test cases\nprint(hex_key(\"AB\"))         # Output: 1\nprint(hex_key(\"1077E\"))      # Output: 2\nprint(hex_key(\"ABED1A33\"))   # Output: 4\nprint(hex_key(\"123456789ABCDEF0\")) # Output: 6\nprint(hex_key(\"2020\"))       # Output: 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    \n    # Add the 'db' prefix and suffix\n    formatted_binary = f\"db{binary_str}db\"\n    \n    return formatted_binary\n\n# Examples\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True\n\n# Test cases\nprint(is_happy(\"a\"))       # False\nprint(is_happy(\"aa\"))      # False\nprint(is_happy(\"abcd\"))    # True\nprint(is_happy(\"aabb\"))    # False\nprint(is_happy(\"adb\"))     # True\nprint(is_happy(\"xyy\"))     # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Define the mapping from GPA to letter grade\n    grade_mapping = {\n        4.0: 'A+', 3.7: 'A', 3.3: 'A-',\n        3.0: 'B+', 2.7: 'B', 2.3: 'B-',\n        2.0: 'C+', 1.7: 'C', 1.3: 'C-',\n        1.0: 'D+', 0.7: 'D', 0.0: 'E'\n    }\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Find the appropriate letter grade based on the GPA\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa >= 3.7:\n            letter_grade = 'A'\n        elif gpa >= 3.3:\n            letter_grade = 'A-'\n        elif gpa >= 3.0:\n            letter_grade = 'B+'\n        elif gpa >= 2.7:\n            letter_grade = 'B'\n        elif gpa >= 2.3:\n            letter_grade = 'B-'\n        elif gpa >= 2.0:\n            letter_grade = 'C+'\n        elif gpa >= 1.7:\n            letter_grade = 'C'\n        elif gpa >= 1.3:\n            letter_grade = 'C-'\n        elif gpa >= 1.0:\n            letter_grade = 'D+'\n        elif gpa >= 0.7:\n            letter_grade = 'D'\n        else: # gpa < 0.7\n            letter_grade = 'E'\n        \n        # Append the letter grade to the list\n        letter_grades.append(letter_grade)\n    \n    return letter_grades\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    str_len = len(string)\n    return is_prime(str_len)\n\n# Test cases\nprint(prime_length('Hello'))      # True\nprint(prime_length('abcdcba'))    # True\nprint(prime_length('kittens'))    # True\nprint(prime_length('orange'))     # False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        # For single digit numbers, only '1' is considered\n        return 1\n    else:\n        # Count of numbers starting with 1 and ending with 1 but not both\n        count_both = 9 ** (n - 2)\n        # Count of numbers starting with 1 or ending with 1\n        count_start_end = 2 * (9 ** (n - 1)) - count_both\n        return count_start_end\n\n# Example usage:\nprint(starts_one_ends(1))  # Output: 1\nprint(starts_one_ends(2))  # Output: 18\nprint(starts_one_ends(3))  # Output: 190"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Step 1: Convert N to its binary representation\n    binary_representation = bin(N)[2:]\n    \n    # Step 2: Calculate the sum of the digits in the binary representation\n    digit_sum = sum(int(digit) for digit in binary_representation)\n    \n    # Step 3: Return the result as a binary string\n    return bin(digit_sum)[2:]\n\n# Example usage:\nprint(solve(1000))  # Output should be \"1\"\nprint(solve(150))   # Output should be \"110\"\nprint(solve(147))   # Output should be \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):  # Start from index 1 and step by 2 to get odd indices\n        if lst[i] % 2 == 0:  # Check if the element is even\n            total += lst[i]\n    return total\n\n# Examples\nprint(add([4, 2, 6, 7]))  # Output should be 2 (even number at odd index)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    \n    # Split the string into words and spaces\n    parts = list(s)\n    \n    # Sort each word (character sequence) in place\n    for i in range(len(parts)):\n        if parts[i].isalpha():  # Check if it's a letter to avoid sorting spaces or punctuation\n            parts[i] = ''.join(sorted(parts[i]))\n    \n    # Join the sorted parts back into a string\n    return ''.join(parts)\n\n# Test cases\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    \n    # Iterate through each row with its index\n    for i, row in enumerate(lst):\n        # Iterate through each element with its index in the row\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    \n    # Sort the coordinates first by rows (ascending) then by columns (descending)\n    sorted_coordinates = sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))\n    \n    return sorted_coordinates\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # == []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # == [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    \n    # Create a copy of the array to avoid changing the original one\n    sorted_array = array[:]\n    \n    # Calculate the sum of the first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # Sort based on whether the sum is odd or even\n    if sum_first_last % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array\n\n# Examples\nprint(sort_array([]))             # => []\nprint(sort_array([5]))            # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6])) # => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    def shift_char(c):\n        if c >= 'a' and c <= 'z':\n            # Shift within the alphabet\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif c >= 'A' and c <= 'Z':\n            # Shift within the alphabet\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            # Non-alphabet characters remain unchanged\n            return c\n    \n    # Apply the shift to each character in the string\n    encrypted_chars = [shift_char(c) for c in s]\n    \n    # Join the shifted characters into a single string and return it\n    return ''.join(encrypted_chars)\n\n# Test cases\nprint(encrypt('hi'))      # Output: 'lm'\nprint(encrypt('asdfghjkl'))  # Output: 'ewhjklnop'\nprint(encrypt('gf'))      # Output: 'kj'\nprint(encrypt('et'))      # Output: 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    # Remove duplicates and sort the list\n    unique_sorted_lst = sorted(set(lst))\n    \n    # Check if there are at least two distinct elements\n    if len(unique_sorted_lst) < 2:\n        return None\n    \n    # Return the second smallest element\n    return unique_sorted_lst[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))                # Output: None\nprint(next_smallest([1, 1]))            # Output: None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences based on delimiters\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Strip any leading or trailing whitespace from the sentence\n        clean_sentence = sentence.strip()\n        \n        # Check if the cleaned sentence starts with \"I\"\n        if clean_sentence and clean_sentence[0].lower() == 'i':\n            boredom_count += 1\n    \n    return boredom_count\n\n# Example usage:\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        # If any input is not an integer, return False\n        return False\n\n# Examples\nprint(any_int(5, 2, 7))  # True, because 2 + 5 = 7 (or 7 + 2 = 9, but we don't check that)\nprint(any_int(3, 2, 2))  # False, no number equals the sum of the other two\nprint(any_int(3, -2, 1)) # True, because -2 + 3 = 1 (or 1 + (-2) = -1, but we don't check that)\nprint(any_int(3.6, -2.2, 2))  # False, since all numbers are not integers"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n    \n    def shift_vowel(c):\n        vowels = 'aeiou'\n        shifted_vowels = {v: chr(ord(v) + 2) for v in vowels}\n        return shifted_vowels.get(c.lower(), c)\n    \n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            char = swap_case(char)\n            char = shift_vowel(char)\n        encoded_message += char\n    return encoded_message\n\n# Examples\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime in the list and return the sum of its digits.\"\"\"\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    if max_prime == -1:\n        return 0  # No prime numbers found\n    \n    sum_digits = sum([int(digit) for digit in str(max_prime)])\n    return sum_digits\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output should be 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))             # Output should be 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output should be 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))                 # Output should be 11\nprint(skjkasdkd([0,81,12,3,1,21]))                                       # Output should be 3\nprint(skjkasdkd([0,8,1,2,1,7]))                                          # Output should be 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    if not dictionary:  # Check if the dictionary is empty\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower() == False:\n                all_lower = False\n            if key.isupper() == False:\n                all_upper = False\n        else:\n            return False  # If any key is not a string, return False\n    \n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Return an array of prime numbers less than n.\"\"\"\n    primes = []\n    for number in range(2, n):\n        if is_prime(number):\n            primes.append(number)\n    return primes\n\n# Test cases\nprint(count_up_to(5))   # => [2, 3]\nprint(count_up_to(11))  # => [2, 3, 5, 7]\nprint(count_up_to(0))   # => []\nprint(count_up_to(20))  # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # => []\nprint(count_up_to(18))  # => [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Extract the last digit of each number\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    result = unit_digit_a * unit_digit_b\n    \n    return result\n\n# Examples\nprint(multiply(148, 412))  # Should return 16\nprint(multiply(19, 28))    # Should return 72\nprint(multiply(2020, 1851)) # Should return 0\nprint(multiply(14, -15))   # Should return 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    # Define a set of uppercase vowels for quick lookup\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize a counter for uppercase vowels at even indices\n    count = 0\n    \n    # Iterate through the string, checking only even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n            \n    return count\n\n# Test cases\nprint(count_upper('aBCdEf')) # returns 1\nprint(count_upper('abcdefg')) # returns 0\nprint(count_upper('dBBE')) # returns 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the string to a float\n    num = float(value)\n    \n    # Get the integer part of the number\n    integer_part = int(num)\n    \n    # Check if the fractional part is less than 0.5 or greater than or equal to 0.5\n    if (num - integer_part) < 0.5:\n        return integer_part\n    else:\n        return integer_part + (1 if num > 0 else -1)\n\n# Test cases\nprint(closest_integer(\"10\"))     # Output: 10\nprint(closest_integer(\"15.3\"))   # Output: 15\nprint(closest_integer(\"14.5\"))   # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    \n    for _ in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:  # If n is even, the next number should be even\n            current_stones += 2\n        else:           # If n is odd, the next number should be odd\n            current_stones += 2\n    \n    return pile\n\n# Examples\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    # Use regex to split the string by either commas or spaces\n    return re.split('[ ,]+', s)\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Initialize the biggest even number found so far\n    biggest_even = -1\n    \n    # Iterate through the range from x to y inclusive\n    for num in range(x, y + 1):\n        if num % 2 == 0:  # Check if the number is even\n            if num > biggest_even:\n                biggest_even = num\n    \n    return biggest_even\n\n# Test cases\nprint(choose_num(12, 15))  # Expected output: 14\nprint(choose_num(13, 12))  # Expected output: -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total = sum(range(n, m + 1))\n    \n    # Calculate the average and round it to the nearest integer\n    avg = round(total / (m - n + 1))\n    \n    # Convert the rounded average to binary and return as a string prefixed with \"0b\"\n    return bin(avg)[2:]\n\n# Test cases\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def has_even_digit(n):\n    \"\"\"Helper function to check if a number contains any even digit.\"\"\"\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            return True\n    return False\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. Return a sorted list of all elements that haven't any even digit.\"\"\"\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Mapping from digit to its corresponding word\n    digit_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each integer to its corresponding word and return the result\n    result = [digit_to_word.get(num, \"Invalid\") for num in reversed_arr]\n    \n    return result\n\n# Test cases\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nprint(by_length([]))                         # []\nprint(by_length([1, -1 , 55]))              # ['One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n    \n    def sum_up_to(num):\n        return sum(range(1, num + 1))\n    \n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(sum_up_to(i))\n    \n    return result_list\n\n# Example usage:\nprint(f(5))  # Output should be [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"Helper function to check if a number is a palindrome.\"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        \"\"\"Helper function to calculate the sum of the digits of an integer.\"\"\"\n        n = abs(n)  # Work with the absolute value for simplicity\n        return sum(int(digit) for digit in str(n))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))         # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))   # Output: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:  # Check for empty array\n        return True\n    \n    n = len(arr)\n    \n    def is_sorted(shifted_arr):\n        \"\"\"Check if a shifted array is sorted in non-decreasing order.\"\"\"\n        return all(shifted_arr[i] <= shifted_arr[i + 1] for i in range(len(shifted_arr) - 1))\n    \n    # Generate all possible shifts and check if any of them are sorted\n    for shift in range(n):\n        shifted_arr = arr[shift:] + arr[:shift]\n        if is_sorted(shifted_arr):\n            return True\n    \n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Identify odd and even numbers in lst1\n    evens_in_lst1 = [num for num in lst1 if num % 2 == 0]\n    odds_in_lst1 = [num for num in lst1 if num % 2 != 0]\n    \n    # If there are no odd numbers in lst1, return \"YES\" immediately\n    if not odds_in_lst1:\n        return \"YES\"\n    \n    # Create a set of even numbers from lst2 for quick lookup\n    evens_set = set(lst2)\n    \n    # Check each odd number in lst1 to see if there's an even number in lst2 that can replace it\n    for odd in odds_in_lst1:\n        if odd % 2 != 0:\n            if any(odd + evens == 0 or (odd + evens) % 2 == 0 for evens in evens_set):\n                continue\n            else:\n                return \"NO\"\n    \n    # If we can replace all odd numbers with even numbers from lst2, return \"YES\"\n    return \"YES\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    # Split the string into a list of characters\n    letters = test.split()\n    \n    # Create an empty dictionary to store letter counts\n    count_dict = {}\n    \n    # Iterate over each letter in the list\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(count_dict.values())\n    \n    # Filter and return letters that have the maximum count\n    result = {letter: count for letter, count in count_dict.items() if count == max_count}\n    \n    return result\n\n# Test cases\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Create a new string excluding characters from s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = (result == result[::-1])\n    \n    return (result, is_palindrome)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))   # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        # Count the number of odd digits in the current string\n        odd_digits_count = sum(1 for char in s if int(char) % 2 != 0)\n        # Construct the output string with the count replaced by the actual number\n        output_string = f\"the number of odd elements {odd_digits_count}n the str{odd_digits_count}ng {odd_digits_count} of the {odd_digits_count}nput.\"\n        result.append(output_string)\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))  # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', \"11111111\"]))  # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0  # Return 0 for an empty array or None input\n    \n    # Initialize variables to track the minimum sum and current sum\n    min_sum = float('inf')\n    current_sum = 0\n    \n    # Iterate through each element in the array\n    for num in nums:\n        # Update the current sum with the current number\n        current_sum += num\n        \n        # Update the minimum sum if the current sum is less than the minimum sum encountered so far\n        min_sum = min(min_sum, current_sum)\n        \n        # If the current sum becomes negative, reset it to zero (since a negative sum would only increase losses)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output should be 1\nprint(minSubArraySum([-1, -2, -3]))         # Output should be -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    total_fills = 0\n    \n    for row in grid:\n        water_units = sum(row)  # Sum the units of water in the current row (well)\n        fills_needed = math.ceil(water_units / capacity)  # Calculate the number of fills needed for this well\n        total_fills += fills_needed  # Add to the total number of fills required\n    \n    return total_fills\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n    \n    # Sort the array based on the number of ones and then by the value itself\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # Output should be [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # Output should be [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # Output should be [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n    \n    def count_consonants(word):\n        return sum(1 for char in word if is_consonant(char))\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    length = len(word)\n    \n    # Iterate from right to left, starting from the second last character\n    for i in range(length - 2, 0, -1):\n        if word[i] in vowels:\n            # Check if the characters before and after the vowel are consonants\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    \n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # ==> \"u\"\nprint(get_closest_vowel(\"FULL\"))    # ==> \"U\"\nprint(get_closest_vowel(\"quick\"))   # ==> \"\"\nprint(get_closest_vowel(\"ab\"))      # ==> \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            # If balance becomes negative, it means there are more closing parentheses than opening ones.\n            if balance < 0:\n                return False\n        # After processing the whole string, balance should be zero for it to be balanced.\n        return balance == 0\n    \n    s1, s2 = lst\n    # Check both possible concatenations\n    result1 = is_balanced(s1 + s2)\n    result2 = is_balanced(s2 + s1)\n    \n    if result1 or result2:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))    # Output: 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n\n# Example 1\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\n\n# Example 2\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\n\n# Example 3\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    # Initialize the sum of odd numbers at even positions\n    sum_of_odds = 0\n    \n    # Iterate through the list with index\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:  # Check if the position is even and the number is odd\n            sum_of_odds += lst[i]\n    \n    return sum_of_odds\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if len(str(abs(arr[i]))) <= 2:\n            # Add the valid element to the total sum\n            total_sum += arr[i]\n    \n    return total_sum\n\n# Example usage:\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz_sequence(n):\n        seq = []\n        while n != 1:\n            seq.append(n)\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = 3 * n + 1\n        seq.append(1)  # Add the final 1 to the sequence\n        return seq\n    \n    collatz_seq = collatz_sequence(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)\n\n# Example usage:\nprint(get_odd_collatz(5))  # Output should be [1, 5]"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    # Check if the date string is in the correct format (mm-dd-yyyy)\n    pattern = r'^(\\d{2})-(\\d{2})-(\\d{4})$'\n    match = re.match(pattern, date)\n    if not match:\n        return False\n    \n    month, day, year = int(match.group(1)), int(match.group(2)), int(match.group(3))\n    \n    # Validate the month\n    if month < 1 or month > 12:\n        return False\n    \n    # Validate the days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # Check for leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    # If all validations pass, the date is valid\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check for whitespace and split if found\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check for comma and split if found\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # If no whitespaces or commas, count lower-case letters with odd order\n    else:\n        count = 0\n        for char in txt:\n            if 'a' <= char <= 'z':\n                # Calculate the position of the letter in the alphabet (ord(char) - ord('a')) and check if it's odd\n                if (ord(char) - ord('a')) % 2 == 1:\n                    count += 1\n        return count\n\n# Examples\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # If the list has only one element or is empty, it's sorted\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(len(lst) - 1):\n        # Check if current element is greater than the next element\n        if lst[i] > lst[i + 1]:\n            return False\n        # If there are duplicates, also return False\n        if lst[i] == lst[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of the intersection of two intervals is a prime number.\"\"\"\n    \n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if they intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length_intersection = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    # Initialize product of signs to 1 (since it will be multiplied)\n    sign_product = 1\n    \n    for num in arr:\n        # Multiply the current sign_product by the sign of the number (-1, 0, or 1)\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n    \n    # Calculate the sum of magnitudes of all numbers in the array\n    magnitude_sum = sum(abs(num) for num in arr)\n    \n    # Return the product of signs multiplied by the sum of magnitudes\n    return sign_product * magnitude_sum\n\n# Test cases\nprint(prod_signs([1, 2, 2, -4]) == -9)  # Expected output: True\nprint(prod_signs([0, 1]) == 0)          # Expected output: True\nprint(prod_signs([]) == None)           # Expected output: True"}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    \n    def bfs(start_row, start_col):\n        queue = deque([(start_row, start_col, [grid[start_row][start_col]])])\n        min_path = None\n        \n        while queue:\n            row, col, path = queue.popleft()\n            \n            if len(path) == k:\n                if min_path is None or path < min_path:\n                    min_path = path[:]\n                continue\n            \n            for dr, dc in directions:\n                new_row, new_col = row + dr, col + dc\n                if 0 <= new_row < N and 0 <= new_col < N:\n                    queue.append((new_row, new_col, path + [grid[new_row][new_col]]))\n        \n        return min_path\n    \n    overall_min_path = None\n    \n    for i in range(N):\n        for j in range(N):\n            result = bfs(i, j)\n            if overall_min_path is None or result < overall_min_path:\n                overall_min_path = result\n    \n    return overall_min_path\n\n# Examples\nprint(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return []  # Return an empty list for non-negative integers only\n    \n    sequence = [None] * (n + 1)  # Initialize the sequence with None values\n    \n    def tribonacci(k):\n        if k == 1:\n            return 3\n        if sequence[k] is not None:\n            return sequence[k]\n        if k % 2 == 0:\n            result = 1 + k / 2\n        else:\n            result = tribonacci(k - 1) + tribonacci(k - 2) + tribonacci(k + 1)\n        sequence[k] = result\n        return result\n    \n    for i in range(n + 1):\n        tribonacci(i)\n    \n    # Filter out None values and convert to integers if necessary\n    return [int(x) if isinstance(x, float) and x.is_integer() else x for x in sequence]\n\n# Examples\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    # Convert the number to a string to iterate over its digits\n    str_n = str(n)\n    \n    # Initialize the product of odd digits\n    product = 1\n    \n    # Iterate over each character in the string representation of n\n    for char in str_n:\n        digit = int(char)\n        \n        # Check if the digit is odd\n        if digit % 2 != 0:\n            product *= digit\n            \n    # Return the product if there are any odd digits, otherwise return 0\n    return product if str_n.isdigit() and (str_n[0] != '0' or len(str_n) == 1) else 0\n\n# Test cases\nprint(digits(1))   # Output: 1\nprint(digits(4))   # Output: 0\nprint(digits(235)) # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Initialize an empty list as our stack\n    stack = []\n    \n    # Iterate over each character in the string\n    for char in string:\n        # If the character is an opening bracket, push it onto the stack\n        if char == '[':\n            stack.append(char)\n        # If the character is a closing bracket and there's a corresponding opening bracket in the stack\n        elif char == ']' and stack and stack[-1] == '[':\n            # Pop the opening bracket from the stack (indicating we found a pair)\n            stack.pop()\n    \n    # If the stack is empty after processing the string, it means all brackets were matched properly\n    # If not, check if there's at least one unmatched opening bracket in the stack which indicates nested structure exists\n    return len(stack) == 0 or any(char == '[' for char in stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    # Step 1: Round each element to the nearest upper integer\n    rounded_list = [math.ceil(num) for num in lst]\n    \n    # Step 2: Square each number in the rounded list\n    squared_list = [num ** 2 for num in rounded_list]\n    \n    # Step 3: Sum all the squared numbers\n    total_sum = sum(squared_list)\n    \n    # Step 4: Return the final sum\n    return total_sum\n\n# Test cases\nprint(sum_squares([1,2,3]))          # Output should be 14\nprint(sum_squares([1,4,9]))          # Output should be 98\nprint(sum_squares([1,3,5,7]))        # Output should be 84\nprint(sum_squares([1.4,4.2,0]))      # Output should be 29\nprint(sum_squares([-2.4,1,1]))       # Output should be 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Get the last character of the string\n    last_char = txt[-1]\n    \n    # Check if the last character is an alphabetical character and not part of a word\n    if last_char.isalpha():\n        # Find the index of the space before the last character\n        space_index = txt.rfind(' ')\n        \n        # If there's no space, it means the last character is at the end of the string\n        if space_index == -1:\n            return True\n        \n        # Check if the last character is not part of a word (i.e., preceded by a space)\n        if txt[space_index + 1] == ' ':\n            return False\n        else:\n            return True\n    else:\n        return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # \u279e False\nprint(check_if_last_char_is_a_letter(\"\")) # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_invalid_index = -1\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_invalid_index = i\n            \n    return max_invalid_index\n\n# Examples:\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))      # Output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_largest = None\n    positive_smallest = None\n    \n    for num in lst:\n        if num < 0:\n            if negative_largest is None or num > negative_largest:\n                negative_largest = num\n        elif num > 0:\n            if positive_smallest is None or num < positive_smallest:\n                positive_smallest = num\n    \n    return (negative_largest, positive_smallest)\n\n# Examples\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) # == (None, 1)\nprint(largest_smallest_integers([])) # == (None, None)\nprint(largest_smallest_integers([0])) # == (None, None)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    # Helper function to safely convert to float if possible\n    def safe_float(value):\n        try:\n            return float(value)\n        except (ValueError, TypeError):\n            return None\n    \n    # Convert both inputs to floats for direct comparison if possible\n    a_as_float = safe_float(a)\n    b_as_float = safe_float(b)\n    \n    # If neither can be converted to float, compare as strings\n    if a_as_float is None and b_as_float is None:\n        str_a = str(a)\n        str_b = str(b)\n        if str_a == str_b:\n            return None\n        elif str_a > str_b:\n            return a\n        else:\n            return b\n    \n    # If both can be converted to float, compare floats directly\n    elif a_as_float is not None and b_as_float is not None:\n        if a_as_float == b_as_float:\n            return None\n        elif a_as_float > b_as_float:\n            return a\n        else:\n            return b\n    \n    # If one can be converted to float and the other cannot, use float comparison for the one that can\n    elif a_as_float is not None:\n        return a if a_as_float > safe_float(b) else b\n    else:  # b_as_float is not None\n        return b if b_as_float > safe_float(a) else a\n\n# Test cases\nprint(compare_one(1, 2.5))       # \u279e 2.5\nprint(compare_one(1, \"2,3\"))     # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))   # \u279e \"6\"\nprint(compare_one(\"1\", 1))       # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Check if n is even\n    if n % 2 != 0:\n        return False\n    # Check if n modulo 4 equals 0 (i.e., n is divisible by 4)\n    return n % 4 == 0\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # Expected output: False\nprint(is_equal_to_sum_even(6))  # Expected output: False\nprint(is_equal_to_sum_even(8))  # Expected output: True"}
{"task_id": "HumanEval/139", "completion": "def factorial(num):\n    \"\"\"Helper function to calculate the factorial of a given number.\"\"\"\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n\n# Example usage:\nprint(special_factorial(4))  # Output should be 288"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find and replace more than 2 consecutive underscores with a single hyphen\n    while '___' in text:\n        text = text.replace('___', '--')\n    \n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))       # \"Example\"\nprint(fix_spaces(\"Example 1\"))     # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))    # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example--3\""}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    # Check if there is exactly one dot in the filename\n    if '.' not in file_name or file_name.count('.') > 1:\n        return 'No'\n    \n    parts = file_name.split('.')\n    name, extension = parts[0], parts[1]\n    \n    # Check if the substring before the dot is empty or does not start with a letter\n    if not name or not re.match(r'^[a-zA-Z]', name):\n        return 'No'\n    \n    # Check if the extension is one of the allowed extensions\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if extension not in allowed_extensions:\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Examples\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            result += value ** 2\n        elif index % 4 == 0 and index % 3 != 0:\n            result += value ** 3\n    return result\n\n# Examples\nprint(sum_squares([1, 2, 3]))  # Output should be 6\nprint(sum_squares([]))         # Output should be 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output should be -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    primes_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(primes_length_words)\n\n# Example 1:\nsentence1 = \"This is a test\"\nprint(words_in_sentence(sentence1))  # Output: \"is\"\n\n# Example 2:\nsentence2 = \"lets go for swimming\"\nprint(words_in_sentence(sentence2))  # Output: \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Helper function to parse a fraction string\n    def parse_fraction(frac):\n        numerator, denominator = map(int, frac.split('/'))\n        return numerator, denominator\n    \n    # Parse the fractions\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n    \n    # Multiply the fractions\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    # Check if the result is a whole number\n    return (result_numerator % result_denominator == 0) and (result_denominator != 0)\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Create a list of tuples where each tuple contains the original index and value\n    indexed_nums = [(i, num) for i, num in enumerate(nums)]\n    \n    # Sort the list of tuples by the sum of digits (second element of the tuple), then by index\n    sorted_indexed_nums = sorted(indexed_nums, key=lambda x: (digit_sum(x[1]), x[0]))\n    \n    # Extract the sorted numbers from the sorted indexed list\n    sorted_nums = [num for i, num in sorted_indexed_nums]\n    \n    return sorted_nums\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                      # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(digit):\n        return digit in [1, 3, 5, 7, 9]\n    \n    def first_and_last_are_odd(num):\n        num_str = str(num)\n        if len(num_str) < 2:\n            return False\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return is_odd(first_digit) and is_odd(last_digit)\n    \n    count = 0\n    for num in nums:\n        if num > 10 and first_and_last_are_odd(num):\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15])) # => 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # => 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    \n    # Iterate over all possible triples (i, j, k) where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\n# Example usage:\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # Define the order of the planets in the solar system\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    \n    # Find the positions of the given planets\n    pos1 = planets.index(planet1)\n    pos2 = planets.index(planet2)\n    \n    # Ensure pos1 is less than pos2 for easier indexing\n    if pos1 > pos2:\n        pos1, pos2 = pos2, pos1\n    \n    # Extract the planets between them\n    result = planets[pos1+1:pos2]\n    \n    # Return the result as a tuple\n    return tuple(result)\n\n# Examples\nprint(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))     # ==> (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length first, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Examples\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # Filter out negative numbers and non-integers, then check for odd numbers\n    filtered_numbers = [num for num in lst if isinstance(num, int) and num >= 0 and num % 2 != 0]\n    \n    # Square each of the remaining odd numbers\n    squared_numbers = [num ** 2 for num in filtered_numbers]\n    \n    # Sum up all the squared values\n    result = sum(squared_numbers) if squared_numbers else 0\n    \n    return result\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))   # Output: 0\nprint(double_the_difference([9, -2]))        # Output: 81\nprint(double_the_difference([0]))            # Output: 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # Initialize an empty list to store the differences\n    result = []\n    \n    # Iterate through both arrays simultaneously using zip\n    for score, pred in zip(game, guess):\n        # Calculate the absolute difference if the prediction is incorrect\n        if score != pred:\n            diff = abs(score - pred)\n            result.append(diff)\n        else:\n            # If the prediction is correct, append 0\n            result.append(0)\n    \n    return result\n\n# Test cases\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # -> [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # -> [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f'{class_name}.{strongest_extension}'\n\n# Example usage:\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: Slices.SErviNGSliCes\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: my_class.AA"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    # If the length of b is greater than a, it's impossible for any rotation of b to be a substring of a\n    if len(b) > len(a):\n        return False\n    \n    # Generate all rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\"\"\"\n    \n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit in the number\n    while num > 0:\n        digit = num % 10  # Get the last digit of the number\n        \n        if digit % 2 == 0:  # Check if the digit is even\n            even_count += 1\n        else:  # If not even, it's odd\n            odd_count += 1\n            \n        num = num // 10  # Remove the last digit from the number\n    \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result.lower()\n\n# Examples\nprint(int_to_mini_roman(19))  # Output: 'xix'\nprint(int_to_mini_roman(152)) # Output: 'clii'\nprint(int_to_mini_roman(426)) # Output: 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to ensure that c is the longest side\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def unique_char_count(word):\n        return len(set(word))\n    \n    max_unique = 0\n    result = \"\"\n    \n    for word in words:\n        unique_count = unique_char_count(word)\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n            \n    return result\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the total number of carrots eaten after meals\n    if need <= remaining:\n        total_eaten = number + need\n        remaining_after_eating = 0\n    else:\n        # If there are not enough remaining carrots, eat all that are available\n        total_eaten = number + remaining\n        remaining_after_eating = 0\n    \n    return [total_eaten, remaining_after_eating]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10)) # Output: [11, 0]\nprint(eat(2, 11, 5))  # Output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    # Initialize the result with the first operand\n    result = operands[0]\n    \n    # Iterate through the operators and operands to evaluate the expression\n    for i in range(len(operators)):\n        operator = operators[i]\n        operand = operands[i + 1]\n        \n        if operator == '+':\n            result += operand\n        elif operator == '-':\n            result -= operand\n        elif operator == '*':\n            result *= operand\n        elif operator == '//':\n            result //= operand\n        elif operator == '**':\n            result **= operand\n    \n    return result\n\n# Example usage:\noperators = ['+', '*', '-']\noperands = [2, 3, 4, 5]\nprint(do_algebra(operators, operands))  # Output should be 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Check if there are any letters in the string\n    has_letters = any(c.isalpha() for c in s)\n    \n    if not has_letters:\n        # If no letters, reverse the entire string\n        return s[::-1]\n    \n    # Iterate through each character and reverse its case if it's a letter\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    # Join the list of characters into a string and return it\n    return ''.join(result)\n\n# Examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the input string\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Get the hexadecimal representation of the digest\n    return md5_hash.hexdigest()\n\n# Test the function\nprint(string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62')  # Should print True"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Generate the list of even numbers between a and b\n    result = [num for num in range(a, b + 1) if num % 2 == 0]\n    \n    return result"}

{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    sorted_list = sorted(numbers)\n    for index in range(len(sorted_list)-1):\n        difference = abs(sorted_list[index] - sorted_list[index+1])\n\n        if difference < threshold:\n            return True\n\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    stack = []\n\n    def pop_stack():\n        if len(stack) == 0:\n            return \"\"\n\n        opening_paren = stack[-1]\n        stack.pop()\n\n        if opening_paren == \"(\":\n            closing_paren = \")\"\n        else:\n            closing_paren = \"(\"\n\n        while len(stack) > 0 and stack[-1] != opening_paren:\n            popped_string = pop_stack()\n\n            if popped_string == \"\":\n                return \"\"\n\n        if len(stack) == 0 or stack[-1] != opening_paren:\n            return \"\"\n        else:\n            stack.pop()\n\n        return closing_paren\n\n    paren_string = \"\".join([c for c in paren_string if c in \"()\"])\n    result = []\n\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            stack.append(\"(\")\n        elif char == \")\":\n            popped_string = pop_stack()\n\n            if popped_string != \"\":\n                result.append(popped_string)\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    assert len(numbers) > 0, \"List should not be empty\"\n\n    numbers.sort()\n\n    sum = 0\n    for num in numbers:\n        sum += abs(num - mean_value(numbers))\n    return sum / len(numbers)\n\n\ndef mean_value(numbers: List[float]) -> float:\n    assert len(numbers) > 0, \"List should not be empty\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n    output = []\n\n    for i in range(len(numbers)):\n        if i == len(numbers):\n            break\n\n        output.append(numbers[i])\n        output.append(delimeter)\n\n    return output[:-1]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    def is_even(n):\n        return n % 2 == 0\n\n    if len(numbers) == 0:\n        return 0, 1\n\n    s = numbers[0]\n    p = numbers[0]\n    for i in range(1, len(numbers)):\n        s += numbers[i]\n        p *= numbers[i]\n\n    if is_even(len(numbers)):\n        s += 0\n        p *= 1\n    else:\n        s -= numbers[-1]\n        p //= numbers[-1]\n\n    return s, p"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    # Create a stack to hold indices of elements that are greater than or equal to the current element.\n    stack = []\n\n    # Initialize resulting list.\n    rolling_maximas = [0] * len(numbers)\n\n    for i in range(len(numbers)):\n        while stack and numbers[stack[-1]] < numbers[i]:\n            index = stack.pop()\n            if stack:\n                rolling_maximas[index] = numbers[stack[-1]]\n\n        # Push the current index to the stack.\n        stack.append(i)\n\n    return rolling_maximas"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if not string:\n        return \"\"\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[-i:]):\n            break\n\n    else:\n        raise ValueError(\"String is not a palindrome\")\n\n    return string + string[-i:][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Handle corner cases.\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length.\")\n\n    xor_result = \"\"\n\n    for i in range(len(a)):\n        char_a = a[i]\n        char_b = b[i]\n\n        if char_a == char_b:\n            xor_result += \"0\"\n        else:\n            xor_result += \"1\"\n    return xor_result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if len(strings) == 0:\n        return None\n    else:\n        longest_str = ''\n        for s in strings:\n            if len(s) > len(longest_str):\n                longest_str = s\n        return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    _test()"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n\n    return result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    character_set = set()\n\n    for char in string:\n        if ord(char) >= 97 and ord(char) <= 122:\n            # character is lowercase\n            character_set.add(char)\n        elif ord(char) >= 65 and ord(char) <= 90:\n            # character is uppercase\n            character_set.add(chr(ord(char) + 32))\n\n    return len(character_set)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [note.count(\"|\") * (2 if note[-1] == 'o' else 1)\n            for note in music_string.split()]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n    if not string or not substring:\n        return 0\n\n    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += len(substring)\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num2int = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3,\n                \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7,\n                \"eight\": 8, \"nine\": 9}\n    nums = numbers.split()\n    sorted_nums = sorted(nums, key=lambda x: num2int[x])\n    return \" \".join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Find the two closest numbers by sorting and taking first two elements\n    sorted_numbers = sorted(numbers)\n\n    return tuple(sorted_numbers[:2])"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n    smallest = min(numbers)\n    largest = max(numbers)\n\n    return [(x - smallest) / (largest - smallest) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    # Your code here"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    divisor = 2\n    while divisor <= n / 2:\n        if n % divisor == 0:\n            result = divisor\n        else:\n            divisor += 1\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\nimport math\n\n\ndef prime_factors(n):\n    factors = []\n\n    # check if n is a perfect square\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        factors.append(sqrt_n)\n        return factors\n\n    i = 2\n\n    while i <= n / i + 1:\n        count = 0\n\n        while n % i == 0:\n            count += 1\n            n /= i\n\n        if count > 0:\n            factors.extend([i] * count)\n\n        i += 1\n\n    if n > 1:\n        factors.append(int(n))\n\n    return factors\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    return prime_factors(n)"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    new_string = ''\n    for c in string:\n        if c == c.upper():\n            new_string += c.lower()\n        else:\n            new_string += c.upper()\n\n    return new_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n == 1 or (n % 2 == 0 and n > 2):\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom typing import List, Tuple\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> List[Tuple[float, float]]:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\""}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    sorted_list = sorted(l[::3])\n\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted_list[:len(l[i:i+3])]\n        sorted_list = sorted_list[len(l[i:i+3]):]\n    return l"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n\n    def insert(x):\n        if x not in seen:\n            seen.add(x)\n            return True\n        else:\n            return False\n\n    l[:] = [x for x in l if insert(x)]\n    return sorted(seen)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "import numpy as np\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    divisible_by_11 = np.arange(11, n, 11)\n    divisible_by_13 = np.arange(13, n, 13)\n\n    intersection = np.intersect1d(divisible_by_11, divisible_by_13)\n\n    count = 0\n\n    for item in intersection:\n        string = str(item)\n        if \"7\" in string:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    return sorted(l[::2], reverse=True) + l[1::2]"}
{"task_id": "HumanEval/38", "completion": "from itertools import cycle\n\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    return \"\".join([\"\".join(group) for group in [cycle(g) if len(g) == 3 else g for g in groups]])\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "import math\nfrom typing import List, Tuple\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Returns True if n is prime and False otherwise.\n    \"\"\"\n    # Corner case\n    if (n <= 1):\n        return False\n\n    # Check from 2 to n-1\n    for i in range(2, math.floor(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return False\n\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the nth prime Fibonacci number.\n    \"\"\"\n    # Corner case\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    fib1, fib2 = 1, 2\n    count = 0\n\n    while True:\n        if is_prime(fib2):\n            count += 1\n\n        if count == n:\n            return fib2\n\n        fib1, fib2 = fib2, fib1 + fib2"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] == 0:\n            return True\n\n        for j in range(i + 1, len(l)):\n            if (l[j] != 0) and (l[i] - l[j] == 0):\n                return True\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "import collections\nimport heapq\n\ndef car_race_collision(n: int):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return list(map(lambda x: x + 1, l))"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Implement your solution here"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    assert isinstance(x, int), \"x should be an integer\"\n    assert isinstance(base, int), \"base should be an integer\"\n    assert base < 10, \"base should be less than 10\"\n\n    num_dict = {\n        i: c for i, c in enumerate(\"0123456789abcdefghijklmnopqrstuvwxyz\")\n    }\n\n    res = \"\"\n\n    while x > 0:\n        quotient, remainder = divmod(x, base)\n        digit = num_dict[remainder]\n        res += digit\n        x = quotient\n\n    return res[::-1]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    # base * height / 2\n    return a * h / 2.0"}
{"task_id": "HumanEval/46", "completion": "def _fib4_helper(n):\n    if n < 0:\n        raise ValueError('The argument must be greater than or equal to zero')\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        prev = [0, 0]\n        curr = [0, 2]\n\n        for i in range(4, n + 1):\n            next_curr = [curr[0] + curr[1], curr[1]]\n\n            curr[0] = curr[1]\n            curr[1] = next_curr[0]\n\n            prev[0] = prev[1]\n            prev[1] = curr[0]\n\n        return curr[0] + prev[0]\n\n\ndef fib4(n):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    return _fib4_helper(n)"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[(n - 1) // 2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n\n    for i in range(len(text) // 2):\n        if text[i] != text[-i - 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    # base case:\n    if n == 0:\n        return 1\n\n    # recursive case:\n    elif n % 2 == 0:  # even\n        return (modp(n // 2, p)) ** 2 % p\n\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"task_id": "HumanEval/50", "completion": "import string\n\n alphabet = list(string.ascii_lowercase)\n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([alphabet[(alphabet.index(ch) + 5) % len(alphabet)] for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return encode_shift(s, -5)"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    return ''.join(ch for ch in text if not is_vowel(ch))\n\n\ndef is_vowel(ch):\n    return ch.lower() in \"aeiou\""}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    for n in l:\n        if n >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    if len(s0) != len(s1):\n        return False\n\n    counter = {}\n    for c in s0:\n        counter[c] = 1 + counter.get(c, 0)\n\n    for c in s1:\n        counter[c] = 1 + counter.get(c, 0)\n\n    for k, v in counter.items():\n        if v % 2 != 0:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        else:\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing = all(x <= y for x, y in zip(l, l[1:]))\n    is_decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    return is_increasing or is_decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    s = set(l1) & set(l2)\n    return sorted(list(s))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n\n    while True:\n        if n % i == 0:\n            n //= i\n            if is_prime(i):\n                continue\n            else:\n                return largest_prime_factor(n)\n        i += 1\n\n\ndef is_prime(n):\n    \"\"\"Returns whether a given number n is prime.\"\"\"\n    if n < 2:\n        return False\n\n    for k in range(2, int(n ** 0.5) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    else:\n        return (sum_to_n(n - 1)) + n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(brackets[i])\n\n        elif len(stack) > 0 and stack[-1] == \"(\":\n            stack.pop()\n        else:\n            return False\n\n    return not bool(stack)"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    der = []\n    for i in range(len(xs)):\n        der.append(xs[i]*(i+1))\n    return der"}
{"task_id": "HumanEval/63", "completion": "def _build_triangle(n):\n    triangle = [[None for i in range(j + 1)] for j in range(n + 1)]\n\n    for i in range(1, n + 1):\n        triangle[i][0] = 0\n        for j in range(1, i + 1):\n            if triangle[i - 1][j - 1] is not None:\n                triangle[i][j] = triangle[i - 1][j - 1]\n            else:\n                triangle[i][j] = 0\n\n            if triangle[i - 2][j - 1] is not None:\n                triangle[i][j] += triangle[i - 2][j - 1]\n            else:\n                triangle[i][j] = 0\n\n            if triangle[i - 3][j] is not None:\n                triangle[i][j] += triangle[i - 3][j]\n            else:\n                triangle[i][j] = 0\n\n    return triangle\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    triangle = _build_triangle(n)\n\n    for j in range(n + 1):\n        print(triangle[j])\n\n    return triangle[n][n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s[-1] == 'y':\n        return sum(c in 'aeiou' for c in s) + 1\n    else:\n        return sum(c in 'aeiou' for c in s)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # convert integer to string, reverse it, slice out the shifted part, and concatenate\n    s = str(x)[::-1]\n    return (s[shift:] + s[:shift])[::-1]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n\n    for c in s:\n        if (ord(c) >= ord('A')) and (ord(c) <= ord('Z')):\n            sum += ord(c)\n\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n#     import re\n    first = s.split(' ')[0]\n    second = s.split(' ')[2]\n    \n    n_oranges = int(first[:-6])\n    n_apples = int(second[:-7])\n    mangoes = n - (n_oranges + n_apples)\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n\n    min_even = float(\"inf\")\n    min_index = None\n\n    for i, x in enumerate(arr):\n        if x % 2 == 0 and x < min_even:\n            min_even = x\n            min_index = i\n\n    if min_index is None:\n        return []\n\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if len(set(lst)) != len(lst):\n        return -1\n\n    counts = {}\n    for item in lst:\n        if item not in counts.keys():\n            counts[item] = 1\n        else:\n            counts[item] += 1\n    for i in reversed(sorted(counts.keys())):\n        if counts[i] >= i:\n            return i\n\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    return [min_value] + \\\n           strange_sort_list([x for x in lst if x != min_value and x != max_value]) + \\\n           [max_value]"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if (a + b <= c or b + c <= a or a + c <= b):\n        return -1\n\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    if q == list(reversed(q)) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Write your code here.\n    \n    if len(arr) <= 1:\n        return 0\n\n    def is_palindrome(arr):\n        return arr[:len(arr)//2] == arr[::-1][len(arr)//2:]\n\n    left = 0\n    right = len(arr)-1\n    while left < right:\n        if arr[left] != arr[right]:\n            return min(\n                arr[left:].index(arr[right]) + 1,\n                arr[:right+1].index(arr[left])\n            )\n        left += 1\n        right -= 1\n\n    return 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n\n    def get_total_length(l):\n        return sum([len(s) for s in l])\n\n    if get_total_length(lst1) < get_total_length(lst2):\n        return lst1\n    elif get_total_length(lst1) > get_total_length(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def _is_prime(n):\n        if n < 2: return False\n        for x in range(2, int(n**0.5) + 1):\n            if n % x == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a+1):\n        while a % i == 0 and _is_prime(i):\n            prime_factors.append(i)\n            a /= i\n        if a == 1:\n            break\n\n    return len(prime_factors) == 3 and a == 1"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if x == n:\n        return True\n\n    current = n\n    while current < x:\n        current *= n\n        if current == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0 or a == -1 * a :\n        return True\n    for i in range (1, abs(a)**(1.0/3.0) + 1):\n        if i * i * i == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "# Solution using built-in functions\ndef hex_key(num):\n    # Convert the hexadecimal number to a decimal number\n    dec_num = int(num, 16)\n\n    # Initialize a count variable to keep track of the number of primes\n    prime_count = 0\n\n    # Check if each digit in the decimal number is prime\n    for i in range(2, dec_num + 1):\n        # If the digit is prime, increment the count\n        if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):\n            prime_count += 1\n\n    return prime_count\n\n# Solution using custom functions\ndef hex_key(num):\n    # Convert the hexadecimal number to a decimal number\n    dec_num = int(num, 16)\n\n    # Initialize a count variable to keep track of the number of primes\n    prime_count = 0\n\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if each digit in the decimal number is prime\n    for i in range(2, dec_num + 1):\n        if is_prime(i):\n            prime_count += 1\n\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if type(decimal) == str:\n        decimal = int(decimal, 10)\n\n    binary = bin(decimal)[2:]\n    result = 'db' + binary + 'db'\n\n    return result"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # if s length < 3, then it's not happy.\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        window = set()\n\n        for j in range(i, i + 3):\n            window.add(s[j])\n\n        # if the size of the set is less than 3, it's happy.\n        if len(window) < 3:\n            return True\n\n    # if none of the windows is happy, then the string itself must be\n    # unhappy.\n    return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade = [\n        \"E\",\n        \"D-\",\n        \"D\",\n        \"D+\",\n        \"C-\",\n        \"C\",\n        \"C+\",\n        \"B-\",\n        \"B\",\n        \"B+\",\n        \"A-\",\n        \"A\",\n        \"A+\"\n    ]\n\n    gpa_to_letter_grade = {\n        0.0: letter_grade[0],\n        0.7: letter_grade[1],\n        1.0: letter_grade[2],\n        1.3: letter_grade[3],\n        1.7: letter_grade[4],\n        2.0: letter_grade[5],\n        2.3: letter_grade[6],\n        2.7: letter_grade[7],\n        3.0: letter_grade[8],\n        3.3: letter_grade[9],\n        3.7: letter_grade[10],\n        4.0: letter_grade[11]\n    }\n\n    return list(map(lambda gpa: gpa_to_letter_grade[gpa], grades))"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Write a function that takes a number n and returns True if the number is prime or False otherwise\"\"\"\n    sqrt = int(math.sqrt(n))\n    for i in range(2, sqrt+1):\n        if n % i == 0:\n            return False\n    else:\n        return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    if len(string) < 2:\n        raise ValueError(\"Length of string must be greater than 1\")\n    elif is_prime(len(string)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    def helper(level, num, current):\n        nonlocal result\n        if level == n:\n            if current == 'start' or current == 'end':\n                result += 1\n            return\n\n        helper(level + 1, num * 10, current + 'start')\n        helper(level + 1, num * 10 + 1, current + 'middle')\n        helper(level + 1, num * 10, current + 'end')\n\n    result = 0\n    if n == 1:\n        return 2\n    else:\n        helper(1, 1, 'start')\n        return result"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    else:\n        result = \"\"\n        while (N > 0):\n            result += str(N % 2)\n            N //= 2\n        result = result[::-1]\n        return result"}
{"task_id": "HumanEval/85", "completion": "\"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\ndef add(lst):\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and (i + 1) % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return sorted(s)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    row_coords = []\n\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in reversed(range(len(lst[i]))):\n                if lst[i][j] == x:\n                    row_coords.append((i, j))\n\n    return sorted(row_coords)"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = array[:]\n\n    if sum(array[:2]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    encrypted_message = \"\"\n\n    for c in s:\n        index = alphabet.find(c)\n        new_index = (index - 24) % len(alphabet)\n        encrypted_message += alphabet[new_index]\n    \n    return encrypted_message"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n    else:\n        sorted_list = sorted(lst)\n        for i in range(len(sorted_list)-1):\n            if sorted_list[i] != sorted_list[i+1]:\n                return sorted_list[i+1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    count = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        if sentence[0] == \"I\":\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int:\n        return False\n    elif x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    swap_case = {char.lower(): char.upper() if char.islower() else char.lower() for char in string.ascii_letters}\n    \n    vowels = set(\"aeiou\")\n    alphabet = string.ascii_lowercase\n\n    shift_vowel = lambda x: alphabet[(alphabet.index(x) + 2) % len(alphabet)]\n    \n    encode_char = lambda x: swap_case[x] if x in swap_case else (shift_vowel(x) if x in vowels else x)\n    encoded = ''.join([encode_char(c) for c in message])\n\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "from sympy import isprime\nimport math\n\ndef skjkasdkd(lst):\n    # Find the largest prime number in the list\n    primes = filter(isprime, lst)\n    largest_prime = max(primes)\n\n    # Calculate the sum of its digits\n    digit_sum = sum(int(digit) for digit in str(largest_prime))\n\n    return digit_sum"}
{"task_id": "HumanEval/95", "completion": "def is_lower(s):\n    \"\"\" Return True if all characters in the string are lowercase, otherwise False.\"\"\"\n    for c in s:\n        if not c.islower():\n            return False\n    return True\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Handle the empty dictionary case. \n    if len(dict) == 0:\n        return False\n\n    first_key = list(dict.keys())[0]\n\n    for key in dict.keys():\n        if not is_lower(key):\n            return False\n    return True\n\n\n# Test your function with the provided examples:\nassert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\nassert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\nassert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False\nassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\nassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n\n\ndef count_up_to(n):\n    if n < 2:\n        return []\n\n    primes = []\n\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # convert to strings and multiply\n    product = str(a * b)\n    \n    # get unit digit\n    product_unit_digit = int(product[-1])\n\n    return product_unit_digit"}
{"task_id": "HumanEval/98", "completion": "import string\n\ndef count_upper(s):\n    count = 0\n    for index, c in enumerate(s):\n        if (index % 2 == 0) and (c.upper() in 'AEIOU'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    if \".\" in value:\n        decimal_part = float(value.split(\".\")[1])\n\n        if decimal_part >= 0.5:\n            return int(float(value) + 0.5)\n        else:\n            return int(float(value))\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    if n <= 0:\n        return []\n    levels = [n]\n    while n > 1:\n        n += 2 if n % 2 == 0 else 1\n        levels.append(n)\n\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    \n    s = s.strip()  # remove leading/trailing spaces\n    if ',' in s:\n        return [word for word in s.split(',')]\n    else:\n        return [word for word in s.split(' ')]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0 and x <= i <= y:\n            return i\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    sum = n + m\n    avg = int(sum / 2)\n\n    return bin(avg)[2:] # convert to binary and remove the '0b' prefix."}
{"task_id": "HumanEval/104", "completion": "def has_even_digit(number):\n    for digit in str(number):\n        if int(digit) % 2 == 0:\n            return True\n    return False\n\ndef unique_digits(x):\n    result = []\n    for number in x:\n        if not has_even_digit(number):\n            result.append(number)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    one_to_nine = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\n    if len(arr) == 0:\n        return []\n    else:\n        return [one_to_nine[i] for i in sorted([x for x in arr if 1 <= x < 10], reverse=True)]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_numbers = 0\n            for j in range(1, i + 1):\n                sum_numbers += j\n            result.append(sum_numbers)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    num = str(num)\n    return num == num[::-1]\n\n\ndef get_number_of_even_odd(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd\n\n\ndef main():\n    import sys\n\n    num = int(input(\"Number: \"))\n    print(\"Even and Odd Palindromes: {}\".format(get_number_of_even_odd(num)))\n\n    sys.exit(0)\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/108", "completion": "def first_signed_digit(num):\n    return num // abs(num)\n\n\ndef sum_of_digits(num):\n    total = 0\n    while num != 0:\n        total += num % 10\n        num //= 10\n    return total\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(\n        1 for num in arr\n        if first_signed_digit(num) == first_signed_digit(sum_of_digits(num))\n    )"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if arr == sorted(arr):\n        return True\n    n = len(arr)\n    first = arr[0]\n    found = False\n    for i in range(n):\n        if first <= arr[i]:\n            continue\n        else:\n            index = i\n            found = True\n            break\n    if not found:\n        index = n\n\n    for j in range(index, n):\n        if arr[j] < arr[j - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(move_one_ball([3, 4, 5, 1, 2]))"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    def check_lst(lst):\n        for item in lst:\n            if not isinstance(item, int) or item % 2 != 0:\n                return False\n        else:\n            return True\n\n    if not check_lst(lst1) or not check_lst(lst2):\n        raise TypeError(\"Elements of list must be integer\")\n    set_lst1 = set(lst1)\n    for item in lst2:\n        if item % 2 == 0 and item in set_lst1:\n            return 'YES'\n\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    from collections import Counter\n\n    if not test:\n        return {}\n    \n    letter_counts = Counter(test.split())\n    max_count = letter_counts.most_common(1)[0][1]\n    result = {k:v for k, v in letter_counts.items() if v == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # remove characters from s if they are in c\n    result = ''.join([char for char in s if char not in c])\n\n    # check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return (result, is_palindrome)\n\n\ndef main():\n    tests = [\n        (\"abcde\", \"ae\", ('bcd', False)),\n        (\"abcdef\", \"b\", ('acdef', False)),\n        (\"abcdedcba\", \"ab\", ('cdedc', True))\n    ]\n\n    for s, c, expected_output in tests:\n        actual_output = reverse_delete(s, c)\n        assert actual_output == expected_output, f\"Expected {expected_output}, but got {actual_output}\"\n\n    print(\"All tests passed!\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    def count_odd(s):\n        return len([x for x in s if int(x) % 2 != 0])\n    \n    output = []\n    for i, item in enumerate(lst):\n        item = \"the number of odd elements \" + str(count_odd(item)) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\"\n        output.append(item)\n    \n    return output"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    # Your code here\n    smallest = current_sum = nums[0]\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        smallest = min(smallest, current_sum)\n    return smallest"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # your code here"}
{"task_id": "HumanEval/116", "completion": "def count_ones(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count\n\ndef sort_array(arr):\n    def helper(n):\n        count = count_ones(n)\n        return (count, -n) # return a tuple so that we can sort by the first value and then by the second one in case of equal number of ones\n\n    return sorted(arr, key=helper)"}
{"task_id": "HumanEval/117", "completion": "def is_consonant(c):\n    \"\"\"Check if a given character c is a consonant.\"\"\"\n    return not (c.isalpha() and c.lower() in 'aeiou')\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    return [w for w in words if sum(1 for c in w if is_consonant(c)) == n]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n\n    index = -1\n    for i, letter in enumerate(reversed(word)):\n        if letter.lower() in vowels:\n            index = len(word) - 1 - i\n            break\n\n    while index > 0 and word[index].isalpha():\n        if word[index].lower() in consonants:\n            return word[index]\n\n        index -= 1\n\n    return ''"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for i in lst[0]:\n        if i == '(':\n            stack.append(')')\n        elif not stack or stack[-1] != i:\n            return \"No\"\n        else:\n            stack.pop()\n\n    for i in lst[1]:\n        if i == ')':\n            return \"No\"\n        else:\n            stack.append(i)\n\n    if len(stack) > 0:\n        return \"No\"\n    else:\n        return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # First, we sort the list using heapsort\n    def heapify(arr, n, i):\n        largest = i \n        l = 2 * i + 1  \n        r = 2 * i + 2 \n        if l < n and arr[i] < arr[l]: \n            largest = l \n        if r < n and arr[largest] < arr[r]: \n            largest = r \n        if largest != i: \n            arr[i],arr[largest] = arr[largest],arr[i]  \n            heapify(arr, n, largest) \n    def buildHeap(arr): \n        n = len(arr) \n        for i in range(n // 2 - 1, -1, -1): \n            heapify(arr, n, i) \n    buildHeap(arr)\n\n    # Then we create a new array of k elements\n    result = []\n    for _ in range(k):\n        # Pop the maximum element from the heap using max heappop\n        result.append(heapq.heappop(arr))\n\n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n    lst = [i for i in range(len(lst)) if i % 2 == 0]\n    print(lst)\n    sum_lst = sum(i for i in lst)\n    return sum_lst"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum([i for i in arr[:k] if len(str(i)) <= 2])"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    #base case\n    if n == 0:\n        return []\n\n    elif n == 1:\n        return [1]\n\n    else:\n        collatz = get_odd_collatz(n//2) if n % 2 == 0 else get_odd_collatz(3*n + 1)\n        if len(collatz) != 0 and collatz[0] > n:\n            return [n]\n        elif n % 2 == 1:\n            return [n] + collatz\n        else:\n            return collatz"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    pattern = r'^([0][1-9]|[1][0-2])-([0][1-9]|[12][0-9]|3[01])-(\\d{4})$'\n\n    if len(date) == 0:\n        return False\n\n    match = re.match(pattern, date)\n    if not match:\n        return False\n\n    day = int(date.split('-')[1])\n    month = int(date.split('-')[0])\n    year = int(date.split('-')[2])\n\n    days_in_month = {\n        1: 31,\n        2: 29, # Leap year is not supported\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if day < 1 or day > days_in_month[month]:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_in_month[2] = 29\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "import re\ndef split_words(txt):\n    return re.split('\\s+|\\,', txt) if not re.search('[a-z]', txt) else [w for w in txt if ord(w)%2==1]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    prev = lst[0]\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        prev = num\n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n == 1 or n == 0:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    length = end - start + 1\n\n    if length < 2:\n        return \"NO\"\n\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    prod = 1\n    sum_mag = 0\n\n    for num in arr:\n        mag = abs(num)\n\n        if num < 0:\n            prod *= -1\n\n        sum_mag += mag\n\n    return prod * sum_mag"}
{"task_id": "HumanEval/129", "completion": "import heapq\n\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def findPath(x, y, steps, path):\n        if len(path) == steps:\n            return path\n        # Move up\n        if x-1 >= 0:\n            path.append(grid[x-1][y])\n            findPath(x-1, y, steps+1, path[:])\n            path.pop()\n        # Move down\n        if x+1 < n:\n            path.append(grid[x+1][y])\n            findPath(x+1, y, steps+1, path[:])\n            path.pop()\n        # Move left\n        if y-1 >= 0:\n            path.append(grid[x][y-1])\n            findPath(x, y-1, steps+1, path[:])\n            path.pop()\n        # Move right\n        if y+1 < n:\n            path.append(grid[x][y+1])\n            findPath(x, y+1, steps+1, path[:])\n            path.pop()\n\n    min_path = []\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                findPath(i, j, 0, [])\n                return min_path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n should be non-negative.\")\n\n    result = []\n    for i in range(1, n+2):\n        if i % 2 == 0:\n            result.append(1 + (i / 2))\n        else:\n            last3 = [result[i-1], result[i-2], result[-1]]\n            result.append(sum(last3))\n\n    return result"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n    #base case\n    if n < 10:\n        return 1 if (n%2 != 0) else 0\n\n    # recursive case\n    else:\n        # get the last digit of n\n        m = n % 10\n        # if m is odd, multiply it by digits(n//10),\n        # else just call digits on n//10\n        return m * digits(n//10) if (m%2 != 0) else digits(n//10)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    #Round each element of the list to the upper int(Ceiling)\n    new_lst = [round(x**2) for x in lst]\n    return sum(new_lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip() # Remove leading and trailing whitespace\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if (last_char in \"aeiou\") or (last_char in \"AEIOU\"):\n        return False\n\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]:\n            return i\n\n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    positive_int = None\n    negative_int = None\n\n    for i in lst:\n        if i > 0 and (positive_int is None or i < positive_int):\n            positive_int = i\n        elif i < 0 and (negative_int is None or i > negative_int):\n            negative_int = i\n    return (negative_int, positive_int)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n\n    if type(a) == str and type(b) == str:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    elif type(a) != type(b):\n        return None\n    else:\n        pass\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    if n < 12:\n        return False\n    else:\n        for i in range(1, n // 2 + 1):\n            j = i + 1\n            k = j + 1\n            l = k + 1\n\n            if i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                sum = i + j + k + l\n\n                if sum == n:\n                    return True\n\n        return False"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    \n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= factorial(i) * factorial(n - i + 1)\n        return result"}
{"task_id": "HumanEval/140", "completion": "import re\ndef fix_spaces(text):\n    text = re.sub(r\"\\s+\", lambda m: \"-\" if len(m.group()) > 2 else \"_\", text)\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if \".\" not in file_name:\n        return \"No\"\n    else:\n        dot_index = file_name.index(\".\")\n\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return \"No\"\n\n    first_part = file_name[:dot_index]\n    second_part = file_name[dot_index+1:]\n\n    if not first_part or not any(x.isalpha() for x in first_part):\n        return \"No\"\n\n    allowed_types = [\"txt\", \"exe\", \"dll\"]\n    if second_part not in allowed_types:\n        return \"No\"\n\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total_sum = 0\n    \n    for index, element in enumerate(lst):\n        if index % 3 == 0:\n            element = element ** 2\n        elif index % 4 == 0:\n            element = element ** 3\n        \n        total_sum += element\n\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "import math\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    f1 = Fraction(x)\n    f2 = Fraction(n)\n    return (f1 * f2).denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(x) for x in str(abs(num)))\n\n    return sorted(nums, key=sum_of_digits)"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            k = 2 * i - j + 1\n\n            if k <= n and (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n    if not (planet1 in planets and planet2 in planets):\n        return ()\n\n    i = planets.index(planet1)\n    j = planets.index(planet2)\n\n    if i > j:\n        temp = i\n        i = j\n        j = temp\n\n    return tuple(planets[i+1:j])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda word: (len(word), word))"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime.\n\n    >>> is_prime(7)\n    True\n    >>> is_prime(29)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(35)\n    False\n    \"\"\"\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    else: \n        return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    # Check for empty list\n    if not lst:\n        return 0\n\n    # Sum all odd squares\n    total = sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(i-j) for i, j in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    max_str = 0\n    strongest_extension = \"\"\n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = float(CAP - SM) / len(ext)\n        # print(\"For extension {} strength is {}\".format(ext, strength))\n        if strength > max_str:\n            strongest_extension = ext\n            max_str = strength\n    return \"{}.{}\".format(class_name, strongest_extension)\n\n\ndef main():\n    assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Slices.SErviNGSliCes\"\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == \"my_class.AA\"\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    if len(a) < len(b):\n        return False\n    \n    for i in range(len(b)):\n        pattern = b[i:] + b[:i]\n        if pattern in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\"\"\"\n\n    num = abs(num)\n\n    even_digit_count = len([digit for digit in str(num) if int(digit) % 2 == 0])\n    odd_digit_count = len([digit for digit in str(num) if int(digit) % 2 != 0])\n    return (even_digit_count, odd_digit_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    if number < 1 or number > 3999:\n        raise ValueError(\"Input must be between 1 and 3999\")\n\n    numeral = []\n    num_map = (('M', 1000), ('CM', 900), ('D', 500),\n                ('CD', 400), ('C', 100), ('XC', 90),\n                ('L', 50), ('XL', 40), ('X', 10),\n                ('IX', 9), ('V', 5), ('IV', 4), ('I', 1))\n\n    for numeral_pair in num_map:\n        while number >= numeral_pair[1]:\n            numeral.append(numeral_pair[0])\n            number -= numeral_pair[1]\n\n    return ''.join(numeral)"}
{"task_id": "HumanEval/157", "completion": "import math\n\ndef right_angle_triangle(a, b, c):\n    if a == b or b == c or a == c:\n        return False\n    elif (math.pow(a,2) + math.pow(b,2)) == math.pow(c,2):\n        return True\n    else: \n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    def get_unique_chars(word):\n        char_set = set()\n        for c in word:\n            char_set.add(c)\n\n        return len(char_set)\n\n    unique_max = 0\n    max_word = ''\n\n    for word in words:\n        num_of_unique_chars = get_unique_chars(word)\n        if num_of_unique_chars > unique_max:\n            max_word = word\n            unique_max = num_of_unique_chars\n        elif num_of_unique_chars == unique_max and word < max_word:\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    return [number + min(remaining, need), remaining - min(remaining, need)]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = float(operand[0])\n    for idx in range(len(operator)):\n        if operator[idx] == '+':\n            result += float(operand[idx + 1])\n        elif operator[idx] == '-':\n            result -= float(operand[idx + 1])\n        elif operator[idx] == '*':\n            result *= float(operand[idx + 1])\n        elif operator[idx] == '/':\n            result /= float(operand[idx + 1])\n        else:\n            raise Exception('Invalid operator')\n    return int(result)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    def switch_case(ch):\n        if 'a' <= ch.lower() <= 'z':\n            return ch.upper()\n        elif 'A' <= ch.lower() <= 'Z':\n            return ch.lower()\n        else:\n            return ch\n\n    is_letter = False\n    for c in s:\n        if 'a' <= c.lower() <= 'z' or 'A' <= c.lower() <= 'Z':\n            is_letter = True\n            break\n\n    if not is_letter:\n        return s[::-1]\n    else:\n        return ''.join([switch_case(ch) for ch in s])"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\""}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n\n    if a > b:\n        a, b = b, a\n\n    for x in range(a, b + 1):\n        if all(int(digit) % 2 == 0 for digit in str(x)):\n            result.append(x)\n\n    return sorted(result)"}

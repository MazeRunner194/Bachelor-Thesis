{"task_id": "csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You're given a list of deposit and withdrawal operations on a bank account that starts with\n        /// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n        /// at that point function should return True. Otherwise it should return False.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero (List<int> operations) \n        {\n            int currentBalance = 0;\n\n            foreach (var operation in operations) {\n                currentBalance += operation;\n\n                if(currentBalance < 0)\n                {\n                    return true;\n                }\n            }\n            return false;\n\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n        /// Empty sum should be equal to 0 and empty product should be equal to 1.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// \n        /// </summary>\n        public static List<int> SumProduct (List<int> numbers) \n        {\n            var sum = numbers.Count == 0 ? 0 : numbers.Sum();\n            var product = numbers.Count == 0 ? 1 : numbers.Aggregate((x, y) => x * y);\n\n            return new List<int>() {sum, product};\n        }\n    }\n}"}
{"task_id": "csharp/2", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input are two strings a and b consisting only of 1s and 0s.\n        /// Perform binary XOR on these inputs and return result also as a string.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor (string a, string b) \n        {\n            if(a == \"\" || b==\"\")\n            {\n                return \"\";\n            }\n\n            var result = new char[a.Length];\n\n            for(int i=0;i<a.Length;i++)\n            {\n                result[i]= (char)(a[i]^b[i]);\n            }\n            string rtn = String.Join(\"\",result);\n            \n            return rtn;\n        }\n\n        public static void Main() \n        {\n            Console.WriteLine(StringXor(\"101\",\"011\"));  \n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Out of list of strings, return the Longest one. Return the first one in case of multiple\n        /// strings of the same length. Return None in case the input list is empty.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest (List<string> strings) \n        {\n            if(strings.Count == 0)\n                return null;\n\n            var longest = \"\";\n            foreach (var s in strings) {\n                if(s.Length > longest.Length){\n                    longest = s;\n                }\n            }\n            return longest;\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return a greatest common divisor of two integers a and b\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor (int a, int b) \n        {\n            if (a < b) \n            {\n                var t = a;\n                a = b;\n                b = t;\n            }\n\n            while (b != 0) \n            {\n                var remainder = a % b;\n                a = b;\n                b = remainder;\n            }\n\n            return a;\n        }\n    }\n}"}
{"task_id": "csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n        /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n        /// Return the string with numbers sorted from smallest to largest\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers (string numbers) \n        {\n            var numberDict = new Dictionary<string, int>();\n\n            // Build a dictionary of each number in the string\n            var numArray = numbers.Split(' ');\n            foreach (var number in numArray) \n            {\n                if (numberDict.ContainsKey(number)) \n                {\n                    numberDict[number]++;\n                }\n                else \n                {\n                    numberDict[number] = 1;\n                }\n            }\n\n            // Sort by number count, ascending\n            var sortedNumbers = numberDict.OrderBy(x => x.Value).Select(kvp => kvp.Key);\n\n            return string.Join(\" \", sortedNumbers);\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given list of numbers (of at least two elements), apply a linear transform to that list,\n        /// such that the smallest number will become 0 and the largest will become 1\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit (List<double> numbers) \n        {\n            if (numbers == null || numbers.Count < 2)\n                return new List<double>();\n\n            var min = numbers.Min();\n            var max = numbers.Max();\n\n            return numbers.Select(x => (x - min) / (max - min)).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase (string string0) \n        {\n            char[] charArray = string0.ToCharArray();\n\n            for(int i = 0; i < charArray.Length; i++)\n            {\n                if (charArray[i] == ' '.ToCharArray()[0])\n                {\n                    continue;\n                } else if (charArray[i] >= 'a'.ToCharArray()[0] && charArray[i] <= 'z'.ToCharArray()[0])\n                {\n                    charArray[i] = (char)(charArray[i] - 32);\n                } else if (charArray[i] >= 'A'.ToCharArray()[0] && charArray[i] <= 'Z'.ToCharArray()[0])\n                {\n                    charArray[i] = (char)(charArray[i] + 32);\n                }\n            }\n\n            return new string(charArray);\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return only positive numbers in the list.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive (List<int> l) \n        {\n            return l.Where(x => x > 0).ToList();"}
{"task_id": "csharp/9", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return true if a given number is prime, and false otherwise.\n        /// >>> IsPrime(6)\n        /// False\n        /// >>> IsPrime(101)\n        /// True\n        /// >>> IsPrime(11)\n        /// True\n        /// >>> IsPrime(13441)\n        /// True\n        /// >>> IsPrime(61)\n        /// True\n        /// >>> IsPrime(4)\n        /// False\n        /// >>> IsPrime(1)\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPrime (int n) \n        {\n            if (n <= 1) return false;\n\n            for (var i = 2; i * i <= n; i++)\n            {\n                if (n % i == 0)\n                    return false;\n            }\n            \n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted Unique elements in a list\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>\n        public static List<int> Unique (List<int> l) \n        {\n            return l.Distinct().OrderBy(x=>x).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/11", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// PrimeFib returns n-th number that is a Fibonacci number and it's also prime.\n        /// >>> PrimeFib(1)\n        /// 2\n        /// >>> PrimeFib(2)\n        /// 3\n        /// >>> PrimeFib(3)\n        /// 5\n        /// >>> PrimeFib(4)\n        /// 13\n        /// >>> PrimeFib(5)\n        /// 89\n        /// \n        /// </summary>\n        public static int PrimeFib (int n) {\n            \n            List<Int64> fibs = new List<long>();\n            Int64 a=0, b=1;\n            while (fibs.Count < n) {\n                var currentFib = a + b;\n                if(IsPrime(currentFib))\n                    fibs.Add(currentFib);\n                a = b;\n                b = currentFib;\n            }\n\n            return Convert.ToInt32(fibs[n - 1]);\n        }\n\n        private static bool IsPrime(Int64 n) {\n            if (n <= 1) {\n                return false;\n            } else if (n == 2) {\n                return true;\n            } else if (n % 2 == 0) {\n                return false;\n            }\n\n            var boundary = Convert.ToInt32(Math.Floor(Math.Sqrt(n)));\n            for (int i = 3; i <= boundary; i += 2) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// TriplesSumToZero takes a list of integers as an input.\n        /// it returns True if there are three distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// \n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero (List<int> l) \n        {\n            foreach (var a in l)\n                foreach (var b in l)\n                    foreach (var c in l)\n                        if (a != b && b != c && c != a && a + b + c == 0)\n                            return true;\n            \n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/13", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// PairsSumToZero takes a list of integers as an input.\n        /// it returns True if there are two distinct elements in the list that\n        /// sum to zero, and False otherwise.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// False\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool PairsSumToZero (List<int> l) \n        {\n            foreach(var item in l){\n                if(l.Contains(-item)){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n        /// Fib4(0) -> 0\n        /// Fib4(1) -> 0\n        /// Fib4(2) -> 2\n        /// Fib4(3) -> 0\n        /// Fib4(n) -> Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4).\n        /// Please write a function to efficiently compute the n-th element of the Fib4 number sequence.  Do not use recursion.\n        /// >>> Fib4(5)\n        /// 4\n        /// >>> Fib4(6)\n        /// 8\n        /// >>> Fib4(7)\n        /// 14\n        /// \n        /// </summary>\n        public static int Fib4 (int n) {"}
{"task_id": "csharp/15", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return Median of elements in the list l.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median (List<int> l) \n        {\n            // Implement this function"}
{"task_id": "csharp/16", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Checks if given string is a palindrome\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPalindrome (string text) \n        {\n            var reversedText = new string(text.Reverse().ToArray());\n            \n            if (reversedText == text)\n                return true;\n            else\n                return false;\n        }\n    }\n}"}
{"task_id": "csharp/17", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// RemoveVowels is a function that takes string and returns string without vowels.\n        /// >>> RemoveVowels('')\n        /// ''\n        /// >>> RemoveVowels(\"abcdef\\nghijklm\")\n        /// 'bcdf\\nghjklm'\n        /// >>> RemoveVowels('abcdef')\n        /// 'bcdf'\n        /// >>> RemoveVowels('aaaaa')\n        /// ''\n        /// >>> RemoveVowels('aaBAA')\n        /// 'B'\n        /// >>> RemoveVowels('zbcd')\n        /// 'zbcd'\n        /// \n        /// </summary>\n        public static string RemoveVowels (string text) \n        {\n            var vowels = new char[] {'a', 'e', 'i', 'o', 'u'};\n            return new string(text.Where(c => !vowels.Contains(Char.ToLower(c))).ToArray());\n        }\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return True if all numbers in the list l are below threshold t.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold (List<int> l, int t) \n        {\n            return !l.Any(i => i >= t);\n        }\n    }\n}"}
{"task_id": "csharp/19", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Add two numbers x and y\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// </summary>\n        public static int Add (int x, int y) \n        {"}
{"task_id": "csharp/20", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Check if two words have the same characters.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// \n        /// </summary>\n        public static bool SameChars (string s0, string s1) \n        {"}
{"task_id": "csharp/21", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return n-th Fibonacci number.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// </summary>\n        public static int Fib (int n) \n        {"}
{"task_id": "csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return sorted unique Common elements for two lists.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// </summary>\n        public static List<int> Common (List<int> l1, List<int> l2) \n        {\n            var common = l1.Intersect(l2).ToList();\n\n            return common;\n        }\n        \n        public static void Main (String[] args) \n        {\n            // keep this function call here \n            Console.WriteLine(string.Join(\",\", Common(new List<int>{1, 4, 3, 34, 653, 2, 5}, new List<int>{5, 7, 1, 5, 9, 653, 121})));\n            Console.WriteLine(string.Join(\",\", Common(new List<int>{5, 3, 2, 8}, new List<int>{3, 2})));\n        }\n    }\n}"}
{"task_id": "csharp/23", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n        /// >>> LargestPrimeFactor(13195)\n        /// 29\n        /// >>> LargestPrimeFactor(2048)\n        /// 2\n        /// \n        /// </summary>\n        public static int LargestPrimeFactor (int n) \n        {\n            var i = 2;\n\n            while (i < n)\n            {\n                if (n % i == 0)\n                    return LargestPrimeFactor(n/i);\n\n                else\n                    i++;\n            }\n            return i;\n        }\n    }\n}"}
{"task_id": "csharp/24", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// SumToN is a function that sums numbers from 1 to n.\n        /// >>> SumToN(30)\n        /// 465\n        /// >>> SumToN(100)\n        /// 5050\n        /// >>> SumToN(5)\n        /// 15\n        /// >>> SumToN(10)\n        /// 55\n        /// >>> SumToN(1)\n        /// 1\n        /// \n        /// </summary>\n        public static int SumToN (int n) \n        {\n            // Add your code here\n            return (n * (n + 1)) / 2;\n        }\n    }\n}"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        // Polynomial Derivative\n\n        //xs represent coefficients of a polynomial.\n        //xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        // Return Derivative of this polynomial in the same form.\n\n        //>>> Derivative([3, 1, 2, 4, 5])\n        // [1, 4, 12, 20]\n        // >>> Derivative([1, 2, 3])\n        // [2, 6]\n\n        public static List<int> Derivative (List<int> xs) \n        {"}
{"task_id": "csharp/26", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n        /// Fibfib(0) == 0\n        /// Fibfib(1) == 0\n        /// Fibfib(2) == 1\n        /// Fibfib(n) == Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3).\n        /// Please write a function to efficiently compute the n-th element of the Fibfib number sequence.\n        /// >>> Fibfib(1)\n        /// 0\n        /// >>> Fibfib(5)\n        /// 4\n        /// >>> Fibfib(8)\n        /// 24\n        /// \n        /// </summary>\n        public static int Fibfib (int n) \n        {\n            if (n <= 3)\n                return 0;\n\n            List<int> fibs = new List<int>(n + 1);\n\n            for (int i = 0; i < n + 1; i++)\n            {\n                if (i == 0 || i == 1 || i == 2)\n                    fibs.Add(0);\n                else\n                {\n                    int previousPreviousIndex = i - 3 >= 0 ? i - 3 : 0;\n                    fibs.Add(fibs[previousPreviousIndex] + fibs[i - 1] + fibs[i - 2]);\n                }\n            }\n\n            return fibs[n];\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function VowelsCount which takes a string representing\n        /// a word as input and returns the number of vowels in the string.\n        /// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n        /// vowel, but only when it is at the end of the given word.\n        /// \n        /// Example:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount (string s) \n        {\n            var vowelCount = 0;\n\n            // Implement me\n            if(s.Length == 1)\n            {\n                return s switch\n                {\n                    \"a\" or \"e\" or \"i\" or \"o\" or \"u\" => ++vowelCount,\n                    _ => vowelCount,\n                };\n            }\n\n            else \n            {\n                for (int i = 0; i < s.Length; i++)\n                {\n                    if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n                        vowelCount++;\n\n                    else if(i+1 < s.Length && s[i] == 'y')\n                    {\n                        i++;\n                        vowelCount++;\n                    }\n                }\n            }\n\n            return vowelCount;\n        }\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n        /// zero, and has a frequency greater than or equal to the value of the integer itself. \n        /// The frequency of an integer is the number of times it appears in the list.\n        /// If no such a value exist, return -1.\n        /// Examples:\n        /// Search([4, 1, 2, 2, 3, 1]) == 2\n        /// Search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        /// Search([5, 5, 4, 4, 4]) == -1\n        /// \n        /// </summary>\n        public static int Search (List<int> lst) \n        {\n            int maxFrequency = 0;\n            foreach(var item in lst)\n            {\n                var count = lst.Count(i => i==item);\n                if (count >= item && count > maxFrequency)\n                {\n                    maxFrequency = count;\n                }\n            }\n            \n            return maxFrequency == 0 ? -1 : maxFrequency;\n        }\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "using System;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given the lengths of the three sides of a triangle. Return the area of\n        /// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n        /// Otherwise return -1\n        /// Three sides make a valid triangle when the sum of any two sides is greater \n        /// than the third side.\n        /// Example:\n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// </summary>\n        public static object TriangleArea (int a, int b, int c) \n        {"}
{"task_id": "csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function that returns True if the object q will fly, and False otherwise.\n        /// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n        /// \n        /// Example:\n        /// WillItFly([1, 2], 5) \u279e False \n        /// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n        /// \n        /// WillItFly([3, 2, 3], 1) \u279e False\n        /// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n        /// \n        /// WillItFly([3, 2, 3], 9) \u279e True\n        /// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n        /// \n        /// WillItFly([3], 5) Sar\ufffd True\n        /// # 3 is less than the maximum possible weight, and it's balanced.\n        /// </summary>\n        public static bool WillItFly (List<int> q, int w) \n        {\n            if (q == null || !q.Any()) return false;\n            if (q.Count == 1 && q[0] <= w) return true;\n\n            var isPalindromic = IsPalindrome(q);\n            var sum = q.Sum();\n            \n            if (!isPalindromic) return false;\n            return sum <= w;\n        }\n        \n        static bool IsPalindrome<T>(List<T> items)\n        {\n            for (int i = 0; i < items.Count/2; ++i)\n                if (!items[i].Equals(items[items.Count -1 - i]))\n                    return false;\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n        /// and false otherwise.\n        /// Knowing that (a) is less then 100. \n        /// Example:\n        /// IsMultiplyPrime(30) == True\n        /// 30 = 2 * 3 * 5\n        /// </summary>"}
{"task_id": "csharp/32", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You will be given a number in decimal form and your task is to convert it to\n        /// binary format. The function should return a string, with each character representing a binary\n        /// number. Each character in the string will be '0' or '1'.\n        /// \n        /// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n        /// The extra characters are there to help with the format.\n        /// \n        /// Examples:\n        /// DecimalToBinary(15)   # returns \"db1111db\"\n        /// DecimalToBinary(32)   # returns \"db100000db\"\n        /// \n        /// </summary>\n        public static string DecimalToBinary (int decimalNumber) \n        {\n            var binary = Convert.ToString(decimalNumber, 2);\n            return \"db\" + binary + \"db\";\n        }\n    }\n}"}
{"task_id": "csharp/33", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// Your task is to check if the string is happy or not.\n        /// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n        /// For example:\n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy (string s) \n        {\n            if (s.Length < 3) return false;\n            \n            for (int i = 0; i < s.Length - 2; i++) \n            {\n                string s1 = s[i].ToString() + s[i+1].ToString() + s[i+2].ToString();\n                \n                if (s1.Distinct().Count() != s1.Length) return false;\n            }\n            \n            return true;\n        }\n        \n        public static void Main(string[] args) \n        {\n            Console.WriteLine(\"Is \\\"a\\\" happy? \" + IsHappy(\"a\"));\n            Console.WriteLine(\"Is \\\"aa\\\" happy? \" + IsHappy(\"aa\"));\n            Console.WriteLine(\"Is \\\"abcd\\\" happy? \" + IsHappy(\"abcd\"));\n            Console.WriteLine(\"Is \\\"aabb\\\" happy? \" + IsHappy(\"aabb\"));\n            Console.WriteLine(\"Is \\\"adb\\\" happy? \" + IsHappy(\"adb\"));\n            Console.WriteLine(\"Is \\\"xyy\\\" happy? \" + IsHappy(\"xyy\"));\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// It is the last week of the semester and the teacher has to give the grades\n        /// to students. The teacher has been making her own algorithm for grading.\n        /// The only problem is, she has lost the code she used for grading.\n        /// She has given you a list of GPAs for some students and you have to write \n        /// a function that can output a list of letter grades using the following table:\n        /// GPA       |    Letter grade\n        /// 4.0                A+\n        /// > 3.7                A \n        /// > 3.3                A- \n        /// > 3.0                B+\n        /// > 2.7                B \n        /// > 2.3                B-\n        /// > 2.0                C+\n        /// > 1.7                C\n        /// > 1.3                C-\n        /// > 1.0                D+ \n        /// > 0.7                D \n        /// > 0.0                D-\n        /// 0.0                E\n        /// \n        /// \n        /// Example:\n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// </summary>\n        public static List<string> NumericalLetterGrade (List<object> grades) \n        {\n            var gradesAsStrings = new CompareLogic().Compare(grades.Select(x => x as string).ToList(), grades.Select(x => x as object).ToList()).AreEqual;\n            if (gradesAsStrings)\n                return grades.Cast<double>().Select(x => x switch\n                {\n                    >= 4.0 => \"A+\",\n                    > 3.7 => \"A\",\n                    > 3.3 => \"A-\",\n                    > 3.0 => \"B+\",\n                    > 2.7 => \"B\",\n                    > 2.3 => \"B-\",\n                    > 2.0 => \"C+\",\n                    > 1.7 => \"C\",\n                    > 1.3 => \"C-\",\n                    > 1.0 => \"D+\",\n                    > 0.7 => \"D\",\n                    > 0.0 => \"D-\",\n                    _ => \"E\"\n                }).ToList();\n            else\n                throw new Exception(\"All values must be strings\");\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes a string and returns True if the string\n        /// length is a prime number or False otherwise\n        /// Examples\n        /// PrimeLength('Hello') == True\n        /// PrimeLength('abcdcba') == True\n        /// PrimeLength('kittens') == True\n        /// PrimeLength('orange') == False\n        /// \n        /// </summary>\n        public static bool PrimeLength (string string0) \n        {\n            int count = 0;\n\n            for(int i=1;i<=string0.Length;i++)\n                if(string0.Length%i==0)\n                    count++;\n            \n            return count==2?true:false;\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive integer N, return the total sum of its digits in binary.\n        /// \n        /// Example\n        /// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        /// For N = 150, the sum of digits will be 6 the output should be \"110\".\n        /// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        /// \n        /// Variables:\n        /// @N integer\n        /// Constraints: 0 \u2264 N \u2264 10000.\n        /// Output:\n        /// a string of binary number\n        /// </summary>\n        public static string Solve (int N) \n        {\n            var total = 0;\n            while(N > 0){\n                var remainder = N % 2;\n                total += remainder;\n                N /= 2;\n            }\n\n            return Convert.ToString(total, 2);\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a 2 dimensional data, as a nested lists,\n        /// which is similar to matrix, however, unlike matrices,\n        /// each row may contain a different number of columns.\n        /// Given lst, and integer x, find integers x in the list,\n        /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        /// each tuple is a coordinate - (row, columns), starting with 0.\n        /// Sort coordinates initially by rows in ascending order.\n        /// Also, sort coordinates of the row by columns in descending order.\n        /// \n        /// Examples:\n        /// GetRow([\n        /// [1,2,3,4,5,6],\n        /// [1,2,3,4,1,6],\n        /// [1,2,3,4,5,1]\n        /// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n        /// GetRow([], 1) == []\n        /// GetRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n        /// \n        /// </summary>\n        public static List<List<int>> GetRow (List<List<int>> lst, int x) \n        {\n            return lst.SelectMany((row, i) => row.Select((v, j) => v == x ? new[] {i, j} : new List<int>())\n                    .Where(t => t.Any())\n                    .OrderBy(t=>t[0]).ThenByDescending(t=>t[1]))\n                    .Select(t => (List<int>) t).ToList();\n        }"}
{"task_id": "csharp/38", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a list of integers.\n        /// Write a function NextSmallest() that returns the 2nd smallest element of the list.\n        /// Return None if there is no such element.\n        /// \n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>"}
{"task_id": "csharp/39", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You'll be given a string of words, and your task is to count the number\n        /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n        /// Sentences are delimited by '.', '?' or '!'.\n        /// \n        /// For example:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored (string S) {"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of integers.\n        /// You need to find the largest prime value and return the sum of its digits.\n        /// \n        /// Examples:\n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd (List<int> lst) \n        {\n            return lst.Max();\n        }\n    }\n}"}
{"task_id": "csharp/41", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a dictionary, return True if all keys are strings in lower \n        /// case or all keys are strings in upper case, else return False.\n        /// The function should return False is the given dictionary is empty.\n        /// Examples:\n        /// CheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n        /// CheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n        /// CheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n        /// CheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n        /// CheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n        /// \n        /// </summary>\n        public static bool CheckDictCase (Dictionary<object, string> dict) \n        {\n            if(dict == null || dict.Count == 0)\n                return false;\n\n            //Check if all keys are strings\n            if (!dict.Keys.All(item => item is string))\n                return false;\n            \n            //If all values are lower case, then return true\n            if (dict.Values.All(item => item.Equals(item.ToLower())))\n                return true;\n\n            //If all values are upper case, then return true\n            if (dict.Values.All(item => item.Equals(item.ToUpper())))\n                return true;\n            \n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes a value (string) representing a number\n        /// and returns the closest integer to it. If the number is equidistant\n        /// from two integers, round it away from zero.\n        /// \n        /// Examples\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger (string value) \n        {"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a positive integer n, you have to make a pile of n levels of stones.\n        /// The first level has n stones.\n        /// The number of stones in the next level is:\n        /// - the next odd number if n is odd.\n        /// - the next even number if n is even.\n        /// Return the number of stones in each level in a list, where element at index\n        /// i represents the number of stones in the level (i+1).\n        /// \n        /// Examples:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>\n        public static List<int> MakeAPile (int n) \n        {\n            var levels = new List<int>();\n\n            for (var i=1; i<=n; i++) {\n                if (i % 2 == 0)\n                {\n                    levels.Add(i+1);\n                } else {\n                    levels.Add(i+2);\n                }\n            }\n            return levels;\n        }\n    }\n}"}
{"task_id": "csharp/44", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You will be given a string of words separated by commas or spaces. Your task is\n        /// to split the string into words and return an array of the words.\n        /// \n        /// For example:\n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString (string s) \n        {\n            //split the string into an array of words\n            var words = Regex.Split(s, @\"\\s*,\\s*|\\s+\");\n            \n            return words.ToList();\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// This function takes two positive numbers x and y and returns the\n        /// biggest even integer number that is in the range [x, y] inclusive. If \n        /// there's no such number, then the function should return -1.\n        /// \n        /// For example:\n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// </summary>\n        public static int ChooseNum (int x, int y)"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two positive integers n and m, and your task is to compute the\n        /// average of the integers from n through m (including n and m). \n        /// Round the answer to the nearest integer and convert that to binary.\n        /// If n is greater than m, return -1.\n        /// Example:\n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// </summary>\n        public static string RoundedAvg (int n, int m) \n        {\n            if(n > m) return \"-1\";\n            int sum = n + m;\n            double average = Math.Round((double)sum / 2);\n            \n            Regex regex = new Regex(@\"\\.(.*)\");\n            Match match = regex.Match(average.ToString());\n\n            string binaryString = Convert.ToString(Convert.ToInt32(match.Groups[1]), 2).PadLeft(8, '0');\n            return $\"0b{binaryString}\";\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Implement the Function F that takes n as a parameter,\n        /// and returns a list oF size n, such that the value oF the element at index i is the Factorial oF i iF i is even\n        /// or the sum oF numbers From 1 to i otherwise.\n        /// i starts From 1.\n        /// the Factorial oF i is the multiplication oF the numbers From 1 to i (1 * 2 * ... * i).\n        /// Example:\n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F (int n) \n        {"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a positive integer n, return a tuple that has the number of even and odd\n        /// integer palindromes that fall within the range(1, n), inclusive.\n        /// \n        /// Example 1:\n        /// \n        /// Input: 3\n        /// Output: (1, 2)\n        /// Explanation:\n        /// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n        /// \n        /// Example 2:\n        /// \n        /// Input: 12\n        /// Output: (4, 6)\n        /// Explanation:\n        /// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n        /// \n        /// Note:\n        /// 1. 1 <= n <= 10^3\n        /// 2. returned tuple has the number of even and odd integer palindromes respectively.\n        /// \n        /// </summary>\n        public static List<int> EvenOddPalindrome (int n) \n        {\n            var count = new int[] { 0, 0 };\n\n            for(var i=1; i<=n; i++) \n            {\n                if (i.ToString() == ReverseString(i.ToString())) \n                {\n                    // If the string is equal to its reverse\n                    count[i % 2] += 1;\n                }\n            }\n            return new List<int> {count[0], count[1]};\n        }\n\n        private static string ReverseString(string s) \n        {\n            char[] charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n        /// numbers in the array will be randomly ordered. Your task is to determine if\n        /// it is possible to get an array sorted in non-decreasing order by performing \n        /// the following operation on the given array:\n        /// You are allowed to perform right shift operation any number of times.\n        /// \n        /// One right shift operation means shifting all elements of the array by one\n        /// position in the right direction. The last element of the array will be moved to\n        /// the starting position in the array i.e. 0th index. \n        /// \n        /// If it is possible to obtain the sorted array by performing the above operation\n        /// then return True else return False.\n        /// If the given array is empty then return True.\n        /// \n        /// Note: The given list is guaranteed to have unique elements.\n        /// \n        /// For Example:\n        /// \n        /// MoveOneBall([3, 4, 5, 1, 2])==>True\n        /// Explanation: By performin 2 right shift operations, non-decreasing order can\n        /// be achieved for the given array.\n        /// MoveOneBall([3, 5, 4, 1, 2])==>False\n        /// Explanation:It is not possible to get non-decreasing order for the given\n        /// array by performing any number of right shift operations.\n        /// \n        /// \n        /// </summary>\n        public static bool MoveOneBall (List<int> arr) \n        {\n            if(arr.Count == 0)\n            {\n                return true;\n            }\n\n            int max = arr.Max();\n            for(int i = 0; i < arr.Count; i++)\n            {\n                int current = arr[i];\n\n                if(current < max && current != max)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// In this problem, you will implement a function that takes two lists of numbers,\n        /// and determines whether it is possible to perform an Exchange of elements\n        /// between them to make lst1 a list of only even numbers.\n        /// There is no limit on the number of Exchanged elements between lst1 and lst2.\n        /// If it is possible to Exchange elements between the lst1 and lst2 to make\n        /// all the elements of lst1 to be even, return \"YES\".\n        /// Otherwise, return \"NO\".\n        /// For example:\n        /// Exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n        /// Exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n        /// It is assumed that the input lists will be non-empty.\n        /// \n        /// </summary>\n        public static string Exchange (List<int> lst1, List<int> lst2) \n        {\n            var firstList = lst1;\n            var secondList = lst2;\n            var count = 0;\n            \n            foreach(var number in firstList)\n            {\n                if (number % 2 == 0){\n                    continue;\n                } else {\n                    for(var i = 0; i < secondList.Count; i++)\n                    {\n                        if(secondList[i] % 2 != 0 ) \n                        {\n                            count++;\n                            var temp = firstList[count];\n                            firstList[count] = secondList[i];\n                            secondList[i] = temp;\n                        } else {\n                            continue;\n                        }\n                    }\n                }\n            }\n\n            if(firstList.All(n => n % 2 == 0)) {\n                return \"YES\";\n            } else {\n                return \"NO\";\n            }\n        }"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Task\n        /// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n        /// then check if the result string is palindrome.\n        /// A string is called palindrome if it reads the same backward as forward.\n        /// You should return a tuple containing the result string and True/False for the check.\n        /// Example\n        /// For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n        /// For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n        /// For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n        /// \n        /// </summary>\n        public static List<object> ReverseDelete (string s, string c) \n        {\n            var result = new List<object>();\n            // implement your solution here\n            \n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a rectangular grid of wells. Each row represents a single well,\n        /// and each 1 in a row represents a single unit of water.\n        /// Each well has a corresponding bucket that can be used to extract water from it, \n        /// and all buckets have the same capacity.\n        /// Your task is to use the buckets to empty the wells.\n        /// Output the number of times you need to lower the buckets.\n        /// \n        /// Example 1:\n        /// Input: \n        /// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        /// bucket_capacity : 1\n        /// Output: 6\n        /// \n        /// Example 2:\n        /// Input: \n        /// grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        /// bucket_capacity : 2\n        /// Output: 5\n        /// \n        /// Example 3:\n        /// Input: \n        /// grid : [[0,0,0], [0,0,0]]\n        /// bucket_capacity : 5\n        /// Output: 0\n        /// \n        /// Constraints:\n        /// * all wells have the same length\n        /// * 1 <= grid.length <= 10^2\n        /// * 1 <= grid[:,1].length <= 10^2\n        /// * grid[i][j] -> 0 | 1\n        /// * 1 <= capacity <= 10\n        /// \n        /// </summary>\n        public static int MaxFill (List<List<int>> grid, int capacity) \n        {\n            if (grid == null || grid.Count < 1 || grid[0].Count < 1) return -1;\n            // count the number of wells in each column\n            var colCounts = Enumerable.Range(0, grid[0].Count).Select(i => grid.Sum(row => row[i])).ToList();\n\n            int totalWater = 0;\n            foreach (var well in grid) {\n                for (int i=well.Count-1; i >=0 ; i--) {\n                    if (well[i] == 1) {\n                        well[i] = 0;\n                        totalWater++;\n                        colCounts[i]--;\n                        // check to see if there is a column that has run out of water\n                        if (colCounts[i] <= 0) return -1;\n                        // if we can fill the bucket, do so\n                        if (capacity >= well.Count - i) {\n                            capacity -= well.Count - i;\n                        } else {\n                            return totalWater + colCounts.Sum(count => count / capacity);\n                        }\n                    }\n                }\n            }\n\n            return totalWater + colCounts.Sum(count => count / capacity);\n        }\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a string s and a natural number n, you have been tasked to implement \n        /// a function that returns a list of all words from string s that contain exactly \n        /// n consonants, in order these words appear in the string s.\n        /// If the string s is empty then the function should return an empty list.\n        /// Note: you may assume the input string contains only letters and spaces.\n        /// Examples:\n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords (string s, int n) \n        {\n            return Regex.Split(s, @\"\\W+\")\n                            .Where(w => w.Count(c => \"aeiou\".Contains(c)) == n)\n                            .ToList();\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given an array arr of integers and a positive integer k, return a sorted list \n        /// of length k with the Maximum k numbers in arr.\n        /// \n        /// Example 1:\n        /// \n        /// Input: arr = [-3, -4, 5], k = 3\n        /// Output: [-4, -3, 5]\n        /// \n        /// Example 2:\n        /// \n        /// Input: arr = [4, -4, 4], k = 2\n        /// Output: [4, 4]\n        /// \n        /// Example 3:\n        /// \n        /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        /// Output: [2]\n        /// \n        /// Note:\n        /// 1. The length of the array will be in the range of [1, 1000].\n        /// 2. The elements in the array will be in the range of [-1000, 1000].\n        /// 3. 0 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static List<int> Maximum (List<int> arr, int k) \n        {\n            var list = new List<int>();\n            var queue = new Queue<int>(arr);\n\n            while (list.Count < k && queue.Any())\n            {\n                for(var i = 0; i < queue.Count; i++)\n                {\n                    if(queue.Peek() > list.LastOrDefault() && list.Count < k)\n                    {\n                        list.Add(queue.Dequeue());\n                    }\n                    else\n                    {\n                        queue.Dequeue();\n                        i--;\n                    }\n\n                    Console.WriteLine($\"Queue: {string.Join(\",\", queue)}\");\n                    Console.WriteLine($\"List: {string.Join(\",\", list)}\");\n                }\n            }\n\n            return list;\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a non-empty array of integers arr and an integer k, return\n        /// the sum of the elements with at most two digits from the first k elements of arr.\n        /// \n        /// Example:\n        /// \n        /// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        /// Output: 24 # sum of 21 + 3\n        /// \n        /// Constraints:\n        /// 1. 1 <= len(arr) <= 100\n        /// 2. 1 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static int AddElements (List<int> arr, int k) \n        {\n            // Initialize sum to 0\n            int sum = 0;\n\n            // Iterate over the first k elements of arr\n            for (int i = 0; i < k; i++) \n            {\n                // Check if the current element has at most two digits\n                if (Regex.IsMatch(arr[i].ToString(), @\"^\\d{1,2}$\")) \n                {\n                    // Add the current element to the sum\n                    sum += arr[i];\n                }\n            }\n\n            // Return the sum\n            return sum;\n        }\n    }\n}"}
{"task_id": "csharp/56", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given two intervals,\n        /// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n        /// The given intervals are closed which means that the interval (start, end)\n        /// includes both start and end.\n        /// For each given interval, it is assumed that its start is less or equal its end.\n        /// Your task is to determine whether the length of Intersection of these two \n        /// intervals is a prime number.\n        /// Example, the Intersection of the intervals (1, 3), (2, 4) is (2, 3)\n        /// which its length is 1, which not a prime number.\n        /// If the length of the Intersection is a prime number, return \"YES\",\n        /// otherwise, return \"NO\".\n        /// If the two intervals don't intersect, return \"NO\".\n        /// \n        /// \n        /// [input/output] samples:\n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// \n        /// </summary>\n        public static string Intersection (List<int> interval1, List<int> interval2) \n        {\n            int min = Math.Max(interval1[0], interval2[0]);\n            int max = Math.Min(interval1[1], interval2[1]);\n\n            if (max >= min)\n            {\n                var isPrime = true;\n                for (var i = 2; i <= Math.Sqrt(max - min); i++)\n                {\n                    if ((max - min) % i == 0)\n                    {\n                        isPrime = false;\n                        break;\n                    }\n                }\n\n                return isPrime ? \"YES\" : \"NO\";\n            }\n\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n        /// the last couple centuries. However, what people don't know is Tribonacci sequence.\n        /// Tribonacci sequence is defined by the recurrence:\n        /// Tri(1) = 3\n        /// Tri(n) = 1 + n / 2, if n is even.\n        /// Tri(n) =  Tri(n - 1) + Tri(n - 2) + Tri(n + 1), if n is odd.\n        /// For example:\n        /// Tri(2) = 1 + (2 / 2) = 2\n        /// Tri(4) = 3\n        /// Tri(3) = Tri(2) + Tri(1) + Tri(4)\n        /// = 2 + 3 + 3 = 8 \n        /// You are given a non-negative integer number n, you have to a return a list of the \n        /// first n + 1 numbers of the Tribonacci sequence.\n        /// Examples:\n        /// Tri(3) = [1, 3, 2, 8]\n        /// </summary>\n        public static List<object> Tri (int n) \n        {"}
{"task_id": "csharp/58", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a positive integer n, return the product of all odd digits.\n        /// Return 0 if all Digits are even.\n        /// For example:\n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits (int n) \n        {"}
{"task_id": "csharp/59", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that takes a string as input which contains only square brackets.\n        /// The function should return True if and only if there is a valid subsequence of brackets \n        /// where at least one bracket in the subsequence is nested.\n        /// \n        /// IsNested('[[]]')\ufffd\ufffd True\n        /// IsNested('[]]]]]]][[[[[]')\ufffd\ufffd False\n        /// IsNested('[][]')\ufffd\ufffd False\n        /// IsNested('[]')\ufffd\ufffd False\n        /// IsNested('[[][]]')\ufffd\ufffd True\n        /// IsNested('[[]][[')\ufffd\ufffd True\n        /// \n        /// </summary>\n        public static bool IsNested (string string0) \n        {\n            Stack<char> stack = new Stack<char>();\n            foreach (char c in string0) \n            {\n                if (c == '[') \n                {\n                    stack.Push(c);\n                }\n\n                else if (c == ']') \n                {\n                    if (stack.Count == 0) \n                    {\n                        return false;\n                    }\n                    else\n                    {\n                        stack.Pop();\n                    }\n                }\n            }\n\n            return stack.Count != 0;\n        }\n    }\n}"}
{"task_id": "csharp/60", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a list of numbers.\n        /// You need to return the sum of squared numbers in the given list,\n        /// round each element in the list to the upper int(Ceiling) first.\n        /// Examples:\n        /// For lst = [1,2,3] the output should be 14\n        /// For lst = [1,4,9] the output should be 98\n        /// For lst = [1,3,5,7] the output should be 84\n        /// For lst = [1.4,4.2,0] the output should be 29\n        /// For lst = [-2.4,1,1] the output should be 6\n        /// \n        /// </summary>\n        public static int SumSquares (List<object> lst) \n        {"}
{"task_id": "csharp/61", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns True if the last character\n        /// of a given string is an alphabetical character and is not\n        /// a part of a word, and False otherwise.\n        /// Note: \"word\" is a group of characters separated by space.\n        /// \n        /// Examples:\n        /// CheckIfLastCharIsALetter(\"apple pie\") \u279e False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") \u279e True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") \u279e False\n        /// CheckIfLastCharIsALetter(\"\") \u279e False \n        /// \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter (string txt) \n        {"}
{"task_id": "csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Create a function which returns the largest index of an element which\n        /// is not greater than or equal to the element immediately preceding it. If\n        /// no such element exists then return -1. The given array will not contain\n        /// duplicate values.\n        /// \n        /// Examples:\n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange (List<int> arr) \n        {"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Create a function that returns a tuple (a, b), where 'a' is\n        /// the largest of negative integers, and 'b' is the smallest\n        /// of positive integers in a list.\n        /// If there is no negative or positive integers, return them as None.\n        /// \n        /// Examples:\n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static List<object> LargestSmallestIntegers (List<int> lst) \n        {\n            var negatives = lst.Where(x => x < 0).ToList();\n            if (!negatives.Any())\n                return new List<object> {null, null};\n            var positives = lst.Where(x => x > 0).ToList();\n            if (!positives.Any())\n                return new List<object> {null, null};\n            return new List<object> { negatives.Max(), positives.Min() };\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// The Brazilian factorial is defined as:\n        /// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        /// where n > 0\n        /// \n        /// For example:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// \n        /// </summary>\n        public static int SpecialFactorial (int n) \n        {\n            int result = 1;\n            \n            // Your code goes here\n            \n        }\n    }\n}"}
{"task_id": "csharp/65", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a string representing a sentence,\n        /// the sentence contains some words separated by a space,\n        /// and you have to return a string that contains the words from the original sentence,\n        /// whose lengths are prime numbers,\n        /// the order of the words in the new string should be the same as the original one.\n        /// \n        /// Example 1:\n        /// Input: sentence = \"This is a test\"\n        /// Output: \"is\"\n        /// \n        /// Example 2:\n        /// Input: sentence = \"lets go for swimming\"\n        /// Output: \"go for\"\n        /// \n        /// Constraints:\n        /// * 1 <= len(sentence) <= 100\n        /// * sentence contains only letters\n        /// \n        /// </summary>\n        public static string WordsInSentence (string sentence) \n        {\n            // split the string into an array of words\n            var words = sentence.Split(' ');\n\n            // create a list to store the prime length words\n            var primeLengthWords = new List<string>();\n            \n            foreach(var word in words)\n            {\n                // check if the length of the current word is prime\n                bool isPrime = true;\n                \n                for (int i = 2; i < word.Length; i++)\n                {\n                    if(word.Length % i == 0)\n                    {\n                        isPrime = false;\n                        break;\n                    }\n                }\n\n                // if the length is prime, add it to the list\n                if (isPrime)\n                {\n                    primeLengthWords.Add(word);\n                }\n            }\n\n            // return a string containing the words with prime length\n            return string.Join(\" \", primeLengthWords);\n        }\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Your task is to implement a function that will Simplify the expression\n        /// x * n. The function returns True if x * n evaluates to a whole number and False\n        /// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n        /// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n        /// \n        /// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n        /// \n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify (string x, string n) \n        {\n            var pattern = @\"^(\\d+)/(\\d+)$\"; //match a string of digits followed by '/' and then another string of digits\n\n            if (!Regex.IsMatch(x, pattern) || !Regex.IsMatch(n, pattern))\n                throw new ArgumentException(\"The input strings are not in the format '<numerator>/<denominator>'\");\n\n            var regex = new Regex(pattern);\n            var matchX = regex.Match(x);\n            var numeratorX = Int32.Parse(matchX.Groups[1].Value);\n            var denominatorX = Int32.Parse(matchX.Groups[2].Value);\n            \n            var matchN = regex.Match(n);\n            var numeratorN = Int32.Parse(matchN.Groups[1].Value);\n            var denominatorN = Int32.Parse(matchN.Groups[2].Value);\n\n            //cancel out common factors\n            while (numeratorX % 2 == 0 && numeratorN % 2 == 0) {\n                numeratorX /= 2;\n                numeratorN /= 2;\n            }\n            \n            while (denominatorX % 2 == 0 && denominatorN % 2 == 0) {\n                denominatorX /= 2;\n                denominatorN /= 2;\n            }\n            \n            return Math.Abs(numeratorX * denominatorN - numeratorN * denominatorX) % 2 != 0 ? false : true;\n        }\n    }\n}"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Write a function which sorts the given list of integers\n        /// in ascending order according to the sum of their digits.\n        /// Note: if there are several items with similar sum of their digits,\n        /// order them based on their index in original list.\n        /// \n        /// For example:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints (List<int> nums) \n        {\n            var result = new List<int>();\n            for(var i = 0; i < nums.Count; i++)\n            {\n                var num = nums[i];\n                var sumOfDigits = GetSumOfDigits(num);\n                if (!result.Any())\n                {\n                    result.Add(num);\n                    continue;\n                }\n\n                var indexToInsert = -1;\n\n                for (var j = 0; j < result.Count; j++)\n                {\n                    var existingItem = result[j];\n                    var existingSumOfDigits = GetSumOfDigits(existingItem);\n\n                    if (sumOfDigits == existingSumOfDigits)\n                    {\n                        indexToInsert = j;\n                        break;\n                    }\n\n                    if (sumOfDigits < existingSumOfDigits)\n                    {\n                        indexToInsert = j;\n                        break;\n                    }\n                }\n\n                result.Insert(indexToInsert, num);\n            }\n\n            return result;\n        }\n\n        private static int GetSumOfDigits(int number)\n        {\n            var strNum = number.ToString();\n            var regex = new Regex(\"[0-9]\");\n            \n            return regex\n                .Matches(strNum)\n                .Cast<Match>()\n                .Select(x => x.Value)\n                .Sum(int.Parse);\n        }\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Write a function that takes an array of numbers as input and returns \n        /// the number of elements in the array that are greater than 10 and both \n        /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n        /// For example:\n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter (List<int> nums) \n        {\n            // Create a list of numbers greater than 10 that have odd first and last digits.\n            var specialNumbers = new List<int>();\n\n            foreach (var num in nums)\n            {\n                if (num > 10 && IsOdd(num.ToString()[0]) && IsOdd(num.ToString()[^1]))\n                {\n                    specialNumbers.Add(num);\n                }\n            }\n\n            return specialNumbers.Count;\n        }\n\n        private static bool IsOdd(char c) \n        {\n            switch (c) \n            {\n                case '1':\n                case '3':\n                case '5':\n                case '7':\n                case '9':\n                    return true;\n                default:\n                    return false;\n            }\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// You are given a positive integer n. You have to create an integer array a of length n.\n        /// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        /// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        /// and a[i] + a[j] + a[k] is a multiple of 3.\n        /// \n        /// Example :\n        /// Input: n = 5\n        /// Output: 1\n        /// Explanation: \n        /// a = [1, 3, 7, 13, 21]\n        /// The only valid triple is (1, 7, 13).\n        /// </summary>\n        public static int GetMaxTriples(int n) \n        {\n            int[] arr = new int[n];\n\n            for (int i = 0; i < n; ++i) \n            {\n                arr[i] = i * i - i + 1;\n            }\n\n            long count = 0;\n\n            for (int i = 0; i < arr.Length - 2; ++i) \n            {\n                for (int j = i + 1; j < arr.Length - 1; ++j) \n                {\n                    if (arr[i] % 3 == 0 || arr[j] % 3 == 0)\n                    {\n                        continue;\n                    }\n\n                    for (int k = j + 1; k < n; ++k) \n                    {\n                        if ((arr[i] + arr[j] + arr[k]) % 3 != 0) \n                        {\n                            continue;\n                        }\n\n                        count += 1;\n                    }\n                }\n            }\n\n            return Convert.ToInt32(count);\n        }\n    }\n}"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// There are eight planets in our solar system: the closerst to the Sun \n        /// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n        /// Uranus, Neptune.\n        /// Write a function that takes two planet names as strings planet1 and planet2. \n        /// The function should return a tuple containing all planets whose orbits are \n        /// located between the orbit of planet1 and the orbit of planet2, sorted by \n        /// the proximity to the sun. \n        /// The function should return an empty tuple if planet1 or planet2\n        /// are not correct planet names. \n        /// Examples\n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static List<string> Bf (string planet1, string planet2) \n        {\n            List<string> orbits = new List<string>() {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n            \n            //check if planets are in list\n            if (!orbits.Contains(planet1) || !orbits.Contains(planet2))\n                return new List<string>();\n            \n            var firstIndex = orbits.IndexOf(planet1);\n            var secondIndex = orbits.IndexOf(planet2);\n\n            //if planet2 is before planet 1\n            if (firstIndex > secondIndex)\n            {\n                int temp = firstIndex;\n                firstIndex = secondIndex;\n                secondIndex = temp;\n            }\n            \n            return orbits.Skip(firstIndex).Take(secondIndex - firstIndex + 1).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/71", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// A simple program which should return the value of x if n is \n        /// a prime number and should return the value of y otherwise.\n        /// \n        /// Examples:\n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// </summary>\n        public static int XOrY (int n, int x, int y) \n        {\n            if (IsPrime(n))\n                return x;\n            else \n                return y;\n            \n            bool IsPrime(int number)\n            {\n                if (number < 2)\n                    return false;\n\n                for (int i = 2; i * i <= number; i++)\n                {\n                    if (number % i == 0)\n                        return false;\n                }\n\n                return true;\n            }\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a list of numbers, return the sum of squares of the numbers\n        /// in the list that are odd. Ignore numbers that are negative or not integers.\n        /// \n        /// DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        /// DoubleTheDifference([-1, -2, 0]) == 0\n        /// DoubleTheDifference([9, -2]) == 81\n        /// DoubleTheDifference([0]) == 0  \n        /// \n        /// If the input list is empty, return 0.\n        /// \n        /// </summary>\n        public static int DoubleTheDifference (List<object> lst) \n        {\n            // Implement your solution here\n            \n            var num = lst?.Where(i => i is int && (int)i % 2 != 0).ToList();\n            \n            var result = 0;\n            \n            if (num == null) return result;\n            foreach (var item in num)\n            {\n                result += Math.Pow((int)item, 2);\n            }\n\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You will be given the name of a class (a string) and a list of extensions.\n        /// The extensions are to be used to load additional classes to the class. The\n        /// strength of the extension is as follows: Let CAP be the number of the uppercase\n        /// letters in the extension's name, and let SM be the number of lowercase letters \n        /// in the extension's name, the strength is given by the fraction CAP - SM. \n        /// You should find the strongest extension and return a string in this \n        /// format: ClassName.StrongestExtensionName.\n        /// If there are two or more extensions with the same strength, you should\n        /// choose the one that comes first in the list.\n        /// For example, if you are given \"Slices\" as the class and a list of the\n        /// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n        /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n        /// (its strength is -1).\n        /// Example:\n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// </summary>\n        public static string StrongestExtension (string class_name, List<string> extensions) \n        {"}
{"task_id": "csharp/74", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n        /// CycpatternCheck(\"abcd\",\"abd\") => False\n        /// CycpatternCheck(\"hello\",\"ell\") => True\n        /// CycpatternCheck(\"whassup\",\"psus\") => False\n        /// CycpatternCheck(\"abab\",\"baa\") => True\n        /// CycpatternCheck(\"efef\",\"eeff\") => False\n        /// CycpatternCheck(\"himenss\",\"simen\") => True\n        /// \n        /// </summary>\n        public static bool CycpatternCheck (string a, string b) \n        {\n            if (a == null || b == null)\n                return false;\n\n            if (b.Length > a.Length)\n                return false;\n\n            // remove all spaces from the strings\n            var cleanA = Regex.Replace(a, @\"\\s\", \"\");\n            var cleanB = Regex.Replace(b, @\"\\s\", \"\");\n            \n            // check if b is a substring of a\n            if (cleanA.Contains(cleanB))\n                return true;\n\n            // rotate b and check again\n            for (var i = 1; i < b.Length; i++)\n            {\n                var rotatedString = cleanB[cleanB.Length - 1] + cleanB.Substring(0, cleanB.Length - 1);\n\n                if (cleanA.Contains(rotatedString))\n                    return true;\n\n                cleanB = rotatedString;\n            }\n\n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given a positive integer, obtain its roman numeral equivalent as a string,\n        /// and return it in lowercase.\n        /// Restrictions: 1 <= num <= 1000\n        /// \n        /// Examples:\n        /// >>> IntToMiniRoman(19) == 'xix'\n        /// >>> IntToMiniRoman(152) == 'clii'\n        /// >>> IntToMiniRoman(426) == 'cdxxvi'\n        /// </summary>"}
{"task_id": "csharp/76", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given the lengths of the three sides of a triangle. Return True if the three\n        /// sides form a right-angled triangle, False otherwise.\n        /// A right-angled triangle is a triangle in which one angle is right angle or \n        /// 90 degree.\n        /// Example:\n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// </summary>\n        public static bool RightAngleTriangle (int a, int b, int c) \n        {\n            if (a + b <= c || a + c <= b || b + c <= a)\n                return false;\n            else \n                return true;\n        }\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// You are given a string s.\n        /// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n        /// otherwise keep it as it is.\n        /// If the string contains no letters, reverse the string.\n        /// The function should return the resulted string.\n        /// Examples\n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve (string s) \n        {\n            if (String.IsNullOrWhiteSpace(s)) return s;\n            var c = s[0];\n            if (Char.IsLetter(c)) \n            {\n                var r = new Regex(\"[^a-zA-Z]\");\n                if (!r.IsMatch(s)) \n                {\n                    var array = s.ToCharArray();\n                    Array.Reverse(array);\n                    return new string(array);\n                }\n                \n                for (var i = 0; i < s.Length; i++)\n                {\n                    c = s[i];\n                    if (!Char.IsLetter(c)) continue;\n                    \n                    var lower = Char.ToLowerInvariant(c) == c;\n                    s = s.Remove(i, 1);\n                    s = s.Insert(i, lower ? Char.ToUpperInvariant(c).ToString() : Char.ToLowerInvariant(c).ToString());\n                }\n            } \n            else\n            {\n                for (var i = 0; i < s.Length / 2; i++)\n                {\n                    var lowerIndex = s.Length - i - 1;\n                    if (!Char.IsLetter(s[i])) continue;\n                    if (!Char.IsLetter(s[lowerIndex])) continue;\n                    \n                    var lower = Char.ToLowerInvariant(s[i]) == s[i];\n                    s = s.Remove(lowerIndex, 1);\n                    s = s.Insert(lowerIndex, lower ? Char.ToUpperInvariant(s[i]).ToString() : Char.ToLowerInvariant(s[i]).ToString());\n                }\n            }\n            \n            return s;\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// Given a string 'text', return its md5 hash equivalent string.\n        /// If 'text' is an empty string, return None.\n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// </summary>\n        public static object StringToMd5 (string text) \n        {"}
{"task_id": "csharp/79", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// You're an expert C# programmer\n        /// \n        /// Given two positive integers a and b, return the even digits between a\n        /// and b, in ascending order.\n        /// \n        /// For example:\n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers (int a, int b) \n        {"}

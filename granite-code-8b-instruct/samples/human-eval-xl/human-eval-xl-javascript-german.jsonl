{"task_id": "javascript/0", "language": "javascript", "completion": "/**\n * \n * Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n * >>> below_zero([1, 2, 3])\n * False\n * >>> below_zero([1, 2, -4, 5])\n * True\n *\n */\nfunction belowZero(operations) {\n    let balance = 0;\n\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "/**\n * \n * F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\n * Eine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n * >>> sum_product([])\n * (0, 1)\n * >>> sum_product([1, 2, 3, 4])\n * (10, 24)\n *\n */\nfunction sumProduct(numbers) {\n    let product = 1;\n    let sum = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        sum += number;\n        product *= number;\n    }\n\n    return [sum, product];\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "/**\n * \n * Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\n * F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n * >>> string_xor('010', '110')\n * '100'\n *\n */\nfunction stringXor(a, b) {\n    let result = '';\n    for (let i=0;i<a.length;i++){\n        if (a[i] === b[i])\n            result += '0';\n        else \n            result += '1';\n    }\n    return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "/**\n * \n * Aus einer Liste von Zeichenketten soll die l\u00e4ngste zur\u00fcckgegeben werden. Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zur\u00fcckgegeben werden. Falls die Eingabeliste leer ist, soll null zur\u00fcckgegeben werden.\n * >>> longest([])\n\n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nfunction longest(strings) {\n    let i;\n    if (strings.length == 0) return null;\n\n    for (i = 1; i < strings.length; i++) {\n        if (strings[i].length > strings[0].length)\n            strings[0] = strings[i];\n    }\n\n    return strings[0];\n}\n\n/**\n * Test Cases\n */\nconsole.log(longest(['a', 'bb', 'ccc']) === 'ccc'); // true\nconsole.log(longest(['a', 'b', 'c']) === 'a'); // true\nconsole.log(longest([]) === null); // true"}
{"task_id": "javascript/4", "language": "javascript", "completion": "/**\n * \n * Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n * >>> greatest_common_divisor(3, 5)\n * 1\n * >>> greatest_common_divisor(25, 15)\n * 5\n *\n */\nfunction greatestCommonDivisor(a, b) {\n    if (b === 0){\n        return a;\n    }\n    else{\n        return greatestCommonDivisor(b, a%b);\n    }\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "/**\n * \n * Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n *     G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n *     Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n * >>> sort_numbers('three one five')\n * 'one three five'\n *\n */\nfunction sortNumbers(numbers) {\n\n  let sortedArray = numbers.split(\" \");\n  let mapping = new Map();\n\n  mapping.set('null', 0);\n  mapping.set('eins', 1);\n  mapping.set('zwei', 2);\n  mapping.set('drei', 3);\n  mapping.set('vier', 4);\n  mapping.set('f\u00fcnf', 5);\n  mapping.set('sechs', 6);\n  mapping.set('sieben', 7);\n  mapping.set('acht', 8);\n  mapping.set('neun', 9);\n\n  sortedArray.sort(function (a, b) {\n    return mapping[a] - mapping[b];\n  });\n\n  return sortedArray.join(\" \");\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "/**\n * \n * Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n * [0.0, 0.25, 0.5, 0.75, 1.0]\n *\n */\nfunction rescaleToUnit(numbers) {\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return numbers.map(x => (x - min) / (max - min));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "/**\n * \n * F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n * >>> flip_case('Hello')\n * 'hELLO'\n *\n */\nfunction flipCase(string) {\n    return string.replace(/[a-z]/g, letter => {\n        const code = letter.charCodeAt();\n\n        if (code >= 97 && code <= 122) { // lower case\n            return String.fromCharCode(code - 32);\n        } else { // upper case\n            return String.fromCharCode(code + 32);\n        }\n    })\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "/**\n * \n * Gib nur positive Zahlen in der Liste zur\u00fcck.\n * >>> get_positive([-1, 2, -4, 5, 6])\n * [2, 5, 6]\n * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [5, 3, 2, 3, 9, 123, 1]\n * \n */\nfunction getPositive(l) {\n    return l.filter((e) => e > 0);\n}"}
{"task_id": "javascript/9", "language": "javascript", "completion": "/**\n * \n * Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zur\u00fcck.\n * >>> is_prime(6)\n * False\n * >>> is_prime(101)\n * True\n * >>> is_prime(11)\n * True\n * >>> is_prime(13441)\n * True\n * >>> is_prime(61)\n * True\n * >>> is_prime(4)\n * False\n * >>> is_prime(1)\n * False\n *\n */\nfunction isPrime(n) {\n    if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    for (var i = 2, s = Math.sqrt(n); i <= s; i++) if (n % i === 0) return false; return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "/**\n * \n * Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfunction unique(l) {\n  var result = [];\n  \n  l.forEach(function (element) {\n    if (!result.includes(element)) {\n      result.push(element);\n    }\n  });\n\n  return result;\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "/**\n * * \n * prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n *\n */\nfunction primeFib(n) {\n    let arr = [0, 1]\n    for (let i = 2; i < n; i++) {\n        let a = arr[i - 2] + arr[i - 1];\n        if (isPrime(a))\n            return a;\n        else\n            arr.push(a);\n    }\n}\nfunction isPrime(n) {\n    for (let i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return n > 1;\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "/**\n * triples_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n * Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n * >>> triples_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> triples_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> triples_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n * True\n * >>> triples_sum_to_zero([1])\n * False\n *\n */\nfunction triplesSumToZero(l) {\n    if (l.length < 3) {\n        return false;\n    }\n\n    l.sort();\n\n    for (var i = 0; i < l.length - 2; i++) {\n        var lowIndex = i + 1;\n        var highIndex = l.length - 1;\n\n        while (lowIndex < highIndex) {\n            if (l[i] + l[lowIndex] + l[highIndex] === 0) {\n                return true;\n            } else if (l[i] + l[lowIndex] + l[highIndex] > 0) {\n                highIndex--;\n            } else {\n                lowIndex++;\n            }\n        }\n    }\n\n    return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "/**\n * pairs_sum_to_zero nimmt eine Liste von ganzen Zahlen als Eingabe.\n * Es gibt True zur\u00fcck, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls gibt es False zur\u00fcck.\n * >>> pairs_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> pairs_sum_to_zero([1, 3, -2, 1])\n * False\n * >>> pairs_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n * True\n * >>> pairs_sum_to_zero([1])\n * False\n */\nfunction pairsSumToZero(l) {\n    let seen = new Set();\n    for (let num of l) {\n        if (seen.has(-num))\n            return true;\n        seen.add(num);\n    }\n    return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "/**\n * \n * Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n *     fib4(0) -> 0\n *     fib4(1) -> 0\n *     fib4(2) -> 2\n *     fib4(3) -> 0\n *     fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n *     Bitte schreiben Sie eine Funktion, um das n-te Element der Fib4-Zahlenfolge effizient zu berechnen. Verwenden Sie keine Rekursion.\n * >>> fib4(5)\n * 4\n * >>> fib4(6)\n * 8\n * >>> fib4(7)\n * 14\n *\n */\nfunction fib4(n) {\n    if (n < 2)\n        return 0;\n\n    let a = 0;\n    let b = 0;\n    let c = 2;\n    for (let i = 3; i <= n; i++) {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "/**\n * \n * Gib den Median der Elemente in der Liste l zur\u00fcck.\n * >>> median([3, 1, 2, 4, 5])\n * 3\n * >>> median([-10, 4, 6, 1000, 10, 20])\n * 15.0\n *\n */\nfunction median(l) {\n    let m = l.sort();\n    let len = m.length;\n\n    if (len % 2 === 1)\n        return m[Math.floor(len / 2)];\n    else\n        return (m[(len - 1) / 2] + m[len / 2]) / 2;\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "/**\n * \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n * @param {String} text \n */\nfunction isPalindrome(text) {\n    // Idee: Vergleicht erster und letzter Buchstabe mit einem while-Zyklus.\n    let i = 0; \n    let j = text.length - 1;\n\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false; \n        }\n        i++; \n        j--;\n    }\n\n    return true;\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "/**\n * * \n * remove_vowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n */\nfunction removeVowels(text) {"}
{"task_id": "javascript/18", "language": "javascript", "completion": "/**\n * \n * Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n *\n */\nfunction belowThreshold(l, t) {\n    for (let index = 0; index < l.length; index++) {\n        if (l[index] > t)\n            return false;\n    }\n    return true;\n}"}
{"task_id": "javascript/19", "language": "javascript", "completion": "/**\n * \n * Addiere zwei Zahlen x und y.\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\nfunction add(x, y) {\n    return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "/**\n * \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n * >>> same_chars('eabcdzzzz', 'dddbuzzzzzddeddabc')\n * True\n * >>> same_chars('abcd', 'dddddddabc')\n * True\n * >>> same_chars('dddddddabc', 'abcd')\n * True\n * >>> same_chars('eabcd', 'dddddddabc')\n * False\n * >>> same_chars('abcd', 'dddddddabce')\n * False\n * >>> same_chars('eabcdzzzz', 'dddbuzzzzzzzddddabc')\n * False\n */\nfunction sameChars(s0, s1) {\n    if (s0.length !== s1.length) return false;\n\n    for (var i = 0; i < s0.length; i++) {\n        var index = s1.indexOf(s0[i]);\n        if (index === -1) {\n            return false;\n        } else {\n            s1 = s1.substr(0, index) + s1.substr(index + 1);\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "/**\n * \n * Gib die n-te Fibonacci-Zahl zur\u00fcck.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n *\n */\nfunction fib(n) {\n\tif (n == 1) return 1;\n\tif (n < 1) return \"Ung\u00fcltige Eingabe\";\n\treturn fib(n-1) + fib(n-2);\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "/**\n * \n * Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n\n */\nfunction common(l1, l2) {\n\tlet arr = [];\n\tfor (let i=0; i<l1.length; i++) {\n\t\tif (l2.includes(l1[i])) {\n\t\t\tarr.push(l1[i]);\n\t\t}\n\t}\n\tarr.sort((a, b) => a-b);\n\treturn arr;\n}"}
{"task_id": "javascript/23", "language": "javascript", "completion": "/**\n * \n * Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor(n) {\n    // mit einem for-loop kannst du die Teiler von n durchgehen, und pr\u00fcfst, ob er eine Primzahl ist.\n    // die gr\u00f6\u00dften Primfaktoren sind 19, 17, 13, 11 usw., daher w\u00fcrde ich einen Array mit den Primfaktoren einf\u00fchren\n    \n    let largest = -1;\n    for (let i=2; i<=n; i++) {\n        if(n % i === 0 && isPrime(i)) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n\nfunction isPrime(n) {\n    if (n === 2 || n === 3) { \n        return true; \n    }\n    for (let i=2; i<Math.sqrt(n); i++) {\n        let mod = n % i;\n        if (mod === 0) {\n            return false;\n        }\n    }\n    return n !== 1;\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "/**\n * \n * sum_to_n ist eine Funktion, die Zahlen von 1 bis n summiert.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n *\n */\nfunction sumToN(n) {\n  var sum = 0;\n  for (var i=1;i<=n;i++) {\n    sum += i;\n  }\n  return sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "/**\n * \n * xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n *     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n *     Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n *\n */\nfunction derivative(xs) {\n  let newXs = [];\n\n  for (let i = 1; i < xs.length; i++) {\n    newXs.push(i * xs[i]);\n  }\n\n  return newXs;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "/**\n * \n * Die FibFib-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n *     fibfib(0) == 0\n *     fibfib(1) == 0\n *     fibfib(2) == 1\n *     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n *     Bitte schreiben Sie eine Funktion, um das n-te Element der FibFib-Zahlenfolge effizient zu berechnen.\n * >>> fibfib(1)\n * 0\n * >>> fibfib(5)\n * 4\n * >>> fibfib(8)\n * 24\n *\n */\nfunction fibfib(n) {\n    let array = [0, 0, 1];\n\n    for (let i = 3; i < n + 1; i++) {\n        array[i] = array[i - 1] + array[i - 2] + array[i - 3];\n    }\n\n    return array[n];\n}\n\nconsole.log(fibfib(5));"}
{"task_id": "javascript/27", "language": "javascript", "completion": "/**\n * \n * Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n * \n * Beispiel:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n * 3\n *\n */\nfunction vowelsCount(s) {\n  var counter = 0;\n  for (var i = 0; i < s.length; ++i) {\n    if (\n      s[i] === \"a\" ||\n      s[i] === \"e\" ||\n      s[i] === \"i\" ||\n      s[i] === \"o\" ||\n      s[i] === \"u\"\n    ) {\n        counter += 1;\n    } else if (s[i] === \"y\") {\n      if ((s.length - 1) === i) {\n        counter += 1;\n      }\n    }\n  }\n  return counter;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "/**\n * * \n * Sie erhalten eine nicht-leere Liste von positiven Ganzzahlen. Geben Sie die gr\u00f6\u00dfte Ganzzahl zur\u00fcck, die gr\u00f6\u00dfer als Null ist und eine H\u00e4ufigkeit hat, die gr\u00f6\u00dfer oder gleich dem Wert der Ganzzahl selbst ist. Die H\u00e4ufigkeit einer Ganzzahl ist die Anzahl der Male, die sie in der Liste vorkommt. Wenn kein solcher Wert existiert, geben Sie -1 zur\u00fcck. Beispiele:\n * \n *     search([4, 1, 2, 2, 3, 1]) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n *     search([5, 5, 4, 4, 4]) == -1\n *\n */\nfunction search(lst) {\n    let result = lst.reduce((a, b) => a.get(b) ? a.set(b, a.get(b)+1) : a.set(b, 1), new Map());\n\n    for (let [key, val] of result.entries()) {\n        if (val >= key) return Number(key);\n    }\n\n    return -1;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "/**\n * * \n * Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n * \n * triangle_area(3, 4, 5) == 6.00\n * triangle_area(1, 2, 10) == -1\n *\n */\nfunction triangleArea(a, b, c) {\n  if ((a + b > c) && (a + c > b) && (b + c > a)) {\n    var p = (a + b + c) / 2;\n    return Math.round((p - a) * (p - b) * (p - c) * 100) / 100;\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "/**\n * * \n * Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n * \n *     Beispiel:\n *     will_it_fly([1, 2], 5) \u279e False \n *     # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n * \n *     will_it_fly([3, 2, 3], 1) \u279e False\n *     # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n * \n *     will_it_fly([3, 2, 3], 9) \u279e True\n *     # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n * \n *     will_it_fly([3], 5) \u279e True\n *     # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n * \n */\nfunction willItFly(q, w) {\n    if (q.length === 1 && q[0] <= w) return true;\n    let a = q.reduce((acc, el) => acc + el);\n    if (a > w) return false;\n    const nq = [...q].reverse();\n\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== nq[i]) return false;\n    }\n    return true;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "/**\n * \n * Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n * \n * is_multiply_prime(30) == True\n * 30 = 2 * 3 * 5\n *\n */\nfunction isMultiplyPrime(a) {\n    let primes = [2,3,5];\n\n    for (let i=2;i<100;i++) {\n        if (primes.includes(i)) continue;\n\n        let j = 0;\n        while (i*primes[j] < a) {\n            if (a % (i * primes[j]) == 0) {\n                return true;\n            }\n            j++;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "/**\n * \n * Sie erhalten eine Zahl in Dezimalform und Ihre Aufgabe besteht darin, sie in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n * \n * Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n * \n * Beispiele:\n * \n * decimal_to_binary(15)   # returns \"db1111db\"\n * decimal_to_binary(32)   # returns \"db100000db\"\n *\n */\nfunction decimalToBinary(decimal) {\n    var binary = (decimal >>> 0).toString(2);\n    return 'db' + ('0'.repeat(8 - binary.length)) + binary + 'db';\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "/**\n * \n * Du erh\u00e4ltst einen String s.\n * Deine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der String gl\u00fccklich ist oder nicht.\n * Ein String ist gl\u00fccklich, wenn seine L\u00e4nge mindestens 3 betr\u00e4gt und jede Gruppe von 3 aufeinanderfolgenden Buchstaben unterschiedlich ist.\n * Zum Beispiel:\n * \n * is_happy(a) => False\n * is_happy(aa) => False\n * is_happy(abcd) => True\n * is_happy(aabb) => False\n * is_happy(adb) => True\n * is_happy(xyy) => False\n *\n */\nfunction isHappy(s) {\n    if (s.length < 3) return false;\n\n    var letters = {};\n\n    for (var i = 0; i <= s.length - 3; i++) {\n        var currentThreeLetters = s[i] + s[i+1] + s[i+2];\n        //console.log(currentThreeLetters);\n\n        if (letters[currentThreeLetters]) return false;\n\n        letters[currentThreeLetters] = true;\n    }\n\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "/**\n * \n * Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Buchstabennoten gem\u00e4\u00df der folgenden Tabelle aus gibt:\n * \n *              GPA       |    Buchstaben Note\n *               4.0                A+\n *             > 3.7                A \n *             > 3.3                A- \n *             > 3.0                B+\n *             > 2.7                B \n *             > 2.3                B-\n *             > 2.0                C+\n *             > 1.7                C\n *             > 1.3                C-\n *             > 1.0                D+ \n *             > 0.7                D \n *             > 0.0                D-\n *               0.0                E\n *     \n * \n *     Beispiel:\n * \n * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n *\n */\nfunction numericalLetterGrade(grades) {\n    let letterGrades = [];\n    for (let i = 0; i < grades.length; i++) {\n        if (grades[i] >= 4) {\n            letterGrades.push('A+');\n        } else if (grades[i] > 3.7) {\n            letterGrades.push('A');\n        } else if (grades[i] > 3.3) {\n            letterGrades.push('A-');\n        } else if (grades[i] > 3.0) {\n            letterGrades.push('B+');\n        } else if (grades[i] > 2.7) {\n            letterGrades.push('B');\n        } else if (grades[i] > 2.3) {\n            letterGrades.push('B-');\n        } else if (grades[i] > 2.0) {\n            letterGrades.push('C+');\n        } else if (grades[i] > 1.7) {\n            letterGrades.push('C');\n        } else if (grades[i] > 1.3) {\n            letterGrades.push('C-');\n        } else if (grades[i] > 1.0) {\n            letterGrades.push('D+');\n        } else if (grades[i] > 0.7) {\n            letterGrades.push('D');\n        } else if (grades[i] > 0.0) {\n            letterGrades.push('D-');\n        } else if (grades[i] === 0.0) {\n            letterGrades.push('E');\n        }\n    }\n    return letterGrades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "/**\n * \n * Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n *     Beispiele\n * \n * prime_length('Hello') == True\n * prime_length('abcdcba') == True\n * prime_length('kittens') == True\n * prime_length('orange') == False\n *\n */\nfunction primeLength(string) {\n  var array = string.split('');\n  var count = 0;\n\n  for (var i = 0; i < array.length; i++) {\n    count += array[i];\n  }\n\n  return isPrime(count);\n}\n\nfunction isPrime(num) {\n  if (num == 1) return false;\n  if (num == 2) return true;\n  \n  var sqrt = Math.sqrt(num),\n      i    = 2;\n      \n  while (i <= sqrt) {\n    if (num % i++ < 1) \n      return false;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "/**\n * \n * Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n * \n *     Beispiel\n *         F\u00fcr N = 1000 ist die Summe der Ziffern 1, die Ausgabe sollte \"1\" sein.\n *         F\u00fcr N = 150 ist die Summe der Ziffern 6, die Ausgabe sollte \"110\" sein.\n *         F\u00fcr N = 147 ist die Summe der Ziffern 12, die Ausgabe sollte \"1100\" sein.\n *     \n *     Variablen:\n *         @N Ganzzahl\n *              Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n *     Ausgabe:\n *          eine Zeichenkette mit der bin\u00e4ren Zahl.\n * \n */\nfunction solve(n) {\n\n    var binary = (n >>> 0).toString(2);\n\n    //console.log(binary);\n    return binary;\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "/**\n * \n * Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n * \n * Beispiele:\n * \n * get_row([\n *   [1,2,3,4,5,6],\n *   [1,2,3,4,1,6],\n *   [1,2,3,4,5,1]\n * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n * get_row([], 1) == []\n * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n *\n */\nfunction getRow(lst, x) {\n    \n    return lst.reduce((acc, row, i) => {\n        const index = row.indexOf(x);\n        if (index >= 0) {\n            acc.push([i, index]);\n        }\n        return acc;\n    }, [])\n        .sort(([row1, col1], [row2, col2]) => {\n            if (row1 !== row2) {\n                return row1 - row2;\n            } else {\n                return col2 - col1;\n            }\n        });\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "/**\n * * \n * Sie erhalten eine Liste von ganzen Zahlen.\n * Schreiben Sie eine Funktion next_smallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\n * Geben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n * next_smallest([1, 2, 3, 4, 5]) == 2\n * next_smallest([5, 1, 4, 3, 2]) == 2\n * next_smallest([]) == None\n * next_smallest([1, 1]) == None\n *\n */\nfunction nextSmallest(lst) {\n    let first = lst[0];\n    let second = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > first && lst[i] <= second) {\n            second = lst[i];\n        }\n    }\n    return second === Number.MAX_SAFE_INTEGER ? null : second;\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "/**\n * * \n * Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Langeweilen zu z\u00e4hlen. Eine Langeweile ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n * \n * Zum Beispiel:\n * >>> is_bored(\"Hello world\")\n * 0\n * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n * 1\n *\n */\nfunction isBored(s) {\n    //var words = s.split(' ');\n    var sentences = s.match(/[^\\.|\\?|\\!]+[\\.|\\?|\\!]*/g);\n\n    console.log(sentences);\n\n    for (var i=0; i<sentences.length; i++) {\n        if (/^Ich/i.test(sentences[i])){\n            return 1;\n        }\n    }\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "/**\n * \n * Sie erhalten eine Liste von ganzen Zahlen.\n *     Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n * \n *     Beispiele:\n * \n * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n * For lst = [0,81,12,3,1,21] the output should be 3\n * For lst = [0,8,1,2,1,7] the output should be 7\n *\n */\nfunction largestPrimeSum(lst) {\n\n    var n;\n    var summe = 0;\n    \n    for (var i=0;i<lst.length;i++){\n        if (lst[i]>summe){\n            n=lst[i];\n            summe=0;\n        }\n        else{\n            continue;\n        }\n        \n        while (n % 2 == 0) { \n            summe = summe + 2; \n            n = n / 2; \n        } \n          \n        for (var j = 3; j <= Math.sqrt(n); j = j + 2) { \n            while (n % j == 0) { \n                summe = summe + j; \n                n = n / j; \n            } \n        } \n  \n        if (n > 2) \n            summe = summe + n; \n\n    }\n\nreturn summe;\n\n\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "/**\n * * \n * Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n * \n * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n *\n */\nfunction checkDictCase(dict) {\n    // Schleife durch das Dict und pr\u00fcfe, ob alle Schl\u00fcssel Strings gro\u00df- oder klein geschrieben sind\n    var all_lower = true;\n    for (var key in dict) {\n        if (key === key.toLowerCase()) {\n            continue;\n        } else {\n            all_lower = false;\n            break;\n        }\n    }\n    // Schleife durch das Dict und pr\u00fcfe, ob alle Schl\u00fcssel Strings gro\u00df- oder klein geschrieben sind\n    var all_upper = true;\n    for (var key in dict) {\n        if (key === key.toUpperCase()) {\n            continue;\n        } else {\n            all_upper = false;\n            break;\n        }\n    }\n\n    // Pr\u00fcfe, ob alle Schl\u00fcssel Strings gro\u00df- oder klein geschrieben sind und gibt True oder False depending on this back.\n    if (all_lower || all_upper) {\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "/**\n * Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n * \n *     Beispiele\n * >>> closest_integer(\"10\")\n * 10\n * >>> closest_integer(\"15.3\")\n * 15\n\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. For example closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n *\n */\nfunction closestInteger(value) {\n    var val = Number(value);\n\n    if (val % 1 === 0) {\n        // is integer\n        return val;\n    }\n\n    var intVal = Math.round(val);\n    console.log(\"intVal\", intVal);\n    var decimalPart = val - intVal;\n    console.log(\"decimalPart\", decimalPart);\n\n    if (decimalPart >= .5) {\n        return intVal + 1;\n    } else if (decimalPart <= -.5) {\n        return intVal - 1;\n    } else {\n        return intVal;\n    }\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "/**\n * * \n * Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n *     Die erste Ebene hat n Steine.\n *     Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n *         - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n *         - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n *     Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n *     i die Anzahl der Steine in der Ebene (i+1) darstellt.\n * \n *     Beispiele:\n * >>> make_a_pile(3)\n * [3, 5, 7]\n *\n */\nfunction makeAPile(n) {\n    let pile = [];\n    if (!Number.isInteger(n) || n < 1) return console.error('invalid input');\n\n    for (let i = 0; i < n; i++) {\n        if (i == 0){\n            pile[i] = n; \n        } else if (i % 2 == 0) {\n            pile[i] = pile[i - 1] + 2;\n        } else {\n            pile[i] = pile[i - 1] + 4;\n        }\n    }\n\n    return console.log(pile);\n}"}
{"task_id": "javascript/44", "language": "javascript", "completion": "/**\n * Sie erhalten einen String von W\u00f6rtern, die durch Kommas oder Leerzeichen getrennt sind. Ihre Aufgabe ist es, den String in W\u00f6rter aufzuteilen und ein Array der W\u00f6rter zur\u00fcckzugeben.\n * \n * Zum Beispiel:\n * \n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n *\n */\nfunction wordsString(s) {\n  let result = [];\n\n  s.split(/[ ,]+/).forEach((word) => {\n    if (word !== '') {\n      result.push(word);\n    }\n  });\n  \n  return result;\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "/**\n * \n * Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n * \n * Zum Beispiel:\n * \n * choose_num(12, 15) = 14\n * choose_num(13, 12) = -1\n */\nfunction chooseNum(x, y) {\n  if (y % 2 === 0 && x <= y){\n    return y;\n  } else if (y % 2 !== 0 && x < y){\n    return y-1;\n  } else {\n    return -1;\n  }\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "/**\n * \n * Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n * \n * rounded_avg(1, 5) => \"0b11\"\n * rounded_avg(7, 5) => -1\n * rounded_avg(10, 20) => \"0b1111\"\n * rounded_avg(20, 33) => \"0b11010\"\n *\n */\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  const average = Math.floor((n + m) / 2);\n  return `0b${average.toString(2)}`;\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "/**\n * \n * Implementieren Sie die Funktion f, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Element an der Stelle i das Fakult\u00e4t von i ist, wenn i gerade ist, oder die Summe der Zahlen von 1 bis i, wenn i ungerade ist. i beginnt bei 1. Die Fakult\u00e4t von i ist das Produkt der Zahlen von 1 bis i (1 * 2 * ... * i). Beispiel:\n * \n * f(5) == [1, 2, 6, 24, 15]\n *\n */\nfunction f(n) {\n\n    let result = [];\n\n    for(let i=1;i<=n;i++){\n\n        if(i%2==0){\n            result.push(factorial(i));\n        }else{\n            let sum = 0;\n\n            for (let j = 0; j <= i; j++) {\n                sum+=j;\n            }\n\n            result.push(sum);\n        }\n    }\n\n    return result;\n}\n\n\nfunction factorial(n) {\n\n    if (n === 1){\n        return 1;\n    }else{\n        return n * factorial(n-1);\n    }\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "/**\n * * \n * Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n * \n *     Beispiel 1:\n * \n *         Eingabe: 3\n *         Ausgabe: (1, 2)\n *         Erkl\u00e4rung:\n *         Ganze Palindrome sind 1, 2, 3. Eines davon ist gerade und zwei davon sind ungerade.\n * \n *     Beispiel 2:\n * \n *         Eingabe: 12\n *         Ausgabe: (4, 6)\n *         Erkl\u00e4rung:\n *         Ganze Palindrome sind 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier davon sind gerade und sechs davon sind ungerade.\n * \n *     Hinweis:\n *         1. 1 <= n <= 10^3\n *         2. Das zur\u00fcckgegebene Tupel enth\u00e4lt die Anzahl der geraden und ungeraden ganzen Palindrome.\n * \n */\nfunction evenOddPalindrome(n) {\n    let evens = 0;\n    let odds = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (String(i).split('').reverse().join('') === String(i)) {\n            // ist palindrom\n            if (i % 2 === 0)\n                evens++;\n            else\n                odds++\n        }\n    }\n\n    return [evens, odds]\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "/**\n * \n * Wir haben ein Array 'arr' mit N ganzen Zahlen arr[1], arr[2], ..., arr[N]. Die Zahlen im Array werden zuf\u00e4llig angeordnet sein. Deine Aufgabe besteht darin zu bestimmen, ob es m\u00f6glich ist, ein Array in nicht abnehmender Reihenfolge zu sortieren, indem du die folgende Operation auf das gegebene Array anwendest:\n * Du darfst beliebig oft eine Rechtsschiebeoperation durchf\u00fchren.\n * Eine Rechtsschiebeoperation bedeutet, dass alle Elemente des Arrays um eine Position in Richtung rechts verschoben werden. Das letzte Element des Arrays wird an die Startposition im Array verschoben, d.h. an den Index 0.\n * \n * Wenn es m\u00f6glich ist, das sortierte Array durch Ausf\u00fchren der oben genannten Operation zu erhalten, gib True zur\u00fcck, sonst gib False zur\u00fcck.\n * Wenn das gegebene Array leer ist, gib True zur\u00fcck.\n * \n * Hinweis: Die gegebene Liste hat garantiert eindeutige Elemente.\n * \n * Zum Beispiel:\n * \n * move_one_ball([3, 4, 5, 1, 2])==>True\n * Erkl\u00e4rung: Durch Ausf\u00fchren von 2 Rechtsschiebeoperationen kann die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array erreicht werden.\n * move_one_ball([3, 5, 4, 1, 2])==>False\n * Erkl\u00e4rung: Es ist nicht m\u00f6glich, die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array durch Ausf\u00fchren beliebiger Anzahl von Rechtsschiebeoperationen zu erhalten.\n * \n *             \n *\n */\nfunction moveOneBall(arr) {\n  const sorted = arr.slice().sort((a, b) => a - b);\n\n  let i;\n\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i] !== sorted[i]) break;\n  }\n\n  if (i >= arr.length) return true;\n\n  const k = i + arr.slice(i).indexOf(sorted[i]);\n\n  while (k > 0) {\n    const tmp = arr[k - 1];\n    let j;\n\n    for (j = k - 1; j >= i; j--) {\n      arr[j] = arr[j - 1];\n    }\n\n    arr[j] = tmp;\n    k--;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "/**\n * \n * In diesem Problem implementieren Sie eine Funktion, die zwei Listen von Zahlen entgegennimmt und bestimmt, ob es m\u00f6glich ist, einen Austausch von Elementen zwischen ihnen durchzuf\u00fchren, um lst1 zu einer Liste nur mit geraden Zahlen zu machen. Es gibt keine Begrenzung f\u00fcr die Anzahl der ausgetauschten Elemente zwischen lst1 und lst2. Wenn es m\u00f6glich ist, Elemente zwischen lst1 und lst2 auszutauschen, um alle Elemente von lst1 gerade zu machen, geben Sie \"YES\" zur\u00fcck. Andernfalls geben Sie \"NO\" zur\u00fcck. Zum Beispiel: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". Es wird angenommen, dass die Eingabelisten nicht leer sein werden.\n * \n */\nfunction exchange(lst1, lst2) {\n  let counter = 0;\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      counter++;\n    }\n\n    if (lst2[i] % 2 !== 0) {\n      counter--;\n    }\n\n    if (counter < 0) {\n      return 'NO';\n    }\n  }\n\n  if (counter > 0) {\n    return 'NO';\n  } else {\n    return 'YES';\n  }\n}"}
{"task_id": "javascript/51", "language": "javascript", "completion": "/**\n * \n * Aufgabe\n *     Wir haben zwei Zeichenketten s und c. Du musst alle Zeichen in s l\u00f6schen, die einem Zeichen in c entsprechen.\n *     Dann musst du \u00fcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n *     Eine Zeichenkette ist ein Palindrom, wenn sie r\u00fcckw\u00e4rts gelesen genauso aussieht wie vorw\u00e4rts.\n *     Du solltest ein Tupel zur\u00fcckgeben, das die resultierende Zeichenkette und True/False f\u00fcr die \u00dcberpr\u00fcfung enth\u00e4lt.\n *     Beispiel\n *     F\u00fcr s = \"abcde\", c = \"ae\" sollte das Ergebnis ('bcd',False) sein.\n *     F\u00fcr s = \"abcdef\", c = \"b\" sollte das Ergebnis ('acdef',False) sein.\n *     F\u00fcr s = \"abcdedcba\", c = \"ab\" sollte das Ergebnis ('cdedc',True) sein.\n * \n */\nfunction reverseDelete(s, c) {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n    return [result, isPalindrom(result)];\n}\n\nfunction isPalindrom(str) {\n    let reverseString = str.split(\"\").reverse().join(\"\");\n\n    return reverseString === str;\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "/**\n * \n * Sie erhalten ein rechteckiges Gitter von Brunnen. Jede Zeile repr\u00e4sentiert einen einzelnen Brunnen, und jede 1 in einer Zeile repr\u00e4sentiert eine einzelne Einheit Wasser. Jeder Brunnen hat einen entsprechenden Eimer, der verwendet werden kann, um Wasser daraus zu extrahieren, und alle Eimer haben die gleiche Kapazit\u00e4t. Ihre Aufgabe ist es, die Eimer zu verwenden, um die Brunnen zu leeren. Geben Sie die Anzahl der Male aus, die Sie die Eimer senken m\u00fcssen.\n * \n * Beispiel 1:\n *     Eingabe:\n *         grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         Eimerkapazit\u00e4t: 1\n *     Ausgabe: 6\n * \n * Beispiel 2:\n *     Eingabe:\n *         grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         Eimerkapazit\u00e4t: 2\n *     Ausgabe: 5\n * \n * Beispiel 3:\n *     Eingabe:\n *         grid: [[0,0,0], [0,0,0]]\n *         Eimerkapazit\u00e4t: 5\n *     Ausgabe: 0\n * \n * Einschr\u00e4nkungen:\n *     * alle Brunnen haben die gleiche L\u00e4nge\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= Kapazit\u00e4t <= 10\n */\nfunction maxFill(grid, capacity) {\n    let result = 0;\n\n    for (let i = 0; i < grid.length; i++) {\n        let count = 0;\n        while (grid[i].some((value) => value === 1)) {\n            if (count > capacity) {\n                break;\n            }\n            if (grid[i][0] == 1) {\n                for (let j = 0; j < grid[i].length && grid[i][j] == 1; j++) {\n                    grid[i][j] = 0;\n                    count++;\n                }\n            } else {\n                let j = grid[i].length - 1;\n                while (grid[i][j] === 1) {\n                    if (count > capacity) {\n                        break;\n                    }\n                    grid[i][j] = 0;\n                    count++;\n                    j--;\n                }\n            }\n            result += 1;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "/**\n * \n * Gegeben eine Zeichenkette s und eine nat\u00fcrliche Zahl n, wurde Ihnen die Aufgabe zugewiesen, eine Funktion zu implementieren, die eine Liste aller W\u00f6rter aus der Zeichenkette s zur\u00fcckgibt, die genau n Konsonanten enthalten, in der Reihenfolge, in der diese W\u00f6rter in der Zeichenkette s erscheinen. Wenn die Zeichenkette s leer ist, sollte die Funktion eine leere Liste zur\u00fcckgeben. Hinweis: Sie k\u00f6nnen davon ausgehen, dass die Eingabezeichenkette nur Buchstaben und Leerzeichen enth\u00e4lt. Beispiele:\n * \n * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n * select_words(\"simple white space\", 2) ==> []\n * select_words(\"Hello world\", 4) ==> [\"world\"]\n * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n *\n */\nfunction selectWords(s, n) {\n\tvar result = [];\n\tif (s === \"\") {\n\t\treturn result;\n\t} else {\n\t\tvar words = s.split(\" \");\n\t\tfor (var i = 0; i < words.length; i++) {\n\t\t\tif (vowelRegex(words[i], n)) {\n\t\t\t\tresult.push(words[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tfunction vowelRegex(word, n) {\n\t\tvar regex = new RegExp(\"[aeiou\u00e4\u00f6\u00fc\u00df]{0,\" + n + \"}\");\n\t\tif (regex.test(word)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "/**\n * * \n * Gegeben sei ein Array arr von ganzen Zahlen und eine positive ganze Zahl k. Gib eine sortierte Liste der L\u00e4nge k zur\u00fcck, die die k gr\u00f6\u00dften Zahlen in arr enth\u00e4lt.\n * \n *     Beispiel 1:\n * \n *         Eingabe: arr = [-3, -4, 5], k = 3\n *         Ausgabe: [-4, -3, 5]\n * \n *     Beispiel 2:\n * \n *         Eingabe: arr = [4, -4, 4], k = 2\n *         Ausgabe: [4, 4]\n * \n *     Beispiel 3:\n * \n *         Eingabe: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n *         Ausgabe: [2]\n * \n *     Hinweis:\n *         1. Die L\u00e4nge des Arrays wird im Bereich von [1, 1000] liegen.\n *         2. Die Elemente im Array werden im Bereich von [-1000, 1000] liegen.\n *         3. 0 <= k <= len(arr)\n * \n */\nfunction maximum(arr, k) {\n    if (k > arr.length || k < 0){\n        return \"invalid input\";\n    }\n\n    //Heapsort\n    \n    for(let i=Math.floor(arr.length/2)-1; i>=0; i--){\n        siftDown(arr,i);\n    }\n    let res = [];\n    while(k>0){\n        res.push(arr[0]);\n        arr[0] = arr[arr.length-1];\n        arr.pop();\n        k--;\n        if (arr.length == 0){\n            return res;\n        }\n        siftDown(arr,0);\n    }\n    \n    return res;\n}\n\nfunction parent(i){\n    return Math.floor((i+1)/2)-1;\n}\n\nfunction leftChild(i){\n    return 2*(i+1)-1;\n}\n\nfunction rightChild(i){\n    return 2*(i+1);\n}\n\n\nfunction siftDown(arr,i){\n    let largest = i;\n    if (leftChild(i) < arr.length && arr[largest] < arr[leftChild(i)]){\n        largest = leftChild(i);\n    }\n\n    if (rightChild(i) < arr.length && arr[largest] < arr[rightChild(i)]){\n        largest = rightChild(i);\n    }\n    \n    if (largest != i){\n        let temp = arr[i];\n        arr[i] = arr[largest];\n        arr[largest] = temp;\n        siftDown(arr,largest);\n    }\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "/**\n * * \n * Gegeben sei ein nicht-leeres Array von ganzen Zahlen arr und eine ganze Zahl k. Gib die Summe der Elemente mit h\u00f6chstens zwei Ziffern aus den ersten k Elementen von arr zur\u00fcck.\n * \n *     Beispiel:\n * \n *         Eingabe: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n *         Ausgabe: 24 # Summe von 21 + 3\n * \n *     Einschr\u00e4nkungen:\n *         1. 1 <= len(arr) <= 100\n *         2. 1 <= k <= len(arr)\n * \n */\nfunction addElements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < Math.min(k, arr.length); i++) {\n        if (arr[i] > 9) {\n            sum += arr[i].toString().split('').map(x => parseInt(x)).reduce((a, b) => a + b, 0);\n        } else {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "/**\n * \n * Sie erhalten zwei Intervalle,\n *     wobei jedes Intervall ein Paar von ganzen Zahlen ist. Zum Beispiel, Intervall = (start, end) = (1, 2).\n *     Die gegebenen Intervalle sind geschlossen, was bedeutet, dass das Intervall (start, end)\n *     sowohl start als auch end einschlie\u00dft.\n *     F\u00fcr jedes gegebene Intervall wird angenommen, dass sein Start kleiner oder gleich seinem Ende ist.\n *     Ihre Aufgabe ist es zu bestimmen, ob die L\u00e4nge des Schnitts dieser beiden\n *     Intervalle eine Primzahl ist.\n *     Zum Beispiel ist der Schnitt der Intervalle (1, 3), (2, 4) (2, 3),\n *     dessen L\u00e4nge 1 ist, was keine Primzahl ist.\n *     Wenn die L\u00e4nge des Schnitts eine Primzahl ist, geben Sie \"YES\" zur\u00fcck,\n *     andernfalls geben Sie \"NO\" zur\u00fcck.\n *     Wenn sich die beiden Intervalle nicht \u00fcberschneiden, geben Sie \"NO\" zur\u00fcck.\n * \n * \n *     [Eingabe/Ausgabe] Beispiele:\n * \n * intersection((1, 2), (2, 3)) ==> \"NO\"\n * intersection((-1, 1), (0, 4)) ==> \"NO\"\n * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n *\n */\nfunction intersection(interval1, interval2) {\n\n    let start1 = Math.max(interval1[0], interval2[0]);\n    let end1 = Math.min(interval1[1], interval2[1]);\n\n    if (end1 >= start1) {\n        return isPrime(end1 - start1 + 1);\n    } else {\n        return \"NO\";\n    }\n}\n\nfunction isPrime(number) {\n    if (number <= 1) {\n        return false;\n    }\n    for (let i = 2, sqrt = Math.sqrt(number); i < sqrt; i++) {\n        if (number % i === 0) {\n            return false;\n        }\n    }\n\n    return number > 1;\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "/**\n * \n * Jeder kennt die Fibonacci-Folge, die in den letzten Jahrhunderten von Mathematikern tiefgehend untersucht wurde. Was die meisten Menschen jedoch nicht wissen, ist die Tribonacci-Folge. Die Tribonacci-Folge wird durch die Rekursion definiert: tri(1) = 3 tri(n) = 1 + n / 2, wenn n gerade ist. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), wenn n ungerade ist. Zum Beispiel: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 Sie erhalten eine nicht-negative ganze Zahl n und m\u00fcssen eine Liste der ersten n + 1 Zahlen der Tribonacci-Folge zur\u00fcckgeben. Beispiele: tri(3) = [1, 3, 2, 8]\n * \n */\nfunction tri(n) {\n    // Hier kommt dein Code rein...\n\n    return [];\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "/**\n * \n * Gegeben eine positive ganze Zahl n, gib das Produkt der ungeraden Ziffern zur\u00fcck.\n *     Gib 0 zur\u00fcck, wenn alle Ziffern gerade sind.\n *     Zum Beispiel:\n * \n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n *\n */\nfunction digits(n) {\n  let product = 1;\n  while (n > 0){\n    if((n % 10) % 2 !== 0){\n      product *= n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "/**\n * Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n * is_nested('[[]]') \u279e True\n * is_nested('[]]]]]]][[[[[]') \u279e False\n * is_nested('[][]') \u279e False\n * is_nested('[]') \u279e False\n * is_nested('[[][]]')\ufffd\ufffd True\n * is_nested('[[]][[') \u2192 True\n */\nfunction isNested(string) {\n\n  let countOpen = 0;\n  for (let i=0;i<string.length;i++){\n    if(string[i]==='['){\n      countOpen++\n    }\n    else if(string[i]===']'){\n      countOpen--;\n      if(countOpen<0){\n        return false;\n      }\n    }\n  }\n\n  return countOpen === 0\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "/**\n * \n * Sie erhalten eine Liste von Zahlen.\n * Sie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\n * runden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\n * Beispiele:\n * F\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\n * F\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\n * F\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\n * F\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\n * F\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n * \n */\nfunction sumSquares(lst) {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      result += Math.ceil(lst[i])**2\n    } else {\n      result += Math.floor(lst[i])**2\n    }\n  }\n  return result;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "/**\n * * \n * Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\n * Hinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n * \n * Beispiele:\n * \n * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n * check_if_last_char_is_a_letter(\"\") \u279e False \n *\n */\nfunction checkIfLastCharIsALetter(txt) {\n    let result = false;\n    if (txt.length > 0) {\n        let lastChar = txt.substr(-1);\n        console.log(lastChar.charCodeAt());\n        if ((lastChar >= 'A' && lastChar <= 'Z') || (lastChar >= 'a' && lastChar <= 'z')) {\n            result = true;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "/**\n * \n * Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n * \n * Beispiele:\n * \n * can_arrange([1,2,4,3,5]) = 3\n * can_arrange([1,2,3]) = -1\n *\n */\nfunction canArrange(arr) {\n  for (var i = arr.length-1; i > 0; i--) {\n    if (arr[i] < arr[i-1]) {\n      return i;\n    }\n  }\n  return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "/**\n * * \n * Erstellen Sie eine Funktion, die ein Tupel (a, b) zur\u00fcckgibt, wobei 'a' die gr\u00f6\u00dfte negative Ganzzahl und 'b' die kleinste positive Ganzzahl in einer Liste ist. Wenn es keine negativen oder positiven Ganzzahlen gibt, geben Sie sie als None zur\u00fcck.\n * \n * Beispiele:\n * \n * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n * largest_smallest_integers([]) == (None, None)\n * largest_smallest_integers([0]) == (None, None)\n *\n */\nfunction largestSmallestIntegers(lst) {\n    let negative = lst.filter((x) => x < 0);\n    let positive = lst.filter((x) => x >= 0);\n\n    if (negative.length === 0 || positive.length === 0) {\n        return [null, null];\n    }\n\n    const negatives = negative.sort().reverse();\n    const positives = positive.sort();\n\n    return [negatives[0], positives[positives.length - 1]];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "/**\n * \n * Das brasilianische Fakult\u00e4t ist definiert als:\n *     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n *     wobei n > 0\n * \n *     Zum Beispiel:\n * >>> special_factorial(4)\n * 288\n\n * The function will receive an integer as input and should return the special\n * factorial of this integer.\n *\n */\nfunction specialFactorial(n) {"}
{"task_id": "javascript/65", "language": "javascript", "completion": "/**\n * * \n * Du erh\u00e4ltst einen String, der einen Satz repr\u00e4sentiert. Der Satz enth\u00e4lt einige W\u00f6rter, die durch ein Leerzeichen getrennt sind. Du musst einen String zur\u00fcckgeben, der die W\u00f6rter aus dem urspr\u00fcnglichen Satz enth\u00e4lt, deren L\u00e4ngen Primzahlen sind. Die Reihenfolge der W\u00f6rter im neuen String sollte dieselbe wie im Original sein.\n * \n *     Beispiel 1:\n *         Eingabe: sentence = \"This is a test\"\n *         Ausgabe: \"is\"\n * \n *     Beispiel 2:\n *         Eingabe: sentence = \"lets go for swimming\"\n *         Ausgabe: \"go for\"\n * \n *     Einschr\u00e4nkungen:\n *         * 1 <= len(sentence) <= 100\n *         * Der Satz enth\u00e4lt nur Buchstaben.\n * \n */\nfunction wordsInSentence(sentence) {\n    let result = \"\";\n\n    // split sentence into an array of words\n    const arr = sentence.split(\" \");\n    for (let i=0; i<arr.length; i++) {\n        // check if word length is prime\n        if (isPrime(arr[i].length)) {\n            // append word to the result string\n            if (result === \"\") {\n                result += arr[i];\n            } else {\n                result += \" \" + arr[i];\n            }\n        }\n    }\n\n    return result;\n}\n\n\n/**\n * Checks if a number is prime.\n */\nfunction isPrime(n) {\n    for (let i=2; i<n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "/**\n * \n * Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Zahlen sind.\n * \n * Du kannst davon ausgehen, dass x und n g\u00fcltige Bruchzahlen sind und keinen Nenner von Null haben.\n * simplify(\"1/5\", \"5/1\") = True\n * simplify(\"1/6\", \"2/1\") = False\n * simplify(\"7/10\", \"10/2\") = False\n * \n */\n\n function simplify(x, n) {\n \tlet x_array = x.split(\"/\");\n \tlet y_array = n.split(\"/\");\n\n \treturn (Number(x_array[0]) * Number(y_array[1])) % Number(x_array[1]) === 0;\n }"}
{"task_id": "javascript/67", "language": "javascript", "completion": "/**\n * Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n *     in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n *     Hinweis: Wenn es mehrere Elemente mit \u00e4hnlicher Summe ihrer Ziffern gibt,\n *     ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n * \n *     Zum Beispiel:\n * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n * >>> order_by_points([]) == []\n *\n */\nfunction orderByPoints(nums) {\n\tvar points = nums.map((num) => ({\n\t\tnum: num,\n\t\tpoint: Math.abs(num).toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0),\n\t\tindex: nums.indexOf(num)\n\t}));\n\n\tpoints.sort((a, b) => {\n\t\tif (a.point < b.point) return -1;\n\t\telse if (a.point > b.point) return 1;\n\t\treturn a.index - b.index;\n\t});\n\n\treturn points.map(function(e) {\n\t\treturn e.num;\n\t})\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "/**\n * \n * Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n * \n * specialFilter([15, -73, 14, -15]) => 1 \n * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n */\nfunction specialfilter(nums) {\n    return nums.filter((num) => num > 10 && num % 2 !== 0).length;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "/**\n * Sie erhalten eine positive ganze Zahl n. Sie m\u00fcssen ein Integer-Array a der L\u00e4nge n erstellen.\n *         F\u00fcr jedes i (1 \u2264 i \u2264 n) gilt: a[i] = i * i - i + 1.\n *         Geben Sie die Anzahl der Tripel (a[i], a[j], a[k]) von a zur\u00fcck, bei denen i < j < k gilt und a[i] + a[j] + a[k] ein Vielfaches von 3 ist.\n * \n *     Beispiel:\n *         Eingabe: n = 5\n *         Ausgabe: 1\n *         Erkl\u00e4rung:\n *         a = [1, 3, 7, 13, 21]\n *         Das einzige g\u00fcltige Tripel ist (1, 7, 13).\n * \n */\nfunction getMaxTriples(n) {\n    // var a = Array.apply(null, new Array(n)).map(Number.prototype.valueOf,0);\n\n    let count = 0;\n\n    for (let i = 0; i < n - 2; ++i) {\n        for (let j = i + 1; j < n - 1; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                let sum = a[i] + a[j] + a[k];\n                if (sum % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "/**\n * * \n * Es gibt acht Planeten in unserem Sonnensystem: Der Sonne am n\u00e4chsten ist Merkur, dann folgen Venus, die Erde, Mars, Jupiter, Saturn, Uranus und Neptun. Schreiben Sie eine Funktion, die zwei Planetennamen als Zeichenketten planet1 und planet2 annimmt. Die Funktion sollte ein Tupel zur\u00fcckgeben, das alle Planeten enth\u00e4lt, deren Umlaufbahnen zwischen der Umlaufbahn von Planet1 und der Umlaufbahn von Planet2 liegen und nach N\u00e4he zur Sonne sortiert sind. Die Funktion sollte ein leeres Tupel zur\u00fcckgeben, wenn planet1 oder planet2 keine korrekten Planetennamen sind. Beispiele:\n * \n * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n *\n */\nfunction bf(planet1, planet2) {\n  const order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \n  // Find index of planet1 and planet2 in the sorted array. Return empty tuple if they do not exist.\n  const index1 = order.indexOf(planet1);\n  const index2 = order.indexOf(planet2);\n  \n  if (index1 === -1 || index2 === -1) return [];\n\n  // Find intersection of elements between both indexes\n  let planetList = [];\n  for (let i = Math.min(index1, index2); i < Math.max(index1, index2); i++) {\n    planetList.push(order[i]);\n  }\n\n  // Sort list by proximity to the sun.\n  const distanceToSun = {\"Mercury\": 0.4,\"Venus\": 0.7,\"Earth\": 1.0,\"Mars\": 1.52,\"Jupiter\": 5.2,\"Saturn\": 9.5,\"Uranus\": 19.18,\"Neptune\": 30.06};\n  planetList = planetList.sort((a, b) => distanceToSun[a] - distanceToSun[b]);\n\n  return planetList;\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "/**\n * \n * Ein einfaches Programm, das den Wert von x zur\u00fcckgeben sollte, wenn n eine Primzahl ist, und den Wert von y zur\u00fcckgeben sollte, wenn nicht.\n * \n * Beispiele:\n * \n * for x_or_y(7, 34, 12) == 34\n * for x_or_y(15, 8, 5) == 5\n * \n */\nfunction xOrY(n, x, y) {\n\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n\n/**\n * Pr\u00fcft ob der \u00fcbergebene Parameter eine Primzahl ist.\n */\nfunction isPrime(n) {\n  \n  if (n == 2 || n == 3) {\n    return true;\n  }\n\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    \n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "/**\n * * \n * Gegeben eine Liste von Zahlen, gib die Summe der Quadrate der Zahlen in der Liste zur\u00fcck, die ungerade sind. Ignoriere Zahlen, die negativ oder keine ganzen Zahlen sind.\n * \n *     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n *     double_the_difference([-1, -2, 0]) == 0\n *     double_the_difference([9, -2]) == 81\n *     double_the_difference([0]) == 0  \n *     \n *     Wenn die Eingangsliste leer ist, gib 0 zur\u00fcck.\n * \n *\n */\nfunction doubleTheDifference(lst) {\n\t// Schleife \u00fcber alle Zahlen in der Liste\n\tvar summe = 0;\n\tfor (var i=0; i<lst.length; i++) {\n\t\t// Pr\u00fcfe, ob die Zahl ungerade ist und eine positive ganze Zahl ist\n\t\tif (lst[i] % 2 !== 0 && Number.isInteger(lst[i]) && lst[i] > 0) {\n\t\t\tsumme += Math.pow(lst[i], 2);\n\t\t}\n\t}\n\n\t// Gib die Summe der Quadrate der ungeraden Zahlen in der Liste als Antwort zur\u00fcck\n\treturn summe;\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "/**\n * \n * Sie erhalten den Namen einer Klasse (einen String) und eine Liste von Erweiterungen. Die Erweiterungen sollen verwendet werden, um zus\u00e4tzliche Klassen zur Klasse zu laden. Die St\u00e4rke der Erweiterung wird wie folgt definiert: Sei CAP die Anzahl der Gro\u00dfbuchstaben im Namen der Erweiterung und SM die Anzahl der Kleinbuchstaben im Namen der Erweiterung. Die St\u00e4rke wird durch den Bruch CAP - SM gegeben. Sie sollten die st\u00e4rkste Erweiterung finden und einen String in diesem Format zur\u00fcckgeben: ClassName.StrongestExtensionName. Wenn es zwei oder mehr Erweiterungen mit der gleichen St\u00e4rke gibt, sollten Sie die w\u00e4hlen, die zuerst in der Liste steht. Zum Beispiel, wenn Sie \"Slices\" als Klasse und eine Liste von Erweiterungen erhalten: ['SErviNGSliCes', 'Cheese', 'StUfFed'], sollten Sie 'Slices.SErviNGSliCes' zur\u00fcckgeben, da 'SErviNGSliCes' die st\u00e4rkste Erweiterung ist (ihre St\u00e4rke ist -1). Beispiel:\n * \n * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n *\n */\nfunction strongestExtension(classname, extensions) {\n  var max = 0;\n  var result = '';\n\n  for (var i in extensions){\n    if (extensions[i].toLowerCase() === classname.toLowerCase()){\n      return classname + '.' + extensions[i];\n    }\n    \n    var cap = extensions[i].replace(/[^A-Z]/g,\"\").length;\n    var sm  = extensions[i].length - cap;\n\n    if (cap - sm > max){\n      max = cap - sm;\n      result = classname + '.' + extensions[i];\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "/**\n * \n * Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n * cycpattern_check(\"abcd\",\"abd\") => False\n * cycpattern_check(\"hello\",\"ell\") => True\n * cycpattern_check(\"whassup\",\"psus\") => False\n * cycpattern_check(\"abab\",\"baa\") => True\n * cycpattern_check(\"efef\",\"eeff\") => False\n * cycpattern_check(\"himenss\",\"simen\") => True\n\n *\n */\nfunction cycpatternCheck(a, b) {\n  if (b.length > a.length) return false;\n  \n  let doubleA = a + a;\n\n  if (doubleA.includes(b)) return true;\n  else return false;\n}"}
{"task_id": "javascript/75", "language": "javascript", "completion": "/**\n * Gegeben eine positive Ganzzahl, erhalte ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gib sie in Kleinbuchstaben zur\u00fcck.\n * Einschr\u00e4nkungen: 1 <= num <= 3999\n * \n * Beispiele:\n * >>> int_to_mini_roman(19) == 'xix'\n * >>> int_to_mini_roman(152) == 'clii'\n * >>> int_to_mini_roman(426) == 'cdxxvi'\n *\n */\nfunction intToMiniRoman(number) {"}
{"task_id": "javascript/76", "language": "javascript", "completion": "/**\n * Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib True zur\u00fcck, wenn die drei Seiten ein rechtwinkliges Dreieck bilden, ansonsten False. Ein rechtwinkliges Dreieck ist ein Dreieck, bei dem ein Winkel ein rechter Winkel oder 90 Grad ist. Beispiel:\n * \n * right_angle_triangle(3, 4, 5) == True\n * right_angle_triangle(1, 2, 3) == False\n */\nfunction rightAngleTriangle(a, b, c) {\n    return a ** 2 + b ** 2 === c ** 2;\n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "/**\n * \n * Du erh\u00e4ltst einen String s.\n *     Wenn s[i] ein Buchstabe ist, kehre seine Gro\u00df- und Kleinschreibung um, oder umgekehrt,\n *     ansonsten belasse es so wie es ist.\n *     Wenn der String keine Buchstaben enth\u00e4lt, kehre den String um.\n *     Die Funktion sollte den resultierenden String zur\u00fcckgeben.\n *     Beispiele\n * \n * solve(\"1234\") = \"4321\"\n * solve(\"ab\") = \"AB\"\n * solve(\"#a@C\") = \"#A@c\"\n *\n */\nfunction solve(s) {\n    let output = '';\n\n    for (let char of s.split('')) {\n\n        if (char >= 'a' && char <= 'z') {\n            output += String.fromCharCode(char.charCodeAt() - 32);\n        } else if (char >= 'A' && char <= 'Z') {\n            output += String.fromCharCode(char.charCodeAt() + 32);\n        } else {\n            output += char;\n        }\n\n    }\n    return output;\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "/**\n * * \n * Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n *     Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n *\n */\nfunction stringToMd5(text) {"}
{"task_id": "javascript/79", "language": "javascript", "completion": "/**\n * * \n * Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n * \n * Zum Beispiel:\n * \n * generate_integers(2, 8) => [2, 4, 6, 8]\n * generate_integers(8, 2) => [2, 4, 6, 8]\n * generate_integers(10, 14) => []\n *\n */\nfunction generateIntegers(a, b) {\n  let result = [];\n  \n  if (a > b) {\n    let temp = a;\n    a = b;\n    b = temp;\n  }\n\n  for (let i=a; i<=b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}"}

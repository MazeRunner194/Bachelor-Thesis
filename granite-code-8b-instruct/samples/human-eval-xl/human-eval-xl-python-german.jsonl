{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if balance + operation < 0:\n            return True\n        balance += operation\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\nEine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\nF\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    return ''.join(str((int(a[i]) + int(b[i])) % 2) for i in range(len(a)))"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Aus einer Liste von Zeichenketten soll die l\u00e4ngste zur\u00fcckgegeben werden. Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zur\u00fcckgegeben werden. Falls die Eingabeliste leer ist, soll null zur\u00fcckgegeben werden.\n    \n    >>> longest([])\n    None\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\""}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Sonderf\u00e4lle\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    remainder = a % b\n\n    while remainder != 0:\n        a = b\n        b = remainder\n        remainder = a % b\n\n    return b"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List, Tuple\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n    G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n    Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    mapping = {\"null\": 0, \"eins\": 1, \"zwei\": 2, \"drei\": 3, \"vier\": 4, \"f\u00fcnf\": 5, \"sechs\": 6,\n                \"sieben\": 7, \"acht\": 8, \"neun\": 9}\n    words = numbers.split()\n    numbers = list(map(lambda word: mapping[word], words))\n    sorted_numbers = sorted(numbers)\n    return ' '.join([str(number) for number in sorted_numbers])"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "def flip_case(string: str) -> str:\n    \"\"\" F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    new_string = \"\"\n\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n\n    return new_string"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l):\n    # map returns a list of transformed elements\n    return list(map(abs, l))"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if (n % i) == 0:\n            return False\n    else:\n        return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "python/11", "language": "python", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    # Implementieren Sie Ihre L\u00f6sung hier"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    else:\n        return False"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n):\n    # Initialisierung der ersten vier Elemente der Fib4-Zahlenfolge\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return c\n    elif n == 3:\n        return d\n\n    # Rekursionsformel zur Berechnung des n-ten Elements der Fib4-Zahlenfolge\n    for i in range(4, n+1):\n        next_element = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = next_element\n\n    return d"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Gib den Median der Elemente in der Liste l zur\u00fcck.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    return sorted(l)[len(l) // 2]"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n    \n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n\n    # Vergleicht die ersten und letzten Zeichen des Strings. Falls\n    # sie gleich sind, wird der String gek\u00fcrzt und wiederholt. Ansonsten\n    # ist das String kein Palindrom.\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([c for c in text if not c.lower() in vowels])"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l, t):\n    \"\"\"Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\"\"\"\n    for i in range(len(l)):\n        if l[i] >= t:\n            return False\n    return True"}
{"task_id": "python/19", "language": "python", "completion": "def add(x: int, y: int):\n    \"\"\"Addiere zwei Zahlen x und y.\"\"\"\n    return x + y"}
{"task_id": "python/20", "language": "python", "completion": "def same_chars(s0, s1):\n    def count(c, s):\n        return sum([1 for char in s if char == c])\n\n    for c in set(s0):\n        if count(c, s0) != count(c, s1):\n            return False\n\n    return True"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    \"\"\"Gib die n-te Fibonacci-Zahl zur\u00fcck.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1: list, l2: list):\n    \"\"\"Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    \"\"\"Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n % 2 == 0:\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n ist eine Funktion, die Zahlen von 1 bis n summiert.\n    \n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    summe = 0\n\n    for i in range(1, n + 1):\n        summe += i\n\n    return summe"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs):\n    result = []\n    for i in range(len(xs)-1):\n        result.append(xs[i+1]*(i+1))\n    return result"}
{"task_id": "python/26", "language": "python", "completion": "def memoize(f):\n    cache = {}\n\n    def wrapped(*args, **kwargs):\n        key = (args, tuple(kwargs.items()))\n        if key not in cache:\n            cache[key] = f(*args, **kwargs)\n        return cache[key]\n\n    return wrapped\n\n\n@memoize\ndef fibfib(n: int):\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "python/27", "language": "python", "completion": "\"\"\"Schreiben Sie eine Funktion vowels_count, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n\nBeispiele:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n\"\"\""}
{"task_id": "python/28", "language": "python", "completion": "def search(lst):\n    counts = {}\n\n    for i in lst:\n        if not i > 0:\n            continue\n\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n\n    max_count = 0\n    result = -1\n\n    for k, v in counts.items():\n        if v > max_count:\n            max_count = v\n            result = k\n\n    return result"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2.0  # Herleitung des Satzes der Dreiecksgleichung\n        area = (s*(s - a)*(s - b)*(s - c)) ** 0.5  # Fl\u00e4chenformel des Dreiecks\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q, w):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_list(lst):\n        return sum(lst)\n\n    if is_palindrome(q) and sum_list(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    \"\"\"Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist.\"\"\"\n    # Erstellung eines Satzes der Primzahlen zwischen 2 und a:\n    primes = [True] * (a + 1)\n    primes[0], primes[1] = False, False\n    \n    # Berechnung aller Primzahlen zwischen 2 und a:\n    for i in range(2, int(a**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, a + 1, i):\n                primes[j] = False\n                \n    # Z\u00e4hlen der Primzahlen im Produkt:\n    product_primes = [p for p in range(2, a + 1) if primes[p]]\n    return len(product_primes) == 3"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    \"\"\"Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Buchstabennoten gem\u00e4\u00df der folgenden Tabelle ausgeben kann:\n\n                 GPA       |    Buchstaben Note\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n        Beispiel:\n    \n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n\n    return letter_grades"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    \"\"\"Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n    Beispiele\n    \n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n    else:\n        for i in range(2,int(len(string)/2)+1):\n            if (len(string)%i == 0):\n                return False\n        return True"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    # String representation of input number\n    str_num = str(N)\n\n    # Sum up the numbers in the string and convert to binary\n    result = sum(int(digit) for digit in str_num)\n    return bin(result)[2:]"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    \"\"\"\n    Sie erhalten eine zweidimensionale Datenstruktur als verschachtelte Listen, die einer Matrix \u00e4hnelt, jedoch k\u00f6nnen im Gegensatz zu Matrizen unterschiedlich viele Spalten in jeder Zeile vorhanden sein. Gegeben sei eine Liste \"lst\" und eine ganze Zahl \"x\". Finden Sie die Zahlen \"x\" in der Liste und geben Sie eine Liste von Tupeln zur\u00fcck, [(x1, y1), (x2, y2) ...], wobei jedes Tupel eine Koordinate (Zeile, Spalte) darstellt, beginnend bei 0. Sortieren Sie die Koordinaten zun\u00e4chst nach Zeilen in aufsteigender Reihenfolge. Sortieren Sie auch die Koordinaten der Zeile nach Spalten in absteigender Reihenfolge.\n\n    Beispiele:\n    \n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n\n    result.sort()\n    for row in result:\n        row.sort(reverse=True)\n\n    return result"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n    i = 0\n    while i + 1 < len(lst) and lst[i] == lst[i+1]:\n        i += 1\n    return lst[i+1]"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    \"\"\"\n    Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Langeweilen zu z\u00e4hlen. Eine Langeweile ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n\n    Zum Beispiel:\n    \n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    counter = 0\n    words = S.split()\n    for word in words:\n        if word == \"ich\":\n            sentence_endings = [\"?\", \"!\", \".\"]\n            if words[words.index(word) + 1] in sentence_endings:\n                counter += 1\n    return counter"}
{"task_id": "python/40", "language": "python", "completion": "import math\nfrom typing import List\n\ndef get_prime(n):\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n\ndef sum_digit(num):\n    res = 0\n    while num > 0:\n        digit = num % 10\n        res += digit\n        num //= 10\n    return res\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    largest = max(lst)\n    if get_prime(largest):\n        return sum_digit(largest)\n\n    else:\n        for i in range(largest, 0, -1):\n            if get_prime(i):\n                return sum_digit(i)"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dictionary):\n    if len(dictionary) == 0:\n        return False\n    \n    # Check whether all keys are strings in uppercase or lowercase\n    first_key = list(dictionary.keys())[0]\n    if isinstance(first_key, str):\n        case = first_key.isupper()\n        for key in dictionary.keys():\n            if not (isinstance(key, str) and key.isupper() == case):\n                return False\n    else:\n        return False\n    \n    # Check whether all values are strings\n    for value in dictionary.values():\n        if not isinstance(value, str):\n            return False\n\n    return True"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    value = float(value)\n    integer_part, decimal_part = str(value).split('.')\n    integer_part = int(integer_part)\n    if decimal_part[0] >= '5':\n        return integer_part + 1\n    else:\n        return integer_part"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n    Die erste Ebene hat n Steine.\n    Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n    Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n    i die Anzahl der Steine in der Ebene (i+1) darstellt.\n\n        Beispiele:\n    \n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    pile = []\n    for i in range(n):\n        if (n % 2 == 0):\n            n += 1\n        else:\n            n += 2\n        pile.append(n - 2)\n    return pile"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    return s.split(', ')"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    \"\"\"Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n\n    Zum Beispiel:\n    \n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    for z in range(x, y + 1):\n        if (z % 2 == 0):\n            return z\n    return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    \"\"\"Calculate the average of n and m, round it to the nearest integer, and convert it to binary. If n is greater than m, return -1.\"\"\"\n\n    # Check if n is greater than m\n    if n > m:\n        return -1\n\n    # Calculate the average of n and m\n    avg = (n + m) / 2\n\n    # Round the average to the nearest integer\n    rounded_avg = round(avg)\n\n    # Convert the rounded average to binary\n    binary_avg = bin(rounded_avg)[2:]\n\n    return \"0b\" + binary_avg"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            res.append(sum)\n    return res\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n\n        Beispiel 1:\n\n            Eingabe: 3\n        Ausgabe: (1, 2)\n        Erkl\u00e4rung:\n        Ganze Palindrome sind 1, 2, 3. Eines davon ist gerade und zwei davon sind ungerade.\n\n        Beispiel 2:\n\n            Eingabe: 12\n        Ausgabe: (4, 6)\n        Erkl\u00e4rung:\n        Ganze Palindrome sind 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier davon sind gerade und sechs davon sind ungerade.\n\n        Hinweis:\n        1. 1 <= n <= 10^3\n        2. Das zur\u00fcckgegebene Tupel enth\u00e4lt die Anzahl der geraden und ungeraden ganzen Palindrome.\n    \n    \"\"\"\n    return (n // 2, n - n // 2)\n\n\ndef main():\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "python/49", "language": "python", "completion": "#17.04.2022\ndef move_one_ball(arr):\n    n = len(arr)\n\n    if (n == 0):\n        return True\n\n    count = [0] * n\n    for i in range(n):\n        count[i % arr[i]] += 1\n\n    for i in range(1, n):\n        if count[i] > count[i - 1]:\n            return False\n\n    return True\n\nprint(move_one_ball([3,4,5,2,1]))"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    # iterate through the first list and check if all elements are even\n    for num in lst1:\n        if num % 2 != 0:\n            break\n    else:\n        return \"YES\"\n\n    # check if any odd number can be swapped with an even number from the second list\n    for i, num in enumerate(lst1):\n        if num % 2 != 0:\n            for j, other_num in enumerate(lst2):\n                if other_num % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n\n    return \"NO\"\n\n\nprint(exchange([1, 3, 5, 7], [2, 4, 6]))\n# Output: YES"}
{"task_id": "python/51", "language": "python", "completion": "def reverse_delete(s,c):\n    \"\"\"Aufgabe\n    Wir haben zwei Zeichenketten s und c. Du musst alle Zeichen in s l\u00f6schen, die einem Zeichen in c entsprechen.\n    Dann musst du \u00fcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n    Eine Zeichenkette ist ein Palindrom, wenn sie r\u00fcckw\u00e4rts gelesen genauso aussieht wie vorw\u00e4rts.\n    Du solltest ein Tupel zur\u00fcckgeben, das die resultierende Zeichenkette und True/False f\u00fcr die \u00dcberpr\u00fcfung enth\u00e4lt.\n    Beispiel\n    F\u00fcr s = \"abcde\", c = \"ae\" sollte das Ergebnis ('bcd',False) sein.\n    F\u00fcr s = \"abcdef\", c = \"b\" sollte das Ergebnis ('acdef',False) sein.\n    F\u00fcr s = \"abcdedcba\", c = \"ab\" sollte das Ergebnis ('cdedc',True) sein.\n    \n    \"\"\"\n\n    # your code here"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    Sie erhalten ein rechteckiges Gitter von Brunnen. Jede Zeile repr\u00e4sentiert einen einzelnen Brunnen, und jede 1 in einer Zeile repr\u00e4sentiert eine einzelne Einheit Wasser. Jeder Brunnen hat einen entsprechenden Eimer, der verwendet werden kann, um Wasser daraus zu extrahieren, und alle Eimer haben die gleiche Kapazit\u00e4t. Ihre Aufgabe ist es, die Eimer zu verwenden, um die Brunnen zu leeren. Geben Sie die Anzahl der Male aus, die Sie die Eimer senken m\u00fcssen.\n\n    Beispiel 1:\n    Eingabe:\n        grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        Eimerkapazit\u00e4t: 1\n    Ausgabe: 6\n\n    Beispiel 2:\n    Eingabe:\n        grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        Eimerkapazit\u00e4t: 2\n    Ausgabe: 5\n\n    Beispiel 3:\n    Eingabe:\n        grid: [[0,0,0], [0,0,0]]\n        Eimerkapazit\u00e4t: 5\n    Ausgabe: 0\n\n    Einschr\u00e4nkungen:\n    * alle Brunnen haben die gleiche L\u00e4nge\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= Kapazit\u00e4t <= 10\n    \n    \"\"\"\n\n    # calculate number of rows\n    n_rows = len(grid)\n\n    # count filled columns\n    n_cols = max([sum(row) for row in grid])\n\n    # determine how many times the eimeter is used to fill the whole column\n    return int(math.ceil((n_cols * capacity) / sum([row[0] for row in grid])))"}
{"task_id": "python/53", "language": "python", "completion": "import re\n\ndef select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(re.findall(\"[bcdfghjklmnpqrstvwxyz]\", word)) == n]"}
{"task_id": "python/54", "language": "python", "completion": "def maximum(arr, k):\n    if k == 0 or arr is None:\n        return []\n    else:\n        heap = []\n        for item in arr[:k]:\n            if len(heap) < k:\n                heapq.heappush(heap, item)\n            elif item > heap[0]:\n                heapq.heapreplace(heap, item)\n        result = sorted(heap, reverse=True)\n        return result"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Gegeben sei ein nicht-leeres Array von ganzen Zahlen arr und eine ganze Zahl k. Gib die Summe der Elemente mit h\u00f6chstens zwei Ziffern aus den ersten k Elementen von arr zur\u00fcck.\n\n        Beispiel:\n\n            Eingabe: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Ausgabe: 24 # Summe von 21 + 3\n\n        Einschr\u00e4nkungen:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the first k elements in arr and add them to the sum\n    for i in range(k):\n        if arr[i] >= 10:\n            total_sum += arr[i] // 10 + arr[i] % 10\n        else:\n            total_sum += arr[i]\n    \n    # Return the final sum\n    return total_sum"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start <= end:\n        length = end - start + 1\n    else:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    result = []\n    a = 1\n    b = 3\n    c = 2\n    result.append(a)\n    if n > 0:\n        result.append(b)\n    if n > 1:\n        result.append(c)\n\n    for i in range(3, n+1):\n        next_value = a + b + c\n        a = b\n        b = c\n        c = next_value\n        result.append(next_value)\n    \n    return result"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Gegeben eine positive ganze Zahl n, gib das Produkt der ungeraden Ziffern zur\u00fcck.\n    Gib 0 zur\u00fcck, wenn alle Ziffern gerade sind.\n    Zum Beispiel:\n    \n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return n if n <= 9 else (n % 10 * digits(n // 10)) if n % 2 else digits(n // 10)"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n\n    return len(stack) == 0"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    \"\"\"\n    Sie erhalten eine Liste von Zahlen.\n    Sie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\n    runden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\n\n    Beispiele:\n        F\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\n        F\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\n        F\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\n        F\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\n        F\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n    \"\"\"\n\n    squares = list(map(lambda x: round(x ** 2), lst))\n    return sum(squares)\n\n\ndef main():\n    assert sum_squares([1, 2, 3]) == 14\n    assert sum_squares([1, 4, 9]) == 98\n    assert sum_squares([1, 3, 5, 7]) == 84\n    assert sum_squares([1.4, 4.2, 0]) == 29\n    assert sum_squares([-2.4, 1, 1]) == 6\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and not (txt[-1].isalpha() and \" \" in txt)"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    \"\"\"Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n\n    Beispiele:\n    \n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\ndef solution(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n\n    positive = []\n    negative = []\n\n    for i in lst:\n        if i > 0:\n            positive.append(i)\n        elif i < 0:\n            negative.append(i)\n\n    if len(positive) == 0 or len(negative) == 0:\n        return (None, None)\n\n    smallest_positive = min(positive)\n    largest_negative = max(negative)\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "python/64", "language": "python", "completion": "def special_factorial(n):\n    \"\"\"Das brasilianische Fakult\u00e4t ist definiert als:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    wobei n > 0\n\n        Zum Beispiel:\n    \n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\""}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Du erh\u00e4ltst einen String, der einen Satz repr\u00e4sentiert. Der Satz enth\u00e4lt einige W\u00f6rter, die durch ein Leerzeichen getrennt sind. Du musst einen String zur\u00fcckgeben, der die W\u00f6rter aus dem urspr\u00fcnglichen Satz enth\u00e4lt, deren L\u00e4ngen Primzahlen sind. Die Reihenfolge der W\u00f6rter im neuen String sollte dieselbe wie im Original sein.\n\n        Beispiel 1:\n        Eingabe: sentence = \"This is a test\"\n        Ausgabe: \"is\"\n\n        Beispiel 2:\n        Eingabe: sentence = \"lets go for swimming\"\n        Ausgabe: \"go for\"\n\n        Einschr\u00e4nkungen:\n        * 1 <= len(sentence) <= 100\n        * Der Satz enth\u00e4lt nur Buchstaben.\n    \"\"\"\n\n    words = sentence.split(\" \")\n    primes = [2, 3, 5, 7]\n    result_words = []\n\n    for word in words:\n        if len(word) in primes:\n            result_words.append(word)\n    \n    return \" \".join(result_words)"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = [int(n) for n in x.split(\"/\")]\n    n_numerator, n_denominator = [int(n) for n in n.split(\"/\")]\n    \n    simplified_x = (x_numerator / n_numerator) * n_denominator == x_denominator\n    return simplified_x"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    def get_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    sorted_nums = sorted(nums, key=get_sum)\n    \n    for i, num in enumerate(sorted_nums):\n        if num < 0:\n            sorted_nums[i] *= -1\n    \n    return sorted_nums"}
{"task_id": "python/68", "language": "python", "completion": "def is_odd(n):\n    return n % 2 == 1\n\ndef has_first_and_last_digit_odd(n):\n    first_digit = n // 10\n    last_digit = n % 10\n    return is_odd(first_digit) and is_odd(last_digit)\n\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and has_first_and_last_digit_odd(num):\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    \"\"\"\n    Sie erhalten eine positive ganze Zahl n. Sie m\u00fcssen ein Integer-Array a der L\u00e4nge n erstellen.\n        F\u00fcr jedes i (1 \u2264 i \u2264 n) gilt: a[i] = i * i - i + 1.\n        Geben Sie die Anzahl der Tripel (a[i], a[j], a[k]) von a zur\u00fcck, bei denen i < j < k gilt und a[i] + a[j] + a[k] ein Vielfaches von 3 ist.\n\n        Beispiel:\n        Eingabe: n = 5\n        Ausgabe: 1\n        Erkl\u00e4rung:\n        a = [1, 3, 7, 13, 21]\n        Das einzige g\u00fcltige Tripel ist (1, 7, 13).\n\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    result += 1\n    return result"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    planets = [\"Sun\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    try:\n        i1 = planets.index(planet1)\n        i2 = planets.index(planet2)\n    except ValueError:\n        return ()\n\n    if planet1 == planet2 or i1 > i2:\n        return ()\n\n    bf = []\n    for p in planets[i1+1:i2]:\n        bf.append(p)\n\n    return tuple(bf)"}
{"task_id": "python/71", "language": "python", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(num):\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    '''\n    Gegeben eine Liste von Zahlen, gib die Summe der Quadrate der Zahlen in der Liste zur\u00fcck, die ungerade sind. Ignoriere Zahlen, die negativ oder keine ganzen Zahlen sind.\n\n        double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    Wenn die Eingangsliste leer ist, gib 0 zur\u00fcck.\n    \n    '''\n\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x % 2 != 0)"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    best = None\n    for extension in extensions:\n        if (extension.count(\"A\") - extension.count(\"a\")) > 0:\n            if best is None or extension.count(\"A\") - extension.count(\"a\") > best.count(\"A\") - best.count(\"a\"):\n                best = extension\n                \n    return \"%s.%s\" % (class_name, best)"}
{"task_id": "python/74", "language": "python", "completion": "def cycpattern_check(a, b):\n    \n    # Create a rotated version of the first word and check if it contains the second word.\n    return any(b in a[i:] + a[:i] for i in range(len(a)))"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Gegeben eine positive Ganzzahl, erhalte ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gib sie in Kleinbuchstaben zur\u00fcck.\nEinschr\u00e4nkungen: 1 <= num <= 1000\n\n    Beispiele:\n    \n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n\n    numeral = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix']\n    tens = ['', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx', 'lxxx', 'xc']\n    hundreds = ['', 'c', 'cc', 'ccc', 'cd', 'd', 'dc', 'dcc', 'dccc', 'cm']\n\n    if number < 10:\n        return numeral[number]\n    elif number < 100:\n        tens_digit = (number - (number % 10)) // 10\n        ones_digit = number % 10\n        return tens[tens_digit] + numeral[ones_digit]\n    else:\n        hundreds_digit = (number - (number % 100)) // 100\n        remainder = number % 100\n\n        if remainder < 10:\n            return hundreds[hundreds_digit] + numeral[remainder]\n        elif remainder < 100:\n            tens_digit = (remainder - (remainder % 10)) // 10\n            ones_digit = remainder % 10\n            return (\n                hundreds[hundreds_digit]\n                + tens[tens_digit]\n                + numeral[ones_digit]\n            )\n        else:\n            raise ValueError('Number is too large')"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    if a > (b + c) or b > (a + c) or c > (b + a):\n        return False\n    else:\n        return True"}
{"task_id": "python/77", "language": "python", "completion": "import re\n\ndef solve(s):\n    if len(re.findall('[a-zA-Z]', s)) == 0:\n        return s[::-1]\n    \n    output = ''\n    for char in s:\n        if not char.isalpha():\n            output += char\n            continue\n        \n        output += char.swapcase()\n    \n    return output"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        hash = hashlib.md5()\n        hash.update(text.encode('utf-8'))\n        return hash.hexdigest()"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n\n    Zum Beispiel:\n    \n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    # die kleinere Zahl wird als b gespeichert\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n        \n    numbers = list()\n\n    # alle geraden Zahlen zwischen a und b werden in eine Liste gespeichert\n    for i in range(a, b + 1):\n        if (i % 2 == 0):\n            numbers.append(i)\n            \n    return numbers"}

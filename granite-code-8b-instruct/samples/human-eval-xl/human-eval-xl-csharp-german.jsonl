{"task_id": "csharp/0", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Liste von Einzahlungs- und Abhebungsvorg\u00e4ngen auf einem Bankkonto, das mit einem Nullsaldo beginnt. Ihre Aufgabe besteht darin, festzustellen, ob zu irgendeinem Zeitpunkt das Guthaben des Kontos unter Null f\u00e4llt, und an diesem Punkt sollte die Funktion True zur\u00fcckgeben. Andernfalls sollte sie False zur\u00fcckgeben.\n        /// >>> BelowZero([1, 2, 3])\n        /// False\n        /// >>> BelowZero([1, 2, -4, 5])\n        /// True\n        /// \n        /// </summary>\n        public static bool BelowZero (List<int> operations) \n        {\n            int currentBalance = 0;\n\n            foreach(var operation in operations){\n                if (currentBalance + operation < 0){\n                    return true;\n                }\n                currentBalance += operation;\n            }\n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/1", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// F\u00fcr eine gegebene Liste von ganzen Zahlen soll ein Tupel zur\u00fcckgegeben werden, das aus der Summe und dem Produkt aller Zahlen in der Liste besteht.\n        /// Eine leere Summe soll gleich 0 und ein leeres Produkt gleich 1 sein.\n        /// >>> SumProduct([])\n        /// (0, 1)\n        /// >>> SumProduct([1, 2, 3, 4])\n        /// (10, 24)\n        /// </summary>\n        public static List<int> SumProduct(List<int> numbers) \n        {"}
{"task_id": "csharp/2", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die Eingabe sind zwei Zeichenketten a und b, die nur aus 1en und 0en bestehen.\n        /// F\u00fchren Sie eine bin\u00e4re XOR-Operation auf diesen Eingaben aus und geben Sie das Ergebnis ebenfalls als Zeichenkette zur\u00fcck.\n        /// >>> StringXor('010', '110')\n        /// '100'\n        /// \n        /// </summary>\n        public static string StringXor (string a, string b) \n        {\n            if(a == null || b == null)\n                throw new ArgumentNullException(\"a\");\n\n            char[] arrayA = a.ToCharArray();\n            char[] arrayB = b.ToCharArray();\n\n            var resultArray = new List<char>();\n            \n            for(int i=0;i<arrayA.Length;i++) {\n\n                if((arrayA[i] == '1' && arrayB[i] == '0') || (arrayA[i] == '0' && arrayB[i] == '1'))\n                    resultArray.Add('1');\n                else \n                    resultArray.Add('0');\n            }\n\n            return new string(resultArray.ToArray());\n        }\n    }\n}"}
{"task_id": "csharp/3", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Aus einer Liste von Zeichenketten soll die l\u00e4ngste zur\u00fcckgegeben werden. Im Falle von mehreren Zeichenketten mit gleicher L\u00e4nge soll die erste zur\u00fcckgegeben werden. Falls die Eingabeliste leer ist, soll null zur\u00fcckgegeben werden.\n        /// >>> Longest([])\n        /// \n        /// >>> Longest(['a', 'b', 'c'])\n        /// 'a'\n        /// >>> Longest(['a', 'bb', 'ccc'])\n        /// 'ccc'\n        /// \n        /// </summary>\n        public static object Longest (List<string> strings) \n        {\n            if (strings.Count == 0)\n            {\n                return null;\n            }\n\n            string longestString = strings[0];\n            foreach(var str in strings)\n            {\n                if (str.Length > longestString.Length)\n                {\n                    longestString = str;\n                }\n            }\n            \n            return longestString;\n        }\n    }\n}"}
{"task_id": "csharp/4", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib den gr\u00f6\u00dften gemeinsamen Teiler von zwei ganzen Zahlen a und b zur\u00fcck.\n        /// >>> GreatestCommonDivisor(3, 5)\n        /// 1\n        /// >>> GreatestCommonDivisor(25, 15)\n        /// 5\n        /// \n        /// </summary>\n        public static int GreatestCommonDivisor (int a, int b) \n        {\n            if (b == 0) return a;"}
{"task_id": "csharp/5", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die Eingabe ist ein durch Leerzeichen getrennter String von Ziffern von 'null' bis 'neun'.\n        ///     G\u00fcltige Optionen sind 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00fcnf', 'sechs', 'sieben', 'acht' und 'neun'.\n        ///     Gib den String mit den Zahlen sortiert von klein nach gro\u00df zur\u00fcck.\n        /// >>> SortNumbers('three one five')\n        /// 'one three five'\n        /// \n        /// </summary>\n        public static string SortNumbers (string numbers) \n        {\n            var numbersArray = numbers.Split(\" \");\n\n            var numberDictionary = new Dictionary<string, int>();\n            \n            foreach(var item in numbersArray)\n            {\n                switch(item.ToLower())\n                {\n                    case \"null\":\n                        numberDictionary[\"zero\"] = 0;\n                        break;\n                        \n                    case \"eins\":\n                        numberDictionary[\"one\"] = 1;\n                        break;\n                        \n                    case \"zwei\":\n                        numberDictionary[\"two\"] = 2;\n                        break;\n                        \n                    case \"drei\":\n                        numberDictionary[\"three\"] = 3;\n                        break;\n                        \n                    case \"vier\":\n                        numberDictionary[\"four\"] = 4;\n                        break;\n                        \n                    case \"f\u00fcnf\":\n                        numberDictionary[\"five\"] = 5;\n                        break;\n                        \n                    case \"sechs\":\n                        numberDictionary[\"six\"] = 6;\n                        break;\n                        \n                    case \"sieben\":\n                        numberDictionary[\"seven\"] = 7;\n                        break;\n                        \n                    case \"acht\":\n                        numberDictionary[\"eight\"] = 8;\n                        break;\n                        \n                    case \"neun\":\n                        numberDictionary[\"nine\"] = 9;\n                        break;\n                }\n            }\n\n            var sortedNumbersArray = from pair in numberDictionary orderby pair.Value select pair.Key;\n            \n            return string.Join(\" \", sortedNumbersArray);\n        }\n    }\n}"}
{"task_id": "csharp/6", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben sei eine Liste von Zahlen (mit mindestens zwei Elementen). Wenden Sie eine lineare Transformation auf diese Liste an, so dass die kleinste Zahl zu 0 und die gr\u00f6\u00dfte zu 1 wird.\n        /// >>> RescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n        /// [0.0, 0.25, 0.5, 0.75, 1.0]\n        /// \n        /// </summary>\n        public static List<double> RescaleToUnit (List<double> numbers) \n        {\n            // Implement the linear transformation here...\n\n            return numbers;\n        }\n    }\n}"}
{"task_id": "csharp/7", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// F\u00fcr einen gegebenen String, tausche Kleinbuchstaben in Gro\u00dfbuchstaben und Gro\u00dfbuchstaben in Kleinbuchstaben um.\n        /// >>> FlipCase('Hello')\n        /// 'hELLO'\n        /// \n        /// </summary>\n        public static string FlipCase (string string0) \n        {\n            return new String(string0.Select(x => Char.IsUpper(x) ? Char.ToLower(x) : Char.ToUpper(x)).ToArray());\n\n        }\n    }\n}"}
{"task_id": "csharp/8", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib nur positive Zahlen in der Liste zur\u00fcck.\n        /// >>> GetPositive([-1, 2, -4, 5, 6])\n        /// [2, 5, 6]\n        /// >>> GetPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        /// [5, 3, 2, 3, 9, 123, 1]\n        /// \n        /// </summary>\n        public static List<int> GetPositive (List<int> l) \n        {\n            return l.Where(x => x > 0).ToList();"}
{"task_id": "csharp/9", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib \"true\" zur\u00fcck, wenn eine gegebene Zahl eine Primzahl ist, andernfalls gib \"false\" zur\u00fcck.\n        /// >>> IsPrime(6)\n        /// False\n        /// >>> IsPrime(101)\n        /// True\n        /// >>> IsPrime(11)\n        /// True\n        /// >>> IsPrime(13441)\n        /// True\n        /// >>> IsPrime(61)\n        /// True\n        /// >>> IsPrime(4)\n        /// False\n        /// >>> IsPrime(1)\n        /// False\n        /// \n        /// </summary>\n        public static bool IsPrime (int n) \n        {\n            if (n == 1 || n == 2) return true;\n            if (n < 2 || n % 2 == 0) return false;\n\n            var boundary = (int)Math.Floor(Math.Sqrt(n));\n            \n            for (var i = 3; i <= boundary; i += 2)\n            {\n                if (n % i == 0)\n                {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/10", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib sortierte eindeutige Elemente in einer Liste zur\u00fcck.\n        /// >>> Unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        /// [0, 2, 3, 5, 9, 123]\n        /// \n        /// </summary>"}
{"task_id": "csharp/11", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// PrimeFib gibt die n-te Zahl zur\u00fcck, die sowohl eine Fibonacci-Zahl als auch eine Primzahl ist.\n        /// >>> PrimeFib(1)\n        /// 2\n        /// >>> PrimeFib(2)\n        /// 3\n        /// >>> PrimeFib(3)\n        /// 5\n        /// >>> PrimeFib(4)\n        /// 13\n        /// >>> PrimeFib(5)\n        /// 89\n        /// \n        /// </summary>\n        public static int PrimeFib (int n) \n        {\n            // Hilfsfunktionen\n\n            int[] fibonacci = new int[n];\n            bool[] isPrime = new bool[n];\n\n            int index = 0;\n            fibonacci[index] = 1;\n            isPrime[index] = true;\n            index++;\n            fibonacci[index] = 2;\n            isPrime[index] = true;\n            index++;\n            for (int i = 0; i < n; i++) {\n                fibonacci[index] = fibonacci[i] + fibonacci[i + 1];\n                if (fibonacci[index] == 3)\n                    isPrime[index] = false;\n                else\n                    isPrime[index] = true;\n                index++;\n            }\n\n            for (int i = 2; i < n; i++) {\n                if (isPrime[i]) {\n                    int j = fibonacci[i];\n                    while (j <= n) {\n                        isPrime[j - 1] = false;\n                        j += fibonacci[i];\n                    }\n                }\n            }\n\n            for (int i = 0; i < n; i++) {\n                if (isPrime[i]) {\n                    return fibonacci[i];\n                }\n            }\n            return 0;\n        }\n\n    }\n}"}
{"task_id": "csharp/12", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// TriplesSumToZero nimmt eine Liste von ganzen Zahlen als Eingabe.\n        /// Es gibt True zur\u00fcck, wenn es drei verschiedene Elemente in der Liste gibt, die zu Null addieren, andernfalls gibt es False zur\u00fcck.\n        /// >>> TriplesSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> TriplesSumToZero([1, 3, -2, 1])\n        /// True\n        /// >>> TriplesSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> TriplesSumToZero([2, 4, -5, 3, 9, 7])\n        /// True\n        /// >>> TriplesSumToZero([1])\n        /// False\n        /// \n        /// </summary>\n        public static bool TriplesSumToZero (List<int> l) \n        {\n            foreach (var a in l)\n            {\n                foreach (var b in l)\n                {\n                    if (!a.Equals(b))\n                    {\n                        int c = 0 - (a + b);\n                        if (l.Contains(c))\n                            return true;\n                    }\n                }\n            }\n            return false;\n        }"}
{"task_id": "csharp/13", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// PairsSumToZero nimmt eine Liste von ganzen Zahlen als Eingabe.\n        /// Es gibt True zur\u00fcck, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls gibt es False zur\u00fcck.\n        /// >>> PairsSumToZero([1, 3, 5, 0])\n        /// False\n        /// >>> PairsSumToZero([1, 3, -2, 1])\n        /// False\n        /// >>> PairsSumToZero([1, 2, 3, 7])\n        /// False\n        /// >>> PairsSumToZero([2, 4, -5, 3, 5, 7])\n        /// True\n        /// >>> PairsSumToZero([1])\n        /// False\n        /// </summary>\n        public static bool PairsSumToZero (List<int> l) \n        {\n            foreach(int item in l){\n                if (l.Contains(-item)){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/14", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die Fib4-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n        ///     Fib4(0) -> 0\n        ///     Fib4(1) -> 0\n        ///     Fib4(2) -> 2\n        ///     Fib4(3) -> 0\n        ///     Fib4(n) -> Fib4(n-1) + Fib4(n-2) + Fib4(n-3) + Fib4(n-4).\n        ///     Bitte schreiben Sie eine Funktion, um das n-te Element der Fib4-Zahlenfolge effizient zu berechnen. Verwenden Sie keine Rekursion.\n        /// >>> Fib4(5)\n        /// 4\n        /// >>> Fib4(6)\n        /// 8\n        /// >>> Fib4(7)\n        /// 14\n        /// \n        /// </summary>\n        public static int Fib4 (int n) \n        {\n            if(n <= 0){\n                return 0;\n            } else if(n == 1 || n == 2){\n                return 0;\n            } else if(n == 3){\n                return 2;\n            }\n\n            var fib4 = new List<int>();\n\n            for (var i = 0; i < n; i++) {\n                if (i == 0) {\n                    fib4.Add(0);\n                } else if (i == 1 || i == 2) {\n                    fib4.Add(0);\n                } else if (i == 3) {\n                    fib4.Add(2);\n                } else {\n                    var sum = 0;\n\n                    for(var j = i - 4; j < i; j++){\n                        sum += fib4[j];\n                    }\n\n                    fib4.Add(sum);\n                }\n            }\n\n            return fib4[^1];\n        }\n    }\n}"}
{"task_id": "csharp/15", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib den Median der Elemente in der Liste l zur\u00fcck.\n        /// >>> Median([3, 1, 2, 4, 5])\n        /// 3\n        /// >>> Median([-10, 4, 6, 1000, 10, 20])\n        /// 15.0\n        /// \n        /// </summary>\n        public static object Median (List<int> l) \n        {\n            int mid = l.Count/2;\n            if(l.Count%2==1)\n                return l[mid];\n            else\n                return (double)(l[mid]+l[mid-1])/2;\n        }\n    }\n}"}
{"task_id": "csharp/16", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// \u00dcberpr\u00fcft, ob der gegebene String ein Palindrom ist.\n        /// >>> IsPalindrome('')\n        /// True\n        /// >>> IsPalindrome('aba')\n        /// True\n        /// >>> IsPalindrome('aaaaa')\n        /// True\n        /// >>> IsPalindrome('zbcd')\n        /// False\n        /// </summary>\n        public static bool IsPalindrome (string text) \n        {"}
{"task_id": "csharp/17", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// RemoveVowels ist eine Funktion, die einen String entgegennimmt und einen String ohne Vokale zur\u00fcckgibt.\n        /// >>> RemoveVowels('')\n        /// ''\n        /// >>> RemoveVowels(\"abcdef\\nghijklm\")\n        /// 'bcdf\\nghjklm'\n        /// >>> RemoveVowels('abcdef')\n        /// 'bcdf'\n        /// >>> RemoveVowels('aaaaa')\n        /// ''\n        /// >>> RemoveVowels('aaBAA')\n        /// 'B'\n        /// >>> RemoveVowels('zbcd')\n        /// 'zbcd'\n        /// \n        /// </summary>\n        public static string RemoveVowels (string text) \n        {\n            return new string(text.Where(c => !\"aeiouAEIOU\".Contains(c)).ToArray());\n        }\n    }\n}"}
{"task_id": "csharp/18", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib True zur\u00fcck, wenn alle Zahlen in der Liste l unterhalb des Schwellenwerts t liegen.\n        /// >>> BelowThreshold([1, 2, 4, 10], 100)\n        /// True\n        /// >>> BelowThreshold([1, 20, 4, 10], 5)\n        /// False\n        /// \n        /// </summary>\n        public static bool BelowThreshold (List<int> l, int t) \n        {\n            // Your code goes here\n            foreach(int number in l)\n            {\n                if (number >= t)\n                {\n                    return false;\n                }\n            }\n            return true;"}
{"task_id": "csharp/19", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Addiere zwei Zahlen x und y.\n        /// >>> Add(2, 3)\n        /// 5\n        /// >>> Add(5, 7)\n        /// 12\n        /// </summary>\n        public static int Add (int x, int y) \n        {"}
{"task_id": "csharp/20", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// \u00dcberpr\u00fcfen Sie, ob zwei W\u00f6rter dieselben Zeichen enthalten.\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        /// True\n        /// >>> SameChars('abcd', 'dddddddabc')\n        /// True\n        /// >>> SameChars('dddddddabc', 'abcd')\n        /// True\n        /// >>> SameChars('eabcd', 'dddddddabc')\n        /// False\n        /// >>> SameChars('abcd', 'dddddddabce')\n        /// False\n        /// >>> SameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        /// False\n        /// \n        /// </summary>\n        public static bool SameChars (string s0, string s1) \n        {\n            var set0 = new HashSet<char>(s0.ToLower());\n            var set1 = new HashSet<char>(s1.ToLower());\n\n            return !set0.Except(set1).Any();\n        }\n    }\n}"}
{"task_id": "csharp/21", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib die n-te Fibonacci-Zahl zur\u00fcck.\n        /// >>> Fib(10)\n        /// 55\n        /// >>> Fib(1)\n        /// 1\n        /// >>> Fib(8)\n        /// 21\n        /// \n        /// </summary>\n        public static int Fib (int n) {"}
{"task_id": "csharp/22", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib sortierte eindeutige gemeinsame Elemente f\u00fcr zwei Listen zur\u00fcck.\n        /// >>> Common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        /// [1, 5, 653]\n        /// >>> Common([5, 3, 2, 8], [3, 2])\n        /// [2, 3]\n        /// \n        /// </summary>\n        public static List<int> Common (List<int> l1, List<int> l2) {\n\n            // CompareNetObjects\n            var cmp = new CompareLogic();\n            var result = cmp.Compare(l1, l2);\n            \n            foreach (var diff in result.Differences)\n            {\n                Console.WriteLine($\"{diff.ItemPath} ({diff.Object1}) [{diff.Object2}]\");\n            }"}
{"task_id": "csharp/23", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gib den gr\u00f6\u00dften Primfaktor von n zur\u00fcck. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n        /// >>> LargestPrimeFactor(13195)\n        /// 29\n        /// >>> LargestPrimeFactor(2048)\n        /// 2\n        /// \n        /// </summary>\n        public static int LargestPrimeFactor (int n) \n        {\n            // Implement your code here"}
{"task_id": "csharp/24", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// SumToN ist eine Funktion, die Zahlen von 1 bis n summiert.\n        /// >>> SumToN(30)\n        /// 465\n        /// >>> SumToN(100)\n        /// 5050\n        /// >>> SumToN(5)\n        /// 15\n        /// >>> SumToN(10)\n        /// 55\n        /// >>> SumToN(1)\n        /// 1\n        /// \n        /// </summary>\n        public static int SumToN (int n) \n        {\n            // your code here\n            var sum = 0;\n\n            for (var i = 1; i <= n; i++)\n            {\n                sum += i;\n            }\n\n            return sum;\n        }"}
{"task_id": "csharp/25", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// xs repr\u00e4sentieren die Koeffizienten eines Polynoms.\n        ///     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n        ///     Gib die Ableitung dieses Polynoms in derselben Form zur\u00fcck.\n        /// >>> Derivative([3, 1, 2, 4, 5])\n        /// [1, 4, 12, 20]\n        /// >>> Derivative([1, 2, 3])\n        /// [2, 6]\n        /// \n        /// </summary>\n        public static List<int> Derivative (List<int> xs) \n        {\n            var result = new List<int>();\n            for(var i=0; i <xs.Count(); i++)\n            {\n                var c = xs[i];\n                if(c == 0) continue;\n                // x^n\n                if (i > 0) \n                {\n                    for (var k = 1; k <= i; k++) result.Add(0);\n                }\n                \n                result.Add(c*(i+1));\n            }\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/26", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Die FibFib-Zahlenfolge ist eine Folge \u00e4hnlich der Fibonacci-Folge, die wie folgt definiert ist:\n        ///     Fibfib(0) == 0\n        ///     Fibfib(1) == 0\n        ///     Fibfib(2) == 1\n        ///     Fibfib(n) == Fibfib(n-1) + Fibfib(n-2) + Fibfib(n-3).\n        ///     Bitte schreiben Sie eine Funktion, um das n-te Element der FibFib-Zahlenfolge effizient zu berechnen.\n        /// >>> Fibfib(1)\n        /// 0\n        /// >>> Fibfib(5)\n        /// 4\n        /// >>> Fibfib(8)\n        /// 24\n        /// \n        /// </summary>\n        public static int Fibfib (int n) \n        {\n            if (n == 0 || n == 1) return 0;\n            if (n == 2) return 1;\n            var result = new List<int>() { 0, 0, 1 };\n            for (var i = 3; i <= n; i++) \n            {\n                var nextValue = result[i - 1] + result[i - 2] + result[i - 3];\n                if (nextValue > int.MaxValue) return -1;\n                result.Add(nextValue);\n            }\n            return result[^1];\n        }\n    }\n}"}
{"task_id": "csharp/27", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Schreiben Sie eine Funktion VowelsCount, die einen String, der ein Wort repr\u00e4sentiert, als Eingabe erh\u00e4lt und die Anzahl der Vokale im String zur\u00fcckgibt. Vokale sind in diesem Fall 'a', 'e', 'i', 'o', 'u'. Hierbei ist 'y' auch ein Vokal, aber nur wenn es am Ende des gegebenen Wortes steht.\n        /// \n        /// Beispiel:\n        /// >>> VowelsCount(\"abcde\")\n        /// 2\n        /// >>> VowelsCount(\"ACEDY\")\n        /// 3\n        /// \n        /// </summary>\n        public static int VowelsCount (string s) \n        {\n            return Regex.Matches(s, @\"[aeiouy]$|[aeiouy]\").Count;\n        }\n    }\n}"}
{"task_id": "csharp/28", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten eine nicht-leere Liste von positiven Ganzzahlen. Geben Sie die gr\u00f6\u00dfte Ganzzahl zur\u00fcck, die gr\u00f6\u00dfer als Null ist und eine H\u00e4ufigkeit hat, die gr\u00f6\u00dfer oder gleich dem Wert der Ganzzahl selbst ist. Die H\u00e4ufigkeit einer Ganzzahl ist die Anzahl der Male, die sie in der Liste vorkommt. Wenn kein solcher Wert existiert, geben Sie -1 zur\u00fcck. Beispiele:\n        /// \n        /// Search([4, 1, 2, 2, 3, 1]) == 2\n        /// Search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        /// Search([5, 5, 4, 4, 4]) == -1\n        /// \n        /// </summary>\n        public static int Search (List<int> lst) \n        {\n            if(lst.Count == 0 || lst == null){\n                return -1;\n            }\n            var dictionary = new Dictionary<int, int>();\n            foreach (var item in lst){\n                if(!dictionary.ContainsKey(item)){\n                    dictionary[item] = 1;\n                }else{\n                    dictionary[item]++;\n                }\n            }\n            \n            foreach (var item in dictionary) {\n                if (item.Key > 0 && item.Value >= item.Key) {\n                    return item.Key;\n                }\n            }\n\n            return -1;\n        }\n    }\n}"}
{"task_id": "csharp/29", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib die Fl\u00e4che des Dreiecks auf 2 Dezimalstellen gerundet zur\u00fcck, wenn die drei Seiten ein g\u00fcltiges Dreieck bilden. Andernfalls gib -1 zur\u00fcck. Drei Seiten bilden ein g\u00fcltiges Dreieck, wenn die Summe von zwei Seiten gr\u00f6\u00dfer ist als die dritte Seite. Beispiel:\n        /// \n        /// TriangleArea(3, 4, 5) == 6.00\n        /// TriangleArea(1, 2, 10) == -1\n        /// \n        /// </summary>\n        public static object TriangleArea (int a, int b, int c) \n        {\n            if ((a + b > c) && (b + c > a) && (c + a > b))\n            {\n                double s = (a + b + c) / 2;\n                return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n            } \n            else\n            {\n                return -1;\n            }\n        }\n    }\n}"}
{"task_id": "csharp/30", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Schreiben Sie eine Funktion, die True zur\u00fcckgibt, wenn das Objekt q fliegen wird, und False sonst. Das Objekt q wird fliegen, wenn es ausbalanciert ist (es ist eine palindromische Liste) und die Summe seiner Elemente kleiner oder gleich dem maximal m\u00f6glichen Gewicht w ist.\n        /// \n        ///     Beispiel:\n        ///     WillItFly([1, 2], 5) \u279e False \n        ///     # 1+2 ist kleiner als das maximal m\u00f6gliche Gewicht, aber es ist unausgeglichen.\n        /// \n        ///     WillItFly([3, 2, 3], 1) \u279e False\n        ///     # es ist ausbalanciert, aber 3+2+3 ist mehr als das maximal m\u00f6gliche Gewicht.\n        /// \n        ///     WillItFly([3, 2, 3], 9) \u279e True\n        ///     # 3+2+3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n        /// \n        ///     WillItFly([3], 5) \u279e True\n        ///     # 3 ist kleiner als das maximal m\u00f6gliche Gewicht, und es ist ausbalanciert.\n        /// \n        /// \n        /// </summary>\n        public static bool WillItFly (List<int> q, int w) \n        {\n            // Implementierungsloser Teil:\n            \n            if (q.Count == 0) return false;\n\n            if (q.Count < 2 && q[0] <= w) return true;\n            \n            returnWillItFly(q,w);\n        }\n        \n        private static bool returnWillItFly(List<int> q, int weight) {\n            // Implementierungsloser Teil:\n            var left = q.Take(q.Count / 2).ToList();\n            var right = q.Skip(q.Count / 2).Reverse().ToList();\n\n            if (left.Sum() <= weight && returnWillItFly(left, weight)) {\n                return true;\n            } else if (right.Sum() <= weight && returnWillItFly(right, weight)) {\n                return true;\n            }\n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/31", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Schreiben Sie eine Funktion, die true zur\u00fcckgibt, wenn die gegebene Zahl das Produkt von 3 Primzahlen ist, und false sonst. Dabei ist bekannt, dass (a) kleiner als 100 ist. Beispiel:\n        /// \n        /// IsMultiplyPrime(30) == True\n        /// 30 = 2 * 3 * 5\n        /// \n        /// </summary>\n        public static bool IsMultiplyPrime (int a) \n        {"}
{"task_id": "csharp/32", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Zahl in Dezimalform und Ihre Aufgabe besteht darin, sie in das Bin\u00e4rformat umzuwandeln. Die Funktion sollte einen String zur\u00fcckgeben, wobei jedes Zeichen eine Bin\u00e4rzahl darstellt. Jedes Zeichen im String wird '0' oder '1' sein.\n        /// \n        /// Es wird ein zus\u00e4tzliches Paar von Zeichen 'db' am Anfang und am Ende des Strings geben. Die zus\u00e4tzlichen Zeichen dienen zur Formatierungshilfe.\n        /// \n        /// Beispiele:\n        /// \n        /// DecimalToBinary(15)   # returns \"db1111db\"\n        /// DecimalToBinary(32)   # returns \"db100000db\"\n        /// \n        /// </summary>\n        public static string DecimalToBinary (int decimal) \n        {\n            // Your solution here."}
{"task_id": "csharp/33", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Du erh\u00e4ltst einen String s.\n        /// Deine Aufgabe ist es zu \u00fcberpr\u00fcfen, ob der String gl\u00fccklich ist oder nicht.\n        /// Ein String ist gl\u00fccklich, wenn seine L\u00e4nge mindestens 3 betr\u00e4gt und jede Gruppe von 3 aufeinanderfolgenden Buchstaben unterschiedlich ist.\n        /// Zum Beispiel:\n        /// \n        /// IsHappy(a) => False\n        /// IsHappy(aa) => False\n        /// IsHappy(abcd) => True\n        /// IsHappy(aabb) => False\n        /// IsHappy(adb) => True\n        /// IsHappy(xyy) => False\n        /// \n        /// </summary>\n        public static bool IsHappy (string s) \n        {\n            // Check if the string is at least 3 characters long\n            if (s.Length < 3) return false;\n\n            // Use a regular expression to find all groups of three characters in the string\n            var regex = new Regex(\".{1}(.{0,2})?\");\n            var matches = regex.Matches(s).Cast<Match>().ToList();\n\n            // Check if each group is unqiue\n            foreach (var match in matches)\n            {\n                var group = match.Value;\n                if (matches.Count(m => m.Value == group) > 1) return false;\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/34", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Es ist die letzte Woche des Semesters und der Lehrer muss die Noten an die Sch\u00fcler verteilen. Der Lehrer hat seinen eigenen Algorithmus zur Bewertung entwickelt. Das einzige Problem ist, dass er den Code, den er zur Bewertung verwendet hat, verloren hat. Er hat Ihnen eine Liste von GPAs f\u00fcr einige Sch\u00fcler gegeben und Sie m\u00fcssen eine Funktion schreiben, die eine Liste von Buchstabennoten gem\u00e4\u00df der folgenden Tabelle aus gibt:\n        /// \n        ///              GPA       |    Buchstaben Note\n        ///               4.0                A+\n        ///             > 3.7                A \n        ///             > 3.3                A- \n        ///             > 3.0                B+\n        ///             > 2.7                B \n        ///             > 2.3                B-\n        ///             > 2.0                C+\n        ///             > 1.7                C\n        ///             > 1.3                C-\n        ///             > 1.0                D+ \n        ///             > 0.7                D \n        ///             > 0.0                D-\n        ///               0.0                E\n        ///     \n        /// \n        ///     Beispiel:\n        /// \n        /// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n        /// \n        /// </summary>\n        public static List<string> NumericalLetterGrade (List<object> grades) \n        {\n            var results = new List<string>();\n\n            foreach(var grade in grades){\n                if((double)grade >= 4.0){\n                    results.Add(\"A+\");\n                } else if ((double)grade > 3.7){\n                    results.Add(\"A\");\n                } else if ((double)grade > 3.3){\n                    results.Add(\"A-\");\n                } else if ((double)grade > 3.0){\n                    results.Add(\"B+\");\n                } else if ((double)grade > 2.7){\n                    results.Add(\"B\");\n                } else if ((double)grade > 2.3){\n                    results.Add(\"B-\");\n                } else if ((double)grade > 2.0){\n                    results.Add(\"C+\");\n                } else if ((double)grade > 1.7){\n                    results.Add(\"C\");\n                } else if ((double)grade > 1.3){\n                    results.Add(\"C-\");\n                } else if ((double)grade > 1.0){\n                    results.Add(\"D+\");\n                } else if ((double)grade > 0.7){\n                    results.Add(\"D\");\n                } else if ((double)grade > 0.0){\n                    results.Add(\"D-\");\n                } else {\n                    results.Add(\"E\");\n                }\n            }\n\n            return results;\n        }\n    }\n}"}
{"task_id": "csharp/35", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Schreiben Sie eine Funktion, die einen String entgegennimmt und True zur\u00fcckgibt, wenn die L\u00e4nge des Strings eine Primzahl ist, andernfalls False.\n        ///     Beispiele\n        /// \n        /// PrimeLength('Hello') == True\n        /// PrimeLength('abcdcba') == True\n        /// PrimeLength('kittens') == True\n        /// PrimeLength('orange') == False\n        /// \n        /// </summary>\n        public static bool PrimeLength (string string0) \n        {\n            if(string.IsNullOrWhiteSpace(string0))\n                return false;\n\n            int length = string0.Length;\n            if (length <= 1)\n                return false;\n\n            for (int i=2; i<length; i++)\n            {\n                if (length % i == 0)\n                    return false;\n            }\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/36", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben eine positive Ganzzahl N, gib die Gesamtsumme ihrer Ziffern in bin\u00e4rer Form zur\u00fcck.\n        /// \n        ///     Beispiel\n        ///         F\u00fcr N = 1000 ist die Summe der Ziffern 1, die Ausgabe sollte \"1\" sein.\n        ///         F\u00fcr N = 150 ist die Summe der Ziffern 6, die Ausgabe sollte \"110\" sein.\n        ///         F\u00fcr N = 147 ist die Summe der Ziffern 12, die Ausgabe sollte \"1100\" sein.\n        ///     \n        ///     Variablen:\n        ///         @N Ganzzahl\n        ///              Einschr\u00e4nkungen: 0 \u2264 N \u2264 10000.\n        ///     Ausgabe:\n        ///          eine Zeichenkette mit der bin\u00e4ren Zahl.\n        /// \n        /// </summary>\n        public static string Solve (int N) \n        {\n            var number = Convert.ToString(N, 2);\n\n            return number;\n        }\n    }\n}"}
{"task_id": "csharp/37", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main()\n        {\n            var data = new List<List<int>>\n            {\n                new List<int> {1,2,3,4,5,6},\n                new List<int> {1,2,3,4,1,6},\n                new List<int> {1,2,3,4,5,1}\n            };\n\n            var x = 1;\n\n            var result = GetRow(data, x);\n\n            foreach (var item in result)\n            {\n                Console.WriteLine($\"({item[0]}, {item[1]})\");\n            }\n        }\n\n        public static List<List<int>> GetRow(List<List<int>> lst, int x)\n        {\n            var coordinates = new List<List<int>>();\n\n            for (var i = 0; i < lst.Count; i++)\n            {\n                var index = lst[i].IndexOf(x);\n\n                if (index != -1)\n                {\n                    coordinates.Add(new List<int> {i, index});\n                }\n            }\n\n            return coordinates;\n        }\n    }\n}"}
{"task_id": "csharp/38", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten eine Liste von ganzen Zahlen.\n        /// Schreiben Sie eine Funktion NextSmallest(), die das zweitkleinste Element der Liste zur\u00fcckgibt.\n        /// Geben Sie null zur\u00fcck, wenn es kein solches Element gibt.\n        /// NextSmallest([1, 2, 3, 4, 5]) == 2\n        /// NextSmallest([5, 1, 4, 3, 2]) == 2\n        /// NextSmallest([]) == None\n        /// NextSmallest([1, 1]) == None\n        /// \n        /// </summary>\n        public static object NextSmallest (List<int> lst) \n        {\n            if(lst.Count < 2) return null; // empty list or list with only one element has no second smallest number\n            var sortedList = lst.OrderBy(i => i);\n            for(var i = 0; i < sortedList.Count() -1; i++) \n            {\n                if(sortedList[i] != sortedList[i+1]) return sortedList[i+1]; // first not equal element is the second smallest number\n            }\n            return null;\n        }\n    }\n}"}
{"task_id": "csharp/39", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Du bekommst einen String von W\u00f6rtern und deine Aufgabe ist es, die Anzahl der Langeweilen zu z\u00e4hlen. Eine Langeweile ist ein Satz, der mit dem Wort \"Ich\" beginnt. S\u00e4tze werden durch '.', '?' oder '!' begrenzt.\n        /// \n        /// Zum Beispiel:\n        /// >>> IsBored(\"Hello world\")\n        /// 0\n        /// >>> IsBored(\"The sky is blue. The sun is shining. I love this weather\")\n        /// 1\n        /// \n        /// </summary>\n        public static int IsBored (string S) \n        {\n            var sentences = Regex.Split(S, @\"(?<!^)[\\.!\\?]\");\n            \n            return sentences\n                .Count(x => x.StartsWith(\"ich\", StringComparison.InvariantCultureIgnoreCase));\n        }\n    }\n}"}
{"task_id": "csharp/40", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Liste von ganzen Zahlen.\n        ///     Sie m\u00fcssen den gr\u00f6\u00dften Primzahlwert finden und die Summe seiner Ziffern zur\u00fcckgeben.\n        /// \n        ///     Beispiele:\n        /// \n        /// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n        /// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n        /// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n        /// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n        /// For lst = [0,81,12,3,1,21] the output should be 3\n        /// For lst = [0,8,1,2,1,7] the output should be 7\n        /// \n        /// </summary>\n        public static int Skjkasdkd (List<int> lst) \n        {"}
{"task_id": "csharp/41", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben ein W\u00f6rterbuch, gibt True zur\u00fcck, wenn alle Schl\u00fcssel Strings in Kleinbuchstaben oder alle Schl\u00fcssel Strings in Gro\u00dfbuchstaben sind, sonst gibt es False zur\u00fcck. Die Funktion sollte False zur\u00fcckgeben, wenn das gegebene W\u00f6rterbuch leer ist. Beispiele:\n        /// \n        /// CheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n        /// CheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n        /// CheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n        /// CheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n        /// CheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n        /// \n        /// </summary>\n        public static bool CheckDictCase (Dictionary<object, string> dict) \n        {\n            if(dict.Count == 0)\n                return false;\n\n            var containsSmall = dict.Any(kvp => kvp.Key is string && char.IsLower((string)kvp.Key[0]));\n\n            var containsLarge = dict.Any(kvp => kvp.Key is string && char.IsUpper((string)kvp.Key[0]));\n            return (!containsSmall && !containsLarge);\n        }\n    }\n}"}
{"task_id": "csharp/42", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die einen Wert (String) annimmt, der eine Zahl darstellt, und gibt die n\u00e4chstgelegene Ganzzahl zur\u00fcck. Wenn die Zahl gleich weit von zwei Ganzzahlen entfernt ist, runden Sie sie weg von Null.\n        /// \n        ///     Beispiele\n        /// >>> ClosestInteger(\"10\")\n        /// 10\n        /// >>> ClosestInteger(\"15.3\")\n        /// 15\n        /// \n        /// Note:\n        /// Rounding away from zero means that if the given number is equidistant\n        /// from two integers, the one you should return is the one that is the\n        /// farthest from zero. For example ClosestInteger(\"14.5\") should\n        /// return 15 and ClosestInteger(\"-14.5\") should return -15.\n        /// \n        /// </summary>\n        public static int ClosestInteger (string value) \n        {"}
{"task_id": "csharp/43", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine positive ganze Zahl n, m\u00fcssen Sie einen Haufen von n Ebenen von Steinen machen.\n        ///     Die erste Ebene hat n Steine.\n        ///     Die Anzahl der Steine in der n\u00e4chsten Ebene ist:\n        ///         - die n\u00e4chste ungerade Zahl, wenn n ungerade ist.\n        ///         - die n\u00e4chste gerade Zahl, wenn n gerade ist.\n        ///     Geben Sie die Anzahl der Steine in jeder Ebene in einer Liste zur\u00fcck, wobei das Element an Index\n        ///     i die Anzahl der Steine in der Ebene (i+1) darstellt.\n        /// \n        ///     Beispiele:\n        /// >>> MakeAPile(3)\n        /// [3, 5, 7]\n        /// \n        /// </summary>"}
{"task_id": "csharp/44", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten einen String von W\u00f6rtern, die durch Kommas oder Leerzeichen getrennt sind. Ihre Aufgabe ist es, den String in W\u00f6rter aufzuteilen und ein Array der W\u00f6rter zur\u00fcckzugeben.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// WordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n        /// WordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n        /// \n        /// </summary>\n        public static List<string> WordsString (string s) \n        {\n            // your code goes here\n            var pattern = @\"[\\w']+\";\n            return Regex.Matches(s,pattern).Cast<Match>().Select(x => x.Value).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/45", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Diese Funktion nimmt zwei positive Zahlen x und y entgegen und gibt die gr\u00f6\u00dfte gerade Zahl zur\u00fcck, die im Bereich [x, y] enthalten ist. Wenn es keine solche Zahl gibt, sollte die Funktion -1 zur\u00fcckgeben.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// ChooseNum(12, 15) = 14\n        /// ChooseNum(13, 12) = -1\n        /// \n        /// </summary>\n        public static int ChooseNum (int x, int y) \n        {\n            if (x < 0 || y < 0) return -1;\n\n            var numbers = new List<int>();\n            for (var i = x; i <= y; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    numbers.Add(i);\n                }\n            }\n            return numbers.Any() ? numbers.Max() : -1;\n        }\n    }\n}"}
{"task_id": "csharp/46", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten zwei positive Ganzzahlen n und m. Ihre Aufgabe besteht darin, den Durchschnitt der Ganzzahlen von n bis m (einschlie\u00dflich n und m) zu berechnen. Runden Sie die Antwort auf die n\u00e4chste Ganzzahl und konvertieren Sie diese in bin\u00e4r. Wenn n gr\u00f6\u00dfer als m ist, geben Sie -1 zur\u00fcck. Beispiel:\n        /// \n        /// RoundedAvg(1, 5) => \"0b11\"\n        /// RoundedAvg(7, 5) => -1\n        /// RoundedAvg(10, 20) => \"0b1111\"\n        /// RoundedAvg(20, 33) => \"0b11010\"\n        /// \n        /// </summary>\n        public static string RoundedAvg (int n, int m) \n        {\n            if (n > m) return \"-1\";\n\n            var result = (n + m) / 2;\n            var binary = Convert.ToString(result, 2);\n            return \"0b\" + binary;\n        }\n    }\n}"}
{"task_id": "csharp/47", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Implementieren Sie die Funktion F, die n als Parameter annimmt und eine Liste der Gr\u00f6\u00dfe n zur\u00fcckgibt, wobei der Wert des Elements an der Stelle i das Fakult\u00e4t von i ist, wenn i gerade ist, oder die Summe der Zahlen von 1 bis i, wenn i ungerade ist. i beginnt bei 1. Die Fakult\u00e4t von i ist das Produkt der Zahlen von 1 bis i (1 * 2 * ... * i). Beispiel:\n        /// \n        /// F(5) == [1, 2, 6, 24, 15]\n        /// \n        /// </summary>\n        public static List<int> F (int n) \n        {\n            var result = new List<int>();\n            \n            for(var i=1;i<=n;i++)\n            {\n                if(i%2==0)\n                {\n                    result.Add(Factorial(i));\n                } else {\n                    result.Add(SumOfNumbersFromOneToI(i));\n                }\n            }\n            return result;\n        }\n        \n        private static int SumOfNumbersFromOneToI(int i)\n        {\n            var sum = 0;\n            for(var j=1;j<=i;j++)\n            {\n                sum += j;\n            }\n            return sum;\n        }\n        \n        private static int Factorial(int i)\n        {\n            var result = 1;\n            for (var j=2; j <= i; j++)\n            {\n                result *= j;\n            }\n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/48", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine positive ganze Zahl n, gibt eine Tupel zur\u00fcck, das die Anzahl der geraden und ungeraden ganzen Palindrome enth\u00e4lt, die im Bereich (1, n) einschlie\u00dflich liegen.\n        /// \n        ///     Beispiel 1:\n        /// \n        ///         Eingabe: 3\n        ///         Ausgabe: (1, 2)\n        ///         Erkl\u00e4rung:\n        ///         Ganze Palindrome sind 1, 2, 3. Eines davon ist gerade und zwei davon sind ungerade.\n        /// \n        ///     Beispiel 2:\n        /// \n        ///         Eingabe: 12\n        ///         Ausgabe: (4, 6)\n        ///         Erkl\u00e4rung:\n        ///         Ganze Palindrome sind 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Vier davon sind gerade und sechs davon sind ungerade.\n        /// \n        ///     Hinweis:\n        ///         1. 1 <= n <= 10^3\n        ///         2. Das zur\u00fcckgegebene Tupel enth\u00e4lt die Anzahl der geraden und ungeraden ganzen Palindrome.\n        /// \n        /// </summary>\n        public static List<int> EvenOddPalindrome (int n) \n        {\n            return new List<int>{ 1, 2 };\n        }\n    }\n}"}
{"task_id": "csharp/49", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Wir haben ein Array 'arr' mit N ganzen Zahlen arr[1], arr[2], ..., arr[N]. Die Zahlen im Array werden zuf\u00e4llig angeordnet sein. Deine Aufgabe besteht darin zu bestimmen, ob es m\u00f6glich ist, ein Array in nicht abnehmender Reihenfolge zu sortieren, indem du die folgende Operation auf das gegebene Array anwendest:\n        /// Du darfst beliebig oft eine Rechtsschiebeoperation durchf\u00fchren.\n        /// Eine Rechtsschiebeoperation bedeutet, dass alle Elemente des Arrays um eine Position in Richtung rechts verschoben werden. Das letzte Element des Arrays wird an die Startposition im Array verschoben, d.h. an den Index 0.\n        /// \n        /// Wenn es m\u00f6glich ist, das sortierte Array durch Ausf\u00fchren der oben genannten Operation zu erhalten, gib True zur\u00fcck, sonst gib False zur\u00fcck.\n        /// Wenn das gegebene Array leer ist, gib True zur\u00fcck.\n        /// \n        /// Hinweis: Die gegebene Liste hat garantiert eindeutige Elemente.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// MoveOneBall([3, 4, 5, 1, 2])==>True\n        /// Erkl\u00e4rung: Durch Ausf\u00fchren von 2 Rechtsschiebeoperationen kann die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array erreicht werden.\n        /// MoveOneBall([3, 5, 4, 1, 2])==>False\n        /// Erkl\u00e4rung: Es ist nicht m\u00f6glich, die nicht abnehmende Reihenfolge f\u00fcr das gegebene Array durch Ausf\u00fchren beliebiger Anzahl von Rechtsschiebeoperationen zu erhalten.\n        /// \n        /// \n        /// </summary>\n        public static bool MoveOneBall (List<int> arr) \n        {\n            // Return True if array is empty\n            if (arr.Count == 0) return true;\n\n            // Find the first element in the array that is not equal to the current index\n            int i = arr.FindIndex(x => x != i + 1);\n            \n            // If no such element exists, return true since the array is sorted\n            if (i < 0) return true;\n\n            // Shift the elements at and after index i to the left by one position\n            for (; i >= 0; i--)\n                arr[i] = arr[i - 1];\n\n            // Check if the shifted array is sorted\n            return arr.Take(arr.Count - 1).All((x, j) => x <= arr[j + 1]);\n        }\n    }\n}"}
{"task_id": "csharp/50", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// In diesem Problem implementieren Sie eine Funktion, die zwei Listen von Zahlen entgegennimmt und bestimmt, ob es m\u00f6glich ist, einen Austausch von Elementen zwischen ihnen durchzuf\u00fchren, um lst1 zu einer Liste nur mit geraden Zahlen zu machen. Es gibt keine Begrenzung f\u00fcr die Anzahl der ausgetauschten Elemente zwischen lst1 und lst2. Wenn es m\u00f6glich ist, Elemente zwischen lst1 und lst2 auszutauschen, um alle Elemente von lst1 gerade zu machen, geben Sie \"YES\" zur\u00fcck. Andernfalls geben Sie \"NO\" zur\u00fcck. Zum Beispiel: Exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" Exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\". Es wird angenommen, dass die Eingabelisten nicht leer sein werden.\n        /// \n        /// </summary>\n        public static string Exchange (List<int> lst1, List<int> lst2) \n        {\n            foreach (var item in lst1)\n            {\n                if (item % 2 != 0)\n                {\n                    bool found = false;\n\n                    foreach (var item2 in lst2)\n                    {\n                        if (item2 % 2 == 0)\n                        {\n                            found = true;\n                            break;\n                        }\n                    }\n\n                    if (!found)\n                    {\n                        return \"NO\";\n                    }\n                }\n            }\n\n            return \"YES\";\n        }\n    }\n}"}
{"task_id": "csharp/51", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Aufgabe\n        ///     Wir haben zwei Zeichenketten s und c. Du musst alle Zeichen in s l\u00f6schen, die einem Zeichen in c entsprechen.\n        ///     Dann musst du \u00fcberpr\u00fcfen, ob die resultierende Zeichenkette ein Palindrom ist.\n        ///     Eine Zeichenkette ist ein Palindrom, wenn sie r\u00fcckw\u00e4rts gelesen genauso aussieht wie vorw\u00e4rts.\n        ///     Du solltest ein Tupel zur\u00fcckgeben, das die resultierende Zeichenkette und True/False f\u00fcr die \u00dcberpr\u00fcfung enth\u00e4lt.\n        ///     Beispiel\n        ///     F\u00fcr s = \"abcde\", c = \"ae\" sollte das Ergebnis ('bcd',False) sein.\n        ///     F\u00fcr s = \"abcdef\", c = \"b\" sollte das Ergebnis ('acdef',False) sein.\n        ///     F\u00fcr s = \"abcdedcba\", c = \"ab\" sollte das Ergebnis ('cdedc',True) sein.\n        /// \n        /// </summary>\n        public static List<object> ReverseDelete (string s, string c) \n        {\n            string result = \"\";\n            bool palindrom = true;\n            \n            for(int i=0;i<s.Length;i++)\n            {\n                char current = s[i];\n\n                if(!c.Contains(current))\n                {\n                    result += current;\n\n                    if (result != new string(result.Reverse().ToArray()))\n                    {\n                        palindrom = false;\n                    }\n                }\n            }\n            \n            return new List<object>(){result,palindrom};\n        }\n    }\n}"}
{"task_id": "csharp/52", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten ein rechteckiges Gitter von Brunnen. Jede Zeile repr\u00e4sentiert einen einzelnen Brunnen, und jede 1 in einer Zeile repr\u00e4sentiert eine einzelne Einheit Wasser. Jeder Brunnen hat einen entsprechenden Eimer, der verwendet werden kann, um Wasser daraus zu extrahieren, und alle Eimer haben die gleiche Kapazit\u00e4t. Ihre Aufgabe ist es, die Eimer zu verwenden, um die Brunnen zu leeren. Geben Sie die Anzahl der Male aus, die Sie die Eimer senken m\u00fcssen.\n        /// \n        /// Beispiel 1:\n        ///     Eingabe:\n        ///         grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n        ///         Eimerkapazit\u00e4t: 1\n        ///     Ausgabe: 6\n        /// \n        /// Beispiel 2:\n        ///     Eingabe:\n        ///         grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n        ///         Eimerkapazit\u00e4t: 2\n        ///     Ausgabe: 5\n        /// \n        /// Beispiel 3:\n        ///     Eingabe:\n        ///         grid: [[0,0,0], [0,0,0]]\n        ///         Eimerkapazit\u00e4t: 5\n        ///     Ausgabe: 0\n        /// \n        /// Einschr\u00e4nkungen:\n        ///     * alle Brunnen haben die gleiche L\u00e4nge\n        ///     * 1 <= grid.length <= 10^2\n        ///     * 1 <= grid[:,1].length <= 10^2\n        ///     * grid[i][j] -> 0 | 1\n        ///     * 1 <= Kapazit\u00e4t <= 10\n        /// \n        /// \n        /// </summary>\n        public static int MaxFill (List<List<int>> grid, int capacity) \n        {\n            var rows = grid.Count;\n            var columns = grid[0].Count;\n\n            // count the number of filled bottles for each row\n            var filledBottlesPerRow = new List<int>();\n            foreach (var row in grid)\n            {\n                var filledBottlesInRow = 0;\n                foreach (var bottle in row)\n                {\n                    if (bottle == 1)\n                    {\n                        filledBottlesInRow++;\n                    }\n                }\n\n                filledBottlesPerRow.Add(filledBottlesInRow);\n            }\n\n            // sum up all the filled bottles in each row\n            var totalFilledBottles = filledBottlesPerRow.Sum();\n\n            // return the maximum number of times a bottle can be filled\n            if (totalFilledBottles <= capacity)\n            {\n                return 0;\n            }\n\n            var numFills = 0;\n            while (totalFilledBottles > capacity)\n            {\n                foreach (var row in grid)\n                {\n                    if (row[0] == 1 && row.Last() == 1)\n                    {\n                        for (int i = 0; i < columns - 1; i++)\n                        {\n                            row[i] = 0;\n                        }\n\n                        numFills++;\n                        break;\n                    }\n                }\n\n                totalFilledBottles -= capacity;\n            }\n\n            return numFills;\n        }\n    }\n}"}
{"task_id": "csharp/53", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben eine Zeichenkette s und eine nat\u00fcrliche Zahl n, wurde Ihnen die Aufgabe zugewiesen, eine Funktion zu implementieren, die eine Liste aller W\u00f6rter aus der Zeichenkette s zur\u00fcckgibt, die genau n Konsonanten enthalten, in der Reihenfolge, in der diese W\u00f6rter in der Zeichenkette s erscheinen. Wenn die Zeichenkette s leer ist, sollte die Funktion eine leere Liste zur\u00fcckgeben. Hinweis: Sie k\u00f6nnen davon ausgehen, dass die Eingabezeichenkette nur Buchstaben und Leerzeichen enth\u00e4lt. Beispiele:\n        /// \n        /// SelectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        /// SelectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        /// SelectWords(\"simple white space\", 2) ==> []\n        /// SelectWords(\"Hello world\", 4) ==> [\"world\"]\n        /// SelectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n        /// \n        /// </summary>\n        public static List<string> SelectWords (string s, int n) \n        {\n            var result = new List<string>();\n\n            if(string.IsNullOrWhiteSpace(s)) return result;\n\n            var words = s.Split(' ').ToList();\n            \n            foreach(var word in words)\n            {\n                if(word.Count(x => \"aeiou\".Contains(x.ToString().ToLower())) == n)\n                {\n                    result.Add(word);\n                }\n            }\n            \n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/54", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sei ein Array arr von ganzen Zahlen und eine positive ganze Zahl k. Gib eine sortierte Liste der L\u00e4nge k zur\u00fcck, die die k gr\u00f6\u00dften Zahlen in arr enth\u00e4lt.\n        /// \n        ///     Beispiel 1:\n        /// \n        ///         Eingabe: arr = [-3, -4, 5], k = 3\n        ///         Ausgabe: [-4, -3, 5]\n        /// \n        ///     Beispiel 2:\n        /// \n        ///         Eingabe: arr = [4, -4, 4], k = 2\n        ///         Ausgabe: [4, 4]\n        /// \n        ///     Beispiel 3:\n        /// \n        ///         Eingabe: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        ///         Ausgabe: [2]\n        /// \n        ///     Hinweis:\n        ///         1. Die L\u00e4nge des Arrays wird im Bereich von [1, 1000] liegen.\n        ///         2. Die Elemente im Array werden im Bereich von [-1000, 1000] liegen.\n        ///         3. 0 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static List<int> Maximum (List<int> arr, int k) \n        {\n            var sortedArr = arr.OrderByDescending(x => x);\n            return sortedArr.Take(k).ToList();\n        }\n    }\n}"}
{"task_id": "csharp/55", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sei ein nicht-leeres Array von ganzen Zahlen arr und eine ganze Zahl k. Gib die Summe der Elemente mit h\u00f6chstens zwei Ziffern aus den ersten k Elementen von arr zur\u00fcck.\n        /// \n        ///     Beispiel:\n        /// \n        ///         Eingabe: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        ///         Ausgabe: 24 # Summe von 21 + 3\n        /// \n        ///     Einschr\u00e4nkungen:\n        ///         1. 1 <= len(arr) <= 100\n        ///         2. 1 <= k <= len(arr)\n        /// \n        /// </summary>\n        public static int AddElements (List<int> arr, int k) \n        {\n            var comparer = new CompareLogic();\n\n            for (var i = 0; i < arr.Count; i++)\n            {\n                if (comparer.Compare(arr[i], 10).AreEqual)\n                {\n                    Console.WriteLine(\"true\");\n                }\n                else\n                {\n                    Console.WriteLine(\"false\");\n                }\n            }"}
{"task_id": "csharp/56", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten zwei Intervalle,\n        ///     wobei jedes Intervall ein Paar von ganzen Zahlen ist. Zum Beispiel, Intervall = (start, end) = (1, 2).\n        ///     Die gegebenen Intervalle sind geschlossen, was bedeutet, dass das Intervall (start, end)\n        ///     sowohl start als auch end einschlie\u00dft.\n        ///     F\u00fcr jedes gegebene Intervall wird angenommen, dass sein Start kleiner oder gleich seinem Ende ist.\n        ///     Ihre Aufgabe ist es zu bestimmen, ob die L\u00e4nge des Schnitts dieser beiden\n        ///     Intervalle eine Primzahl ist.\n        ///     Zum Beispiel ist der Schnitt der Intervalle (1, 3), (2, 4) (2, 3),\n        ///     dessen L\u00e4nge 1 ist, was keine Primzahl ist.\n        ///     Wenn die L\u00e4nge des Schnitts eine Primzahl ist, geben Sie \"YES\" zur\u00fcck,\n        ///     andernfalls geben Sie \"NO\" zur\u00fcck.\n        ///     Wenn sich die beiden Intervalle nicht \u00fcberschneiden, geben Sie \"NO\" zur\u00fcck.\n        /// \n        /// \n        ///     [Eingabe/Ausgabe] Beispiele:\n        /// \n        /// Intersection((1, 2), (2, 3)) ==> \"NO\"\n        /// Intersection((-1, 1), (0, 4)) ==> \"NO\"\n        /// Intersection((-3, -1), (-5, 5)) ==> \"YES\"\n        /// </summary>\n        public static string Intersection (List<int> interval1, List<int> interval2) \n        {"}
{"task_id": "csharp/57", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static List<object> Tri(int n)\n    {\n        var tribonacciNumbers = new List<object>();\n\n        if (n < 0)\n        {\n            throw new ArgumentException(\"Input must be a non-negative integer\");\n        }\n\n        if (n == 0)\n        {\n            return tribonacciNumbers;\n        }\n\n        int first = 1, second = 3, third = 2;\n        tribonacciNumbers.Add(first);\n        tribonacciNumbers.Add(second);\n        tribonacciNumbers.Add(third);\n\n        for (int i = 3; i <= n; i++)\n        {\n            if (i % 2 == 0)\n            {\n                int nextNumber = 1 + i / 2;\n                tribonacciNumbers.Add(nextNumber);\n            }\n            else\n            {\n                int nextNumber = first + second + third;\n                tribonacciNumbers.Add(nextNumber);\n                first = second;\n                second = third;\n                third = nextNumber;\n            }\n        }\n\n        return tribonacciNumbers;\n    }\n}"}
{"task_id": "csharp/58", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Gegeben eine positive ganze Zahl n, gib das Produkt der ungeraden Ziffern zur\u00fcck.\n        ///     Gib 0 zur\u00fcck, wenn alle Ziffern gerade sind.\n        ///     Zum Beispiel:\n        /// \n        /// Digits(1)  == 1\n        /// Digits(4)  == 0\n        /// Digits(235) == 15\n        /// \n        /// </summary>\n        public static int Digits (int n) \n        {\n            var digits = new List<int>();\n            while(n > 0)\n            {\n                var digit = n % 10;\n                if (digit % 2 != 0)\n                    digits.Add(digit);\n                n /= 10;\n            }\n\n            int product = 1;\n            foreach (var d in digits)\n            {\n                product *= d;\n            }\n            \n            return product;\n        }"}
{"task_id": "csharp/59", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die einen String als Eingabe erh\u00e4lt, der nur eckige Klammern enth\u00e4lt. Die Funktion sollte True zur\u00fcckgeben, wenn und nur wenn es eine g\u00fcltige Teilfolge von Klammern gibt, bei der mindestens eine Klammer in der Teilfolge verschachtelt ist.\n        /// IsNested('[[]]')\ufffd\ufffdTrue\n        /// IsNested('[]]]]]]][[[[[]') \u279e False\n        /// IsNested('[][]')\ufffd\ufffdFalse\n        /// IsNested('[]')\ufffd\ufffdFalse\n        /// IsNested('[[][]]')\ufffd\ufffdTrue\n        /// IsNested('[[]][[')\ufffd\ufffdTrue\n        /// \n        /// </summary>\n        public static bool IsNested (string string0) \n        {"}
{"task_id": "csharp/60", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten eine Liste von Zahlen.\n        /// Sie m\u00fcssen die Summe der quadrierten Zahlen in der gegebenen Liste zur\u00fcckgeben,\n        /// runden Sie jedes Element in der Liste zuerst auf die n\u00e4chste Ganzzahl (Ceiling).\n        /// Beispiele:\n        /// F\u00fcr lst = [1,2,3] sollte die Ausgabe 14 sein\n        /// F\u00fcr lst = [1,4,9] sollte die Ausgabe 98 sein\n        /// F\u00fcr lst = [1,3,5,7] sollte die Ausgabe 84 sein\n        /// F\u00fcr lst = [1.4,4.2,0] sollte die Ausgabe 29 sein\n        /// F\u00fcr lst = [-2.4,1,1] sollte die Ausgabe 6 sein\n        /// \n        /// </summary>\n        public static int SumSquares (List<object> lst) \n        {"}
{"task_id": "csharp/61", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die True zur\u00fcckgibt, wenn das letzte Zeichen eines gegebenen Strings ein alphabetisches Zeichen ist und nicht Teil eines Wortes ist, und False sonst.\n        /// Hinweis: \"Wort\" ist eine Gruppe von Zeichen, die durch Leerzeichen getrennt sind.\n        /// \n        /// Beispiele:\n        /// \n        /// CheckIfLastCharIsALetter(\"apple pie\") \u279e False\n        /// CheckIfLastCharIsALetter(\"apple pi e\") Sarft> True\n        /// CheckIfLastCharIsALetter(\"apple pi e \") Sarft> False\n        /// CheckIfLastCharIsALetter(\"\") Sarft> False \n        /// </summary>\n        public static bool CheckIfLastCharIsALetter (string txt) \n        {"}
{"task_id": "csharp/62", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Erstellen Sie eine Funktion, die den gr\u00f6\u00dften Index eines Elements zur\u00fcckgibt, das nicht gr\u00f6\u00dfer oder gleich dem unmittelbar vorhergehenden Element ist. Wenn kein solches Element vorhanden ist, geben Sie -1 zur\u00fcck. Das gegebene Array enth\u00e4lt keine doppelten Werte.\n        /// \n        /// Beispiele:\n        /// \n        /// CanArrange([1,2,4,3,5]) = 3\n        /// CanArrange([1,2,3]) = -1\n        /// \n        /// </summary>\n        public static int CanArrange (List<int> arr) \n        {"}
{"task_id": "csharp/63", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Erstellen Sie eine Funktion, die ein Tupel (a, b) zur\u00fcckgibt, wobei 'a' die gr\u00f6\u00dfte negative Ganzzahl und 'b' die kleinste positive Ganzzahl in einer Liste ist. Wenn es keine negativen oder positiven Ganzzahlen gibt, geben Sie sie als None zur\u00fcck.\n        /// \n        /// Beispiele:\n        /// \n        /// LargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n        /// LargestSmallestIntegers([]) == (None, None)\n        /// LargestSmallestIntegers([0]) == (None, None)\n        /// \n        /// </summary>\n        public static List<object> LargestSmallestIntegers (List<int> lst) \n        {\n            int? a = null;\n            int? b = null;\n\n            foreach(var item in lst)\n            {\n                if(item < 0 && !a.HasValue || item < a)\n                {\n                    a = item;\n                }\n                else if(item > 0 && !b.HasValue || item < b)\n                {\n                    b = item;\n                }\n            }\n\n            return new List<object>(){a, b};\n        }\n    }\n}"}
{"task_id": "csharp/64", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Das brasilianische Fakult\u00e4t ist definiert als:\n        ///     brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n        ///     wobei n > 0\n        /// \n        ///     Zum Beispiel:\n        /// >>> SpecialFactorial(4)\n        /// 288\n        /// \n        /// The function will receive an integer as input and should return the special\n        /// factorial of this integer.\n        /// </summary>\n        public static int SpecialFactorial (int n) \n        {\n            if (n == 0 || n == 1)\n                return 1;\n            else\n                return n * SpecialFactorial(n - 1);"}
{"task_id": "csharp/65", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Du erh\u00e4ltst einen String, der einen Satz repr\u00e4sentiert. Der Satz enth\u00e4lt einige W\u00f6rter, die durch ein Leerzeichen getrennt sind. Du musst einen String zur\u00fcckgeben, der die W\u00f6rter aus dem urspr\u00fcnglichen Satz enth\u00e4lt, deren L\u00e4ngen Primzahlen sind. Die Reihenfolge der W\u00f6rter im neuen String sollte dieselbe wie im Original sein.\n        /// \n        ///     Beispiel 1:\n        ///         Eingabe: sentence = \"This is a test\"\n        ///         Ausgabe: \"is\"\n        /// \n        ///     Beispiel 2:\n        ///         Eingabe: sentence = \"lets go for swimming\"\n        ///         Ausgabe: \"go for\"\n        /// \n        ///     Einschr\u00e4nkungen:\n        ///         * 1 <= len(sentence) <= 100\n        ///         * Der Satz enth\u00e4lt nur Buchstaben.\n        /// \n        /// </summary>\n        public static string WordsInSentence (string sentence) \n        {\n            var words = sentence.Split(' ');\n\n            foreach (var word in words.ToList())\n            {\n                if (!IsPrime(word.Length))\n                    words = words.Where(w => w != word).ToArray();\n            }\n            \n            return String.Join(\" \", words);\n        }\n\n        static bool IsPrime(int n)\n        {\n            // 2 ist das einzige Primzahl, die durch sich selbst teilbar ist\n            if (n == 2)\n                return true;\n\n            for (var i = 2; i < n; ++i)\n            {\n                if (n % i == 0)\n                    return false;\n            }\n            \n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/66", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Deine Aufgabe ist es, eine Funktion zu implementieren, die den Ausdruck x * n vereinfacht. Die Funktion gibt True zur\u00fcck, wenn x * n zu einer ganzen Zahl ausgewertet wird, andernfalls False. Sowohl x als auch n sind Zeichenketten, die eine Bruchzahl darstellen und das folgende Format haben: <Z\u00e4hler>/<Nenner>, wobei sowohl Z\u00e4hler als auch Nenner positive ganze Zahlen sind.\n        /// \n        /// Du kannst davon ausgehen, dass x und n g\u00fcltige Bruchzahlen sind und keinen Nenner von Null haben.\n        /// Simplify(\"1/5\", \"5/1\") = True\n        /// Simplify(\"1/6\", \"2/1\") = False\n        /// Simplify(\"7/10\", \"10/2\") = False\n        /// \n        /// </summary>\n        public static bool Simplify (string x, string n) {\n            var regEx = new Regex(\"^(?<numerator>[0-9]+)/(?<denominator>[0-9]+)$\");\n            var matchX = regEx.Match(x);\n            var matchN = regEx.Match(n);\n\n            if (!matchX.Success || !matchN.Success)\n                return false;\n            \n            var numeratorX = int.Parse(matchX.Groups[\"numerator\"].Value);\n            var denominatorX = int.Parse(matchX.Groups[\"denominator\"].Value);\n            var numeratorN = int.Parse(matchN.Groups[\"numerator\"].Value);\n            var denominatorN = int.Parse(matchN.Groups[\"denominator\"].Value);\n\n            // https://stackoverflow.com/questions/17890365/how-do-i-reduce-a-fractional-number\n            return (numeratorX * numeratorN) % (denominatorX * denominatorN) == 0;\n        }"}
{"task_id": "csharp/67", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n        ///     in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n        ///     Hinweis: Wenn es mehrere Elemente mit \u00e4hnlicher Summe ihrer Ziffern gibt,\n        ///     ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n        /// \n        ///     Zum Beispiel:\n        /// >>> OrderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n        /// >>> OrderByPoints([]) == []\n        /// \n        /// </summary>\n        public static List<int> OrderByPoints (List<int> nums) \n        {\n            return nums.OrderBy(n => n.ToString().Select(c => c - '0').Sum()).ToList();\n        }\n        \n        // Feel free to add more test cases here once you've implemented the solution!\n    }\n}"}
{"task_id": "csharp/68", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            List<int> input = new List<int>() { 33, -2, -3, 45, 21, 109 };\n            \n            int output = SpecialFilter(input);\n            \n            Console.WriteLine(output);\n        }\n\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Schreiben Sie eine Funktion, die ein Array von Zahlen als Eingabe erh\u00e4lt und die Anzahl der Elemente im Array zur\u00fcckgibt, die gr\u00f6\u00dfer als 10 sind und bei denen sowohl die erste als auch die letzte Ziffer der Zahl ungerade sind (1, 3, 5, 7, 9). Zum Beispiel:\n        /// \n        /// SpecialFilter([15, -73, 14, -15]) => 1 \n        /// SpecialFilter([33, -2, -3, 45, 21, 109]) => 2\n        /// \n        /// </summary>\n        public static int SpecialFilter (List<int> nums) \n        {\n            List<int> result = new List<int>();\n            \n            foreach (var num in nums) \n            {\n                if (num > 10 && IsOddFirstAndLastDigit(num)) \n                {\n                    result.Add(num);\n                }\n            }\n            \n            return result.Count;\n        }\n        \n        public static bool IsOddFirstAndLastDigit(int number) \n        {\n            char first = Convert.ToChar(number / 10).ToString()[0];\n            char last = Convert.ToChar(number % 10).ToString()[0];\n            \n            int firstInt = Char.GetNumericValue(first);\n            int lastInt = Char.GetNumericValue(last);\n            \n            return (firstInt + lastInt) % 2 != 0;\n        }\n    }\n}"}
{"task_id": "csharp/69", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Sie erhalten eine positive ganze Zahl n. Sie m\u00fcssen ein Integer-Array a der L\u00e4nge n erstellen.\n        ///         F\u00fcr jedes i (1 \u2264 i \u2264 n) gilt: a[i] = i * i - i + 1.\n        ///         Geben Sie die Anzahl der Tripel (a[i], a[j], a[k]) von a zur\u00fcck, bei denen i < j < k gilt und a[i] + a[j] + a[k] ein Vielfaches von 3 ist.\n        /// \n        ///     Beispiel:\n        ///         Eingabe: n = 5\n        ///         Ausgabe: 1\n        ///         Erkl\u00e4rung:\n        ///         a = [1, 3, 7, 13, 21]\n        ///         Das einzige g\u00fcltige Tripel ist (1, 7, 13).\n        /// \n        /// </summary>"}
{"task_id": "csharp/70", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Es gibt acht Planeten in unserem Sonnensystem: Der Sonne am n\u00e4chsten ist Merkur, dann folgen Venus, die Erde, Mars, Jupiter, Saturn, Uranus und Neptun. Schreiben Sie eine Funktion, die zwei Planetennamen als Zeichenketten planet1 und planet2 annimmt. Die Funktion sollte ein Tupel zur\u00fcckgeben, das alle Planeten enth\u00e4lt, deren Umlaufbahnen zwischen der Umlaufbahn von Planet1 und der Umlaufbahn von Planet2 liegen und nach N\u00e4he zur Sonne sortiert sind. Die Funktion sollte ein leeres Tupel zur\u00fcckgeben, wenn planet1 oder planet2 keine korrekten Planetennamen sind. Beispiele:\n        /// \n        /// Bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n        /// Bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n        /// Bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        /// \n        /// </summary>\n        public static List<string> Bf (string planet1, string planet2) \n        {"}
{"task_id": "csharp/71", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Ein einfaches Programm, das den Wert von x zur\u00fcckgeben sollte, wenn n eine Primzahl ist, und den Wert von y zur\u00fcckgeben sollte, wenn nicht.\n        /// \n        /// Beispiele:\n        /// \n        /// for XOrY(7, 34, 12) == 34\n        /// for XOrY(15, 8, 5) == 5\n        /// \n        /// </summary>\n        public static int XOrY (int n, int x, int y) \n        {\n            if(IsPrime(n))\n                return x;\n            else\n                return y;\n        }\n        \n        private static bool IsPrime(int number)\n        {\n            // Check for prime numbers\n            if (number <= 1)\n            {\n                return false;\n            }\n            \n            for (int i = 2; i < Math.Sqrt(number); i++)\n            {\n                if (number % i == 0)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}"}
{"task_id": "csharp/72", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine Liste von Zahlen, gib die Summe der Quadrate der Zahlen in der Liste zur\u00fcck, die ungerade sind. Ignoriere Zahlen, die negativ oder keine ganzen Zahlen sind.\n        /// \n        ///     DoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n        ///     DoubleTheDifference([-1, -2, 0]) == 0\n        ///     DoubleTheDifference([9, -2]) == 81\n        ///     DoubleTheDifference([0]) == 0  \n        ///     \n        ///     Wenn die Eingangsliste leer ist, gib 0 zur\u00fcck.\n        /// \n        /// </summary>\n        public static int DoubleTheDifference (List<object> lst) \n        {\n            if (!lst.Any())\n                return 0;\n            \n            var numbers = lst.Select(x => Convert.ToInt32(x)).ToList();\n\n            var squares = numbers.Where(x => x % 2 != 0).Sum(x => Math.Pow(x, 2));\n            \n            return (int)squares;\n        }\n    }\n}"}
{"task_id": "csharp/73", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Sie erhalten den Namen einer Klasse (einen String) und eine Liste von Erweiterungen. Die Erweiterungen sollen verwendet werden, um zus\u00e4tzliche Klassen zur Kiante zu laden. Die St\u00e4rke der Erweiterung wird wie folgt definiert: Sei CAP die Anzahl der Gro\u00dfbuchstaben im Namen der Erweiterung und SM die Anzahl der Kleinbuchstaben im Namen der Erweiterung. Die St\u00e4rke wird durch den Bruch CAP - SM gegeben. Sie sollten die st\u00e4rkste Erweiterung finden und einen String in diesem Format zur\u00fcckgeben: ClassName.StrongestExtensionName. Wenn es zwei oder mehr Erweiterungen mit der gleichen St\u00e4rke gibt, sollten Sie die w\u00e4hlen, die zuerst in der Liste steht. Zum Beispiel, wenn Sie \"Slices\" als Klasse und eine Liste von Erweiterungen erhalten: ['SErviNGSliCes', 'Cheese', 'StuFfed'], sollten Sie 'Slices.SErviNGSliCes' zur\u00fcckgeben, da 'SErviNGSliCes' die st\u00e4rkste Erweiterung ist (ihre St\u00e4rke ist -1). Beispiel:\n        /// \n        /// for StrongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n        /// \n        /// </summary>\n        public static string StrongestExtension (string class_name, List<string> extensions) \n        {\n            return class_name + \".\" +extensions.First();\n        }\n    }\n}"}
{"task_id": "csharp/74", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Du bekommst 2 W\u00f6rter. Du musst True zur\u00fcckgeben, wenn das zweite Wort oder eine seiner Rotationen ein Teilstring im ersten Wort ist.\n        /// CycpatternCheck(\"abcd\",\"abd\") => False\n        /// CycpatternCheck(\"hello\",\"ell\") => True\n        /// CycpatternCheck(\"whassup\",\"psus\") => False\n        /// CycpatternCheck(\"abab\",\"baa\") => True\n        /// CycpatternCheck(\"efef\",\"eeff\") => False\n        /// CycpatternCheck(\"himenss\",\"simen\") => True\n        /// \n        /// </summary>\n        public static bool CycpatternCheck (string a, string b) \n        {\n            if (a.Length != b.Length)\n                return false;\n            for (int i = 0; i < a.Length; i++)\n            {\n                string s = a.Substring(i);\n                var s2 = new string(s.Reverse().ToArray());\n                //Console.WriteLine(\"S2:\" + s2);\n                if (b == s || b == s2)\n                    return true;\n            }\n            return false;\n        }\n    }\n}"}
{"task_id": "csharp/75", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine positive Ganzzahl, erhalte ihre r\u00f6mische Numeral-\u00c4quivalenz als Zeichenkette und gib sie in Kleinbuchstaben zur\u00fcck.\n        /// Einschr\u00e4nkungen: 1 <= num <= 1000\n        /// \n        /// Beispiele:\n        /// >>> IntToMiniRoman(19) == 'xix'\n        /// >>> IntToMiniRoman(152) == 'clii'\n        /// >>> IntToMiniRoman(426) == 'cdxxvi'\n        /// \n        /// </summary>\n        public static string IntToMiniRoman (int number) \n        {\n            string result = \"\";\n            \n            // Implement your solution here!"}
{"task_id": "csharp/76", "language": "csharp", "completion": "using System;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sind die L\u00e4ngen der drei Seiten eines Dreiecks. Gib True zur\u00fcck, wenn die drei Seiten ein rechtwinkliges Dreieck bilden, ansonsten False. Ein rechtwinkliges Dreieck ist ein Dreieck, bei dem ein Winkel ein rechter Winkel oder 90 Grad ist. Beispiel:\n        /// \n        /// RightAngleTriangle(3, 4, 5) == True\n        /// RightAngleTriangle(1, 2, 3) == False\n        /// \n        /// </summary>\n        public static bool RightAngleTriangle (int a, int b, int c) \n        {\n            var sides = new List<int> {a, b, c};\n\n            if (sides.Count != 3 || sides.Any(i => i < 0)) return false;\n\n            sides.Sort();\n            return Math.Pow(sides[2], 2) == Math.Pow(sides[1], 2) + Math.Pow(sides[0], 2);\n        }\n    }\n}"}
{"task_id": "csharp/77", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// Du erh\u00e4ltst einen String s.\n        ///     Wenn s[i] ein Buchstabe ist, kehre seine Gro\u00df- und Kleinschreibung um, oder umgekehrt,\n        ///     ansonsten belasse es so wie es ist.\n        ///     Wenn der String keine Buchstaben enth\u00e4lt, kehre den String um.\n        ///     Die Funktion sollte den resultierenden String zur\u00fcckgeben.\n        ///     Beispiele\n        /// \n        /// Solve(\"1234\") = \"4321\"\n        /// Solve(\"ab\") = \"AB\"\n        /// Solve(\"#a@C\") = \"#A@c\"\n        /// \n        /// </summary>\n        public static string Solve (string s) \n        {\n            if (!s.Any(c => Char.IsLetter(c)))\n            {\n                return new string(s.Reverse().ToArray());\n            }\n\n            var result = \"\";\n            \n            for (int i = 0; i < s.Length; i++)\n            {\n                if (Char.IsLetter(s[i]))\n                {\n                    if (Char.IsLower(s[i]))\n                    {\n                        result += Char.ToUpper(s[i]);\n                    }\n                    else\n                    {\n                        result += Char.ToLower(s[i]);\n                    }\n                }\n                else\n                {\n                    result += s[i];\n                }\n            }\n            \n            return result;\n        }\n    }\n}"}
{"task_id": "csharp/78", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben eine Zeichenkette 'text', gibt seine md5-Hash-\u00c4quivalent-Zeichenkette zur\u00fcck.\n        ///     Wenn 'text' eine leere Zeichenkette ist, gib null zur\u00fcck.\n        /// >>> StringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n        /// \n        /// </summary>\n        public static string StringToMd5 (string text) \n        {\n            if(text == \"\")\n                return null;\n\n            using (var md5 = System.Security.Cryptography.MD5.Create())\n            {\n                var inputBytes = System.Text.Encoding.ASCII.GetBytes(text);\n                var hashBytes = md5.ComputeHash(inputBytes);\n\n                // Convert the byte array to hexadecimal string\n                var builder = new System.Text.StringBuilder();\n                for (int i = 0; i < hashBytes.Length; i++)\n                {\n                    builder.Append(hashBytes[i].ToString(\"x2\"));\n                }\n\n                return builder.ToString();\n            }\n        }\n    }\n}"}
{"task_id": "csharp/79", "language": "csharp", "completion": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing KellermanSoftware.CompareNetObjects;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary> \n        /// Du bist ein erfahrener C# Programmierer.\n        /// \n        /// Gegeben sind zwei positive ganze Zahlen a und b. Gib die geraden Ziffern zwischen a und b in aufsteigender Reihenfolge zur\u00fcck.\n        /// \n        /// Zum Beispiel:\n        /// \n        /// GenerateIntegers(2, 8) => [2, 4, 6, 8]\n        /// GenerateIntegers(8, 2) => [2, 4, 6, 8]\n        /// GenerateIntegers(10, 14) => []\n        /// \n        /// </summary>\n        public static List<int> GenerateIntegers (int a, int b) \n        {\n            var numbers = new List<int>();\n\n            if (a > b)\n            {\n                return numbers;\n            }\n            \n            for (var i = a; i <= b; i++)\n            {\n                if (i % 2 == 0)\n                {\n                    numbers.Add(i);\n                }\n            }"}

{"task_id": "java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     */\n    public static Boolean belowZero(List<Object> operations) {"}
{"task_id": "java/1", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        // sum product of a list of numbers\n        int sum = 0;\n        int product = 1;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i).getClass() == Integer.class) {\n                sum += (Integer) numbers.get(i);\n                product *= ((Integer) numbers.get(i));\n            }\n        }"}
{"task_id": "java/2", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n        if (a.length() != b.length())\n            throw new IllegalArgumentException(\"Input strings must be of equal length\");\n        else {\n            StringBuilder s = new StringBuilder();\n            for (int i=0; i<a.length(); i++)\n                if (a.charAt(i)==b.charAt(i))\n                    s.append('0');\n                else\n                    s.append('1');\n            return s.toString();\n        }\n    }\n\n    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        System.out.println(stringXor(in.next(), in.next()));\n    }\n}"}
{"task_id": "java/3", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<String> strings) {"}
{"task_id": "java/4", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     *\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        System.out.println(greatestCommonDivisor(a, b));\n    }\n}"}
{"task_id": "java/5", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n        //Break input into an array of words\n        String[] numArray = numbers.split(\"\\\\s\");\n\n        //Create a hashmap that stores the numberals in order with their values\n        Map<String, Integer> sortedMap = new HashMap<>();\n        sortedMap.put(\"zero\", 0);\n        sortedMap.put(\"one\", 1);\n        sortedMap.put(\"two\", 2);\n        sortedMap.put(\"three\", 3);\n        sortedMap.put(\"four\", 4);\n        sortedMap.put(\"five\", 5);\n        sortedMap.put(\"six\", 6);\n        sortedMap.put(\"seven\", 7);\n        sortedMap.put(\"eight\", 8);\n        sortedMap.put(\"nine\", 9);\n\n        //Sort the hashmap by values\n        List<String> keys = new ArrayList<>(sortedMap.keySet());\n        Collections.sort(keys, (a, b) -> Integer.compare(sortedMap.get(a), sortedMap.get(b)));\n\n        //Convert the sorted list of keys back into a string and return it\n        StringBuilder result = new StringBuilder();\n        for (String key : keys){\n            result.append(key).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        String numbers = \"three one five\";\n        System.out.println(sortNumbers(numbers));\n    }\n}"}
{"task_id": "java/6", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        Double min = Collections.min(numbers);\n        Double max = Collections.max(numbers);\n\treturn listMap(numbers, x -> (x-min)/(max-min));\n    }\n\n    private static List<Double> listMap(List<Double> numbers, Function<Double, Double> f) {\n\tList<Double> mapped = new ArrayList<Double>();\n\tfor (Double number : numbers) {\n\t    mapped.add(f.apply(number));\n\t}\n\treturn mapped;\n    }\n}"}
{"task_id": "java/7", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n            } else {\n                builder.append(Character.toUpperCase(c));\n            }\n        }\n        return builder.toString();\n    }\n}"}
{"task_id": "java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     *\n     */\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> positive_list = new ArrayList<>();\n        for (int i=0; i<l.size(); i++) {\n            if ((long)l.get(i) > 0) {\n                positive_list.add(l.get(i));\n            }\n        }\n        return positive_list;\n    }\n}"}
{"task_id": "java/9", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     */\n    public static Boolean isPrime(int n) {"}
{"task_id": "java/10", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     *\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        Collections.sort(l); // Sort the list\n        int size = l.size();\n        if (size == 0) return new ArrayList<>(); // Base case of empty list\n\n        List<Integer> result = new ArrayList<>(); // Initialize an empty result list\n        result.add(l.get(0)); // Add the first element to the result list\n\n        for (int i = 1; i < size; i++) {\n            int prev = l.get(i - 1);\n            int curr = l.get(i);\n\n            if (curr != prev)\n                result.add(curr);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     *\n     */\n    public static int primeFib(int n) {\n        // Your code goes here:\n\n        return -1;\n    }\n}"}
{"task_id": "java/12", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {"}
{"task_id": "java/13", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        for (int i: l) {\n            if (-i in set) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> test_list_1 = Arrays.asList(1, 3, 5, 0);\n        Boolean result_1 = pairsSumToZero(test_list_1);\n        System.out.println(result_1);\n\n        List<Integer> test_list_2 = Arrays.asList(1, 3, -2, 1);\n        Boolean result_2 = pairsSumToZero(test_list_2);\n        System.out.println(result_2);\n\n        List<Integer> test_list_3 = Arrays.asList(1, 2, 3, 7);\n        Boolean result_3 = pairsSumToZero(test_list_3);\n        System.out.println(result_3);\n\n        List<Integer> test_list_4 = Arrays.asList(2, 4, -5, 3, 5, 7);\n        Boolean result_4 = pairsSumToZero(test_list_4);\n        System.out.println(result_4);\n\n        List<Integer> test_list_5 = Arrays.asList(1);\n        Boolean result_5 = pairsSumToZero(test_list_5);\n        System.out.println(result_5);\n    }\n}"}
{"task_id": "java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n        if (n == 0 || n == 1)\n            return 0;\n        else if (n == 2)\n            return 2;\n\n        // This will store the results of all fibonacci numbers so far.  The last four are required to calculate the next fib4 number\n        List<Integer> fibCache = new ArrayList<Integer>(n);\n        fibCache.add(0);\n        fibCache.add(0);\n        fibCache.add(2);\n        int i = 3;\n\n        while (i <= n) {\n            // Compute the current Fibonacci number as the sum of the last four numbers in the cache\n            Integer fibN = fibCache.get(i-1) + fibCache.get(i-2) + fibCache.get(i-3) + fibCache.get(i-4);\n\n            // Add it to the cache and move on to the next number\n            fibCache.add(fibN);\n            i++;\n        }\n\n        return fibCache.get(n);\n    }\n}"}
{"task_id": "java/15", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);"}
{"task_id": "java/16", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        return new String.reverse(text).equals(text);"}
{"task_id": "java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     *\n     */\n    public static String removeVowels(String text) {\n        String vowel = \"aeiou\";\n        String output = \"\";\n        for (int i=0;i<text.length();i++) {\n            if (!vowel.contains(Character.toString(text.charAt(i)))) {\n                output += text.charAt(i);\n            }\n\n        }\n        return output;\n    }\n\n    public static void main(String[] args) {\n        String test1 = \"abcdef\";\n        System.out.println(\"Remove Vowels in a string\");\n        System.out.println(removeVowels(test1));\n    }\n}"}
{"task_id": "java/18", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     *\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int number : l) {\n            if (number >= t) return false;\n        }\n        return true;\n    }\n}"}
{"task_id": "java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n\n    }\n}"}
{"task_id": "java/20", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddbuzzzZzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddbuzzzZzzddeddabc')\n     * False\n     */\n    public static Boolean sameChars(String s0, String s1) {"}
{"task_id": "java/21", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */"}
{"task_id": "java/22", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> s = new TreeSet<Integer>(l1);\n        List<Integer> ans = new ArrayList<Integer>();\n\n        for (int i: l2) {\n            if (s.contains(i))\n                ans.add(i);\n        }\n        return ans;\n    }\n}"}
{"task_id": "java/23", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     *\n     */\n    public static int largestPrimeFactor(int n) {"}
{"task_id": "java/24", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     *\n     */\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++)\n            sum += i;\n        return sum;\n    }\n\n    public static void main(String args[]) {\n        Scanner s = new Scanner(System.in);\n        System.out.println(\"Enter a positive integer: \");\n        int n = s.nextInt();\n\n        System.out.println(\"Sum of numbers from 1 to \" + n + \" is \" + sumToN(n));\n    }\n}"}
{"task_id": "java/25", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Integer> derivative(List<Integer> xs) {"}
{"task_id": "java/26", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FibFib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1 || n == 2) {\n            return 0;\n        }\n\n        int a = 0, b = 0, c = 1, next;\n        for (int i=3; i<=n; i++) {\n            next = a + b + c;\n            a = b;\n            b = c;\n            c = next;\n        }\n        return c;\n    }\n}"}
{"task_id": "java/27", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {"}
{"task_id": "java/28", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n        HashMap<Integer, Integer> count = new HashMap<>();\n\n        for (int i : lst) {\n            if (!count.containsKey(i))\n                count.put(i, 0);\n\n            count.set(i, count.get(i) + 1);\n        }\n        \n        int max = -1;\n        for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n            int k = entry.getKey();\n            int v = entry.getValue();\n            \n            if ((k < v) && (max == -1 || k > max))\n                max = k;\n        }\n\n        return max;\n    }\n}"}
{"task_id": "java/29", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        double s = (a+b+c)/2;\n\tdouble area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n\n\tif((a + b > c) && (a + c > b) && (b + c > a)){\n\t\treturn Double.valueOf(String.format(\"%.2f\", area));\n\t}else{\n\t\treturn -1;\n\t}\n    }\n\n    public static void main(String args[]) {\n        int[] sides = new int[3];\n        Scanner in = new Scanner(System.in);\n\n        System.out.println(\"Enter first side\");\n        sides[0] = in.nextInt();\n\n        System.out.println(\"Enter second side\");\n        sides[1] = in.nextInt();\n\n        System.out.println(\"Enter third side\");\n        sides[2] = in.nextInt();\n\n        Number area = triangleArea(sides[0], sides[1], sides[2]);\n\n\tif (area == -1){\n\t\tSystem.out.println(\"-1\");\n\t} else {\n\t\tSystem.out.printf(\"%.2f\\n\", area);\n\t}\n    }\n}"}
{"task_id": "java/30", "language": "java", "completion": "import java.util.*;\n\nclass WillItFly {\n    public static Boolean willItFly(List<Integer> q, int w) {\n        // Convert the list to an array and sort it\n        Integer[] ary = q.toArray(new Integer[q.size()]);\n        Arrays.sort(ary);\n\n        // Check if the list is balanced (it is a palindromic list)\n        for(int i=0; i<ary.length/2; i++) {\n            if(!ary[i].equals(ary[ary.length-1-i])) {\n                return false;\n            }\n        }\n\n        // Calculate the sum of the elements and check it against the maximum possible weight w\n        int sum = 0;\n        for (Integer element : ary) {\n            sum += element;\n        }\n        if (sum <= w) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "java/31", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        // Create an array with the first primes numbers under 100\n        int [] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        // Create a map to keep track of the prime numbers found in multiplication. \n        Map<Integer, Integer> map = new HashMap<>();\n\n        for(int i=0;i<primes.length;i++){\n            if (a%primes[i] == 0) {\n                map.put(primes[i],map.getOrDefault(primes[i],0)+1);\n                a /= primes[i];\n            }\n        }\n        \n        // Return false if the number was not a multiplication of prime numbers or more than three\n        return (a==1) && (map.size()<=3);\n    }\n}"}
{"task_id": "java/32", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     *\n     */\n    public static String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"}
{"task_id": "java/33", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3) return false; // a string of length < 3 can't be happy!\n\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s.length(); ++i){\n            Character c = s.charAt(i);\n            if (set.contains(c)){\n                return false; // duplicate letter found, string is not happy\n            }\n            else {\n                set.add(c); // add new character to the set\n            }\n\n            // check if there are 3 unique letters in the window of size 3\n            if (i >= 2 && !set.contains(s.charAt(i - 2))) return false;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/34", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {"}
{"task_id": "java/35", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) return false;\n        for (int i=2; i<Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "java/36", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 \u2264 N \u2264 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n        int sum = 0;\n        String binaryStr = \"\";\n        \n        while (n != 0) {\n            int digit = n % 2;\n            sum += digit;\n            binaryStr = digit + binaryStr;\n            n /= 2;\n        }\n        \n        return String.valueOf(sum);\n    }\n}"}
{"task_id": "java/37", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n        ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();\n        for (int i=0; i<lst.size();i++)\n        {\n            arr.add((ArrayList<Integer>)lst.get(i));\n        }\n        \n        // Sort by row in ascending order\n        Collections.sort(arr, new Comparator<ArrayList<Integer>>() {\n            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {\n                return o1.size() - o2.size();\n            }\n        });\n        \n        // For each sublist, sort by column in descending order\n        for (int i=0; i<arr.size();i++)\n        {\n            Collections.sort(arr.get(i), new Comparator<Integer>() {\n                public int compare(Integer o1, Integer o2) {\n                    return o2 - o1;\n                }\n            });\n        }\n        \n        // Find the index of each value in the sublists\n        List<Object> out = new ArrayList<Object>();\n        for (int i=0; i<arr.size();i++)\n        {\n            for (int j=0; j<arr.get(i).size();j++)\n            {\n                if (x == arr.get(i).get(j))\n                {\n                    out.add((i));\n                    out.add((j));\n                }\n            }\n        }\n        \n        return out;\n    }\n}"}
{"task_id": "java/38", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Object> lst) {"}
{"task_id": "java/39", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n        // split on any of the punctuation marks\n        String[] words = s.split(\"[.?!]\");\n\n        // iterate through each word in the array and count how many start with \"I\"\n        int boredomCount = 0;\n        for (String word : words) {\n            if (word.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        return boredomCount;\n    }\n}"}
{"task_id": "java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        // write your code here\n\n        return 1;\n    }\n}"}
{"task_id": "java/41", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Map<String, String> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n\n        Set keys = dict.keySet();\n        Iterator iterator = keys.iterator();\n\n        String firstKey = ((String []) keys.toArray())[0];\n        \n        int caseType = -1; // 0 for lower, 1 for upper\n\n        if (Character.isLowerCase(firstKey.charAt(0))) {\n            caseType = 0;\n        } else if (Character.isUpperCase(firstKey.charAt(0))) {\n            caseType = 1;\n        } else {\n            return false;\n        }\n        \n        while (iterator.hasNext()) {\n            String key = iterator.next();\n\n            int thisCaseType = -1; // 0 for lower, 1 for upper\n\n            if (Character.isLowerCase(key.charAt(0))) {\n                thisCaseType = 0;\n            } else if (Character.isUpperCase(key.charAt(0))) {\n                thisCaseType = 1;\n            } else {\n                return false;\n            }\n\n            if (thisCaseType != caseType) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n\n        String[] split = value.split(\"\\\\.\");\n\n        int integerPart = Integer.parseInt(split[0]);\n        double fractionalPart = Double.parseDouble(\"0.\" + split[1]);\n\n        if (fractionalPart < 0.5){\n            return integerPart;\n        } else if (fractionalPart > 0.5) {\n            return integerPart + 1;\n        } else {\n            //round away from zero\n            if(integerPart >= 0)\n                return integerPart + 1;\n            else\n                return integerPart - 1;\n        }\n\n    }\n}"}
{"task_id": "java/43", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     */\n    public static List<Integer> makeAPile(int n) {\n        int i = 0;\n\n        // Create a list to store the number of stones for each level.\n        List<Integer> result = new ArrayList<>();\n\n        // Add the first level to the list\n        result.add(n);\n\n        // Add levels until we reach n+1 (the total number of levels)\n        while (result.get(i) <= n) {\n            if (result.get(i) % 2 == 0)\n                result.add(result.get(i) + 1);\n            else\n                result.add(result.get(i) + 2);\n            i++;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int n = 3;\n        System.out.println(makeAPile(n));\n    }\n}"}
{"task_id": "java/44", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n        String[] words = s.split(\"\\\\s+|,\");\n        return Arrays.asList(words);\n    }\n\n    /**\n    * This is a test function for testing the above functions\n    * You don't need to submit this function\n    */\n\n    private static void printArray(List<Object> list) {\n        System.out.print(\"[\");\n        for (int i = 0; i < list.size(); i++) {\n            if (i != list.size() - 1) {\n                System.out.print(list.get(i)+\", \");\n            } else {\n                System.out.println(list.get(i));\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String s = \"Hi, my name is John\";\n        printArray(wordsString(s));\n    }\n}"}
{"task_id": "java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n        for (int i=y; i>=x; --i){\n            if ((i%2==0)){\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        \n        double total = 0.0;\n        for (int i = n; i <= m; i++)\n            total += i;\n            \n        total /= ((double)(m-n+1));\n        double rounded = Math.round(total);\n        String binary = Long.toBinaryString((long)rounded);\n        return \"0b\" + binary;\n    }\n}"}
{"task_id": "java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (int i = 0; i < n; ++i) {\n            if (i % 2 == 0) {\n                int j = 1;\n                int factorial = 1;\n\n                while (j <= i) {\n                    factorial *= j;\n                    j++;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int k = 0; k <= i; ++k) {\n                    sum += k;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        List<Integer> res = f(n);\n        for (int i = 0; i < n; i++) {\n            System.out.print(res.get(i));\n\n            if (i != n - 1) {\n                System.out.print(\" \");\n            }\n        }\n    }\n}"}
{"task_id": "java/48", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n        int [] pali = new int [n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            if (isPali(i)) {\n                if (i % 2 == 0)\n                    pali[i] += 1;\n                else\n                    pali[i] -= 1;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0, oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if(pali[i] == 1)\n                evenCount += pali[i];\n            else if (pali[i] == -1)\n                oddCount += pali[i];\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private static boolean isPali(int num) {\n        int copy = num, rev = 0;\n\n        while (copy > 0) {\n            int digit = copy % 10;\n\n            rev = rev * 10 + digit;\n            copy /= 10;\n        }\n\n        return num == rev;\n    }\n\n    public static void main(String[] args) {\n        int n = 3;\n        List<Integer> result = evenOddPalindrome(n);\n        for (int i : result)\n            System.out.print(i + \" \");\n        //System.out.println();\n\n        n = 12;\n        result = evenOddPalindrome(n);\n        for (int i : result)\n            System.out.print(i + \" \");\n    }\n}"}
{"task_id": "java/49", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n     *             \n     *\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n        // Corner Cases\n        if (arr == null || arr.size() <= 1)\n            return true;\n        \n        // Find the maximum element in the array\n        int max = Integer.MIN_VALUE;\n        for (int i : arr) {\n            if (i > max)\n                max = i;\n        }\n        \n        // Initialize the count of the maximum element with 0\n        int max_count = 0;\n        \n        // Count the number of occurrences of the maximum element\n        for (int i : arr) {\n            if (i == max)\n                max_count++;\n        }\n\n        return max_count <= arr.size() / 2;\n    }\n}"}
{"task_id": "java/50", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int sum1 = 0;\n        for (int num : lst1) {\n            if ((num % 2) == 0 )\n                continue;\n            else\n                return \"NO\";\n        }\n        return \"YES\";\n    }\n}"}
{"task_id": "java/51", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {"}
{"task_id": "java/52", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        // find the longest well\n        int nWells = grid.size();\n        if (nWells == 0) return 0;\n\n        int nCols = grid.get(0).size();\n        int maxCols = 0;\n        for (int i=0; i<nWells; ++i){\n            List<Integer> well = grid.get(i);\n            if (well.size() > maxCols)\n                maxCols = well.size();\n        }\n\n        // create the matrix to store the wells status\n        int[][] wellMatrix = new int[maxCols][nWells];\n        for (int i=0; i<nWells; ++i){\n            List<Integer> well = grid.get(i);\n            for (int j=0; j<well.size(); ++j)\n                wellMatrix[j][i] = well.get(j);\n        }\n\n        // fill up the water matrix\n        int nRows = maxCols - nCols;\n        for (int i=0; i<nWells; ++i){\n            List<Integer> well = grid.get(i);\n            for (int j=well.size(); j<maxCols; ++j)\n                wellMatrix[j][i] = 1;\n        }\n\n        // do the filling\n        int totalFills = 0;\n        while (true){\n            boolean filledUp = true;\n            for (int i=0; i<nWells; ++i){\n                int sumCols = 0;\n                for (int j=0; j<maxCols; ++j)\n                    sumCols += wellMatrix[j][i];\n\n                if (sumCols != nRows * capacity){\n                    filledUp = false;\n                    break;\n                }\n            }\n\n            // fill the water\n            if (filledUp){\n                totalFills++;\n                for (int i=0; i<nWells; ++i){\n                    int sumCols = 0;\n                    for (int j=0; j<maxCols; ++j)\n                        wellMatrix[j][i] += capacity;\n\n                    for (int j=0; j<maxCols; ++j){\n                        if (wellMatrix[j][i] > nRows * capacity){\n                            int remaining = wellMatrix[j][i] - nRows * capacity;\n                            wellMatrix[j][i] = nRows * capacity;\n\n                            for (int k=j+1; k<maxCols; ++k)\n                                wellMatrix[k][i] -= remaining;\n                        }\n                    }\n                }\n            } else {\n                break; // the water is filled up\n            }\n        }\n\n        return totalFills;\n    }\n\n    public static void main(String[] args) throws Exception{\n        List<List<Integer>> grid = new ArrayList<>();\n        grid.add(Arrays.asList(0,0,1,0));\n        grid.add(Arrays.asList(0,1,0,0));\n        grid.add(Arrays.asList(1,1,1,1));\n\n        int capacity = 1;\n        System.out.println(maxFill(grid, capacity));\n    }\n}"}
{"task_id": "java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<String> selectWords(String s, int n) {"}
{"task_id": "java/54", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        // If there is no element in the array or its length is less than k, return an empty list\n        if (k == 0 || arr.size() < k) {\n            return new ArrayList<>();\n        }\n\n        // Create a min heap of size k and add the first k elements of the array to the heap\n        PriorityQueue<Integer> queue = new PriorityQueue<>((o1, o2) -> o2 - o1);\n        for (int i = 0; i < k; ++i) {\n            queue.offer(arr.get(i));\n        }\n\n        // Iterate over the remaining elements in the array\n        for (int i = k; i < arr.size(); ++i) {\n            if (queue.peek() < arr.get(i)) {\n                queue.poll();\n                queue.offer(arr.get(i));\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        while (!queue.isEmpty()) {\n            result.add(queue.poll());\n        }\n\n        // Reverse the list and return it\n        Collections.reverse(result);\n        return result;\n    }\n}"}
{"task_id": "java/55", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> array = new ArrayList<>(Arrays.asList(1,3,5,7));\n        System.out.println(\"Sum of elements with two digits is: \" + AddElements.addElements(array, 2));\n    }\n}"}
{"task_id": "java/56", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersection {\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two \n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) return \"NO\";\n        \n        // check if the length is prime\n        for (int i = 2; i <= end - start; i++) {\n            if ((end - start) % i == 0) return \"NO\";\n        }\n        return \"YES\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> interval1 = Arrays.asList(1, 3); \n        List<Integer> interval2 = Arrays.asList(2, 4);\n        System.out.println(intersection(interval1, interval2));\n    }\n}"}
{"task_id": "java/57", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n        int i = 0;\n        long tri[] = new long[n + 2];\n\n        // Base case\n        tri[1] = 3;\n        tri[2] = 1;\n\n        for (i = 3; i <= n; i++)\n            if ((i & 1) == 1)\n                tri[i] = tri[i - 1] + tri[i - 2] + tri[(i + 1) / 2];\n            else\n                tri[i] = (long)Math.floor(tri[i - 1] + tri[i - 2] + tri[i + 1] / 2);\n\n        List<Number> result = new ArrayList<Number>();\n        for (i = 1; i <= n; i++)\n            result.add(tri[i]);\n        \n        return result;\n    }\n}"}
{"task_id": "java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        // Write your code here\n\t\t// base case\n        if (n < 10) {\n            return n % 2 == 0 ? 0 : n;\n        }\n\n\t\treturn (n % 10) % 2 == 0 ? digits(n / 10) : (n % 10) * digits(n / 10);\n\n    }\n}"}
{"task_id": "java/59", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]')\ufffd\ufffd True\n     * is_nested('[]]]]]]][[[[[]')\ufffd\ufffd False\n     * is_nested('[][]')\ufffd\ufffd False\n     * is_nested('[]')\ufffd\ufffd False\n     * is_nested('[[][]]')\ufffd\ufffd True\n     * is_nested('[[]][[['\ufffd\ufffd True\n     */\n    public static Boolean isNested(String string) {"}
{"task_id": "java/60", "language": "java", "completion": "import java.util.*;\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     */\n    public static int sumSquares(List<Number> lst) {\n        int total = 0;\n        for (int i=0;i<lst.size();i++){\n            double num = Math.ceil(lst.get(i).doubleValue());\n            total += Math.pow((num),2);\n        }\n\n        return total;\n    }\n}"}
{"task_id": "java/61", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n     * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n     * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n     * check_if_last_char_is_a_letter(\"\") \u279e False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        return Character.isLetter(txt.charAt(txt.length() - 1)) && !Character.isLetter(txt.charAt(txt.length() - 2));\n\n    }\n}"}
{"task_id": "java/62", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n        for (int i=arr.size()-1;i>=0;--i){\n            if (arr[i] instanceof Integer && arr[i-1] instanceof Integer && ((Integer)arr[i])<(Integer)arr[i-1]){\n                return i;\n            }\n        }\n\treturn -1;\n    }\n\n    public static void main(String[] args) {\n        List<Object> test_input = Arrays.asList(1,2,4,3,5);\n        System.out.println(canArrange(test_input));\n    }\n}"}
{"task_id": "java/63", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     *\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {"}
{"task_id": "java/64", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n        if (n == 0 || n == 1)\n            return 1;\n\n        long fact = n;\n        for (int i = n - 1; i > 1; --i) {\n            fact *= i;\n        }\n\n        return fact;\n    }\n}"}
{"task_id": "java/65", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {"}
{"task_id": "java/66", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n\n        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        int xNum = Integer.parseInt(xArr[0]);\n        int xDen = Integer.parseInt(xArr[1]);\n\n        int nNum = Integer.parseInt(nArr[0]);\n        int nDen = Integer.parseInt(nArr[1]);\n\n        System.out.println(\"X: \" + xNum + \"/\" + xDen);\n        System.out.println(\"N: \" + nNum + \"/\" + nDen);\n\n        if ((xDen % nNum) == 0 && (xNum % nDen) == 0){\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n}"}
{"task_id": "java/67", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n        return null;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(-1);\n        System.out.println(orderByPoints(list));\n    }\n}"}
{"task_id": "java/68", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if ((nums.get(i) instanceof Integer || nums.get(i) instanceof Long)) {\n                long number = (Long) nums.get(i);\n                int firstDigit = (int)(number % Math.pow(10, 1));\n                int lastDigit = (int)((number % Math.pow(10, (long)Math.log10(number)+1))/Math.pow(10, (long)Math.log10(number)));\n\n                if ((firstDigit == 1 || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9) && \n                    (lastDigit == 1 || lastDigit == 3 || lastDigit == 5 || lastDigit == 7 || lastDigit == 9) &&\n                    number > 10) {\n                        count++;\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "java/69", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n        // Complete this function\n        int[] a = new int[n];\n\n        for (int i=0; i<n; i++) {\n            a[i] = i*i - i + 1;\n        }\n\n        Set<Integer> set = new HashSet<>();\n\n        for (int i=0; i<n; i++) {\n\n            if ((a[i] % 3) == 0) {\n                int target = a[i] / 3 * 2;\n\n                if (set.contains(target)) {\n                    return 1;\n                }\n            }\n\n            set.add(a[i]);\n        }\n\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int result = getMaxTriples(n);\n        System.out.println(result);\n        in.close();\n    }\n}"}
{"task_id": "java/70", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n        List<Object> planets = new ArrayList<Object>();\n        \n        String[] sortedPlanets = {\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n        \n        int start;\n        for (start=0; start<sortedPlanets.length; start++) {\n            if(sortedPlanets[start].equals(planet1)) {\n                break;\n            }\n        }\n        int end;\n        for (end=start+1; end<sortedPlanets.length; end++) {\n            if(sortedPlanets[end].equals(planet2)) {\n                break;\n            }\n        }\n        \n        if (( planet1 == null || planet2 ==null) || start >= sortedPlanets.length || end >= sortedPlanets.length ) {\n            return planets;\n        } else {\n            for (int i=start+1; i<end; i++) {\n                planets.add(sortedPlanets[i]);\n            }\n            return planets;\n        }\n        \n    }\n}"}
{"task_id": "java/71", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     * @param n Integer.\n     * @param x Integer.\n     * @param y Integer.\n     */\n    public static int xOrY(int n, int x, int y) {"}
{"task_id": "java/72", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        // Write your code here\n\n        if (lst.isEmpty())\n            return 0;\n\n        int sum = 0;\n\n        for (int num : lst) {\n\n            if (num instanceof Integer) {\n                int n = (int)(num);\n\n                if (n % 2 != 0)\n                    sum += n * n;\n            }\n        }\n\n        return sum;\n    }\n}"}
{"task_id": "java/73", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n        double max = 0;\n        String name = \"\";\n        \n        for (String s : extensions){\n            int smCount = 0;\n            int capCount = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i))) {\n                    capCount += 1;\n                } else {\n                    smCount += 1;\n                }\n            }\n            double strength = (capCount - smCount);\n            \n            if (strength > max) {\n                max = strength;\n                name = s;\n            }\n        }\n        \n        return className + \".\" + name;\n    }\n}"}
{"task_id": "java/74", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {"}
{"task_id": "java/75", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     */\n    public static String intToMiniRoman(int number) {"}
{"task_id": "java/76", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        if (a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a){\n            return True;\n        } else {\n            return False;\n        }\n    }\n}"}
{"task_id": "java/77", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n        boolean hasLetter = false;\n        for (int i=0; i<s.length();i++){\n            if (Character.isLetter(s.charAt(i))){\n                hasLetter = true;\n                break;\n            }\n        }\n        \n        if (!hasLetter) return new StringBuilder(s).reverse().toString();\n\n        String result = \"\";\n        for (int i=0; i<s.length();i++){\n            char c = s.charAt(i);\n            if (Character.isLetter(c)){\n                if (Character.isUpperCase(c)) result += Character.toLowerCase(c);\n                else result += Character.toUpperCase(c);\n            }else{\n                result+=c;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "java/78", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n        // Complete this function\n        if (text.isEmpty()) {\n            return null;\n        } else {\n            try {\n                MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                byte[] hashBytes = md.digest(text.getBytes(StandardCharsets.UTF_8));\n                StringBuilder hexString = new StringBuilder();\n\n                for (byte b : hashBytes) {\n                    String hex = Integer.toHexString(0xff & b);\n                    if (hex.length() == 1) hexString.append('0');\n                    hexString.append(hex);\n                }\n                return hexString.toString();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}"}
{"task_id": "java/79", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n        // Handle cases where a > b\n        if (a > b) {\n            return generateIntegers(b, a);\n        }\n\n        // The numbers are the same, return an empty list\n        else if (a == b) {\n            return new ArrayList<Object>();\n        }\n\n        List<Integer> output = new ArrayList<Integer>();\n        for (int i=a; i<=b; ++i) {\n            // Check if the integer is even\n            if (isEven(i)) {\n                output.add(i);\n            }\n        }\n\n        return output;\n    }\n\n    public static boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"}

{"task_id": "javascript/0", "language": "javascript", "completion": "/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n * at that point function should return True. Otherwise it should return False.\n * >>> below_zero([1, 2, 3])\n * False\n * >>> below_zero([1, 2, -4, 5])\n * True\n *\n */\nfunction belowZero(operations) {\n    let balance = 0;\n\n    for (let i = 0; i < operations.length; i++) {\n        if (balance + operations[i] < 0) {\n            return true;\n        } else {\n            balance += operations[i];\n        }\n    }\n\n    return false;\n}"}
{"task_id": "javascript/1", "language": "javascript", "completion": "/**\n * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n * Empty sum should be equal to 0 and empty product should be equal to 1.\n * >>> sum_product([])\n * (0, 1)\n * >>> sum_product([1, 2, 3, 4])\n * (10, 24)\n *\n */\nfunction sumProduct(numbers) {\n  if (numbers === null || numbers === undefined || numbers.length === 0) return [0, 1];\n  let totalSum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    totalSum += numbers[i]\n  }\n\n  let product = 1;\n  for (let j = 0; j < numbers.length; j++) {\n    product *= numbers[j];\n  }\n  return [totalSum, product]\n}"}
{"task_id": "javascript/2", "language": "javascript", "completion": "/**\n * Input are two strings a and b consisting only of 1s and 0s.\n * Perform binary XOR on these inputs and return result also as a string.\n * >>> string_xor('010', '110')\n * '100'\n *\n */\nfunction stringXor(a, b) {\n    let result = '';\n\n    if (a.length !== b.length) {\n        throw new Error('Input strings are not of equal length');\n    }\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/3", "language": "javascript", "completion": "/**\n * Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return \"none\" in case the input list is empty.\n * >>> longest([])\n * 'none'\n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nfunction longest(strings) {\n    if (strings.length == 0)\n        return \"none\";\n\n    let index = 0;\n    for (let i=1; i<strings.length; i++)\n        if (strings[i].length > strings[index].length)\n            index = i;\n    \n    return strings[index];\n}"}
{"task_id": "javascript/4", "language": "javascript", "completion": "/**\n * Return a greatest common divisor of two integers a and b\n * >>> greatest_common_divisor(3, 5)\n * 1\n * >>> greatest_common_divisor(25, 15)\n * 5\n *\n */\nfunction greatestCommonDivisor(a, b) {\n  if (a > b) {\n    return greatestCommonDivisor(b, a);\n  }\n\n  if (a === 0) {\n    return b;\n  } else {\n    return greatestCommonDivisor(a, b % a);\n  }\n}"}
{"task_id": "javascript/5", "language": "javascript", "completion": "/**\n * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n * Return the string with numbers sorted from smallest to largest\n * >>> sort_numbers('three one five')\n * 'one three five'\n */\nfunction sortNumbers(str) {\n  var numMap = {'zero': 0,\n                 'one': 1,\n                 'two': 2,\n                 'three': 3,\n                 'four': 4,\n                 'five': 5,\n                 'six': 6,\n                 'seven': 7,\n                 'eight': 8,\n                 'nine': 9};\n\n  var numbers = str.split(' ');\n  return numbers.sort(function(a, b) {\n      return numMap[a] - numMap[b];\n  }).join(' ');\n}"}
{"task_id": "javascript/6", "language": "javascript", "completion": "/**\n * Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n * [0.0, 0.25, 0.5, 0.75, 1.0]\n *\n */\nfunction rescaleToUnit(numbers) {\n    var min = Math.min(...numbers);\n    var max = Math.max(...numbers);\n\n    return numbers.map(num => (num - min)/(max-min));\n}"}
{"task_id": "javascript/7", "language": "javascript", "completion": "/**\n * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n * >>> flip_case('Hello')\n * 'hELLO'\n *\n */\nfunction flipCase(string) {\n  let output = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      output += string[i].toLowerCase();\n    } else {\n      output += string[i].toUpperCase();\n    }\n  }\n  return output;\n}"}
{"task_id": "javascript/8", "language": "javascript", "completion": "/**\n * Return only positive numbers in the list.\n * >>> get_positive([-1, 2, -4, 5, 6])\n * [2, 5, 6]\n * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [5, 3, 2, 3, 9, 123, 1]\n *\n */\nfunction getPositive(l) {\n  return l.filter(x => x >= 0);\n}\nmodule.exports = {getPositive};"}
{"task_id": "javascript/9", "language": "javascript", "completion": "/**\n * Return true if a given number is prime, and false otherwise.\n * >>> is_prime(6)\n * False\n * >>> is_prime(101)\n * True\n * >>> is_prime(11)\n * True\n * >>> is_prime(13441)\n * True\n * >>> is_prime(61)\n * True\n * >>> is_prime(4)\n * False\n * >>> is_prime(1)\n * False\n *\n */\nfunction isPrime(n) {\n    if (n === 2) return true;\n    if (n < 2 || n % 2 === 0) return false;\n\n    var sqrt = Math.sqrt(n);\n    for (var i = 3; i <= sqrt; i += 2)\n        if (n % i === 0)\n            return false;\n\n    return true;\n}"}
{"task_id": "javascript/10", "language": "javascript", "completion": "/**\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfunction unique(l) {\n  return l.sort().filter((el, idx, arr) =>\n    el != arr[idx + 1]);\n}"}
{"task_id": "javascript/11", "language": "javascript", "completion": "/**\n * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n *\n */\nfunction primeFib(n) {\n  var result;\n  while (true) {\n    if (isPrime(result = fibonacci(n))) return result;\n    n++;\n  }\n\n  function isPrime(n) {\n    for (var i = 2, sqrt = Math.sqrt(n); i <= sqrt; i++)\n      if (!(n % i)) return false;\n    return true;\n  }\n\n  function fibonacci(n) {\n    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}"}
{"task_id": "javascript/12", "language": "javascript", "completion": "/**\n * * triples_sum_to_zero takes a list of integers as an input.\n * it returns True if there are three distinct elements in the list that\n * sum to zero, and False otherwise.\n\n * >>> triples_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> triples_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> triples_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n * True\n * >>> triples_sum_to_zero([1])\n * False\n *\n */\nfunction triplesSumToZero(l) {\n  for (var i = 0; i < l.length; i++) {\n    for (var j = i+1; j < l.length; j++) {\n      for (var k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "javascript/13", "language": "javascript", "completion": "/**\n * * pairs_sum_to_zero takes a list of integers as an input.\n * it returns True if there are two distinct elements in the list that\n * sum to zero, and False otherwise.\n * >>> pairs_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> pairs_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> pairs_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n * True\n * >>> pairs_sum_to_zero([1])\n * False\n *\n */\nfunction pairsSumToZero(l) {\n  let s = new Set();\n  for (let i of l) {\n    if (s.has(-i))\n      return true;\n    else\n      s.add(i);\n  }\n  return false;\n}"}
{"task_id": "javascript/14", "language": "javascript", "completion": "/**\n * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fib4(0) -> 0\n * fib4(1) -> 0\n * fib4(2) -> 2\n * fib4(3) -> 0\n * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n * >>> fib4(5)\n * 4\n * >>> fib4(6)\n * 8\n * >>> fib4(7)\n * 14\n */\nfunction* fib4() {\n  let n1 = 0,\n      n2 = 0,\n      n3 = 2;\n\n  yield n1;\n  yield n2;\n  yield n3;\n\n  while (true) {\n    const nextValue = n1 + n2 + n3;\n\n    n1 = n2;\n    n2 = n3;\n    n3 = nextValue;\n\n    yield nextValue;\n  }\n}"}
{"task_id": "javascript/15", "language": "javascript", "completion": "/**\n * Return median of elements in the list l.\n * >>> median([3, 1, 2, 4, 5])\n * 3\n * >>> median([-10, 4, 6, 1000, 10, 20])\n * 15.0\n *\n */\nfunction median(l) {\n    l.sort(function(a,b){return a-b});\n    var half = Math.floor(l.length/2);\n    if (l.length % 2)\n        return l[half];\n    else\n        return (l[half - 1] + l[half]) / 2.0;\n}"}
{"task_id": "javascript/16", "language": "javascript", "completion": "/**\n * * Checks if given string is a palindrome\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfunction isPalindrome(text) {\n  var reverse = text.split(\"\").reverse().join(\"\");\n  return (text === reverse);\n}"}
{"task_id": "javascript/17", "language": "javascript", "completion": "/**\n * * remove_vowels is a function that takes string and returns string without vowels.\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n *\n */\nfunction removeVowels(text) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n  let result = '';\n  for (let char of text.toLowerCase()) {\n    if (!vowels.includes(char)) {\n      result += char;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "javascript/18", "language": "javascript", "completion": "/**\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n */\nfunction belowThreshold(l, t) {"}
{"task_id": "javascript/19", "language": "javascript", "completion": "/**\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\nfunction add(x, y) {\n    return x + y;\n}"}
{"task_id": "javascript/20", "language": "javascript", "completion": "/**\n * Check if two words have the same characters.\n *\n * @param  {String} s0 First string of letters.\n * @param  {String} s1 Second string of letters.\n * @return {Boolean} Return true if strings contains the same characters, false otherwise.\n */\nfunction sameChars(s0, s1) {\n  if (s0.length !== s1.length) return false;\n\n  const count = {};\n\n  for (let i = 0; i < s0.length; ++i) {\n    const c = s0[i];\n\n    // If character not exist in count object then add it with value '1'\n    if (!count[c]) {\n      count[c] = 1;\n    } else {\n      // Character exists, just increment its value\n      count[c]++;\n    }\n  }\n\n  for (let i = 0; i < s1.length; ++i) {\n    const c = s1[i];\n\n    if (!count[c]) return false;\n\n    if (count[c] === 0) return false; // Character already used in first string\n\n    count[c]--;\n  }\n\n  return true;\n}"}
{"task_id": "javascript/21", "language": "javascript", "completion": "/**\n * Return n-th Fibonacci number.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n *\n */\nfunction fib(n) {\n    var first = 1,\n        second = 1;\n\n    for (var i=2; i<=n; ++i) {\n        var temp = first + second;\n\n        if (temp < first || temp < second)\n            throw new Error('Overflow error');\n\n        first = second;\n        second = temp;\n    }\n\n    return second;\n}"}
{"task_id": "javascript/22", "language": "javascript", "completion": "/**\n * Return sorted unique common elements for two lists.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n */\nfunction common(l1, l2) {"}
{"task_id": "javascript/23", "language": "javascript", "completion": "/**\n * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor(n) {\n  var largest = 0;\n\n  while (true) {\n    // Check if n is divisible by 2.\n    if (n % 2 == 0) {\n      n /= 2;\n      if (largest < 2) {\n        largest = 2;\n      }\n    } else {\n      break;\n    }\n  }\n\n  for (var i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i == 0) {\n      n /= i;\n      if (largest < i) {\n        largest = i;\n      }\n    }\n  }\n\n  // Handle prime number case.\n  if (n > 2 && largest < n) {\n    return n;\n  } else {\n    return largest;\n  }\n}"}
{"task_id": "javascript/24", "language": "javascript", "completion": "/**\n * sum_to_n is a function that sums numbers from 1 to n.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n *\n */\nfunction sumToN(n) {\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i;\n  }\n\n  return sum;\n}"}
{"task_id": "javascript/25", "language": "javascript", "completion": "/**\n * xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n *  Return derivative of this polynomial in the same form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n *\n */\nfunction derivative(xs) {\n    var xsClone = xs.slice();\n    var result = [];\n\n    //shift the array one to the left and push the last element into the result\n    for (var i = 0; i < xsClone.length - 1; ++i) {\n        xsClone[i] = xsClone[i + 1];\n        if(i == 0){\n            result.push(xs[0]);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/26", "language": "javascript", "completion": "/**\n * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fibfib(0) == 0\n * fibfib(1) == 0\n * fibfib(2) == 1\n * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n * >>> fibfib(1)\n * 0\n * >>> fibfib(5)\n * 4\n * >>> fibfib(8)\n * 24\n *\n */\nfunction fibfib(n) {\n\tif (n == 0)\n\t\treturn 0;\n\telse if (n == 1)\n\t\treturn 0;\n\telse if (n == 2)\n\t\treturn 1;\n\n\tvar p2 = 0, p3 = 0, p4 = 1, sum = 0;\n\tfor(i=3; i<=n; ++i) {\n\t\tsum = p2 + p3 + p4;\n\t\tp2 = p3;\n\t\tp3 = p4;\n\t\tp4 = sum;\n\t}\n\n\treturn sum;\n}"}
{"task_id": "javascript/27", "language": "javascript", "completion": "/**\n * Write a function vowels_count which takes a string representing\n * a word as input and returns the number of vowels in the string.\n * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n * vowel, but only when it is at the end of the given word.\n\n * Example:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n * 3\n *\n */\nfunction vowelsCount(s) {\n  var count = 0;\n  for (var i=0; i<s.length-1; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' ||\n        s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n\n  // check for trailing y\n  if (s.slice(-2) == \"ay\" || s.slice(-1) == \"y\") {\n    count++;\n  }\n\n  return count;\n}"}
{"task_id": "javascript/28", "language": "javascript", "completion": "/**\n * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n * zero, and has a frequency greater than or equal to the value of the integer itself. \n * The frequency of an integer is the number of times it appears in the list.\n * If no such a value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1]) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n *     search([5, 5, 4, 4, 4]) == -1\n *\n */\nfunction search(lst) {\n    let count = lst.reduce((acc, val) => {\n        if (val > 0 && acc[val] === undefined){\n            acc[val] = 1;\n        } else if (val > 0 && acc[val] !== undefined){\n            acc[val]++;\n        }\n        return acc;\n    }, {});\n    for(let i in count) {\n        let num = Number(i);\n        if (count[num] >= num) {\n            return num;\n        } \n    }\n    return -1;\n}"}
{"task_id": "javascript/29", "language": "javascript", "completion": "/**\n * * Given the lengths of the three sides of a triangle. Return the area of\n * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n * Otherwise return -1\n * Three sides make a valid triangle when the sum of any two sides is greater \n * than the third side.\n * Example:\n * triangle_area(3, 4, 5) == 6.00\n * triangle_area(1, 2, 10) == -1\n *\n */\nfunction triangleArea(a, b, c) {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return \"-1\";\n  } else {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area.toFixed(2);\n  }\n}"}
{"task_id": "javascript/30", "language": "javascript", "completion": "/**\n * * Write a function that returns True if the object q will fly, and False otherwise.\n * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n * Example:\n * will_it_fly([1, 2], 5)\ufffd\ufffd False \n * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n * will_it_fly([3, 2, 3], 1)fel\ufffd\ufffd False\n * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n * will_it_fly([3, 2, 3], 9)fel\ufffd\ufffd True\n * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n * will_it_fly([3], 5)fel\ufffd\ufffd True\n * # 3 is less than the maximum possible weight, and it's balanced.\n *\n */\nfunction willItFly(q, w) {\n    let sum = q.reduce((acc, curr) => acc += curr);\n\n    if (sum > w) return false;\n\n    for (let i = 0; i < q.length / 2; i++) {\n        if (q[i] !== q[q.length -1 - i]) {\n            return false;\n        }\n    } \n    return true;\n}"}
{"task_id": "javascript/31", "language": "javascript", "completion": "/**\n * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n * and false otherwise.\n * Knowing that (a) is less then 100. \n * Example:\n * is_multiply_prime(30) == True\n * 30 = 2 * 3 * 5\n *\n */\nfunction isMultiplyPrime(a) {\n    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];\n\n    if (a < 100) {\n\n        for (var i = primes.length - 1; i >= 0; i--) {\n            for (var j = primes.length - 1; j >= 0; j--) {\n                for (var k = primes.length - 1; k >= 0; k--) {\n                    if (primes[i] * primes[j] * primes[k] == a) return true;\n\n                }\n            }\n        }\n    }\n    \n    return false;\n}"}
{"task_id": "javascript/32", "language": "javascript", "completion": "/**\n * You will be given a number in decimal form and your task is to convert it to\n * binary format. The function should return a string, with each character representing a binary\n * number. Each character in the string will be '0' or '1'.\n\n * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n * The extra characters are there to help with the format.\n\n * Examples:\n * decimal_to_binary(15)   # returns \"db1111db\"\n * decimal_to_binary(32)   # returns \"db100000db\"\n *\n */\nfunction decimalToBinary(decimal) {\n  var binary = \"\";\n\n  if (decimal > 1) {\n    binary += 'db';\n\n    while (decimal > 0) {\n      binary = (decimal % 2).toString() + binary;\n      decimal = Math.floor(decimal / 2);\n    }\n  } else {\n    binary = 'db' + decimal + 'db';\n  }\n\n  return binary;\n}"}
{"task_id": "javascript/33", "language": "javascript", "completion": "/**\n * You are given a string s.\n * Your task is to check if the string is happy or not.\n * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n * For example:\n * is_happy(a) => False\n * is_happy(aa) => False\n * is_happy(abcd) => True\n * is_happy(aabb) => False\n * is_happy(adb) => True\n * is_happy(xyy) => False\n *\n */\nfunction isHappy(s) {\n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i <= s.length - 3; i++) {\n\n        //console.log(s[i] + \" \" + s[i+1] + \" \" + s[i+2]);\n        if (s[i] === s[i+1] ||\n            s[i] === s[i+2] ||\n            s[i+1] === s[i+2]) {\n                return false;\n        }\n    }\n\n    return true;\n}"}
{"task_id": "javascript/34", "language": "javascript", "completion": "/**\n * It is the last week of the semester and the teacher has to give the grades\n * to students. The teacher has been making her own algorithm for grading.\n * The only problem is, she has lost the code she used for grading.\n * She has given you a list of GPAs for some students and you have to write \n * a function that can output a list of letter grades using the following table:\n *          GPA       |    Letter grade\n *           4.0                A+\n *         > 3.7                A \n *         > 3.3                A- \n *         > 3.0                B+\n *         > 2.7                B \n *         > 2.3                B-\n *         > 2.0                C+\n *         > 1.7                C\n *         > 1.3                C-\n *         > 1.0                D+ \n *         > 0.7                D \n *         > 0.0                D-\n *           0.0                E\n * \n * Example:\n * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n */\n\n // This is a simple if/else statement to check the range of each gpa and \n // return the appropriate letter grade.\n function numericalLetterGrade(grades) {\n  var grades = [];\n\n  for (var i = 0; i < grades.length; i++) {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade > 3.7) {\n      return 'A'\n    } else if (grade > 3.3) {\n      return 'A-';\n    } else if (grade > 3.0) {\n      return 'B+';\n    } else if (grade > 2.7) {\n      return 'B';\n    } else if (grade > 2.3) {\n      return 'B-';\n    } else if (grade > 2.0) {\n      return 'C+';\n    } else if (grade > 1.7) {\n      return 'C';\n    } else if (grade > 1.3) {\n      return 'C-';\n    } else if (grade > 1.0) {\n      return 'D+';\n    } else if (grade > 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else { \n      return 'E'\n    }\n  }\n  return grades;\n}"}
{"task_id": "javascript/35", "language": "javascript", "completion": "/**\n * Write a function that takes a string and returns True if the string\n * length is a prime number or False otherwise\n * Examples\n * prime_length('Hello') == True\n * prime_length('abcdcba') == True\n * prime_length('kittens') == True\n * prime_length('orange') == False\n *\n */\nfunction primeLength(string) {\n  var strL = string.length;\n\n  if (strL === 1 || strL === 2) {\n    return true;\n  } else if (strL % 2 === 0) {\n    // not a prime number\n    return false;\n  } else {\n    for (var i = 3, w = Math.sqrt(strL); i <= w; i += 2) {\n      if (strL % i === 0) {\n        // not a prime number\n        return false;\n      }\n    }\n\n    // must be a prime number\n    return true;\n  }\n}"}
{"task_id": "javascript/36", "language": "javascript", "completion": "/**\n * Given a positive integer N, return the total sum of its digits in binary.\n * \n * Example\n *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n * \n * Variables:\n *     @N integer\n *          Constraints: 0 \u2264 N \u2264 10000.\n * Output:\n *      a string of binary number\n *\n */\nfunction solve(n) {\n  // Write your code here\n  \n  const binary = Number(n).toString(2);\n\n  let binarySum = 0;\n\n  for (let i = 0; i < binary.length; i++) {\n    binarySum += Number(binary[i]);\n  }\n\n  return String(binarySum);\n}"}
{"task_id": "javascript/37", "language": "javascript", "completion": "/**\n * * You are given a 2 dimensional data, as a nested lists,\n * which is similar to matrix, however, unlike matrices,\n * each row may contain a different number of columns.\n * Given lst, and integer x, find integers x in the list,\n * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n * each tuple is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort coordinates of the row by columns in descending order.\n * \n * Examples:\n * get_row([\n *   [1,2,3,4,5,6],\n *   [1,2,3,4,1,6],\n *   [1,2,3,4,5,1]\n * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n * get_row([], 1) == []\n * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n *\n */\nfunction getRow(lst, x) {\n  var rowCoords = [];\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x) > -1) {\n      rowCoords.push([i, lst[i].indexOf(x)]);\n    }\n  }\n\n  return rowCoords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}"}
{"task_id": "javascript/38", "language": "javascript", "completion": "/**\n * * You are given a list of integers.\n * Write a function next_smallest() that returns the 2nd smallest element of the list.\n * Return \"none\" if there is no such element.\n * \n * next_smallest([1, 2, 3, 4, 5]) == 2\n * next_smallest([5, 1, 4, 3, 2]) == 2\n * next_smallest([]) == None\n * next_smallest([1, 1]) == None\n *\n */\nfunction nextSmallest(lst) {\n  var min = lst[0];\n  for (var i = 1; i < lst.length; ++i) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n\n  return min;\n}"}
{"task_id": "javascript/39", "language": "javascript", "completion": "/**\n * * You'll be given a string of words, and your task is to count the number\n * of boredoms. A boredom is a sentence that starts with the word \"I\".\n * Sentences are delimited by '.', '?' or '!'.\n   \n * For example:\n * >>> is_bored(\"Hello world\")\n * 0\n * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n * 1\n *\n */\nfunction isBored(s) {\n  var count = 0;\n  var words = s.split(' ');\n  \n  for (var i=0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      count += 1;\n    }\n  }\n  \n  return count;\n}"}
{"task_id": "javascript/40", "language": "javascript", "completion": "/**\n * You are given a list of integers.\n * You need to find the largest prime value and return the sum of its digits.\n\n * Examples:\n * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n * For lst = [0,81,12,3,1,21] the output should be 3\n * For lst = [0,8,1,2,1,7] the output should be 7\n *\n */\nfunction largestPrimeSum(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\n  function isPrime(num) {\n    const sqrt = Math.sqrt(num);\n    for (let i = 2; i <= sqrt; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return num > 1;\n  }\n}"}
{"task_id": "javascript/41", "language": "javascript", "completion": "/**\n * * Given a dictionary, return True if all keys are strings in lower \n * case or all keys are strings in upper case, else return False.\n * The function should return False is the given dictionary is empty.\n * Examples:\n * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n *\n */\nfunction checkDictCase(dict) {\n    // write your code here\n  // first check if the dictionary is empty or not\n  if (Object.keys(dict).length === 0){\n  \treturn false;\n  }\n  // then we need to check the first letter of each key and store that value in a variable, \n  // then compare all the values with this stored variable. If they're all the same type return true, else false.\n\tvar caseFirstLetter = dict[Object.keys(dict)[0]][0].toLowerCase();\n\n\tfor (key in dict){\n\t\tif ((dict[key][0].toLowerCase() !== caseFirstLetter) && (dict[key][0].toUpperCase() !== caseFirstLetter)){\n\t\t\treturn false;\n\t\t}\n\t};\n\treturn true;\n}"}
{"task_id": "javascript/42", "language": "javascript", "completion": "/**\n * * Create a function that takes a value (string) representing a number\n * and returns the closest integer to it. If the number is equidistant\n * from two integers, round it away from zero.\n\n * Examples\n * >>> closest_integer(\"10\")\n * 10\n * >>> closest_integer(\"15.3\")\n * 15\n\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. For example closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n *\n */\nfunction closestInteger(value) {\n  var parsedValue = Number.parseFloat(value);\n  var roundedValue = Math.round(parsedValue);\n\n  if (parsedValue % 1 === 0.5) {\n    // If the number is equidistant from two integers, round it away from zero\n    return roundedValue + (roundedValue > 0 ? -1 : 1);\n  } else {\n    return roundedValue;\n  }\n}"}
{"task_id": "javascript/43", "language": "javascript", "completion": "/**\n * * Given a positive integer n, you have to make a pile of n levels of stones.\n * The first level has n stones.\n * The number of stones in the next level is:\n *     - the next odd number if n is odd.\n *     - the next even number if n is even.\n * Return the number of stones in each level in a list, where element at index\n * i represents the number of stones in the level (i+1).\n\n * Examples:\n * >>> make_a_pile(3)\n * [3, 5, 7]\n *\n */\nfunction makeAPile(n) {"}
{"task_id": "javascript/44", "language": "javascript", "completion": "/**\n * * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n * \n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n *\n */\nfunction wordsString(s) {\n  return s.split(/[,\\s]+/);\n}"}
{"task_id": "javascript/45", "language": "javascript", "completion": "/**\n * This function takes two positive numbers x and y and returns the\n * biggest even integer number that is in the range [x, y] inclusive. If \n * there's no such number, then the function should return -1.\n\n * For example:\n * choose_num(12, 15) = 14\n * choose_num(13, 12) = -1\n *\n */\nfunction chooseNum(x, y) {\n  if (x % 2 !== 0 ) x++;\n  \n  for (var i=x; i<=y; i++) {\n    if (i%2 === 0) return i;\n  }\n  return -1;\n}"}
{"task_id": "javascript/46", "language": "javascript", "completion": "/**\n * You are given two positive integers n and m, and your task is to compute the\n * average of the integers from n through m (including n and m). \n * Round the answer to the nearest integer and convert that to binary.\n * If n is greater than m, return -1.\n * Example:\n * rounded_avg(1, 5) => \"0b11\"\n * rounded_avg(7, 5) => -1\n * rounded_avg(10, 20) => \"0b1111\"\n * rounded_avg(20, 33) => \"0b11010\"\n *\n */\nfunction roundedAvg(n, m) {\n  if (m < n) {\n    return -1;\n  } else {\n    let avg = Math.floor((n + m)/2);\n    let binaryString = Number(avg).toString(2);\n    return \"0b\" + binaryString;\n  }\n}"}
{"task_id": "javascript/47", "language": "javascript", "completion": "/**\n * Implement the function f that takes n as a parameter,\n * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n * or the sum of numbers from 1 to i otherwise.\n * i starts from 1.\n * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n * Example:\n * f(5) == [1, 2, 6, 24, 15]\n *\n */\nfunction f(n) {\n  let result = [];\n\n  for (let i=0; i<n; i++) {\n    if (i % 2 === 0) {\n      // even number, the factorial\n      result.push(factorial(i));\n    } else {\n      // odd number, the sum of numbers from 1 to n\n      let sum = 0;\n\n      for (let j=1; j<=i; j++) {\n        sum += j;\n      }\n\n      result.push(sum);\n    }\n  }\n\n  return result;\n}\n\nfunction factorial(n) {\n  if (n < 2) {\n    // factorial of 0 or 1 is 1\n    return 1;\n  } else {\n    // calculate the factorial for n\n    let product = 1;\n\n    for (let i=2; i<=n; i++) {\n      product *= i;\n    }\n\n    return product;\n  }\n}"}
{"task_id": "javascript/48", "language": "javascript", "completion": "/**\n * * Given a positive integer n, return a tuple that has the number of even and odd\n * integer palindromes that fall within the range(1, n), inclusive.\n\n * Example 1:\n\n *     Input: 3\n *     Output: (1, 2)\n *     Explanation:\n *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n * Example 2:\n\n *     Input: 12\n *     Output: (4, 6)\n *     Explanation:\n *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n * Note:\n *     1. 1 <= n <= 10^3\n *     2. returned tuple has the number of even and odd integer palindromes respectively.\n *\n */\nfunction evenOddPalindrome(n) {\n  let result = [0, 0];\n\n  for (let i = 1; i < n; i++) {\n    if (isIntegerPalindrome(i) && i % 2 === 0) result[0]++;\n    else if (isIntegerPalindrome(i)) result[1]++;\n  }\n  return result;\n}\n\nfunction isIntegerPalindrome(n) {\n  let str = String(n);\n\n  for (let i = Math.floor(str.length / 2), j = str.length - 1; i >= 0; i--, j--)\n    if (str[i] !== str[j]) return false;\n\n  return true;\n}"}
{"task_id": "javascript/49", "language": "javascript", "completion": "/**\n * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n * numbers in the array will be randomly ordered. Your task is to determine if\n * it is possible to get an array sorted in non-decreasing order by performing \n * the following operation on the given array:\n *     You are allowed to perform right shift operation any number of times.\n * \n * One right shift operation means shifting all elements of the array by one\n * position in the right direction. The last element of the array will be moved to\n * the starting position in the array i.e. 0th index. \n\n * If it is possible to obtain the sorted array by performing the above operation\n * then return True else return False.\n * If the given array is empty then return True.\n\n * Note: The given list is guaranteed to have unique elements.\n\n * For Example:\n * \n * move_one_ball([3, 4, 5, 1, 2])==>True\n * Explanation: By performin 2 right shift operations, non-decreasing order can\n *              be achieved for the given array.\n * move_one_ball([3, 5, 4, 1, 2])==>False\n * Explanation:It is not possible to get non-decreasing order for the given\n *             array by performing any number of right shift operations.\n *             \n *\n */\nfunction moveOneBall(arr) {\n    // Your Code Here\n    var n = arr.length;\n    \n    if(n===0){\n        return true;\n    }\n\n    var j=1;\n    while(j<n && arr[j-1]<=arr[j]){\n        j++;\n    }\n\n    for(var i=j+1;i<n&&arr[j-1]>arr[i];i++){\n\n    }\n\n    if(i===n){\n        return true;\n    }else{\n        return false;\n    }\n}"}
{"task_id": "javascript/50", "language": "javascript", "completion": "/**\n * In this problem, you will implement a function that takes two lists of numbers,\n * and determines whether it is possible to perform an exchange of elements\n * between them to make lst1 a list of only even numbers.\n * There is no limit on the number of exchanged elements between lst1 and lst2.\n * If it is possible to exchange elements between the lst1 and lst2 to make\n * all the elements of lst1 to be even, return \"YES\".\n * Otherwise, return \"NO\".\n * For example:\n * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n * It is assumed that the input lists will be non-empty.\n *\n */\nfunction exchange(lst1, lst2) {\n  if (lst1.length !== lst2.length) return \"NO\";\n\n  let count = 0;\n\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) continue;\n\n    const targetValue = lst1[i];\n    const index = lst2.indexOf(targetValue);\n    if (index >= 0) {\n      count++;\n      lst2.splice(index, 1);\n    } else {\n      return \"NO\";\n    }\n  }\n\n  return count % 2 === 0 ? \"YES\" : \"NO\";\n}\n\nmodule.exports = exchange;"}
{"task_id": "javascript/51", "language": "javascript", "completion": "/**\n * Task\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n * then check if the result string is palindrome.\n * A string is called palindrome if it reads the same backward as forward.\n * You should return a tuple containing the result string and True/False for the check.\n * Example\n * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n *\n */\nfunction reverseDelete(s, c) {\n    let deleteArray = [];\n    for (let i = 0; i < s.length; i++) {\n        if (!deleteArray.includes(s[i])) {\n            if (c.includes(s[i])) {\n                deleteArray.push(s[i]);\n            } else {\n                deleteArray.unshift(s[i]);\n            }\n        }\n    }\n\n    let reversed = '';\n    for (let i = 0; i < deleteArray.length; i++) {\n        reversed += deleteArray[deleteArray.length - 1 - i];\n    }\n\n    let isPalindrome = true;\n    for (let i = 0; i < Math.ceil(reversed.length / 2); i++) {\n        if (reversed[i] !== reversed[reversed.length - 1 - i]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n\n    return [deleteArray.join(''), isPalindrome];\n}"}
{"task_id": "javascript/52", "language": "javascript", "completion": "/**\n * * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n\n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n */\nfunction maxFill(grid, capacity) {\n    // first loop to find wells for each row\n    var num_wells = new Array(grid.length).fill(0);\n\n    for (var i = 0; i < grid.length; i++) {\n        var wells_in_row = 0;\n\n        for (var j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                wells_in_row++;\n            }\n        }\n        num_wells[i] = wells_in_row;\n    }\n\n    // now we can loop through each row and apply the bucket capacity\n    var total_operations = 0;\n    for (var i = 0; i < grid.length; i++) {\n        // first, we want to know how much water is currently in our wells\n        var available_water = num_wells[i] * capacity;\n\n        // now we need to lower the bucket enough times that all of the water can be drained\n        for (var j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                var available_capacity = capacity - grid[i][j];\n\n                // how many more wells can I lower?\n                while (available_water > available_capacity && j + 1 < grid[i].length) {\n                    // we need to lower this well and update our variables\n                    if (grid[i][j+1] === 1) {\n                        break;\n                    }\n\n                    // lower the bucket and update all of our variables\n                    available_water -= capacity;\n                    j++;\n                }\n\n                // add one operation\n                total_operations += 1;\n            }\n        }\n    }\n\n    return total_operations;\n}"}
{"task_id": "javascript/53", "language": "javascript", "completion": "/**\n * Given a string s and a natural number n, you have been tasked to implement \n * a function that returns a list of all words from string s that contain exactly \n * n consonants, in order these words appear in the string s.\n * If the string s is empty then the function should return an empty list.\n * Note: you may assume the input string contains only letters and spaces.\n * Examples:\n * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n * select_words(\"simple white space\", 2) ==> []\n * select_words(\"Hello world\", 4) ==> [\"world\"]\n * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n *\n */\nfunction selectWords(s, n) {\n  var wordArr = s.split(' ');\n  var result = [];\n\n  for (var i=0; i<wordArr.length; i++) {\n    if (n === getConsonantsCount(wordArr[i])) {\n      result.push(wordArr[i]);\n    }\n  }\n\n  return result;\n}\n\n\nfunction getConsonantsCount(word) {\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var consonantCount = 0;\n  \n  for (var i=0; i<word.length; i++) {\n    if (vowels.indexOf(word[i]) === -1) {\n      consonantCount++;\n    }\n  }\n\n  return consonantCount;\n}"}
{"task_id": "javascript/54", "language": "javascript", "completion": "/**\n * * Given an array arr of integers and a positive integer k, return a sorted list \n * of length k with the maximum k numbers in arr.\n\n * Example 1:\n\n *     Input: arr = [-3, -4, 5], k = 3\n *     Output: [-4, -3, 5]\n\n * Example 2:\n\n *     Input: arr = [4, -4, 4], k = 2\n *     Output: [4, 4]\n\n * Example 3:\n\n *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n *     Output: [2]\n\n * Note:\n *     1. The length of the array will be in the range of [1, 1000].\n *     2. The elements in the array will be in the range of [-1000, 1000].\n *     3. 0 <= k <= len(arr)\n */\nfunction maximum(arr, k) {\n\n}"}
{"task_id": "javascript/55", "language": "javascript", "completion": "/**\n * * Given a non-empty array of integers arr and an integer k, return\n * the sum of the elements with at most two digits from the first k elements of arr.\n\n * Example:\n\n *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n *     Output: 24 # sum of 21 + 3\n\n * Constraints:\n *     1. 1 <= len(arr) <= 100\n *     2. 1 <= k <= len(arr)\n *\n */\nfunction addElements(arr, k) {\n    let sum = 0;\n    for (let i = 0; i < k && i < arr.length; i++) {\n        let num = arr[i];\n        if (num > -10 && num < 100) {\n            console.log(num);\n            sum += num;\n        }\n    }\n\n    return sum;\n}"}
{"task_id": "javascript/56", "language": "javascript", "completion": "/**\n * You are given two intervals,\n * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n * The given intervals are closed which means that the interval (start, end)\n * includes both start and end.\n * For each given interval, it is assumed that its start is less or equal its end.\n * Your task is to determine whether the length of intersection of these two \n * intervals is a prime number.\n * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n * which its length is 1, which not a prime number.\n * If the length of the intersection is a prime number, return \"YES\",\n * otherwise, return \"NO\".\n * If the two intervals don't intersect, return \"NO\".\n\n\n * [input/output] samples:\n * intersection((1, 2), (2, 3)) ==> \"NO\"\n * intersection((-1, 1), (0, 4)) ==> \"NO\"\n * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n *\n */\nfunction intersection(interval1, interval2) {\n    \n    var x = Math.max(interval1[0], interval2[0]);\n    var y = Math.min(interval1[1], interval2[1]);\n\n    if (x > y) {\n        return 'NO';\n    } else {\n        \n        var isPrime = function(num){\n            for(var i=2, sqrt=Math.sqrt(num); i<=sqrt; i++){\n                if(num%i === 0){\n                    return false;\n                }\n            }\n            \n            return num > 1;\n        };\n\n        console.log(y - x);\n        \n        return isPrime(y - x) ? 'YES' : 'NO';\n    }\n}"}
{"task_id": "javascript/57", "language": "javascript", "completion": "/**\n * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n * the last couple centuries. However, what people don't know is Tribonacci sequence.\n * Tribonacci sequence is defined by the recurrence:\n * tri(1) = 3\n * tri(n) = 1 + n / 2, if n is even.\n * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n * For example:\n * tri(2) = 1 + (2 / 2) = 2\n * tri(4) = 3\n * tri(3) = tri(2) + tri(1) + tri(4)\n *        = 2 + 3 + 3 = 8 \n * You are given a non-negative integer number n, you have to a return a list of the \n * first n + 1 numbers of the Tribonacci sequence.\n * Examples:\n * tri(3) = [1, 3, 2, 8]\n *\n */\nfunction tri(n) {\n    const result = [1];\n\n    if (n < 1)\n        return result;\n    \n    let current = 3;\n    for (let i=0;i<n;i++){\n        \n        if (result.length % 2 === 0) {\n            result.push(current);\n            current = 1 + result[result.length-1]/2;\n\n        } else {\n            const tmp = result[result.length - 1];\n            result.push(tmp+current);\n            current = tmp;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/58", "language": "javascript", "completion": "/**\n * Given a positive integer n, return the product of the odd digits.\n * Return 0 if all digits are even.\n * For example:\n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n *\n */\nfunction digits(n) {\n  var result = 1;\n\n  while (n > 0) {\n    if ((n % 10) % 2 !== 0) {\n      result *= n % 10;\n    }\n    n = Math.floor(n / 10);\n  }\n\n  return result === 1 ? 0 : result;\n}"}
{"task_id": "javascript/59", "language": "javascript", "completion": "/**\n * * Create a function that takes a string as input which contains only square brackets.\n * The function should return True if and only if there is a valid subsequence of brackets \n * where at least one bracket in the subsequence is nested.\n\n * is_nested('[[]]')\ufffd\ufffd True\n * is_nested('[]]]]]]][[[[[]')\ufffd\ufffd False\n * is_nested('[][]')\ufffd\ufffd False\n * is_nested('[]')\ufffd\ufffd False\n * is_nested('[[][]]')\ufffd\ufffd True\n * is_nested('[[]][[['\ufffd\ufffd True\n *\n */\nfunction isNested(string) {\n  const openBrackets = '[';\n  const closeBracket = ']';\n\n  let stack = [];\n\n  for (let i=0; i < string.length; i++) {\n    if (openBrackets === string[i]) {\n      stack.push(openBrackets);\n    } else {\n      if (stack.length > 0 && openBrackets === stack[stack.length-1] ) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return stack.length > 0 ? true : false;\n}"}
{"task_id": "javascript/60", "language": "javascript", "completion": "/**\n * You are given a list of numbers.\n * You need to return the sum of squared numbers in the given list,\n * round each element in the list to the upper int(Ceiling) first.\n * Examples:\n * For lst = [1,2,3] the output should be 14\n * For lst = [1,4,9] the output should be 98\n * For lst = [1,3,5,7] the output should be 84\n * For lst = [1.4,4.2,0] the output should be 29\n * For lst = [-2.4,1,1] the output should be 6\n *\n\n *\n */\nfunction sumSquares(lst) {\n    let result = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >= 0) {\n            result += Math.ceil(lst[i]) ** 2;\n        } else {\n            result += Math.floor(lst[i]) ** 2;\n        }\n    }\n\n    return result;\n}"}
{"task_id": "javascript/61", "language": "javascript", "completion": "/**\n * * Create a function that returns True if the last character\n * of a given string is an alphabetical character and is not\n * a part of a word, and False otherwise.\n * Note: \"word\" is a group of characters separated by space.\n\n * Examples:\n * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n * check_if_last_char_is_a_letter(\"\") \u279e False \n *\n */\nfunction checkIfLastCharIsALetter(txt) {\n  //split the string into an array and reverse it\n  const newArr = txt.split(' ').reverse();\n\n  //check if the first item in the array contains any alphabetical character\n  return /[a-zA-Z]/.test(newArr[0]);\n}"}
{"task_id": "javascript/62", "language": "javascript", "completion": "/**\n * Create a function which returns the largest index of an element which\n * is not greater than or equal to the element immediately preceding it. If\n * no such element exists then return -1. The given array will not contain\n * duplicate values.\n\n * Examples:\n * can_arrange([1,2,4,3,5]) = 3\n * can_arrange([1,2,3]) = -1\n *\n */\nfunction canArrange(arr) {\n  var i;\n\n  for (i=1; i<arr.length; i++) {\n    if (arr[i-1] < arr[i]) continue;\n    else return i-1;\n  }\n\n  return -1;\n}"}
{"task_id": "javascript/63", "language": "javascript", "completion": "/**\n * * Create a function that returns a tuple (a, b), where 'a' is\n * the largest of negative integers, and 'b' is the smallest\n * of positive integers in a list.\n * If there is no negative or positive integers, return them as None.\n\n * Examples:\n * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n * largest_smallest_integers([]) == (None, None)\n * largest_smallest_integers([0]) == (None, None)\n *\n */\nfunction largestSmallestIntegers(lst) {\n    let max = -Infinity;\n    let min = Infinity;\n    for (const num of lst) {\n        if (num > 0 && num < min) {\n            min = num;\n        } else if (num < 0 && num > max) {\n            max = num;\n        }\n    }\n    return [max === -Infinity ? null : max, min === Infinity ? null : min];\n}"}
{"task_id": "javascript/64", "language": "javascript", "completion": "/**\n * The Brazilian factorial is defined as:\n * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n * where n > 0\n\n * For example:\n * >>> special_factorial(4)\n * 288\n\n * The function will receive an integer as input and should return the special\n * factorial of this integer.\n *\n */\nfunction specialFactorial(n) {\n  var result = 1;\n\n  if (n > 0) {\n    for (var i = n; i > 0; i--) {\n      result *= i;\n    }\n\n    return result;\n  } else {\n    throw new Error('Input must be greater than zero');\n  }\n}"}
{"task_id": "javascript/65", "language": "javascript", "completion": "/**\n * * You are given a string representing a sentence,\n * the sentence contains some words separated by a space,\n * and you have to return a string that contains the words from the original sentence,\n * whose lengths are prime numbers,\n * the order of the words in the new string should be the same as the original one.\n\n * Example 1:\n *     Input: sentence = \"This is a test\"\n *     Output: \"is\"\n\n * Example 2:\n *     Input: sentence = \"lets go for swimming\"\n *     Output: \"go for\"\n\n * Constraints:\n *     * 1 <= len(sentence) <= 100\n *     * sentence contains only letters\n *\n */\nfunction wordsInSentence(sentence) {\n    let words = sentence.split(' ');\n\n    return words\n        .filter((word) => isPrime(word.length))\n        .join(' ');\n}\n\n// Is prime?\nfunction isPrime(num) {\n    if (num < 2) return false;\n    if (num === 2) return true;\n\n    for (let i = 2, sqrt = Math.sqrt(num); i <= sqrt; i++)\n        if (num % i === 0)\n            return false;\n\n    return true;\n}"}
{"task_id": "javascript/66", "language": "javascript", "completion": "/**\n * Your task is to implement a function that will simplify the expression\n * x * n. The function returns True if x * n evaluates to a whole number and False\n * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n * simplify(\"1/5\", \"5/1\") = True\n * simplify(\"1/6\", \"2/1\") = False\n * simplify(\"7/10\", \"10/2\") = False\n *\n */\nfunction simplify(x, n) {\n    let [numX, denX] = x.split(\"/\");\n    let [numN, denN] = n.split(\"/\");\n\n    return numX * denN === numN * denX;\n}"}
{"task_id": "javascript/67", "language": "javascript", "completion": "/**\n * * Write a function which sorts the given list of integers\n * in ascending order according to the sum of their digits.\n * Note: if there are several items with similar sum of their digits,\n * order them based on their index in original list.\n\n * For example:\n * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n * >>> order_by_points([]) == []\n */\nfunction orderByPoints(nums) {\n  return nums.sort((a, b) => {\n    const sumA = a\n      .toString()\n      .split(\"\")\n      .reduce((acc, el) => acc + Number(el), 0);\n\n    const sumB = b\n      .toString()\n      .split(\"\")\n      .reduce((acc, el) => acc + Number(el), 0);\n\n    if (sumA < sumB) return -1;\n    if (sumA > sumB) return 1;\n    return a - b;\n  });\n}"}
{"task_id": "javascript/68", "language": "javascript", "completion": "/**\n * Write a function that takes an array of numbers as input and returns \n * the number of elements in the array that are greater than 10 and both \n * first and last digits of a number are odd (1, 3, 5, 7, 9).\n * For example:\n * specialFilter([15, -73, 14, -15]) => 1 \n * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n */\nfunction firstAndLastDigitOdd(num) {\n  var firstDigit = Math.floor(num / 10);\n  return (firstDigit % 2 != 0 && num % 2 != 0);\n}\n\nfunction specialFilter(nums) {\n  var count = 0;\n\n  for (var i=0; i<nums.length; i++) {\n    if (nums[i] > 10 && firstAndLastDigitOdd(Math.abs(nums[i]))) {\n      count++;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "javascript/69", "language": "javascript", "completion": "/**\n * * You are given a positive integer n. You have to create an integer array a of length n.\n *     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n * and a[i] + a[j] + a[k] is a multiple of 3.\n\n * Example :\n *     Input: n = 5\n *     Output: 1\n *     Explanation: \n *     a = [1, 3, 7, 13, 21]\n *     The only valid triple is (1, 7, 13).\n */\n\n function getMaxTriples(n) {\n  const a = new Array(n).fill(0);\n\n  for (let i = 0; i < n; ++i)\n   a[i] = i * i - i + 1;\n\n  let count = 0;\n\n  for (let i = 0; i < n; ++i)\n   if (a[i] % 3 === 0 &&\n    a.slice(i+1).some((v, j) => {\n      const k = a.indexOf((a[i]/3) - v);\n\n      return k > i + 1;\n  }));\n}"}
{"task_id": "javascript/70", "language": "javascript", "completion": "/**\n * * There are eight planets in our solar system: the closerst to the Sun \n * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n * Uranus, Neptune.\n * Write a function that takes two planet names as strings planet1 and planet2. \n * The function should return a tuple containing all planets whose orbits are \n * located between the orbit of planet1 and the orbit of planet2, sorted by \n * the proximity to the sun. \n * The function should return an empty tuple if planet1 or planet2\n * are not correct planet names. \n * Examples\n * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n *\n */\nfunction bf(planet1, planet2) {\n    var solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    if (solarSystem.indexOf(planet1) == -1 || solarSystem.indexOf(planet2) == -1){\n        return [];\n    } else {\n\n        var planet1Index = solarSystem.indexOf(planet1);\n        var planet2Index = solarSystem.indexOf(planet2);\n        var tuple = []\n\n        for (var i=planet1Index+1; i<planet2Index; i++) {\n            tuple.push(solarSystem[i]);\n        }\n        return tuple;\n    }\n}"}
{"task_id": "javascript/71", "language": "javascript", "completion": "/**\n * A simple program which should return the value of x if n is \n * a prime number and should return the value of y otherwise.\n\n * Examples:\n * for x_or_y(7, 34, 12) == 34\n * for x_or_y(15, 8, 5) == 5\n */\nfunction isPrime(num){\n    if (num < 2){\n        return false;\n    }\n    \n    var sqrtNum = Math.sqrt(num);\n\n    for (var i=2;i<=sqrtNum+1;i++){\n        if (num % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction xOrY(n, x, y) {\n   return isPrime(n)? x : y;\n}"}
{"task_id": "javascript/72", "language": "javascript", "completion": "/**\n * * Given a list of numbers, return the sum of squares of the numbers\n * in the list that are odd. Ignore numbers that are negative or not integers.\n * \n * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n * double_the_difference([-1, -2, 0]) == 0\n * double_the_difference([9, -2]) == 81\n * double_the_difference([0]) == 0  \n * \n * If the input list is empty, return 0.\n *\n */\nfunction doubleTheDifference(lst) {\n  const numbers = lst.filter(item => typeof item === \"number\" && !Number.isNaN(item))\n  const oddNumbers = numbers.filter(item => item % 2 !== 0)\n  return oddNumbers.map(item => Math.pow(item, 2)).reduce((sum, number) => sum + number, 0);\n}"}
{"task_id": "javascript/73", "language": "javascript", "completion": "/**\n * You will be given the name of a class (a string) and a list of extensions.\n * The extensions are to be used to load additional classes to the class. The\n * strength of the extension is as follows: Let CAP be the number of the uppercase\n * letters in the extension's name, and let SM be the number of lowercase letters \n * in the extension's name, the strength is given by the fraction CAP - SM. \n * You should find the strongest extension and return a string in this \n * format: ClassName.StrongestExtensionName.\n * If there are two or more extensions with the same strength, you should\n * choose the one that comes first in the list.\n * For example, if you are given \"Slices\" as the class and a list of the\n * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n * (its strength is -1).\n * Example:\n * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n *\n */\nfunction strongestExtension(classname, extensions) {\n    let stregnth = 0;\n    let maxStrength = -1000; \n    let strongestExtensionName = '';\n    \n    for (let i = 0; i < extensions.length; i++) {\n        let upperCaseCounter = 0; \n        let lowerCaseCounter = 0; \n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                upperCaseCounter++; \n            } else {\n                lowerCaseCounter++; \n            }\n        }\n        \n        let strength = upperCaseCounter - lowerCaseCounter; \n        if (strength >= maxStrength) {\n            maxStrength = strength; \n            strongestExtensionName = extensions[i]; \n        }\n    }\n    return `${classname}.${strongestExtensionName}`; \n}"}
{"task_id": "javascript/74", "language": "javascript", "completion": "/**\n * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n * cycpattern_check(\"abcd\",\"abd\") => False\n * cycpattern_check(\"hello\",\"ell\") => True\n * cycpattern_check(\"whassup\",\"psus\") => False\n * cycpattern_check(\"abab\",\"baa\") => True\n * cycpattern_check(\"efef\",\"eeff\") => False\n * cycpattern_check(\"himenss\",\"simen\") => True\n\n *\n */\nfunction cycpatternCheck(a, b) {\n    // Your code here\n    let aCopy = a;\n\n    for (let i = 0; i < b.length; i++) {\n        if (aCopy.indexOf(b) !== -1) {\n            return true;\n        }\n\n        aCopy = aCopy + aCopy[0];\n        aCopy = aCopy.slice(1);\n    }\n\n    return false;\n}\n\n\n/**\n *  Test cases\n */\nconsole.log(cycpatternCheck(\"abcd\",\"abd\")); // False\nconsole.log(cycpatternCheck(\"hello\",\"ell\")); // True\nconsole.log(cycpatternCheck(\"whassup\",\"psus\")); // False\nconsole.log(cycpatternCheck(\"abab\",\"baa\")); // True\nconsole.log(cycpatternCheck(\"efef\",\"eeff\")); // False\nconsole.log(cycpatternCheck(\"himenss\",\"simen\")); // True"}
{"task_id": "javascript/75", "language": "javascript", "completion": "/**\n * * Given a positive integer, obtain its roman numeral equivalent as a string,\n * and return it in lowercase.\n * Restrictions: 1 <= num <= 3999\n\n * Examples:\n * >>> int_to_mini_roman(19) == 'xix'\n * >>> int_to_mini_roman(152) == 'clii'\n * >>> int_to_mini_roman(426) == 'cdxxvi'\n *\n */\nfunction intToMiniRoman(number) {\n  var numeralMap = [\n    ['m', 1000],\n    ['cm', 900],\n    ['d', 500],\n    ['cd', 400],\n    ['c', 100],\n    ['xc', 90],\n    ['l', 50],\n    ['xl', 40],\n    ['x', 10],\n    ['ix', 9],\n    ['v', 5],\n    ['iv', 4],\n    ['i', 1]\n  ]\n\n  var result = ''\n\n  for (var i = 0; i < numeralMap.length; i++) {\n    while (number >= numeralMap[i][1]) {\n      number -= numeralMap[i][1]\n      result += numeralMap[i][0]\n    }\n  }\n\n  return result\n}"}
{"task_id": "javascript/76", "language": "javascript", "completion": "/**\n * * Given the lengths of the three sides of a triangle. Return True if the three\n * sides form a right-angled triangle, False otherwise.\n * A right-angled triangle is a triangle in which one angle is right angle or \n * 90 degree.\n * Example:\n * right_angle_triangle(3, 4, 5) == True\n * right_angle_triangle(1, 2, 3) == False\n *\n */\nfunction rightAngleTriangle(a, b, c) {\n    // Implement your code here\n    \n    if (a > b && a < c) {\n        var side1 = a*a;\n        var side2 = b*b;\n        \n        return (side1 + side2 === Math.pow(c, 2));\n    }\n    \n    else if (b > a && b < c){\n        var side1 = b*b;\n        var side2 = a*a;\n        \n        return (side1 + side2 === Math.pow(c, 2));\n    }\n    \n    else {\n        var side1 = c*c;\n        var side2 = a*a;\n        \n        return (side1 + side2 === Math.pow(b, 2));\n    }\n    \n}"}
{"task_id": "javascript/77", "language": "javascript", "completion": "/**\n * You are given a string s.\n * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n * otherwise keep it as it is.\n * If the string contains no letters, reverse the string.\n * The function should return the resulted string.\n * Examples\n * solve(\"1234\") = \"4321\"\n * solve(\"ab\") = \"AB\"\n * solve(\"#a@C\") = \"#A@c\"\n *\n */\nfunction solve(s) {\n  let isThereLetter = false;\n  for (let i = 0; i < s.length; i++) {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n      isThereLetter = true;\n      break;\n    }\n  }\n  let resultString = '';\n\n  for (let i = 0; i < s.length; i++) {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n      if (s[i] === String.fromCharCode(s[i].charCodeAt(0) - 32)) {\n        resultString += String.fromCharCode(s[i].charCodeAt(0) + 32);\n      } else {\n        resultString += String.fromCharCode(s[i].charCodeAt(0) - 32);\n      }\n    } else {\n      if (isThereLetter === false) {\n        for (let j = s.length - 1; j >= 0; j--) {\n          resultString += s[j];\n        }\n      } else {\n        resultString += s[i];\n      }\n    }\n  }\n\n  return resultString;\n}"}
{"task_id": "javascript/78", "language": "javascript", "completion": "/**\n * * Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return \"none\".\n\n * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n *\n */\nfunction stringToMd5(text) {\n  // Write your code here...\n}"}
{"task_id": "javascript/79", "language": "javascript", "completion": "/**\n * * Given two positive integers a and b, return the even digits between a\n * and b, in ascending order.\n\n * For example:\n * generate_integers(2, 8) => [2, 4, 6, 8]\n * generate_integers(8, 2) => [2, 4, 6, 8]\n * generate_integers(10, 14) => []\n *\n */\nfunction generateIntegers(a, b) {\n  if (a > b) {\n    let temp = a;\n    a = b;\n    b = temp;\n  }\n\n  let numbers = [];\n  for (let i = a; i <= b; i++) {\n    // Check the last digit of integer.\n    let lastDigit = i % 10;\n\n    if (lastDigit === 0 || lastDigit === 2 || lastDigit === 4 ||\n        lastDigit === 6 || lastDigit === 8) {\n      numbers.push(i);\n    }\n  }\n\n  return numbers;\n}"}

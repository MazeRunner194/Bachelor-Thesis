{"task_id": "python/0", "language": "python", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "python/1", "language": "python", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"task_id": "python/2", "language": "python", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    if len(a) != len(b):\n        raise ValueError(\"Length of input strings must be equal\")\n\n    output = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            output += \"0\"\n        else:\n            output += \"1\"\n\n    return output"}
{"task_id": "python/3", "language": "python", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_length = 0\n    max_string = \"\"\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            max_string = s\n\n    return max_string"}
{"task_id": "python/4", "language": "python", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Base case\n    if b == 0:\n        return abs(a)\n\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "python/5", "language": "python", "completion": "from typing import List\n\n# Create a dictionary to store mapping of numberals to their actual values\nnumber_dict = {'zero': 0,\n                 'one': 1,\n                 'two': 2,\n                 'three': 3,\n                 'four': 4,\n                 'five': 5,\n                 'six': 6,\n                 'seven': 7,\n                 'eight': 8,\n                 'nine': 9}\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Split the input string into a list of numberals\n    numberals = numbers.split()\n\n    # Convert each numberal to its actual value and store in a list\n    values = [number_dict[numeral] for numeral in numberals]\n\n    # Sort the list of values\n    sorted_values = sorted(values)\n\n    # Convert the sorted list of values back to numberals\n    sorted_numberals = [list(number_dict.keys())[list(number_dict.values()).index(value)] for value in\n                            sorted_values]\n\n    # Join the sorted numberals into a string and return it\n    return ' '.join(sorted_numberals)"}
{"task_id": "python/6", "language": "python", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(number - min_num)/(max_num - min_num) for number in numbers]"}
{"task_id": "python/7", "language": "python", "completion": "import string\n\ndef flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n\n    flipped = ''\n\n    for char in string:\n        if char.isupper():\n            flipped += char.lower()\n        elif char.islower():\n            flipped += char.upper()\n        else:\n            flipped += char\n    return flipped"}
{"task_id": "python/8", "language": "python", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))"}
{"task_id": "python/9", "language": "python", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(3, sqrt_n, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "python/10", "language": "python", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n    s = set()\n    result = []\n\n    for n in l:\n        if n not in s:\n            s.add(n)\n            result.append(n)\n\n    return sorted(result)"}
{"task_id": "python/11", "language": "python", "completion": "from sympy import isprime, fibonacci\n\n\ndef prime_fib(n):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    result = 0\n    count = 0\n    while True:\n        result = fibonacci(count)\n        if isprime(result):\n            n -= 1\n            if not n:\n                break\n        count += 1\n    return result"}
{"task_id": "python/12", "language": "python", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    l.sort()\n    for i in range(len(l) - 2):\n        x = l[i]\n        y = l[i + 1]\n        z = l[i + 2]\n\n        if x + y + z == 0:\n            return True\n\n    return False"}
{"task_id": "python/13", "language": "python", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    seen = set()\n    for item in l:\n        if -item in seen:\n            return True\n        else:\n            seen.add(item)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "python/14", "language": "python", "completion": "def fib4(n):\n    if n == 0 or n == 1:\n        return 0\n\n    prev3 = [0, 0, 2]\n    for i in range(2, n + 1):\n        next_val = sum(prev3)\n        prev3.insert(0, next_val - prev3[-1])\n        prev3.pop()\n\n    return next_val\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"}
{"task_id": "python/15", "language": "python", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[int((len(l)/2))-1] + l[int((len(l)/2))])/2\n    else:\n        return l[int((len(l)-1)/2)]"}
{"task_id": "python/16", "language": "python", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    def reverse(text: str) -> str:\n        reversed = ''\n        for char in text[::-1]:\n            reversed += char\n\n        return reversed\n\n    return text == reverse(text)"}
{"task_id": "python/17", "language": "python", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join([x for x in text if x not in 'aeiouAEIOU'])"}
{"task_id": "python/18", "language": "python", "completion": "def below_threshold(l: list, t: int):\n    for x in l:\n        if x >= t:\n            return False\n    return True"}
{"task_id": "python/19", "language": "python", "completion": "from functools import reduce\n\n\ndef add(x: int, y: int):\n    return reduce(lambda z, n: z + n, [x, y])"}
{"task_id": "python/20", "language": "python", "completion": "import collections\ndef same_chars(s0, s1):\n    return collections.Counter(s0) == collections.Counter(s1)"}
{"task_id": "python/21", "language": "python", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    def loop(i, a, b):\n        if i == 0:\n            return a\n        else:\n            return loop(i - 1, b, a + b)\n\n    return loop(n, 0, 1)"}
{"task_id": "python/22", "language": "python", "completion": "def common(l1, l2):\n    s = set(l1) & set(l2)\n    return sorted(list(s))"}
{"task_id": "python/23", "language": "python", "completion": "def largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n\n    return n"}
{"task_id": "python/24", "language": "python", "completion": "def sum_to_n(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "python/25", "language": "python", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    derivative = []\n    for i in range(len(xs)):\n        derivative.append(xs[i + 1] * (i + 1))\n    return derivative"}
{"task_id": "python/26", "language": "python", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"The index must be non-negative.\")\n\n    # Cache results\n    cache = [None] * (n+1)\n    cache[0] = 0\n    cache[1] = 0\n    cache[2] = 1\n\n    def fibfib_impl(idx):\n        if cache[idx] is None:\n            cache[idx] = fibfib_impl(idx - 1) + fibfib_impl(idx - 2) + fibfib_impl(idx - 3)\n        return cache[idx]\n\n    # Return result\n    return fibfib_impl(n)"}
{"task_id": "python/27", "language": "python", "completion": "\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n\"\"\""}
{"task_id": "python/28", "language": "python", "completion": "from collections import Counter\ndef search(lst):\n    count_list = [val for val in lst if val > 0]\n    counter = Counter(count_list)\n\n    for i in range(len(lst)-1,-1,-1):\n        if counter[lst[i]] >= lst[i]:\n            return lst[i]\n    \n    return -1"}
{"task_id": "python/29", "language": "python", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s-a) * (s-b) * (s-c)) ** .5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "python/30", "language": "python", "completion": "def will_it_fly(q,w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "python/31", "language": "python", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # check if number is less than 2\n    if a < 2:\n        return False\n\n    # check if number is even\n    if a % 2 == 0:\n        return False\n\n    # define variable to store the value of sqrt(a)\n    sqrt_a = int(a ** 0.5) + 1\n\n    # loop through all numbers up to but not including sqrt(a)\n    for i in range(3, sqrt_a, 2):\n\n        # check if number is a multiple of 2\n        if a % i == 0:\n            return False\n\n    # check if number is equal to the multiplication of 3 prime numbers\n    for i in range(3, a, 2):\n        for j in range(i+1, a, 2):\n            for k in range(j+1, a, 2):\n                if i * j * k == a:\n                    return True\n\n    # return false if number is not equal to the multiplication of 3 prime numbers\n    return False"}
{"task_id": "python/32", "language": "python", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # remove the '0b' at the beginning of binary string\n    return f'db{binary}db'  # add 'db' at the beginning and end of binary string"}
{"task_id": "python/33", "language": "python", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] != s[i+1] and s[i+1] != s[i+2]:\n            continue\n        else:\n            return False\n\n    return True"}
{"task_id": "python/34", "language": "python", "completion": "def numerical_letter_grade(grades):\n    gpa = []\n    for i in grades:\n        if 4.0 == round(i,1):\n            gpa.append('A+')\n        elif 3.7 < i <= 4.0:\n            gpa.append('A') \n        elif 3.3 < i <= 3.7:\n            gpa.append('A-')\n        elif 3.0 < i <= 3.3:\n            gpa.append('B+')\n        elif 2.7 < i <= 3.0:\n            gpa.append('B') \n        elif 2.3 < i <= 2.7:\n            gpa.append('B-')\n        elif 2.0 < i <= 2.3:\n            gpa.append('C+')\n        elif 1.7 < i <= 2.0:\n            gpa.append('C') \n        elif 1.3 < i <= 1.7:\n            gpa.append('C-')\n        elif 1.0 < i <= 1.3:\n            gpa.append('D+') \n        elif 0.7 < i <= 1.0:\n            gpa.append('D') \n        elif 0.0 < i <= 0.7:\n            gpa.append('D-')\n        else:\n            gpa.append('E')\n    return gpa"}
{"task_id": "python/35", "language": "python", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # If we're looking for a prime number, then it must be greater than 1.\n    if len(string) <= 1:\n        return False\n\n    # A number is only divisible by 1 and itself, so check each number up to the square root of string length\n    for i in range(2, int(len(string)**0.5)+1):\n        # If the number is a factor of our string length, then it's not prime. Return False immediately.\n        if len(string) % i == 0:\n            return False\n\n    # If we made it this far without finding any factors other than one and itself, then the number is prime!\n    return True"}
{"task_id": "python/36", "language": "python", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"11100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if not isinstance(N, int):\n        return False\n\n    sum_digits = bin(int(str(N).replace(\", \", \"\"))).count('1') - 2\n\n    return str(sum_digits)"}
{"task_id": "python/37", "language": "python", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    # Create a list of tuples with row index and column index\n    coordinates = [(row_idx, col_idx)\n                     for row_idx, lst in enumerate(lst)\n                     for col_idx, item in enumerate(lst) if item == x]\n    \n    # Sort the coordinates by rows first, then columns\n    coordinates.sort()\n    return coordinates"}
{"task_id": "python/38", "language": "python", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n    return lst[1]"}
{"task_id": "python/39", "language": "python", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    for char in S:\n        if char == \".\" or char == \"?\" or char == \"!\":\n            if S[S.find(char):].startswith(' I'):\n                boredoms += 1\n    return boredoms"}
{"task_id": "python/40", "language": "python", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    # def is_prime(num):\n    #     if num == 0 or num == 1:\n    #         return False\n    #     for i in range(2, int(num ** 0.5) + 1):\n    #         if num % i == 0:\n    #             return False\n    #     else:\n    #         return True\n\n    max_prime = None\n    for item in lst:\n        if is_prime(item):\n            if max_prime is None or item > max_prime:\n                max_prime = item\n\n    digit_sum = 0\n    while max_prime != 0:\n        digit_sum += (max_prime % 10)\n        max_prime //= 10\n\n    return digit_sum"}
{"task_id": "python/41", "language": "python", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n\n    all_keys_lower = all(key.islower() for key in dict.keys())\n    all_keys_upper = all(key.isupper() for key in dict.keys())\n\n    return all_keys_lower or all_keys_upper"}
{"task_id": "python/42", "language": "python", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    num = float(value)\n    int_num = round(num)\n    if int_num == num:\n        return int_num\n    elif int_num > num:\n        return int_num - 1\n    else:\n        return int_num + 1"}
{"task_id": "python/43", "language": "python", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Invalid input\")\n\n    levels = []\n\n    while n > 0:\n        levels.append(n)\n        n += (2 - (n % 2))\n\n    return levels"}
{"task_id": "python/44", "language": "python", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.replace(\",\", \" \").split()"}
{"task_id": "python/45", "language": "python", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 == 0:\n        bigger = x\n    else:\n        bigger = x + 1\n\n    while bigger <= y:\n        if bigger % 2 == 0:\n            return bigger\n        else:\n            bigger += 1\n\n    return -1"}
{"task_id": "python/46", "language": "python", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    average = int(round((n + m) / 2))\n    binary = bin(average)[2:]\n\n    return '0b' + binary"}
{"task_id": "python/47", "language": "python", "completion": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_of_numbers = sum(range(1, i + 1))\n            result.append(sum_of_numbers)\n    return result"}
{"task_id": "python/48", "language": "python", "completion": "def is_palindrome(num):\n    temp = num\n    rev = 0\n\n    while (temp > 0):\n        dig = temp % 10\n        rev = (rev * 10) + dig\n        temp //= 10\n    return num == rev\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    count = [0] * 2\n    for i in range(1, n):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count[0] += 1\n            else:\n                count[1] += 1\n\n    return tuple(count)"}
{"task_id": "python/49", "language": "python", "completion": "def move_one_ball(arr):\n    if arr == [] or len(arr) == 0:\n        return True\n\n    n = len(arr)\n    i = 1\n\n    while i < n and arr[i-1] <= arr[i]:\n        i += 1\n\n    if i >= n:\n        return True\n\n    j = i + 1\n    while j < n and arr[j-1] <= arr[j]:\n        j += 1\n\n    if j >= n:\n        return True\n\n    if arr[-1] <= arr[0]:\n        return True\n\n    return False"}
{"task_id": "python/50", "language": "python", "completion": "def exchange(lst1, lst2):\n    evens = list()\n\n    for item in lst1:\n        if item % 2 == 0:\n            evens.append(item)\n\n    for i in range(len(evens)):\n        if evens[i] not in lst2:\n            return \"NO\"\n\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    print(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(exchange([1, 2, 3, 4], [1, 5, 3, 4]))"}
{"task_id": "python/51", "language": "python", "completion": "import re\nfrom collections import Counter\ndef reverse_delete(s,c):\n    # Implement your solution here\n    \n    for ch in set(c):\n        s = re.sub(ch,'',s)\n    # print(s)\n    return (s,(Counter(s)%2).get(0,True))"}
{"task_id": "python/52", "language": "python", "completion": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\""}
{"task_id": "python/53", "language": "python", "completion": "import re\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    words = re.findall(r'\\b\\w+\\b', s) # Find all words in the string\n    result = [] # Create an empty list to store the selected words\n    for word in words:\n        if len([c for c in word if c not in 'aeiouAEIOU']) == n:\n            result.append(word)\n    return result"}
{"task_id": "python/54", "language": "python", "completion": "import heapq\n\nclass Solution(object):\n    def maximum(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if k == 0 or len(arr) == 0:\n            return []\n        \n        result = []\n        for i in range(k):\n            heapq.heappush(result, arr[i])\n            \n        for i in range(k, len(arr)):\n            if arr[i] > result[0]:\n                heapq.heapreplace(result, arr[i])\n                \n        return sorted(result)"}
{"task_id": "python/55", "language": "python", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    def has_two_digits(x): return x // 10 != 0 or x % 10 != 0\n\n    total = sum(map(lambda x: x if not has_two_digits(x) else 0, arr[:k]))\n    print(total)"}
{"task_id": "python/56", "language": "python", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return False\n    for i in range(start, end + 1):\n        if not is_prime(i):\n            return False\n\n    return True\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "python/57", "language": "python", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    # Write your code here\n    \n    if n == 0:\n        return []\n    \n    elif n == 1:\n        return [1]\n        \n    elif n == 2:\n        return [1, 3]\n    \n    else: \n        a, b = [1, 3], [1, 3]\n    \n        for _ in range(n - 2):\n            c = []\n            for i in range(len(a)):\n                if i != len(a) - 1:\n                    c.append(b[i+1])\n                else:\n                    c.append(a[0] + b[0] + b[-1])\n                    \n            a, b = b, c\n    \n        return [1] + a"}
{"task_id": "python/58", "language": "python", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "python/59", "language": "python", "completion": "def is_nested(string):\n\n    stack = []\n    for i in string:\n        if i == \"[\":\n            stack.append(i)\n        elif i == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) != 0"}
{"task_id": "python/60", "language": "python", "completion": "def sum_squares(lst):\n    return round(sum([num ** 2 for num in [int(x) + 1 if x - int(x) != 0 else int(x) for x in lst]]))"}
{"task_id": "python/61", "language": "python", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split(' ')\n    if len(words) > 0:\n        last_word = words[-1]\n        return last_word[-1].isalpha() and not last_word[-2].isalpha()\n    else:\n        return False"}
{"task_id": "python/62", "language": "python", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # if the length of arr is less than 2 then there can't be any element greater\n    # or equal to its predecessor so return -1\n    if len(arr) < 2:\n        return -1\n\n    # set a variable to keep track of the largest index of an element which\n    # is not greater than or equal to the element immediately preceding it\n    largest_index = -1\n\n    for index in range(len(arr)):\n\n        # if the current element isn't greater than its predecessor then update\n        # the value of largest_index with the index of the current element\n        if arr[index] >= arr[index - 1]:\n            continue\n\n        # otherwise set the value of largest_index to be the index of the\n        # current element and break out of the for loop\n        else:\n            largest_index = index\n            break\n\n    return largest_index"}
{"task_id": "python/63", "language": "python", "completion": "def largest_smallest_integers(lst):\n    maxi = float(\"-inf\")\n    mini = float(\"inf\")\n    for n in lst:\n        if n < 0 and n > maxi:\n            maxi = n\n        elif n > 0 and n < mini:\n            mini = n\n\n    if maxi == float('-inf'):\n        return None, mini\n    if mini == float('inf'):\n        return maxi, None\n    else:\n        return maxi, mini"}
{"task_id": "python/64", "language": "python", "completion": "from math import factorial\n\ndef special_factorial(n):\n    if n < 1:\n        raise ValueError(\"The argument must be greater than zero\")\n\n    result = 1\n    for i in range(2, n + 1):\n        result *= factorial(i)\n\n    return factorial(n) * result"}
{"task_id": "python/65", "language": "python", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n    words = sentence.split(\" \")\n\n    return \" \".join([word for word in words if len(word) in prime_numbers])"}
{"task_id": "python/66", "language": "python", "completion": "def simplify(x, n):\n    x_numerator, x_denominator = map(int, x.split(\"/\"))\n    n_numerator, n_denominator = map(int, n.split(\"/\"))\n\n    result = (x_numerator * n_numerator) / (x_denominator * n_denominator)\n    return int(result) == result"}
{"task_id": "python/67", "language": "python", "completion": "def order_by_points(nums):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    def key(num):\n        return (sum_digits(num), nums.index(num))\n\n    return sorted(nums, key=key)"}
{"task_id": "python/68", "language": "python", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if (num > 10) and ((num % 10) % 2 != 0) and ((num // 10) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "python/69", "language": "python", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i+1, n + 1):\n            if ((i * i - i + 1) + (j * j - j + 1)) % 3 == 0:\n                for k in range(j+1, n + 1):\n                    if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0) and ((i*i-i+1) > (j*j-j+1)):\n                        count += 1\n    return count"}
{"task_id": "python/70", "language": "python", "completion": "def bf(planet1, planet2):\n    # create a list of planets in our solar system\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\",\n                 \"Uranus\", \"Neptune\"]\n\n    # check if the input is correct (if they are in our solar system)\n    if planet1 not in planets or planet2 not in planets:\n        return ()  # empty tuple if incorrect planet names\n\n    # find the index of the first and last planets\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    # if the second planet comes before the first one, swap their indexes\n    if idx2 < idx1:\n        idx1, idx2 = idx2, idx1\n\n    # create a list of all planets between planet1 and planet2 (inclusive)\n    planets_between = planets[idx1 + 1:idx2]\n\n    return tuple(planets_between)"}
{"task_id": "python/71", "language": "python", "completion": "import math\n\ndef is_prime(n):\n  # Use the square root method to determine if n is a prime number. \n  if n < 2:\n      return False\n  sqrt_n = int(math.sqrt(n)) + 1\n  for i in range(2, sqrt_n):\n      if n % i == 0:\n          return False\n  return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "python/72", "language": "python", "completion": "def double_the_difference(lst):\n    # square all numbers in a given list that are odd and positive\n    squared = [number ** 2 for number in lst if number > 0 and number % 2 == 1]\n    # calculate the sum of the squares\n    total = sum(squared)\n    # return the result\n    return total"}
{"task_id": "python/73", "language": "python", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    strength = []\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n        for i in extension:\n            if i.isupper():\n                CAP +=1\n            else:\n                SM +=1\n        strength.append((extension, round(CAP - SM,2)))\n    maximum = max(strength, key=lambda x:x[1])\n    \n    return class_name + \".\" + maximum[0]"}
{"task_id": "python/74", "language": "python", "completion": "import itertools\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    return any(b in a+a for a in itertools.tee(itertools.cycle(a),len(a)))"}
{"task_id": "python/75", "language": "python", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    values = [\n        1000, 900, 500, 400,\n        100,  90, 50,  40,\n        10,   9,  5,   4,\n        1,\n    ]\n    symbols = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n\n    num_string = ''\n\n    index = 0\n    while number > 0:\n\n        if number - values[index] >= 0:\n            number -= values[index]\n            num_string += symbols[index] * (number // values[index])\n            continue\n\n        index += 1\n\n    return num_string"}
{"task_id": "python/76", "language": "python", "completion": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "python/77", "language": "python", "completion": "def solve(s):\n    def reverse_case(letter):\n        return letter.swapcase() if letter.isalpha() else letter\n\n    return ''.join(map(reverse_case, s))"}
{"task_id": "python/78", "language": "python", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if len(text) > 0:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "python/79", "language": "python", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    even_digits = []\n    for number in range(a, b+1):\n        if is_even(number):\n            even_digits.append(number)\n    return sorted(even_digits)\n\n\ndef is_even(n):\n    return n % 2 == 0"}

{"task_id": "HumanEval_javascript/0", "language": "javascript", "completion": "/**\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n * False\n * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * True\n *\n */\nfunction hasCloseElements(numbers, threshold) {\n  var i, j;\n\n  for (i = 0; i < numbers.length - 1; i++) {\n    for (j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}"}
{"task_id": "HumanEval_javascript/1", "language": "javascript", "completion": "/**\n * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n * separate those group into separate strings and return the list of those.\n * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n * Ignore any spaces in the input string.\n * >>> separate_paren_groups('( ) (( )) (( )( ))')\n * ['()', '(())', '(()())']\n */\nfunction separateParenGroups(parenstring) {\n\n    // Remove all of the spaces\n    var cleanString = parenstring.replace(/\\s+/g, '');\n    // Keep track of our balance counter and result array\n    var balance = 0;\n    var results = [];\n    for (var i=0; i < cleanString.length; i++) {\n        if (cleanString[i] === '(') {\n            balance++;\n        } else {\n            balance--;\n        }\n        // If we are at 0, then the next group starts\n        if (balance === 0 && i !== cleanString.length -1 ) {\n            results.push(cleanString.slice(0,i+1));\n            cleanString = cleanString.slice(i+1);\n            i = -1; // reset the index for the loop to start over from the beginning of our string\n        }\n    }\n    return results;\n}"}
{"task_id": "HumanEval_javascript/2", "language": "javascript", "completion": "/**\n * Given a positive floating point number, it can be decomposed into\n * and integer part (largest integer smaller than given number) and decimals\n * (leftover part always smaller than 1).\n\n * Return the decimal part of the number.\n * >>> truncate_number(3.5)\n * 0.5\n *\n */\nfunction truncateNumber(number) {\n  return number % 1;\n}"}
{"task_id": "HumanEval_javascript/3", "language": "javascript", "completion": "/**\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n * at that point function should return True. Otherwise it should return False.\n * >>> below_zero([1, 2, 3])\n * False\n * >>> below_zero([1, 2, -4, 5])\n * True\n *\n */\nfunction belowZero(operations) {\n  let balance = 0;\n\n  for (let i = 0; i < operations.length; i++) {\n    if (balance + operations[i] < 0) {\n      return true;\n    }\n\n    balance += operations[i];\n  }\n\n  return false;\n}"}
{"task_id": "HumanEval_javascript/4", "language": "javascript", "completion": "/**\n * For a given list of input numbers, calculate Mean Absolute Deviation\n * around the mean of this dataset.\n * Mean Absolute Deviation is the average absolute difference between each\n * element and a centerpoint (mean in this case):\n * MAD = average | x - x_mean |\n * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n * 1.0\n *\n */\nfunction meanAbsoluteDeviation(numbers) {\n  var sum = numbers.reduce((a, b) => a + b);\n\n  var x_mean = sum / numbers.length;\n\n  return numbers.map(x => Math.abs(x - x_mean)).reduce((a, b) => a + b) / numbers.length;\n}"}
{"task_id": "HumanEval_javascript/5", "language": "javascript", "completion": "/**\n * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n * >>> intersperse([], 4)\n * []\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n *\n */\nfunction intersperse(numbers, delimeter) {\n    let result = [];\n    if (numbers.length > 0) {\n        for (let i=0; i<numbers.length - 1; i++) {\n            result.push(numbers[i]);\n            result.push(delimeter);\n        }\n        result.push(numbers[numbers.length-1]);\n    }\n    return result;\n}"}
{"task_id": "HumanEval_javascript/6", "language": "javascript", "completion": "/**\n * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n * For each of the group, output the deepest level of nesting of parentheses.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n *\n */\nfunction parseNestedParens(parenstring) {\n  let parenGroups = parenstring.split(' ');\n  //console.log(\"parenGroups\", parenGroups);\n\n  let maxNesting = [];\n\n  for (let i=0; i < parenGroups.length; i++) {\n    let maxDepth = 0;\n    let currentDepth = 0;\n\n    for (let j=0; j < parenGroups[i].length; j++) {\n      //console.log(\"j: \", j);\n\n      if (parenGroups[i][j] == '(') {\n        currentDepth += 1;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else {\n        currentDepth -= 1;\n      }\n    }\n\n    maxNesting.push(maxDepth);\n  }\n\n  console.log(\"MAX NESTING\", maxNesting);\n\n  return maxNesting;\n}"}
{"task_id": "HumanEval_javascript/7", "language": "javascript", "completion": "/**\n * Filter an input list of strings only for ones that contain given substring\n * >>> filter_by_substring([], 'a')\n * []\n * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n *\n */\nfunction filterBySubstring(strings, substring) {\n    if (!Array.isArray(strings)) {\n        throw new Error('First argument must be an array');\n    }\n\n    return strings.filter((str) => str.indexOf(substring) !== -1);\n}"}
{"task_id": "HumanEval_javascript/8", "language": "javascript", "completion": "/**\n * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n * Empty sum should be equal to 0 and empty product should be equal to 1.\n * >>> sum_product([])\n * (0, 1)\n * >>> sum_product([1, 2, 3, 4])\n * (10, 24)\n *\n */\nfunction sumProduct(numbers) {\n    let product = 1;\n    let sum = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > 0) {\n            product *= numbers[i];\n            sum += numbers[i];\n        } else {\n            sum += numbers[i];\n        }\n    }\n    return [sum, product]\n}"}
{"task_id": "HumanEval_javascript/9", "language": "javascript", "completion": "/**\n * From a given list of integers, generate a list of rolling maximum element found until given moment\n * in the sequence.\n * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n * [1, 2, 3, 3, 3, 4, 4]\n *\n */\nfunction rollingMax(numbers) {\n    var max = [],\n        len = numbers.length;\n\n    for (var i=0;i<len;i++) {\n\n        if (i === 0) {\n            max[i] = numbers[i];\n        } else if (numbers[i] > max[i-1]) {\n            max[i] = numbers[i];\n        } else {\n            max[i] = max[i-1];\n        }\n    }\n\n    return max;\n}"}
{"task_id": "HumanEval_javascript/10", "language": "javascript", "completion": "/**\n * Find the shortest palindrome that begins with a supplied string.\n * Algorithm idea is simple:\n * - Find the longest postfix of supplied string that is a palindrome.\n * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n * >>> make_palindrome('')\n * ''\n * >>> make_palindrome('cat')\n * 'catac'\n * >>> make_palindrome('cata')\n * 'catac'\n *\n */\nfunction makePalindrome(string) {\n    if (string.length <= 1) return string;\n    var palindromicPostfix = findPalindromicPostfix(string);\n    return string + reverse(string.slice(0, -palindromicPostfix.length));\n\n    /**\n     * Find the longest postfix of supplied string that is a palindrome.\n     */\n    function findPalindromicPostfix(str) {\n        var left = 0;\n        var right = str.length - 1;\n\n        while (left < right) {\n            if (str[left] != str[right]) break;\n\n            left++;\n            right--;\n        }\n        return str.slice(left);\n    }\n\n    /**\n     * Reverses a string.\n     */\n    function reverse(string) {\n        return string.split('').reverse().join('');\n    }\n}"}
{"task_id": "HumanEval_javascript/11", "language": "javascript", "completion": "/**\n * Input are two strings a and b consisting only of 1s and 0s.\n * Perform binary XOR on these inputs and return result also as a string.\n * >>> string_xor('010', '110')\n * '100'\n */\nfunction stringXor(a, b) {\n  var longerLength = Math.max(a.length, b.length);\n\n  var longerString = (a.length > b.length) ? a : b;\n  var shorterString = (a.length < b.length) ? a : b;\n\n  var result = '';\n\n  for (var i = 0; i < longerLength; i++) {\n    var xorResult = (longerString[i] || '0') ^ (shorterString[i] || '0');\n\n    result += xorResult;\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/12", "language": "javascript", "completion": "/**\n * Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return \"none\" in case the input list is empty.\n * >>> longest([])\n * 'none'\n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n */\nfunction longest(strings) {\n    if (!strings || !strings.length) return 'none';\n\n    let max = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        const current = strings[i];\n        if (current.length > max.length)\n            max = current;\n    }\n\n    return max;\n}"}
{"task_id": "HumanEval_javascript/13", "language": "javascript", "completion": "/**\n * Return a greatest common divisor of two integers a and b\n * >>> greatest_common_divisor(3, 5)\n * 1\n * >>> greatest_common_divisor(25, 15)\n * 5\n *\n */\nfunction greatestCommonDivisor(a, b) {\n  var result = a;\n\n  while (b != 0) {\n    remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/14", "language": "javascript", "completion": "/**\n * Return list of all prefixes from shortest to longest of the input string\n * >>> all_prefixes('abc')\n * ['a', 'ab', 'abc']\n *\n */\nfunction allPrefixes(string) {\n    let result = [];\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.slice(0,i+1));\n    }\n    \n    return result;\n}"}
{"task_id": "HumanEval_javascript/15", "language": "javascript", "completion": "/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * >>> string_sequence(0)\n * '0'\n * >>> string_sequence(5)\n * '0 1 2 3 4 5'\n */\nfunction stringSequence(n) {\n  return Array.from({length: n + 1}, (_, i) => i).join(' ');\n}"}
{"task_id": "HumanEval_javascript/16", "language": "javascript", "completion": "/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> count_distinct_characters('xyzXYZ')\n * 3\n * >>> count_distinct_characters('Jerry')\n * 4\n *\n */\nfunction countDistinctCharacters(string) {\n  let result = [];\n  for (let char of string) {\n    if (!result.includes(char)) {\n      result.push(char);\n    }\n  }\n\n  return result.length;\n}"}
{"task_id": "HumanEval_javascript/17", "language": "javascript", "completion": "/**\n * Input to this function is a string representing musical notes in a special ASCII format.\n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n * 'o' - whole note, lasts four beats\n * 'o|' - half note, lasts two beats\n * '.|' - quater note, lasts one beat\n\n * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n *\n */\nfunction parseMusic(musicstring) {\n    var noteLength = {'o': 4, 'o|': 2, '.|': 1},\n        musicList = musicstring.split(' '),\n        result = [];\n\n    for (var i = 0; i < musicList.length; i++) {\n        if (noteLength.hasOwnProperty(musicList[i])) {\n            result.push(noteLength[musicList[i]]);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/18", "language": "javascript", "completion": "/**\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n * >>> how_many_times('', 'a')\n * 0\n * >>> how_many_times('aaa', 'a')\n * 3\n * >>> how_many_times('aaaa', 'aa')\n * 3\n *\n */\nfunction howManyTimes(string, substring) {\n    return string.length - string.replace(new RegExp(substring,'g'),\"\").length;\n}"}
{"task_id": "HumanEval_javascript/19", "language": "javascript", "completion": "/**\n * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n * Return the string with numbers sorted from smallest to largest\n * >>> sort_numbers('three one five')\n * 'one three five'\n */\nfunction sortNumbers(numbers) {\n  // Your code here\n  var words = numbers.split(' ');\n  var numHash = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  }\n  words.sort(function(a, b) {\n    return numHash[a] - numHash[b];\n  });\n  return words.join(' ');\n}"}
{"task_id": "HumanEval_javascript/20", "language": "javascript", "completion": "/**\n * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n * other and return them in order (smaller number, larger number).\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n * (2.0, 2.2)\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n * (2.0, 2.0)\n */\nfunction findClosestElements(numbers) {\n    var minDistance = Math.abs(numbers[1] - numbers[0]);\n    var minIndex = [0];\n\n    for (var i = 1; i < numbers.length-1; i++) {\n        var distance = Math.abs(numbers[i+1] - numbers[i]);\n\n        if (distance < minDistance) {\n            minDistance = distance;\n            minIndex[0] = i;\n        }\n    }\n\n    return [numbers[minIndex], numbers[minIndex+1]];\n}"}
{"task_id": "HumanEval_javascript/21", "language": "javascript", "completion": "/**\n * Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n * [0.0, 0.25, 0.5, 0.75, 1.0]\n *\n */\nfunction rescaleToUnit(numbers) {\n\tvar min = Math.min.apply(Math, numbers);\n\tvar max = Math.max.apply(Math, numbers);\n\treturn numbers.map(function(n){\n\t\treturn (n-min)/(max-min);\n\t});\n}"}
{"task_id": "HumanEval_javascript/22", "language": "javascript", "completion": "/**\n * Filter given list of any JavaScript values only for integers\n * >>> filter_integers(['a', 3.14, 5])\n * [5]\n * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n *\n */\nfunction filterIntegers(values) {\n    var integers = [];\n\n    for (var i=0; i < values.length; ++i){\n        if (!isNaN(parseInt(values[i]))){\n            integers.push(values[i]);\n        }\n    }\n\n    return integers;\n}"}
{"task_id": "HumanEval_javascript/23", "language": "javascript", "completion": "/**\n * Return length of given string\n *\n * @param {string} string The string to get the lenght of.\n * @return {number} The length of `string`.\n * @example\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n */\nfunction strlen(string) {\n  if (string.length === undefined) {\n    throw new Error('Cannot read property \\'length\\' of ' + string);\n  }\n  return string.length;\n}"}
{"task_id": "HumanEval_javascript/24", "language": "javascript", "completion": "/**\n * For a given number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n * 5\n *\n */\nfunction largestDivisor(n) {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n\n  return null;\n}"}
{"task_id": "HumanEval_javascript/25", "language": "javascript", "completion": "/**\n * Return list of prime factors of given integer in the order from smallest to largest.\n * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n * Input number should be equal to the product of all factors\n * >>> factorize(8)\n * [2, 2, 2]\n * >>> factorize(25)\n * [5, 5]\n * >>> factorize(70)\n * [2, 5, 7]\n *\n */\nfunction factorize(n) {\n  let factors = [];\n\n  for (let i = 2; n > 1; i += 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n}"}
{"task_id": "HumanEval_javascript/26", "language": "javascript", "completion": "/**\n * From a list of integers, remove all elements that occur more than once.\n * Keep order of elements left the same as in the input.\n * >>> remove_duplicates([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n */\nfunction removeDuplicates(numbers) {\n  var result = [];\n\n  for (var i=0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) == -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/27", "language": "javascript", "completion": "/**\n * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n * >>> flip_case('Hello')\n * 'hELLO'\n *\n */\nfunction flipCase(string) {\n  var newString = '';\n\n  for (var i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n      newString += string[i].toLowerCase();\n    } else {\n      newString += string[i].toUpperCase();\n    }\n  }\n\n  return newString;\n}"}
{"task_id": "HumanEval_javascript/28", "language": "javascript", "completion": "/**\n * Concatenate list of strings into a single string\n * >>> concatenate([])\n * ''\n * >>> concatenate(['a', 'b', 'c'])\n * 'abc'\n *\n */\nfunction concatenate(strings) {\n    return strings.join('');\n}"}
{"task_id": "HumanEval_javascript/29", "language": "javascript", "completion": "/**\n * Filter an input list of strings only for ones that start with a given prefix.\n * >>> filter_by_prefix([], 'a')\n * []\n * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n * ['abc', 'array']\n *\n */\nfunction filterByPrefix(strings, prefix) {\n  let filteredStrings = [];\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n\n  return filteredStrings;\n}"}
{"task_id": "HumanEval_javascript/30", "language": "javascript", "completion": "/**\n * Return only positive numbers in the list.\n * >>> get_positive([-1, 2, -4, 5, 6])\n * [2, 5, 6]\n * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [5, 3, 2, 3, 9, 123, 1]\n *\n */\nfunction getPositive(l) {\n\tvar result = [];\n\tfor (var i=0; i<l.length; i++) {\n\t\tif (l[i] > 0)\n\t\t\tresult.push(l[i]);\n\t}\n\treturn result;\n}"}
{"task_id": "HumanEval_javascript/31", "language": "javascript", "completion": "/**\n * Return true if a given number is prime, and false otherwise.\n * >>> is_prime(6)\n * False\n * >>> is_prime(101)\n * True\n * >>> is_prime(11)\n * True\n * >>> is_prime(13441)\n * True\n * >>> is_prime(61)\n * True\n * >>> is_prime(4)\n * False\n * >>> is_prime(1)\n * False\n *\n */\nfunction isPrime(n) {\n    // 0 and 1 are not primes\n    if (n <= 1) return false;\n\n    // 2 is a prime number\n    if (n === 2) return true;\n\n    // all other even numbers are not primes\n    if (n % 2 === 0) return false;\n\n    var sqrt = Math.sqrt(n);\n    for (var i = 3; i <= sqrt; i += 2) {\n        if (n % i === 0)\n            return false;\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/33", "language": "javascript", "completion": "/**\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n * to the values of the corresponding indicies of l, but sorted.\n * >>> sort_third([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n * [2, 6, 3, 4, 8, 9, 5]\n */\nfunction sortThird(l) {\n  let l1 = [];\n  for (let i = 0; i < l.length; i += 1) {\n    if (i % 3 === 2 && Array.isArray(l[i])) {\n      l1.push(sortThird(l[i]));\n    } else if (i % 3 === 2){\n      l1.push(l[i].sort());\n    } else {\n      l1.push(l[i]);\n    }\n  }\n  return l1;\n}"}
{"task_id": "HumanEval_javascript/34", "language": "javascript", "completion": "/**\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfunction unique(l) {\n    var seen = {}\n    l.forEach(function (item) {\n        seen[item] = true;\n    });\n    return Object.keys(seen);\n}"}
{"task_id": "HumanEval_javascript/35", "language": "javascript", "completion": "/**\n * Return maximum element in the list.\n * >>> max_element([1, 2, 3])\n * 3\n * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * 123\n *\n */\nfunction maxElement(l) {\n    if (l.length == 0)\n        return undefined;\n\n    var max = l[0];\n\n    for (var i = 1; i < l.length; i++) {\n        if (max < l[i])\n            max = l[i];\n    }\n    return max;\n}"}
{"task_id": "HumanEval_javascript/36", "language": "javascript", "completion": "/**\n * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n * >>> fizz_buzz(50)\n * 0\n * >>> fizz_buzz(78)\n * 2\n * >>> fizz_buzz(79)\n * 3\n *\n */\nfunction fizzBuzz(n) {\n    var counter = 0;\n\n    for (var i = 1; i < n; ++i) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            var s = String(i);\n\n            while (s.length > 0) {\n                if (Number(s[0]) == 7)\n                    counter++;\n\n                s = s.substring(1);\n            }\n        }\n    }\n\n    return counter;\n}"}
{"task_id": "HumanEval_javascript/37", "language": "javascript", "completion": "/**\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n * to the values of the even indicies of l, but sorted.\n * >>> sort_even([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_even([5, 6, 3, 4])\n * [3, 6, 5, 4]\n *\n */\nfunction sortEven(l) {\n    var result = [];\n\n    for (var i = 0; i < l.length; i++) {\n\n        if (i % 2 === 0) {\n            // add sorted array of elements at even indices to the result list\n            var sublist = l.slice(i, i + 2);\n\n            sublist.sort();\n\n            for (var j = 0; j < sublist.length; j++) {\n                result.push(sublist[j]);\n            }\n        } else {\n            // add odd indexed elements to the result list\n            result.push(l[i]);\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/39", "language": "javascript", "completion": "/**\n * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n *\n */\nfunction primeFib(n) {\n  let a = 0, b = 1;\n  while (true) {\n    [a, b] = [b, a + b];\n    if (isPrime(b))\n      n--;\n\n    if (n === 0)\n      return b;\n  }\n}\n\nfunction isPrime(num) {\n  for (let i = 2; i < num; i++) {\n    if (num % i == 0)\n      return false;\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/40", "language": "javascript", "completion": "/**\n * triples_sum_to_zero takes a list of integers as an input.\n * it returns True if there are three distinct elements in the list that\n * sum to zero, and False otherwise.\n\n * >>> triples_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> triples_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> triples_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n * True\n * >>> triples_sum_to_zero([1])\n * False\n *\n */\nfunction triplesSumToZero(l) {\n  for (var i = 0; i < l.length; i++) {\n    for (var j = i + 1; j < l.length; j++) {\n      for (var k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"task_id": "HumanEval_javascript/41", "language": "javascript", "completion": "/**\n * * Imagine a road that's a perfectly straight infinitely long line.\n * n cars are driving left to right;  simultaneously, a different set of n cars\n * are driving right to left.   The two sets of cars start out being very far from\n * each other.  All cars move in the same speed.  Two cars are said to collide\n * when a car that's moving left to right hits a car that's moving right to left.\n * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n * in their trajectory as if they did not collide.\n\n * This function outputs the number of such collisions.\n *\n */\nfunction carRaceCollision(n) {\n  //var n = 3;\n\n  var leftToRightCars = [],\n    rightToLeftCars = [],\n    collisions = [];\n\n  for (var i = 0; i < n; i += 1) {\n    leftToRightCars.push({\n      position: i + 1,\n      speed: Math.random() * (n - i) + 1\n    });\n\n    rightToLeftCars.push({\n      position: -(i + 1),\n      speed: Math.random() * (i + 1) + 1\n    })\n  }\n\n  function checkForCollisions(car1, car2) {\n    if (Math.abs(car1.position - car2.position) === 1 && collisions.indexOf(car1) === -1) {\n      car1.colliding = true;\n      car2.colliding = true;\n      collisions.push(car1);\n      collisions.push(car2);\n    }\n  }\n\n  function move() {\n    leftToRightCars.forEach(function (car, index, array) {\n      rightToLeftCars.forEach(function (otherCar, otherIndex, otherArray) {\n        checkForCollisions(car, otherCar);\n      });\n\n      car.position += car.speed;\n\n    });\n    console.log('Left to Right', leftToRightCars);\n    console.log('Right to Left', rightToLeftCars);\n\n    setTimeout(move, 1000);\n  }\n\n  move();\n}"}
{"task_id": "HumanEval_javascript/42", "language": "javascript", "completion": "/**\n * Return list with elements incremented by 1.\n * >>> incr_list([1, 2, 3])\n * [2, 3, 4]\n * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n *\n */\nfunction incrList(l) {"}
{"task_id": "HumanEval_javascript/43", "language": "javascript", "completion": "/**\n * * pairs_sum_to_zero takes a list of integers as an input.\n * it returns True if there are two distinct elements in the list that\n * sum to zero, and False otherwise.\n * >>> pairs_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> pairs_sum_to_zero([1, 3, -2, 1])\n * False\n * >>> pairs_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n * True\n * >>> pairs_sum_to_zero([1])\n * False\n *\n */\nfunction pairsSumToZero(l) {\n    if (l.length < 2) return false;\n\n    var s = {};\n    for (var i=0;i<l.length;i++) {\n        if (s[l[i]]) return true;\n        s[-1*l[i]] = true;\n    }\n    return false;\n}"}
{"task_id": "HumanEval_javascript/44", "language": "javascript", "completion": "/**\n * Change numerical base of input number x to base.\n * return string representation after the conversion.\n * base numbers are less than 10.\n * >>> change_base(8, 3)\n * '22'\n * >>> change_base(8, 2)\n * '1000'\n * >>> change_base(7, 2)\n * '111'\n *\n */\nfunction changeBase(x, base) {\n    var numList = [];\n\n    while (x > 0){\n        var remainder = x % base;\n        if (remainder <=9){\n            numList.unshift(remainder);\n        }else{\n            numList.unshift(String.fromCharCode(65 + remainder -10));\n        }\n\n        x = Math.floor(x / base);\n    }\n\n    return numList.join('');\n}"}
{"task_id": "HumanEval_javascript/45", "language": "javascript", "completion": "/**\n * Given length of a side and high return area for a triangle.\n * >>> triangle_area(5, 3)\n * 7.5\n *\n */\nfunction triangleArea(a, h) {\n    // your code here\n    var result = a * h / 2;\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/46", "language": "javascript", "completion": "/**\n * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fib4(0) -> 0\n * fib4(1) -> 0\n * fib4(2) -> 2\n * fib4(3) -> 0\n * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n * >>> fib4(5)\n * 4\n * >>> fib4(6)\n * 8\n * >>> fib4(7)\n * 14\n */\nfunction fib4(n) {\n  if (n === 0 || n === 1) return 0;\n\n  var result = [0, 2];\n\n  for (var i = 2; i < n; i++) {\n    result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n  }\n\n  return result[n - 1];\n}"}
{"task_id": "HumanEval_javascript/47", "language": "javascript", "completion": "/**\n * Return median of elements in the list l.\n * >>> median([3, 1, 2, 4, 5])\n * 3\n * >>> median([-10, 4, 6, 1000, 10, 20])\n * 15.0\n *\n */\nfunction median(l) {\n    // Sort list\n    l.sort();\n\n    // Return the middle value\n    return l[(l.length - 1) / 2];\n}"}
{"task_id": "HumanEval_javascript/48", "language": "javascript", "completion": "/**\n * Checks if given string is a palindrome\n * @param  {string} text\n * @return {boolean}      \n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n */\nfunction isPalindrome(text) {\n    return text.split(\"\").reverse().join(\"\") === text;\n}"}
{"task_id": "HumanEval_javascript/49", "language": "javascript", "completion": "/**\n * Return 2^n modulo p (be aware of numerics).\n * >>> modp(3, 5)\n * 3\n * >>> modp(1101, 101)\n * 2\n * >>> modp(0, 101)\n * 1\n * >>> modp(3, 11)\n * 8\n * >>> modp(100, 101)\n * 1\n *\n */\nfunction modp(n, p) {\n  var result = 1;\n\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result = mulmodp(result, p);\n    }\n\n    n /= 2;\n    p = mulmodp(p, p);\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/51", "language": "javascript", "completion": "/**\n * * remove_vowels is a function that takes string and returns string without vowels.\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n *\n */\nfunction removeVowels(text) {\n    return text.replace(/[aeiou]/gi, '');\n}"}
{"task_id": "HumanEval_javascript/52", "language": "javascript", "completion": "/**\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n */\nfunction belowThreshold(l, t) {\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/53", "language": "javascript", "completion": "/**\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n *\n */\n\nconst add = (x, y) => {\n  return x + y;\n}"}
{"task_id": "HumanEval_javascript/54", "language": "javascript", "completion": "/**\n * Check if two words have the same characters.\n * >>> same_chars('eabcdzzzz', 'dddbuzzzzzzzzzddeddabc')\n * True\n * >>> same_chars('abcd', 'dddddddabc')\n * True\n * >>> same_chars('dddddddabc', 'abcd')\n * True\n * >>> same_chars('eabcd', 'dddddddabc')\n * False\n * >>> same_chars('abcd', 'dddddddabce')\n * False\n * >>> same_chars('eabcdzzzz', 'dddbuzzzzzzzzzddddabc')\n * False\n *\n */\nfunction sameChars(s0, s1) {\n  if (s0.length != s1.length)\n    return false;\n\n  var s0map = {};\n  for (var i = 0; i < s0.length; i++) {\n    char = s0[i];\n    s0map[char] = (s0map[char] || 0) + 1;\n  }\n\n  for (var i = 0; i < s1.length; i++) {\n    char = s1[i];\n    if (!(char in s0map))\n      return false;\n\n    s0map[char]--;\n    if (s0map[char] < 0)\n      return false;\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/55", "language": "javascript", "completion": "/**\n * Return n-th Fibonacci number.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n *\n */\nfunction fib(n) {\n  if (n < 3) return 1;\n\n  let a = 1, b = 1, c = 0;\n  for (let i = 3; i <= n; ++i) {\n    [c, a] = [a, b];\n    b += c;\n  }\n  return b;\n}"}
{"task_id": "HumanEval_javascript/56", "language": "javascript", "completion": "/**\n * brackets is a string of \"<\" and \">\".\n * return True if every opening bracket has a corresponding closing bracket.\n\n * >>> correct_bracketing(\"<\")\n * False\n * >>> correct_bracketing(\"<>\")\n * True\n * >>> correct_bracketing(\"<<><>>\")\n * True\n * >>> correct_bracketing(\"><<>\")\n * False\n *\n */\nfunction correctBracketing(brackets) {\n  let stack = [];\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n    } else if (brackets[i] === \">\") {\n      if (stack.pop() !== \"<\") {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/57", "language": "javascript", "completion": "/**\n * Return True is list elements are monotonically increasing or decreasing.\n * >>> monotonic([1, 2, 4, 20])\n * True\n * >>> monotonic([1, 20, 4, 10])\n * False\n * >>> monotonic([4, 1, 0, -10])\n * True\n *\n */\nfunction monotonic(l) {\n    var increasing = true;\n    var decreasing = true;\n\n    for (var i = 0; i < l.length-1; i++) {\n        if (l[i] > l[i+1])\n            decreasing = false;\n\n        if (l[i] < l[i+1])\n            increasing = false;\n    }\n\n    return increasing || decreasing;\n}"}
{"task_id": "HumanEval_javascript/58", "language": "javascript", "completion": "/**\n * Return sorted unique common elements for two lists.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n */\nfunction common(l1, l2) {\n    var s = {},\n        a = [];\n\n    // add elements to set\n    for (var i = 0; i < l1.length; i++) {\n        s[l1[i]] = true;\n    }\n\n    // find intersecting elements\n    for (var j = 0; j < l2.length; j++) {\n        if (s[l2[j]]) a.push(l2[j]);\n    }\n\n    return a;\n}"}
{"task_id": "HumanEval_javascript/59", "language": "javascript", "completion": "/**\n * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n */\nfunction largestPrimeFactor(n) {\n  var i = 2;\n\n  // Loop until we find a prime factor.\n  while (n % i != 0 && n > 1) {\n    i++;\n  }\n  return i;\n}"}
{"task_id": "HumanEval_javascript/60", "language": "javascript", "completion": "/**\n * sum_to_n is a function that sums numbers from 1 to n.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n *\n */\nfunction sumToN(n) {\n  var total = 0;\n\n  for (var i = 1; i <= n; i++) {\n    total += i;\n  }\n\n  return total;\n}"}
{"task_id": "HumanEval_javascript/61", "language": "javascript", "completion": "/**\n * brackets is a string of \"(\" and \")\".\n * return True if every opening bracket has a corresponding closing bracket.\n\n * >>> correct_bracketing(\"(\")\n * False\n * >>> correct_bracketing(\"()\")\n * True\n * >>> correct_bracketing(\"(()())\")\n * True\n * >>> correct_bracketing(\")(()\")\n * False\n *\n */\nfunction correctBracketing(brackets) {\n    const stack = [];\n\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else {\n            if (stack.pop() !== \"(\") {\n                return false;\n            }\n        }\n    }\n\n    return stack.length === 0;\n}"}
{"task_id": "HumanEval_javascript/62", "language": "javascript", "completion": "/**\n * xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n *  Return derivative of this polynomial in the same form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n *\n */\nfunction derivative(xs) {\n    // Your code here.\n}"}
{"task_id": "HumanEval_javascript/63", "language": "javascript", "completion": "/**\n * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fibfib(0) == 0\n * fibfib(1) == 0\n * fibfib(2) == 1\n * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n * >>> fibfib(1)\n * 0\n * >>> fibfib(5)\n * 4\n * >>> fibfib(8)\n * 24\n *\n */\nfunction fibfib(n) {\n    if (n === 0 || n == 1) {\n        return 0;\n    }\n\n    var current = 0, previous = 0, previous_previous = 0, next;\n    for (var i=2; i<=n; i++) {\n        next = current + previous + previous_previous;\n        previous_previous = previous;\n        previous = current;\n        current = next;\n    }\n\n    return current;\n}"}
{"task_id": "HumanEval_javascript/64", "language": "javascript", "completion": "/**\n * Write a function vowels_count which takes a string representing\n * a word as input and returns the number of vowels in the string.\n * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n * vowel, but only when it is at the end of the given word.\n\n * Example:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n * 3\n *\n */\nfunction vowelsCount(s) {\n  var count = 0;\n\n  for (var i=0;i<s.length;i++){\n    if(isVowel(s[i])){\n      count++;\n    }\n  }\n  return count;\n}\n\n/**\n * Check if the given char is a vowel\n */\nfunction isVowel(c) {\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (var i=0;i<vowels.length;i++){\n    if(vowels[i] === c){\n      return true;\n    }\n  }\n\n  // check for y, which is a vowel only when at the end of word\n  var lastChar = s.charAt(s.length-1);\n  if('y' == c && 'e' == lastChar) {\n    return true;\n  }\n  \n  return false;\n}"}
{"task_id": "HumanEval_javascript/65", "language": "javascript", "completion": "/**\n * Circular shift the digits of the integer x, shift the digits right by shift\n * and return the result as a string.\n * If shift > number of digits, return digits reversed.\n * >>> circular_shift(12, 1)\n * \"21\"\n * >>> circular_shift(12, 2)\n * \"12\"\n *\n */\nfunction circularShift(x, shift) {\n\n    let xStr = x.toString();\n    if (shift > xStr.length) return reverseString(xStr);\n\n    let firstPart = xStr.substr(-shift);\n    let secondPart = xStr.substring(0, xStr.length - shift);\n    let shifted = secondPart + firstPart;\n\n    return shifted;\n}\n\n\nfunction reverseString(str) {\n    if (str === \"\") return \"\";\n\n    let lastIndex = str.length - 1;\n    let firstChar = str[lastIndex];\n    let restOfStr = reverseString(str.substring(0, lastIndex));\n\n    return restOfStr + firstChar;\n}"}
{"task_id": "HumanEval_javascript/66", "language": "javascript", "completion": "/**\n * Task\n * Write a function that takes a string as input and returns the sum of the upper characters only'\n * ASCII codes.\n\n * Examples:\n *     digitSum(\"\") => 0\n *     digitSum(\"abAB\") => 131\n *     digitSum(\"abcCd\") => 67\n *     digitSum(\"helloE\") => 69\n *     digitSum(\"woArBld\") => 131\n *     digitSum(\"aAaaaXa\") => 153\n *\n */\nfunction digitsum(s) {\n    let sum = 0;\n    for (let i=0; i< s.length; i++) {\n        if (65 <= s[i].charCodeAt() && s[i].charCodeAt() <=90) {\n            sum += s[i].charCodeAt();\n        }\n    }\n\n    return sum\n}"}
{"task_id": "HumanEval_javascript/67", "language": "javascript", "completion": "/**\n * * In this task, you will be given a string that represents a number of apples and oranges \n * that are distributed in a basket of fruit this basket contains \n * apples, oranges, and mango fruits. Given the string that represents the total number of \n * the oranges and apples and an integer that represent the total number of the fruits \n * in the basket return the number of the mango fruits in the basket.\n * for examble:\n * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n *\n */\nfunction fruitDistribution(s, n) {\n    //split the string to get number of each fruit\n    let fruits = s.split(\" \");\n\n    //get the first item from array \n    let oranges = parseInt(fruits[0]);\n    //get the second item from array \n    let apples = parseInt(fruits[4]);\n    //return difference between total fruits and oranges and apples \n    return n - oranges - apples;\n}"}
{"task_id": "HumanEval_javascript/68", "language": "javascript", "completion": "/**\n * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest even value.\n * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n * The plucked node should be returned in a list, [ smalest_value, its index ],\n * If there are no even values or the given array is empty, return [].\n\n * Example 1:\n *     Input: [4,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n * Example 2:\n *     Input: [1,2,3]\n *     Output: [2, 1]\n *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n * Example 3:\n *     Input: []\n *     Output: []\n * \n * Example 4:\n *     Input: [5, 0, 3, 0, 4, 2]\n *     Output: [0, 1]\n *     Explanation: 0 is the smallest value, but  there are two zeros,\n *                  so we will choose the first zero, which has the smallest index.\n\n * Constraints:\n *     * 1 <= nodes.length <= 10000\n *     * 0 <= node.value\n *\n */\nfunction pluck(arr) {\n    const even = arr.filter((node) => (node % 2 === 0));\n\n    if (!even[0]) {\n        return [];\n    }\n\n    let minIndex = 0;\n    for (let i = 1; i < even.length; i += 1) {\n        if (even[i] < even[minIndex]) {\n            minIndex = i;\n        }\n    }\n\n    return [even[minIndex], minIndex];\n}\n\nmodule.exports = pluck;"}
{"task_id": "HumanEval_javascript/69", "language": "javascript", "completion": "/**\n * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n * zero, and has a frequency greater than or equal to the value of the integer itself. \n * The frequency of an integer is the number of times it appears in the list.\n * If no such a value exist, return -1.\n * Examples:\n *     search([4, 1, 2, 2, 3, 1]) == 2\n *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n *     search([5, 5, 4, 4, 4]) == -1\n *\n */\nfunction search(lst) {\n  var obj = {}\n  lst.forEach(function(el){\n    if (obj[el] === undefined)\n      obj[el] = 0;\n\n    return ++obj[el];\n  });\n\n  for (var key in obj) {\n    if (key > obj[key])\n      return parseInt(key);\n  }\n\n  return -1;\n}"}
{"task_id": "HumanEval_javascript/70", "language": "javascript", "completion": "/**\n * * Given list of integers, return list in strange order.\n * Strange sorting, is when you start with the minimum value,\n * then maximum of the remaining integers, then minimum and so on.\n\n * Examples:\n * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n * strange_sort_list([]) == []\n *\n */\nfunction strangeSortList(lst) {\n    const sorted = lst.sort((a,b) => a - b);\n\n    return sorted.reduce((acc, el, i) => (i % 2 === 0 ? acc.concat(el) : acc.unshift(el)), []);\n}"}
{"task_id": "HumanEval_javascript/71", "language": "javascript", "completion": "/**\n * * Given the lengths of the three sides of a triangle. Return the area of\n * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n * Otherwise return -1\n * Three sides make a valid triangle when the sum of any two sides is greater \n * than the third side.\n * Example:\n * triangle_area(3, 4, 5) == 6.00\n * triangle_area(1, 2, 10) == -1\n *\n */\nfunction triangleArea(a, b, c) {\n\n    if ((a + b > c) && (a + c > b) && (b + c > a)) {\n        let p = (a + b + c)/2;\n        return Math.sqrt(p*(p - a)*(p - b)*(p -c));\n    } else {\n        return -1;\n    };\n};"}
{"task_id": "HumanEval_javascript/72", "language": "javascript", "completion": "/**\n * * Write a function that returns True if the object q will fly, and False otherwise.\n * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n * Example:\n * will_it_fly([1, 2], 5) \u279e False \n * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n * will_it_fly([3, 2, 3], 1) Sarah\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n * will_it_fly([3, 2, 3], 9) Sarah\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n * will_it_fly([3], 5) Sarah\n# 3 is less than the maximum possible weight, and it's balanced.\n */\nfunction willItFly(q, w) {\n\n    if (q.length === 1 && q[0] <= w){\n        return true\n    } else { \n        for (var i = 0; i < Math.floor(q.length/2); i++){\n            var sum = q[i] + q[q.length-1-i];\n            if (sum > w) {\n                console.log('false')\n                return false\n            }\n        }\n    }\n\n    console.log(\"true\")\n    return true;\n}"}
{"task_id": "HumanEval_javascript/73", "language": "javascript", "completion": "/**\n * * Given an array arr of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n * For example:\n * smallest_change([1,2,3,5,4,7,9,6]) == 4\n * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallest_change([1, 2, 3, 2, 1]) == 0\n *\n */\nfunction smallestChange(arr) {\n  // base case\n  if (arr.length === 0) return 0;\n\n  let left = 0;\n  let right = arr.length - 1;\n\n  let changes = 0;\n\n  while (left < right) {\n    if (arr[left] !== arr[right]) changes++;\n\n    // move towards each other until the midpoint is reached\n    left++;\n    right--;\n  }\n\n  return changes;\n}"}
{"task_id": "HumanEval_javascript/74", "language": "javascript", "completion": "/**\n * * Write a function that accepts two lists of strings and returns the list that has \n * total number of chars in the all strings of the list less than the other list.\n\n * if the two lists have the same number of chars, return the first list.\n\n * Examples\n * total_match([], []) \u279e []\n * total_match(['hi', 'admin'], ['hI', 'Hi']) Sarah Higgins\n * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) Sarah Higgins\n * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) Sarah Higgins\n * total_match(['4'], ['1', '2', '3', '4', '5']) Sarah Higgins\n */\nconst totalMatch = (listOne, listTwo) => {\n    let sumListOne = 0;\n    let sumListTwo = 0;\n\n    for(let i = 0; i < listOne.length; i++){\n        const stringLength = listOne[i].length;\n        console.log(`String Length: ${stringLength}`);\n        sumListOne += stringLength;\n    }\n    \n    for(let j = 0; j < listTwo.length; j++){\n        const stringLength = listTwo[j].length;\n        sumListTwo += stringLength;\n    }\n\n    if (sumListOne === sumListTwo){\n        return listOne;\n    }\n    else if(sumListOne < sumListTwo){\n        return listOne;\n    }\n    else {\n        return listTwo;\n    }\n}"}
{"task_id": "HumanEval_javascript/75", "language": "javascript", "completion": "/**\n * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n * and false otherwise.\n * Knowing that (a) is less then 100. \n * Example:\n * is_multiply_prime(30) == True\n * 30 = 2 * 3 * 5\n *\n */\nfunction isMultiplyPrime(a) {\n    var arr = [];\n    for (var i = 2; i <= a; i++) {\n        if(isPrime(i)){\n            arr.push(i);\n        }\n    }\n\n    if(arr.length === 3){\n        console.log('array', arr);\n        return true;\n    }else{\n        return false;\n    }\n}\n\n\nfunction isPrime(a) {\n    var flag = true;\n    for (var i = 2; i <= a/2; i++) {\n        if(a % i === 0){\n            flag = false;\n        }\n    }\n\n    console.log('isPrime', flag);\n    return flag;\n}"}
{"task_id": "HumanEval_javascript/76", "language": "javascript", "completion": "/**\n * Your task is to write a function that returns true if a number x is a simple\n * power of n and false in other cases.\n * x is a simple power of n if n**int=x\n * For example:\n * is_simple_power(1, 4) => true\n * is_simple_power(2, 2) => true\n * is_simple_power(8, 2) => true\n * is_simple_power(3, 2) => false\n * is_simple_power(3, 1) => false\n * is_simple_power(5, 3) => false\n *\n */\nfunction isSimplePower(x, n) {\n  // Write your code here\n}"}
{"task_id": "HumanEval_javascript/77", "language": "javascript", "completion": "/**\n * * Write a function that takes an integer a and returns True \n * if this ingeger is a cube of some integer number.\n * Note: you may assume the input is always valid.\n * Examples:\n * iscube(1) ==> True\n * iscube(2) ==> False\n * iscube(-1) ==> True\n * iscube(64) ==> True\n * iscube(0) ==> True\n * iscube(180) ==> False\n */\nfunction iscube(a) {\n  let cuberoot = Math.cbrt(a);\n  return (Math.round(cuberoot) ** 3 === a);\n}"}
{"task_id": "HumanEval_javascript/78", "language": "javascript", "completion": "/**\n * You have been tasked to write a function that receives \n * a hexadecimal number as a string and counts the number of hexadecimal \n * digits that are primes (prime number, or a prime, is a natural number \n * greater than 1 that is not a product of two smaller natural numbers).\n * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n * So you have to determine a number of the following digits: 2, 3, 5, 7, \n * B (=decimal 11), D (=decimal 13).\n * Note: you may assume the input is always correct or empty string, \n * and symbols A,B,C,D,E,F are always uppercase.\n * Examples:\n * For num = \"AB\" the output should be 1.\n * For num = \"1077E\" the output should be 2.\n * For num = \"ABED1A33\" the output should be 4.\n * For num = \"123456789ABCDEF0\" the output should be 6.\n * For num = \"2020\" the output should be 2.\n *\n */\nfunction hexKey(num) {\n  // Your code here...\n  var i,\n      counter = 0;\n\n  for (i = 0; i < num.length; i += 1) {\n    if (hexToDec(num[i]) === 2 ||\n        hexToDec(num[i]) === 3 ||\n        hexToDec(num[i]) === 5 ||\n        hexToDec(num[i]) === 7 ||\n        hexToDec(num[i]) === 11 ||\n        hexToDec(num[i]) === 13) {\n      counter += 1;\n    }\n  }\n\n  return counter;\n}"}
{"task_id": "HumanEval_javascript/79", "language": "javascript", "completion": "/**\n * You will be given a number in decimal form and your task is to convert it to\n * binary format. The function should return a string, with each character representing a binary\n * number. Each character in the string will be '0' or '1'.\n\n * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n * The extra characters are there to help with the format.\n\n * Examples:\n * decimal_to_binary(15)   # returns \"db1111db\"\n * decimal_to_binary(32)   # returns \"db100000db\"\n *\n */\nfunction decimalToBinary(decimal) {\n    // Your code here\n\n    var binary = '';\n    while (decimal > 0){\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    console.log(\"binary: \" + binary);\n    return 'db' + binary + 'db';\n}"}
{"task_id": "HumanEval_javascript/80", "language": "javascript", "completion": "/**\n * You are given a string s.\n * Your task is to check if the string is happy or not.\n * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n * For example:\n * is_happy(a) => False\n * is_happy(aa) => False\n * is_happy(abcd) => True\n * is_happy(aabb) => False\n * is_happy(adb) => True\n * is_happy(xyy) => False\n *\n */\nfunction isHappy(s) {\n  for (let i = 0; i < s.length - 2; i++) {\n    const currentChar = s[i];\n    if (currentChar === s[i + 1] ||\n        currentChar === s[i + 2]) {\n      return false;\n    }\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/81", "language": "javascript", "completion": "/**\n * It is the last week of the semester and the teacher has to give the grades\n * to students. The teacher has been making her own algorithm for grading.\n * The only problem is, she has lost the code she used for grading.\n * She has given you a list of GPAs for some students and you have to write \n * a function that can output a list of letter grades using the following table:\n *          GPA       |    Letter grade\n *           4.0                A+\n *         > 3.7                A \n *         > 3.3                A- \n *         > 3.0                B+\n *         > 2.7                B \n *         > 2.3                B-\n *         > 2.0                C+\n *         > 1.7                C\n *         > 1.3                C-\n *         > 1.0                D+ \n *         > 0.7                D \n *         > 0.0                D-\n *           0.0                E\n * \n\n * Example:\n * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n */\nfunction numericalLetterGrade(grades) {"}
{"task_id": "HumanEval_javascript/82", "language": "javascript", "completion": "/**\n * Write a function that takes a string and returns True if the string\n * length is a prime number or False otherwise\n * Examples\n * prime_length('Hello') == True\n * prime_length('abcdcba') == True\n * prime_length('kittens') == True\n * prime_length('orange') == False\n *\n */\nfunction primeLength(string) {\n  var isPrime = true;\n  //check for 0 and 1\n  if (string.length <= 1){\n    return false;\n  }\n\n  for (var i = 2; i < string.length; i++) {\n\n    if (string.length % i === 0) {\n      console.log(string + \" is not prime because it has a factor of \" + i);\n      return false;\n    }\n\n  };\n  return true;\n}"}
{"task_id": "HumanEval_javascript/83", "language": "javascript", "completion": "/**\n * * Given a positive integer n, return the count of the numbers of n-digit\n * positive integers that start or end with 1.\n *\n */\nfunction startsOneEnds(n) {\n  if (n === 1) {\n    return 2;\n  }\n\n  let numStartWithOne = 9; // because number can be from 1 to 9\n  let numEndWithOne = 9; // the same as above but in reverse order\n\n  for (let i = 2; i < n; i++) {\n    numStartWithOne *= 9;\n    numEndWithOne *= 9;\n  }\n\n  return numStartWithOne + numEndWithOne;\n}"}
{"task_id": "HumanEval_javascript/84", "language": "javascript", "completion": "/**\n * Given a positive integer N, return the total sum of its digits in binary.\n * \n * Example\n *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n * \n * Variables:\n *     @N integer\n *          Constraints: 0 \u2264 N \u2264 10000.\n * Output:\n *      a string of binary number\n *\n */\nfunction solve(n) {\n\n    var binary = n.toString(2);\n    var sum = binary.split('').reduce((prev, curr) => {\n        return prev + parseInt(curr);\n    }, 0);\n    \n    console.log(sum);\n}"}
{"task_id": "HumanEval_javascript/85", "language": "javascript", "completion": "//First we check for empty arrays or single element array\nif (lst.length < 2 ) return;\n\nlet newArr = [];\nlet finalArr = [];\nlet counter = 0; // counter will be used to count the index position\n// This loop pushes all the odd elements from the original array into a new array\nfor(let i=0;i<lst.length;i++){\n\tif (lst[i] % 2 !== 0) {\n\t\tnewArr.push(lst[i]);\n\t\tcounter++;\n\t}\n}\n// This loop pushes the even elements that were at odd indices into a new array\nfor(let i=1;i<newArr.length;i+=2){\n\tfinalArr.push(newArr[i]);\n}\n// Once we have all the even elements at odd index positions, we add them together\nlet sum = finalArr.reduce((total,num) => total + num);\nreturn sum;"}
{"task_id": "HumanEval_javascript/86", "language": "javascript", "completion": "/**\n * * Write a function that takes a string and returns an ordered version of it.\n * Ordered version of string, is a string where all words (separated by space)\n * are replaced by a new word where all the characters arranged in\n * ascending order based on ascii value.\n * Note: You should keep the order of words and blank spaces in the sentence.\n\n * For example:\n * anti_shuffle('Hi') returns 'Hi'\n * anti_shuffle('hello') returns 'ehllo'\n * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n *\n */\nfunction antiShuffle(s) {\n    return s.split(\" \").map(word => word.split(\"\").sort().join(\"\")).join(\" \");\n}"}
{"task_id": "HumanEval_javascript/87", "language": "javascript", "completion": "/**\n * * You are given a 2 dimensional data, as a nested lists,\n * which is similar to matrix, however, unlike matrices,\n * each row may contain a different number of columns.\n * Given lst, and integer x, find integers x in the list,\n * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n * each tuple is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort coordinates of the row by columns in descending order.\n * \n * Examples:\n * get_row([\n *   [1,2,3,4,5,6],\n *   [1,2,3,4,1,6],\n *   [1,2,3,4,5,1]\n * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n * get_row([], 1) == []\n * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n *\n */\nfunction getRow(lst, x) {\n    var coordinates = [],\n        rows = lst.length;\n    \n    for (var i=0; i<rows; i++) {\n        var columns = lst[i].length;\n        \n        for (var j=0; j<columns; j++) {\n            if (x === lst[i][j]) {\n                coordinates.push([i, j]);\n            }\n        }\n    }\n\n    return coordinates;\n}"}
{"task_id": "HumanEval_javascript/88", "language": "javascript", "completion": "/**\n * * Given an array of non-negative integers, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n * or sort it in descending order if the sum( first index value, last index value) is even.\n\n * Note:\n * * don't change the given array.\n\n * Examples:\n * * sort_array([]) => []\n * * sort_array([5]) => [5]\n * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n *\n */\nfunction sortArray(array) {\n\n  if (array.length < 2) {\n    return array;\n  } else {\n\n    var sum = array[0] + array[array.length - 1];\n    //if the sum is odd\n    if (sum % 2 !== 0) {\n      return array.sort(function(a, b){return a-b});\n    }\n    //if the sum is even\n    else {\n      return array.sort(function(a, b){return b - a});\n    }\n  }\n}"}
{"task_id": "HumanEval_javascript/89", "language": "javascript", "completion": "/**\n * Create a function encrypt that takes a string as an argument and\n * returns a string encrypted with the alphabet being rotated. \n * The alphabet should be rotated in a manner such that the letters \n * shift down by two multiplied to two places.\n * For example:\n * encrypt('hi') returns 'lm'\n * encrypt('asdfghjkl') returns 'ewhjklnop'\n * encrypt('gf') returns 'kj'\n * encrypt('et') returns 'ix'\n *\n */\nfunction encrypt(s) {\n  var arr = s.split('');\n  \n  for (var i = 0; i < arr.length; i++) {\n    if ((arr[i].charCodeAt() >= 97 && arr[i].charCodeAt() <= 122)) {\n      arr[i] = String.fromCharCode(arr[i].charCodeAt() - 2 * 2);\n    } else if((arr[i].charCodeAt() >= 65 && arr[i].charCodeAt() <= 90)){\n      arr[i] = String.fromCharCode(arr[i].charCodeAt() - 2 * 2); \n    } \n  }\n  return arr.join('');\n}"}
{"task_id": "HumanEval_javascript/90", "language": "javascript", "completion": "/**\n * * You are given a list of integers.\n * Write a function next_smallest() that returns the 2nd smallest element of the list.\n * Return \"none\" if there is no such element.\n * \n * next_smallest([1, 2, 3, 4, 5]) == 2\n * next_smallest([5, 1, 4, 3, 2]) == 2\n * next_smallest([]) == None\n * next_smallest([1, 1]) == None\n *\n */\nfunction nextSmallest(lst) {\n  if (lst.length < 2) {\n    return 'none';\n  }\n\n  let sorted = lst.sort((a, b) => a - b);\n  // console.log(sorted);\n\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] > sorted[i-1]) {\n      return sorted[i];\n    } \n  }\n\n  return 'none';\n}"}
{"task_id": "HumanEval_javascript/91", "language": "javascript", "completion": "/**\n * * You'll be given a string of words, and your task is to count the number\n * of boredoms. A boredom is a sentence that starts with the word \"I\".\n * Sentences are delimited by '.', '?' or '!'.\n   \n * For example:\n * >>> is_bored(\"Hello world\")\n * 0\n * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n * 1\n *\n */\nfunction isBored(s) {\n  const sentences = s.split(/[.?!]/);\n\n  let boredoms = 0;\n\n  for (let sentence of sentences) {\n    if (sentence.trim().startsWith('I')) {\n      boredoms++;\n    }\n  }\n\n  return boredoms;\n}"}
{"task_id": "HumanEval_javascript/92", "language": "javascript", "completion": "/**\n * Create a function that takes 3 numbers.\n * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n * Returns false in any other cases.\n * \n */\nfunction anyInt(x, y, z) {\n    let number = x + y;\n\n    if (number === x || number === y || number === z) return true;\n    else return false;\n}"}
{"task_id": "HumanEval_javascript/93", "language": "javascript", "completion": "/**\n * * Write a function that takes a message, and encodes in such a \n * way that it swaps case of all letters, replaces all vowels in \n * the message with the letter that appears 2 places ahead of that \n * vowel in the english alphabet. \n * Assume only letters. \n *\n * Examples:\n * >>> encode('test')\n * 'TGST'\n * >>> encode('This is a message')\n * 'tHKS KS C MGSSCGG'\n *\n */\nfunction encode(message) {\n  return message\n    .split('')\n    .map(vowelSwitch)\n    .map(replaceVowels)\n    .join('');\n}\n\n// switch the case of all letters in a string\nfunction vowelSwitch(char) {\n  var charCode = char.charCodeAt(0);\n\n  // if lowercase, make uppercase and vice versa\n  return String.fromCharCode((charCode >= 97 && charCode <= 122)\n    ? (charCode - 32) : (charCode + 32));\n}\n\n// returns the vowel 2 places ahead of the original vowel\nfunction replaceVowels(char) {\n  var index = 'aeiou'.indexOf(char.toLowerCase());\n\n  // if it is a vowel, switch it out\n  return ~index ? 'aeiou'[((index + 2) % 5)] : char;\n}"}
{"task_id": "HumanEval_javascript/94", "language": "javascript", "completion": "/**\n * You are given a list of integers.\n * You need to find the largest prime value and return the sum of its digits.\n\n * Examples:\n * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n * For lst = [0,81,12,3,1,21] the output should be 3\n * For lst = [0,8,1,2,1,7] the output should be 7\n */\nfunction largestPrimeSum(lst) {\n    var i, j, largest = 0,\n        primes = true;\n\n    for (i = 0; i < lst.length; i++) {\n        if (lst[i] > 1) {\n            for (j = 2; j <= lst[i]/2; j++) {\n                if ((lst[i] % j) == 0) {\n                    primes = false;\n                    break;\n                }\n            }\n            if (primes && lst[i] > largest) {\n                largest = lst[i];\n            }\n        }\n    }\n\n    var sum = 0;\n    while(largest != 0){\n        sum += largest % 10;\n        largest = Math.floor(largest/10);\n    }\n\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/95", "language": "javascript", "completion": "/**\n * * Given a dictionary, return True if all keys are strings in lower \n * case or all keys are strings in upper case, else return False.\n * The function should return False is the given dictionary is empty.\n * Examples:\n * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n *\n */\nfunction checkDictCase(dict) {\n    var case = 'unset';\n    for (var key in dict){\n        if (key === key.toUpperCase()){\n            if (case !== 'upper') {\n                case = 'lower';\n            }\n        } else if (key === key.toLowerCase()) {\n            if (case !== 'lower') {\n                case = 'upper';\n            }\n        } else {\n            return false; //if not upper or lowercase\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_javascript/96", "language": "javascript", "completion": "/**\n * Implement a function that takes an non-negative integer and returns an array of the first n\n * integers that are prime numbers and less than n.\n * for example:\n * count_up_to(5) => [2,3]\n * count_up_to(11) => [2,3,5,7]\n * count_up_to(0) => []\n * count_up_to(20) => [2,3,5,7,11,13,17,19]\n * count_up_to(1) => []\n * count_up_to(18) => [2,3,5,7,11,13,17]\n *\n */\nfunction countUpTo(n) {\n  // Your code here\n}"}
{"task_id": "HumanEval_javascript/97", "language": "javascript", "completion": "/**\n *Complete the function that takes two integers and returns \n * the product of their unit digits.\n * Assume the input is always valid.\n * Examples:\n * multiply(148, 412) should return 16.\n * multiply(19, 28) should return 72.\n * multiply(2020, 1851) should return 0.\n * multiply(14,-15) should return 20.\n *\n */\nfunction multiply(a, b) {\n    function getUnitDigit(number) {\n        return number % 10;\n    }\n\n    function isZero(number) {\n        return number === 0;\n    }\n\n    var aUnit = getUnitDigit(a);\n    var bUnit = getUnitDigit(b);\n\n    if (isZero(aUnit) || isZero(bUnit)) {\n        return 0;\n    }\n\n    return aUnit * bUnit;\n}"}
{"task_id": "HumanEval_javascript/98", "language": "javascript", "completion": "/**\n * * Given a string s, count the number of uppercase vowels in even indices.\n * \n * For example:\n * count_upper('aBCdEf') returns 1\n * count_upper('abcdefg') returns 0\n * count_upper('dBBE') returns 0\n *\n */\nfunction countUpper(s) {\n  var vowels = ['A', 'E', 'I', 'O', 'U'];\n  var result = 0;\n  \n  for (var i = 0; i < s.length; i += 2) {\n    if (vowels.indexOf(s[i]) !== -1 && i % 2 === 0) {\n      result++;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/99", "language": "javascript", "completion": "/**\n * * Create a function that takes a value (string) representing a number\n * and returns the closest integer to it. If the number is equidistant\n * from two integers, round it away from zero.\n\n * Examples\n * >>> closest_integer(\"10\")\n * 10\n * >>> closest_integer(\"15.3\")\n * 15\n\n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. For example closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n *\n */\nfunction closestInteger(value) {\n  // Convert value to a number\n  let number = Number(value);\n\n  if (Number.isInteger(number)) {\n    return number;\n  } else {\n    let splitValue = value.split('.');\n\n    let firstPart = Number(splitValue[0]);\n    let secondPart = Number(`0.${splitValue[1]}`);\n\n    // Check to see which is closest and round it away from zero.\n    if (firstPart + secondPart >= 0) {\n      return Math.ceil(number);\n    } else {\n      return Math.floor(number);\n    }\n  }\n}\n\n\nmodule.exports = {closestInteger};"}
{"task_id": "HumanEval_javascript/100", "language": "javascript", "completion": "/**\n * * Given a positive integer n, you have to make a pile of n levels of stones.\n * The first level has n stones.\n * The number of stones in the next level is:\n *     - the next odd number if n is odd.\n *     - the next even number if n is even.\n * Return the number of stones in each level in a list, where element at index\n * i represents the number of stones in the level (i+1).\n\n * Examples:\n * >>> make_a_pile(3)\n * [3, 5, 7]\n *\n */\nfunction makeAPile(n) {\n    var count = n;\n    var levels = [];\n\n    while (count >= 0) {\n        levels.push(count);\n        if (count === 0)\n            break;\n\n        count += (count % 2) ? 1 : 2;\n    }\n    \n    return levels.reverse();\n}"}
{"task_id": "HumanEval_javascript/101", "language": "javascript", "completion": "/**\n * * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n * \n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n *\n */\nfunction wordsString(s) {\n    return s.replace(/[\\., ]/g,' ').trim().split(' ');\n}"}
{"task_id": "HumanEval_javascript/102", "language": "javascript", "completion": "/**\n * This function takes two positive numbers x and y and returns the\n * biggest even integer number that is in the range [x, y] inclusive. If \n * there's no such number, then the function should return -1.\n\n * For example:\n * choose_num(12, 15) = 14\n * choose_num(13, 12) = -1\n *\n */\nfunction chooseNum(x, y) {\n  if (x % 2 !== 0) {\n    x++;\n  }\n\n  while (y > x && y % 2 !== 0) {\n    y--;\n  }\n\n  return (y < x) ? -1 : y;\n}"}
{"task_id": "HumanEval_javascript/103", "language": "javascript", "completion": "/**\n * You are given two positive integers n and m, and your task is to compute the\n * average of the integers from n through m (including n and m). \n * Round the answer to the nearest integer and convert that to binary.\n * If n is greater than m, return -1.\n * Example:\n * rounded_avg(1, 5) => \"0b11\"\n * rounded_avg(7, 5) => -1\n * rounded_avg(10, 20) => \"0b1111\"\n * rounded_avg(20, 33) => \"0b11010\"\n *\n */\nfunction roundedAvg(n, m) {\n  let sum = n + m;\n  let avg = Math.round(sum / 2);\n\n  if (n > m){\n    return -1;\n  } else {\n    return '0b' + avg.toString(2);\n  }\n}"}
{"task_id": "HumanEval_javascript/104", "language": "javascript", "completion": "/**\n * Given a list of positive integers x. return a sorted list of all \n * elements that hasn't any even digit.\n\n * Note: Returned list should be sorted in increasing order.\n * \n * For example:\n * >>> unique_digits([15, 33, 1422, 1])\n * [1, 15, 33]\n * >>> unique_digits([152, 323, 1422, 10])\n * []\n *\n */\nfunction uniqueDigits(x) {\n    var result = [],\n        len = x.length;\n\n    // Go through the array and remove all elements that have even \n    // numbered digits\n    for (var i = 0; i < len; ++i) {\n        var elem = x[i],\n            str = String(elem),\n            len = str.length,\n            hasEven = false;\n\n        // Check if element's string representation contains an \n        // even number\n        for (var j = 0; j < len && !hasEven; ++j)\n            hasEven |= (+str[j]) % 2 === 0;\n\n        // If no even digits are found, add it to result array\n        if (!hasEven)\n            result.push(elem);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/105", "language": "javascript", "completion": "/**\n * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n * For example:\n *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n * \n *   If the array is empty, return an empty array:\n *   arr = []\n *   return []\n * \n *   If the array has any strange number ignore it:\n *   arr = [1, -1 , 55] \n *         -> sort arr -> [-1, 1, 55]\n *         -> reverse arr -> [55, 1, -1]\n *   return = ['One']\n *\n */\nfunction byLength(arr) {\n  // Solution here\n  \n  let arrNew = arr.filter((x) => x >= 0 && x <= 9);\n  arrNew.sort();\n  arrNew.reverse();\n  \n  let result = [];\n\n  for (let i of arrNew){\n    switch (i){\n      case 1:\n        result.push(\"One\");\n        break;\n      case 2: \n        result.push(\"Two\");\n        break;\n      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n        break;\n      case 7: \n        result.push(\"Seven\");\n        break;\n      case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"Nine\");\n        break;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/106", "language": "javascript", "completion": "/**\n * Implement the function f that takes n as a parameter,\n * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n * or the sum of numbers from 1 to i otherwise.\n * i starts from 1.\n * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n * Example:\n * f(5) == [1, 2, 6, 24, 15]\n */\nfunction f(n) {\n  let result = []\n\n  for (let i = 0; i < n; i += 1) {\n    if (i % 2 === 0) {\n      result.push(factorial(i))\n    } else {\n      result.push(sumRange(i))\n    }\n  }\n\n  return result\n}\n\n\n/**\n * Compute the factorial of a given number n\n */\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1\n  } else {\n    let accumulator = 1\n\n    for (let i = 2; i <= n; i += 1) {\n      accumulator *= i\n    }\n\n    return accumulator\n  }\n}\n\n\n/**\n * Compute the sum of numbers from 1 to n\n */\nfunction sumRange(n) {\n  if (n === 0) {\n    return 0\n  } else {\n    let accumulator = 0\n\n    for (let i = 1; i <= n; i += 1) {\n      accumulator += i\n    }\n\n    return accumulator\n  }\n}"}
{"task_id": "HumanEval_javascript/107", "language": "javascript", "completion": "/**\n * * Given a positive integer n, return a tuple that has the number of even and odd\n * integer palindromes that fall within the range(1, n), inclusive.\n\n * Example 1:\n\n *     Input: 3\n *     Output: (1, 2)\n *     Explanation:\n *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n * Example 2:\n\n *     Input: 12\n *     Output: (4, 6)\n *     Explanation:\n *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n * Note:\n *     1. 1 <= n <= 10^3\n *     2. returned tuple has the number of even and odd integer palindromes respectively.\n *\n */\nfunction evenOddPalindrome(n) {\n  var countEven = 0;\n  var countOdd = 0;\n\n  for (var i = 1; i <= n; i++) {\n    if (isIntegerPalindrome(i)) {\n      if (i % 2 === 0) {\n        countEven++;\n      } else {\n        countOdd++;\n      }\n    }\n  }\n\n  return [countEven, countOdd];\n}\n\nfunction isIntegerPalindrome(n) {\n  var nStr = String(n);\n  for (var i = 0; i < Math.floor(nStr.length / 2); i++) {\n    if (nStr[i] !== nStr[nStr.length - 1 - i]) {\n      return false;\n    }\n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_javascript/108", "language": "javascript", "completion": "/**\n * Write a function count_nums which takes an array of integers and returns the number of elements which has a sum of digits > 0.\n * If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n */\nfunction countNums(arr) {\n    let count = 0;\n\n    arr.forEach((n) => {\n        if (n < 0 && n > -9){\n            console.log('n', n);\n            const stringN = n.toString();\n\n            for (let i = 0; i < stringN.length; i += 1) {\n                console.log(stringN[i]);\n\n                if (parseInt(stringN[i], 10) > 0){\n                    count += 1;\n                }\n            }\n        } else {\n\n        }\n    });\n\n    return count;\n}"}
{"task_id": "HumanEval_javascript/109", "language": "javascript", "completion": "/**\n * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n * numbers in the array will be randomly ordered. Your task is to determine if\n * it is possible to get an array sorted in non-decreasing order by performing \n * the following operation on the given array:\n *     You are allowed to perform right shift operation any number of times.\n * \n * One right shift operation means shifting all elements of the array by one\n * position in the right direction. The last element of the array will be moved to\n * the starting position in the array i.e. 0th index. \n\n * If it is possible to obtain the sorted array by performing the above operation\n * then return True else return False.\n * If the given array is empty then return True.\n\n * Note: The given list is guaranteed to have unique elements.\n\n * For Example:\n * \n * move_one_ball([3, 4, 5, 1, 2])==>True\n * Explanation: By performin 2 right shift operations, non-decreasing order can\n *              be achieved for the given array.\n * move_one_ball([3, 5, 4, 1, 2])==>False\n * Explanation:It is not possible to get non-decreasing order for the given\n *             array by performing any number of right shift operations.\n             \n *\n */\nfunction moveOneBall(arr) {\n    var index=0;\n    \n    for(var i=1;i<arr.length;i++){\n        if(arr[i] < arr[index]){\n            index = i;\n        }\n    }\n    \n    for(var j=0;j<arr.length-1;j++){\n        if(arr[j]>arr[j+1]){\n            return false;\n        }\n    }\n\n    if(index === 0) {\n        return true;\n    } else {\n        return arr.slice(index,arr.length).concat(arr.slice(0,index)).toString() === arr.sort().toString();\n    }\n}"}
{"task_id": "HumanEval_javascript/110", "language": "javascript", "completion": "/**\n * In this problem, you will implement a function that takes two lists of numbers,\n * and determines whether it is possible to perform an exchange of elements\n * between them to make lst1 a list of only even numbers.\n * There is no limit on the number of exchanged elements between lst1 and lst2.\n * If it is possible to exchange elements between the lst1 and lst2 to make\n * all the elements of lst1 to be even, return \"YES\".\n * Otherwise, return \"NO\".\n * For example:\n * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n * It is assumed that the input lists will be non-empty.\n */\nfunction exchange(lst1, lst2) {\n\n    if (lst1.length !== lst2.length) return 'NO';\n    const map = {};\n    for (let i = 0; i < lst1.length; i++) {\n        if (!map[lst1[i]])\n            map[lst1[i]] = true;\n    }\n    let result = 'YES';\n    for (let j = 0; j < lst2.length; j++) {\n        if(map[lst2[j]]){\n            delete map[lst2[j]];\n        } else {\n            result = 'NO';\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO"}
{"task_id": "HumanEval_javascript/111", "language": "javascript", "completion": "/**\n * Given a string representing a space separated lowercase letters, return a dictionary\n * of the letter with the most repetition and containing the corresponding count.\n * If several letters have the same occurrence, return all of them.\n * \n * Example:\n * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n * histogram('a b b a') == {'a': 2, 'b': 2}\n * histogram('a b c a b') == {'a': 2, 'b': 2}\n * histogram('b b b b a') == {'b': 4}\n * histogram('') == {}\n\n *\n */\nfunction histogram(test) {\n  var words = test.split(' ');\n  var dict = {};\n\n  for (var i=0; i<words.length; i++) {\n    var word = words[i].charAt(0).toLowerCase();\n\n    if (dict[word]) {\n      dict[word] += 1;\n    } else {\n      dict[word] = 1;\n    }\n  }\n\n  return dict;\n}"}
{"task_id": "HumanEval_javascript/112", "language": "javascript", "completion": "/**\n * Task\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n * then check if the result string is palindrome.\n * A string is called palindrome if it reads the same backward as forward.\n * You should return a tuple containing the result string and True/False for the check.\n * Example\n * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n *\n */\nfunction reverseDelete(s, c) {\n    var i, j;\n\n    // remove characters in string 's' that are found in string 'c'\n    for (i = s.length - 1; i >=0; i--) {\n        for (j = 0; j < c.length; j++) {\n            if(s[i] === c[j]) {\n                s = s.slice(0,i) + s.slice(i+1);\n            }\n        }\n    }\n\n    // check if string is palindrome\n    var palindrome = true;\n    for (i = 0; i < Math.floor(s.length / 2); i++) {\n        if (s[i] !== s[s.length - i - 1]) {\n            palindrome = false;\n        }\n    }\n\n    return [s,palindrome];\n}"}
{"task_id": "HumanEval_javascript/113", "language": "javascript", "completion": "/**\n * Given a list of strings, where each string consists of only digits, return a list.\n * Each element i of the output should be \"the number of odd elements in the\n * string i of the input.\" where all the i's should be replaced by the number\n * of odd digits in the i'th string of the input.\n\n * >>> odd_count(['1234567'])\n * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n * >>> odd_count(['3',\"11111111\"])\n * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n *\n */\nfunction oddCount(lst) {\n\n    // Use a for loop to iterate through list\n    // Use an if statement inside your for loop to check that each element is an integer\n    // Use a while loop to count the number of odd digits in a given string\n    // Use replace() method to replace all occurrences of i with the number of odd digits in the ith string"}
{"task_id": "HumanEval_javascript/114", "language": "javascript", "completion": "/**\n * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n * minSubArraySum([-1, -2, -3]) == -6\n *\n */\nfunction minsubarraysum(nums) {\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n}"}
{"task_id": "HumanEval_javascript/115", "language": "javascript", "completion": "/**\n * * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n\n * Example 1:\n *     Input: \n *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         bucket_capacity : 1\n *     Output: 6\n\n * Example 2:\n *     Input: \n *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         bucket_capacity : 2\n *     Output: 5\n * \n * Example 3:\n *     Input: \n *         grid : [[0,0,0], [0,0,0]]\n *         bucket_capacity : 5\n *     Output: 0\n\n * Constraints:\n *     * all wells have the same length\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= capacity <= 10\n *\n */\n\n function maxFill(grid, capacity) {\n    let result = 0;\n\n    for (let i = 0; i < grid.length; i++) {\n        const well = grid[i];\n        let count = 0;\n\n        for (let j = 0; j < well.length; j++) {\n            if (well[j] === 1) {\n                count++;\n            } else {\n                count = 0;\n            }\n\n            if (count >= capacity) {\n                result += Math.floor(count / capacity);\n                count %= capacity;\n            }\n        }\n\n        result += Math.floor(count / capacity);\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/116", "language": "javascript", "completion": "/**\n * * In this Kata, you have to sort an array of non-negative integers according to\n * number of ones in their binary representation in ascending order.\n * For similar number of ones, sort based on decimal value.\n\n * It must be implemented like this:\n * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n *\n */\nfunction sortArray(arr) {\n  return arr.sort((a, b) => {\n    const aBits = countBits(a).toString().padStart(8, '0');\n    const bBits = countBits(b).toString().padStart(8, '0');\n\n    return (aBits > bBits) ? 1 :\n           (aBits < bBits) ? -1 :\n           (a > b) ? 1 : -1;\n  });\n}\n\nfunction countBits(num) {\n  let bits = 0;\n\n  while (num !== 0) {\n    if (num % 2 === 1) {\n      bits++;\n    }\n    num /= 2;\n  }\n\n  return bits;\n}"}
{"task_id": "HumanEval_javascript/117", "language": "javascript", "completion": "/**\n * Given a string s and a natural number n, you have been tasked to implement \n * a function that returns a list of all words from string s that contain exactly \n * n consonants, in order these words appear in the string s.\n * If the string s is empty then the function should return an empty list.\n * Note: you may assume the input string contains only letters and spaces.\n * Examples:\n * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n * select_words(\"simple white space\", 2) ==> []\n * select_words(\"Hello world\", 4) ==> [\"world\"]\n * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n *\n */\nfunction selectWords(s, n) {\n    var wordList = s.split(\" \");\n    var resultList = [];\n    \n    for (var i = 0; i < wordList.length; i++) {\n        if (countVowels(wordList[i]) == n) {\n            resultList.push(wordList[i]);\n        }\n    }\n    return resultList;\n}\n\nfunction countVowels(word) {\n    var vowels = 'aeiou';\n    var counter = 0;\n    \n    for (var i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i]) === -1) {\n            counter++;\n        }\n    }\n    \n    return counter;\n}"}
{"task_id": "HumanEval_javascript/118", "language": "javascript", "completion": "/**\n * You are given a word. Your task is to find the closest vowel that stands between \n * two consonants from the right side of the word (case sensitive).\n * \n * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n * find any vowel met the above condition. \n\n * You may assume that the given string contains English letter only.\n\n * Example:\n * get_closest_vowel(\"yogurt\") ==> \"u\"\n * get_closest_vowel(\"FULL\") ==> \"U\"\n * get_closest_vowel(\"quick\") ==> \"\"\n * get_closest_vowel(\"ab\") ==> \"\"\n *\n */\nfunction getClosestVowel(word) {\n  // Write your code here\n\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var rightIndex = word.length - 1;\n\n  while (rightIndex >=0 && !vowels.includes(word[rightIndex])) {\n    rightIndex--;\n  }\n\n\n  if (rightIndex === -1) {\n  \treturn \"\";\n  }\n\n  for (var i=rightIndex-1; i>=0; i--) {\n  \t\n    if (!vowels.includes(word[i])) {\n    \tcontinue;\n    }\n\n    return word[i];\n  }\n\n  return \"\";\n}"}
{"task_id": "HumanEval_javascript/119", "language": "javascript", "completion": "/**\n * * You are given a list of two strings, both strings consist of open\n * parentheses '(' or close parentheses ')' only.\n * Your job is to check if it is possible to concatenate the two strings in\n * some order, that the resulting string will be good.\n * A string S is considered to be good if and only if all parentheses in S\n * are balanced. For example: the string '(())()' is good, while the string\n * '())' is not.\n * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n * Examples:\n * match_parens(['()(', ')']) == 'Yes'\n * match_parens([')', ')']) == 'No'\n *\n */\nfunction matchParens(lst) {\n    let stack = [];\n    for (let i=0; i<lst[0].length+lst[1].length; i++) {\n        if (i<lst[0].length) {\n            // Push left string to the stack\n            stack.push(lst[0][i]);\n        } else {\n            // Pop from the stack for right string\n            if (!stack.length || lst[1][i-lst[0].length] != stack.pop()) return 'No';\n        }\n    }\n    return stack.length ? 'No' : 'Yes';\n}"}
{"task_id": "HumanEval_javascript/120", "language": "javascript", "completion": "/**\n * * Given an array arr of integers and a positive integer k, return a sorted list \n * of length k with the maximum k numbers in arr.\n\n * Example 1:\n\n *     Input: arr = [-3, -4, 5], k = 3\n *     Output: [-4, -3, 5]\n\n * Example 2:\n\n *     Input: arr = [4, -4, 4], k = 2\n *     Output: [4, 4]\n\n * Example 3:\n\n *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n *     Output: [2]\n\n * Note:\n *     1. The length of the array will be in the range of [1, 1000].\n *     2. The elements in the array will be in the range of [-1000, 1000].\n *     3. 0 <= k <= len(arr)\n *\n */\nfunction maximum(arr, k) {\n    arr = arr.sort();\n    return arr.slice(-k);\n}"}
{"task_id": "HumanEval_javascript/121", "language": "javascript", "completion": "/**\n * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n * \n\n * Examples\n * solution([5, 8, 7, 1]) ==> 12\n * solution([3, 3, 3, 3, 3]) ==> 9\n * solution([30, 13, 24, 321]) ==>0\n *\n */\nfunction solution(lst) {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result.reduce((acc, val) => acc + val);\n}"}
{"task_id": "HumanEval_javascript/122", "language": "javascript", "completion": "/**\n * * Given a non-empty array of integers arr and an integer k, return\n * the sum of the elements with at most two digits from the first k elements of arr.\n\n * Example:\n\n *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n *     Output: 24 # sum of 21 + 3\n\n * Constraints:\n *     1. 1 <= len(arr) <= 100\n *     2. 1 <= k <= len(arr)\n *\n */\nfunction addElements(arr, k) {\n  // set a variable to hold our sum\n  let sum = 0;\n\n  for (let i = 0; i < k; i++) {\n    if (String(arr[i]).length <= 2) {\n      sum += arr[i];\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_javascript/123", "language": "javascript", "completion": "/**\n * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n * as follows: start with any positive integer n. Then each term is obtained from the \n * previous term as follows: if the previous term is even, the next term is one half of \n * the previous term. If the previous term is odd, the next term is 3 times the previous\n * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n * Note: \n *     1. Collatz(1) is [1].\n *     2. returned list sorted in increasing order.\n\n * For example:\n * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n *\n */\nfunction getOddCollatz(n) {\n    let numberList = [],\n        sequence = [];\n\n    while (numberList.indexOf(n) === -1 && n > 0) {\n        numberList.push(n);\n\n        if (n % 2 === 0) {\n            n /= 2;\n        } else {\n            n *= 3;\n            n += 1;\n        }\n    }\n\n    for (let i = 0; i < numberList.length; i++) {\n        if (numberList[i] % 2 !== 0) {\n            sequence.push(numberList[i]);\n        }\n    }\n\n    return sequence.sort((a, b) => a - b);\n}"}
{"task_id": "HumanEval_javascript/124", "language": "javascript", "completion": "/**\n * You have to write a function which validates a given date string and\n * returns True if the date is valid otherwise False.\n * The date is valid if all of the following rules are satisfied:\n * 1. The date string is not empty.\n * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n * 3. The months should not be less than 1 or higher than 12.\n * 4. The date should be in the format: mm-dd-yyyy\n\n * for example: \n * valid_date('03-11-2000') => True\n\n * valid_date('15-01-2012') => False\n\n * valid_date('04-0-2040') => False\n\n * valid_date('06-04-2020') => True\n\n * valid_date('06/04/2020') => False\n *\n */\nfunction validDate(date) {\n    var date = date.split('-');\n\n    if (date.length != 3) return false;\n\n    var month = parseInt(date[0]);\n    var day = parseInt(date[1]);\n    var year = parseInt(date[2]);\n\n    // check the format\n    if (month < 1 || month > 12 || isNaN(day) || isNaN(year))\n        return false;\n\n    switch (month) {\n        case 2:\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day < 1 || day > 29)\n                    return false;\n            } else {\n                if (day < 1 || day > 28)\n                    return false;\n            }\n            break;\n\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n            if (day < 1 || day > 30)\n                return false;\n            break;\n\n        default:\n            if (day < 1 || day > 31)\n                return false;\n    }\n\n    return true;\n}"}
{"task_id": "HumanEval_javascript/125", "language": "javascript", "completion": "/**\n * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n * Examples\n * split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n * split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n * split_words(\"abcdef\") == 3 \n *\n */\nfunction splitWords(txt) {\n  if (txt.includes(' ')) {\n    return txt.split(/\\s+/);\n  } else if (txt.includes(',')) {\n    return txt.split(',');\n  } else {\n    let oddLetters = 0;\n    for (let i = 97; i < 123; i++) {\n      const letter = String.fromCharCode(i);\n      const index = txt.toLowerCase().indexOf(letter);\n\n      if (index > -1 && index % 2 !== 0) oddLetters++;\n    }\n\n    return oddLetters;\n  }\n}"}
{"task_id": "HumanEval_javascript/126", "language": "javascript", "completion": "/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order. If list has more than 1 duplicate of the same\n * number, return False. Assume no negative numbers and only integers.\n *\n * Examples\n * is_sorted([5])\ufffd\ufffd True\n * is_sorted([1, 2, 3, 4, 5])\ufffd\ufffd True\n * is_sorted([1, 3, 2, 4, 5])\ufffd\ufffd False\n * is_sorted([1, 2, 3, 4, 5, 6])\ufffd\ufffd True\n * is_sorted([1, 2, 3, 4, 5, 6, 7])\ufffd\ufffd True\n * is_sorted([1, 3, 2, 4, 5, 6, 7])\ufffd\ufffd False\n * is_sorted([1, 2, 2, 3, 3, 4])\ufffd\ufffd True\n * is_sorted([1, 2, 2, 2, 3, 4])\ufffd\ufffd False\n */\nfunction isSorted(lst) {\n  let result = true;\n\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/127", "language": "javascript", "completion": "/**\n * You are given two intervals,\n * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n * The given intervals are closed which means that the interval (start, end)\n * includes both start and end.\n * For each given interval, it is assumed that its start is less or equal its end.\n * Your task is to determine whether the length of intersection of these two \n * intervals is a prime number.\n * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n * which its length is 1, which not a prime number.\n * If the length of the intersection is a prime number, return \"YES\",\n * otherwise, return \"NO\".\n * If the two intervals don't intersect, return \"NO\".\n\n\n * [input/output] samples:\n * intersection((1, 2), (2, 3)) ==> \"NO\"\n * intersection((-1, 1), (0, 4)) ==> \"NO\"\n * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n *\n */\nfunction isPrime(num) {\n  for (var i = 2; i < num; i += 1) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}\n\n\nfunction intersection(interval1, interval2) {\n  const min = Math.max(interval1[0], interval2[0]);\n  const max = Math.min(interval1[1], interval2[1]);\n\n  if (max >= min) {\n    return isPrime(max - min + 1) ? 'YES' : 'NO';\n  } else {\n    return 'NO';\n  }\n}"}
{"task_id": "HumanEval_javascript/128", "language": "javascript", "completion": "/**\n * You are given an array arr of integers and you need to return\n * sum of magnitudes of integers multiplied by product of all signs\n * of each number in the array, represented by 1, -1 or 0.\n * Note: return \"none\" for empty arr.\n\n * Example:\n * >>> prod_signs([1, 2, 2, -4]) == -9\n * >>> prod_signs([0, 1]) == 0\n * >>> prod_signs([]) == None\n *\n */\nfunction prodSigns(arr) {\n    var sign = 1;\n    var sum = 0;\n\n    if (arr.length === 0)\n        return \"none\";\n\n    for (var i=0, len=arr.length; i<len; i++) {\n        if (arr[i] > 0)\n            sign *= 1;\n        else if (arr[i] < 0)\n            sign *= -1;\n        sum += Math.abs(arr[i]);\n    }\n\n    return sum * sign;\n}"}
{"task_id": "HumanEval_javascript/129", "language": "javascript", "completion": "/**\n * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n\n * You have to find the minimum path of length k in the grid. You can start\n * from any cell, and in each step you can move to any of the neighbor cells,\n * in other words, you can go to cells which share an edge with you current\n * cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n\n * Examples:\n\n *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n *     Output: [1, 2, 1]\n\n *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n *     Output: [1]\n *\n */\nfunction minpath(grid, k) {\n    var minPathValue = Number.MAX_VALUE;\n    var minPath = [];\n    \n    function helper (row, col, k, path) {\n        if (k == 0 || row < 0 || col < 0 || row >= grid.length || col >= grid[0].length) return;\n        \n        path.push(grid[row][col]);\n        \n        if (k === 1) {\n            minPathValue = Math.min(minPathValue, grid[row][col]);\n            \n            if (minPathValue == grid[row][col]) {\n                minPath = path.slice(); //shallow copy the array\n            }\n        } else {\n            helper(row - 1, col, k - 1, path); //up\n            helper(row + 1, col, k - 1, path); //down\n            helper(row, col - 1, k - 1, path); //left\n            helper(row, col + 1, k - 1, path); //right\n        }\n        \n        path.pop();\n    };\n    \n    for (var i = 0; i < grid.length; i++) {\n        for (var j = 0; j < grid[i].length; j++) {\n            helper(i, j, k, []);\n        }\n    }\n    \n    return minPath;\n}"}
{"task_id": "HumanEval_javascript/130", "language": "javascript", "completion": "/**\n * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n * the last couple centuries. However, what people don't know is Tribonacci sequence.\n * Tribonacci sequence is defined by the recurrence:\n * tri(1) = 3\n * tri(n) = 1 + n / 2, if n is even.\n * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n * For example:\n * tri(2) = 1 + (2 / 2) = 2\n * tri(4) = 3\n * tri(3) = tri(2) + tri(1) + tri(4)\n *        = 2 + 3 + 3 = 8 \n * You are given a non-negative integer number n, you have to a return a list of the \n * first n + 1 numbers of the Tribonacci sequence.\n * Examples:\n * tri(3) = [1, 3, 2, 8]\n *\n */\nfunction tri(n) {\n    var res = [1, 3, 2]; // base cases\n    \n    for (var i=0;i<n;i++) {\n        if ((res.length-1)%2 === 0) {\n            res[res.length-1] = Math.floor((res.length-1)/2);\n            res.push(res[res.length-3]+res[res.length-2]);\n        } else {\n            res[res.length-1] = (res.length-1)+0.5;\n            res.unshift(res[res.length-3]+res[res.length-2]);\n        }\n    }\n\n    return res;\n}"}
{"task_id": "HumanEval_javascript/131", "language": "javascript", "completion": "/**\n * Given a positive integer n, return the product of the odd digits.\n * Return 0 if all digits are even.\n * For example:\n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n */\nfunction digits(n) {\n    var str = String(n);\n    for (var i=str.length-1; i>=0; i--) {\n        if (parseInt(str[i]) % 2 === 0) {\n            return 0;\n        }\n    }\n\n    var product = 1;\n    for (var j=0; j<str.length; j++) {\n        if (parseInt(str[j]) % 2 !== 0) {\n            product *= parseInt(str[j]);\n        }\n    }\n\n    return product;\n}"}
{"task_id": "HumanEval_javascript/132", "language": "javascript", "completion": "/**\n * * Create a function that takes a string as input which contains only square brackets.\n * The function should return True if and only if there is a valid subsequence of brackets \n * where at least one bracket in the subsequence is nested.\n\n * is_nested('[[]]')\ufffd\ufffd True\n * is_nested('[]]]]]]][[[[[]')\ufffd\ufffd False\n * is_nested('[][]')\ufffd\ufffd False\n * is_nested('[]')\ufffd\ufffd False\n * is_nested('[[][]]')\ufffd\ufffd True\n * is_nested('[[]][[')\ufffd\ufffd True\n *\n */\nfunction isNested(string) {\n    let count = 0;\n\n    for (let i=0; i<string.length; i++) {\n        if (string[i] === '[') {\n            count++;\n        } else if (string[i] === ']') {\n            count--;\n        }\n\n        if (count < 0) {\n            return false;\n        }\n    }\n\n    return count > 0 ? true : false;\n}"}
{"task_id": "HumanEval_javascript/133", "language": "javascript", "completion": "/**\n * You are given a list of numbers.\n * You need to return the sum of squared numbers in the given list,\n * round each element in the list to the upper int(Ceiling) first.\n * Examples:\n * For lst = [1,2,3] the output should be 14\n * For lst = [1,4,9] the output should be 98\n * For lst = [1,3,5,7] the output should be 84\n * For lst = [1.4,4.2,0] the output should be 29\n * For lst = [-2.4,1,1] the output should be 6\n * \n\n *\n */\nfunction sumSquares(lst) {\n  let arr = [];\n  let result = 0;\n  for (let i of lst){\n    if (i < 0){\n      i = Math.abs(i);\n    }\n    let n = Math.ceil(i);\n    let square = Math.pow(n,2);\n    result += square;\n  }\n  return result;\n}"}
{"task_id": "HumanEval_javascript/134", "language": "javascript", "completion": "/**\n * * Create a function that returns True if the last character\n * of a given string is an alphabetical character and is not\n * a part of a word, and False otherwise.\n * Note: \"word\" is a group of characters separated by space.\n\n * Examples:\n * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n * check_if_last_char_is_a_letter(\"\") \u279e False \n *\n */\nfunction checkIfLastCharIsALetter(txt) {\n    if (txt.length === 0){\n        return false;\n    }\n    var lastIndex = txt.length - 1;\n\n    if (/[a-z]/.test(txt[lastIndex])){\n        for (var i = lastIndex; i >= 0; i--) {\n            if (/\\s/.test(txt[i]) && /[a-z]/.test(txt[i + 1])){\n                return false;\n            } else if(/\\W/.test(txt[i])) {\n                return true;\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_javascript/135", "language": "javascript", "completion": "/**\n * Create a function which returns the largest index of an element which\n * is not greater than or equal to the element immediately preceding it. If\n * no such element exists then return -1. The given array will not contain\n * duplicate values.\n\n * Examples:\n * can_arrange([1,2,4,3,5]) = 3\n * can_arrange([1,2,3]) = -1\n *\n */\nfunction canArrange(arr) {\n  let sortedArray = arr.sort((a,b) => a-b);\n  for (let i = 0; i < sortedArray.length-1; i++) {\n    if (sortedArray[i] < sortedArray[i+1]) return i+1;\n  }\n}"}
{"task_id": "HumanEval_javascript/136", "language": "javascript", "completion": "/**\n * * Create a function that returns a tuple (a, b), where 'a' is\n * the largest of negative integers, and 'b' is the smallest\n * of positive integers in a list.\n * If there is no negative or positive integers, return them as None.\n\n * Examples:\n * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n * largest_smallest_integers([]) == (None, None)\n * largest_smallest_integers([0]) == (None, None)\n *\n */\nfunction largestSmallestIntegers(lst) {\n    if (lst.length === 0) {\n        return [null, null];\n    }\n\n    let negative = [];\n    let positive = [];\n\n    lst.forEach((item) => {\n        if (item < 0) {\n            negative.push(item);\n        } else if (item > 0) {\n            positive.push(item);\n        }\n    });\n\n    if (negative.length === 0 || positive.length === 0) {\n        return [null, null];\n    }\n\n    let a = Math.max(...negative);\n    let b = Math.min(...positive);\n\n    return [a, b];\n}"}
{"task_id": "HumanEval_javascript/137", "language": "javascript", "completion": "/**\n * * Create a function that takes integers, floats, or strings representing\n * real numbers, and returns the larger variable in its given variable type.\n * Return \"none\" if the values are equal.\n * Note: If a real number is represented as a string, the floating point might be . or ,\n\n * compare_one(1, 2.5)\ufffd\ufffd 2.5\n * compare_one(1, \"2,3\")\ufffd\ufffd \"2,3\"\n * compare_one(\"5,1\", \"6\")\ufffd\ufffd \"6\"\n * compare_one(\"1\", 1)\ufffd\ufffd None\n */\nfunction compareOne(a, b){\n    if(typeof a === 'string' || typeof b === 'string'){\n        let numA = Number(a.replace(/[^\\d.-]/g, ''))\n        let numB = Number(b.replace(/[^\\d.-]/g,''))\n        return (numA > numB) ? numA : (numB > numA) ? numB : 'none';\n    } else {\n        return (a > b) ? a : (b > a) ? b : 'none';\n    }\n}"}
{"task_id": "HumanEval_javascript/138", "language": "javascript", "completion": "/**\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n * Example\n * is_equal_to_sum_even(4) == False\n * is_equal_to_sum_even(6) == False\n * is_equal_to_sum_even(8) == True\n *\n */\nfunction isEqualToSumEven(n) {\n  // Write your code here\n\n  let counter = 0;\n  for (let i = 2; i < n && counter < 4; i += 2) {\n    let number = n - i;\n    if (isEven(number)) {\n      counter++;\n    }\n  }\n  return counter === 4;\n}\n\nfunction isEven(num) {\n  // Write your code here\n\n  return num % 2 === 0;\n}"}
{"task_id": "HumanEval_javascript/139", "language": "javascript", "completion": "/**\n * The Brazilian factorial is defined as:\n * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n * where n > 0\n\n * For example:\n * >>> special_factorial(4)\n * 288\n\n * The function will receive an integer as input and should return the special\n * factorial of this integer.\n *\n */\nfunction specialFactorial(n) {\n  let result = 1;\n\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/140", "language": "javascript", "completion": "/**\n * * Given a string text, replace all spaces in it with underscores, \n * and if a string has more than 2 consecutive spaces, \n * then replace all consecutive spaces with - \n * \n * fix_spaces(\"Example\") == \"Example\"\n * fix_spaces(\"Example 1\") == \"Example_1\"\n * fix_spaces(\" Example 2\") == \"_Example_2\"\n * fix_spaces(\" Example   3\") == \"_Example-3\"\n *\n */\nfunction fixSpaces(text) {"}
{"task_id": "HumanEval_javascript/141", "language": "javascript", "completion": "/**\n * Create a function which takes a string representing a file's name, and returns\n * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n * A file's name is considered to be valid if and only if all the following conditions \n * are met:\n * - There should not be more than three digits ('0'-'9') in the file's name.\n * - The file's name contains exactly one dot '.'\n * - The substring before the dot should not be empty, and it starts with a letter from \n * the latin alphapet ('a'-'z' and 'A'-'Z').\n * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n * Examples:\n * file_name_check(\"example.txt\") # => 'Yes'\n * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n *\n */\nfunction fileNameCheck(filename) {\n    var re = /^[a-zA-Z]\\w*(.txt|.exe|.dll)$/;\n    return filename.match(re)?'Yes':'No';\n}"}
{"task_id": "HumanEval_javascript/142", "language": "javascript", "completion": "/**\n * \"\n * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n *\n */\nfunction sumSquares(lst) {"}
{"task_id": "HumanEval_javascript/143", "language": "javascript", "completion": "/**\n * * You are given a string representing a sentence,\n * the sentence contains some words separated by a space,\n * and you have to return a string that contains the words from the original sentence,\n * whose lengths are prime numbers,\n * the order of the words in the new string should be the same as the original one.\n\n * Example 1:\n *     Input: sentence = \"This is a test\"\n *     Output: \"is\"\n\n * Example 2:\n *     Input: sentence = \"lets go for swimming\"\n *     Output: \"go for\"\n\n * Constraints:\n *     * 1 <= len(sentence) <= 100\n *     * sentence contains only letters\n *\n */\nfunction wordsInSentence(sentence) {\n    const sentenceArr = sentence.split(' ');\n    let primeWords = '';\n\n    const isPrime = (n) => {\n        if (n < 2 || n === 3) return true;\n\n        if (n % 2 === 0 || n % 3 === 0) {\n            return false;\n        }\n\n        for(let i = 5, w = 2; i * i <= n; i += w, w = 6 - w) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    sentenceArr.forEach((word) => {\n        if (isPrime(word.length)) primeWords += word + ' ';\n    });\n\n    return primeWords.trim();\n}"}
{"task_id": "HumanEval_javascript/144", "language": "javascript", "completion": "/**\n * Your task is to implement a function that will simplify the expression\n * x * n. The function returns True if x * n evaluates to a whole number and False\n * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n * simplify(\"1/5\", \"5/1\") = True\n * simplify(\"1/6\", \"2/1\") = False\n * simplify(\"7/10\", \"10/2\") = False\n *\n */\nfunction simplify(x, n) {\n\n    function gcd(a, b){\n        while (b != 0) {\n            var t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n\n    var xArr = x.split(\"/\");\n    var nArr = n.split(\"/\");\n    var xNumerator = parseInt(xArr[0]);\n    var xDenominator = parseInt(xArr[1]);\n    var nNumerator = parseInt(nArr[0]);\n    var nDenominator = parseInt(nArr[1]);\n\n    var commonDivisor = gcd(xDenominator, nDenominator);\n\n    if (commonDivisor != 1) {\n        xNumerator /= commonDivisor;\n        xDenominator /= commonDivisor;\n        nNumerator /= commonDivisor;\n        nDenominator /= commonDivisor;\n    }\n\n    return ((xNumerator * nNumerator) % xDenominator === 0);\n}"}
{"task_id": "HumanEval_javascript/145", "language": "javascript", "completion": "/**\n * * Write a function which sorts the given list of integers\n * in ascending order according to the sum of their digits.\n * Note: if there are several items with similar sum of their digits,\n * order them based on their index in original list.\n\n * For example:\n * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n * >>> order_by_points([]) == []\n */\nfunction orderByPoints(nums) {\n  return nums.sort((a, b) =>\n    getSumOfDigits(a) === getSumOfDigits(b) ? a - b : getSumOfDigits(a) - getSumOfDigits(b)\n  );\n\n  function getSumOfDigits(num) {\n    if (Math.sign(num) < 0 ) {\n      num = Math.abs(num);\n    }\n\n    return ('' + num).split('').map(Number).reduce((acc, n) => acc + n, 0)\n  }\n}"}
{"task_id": "HumanEval_javascript/146", "language": "javascript", "completion": "/**\n * Write a function that takes an array of numbers as input and returns \n * the number of elements in the array that are greater than 10 and both \n * first and last digits of a number are odd (1, 3, 5, 7, 9).\n * For example:\n * specialFilter([15, -73, 14, -15]) => 1 \n * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n */\nfunction specialfilter(nums) {\n  let counter = 0;\n\n  for (let num of nums){\n    if(num > 10 && (num % 10 % 2 !== 0) && Math.floor(num / 10) % 2 !== 0) {\n      counter++;\n    }\n  }\n\n  return counter;\n}"}
{"task_id": "HumanEval_javascript/147", "language": "javascript", "completion": "/**\n * * You are given a positive integer n. You have to create an integer array a of length n.\n *     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n * and a[i] + a[j] + a[k] is a multiple of 3.\n\n * Example :\n *     Input: n = 5\n *     Output: 1\n *     Explanation: \n *     a = [1, 3, 7, 13, 21]\n *     The only valid triple is (1, 7, 13).\n *\n */\nfunction getMaxTriples(n) {\n    let count = 0;\n    \n    // Loop for all possible triples i < j < k \n    for (let i = 1; i <= n - 2; i++) {\n        for (let j = i + 1; j <= n - 1; j++) {\n            const k = n * n - n + 1;\n            \n            // Check if a[i] + a[j] + a[k] is multiple of 3\n            if ((i * i - i + 1 + j * j - j + 1 + k) % 3 == 0) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_javascript/148", "language": "javascript", "completion": "/**\n * * There are eight planets in our solar system: the closerst to the Sun \n * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n * Uranus, Neptune.\n * Write a function that takes two planet names as strings planet1 and planet2. \n * The function should return a tuple containing all planets whose orbits are \n * located between the orbit of planet1 and the orbit of planet2, sorted by \n * the proximity to the sun. \n * The function should return an empty tuple if planet1 or planet2\n * are not correct planet names. \n * Examples\n * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n *\n */\nfunction bf(planet1, planet2) {\n  const planets = [\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"]\n  if (!planets.includes(planet1) || !planets.includes(planet2)) return [];\n\n  let p1Idx = planets.indexOf(planet1);\n  let p2Idx = planets.indexOf(planet2);\n\n  return planets.slice(Math.min(p1Idx,p2Idx)+1,Math.max(p1Idx,p2Idx));\n}"}
{"task_id": "HumanEval_javascript/149", "language": "javascript", "completion": "/**\n * Write a function that accepts a list of strings as a parameter,\n * deletes the strings that have odd lengths from it,\n * and returns the resulted list with a sorted order,\n * The list is always a list of strings and never an array of numbers,\n * and it may contain duplicates.\n * The order of the list should be ascending by length of each word, and you\n * should return the list sorted by that rule.\n * If two words have the same length, sort the list alphabetically.\n * The function should return a list of strings in sorted order.\n * You may assume that all words will have the same length.\n * For example:\n * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n *\n */\nfunction sortedListSum(lst) {\n    const evens = [];\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i].length % 2 === 0) {\n        evens.push(lst[i]);\n      }\n    }\n\n    let sum = 0;\n    for (let j = 0; j < evens.length; j++) {\n      sum += Number(evens[j]);\n    }\n    return sum;\n}"}
{"task_id": "HumanEval_javascript/150", "language": "javascript", "completion": "/**\n * A simple program which should return the value of x if n is \n * a prime number and should return the value of y otherwise.\n\n * Examples:\n * for x_or_y(7, 34, 12) == 34\n * for x_or_y(15, 8, 5) == 5\n * \n */\nfunction xOrY(n, x, y) {\n    function isPrime(num) {\n        var i;\n        \n        if (num < 2)\n            return false;\n            \n        for (i = 2; i <= Math.sqrt(num); i++) {\n            if ((num % i) === 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    return isPrime(n) ? x : y;\n}"}
{"task_id": "HumanEval_javascript/151", "language": "javascript", "completion": "/**\n * * Given a list of numbers, return the sum of squares of the numbers\n * in the list that are odd. Ignore numbers that are negative or not integers.\n * \n * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n * double_the_difference([-1, -2, 0]) == 0\n * double_the_difference([9, -2]) == 81\n * double_the_difference([0]) == 0  \n * If the input list is empty, return 0.\n *\n */\nfunction doubleTheDifference(lst) {\n    let square = function (num){\n        return num ** 2;\n    }\n\n    if (!lst.length) {return 0;}\n    else {\n        lst = lst.map(item => item < 0 ? 0 : Math.floor(item));\n\n        return lst\n            .filter(item => item % 2 !== 0 )\n            .map(square)\n            .reduce((acc,cur) => acc + cur,0);\n    }\n}"}
{"task_id": "HumanEval_javascript/152", "language": "javascript", "completion": "/**\n * I think we all remember that feeling when the result of some long-awaited\n * event is finally known. The feelings and thoughts you have at that moment are\n * definitely worth noting down and comparing.\n * Your task is to determine if a person correctly guessed the results of a number of matches.\n * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n * \n * \n * example:\n\n * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n *\n */\nfunction compare(game, guess) {\n  let result = [];\n  \n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i]-guess[i]);\n    if (diff === 0){\n      result[i] = 0;\n    } else {\n      result[i] = diff;\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/153", "language": "javascript", "completion": "/**\n * You will be given the name of a class (a string) and a list of extensions.\n * The extensions are to be used to load additional classes to the class. The\n * strength of the extension is as follows: Let CAP be the number of the uppercase\n * letters in the extension's name, and let SM be the number of lowercase letters \n * in the extension's name, the strength is given by the fraction CAP - SM. \n * You should find the strongest extension and return a string in this \n * format: ClassName.StrongestExtensionName.\n * If there are two or more extensions with the same strength, you should\n * choose the one that comes first in the list.\n * For example, if you are given \"Slices\" as the class and a list of the\n * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n * (its strength is -1).\n * Example:\n * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n *\n */\nfunction strongestExtension(classname, extensions) {\n    var result = [];\n    var temp = 0;\n    for (var i = 0; i < extensions.length; i++) {\n        temp = 0;\n        for (var j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                temp++;\n            } else {\n                temp--;\n            }\n        }\n        result.push(temp);\n    }\n\n    var strongest = [];\n    for (var i = 0; i < result.length; i++) {\n        if (result[i] === Math.max.apply(Math, result)) {\n            strongest.push(extensions[i]);\n        }\n    }\n\n    var index = extensions.indexOf(strongest[0]);\n    console.log(index);\n    return classname + \".\" + strongest[0];\n}"}
{"task_id": "HumanEval_javascript/154", "language": "javascript", "completion": "/**\n * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n * cycpattern_check(\"abcd\",\"abd\") => False\n * cycpattern_check(\"hello\",\"ell\") => True\n * cycpattern_check(\"whassup\",\"psus\") => False\n * cycpattern_check(\"abab\",\"baa\") => True\n * cycpattern_check(\"efef\",\"eeff\") => False\n * cycpattern_check(\"himenss\",\"simen\") => True\n\n *\n */\nfunction cycpatternCheck(a, b) {\n    var l = b.length;\n    for (var i = 0; i < l; i++) {\n        if (a.indexOf(b) > -1 || a.indexOf(b.substring(i)) > -1) return true;\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_javascript/155", "language": "javascript", "completion": "/**\n * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n *  Example:\n *     even_odd_count(-12) ==> (1, 1)\n *     even_odd_count(123) ==> (1, 2)\n *\n */\nfunction evenOddCount(num) {\n  const abs = Math.abs(num);\n  let str = String(abs);\n  let evenDigits = [];\n  let oddDigits = [];\n\n  for(let i=0; i<str.length;i++) {\n    if (Number.isInteger(parseInt(str[i])/2)) {\n      evenDigits.push(Number(str[i]))\n    } else{\n      oddDigits.push(Number(str[i]))\n    }\n  }\n\n  return [evenDigits.length, oddDigits.length];\n}"}
{"task_id": "HumanEval_javascript/156", "language": "javascript", "completion": "/**\n * Given a positive integer, obtain its roman numeral equivalent as a string,\n * and return it in lowercase.\n * Restrictions: 1 <= num <= 1000\n\n * Examples:\n * >>> int_to_mini_roman(19) == 'xix'\n * >>> int_to_mini_roman(152) == 'clii'\n * >>> int_to_mini_roman(426) == 'cdxxvi'\n *\n */\nfunction intToMiniRoman(number) {\n  var numbers = [\n    1000, 900,  500, 400,\n    100,  90,   50,  40,\n    10,    9,    5,    4,\n    1\n  ];\n\n  var romans = [\n    'm',  'cm', 'd', 'cd',\n    'c',  'xc', 'l', 'xl',\n    'x',   'ix', 'v', 'iv',\n    'i'\n  ];\n\n  var result = '';\n\n  for (var index in numbers) {\n    while (number >= numbers[index]) {\n      result += romans[index];\n      number -= numbers[index];\n    }\n  }\n\n  return result;\n}"}
{"task_id": "HumanEval_javascript/157", "language": "javascript", "completion": "/**\n * * Given the lengths of the three sides of a triangle. Return True if the three\n * sides form a right-angled triangle, False otherwise.\n * A right-angled triangle is a triangle in which one angle is right angle or \n * 90 degree.\n * Example:\n * right_angle_triangle(3, 4, 5) == True\n * right_angle_triangle(1, 2, 3) == False\n *\n */\nfunction rightAngleTriangle(a, b, c) {\n    return (a**2 + b**2 === c**2 ||\n            a**2 + c**2 === b**2 || \n            b**2 + c**2 === a**2);\n}"}
{"task_id": "HumanEval_javascript/158", "language": "javascript", "completion": "/**\n * Write a function that accepts a list of strings.\n * The list contains different words. Return the word with maximum number\n * of unique characters. If multiple strings have maximum number of unique\n * characters, return the one which comes first in lexicographical order.\n\n * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n *\n */\nfunction findMax(words) {\n    var max = \"\";\n    var uniqueChars;\n\n    for (var i=0; i<words.length; i++) {\n        if (max === \"\") {\n            max = words[i];\n        }\n\n        uniqueChars = getUniqueCharsCount(words[i]);\n\n        if (getUniqueCharsCount(max) < uniqueChars ) {\n            max = words[i];\n        } else if (getUniqueCharsCount(max) == uniqueChars && words[i] < max ) {\n                max = words[i];\n        }\n    }\n\n    return max;\n}\n\nfunction getUniqueCharsCount(word) {\n    var chars = {};\n\n    for (var i=0; i<word.length; i++) {\n        chars[word.charAt(i)] = true;\n    }\n\n    return Object.keys(chars).length;\n}"}
{"task_id": "HumanEval_javascript/159", "language": "javascript", "completion": "/**\n * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n * but now you need to eat more carrots to complete the day's meals.\n * you should return an array of [ total number of eaten carrots after your meals,\n *                                 the number of carrots left after your meals ]\n * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n * \n * Example:\n * * eat(5, 6, 10) -> [11, 4]\n * * eat(4, 8, 9) -> [12, 1]\n * * eat(1, 10, 10) -> [11, 0]\n * * eat(2, 11, 5) -> [7, 0]\n * \n * Variables:\n * @number : integer\n *     the number of carrots that you have eaten.\n * @need : integer\n *     the number of carrots that you need to eat.\n * @remaining : integer\n *     the number of remaining carrots thet exist in stock\n * \n * Constrain:\n * * 0 <= number <= 1000\n * * 0 <= need <= 1000\n * * 0 <= remaining <= 1000\n\n * Have fun :)\n *\n */\nfunction eat(number, need, remaining) {\n  var eaten = (remaining >= need) ? need : remaining;\n\n  return [ number + eaten, remaining - eaten];\n}"}
{"task_id": "HumanEval_javascript/160", "language": "javascript", "completion": "/**\n * * Given two lists operator, and operand. The first list has basic algebra operations, and \n * the second list is a list of integers. Use the two given lists to build the algebric \n * expression and return the evaluation of this expression.\n\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multiplication ( * ) \n * Floor division ( // ) \n * Exponentiation ( ** ) \n\n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n\n * Note:\n *     The length of operator list is equal to the length of operand list minus one.\n *     Operand is a list of of non-negative integers.\n *     Operator list has at least one operator, and operand list has at least two operands.\n\n *\n */\nfunction doAlgebra(operator, operand) {\n    const evaluate = (equation = [], ops = []) => {\n        let result = equation[0];\n\n        for (let i = 0; i < ops.length; i++) {\n            if (ops[i] === '+') {\n                result += equation[i + 1]\n            } else if (ops[i] === '-') {\n                result -= equation[i + 1]\n            } else if (ops[i] === '*') {\n                result *= equation[i + 1]\n            } else if (ops[i] === '/') {\n                result /= equation[i + 1]\n            } else if (ops[i] === '**') {\n                result = Math.pow(result, equation[i+1]);\n            }\n        }\n\n        return result;\n    };\n\n    const sortedOps = operator.slice().sort();\n    let i = 0;\n    let j = 0;\n    let output = [];\n\n    for (let k = 0; k < operand.length + 1; k++) {\n        if (k === operand.length) {\n            output[i] = evaluate(output, sortedOps);\n            return output[i];\n\n        } else if (sortedOps.includes('-')) {\n            j++;\n            output[j] = -operand[k];\n\n        } else {\n            i++;\n            output[i] = operand[k];\n        }\n    }\n}"}
{"task_id": "HumanEval_javascript/161", "language": "javascript", "completion": "/**\n * You are given a string s.\n * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n * otherwise keep it as it is.\n * If the string contains no letters, reverse the string.\n * The function should return the resulted string.\n * Examples\n * solve(\"1234\") = \"4321\"\n * solve(\"ab\") = \"AB\"\n * solve(\"#a@C\") = \"#A@c\"\n */\nfunction solve(s) {\n    var result = '';\n\n    for (var i = 0; i < s.length; i++) {\n        if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            if (s[i] === String(s[i]).toUpperCase()) {\n                result += String(s[i]).toLowerCase();\n            } else {\n                result += String(s[i]).toUpperCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_javascript/162", "language": "javascript", "completion": "/**\n * * Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return \"none\".\n *\n * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n */\nfunction stringToMd5(text) {"}
{"task_id": "HumanEval_javascript/163", "language": "javascript", "completion": "/**\n * * Given two positive integers a and b, return the even digits between a\n * and b, in ascending order.\n\n * For example:\n * generate_integers(2, 8) => [2, 4, 6, 8]\n * generate_integers(8, 2) => [2, 4, 6, 8]\n * generate_integers(10, 14) => []\n *\n */\nfunction generateIntegers(a, b) {\n  let result = [];\n\n  if (a < b) {\n    for (let i = a; i <= b; i++) {\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n  } else {\n    for (let i = b; i >= a; i--) {\n      if (i % 2 === 0) {\n        result.push(i);\n      }\n    }\n  }\n\n  return result;\n}"}

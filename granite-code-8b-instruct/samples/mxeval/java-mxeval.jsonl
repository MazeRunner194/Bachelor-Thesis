{"task_id": "HumanEval_java/0", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HasCloseElements {\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n     * False\n     * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * True\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {"}
{"task_id": "HumanEval_java/1", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SeparateParenGroups {\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string.\n     * >>> separate_paren_groups('( ) (( )) (( )( ))')\n     * ['()', '(())', '(()())']\n     *\n     */\n    public static List<String> separateParenGroups(String parenString) {\n        return Arrays.asList(parenString.split(\"[()]\"));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(separateParenGroups(\"( ) (( )) (( )( ))\"));\n    }\n}"}
{"task_id": "HumanEval_java/2", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TruncateNumber {\n    /**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n\n     * Return the decimal part of the number.\n     * >>> truncate_number(3.5)\n     * 0.5\n     *\n     */\n    public static Double truncateNumber(Double number) {"}
{"task_id": "HumanEval_java/3", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowZero {\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     * >>> below_zero([1, 2, 3])\n     * False\n     * >>> below_zero([1, 2, -4, 5])\n     * True\n     *\n     */\n    public static Boolean belowZero(List<Object> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            if (operations.get(i) instanceof Integer) {\n                balance += ((Integer) operations.get(i));\n            } else {\n                balance -= ((Integer) operations.get(i));\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/4", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MeanAbsoluteDeviation {\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     *\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n\n        double mean = sum / numbers.size();\n\n        double absSum = 0;\n        for (double num : numbers) {\n            absSum += Math.abs(num - mean);\n        }\n\n        return absSum / numbers.size();\n    }\n}"}
{"task_id": "HumanEval_java/5", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Intersperse {\n    /**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     * >>> intersperse([], 4)\n     * []\n     * >>> intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {"}
{"task_id": "HumanEval_java/6", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseNestedParens {\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n     * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n     * [2, 3, 1, 3]\n     *\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n\n        List<String> groups = Arrays.asList(parenString.split(\" \"));\n        return groups.stream().mapToInt(group -> {\n            int level = 0;\n            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n                    level++;\n                } else if (group.charAt(i) == ')') {\n                    level--;\n                }\n            }\n            return Math.abs(level);\n        }).boxed().collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseNestedParens('(()()) ((())) () ((())()())')); // [2, 3, 1, 3]\n    }\n}"}
{"task_id": "HumanEval_java/7", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterBySubstring {\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * >>> filter_by_substring([], 'a')\n     * []\n     * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n     * ['abc', 'bacd', 'array']\n     *\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {"}
{"task_id": "HumanEval_java/8", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumProduct {\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     * >>> sum_product([])\n     * (0, 1)\n     * >>> sum_product([1, 2, 3, 4])\n     * (10, 24)\n     *\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        int sum = 0;\n        int product = 1;\n        \n        for (Object number : numbers) {\n            sum += Integer.parseInt((String)number);\n            product *= Integer.parseInt((String)number);\n        }\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "HumanEval_java/9", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RollingMax {\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     *\n     */\n    public static List<Integer> rollingMax(List<Integer> numbers) {"}
{"task_id": "HumanEval_java/10", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakePalindrome {\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     * >>> make_palindrome('')\n     * ''\n     * >>> make_palindrome('cat')\n     * 'catac'\n     * >>> make_palindrome('cata')\n     * 'catac'\n     *\n     */\n    public static String makePalindrome(String string) {\n        int length = string.length();\n\n        for (int i=0; i<length/2; i++)\n            if (string.charAt(i) != string.charAt(length-1-i))\n                return getPrefixPalindrome(string, 0, length-1);\n\n        // If we made it here then the entire string is a palindrome\n        String reverse = new StringBuilder(string).reverse().toString();\n        return string + reverse;\n    }\n\n    /**\n     * Find longest palindromic suffix of supplied string.\n     * TODO: This method should probably be recursive.\n     */\n    public static String getPrefixPalindrome(String string, int start, int end) {\n        if (start > end)\n            return \"\";\n\n        for (int i=end; i>=start; i--)\n            if (string.charAt(i) == string.charAt(start))\n                return getPrefixPalindrome(string, start+1, i-1);\n\n        return \"\";\n    }\n}"}
{"task_id": "HumanEval_java/11", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringXor {\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     * >>> string_xor('010', '110')\n     * '100'\n     *\n     */\n    public static String stringXor(String a, String b) {\n\n        StringBuilder builder = new StringBuilder();\n        for (int i=0; i < a.length(); i++) {\n            if ((a.charAt(i)-'0') ^ (b.charAt(i)-'0') == 1) {\n                builder.append('1');\n            } else {\n                builder.append('0');\n            }\n        }\n        return builder.toString();\n    }\n}"}
{"task_id": "HumanEval_java/12", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Longest {\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     * >>> longest([])\n\n     * >>> longest(['a', 'b', 'c'])\n     * 'a'\n     * >>> longest(['a', 'bb', 'ccc'])\n     * 'ccc'\n     *\n     */\n    public static String longest(List<Object> strings) {\n        if (strings == null || strings.size() < 1)\n            return null;\n\n        int index = 0;\n        for (int i=1; i < strings.size(); ++i) {\n            if (((String)(strings.get(i))).length() > ((String)(strings.get(index))).length())\n                index = i;\n        }\n        return (String)(strings.get(index));\n    }\n}"}
{"task_id": "HumanEval_java/13", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GreatestCommonDivisor {\n    /**\n     * Return a greatest common divisor of two integers a and b\n     * >>> greatest_common_divisor(3, 5)\n     * 1\n     * >>> greatest_common_divisor(25, 15)\n     * 5\n     */"}
{"task_id": "HumanEval_java/14", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AllPrefixes {\n    /**\n     * Return list of all prefixes from shortest to longest of the input string\n     * >>> all_prefixes('abc')\n     * ['a', 'ab', 'abc']\n     *\n     */\n    public static List<Object> allPrefixes(String string) {\n        List<Object> result = new ArrayList<>();\n\n        for (int i=1; i<=string.length(); i++) {\n            String prefix = string.substring(0,i);\n            result.add(prefix);\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/15", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringSequence {\n    /**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     * >>> string_sequence(0)\n     * '0'\n     * >>> string_sequence(5)\n     * '0 1 2 3 4 5'\n     *\n     */\n    public static String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i=0; i<=n; i++) {\n            if (i != n)\n                sb.append(i + \" \");\n            else\n                sb.append(i);\n        }\n\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/16", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountDistinctCharacters {\n    /**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     * >>> count_distinct_characters('xyzXYZ')\n     * 3\n     * >>> count_distinct_characters('Jerry')\n     * 4\n     *\n     */\n    public static int countDistinctCharacters(String string) {\n        Set<Character> chars = new HashSet<>();\n        \n        for (int i=0; i < string.length(); i++) {\n            char c = Character.toUpperCase(string.charAt(i));\n            chars.add(c);\n        }\n        \n        return chars.size();\n    }\n\n    public static void main(String[] args) {\n        assert countDistinctCharacters(\"xyzXYZ\") == 3 : \"Basic test case failed\";\n        assert countDistinctCharacters(\"Jerry\") == 4 : \"Another basic test case failed\";\n\n        System.out.println(\"All test cases passed!\");\n    }\n}"}
{"task_id": "HumanEval_java/17", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ParseMusic {\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n\n     * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n\n    public static List<Integer> parseMusic(String musicString) {"}
{"task_id": "HumanEval_java/18", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HowManyTimes {\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     * >>> how_many_times('', 'a')\n     * 0\n     * >>> how_many_times('aaa', 'a')\n     * 3\n     * >>> how_many_times('aaaa', 'aa')\n     * 4\n     *\n     */\n    public static int howManyTimes(String string, String substring) {"}
{"task_id": "HumanEval_java/19", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortNumbers {\n    /**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     * >>> sort_numbers('three one five')\n     * 'one three five'\n     *\n     */\n    public static String sortNumbers(String numbers) {\n        String[] numberals = {\"zero\", \"one\", \"two\", \"three\", \"four\",\n                                  \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n        List<Integer> nums = new ArrayList<>();\n        // split string into individual words and put them into a list of integers\n        for(String number : numbers.split(\" \")) {\n            if (number.equals(\"zero\")) {\n                nums.add(0);\n            } else if (number.equals(\"one\")) {\n                nums.add(1);\n            } else if (number.equals(\"two\")) {\n                nums.add(2);\n            } else if (number.equals(\"three\")) {\n                nums.add(3);\n            } else if (number.equals(\"four\")) {\n                nums.add(4);\n            } else if (number.equals(\"five\")) {\n                nums.add(5);\n            } else if (number.equals(\"six\")) {\n                nums.add(6);\n            } else if (number.equals(\"seven\")) {\n                nums.add(7);\n            } else if (number.equals(\"eight\")) {\n                nums.add(8);\n            } else if (number.equals(\"nine\")) {\n                nums.add(9);\n            }\n        }\n\n        // sort the list\n        Collections.sort(nums);\n\n        String result = \"\";\n        for(Integer num : nums) {\n            if (num == 0) {\n                result += \"zero \";\n            } else if (num == 1) {\n                result += \"one \";\n            } else if (num == 2) {\n                result += \"two \";\n            } else if (num == 3) {\n                result += \"three \";\n            } else if (num == 4) {\n                result += \"four \";\n            } else if (num == 5) {\n                result += \"five \";\n            } else if (num == 6) {\n                result += \"six \";\n            } else if (num == 7) {\n                result += \"seven \";\n            } else if (num == 8) {\n                result += \"eight \";\n            } else if (num == 9) {\n                result += \"nine \";\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/20", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindClosestElements {\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * (2.0, 2.2)\n     * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * (2.0, 2.0)\n     *\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers == null || numbers.size() < 2){\n            throw new IllegalArgumentException(\"Input must be a list of at least two elements.\");\n        }\n\n        Double smallest = numbers.get(0);\n        Double largest = numbers.get(1);\n        Integer current;\n        for(int i = 2; i < numbers.size(); i++) {\n            current = i;\n            if (numbers.get(current) < smallest){\n                smallest = numbers.get(current);\n            } else if (numbers.get(current) > largest){\n                largest = numbers.get(current);\n            }\n        }\n\n        return Arrays.asList(smallest, largest);\n\n    }\n}"}
{"task_id": "HumanEval_java/21", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RescaleToUnit {\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     *\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> rescaled = new ArrayList<>();\n        for (double number : numbers)\n            rescaled.add((number - min)/(max-min));\n        return rescaled;\n    }\n}"}
{"task_id": "HumanEval_java/22", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterIntegers {\n    /**\n     * Filter given list of any Java values only for integers\n     * >>> filter_integers(['a', 3.14, 5])\n     * [5]\n     * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n     * [1, 2, 3]\n     *\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n        ArrayList<Object> integers = new ArrayList<>();"}
{"task_id": "HumanEval_java/23", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Strlen {\n    /**\n     * Return length of given string\n     * >>> strlen('')\n     * 0\n     * >>> strlen('abc')\n     * 3\n     *\n     */\n    public static int strlen(String string) {\n        if (string == null || string.length() == 0 )\n            return 0;\n        else \n            return string.length();\n    }\n}"}
{"task_id": "HumanEval_java/24", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestDivisor {\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     * >>> largest_divisor(15)\n     * 5\n     *\n     */\n    public static int largestDivisor(int n) {\n        for (int i = n-1; i > 0; i--)\n            if (n % i == 0)\n                return i;\n        throw new ValueError(\"No divisor found\");\n\n    }\n}"}
{"task_id": "HumanEval_java/25", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Factorize {\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     * >>> factorize(8)\n     * [2, 2, 2]\n     * >>> factorize(25)\n     * [5, 5]\n     * >>> factorize(70)\n     * [2, 5, 7]\n     */\n    public static List<Integer> factorize(int n) {"}
{"task_id": "HumanEval_java/26", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveDuplicates {\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     * >>> remove_duplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     *\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        Set<Object> seen = new HashSet<>();\n        List<Object> result = new ArrayList<>();\n\n        for (Object num : numbers) {\n            if (!seen.contains(num)) {\n                seen.add(num);\n                result.add(num);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/27", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FlipCase {\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     * >>> flip_case('Hello')\n     * 'hELLO'\n     *\n     */\n    public static String flipCase(String string) {\n        StringBuilder sb = new StringBuilder();\n\n        for (int i=0; i<string.length(); i++) {\n            if (Character.isUpperCase(string.charAt(i)))\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            else\n                sb.append(Character.toUpperCase(string.charAt(i)));\n        }\n\n        return new String(sb);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(flipCase(\"Hello\")); // 'hELLO'\n    }\n}"}
{"task_id": "HumanEval_java/28", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Concatenate {\n    /**\n     * Concatenate list of strings into a single string\n     * >>> concatenate([])\n     * ''\n     * >>> concatenate(['a', 'b', 'c'])\n     * 'abc'\n     */\n    public static String concatenate(List<Object> strings) {"}
{"task_id": "HumanEval_java/29", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FilterByPrefix {\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     * >>> filter_by_prefix([], 'a')\n     * []\n     * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n     * ['abc', 'array']\n     *\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n        List<Object> result = new ArrayList<>();\n\n        for (Object string : strings) {\n            if (((String)string).startsWith(prefix)) {\n                result.add(string);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/30", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetPositive {\n    /**\n     * Return only positive numbers in the list.\n     * >>> get_positive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     */\n    public static List<Object> getPositive(List<Object> l) {"}
{"task_id": "HumanEval_java/31", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPrime {\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     * >>> is_prime(6)\n     * False\n     * >>> is_prime(101)\n     * True\n     * >>> is_prime(11)\n     * True\n     * >>> is_prime(13441)\n     * True\n     * >>> is_prime(61)\n     * True\n     * >>> is_prime(4)\n     * False\n     * >>> is_prime(1)\n     * False\n     */\n    public static Boolean isPrime(int n) {"}
{"task_id": "HumanEval_java/33", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortThird {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     * >>> sort_third([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        // Implement this function"}
{"task_id": "HumanEval_java/34", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Unique {\n    /**\n     * Return sorted unique elements in a list\n     * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public static List<Integer> unique(List<Integer> l) {"}
{"task_id": "HumanEval_java/35", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxElement {\n    /**\n     * Return maximum element in the list.\n     * >>> max_element([1, 2, 3])\n     * 3\n     * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     */\n    public static int maxElement(List<Integer> l) {"}
{"task_id": "HumanEval_java/36", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FizzBuzz {\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     * >>> fizz_buzz(50)\n     * 0\n     * >>> fizz_buzz(78)\n     * 2\n     * >>> fizz_buzz(79)\n     * 3\n     */\n    public static int fizzBuzz(int n) {"}
{"task_id": "HumanEval_java/37", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortEven {\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     * >>> sort_even([1, 2, 3])\n     * [1, 2, 3]\n     * >>> sort_even([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     */\n    public static List<Integer> sortEven(List<Integer> l) {"}
{"task_id": "HumanEval_java/39", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeFib {\n    /**\n     * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     * >>> prime_fib(1)\n     * 2\n     * >>> prime_fib(2)\n     * 3\n     * >>> prime_fib(3)\n     * 5\n     * >>> prime_fib(4)\n     * 13\n     * >>> prime_fib(5)\n     * 89\n     */\n    public static int primeFib(int n) {"}
{"task_id": "HumanEval_java/40", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriplesSumToZero {\n    /**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n\n     * >>> triples_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> triples_sum_to_zero([1, 3, -2, 1])\n     * True\n     * >>> triples_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n     * True\n     * >>> triples_sum_to_zero([1])\n     * False\n     *\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        for (int a : l) {\n            if (l.contains(-a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/41", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CarRaceCollision {\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n\n     * This function outputs the number of such collisions.\n     *\n     */\n    public static int carRaceCollision(int n) {\n        return 0;\n    }\n}"}
{"task_id": "HumanEval_java/42", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IncrList {\n    /**\n     * Return list with elements incremented by 1.\n     * >>> incr_list([1, 2, 3])\n     * [2, 3, 4]\n     * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     *\n     */\n    public static List<Object> incrList(List<Object> l) {\n        List<Integer> list = new ArrayList<>();\n        for (int i=0;i<l.size();++i) {\n            int v = ((Number)(l.get(i))).intValue()+1;\n            list.add(v);\n        }\n        return list;\n    }\n}"}
{"task_id": "HumanEval_java/43", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PairsSumToZero {\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     * >>> pairs_sum_to_zero([1, 3, 5, 0])\n     * False\n     * >>> pairs_sum_to_zero([1, 3, -2, 1])\n     * False\n     * >>> pairs_sum_to_zero([1, 2, 3, 7])\n     * False\n     * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n     * True\n     * >>> pairs_sum_to_zero([1])\n     * False\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> s = new HashSet<>(l);\n\n        for (int i : l) {\n            if (s.contains(-i)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        String line;\n        while ((line = scan.nextLine()) != null && !line.equals(\"\")) {\n            List<Integer> l = Arrays.asList(line.split(\"\\\\s+\"));\n            Boolean p = pairsSumToZero(l);\n            if (p) {\n                System.out.println(\"True\");\n            } else {\n                System.out.println(\"False\");\n            }\n        }\n    }\n}"}
{"task_id": "HumanEval_java/44", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChangeBase {\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     * >>> change_base(8, 3)\n     * '22'\n     * >>> change_base(8, 2)\n     * '1000'\n     * >>> change_base(7, 2)\n     * '111'\n     *\n     */\n    public static String changeBase(int x, int base) {\n        // implement here\n\n    }\n}"}
{"task_id": "HumanEval_java/45", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given length of a side and high return area for a triangle.\n     * >>> triangle_area(5, 3)\n     * 7.5\n     *\n     */\n    public static Double triangleArea(int a, int h) {\n        double area = (double)(a*h)/2;\n        return new Double(area);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(triangleArea(5, 3)); // 7.500000000000001\n    }\n}"}
{"task_id": "HumanEval_java/46", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib4 {\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     * >>> fib4(5)\n     * 4\n     * >>> fib4(6)\n     * 8\n     * >>> fib4(7)\n     * 14\n     *\n     */\n    public static int fib4(int n) {\n\n        if (n == 0 || n == 1)\n            return 0;\n        else if (n == 2)\n            return 2;\n\n        int []fib = new int[n+1];\n\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n\n        for(int i=3; i<fib.length; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n\n        return fib[n];\n\n    }\n\n    public static void main(String []args) {\n        System.out.println(fib4(5));\n    }\n}"}
{"task_id": "HumanEval_java/47", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Median {\n    /**\n     * Return median of elements in the list l.\n     * >>> median([3, 1, 2, 4, 5])\n     * 3\n     * >>> median([-10, 4, 6, 1000, 10, 20])\n     * 15.0\n     *\n     */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        if (l.size() % 2 == 0)\n            return ((Number) l.get((l.size()) / 2)).floatValue() +\n                    ((Number) l.get((l.size()) / 2 - 1)).floatValue();\n        else\n            return (Number) l.get(l.size() / 2);\n    }\n}"}
{"task_id": "HumanEval_java/48", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsPalindrome {\n    /**\n     * * Checks if given string is a palindrome\n     * >>> is_palindrome('')\n     * True\n     * >>> is_palindrome('aba')\n     * True\n     * >>> is_palindrome('aaaaa')\n     * True\n     * >>> is_palindrome('zbcd')\n     * False\n     *\n     */\n    public static Boolean isPalindrome(String text) {\n        // Base case\n        if (text.length() <= 1) return true;\n\n        char first = text.charAt(0);\n        char last = text.charAt(text.length()-1);\n\n        return first == last &&\n                is_palindrome(text.substring(1, text.length()));\n    }\n}"}
{"task_id": "HumanEval_java/49", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Modp {\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     *\n     */\n    public static int modp(int n, int p) {\n        if (n == 0)\n            return 1;\n        int r = modp(n / 2, p);\n        r = mulmod(r, r, p);\n        if (n % 2 == 1)\n            r = mulmod(r, 2, p);\n        return r;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n        for (int i = 0; i < t; ++i) {\n            System.out.println(modp(in.nextInt(), in.nextInt()));\n        }\n    }\n\n    public static int mulmod(int a, int b, int p) {\n        long r = 0;\n        while (b > 0) {\n            if ((b & 1) == 1)\n                r = (r + a) % p;\n            a = (a * 2) % p;\n            b >>= 1;\n        }\n        return (int) r;\n    }\n}"}
{"task_id": "HumanEval_java/51", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RemoveVowels {\n    /**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     * >>> remove_vowels('')\n     * ''\n     * >>> remove_vowels(\"abcdef\\nghijklm\")\n     * 'bcdf\\nghjklm'\n     * >>> remove_vowels('abcdef')\n     * 'bcdf'\n     * >>> remove_vowels('aaaaa')\n     * ''\n     * >>> remove_vowels('aaBAA')\n     * 'B'\n     * >>> remove_vowels('zbcd')\n     * 'zbcd'\n     */\n\n    // public static String removeVowels(String text) {\n    public static String removeVowels(String text) {"}
{"task_id": "HumanEval_java/52", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass BelowThreshold {\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     * >>> below_threshold([1, 2, 4, 10], 100)\n     * True\n     * >>> below_threshold([1, 20, 4, 10], 5)\n     * False\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {"}
{"task_id": "HumanEval_java/53", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Add two numbers x and y\n     * >>> add(2, 3)\n     * 5\n     * >>> add(5, 7)\n     * 12\n     *\n     */\n    public static int add(int x, int y) {\n        return x + y;\n\n    }\n}"}
{"task_id": "HumanEval_java/54", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SameChars {\n    /**\n     * * Check if two words have the same characters.\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n     * True\n     * >>> same_chars('abcd', 'dddddddabc')\n     * True\n     * >>> same_chars('dddddddabc', 'abcd')\n     * True\n     * >>> same_chars('eabcd', 'dddddddabc')\n     * False\n     * >>> same_chars('abcd', 'dddddddabce')\n     * False\n     * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n     * False\n     *\n     */\n    public static Boolean sameChars(String s0, String s1) {"}
{"task_id": "HumanEval_java/55", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fib {\n    /**\n     * Return n-th Fibonacci number.\n     * >>> fib(10)\n     * 55\n     * >>> fib(1)\n     * 1\n     * >>> fib(8)\n     * 21\n     */\n\n    public static int fib(int n) {"}
{"task_id": "HumanEval_java/56", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"<\")\n     * False\n     * >>> correct_bracketing(\"<>\")\n     * True\n     * >>> correct_bracketing(\"<<><>>\")\n     * True\n     * >>> correct_bracketing(\"><<>\")\n     * False\n     *\n     */\n    public static Boolean correctBracketing(String brackets) {\n        int stack = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                stack++;\n            } else { // '>'\n                if (stack > 0){\n                    stack--;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return stack == 0;\n    }\n}"}
{"task_id": "HumanEval_java/57", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Monotonic {\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     * >>> monotonic([1, 2, 4, 20])\n     * True\n     * >>> monotonic([1, 20, 4, 10])\n     * False\n     * >>> monotonic([4, 1, 0, -10])\n     * True\n     *\n     */\n    public static Boolean monotonic(List<Integer> l) {\n        int[] array = l.stream().mapToInt(i -> i).toArray();\n        for (int i = 1; i < array.length; ++i) {\n            if ((array[i] > array[i - 1]) != (array[0] > array[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/58", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Common {\n    /**\n     * Return sorted unique common elements for two lists.\n     * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * >>> common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n\n     *\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        // implement here"}
{"task_id": "HumanEval_java/59", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestPrimeFactor {\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     * >>> largest_prime_factor(13195)\n     * 29\n     * >>> largest_prime_factor(2048)\n     * 2\n     */\n    public static int largestPrimeFactor(int n) {"}
{"task_id": "HumanEval_java/60", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumToN {\n    /**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     * >>> sum_to_n(30)\n     * 465\n     * >>> sum_to_n(100)\n     * 5050\n     * >>> sum_to_n(5)\n     * 15\n     * >>> sum_to_n(10)\n     * 55\n     * >>> sum_to_n(1)\n     * 1\n     */\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "HumanEval_java/61", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CorrectBracketing {\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n\n     * >>> correct_bracketing(\"(\")\n     * False\n     * >>> correct_bracketing(\"()\")\n     * True\n     * >>> correct_bracketing(\"(()())\")\n     * True\n     * >>> correct_bracketing(\")(()\")\n     * False\n     */\n    public static Boolean correctBracketing(String brackets) {\n        // if there are no opening bracket return false\n        if (brackets.length() == 0)\n            return false;\n        int count = 0;\n        for (int i = 0; i < brackets.length(); ++i) {\n            if (brackets.charAt(i) == '(')\n                count++;\n            else\n                count--;\n            if (count < 0)\n                return false;\n\n        }\n        // make sure there is no more opening bracket\n        return count == 0;\n    }\n}"}
{"task_id": "HumanEval_java/62", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Derivative {\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     * >>> derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * >>> derivative([1, 2, 3])\n     * [2, 6]\n     *\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n        return null;\n    }\n\n    private void test(int[] input, int expected) {\n        assertEquals(expected, binarySearch(input));\n    }\n\n    public void test() {"}
{"task_id": "HumanEval_java/63", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Fibfib {\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     * >>> fibfib(1)\n     * 0\n     * >>> fibfib(5)\n     * 4\n     * >>> fibfib(8)\n     * 24\n     *\n     */\n    public static int fibfib(int n) {\n        if (n == 0 || n == 1)\n            return 0;\n\n        if (n == 2)\n            return 1;\n\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}"}
{"task_id": "HumanEval_java/64", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass VowelsCount {\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n\n     * Example:\n     * >>> vowels_count(\"abcde\")\n     * 2\n     * >>> vowels_count(\"ACEDY\")\n     * 3\n     *\n     */\n    public static int vowelsCount(String s) {\n\n        int count = 0;\n        String[] vowels = new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"};\n        for (int i = 0; i < s.length(); i++) {\n            boolean isVowel = false;\n            for (String vowel : vowels) {\n                if (s.substring(i, i + 1).equals(vowel)) {\n                    isVowel = true;\n                    break;\n                }\n            }\n            if (isVowel && (i == s.length() - 1 || !s.substring(i + 1, i + 2).equals(\"y\"))) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.nextLine();\n        int result = vowelsCount(s);\n        System.out.println(result);\n    }\n}"}
{"task_id": "HumanEval_java/65", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CircularShift {\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     * >>> circular_shift(12, 1)\n     * \"21\"\n     * >>> circular_shift(12, 2)\n     * \"12\"\n     *\n     */\n    public static String circularShift(int x, int shift) {\n        // Use a StringBuilder to avoid creating many Strings.\n        StringBuilder buf = new StringBuilder();\n\n        // Convert x to a string and reverse it.\n        String digits = Integer.toString(x);\n        buf.append(digits);\n        buf.reverse();\n\n        // Determine how many digits we are shifting by.\n        int numDigits = digits.length();\n        shift %= numDigits;\n\n        // Now perform the circular shift, adding the shifted characters to buf.\n        for (int i=0; i<numDigits; i++) {\n            buf.append(buf.charAt(shift));\n            buf.deleteCharAt(0);\n        }\n\n        return buf.toString();\n    }\n}"}
{"task_id": "HumanEval_java/66", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digitsum {\n    /**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n\n     * Examples:\n     *     digitSum(\"\") => 0\n     *     digitSum(\"abAB\") => 131\n     *     digitSum(\"abcCd\") => 67\n     *     digitSum(\"helloE\") => 69\n     *     digitSum(\"woArBld\") => 131\n     *     digitSum(\"aAaaaXa\") => 153\n     *\n     */\n    public static int digitsum(String s) {"}
{"task_id": "HumanEval_java/67", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FruitDistribution {\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges \n     * that are distributed in a basket of fruit this basket contains \n     * apples, oranges, and mango fruits. Given the string that represents the total number of \n     * the oranges and apples and an integer that represent the total number of the fruits \n     * in the basket return the number of the mango fruits in the basket.\n     * for examble:\n     * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     */\n    public static int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n\n        return (n - Integer.parseInt(arr[0].trim()) - Integer.parseInt(arr[4]));\n\n    }\n}"}
{"task_id": "HumanEval_java/68", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Pluck {\n    /**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n\n     * Example 1:\n     *     Input: [4,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n     * Example 2:\n     *     Input: [1,2,3]\n     *     Output: [2, 1]\n     *     Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n     * Example 3:\n     *     Input: []\n     *     Output: []\n     * \n     * Example 4:\n     *     Input: [5, 0, 3, 0, 4, 2]\n     *     Output: [0, 1]\n     *     Explanation: 0 is the smallest value, but  there are two zeros,\n     *                  so we will choose the first zero, which has the smallest index.\n\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\n     */\n    public static List<Object> pluck(List<Integer> arr) {"}
{"task_id": "HumanEval_java/69", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Search {\n    /**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n     * zero, and has a frequency greater than or equal to the value of the integer itself. \n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     *     search([4, 1, 2, 2, 3, 1]) == 2\n     *     search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     *     search([5, 5, 4, 4, 4]) == -1\n     *\n     */\n    public static int search(List<Integer> lst) {\n        //Collections.sort(lst);\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i : lst){\n            if (!map.containsKey(i))\n                map.put(i, 0);\n\n            map.put(i, map.get(i)+1);\n        }\n\n        int mx_val = -1;\n        for (Map.Entry<Integer, Integer> entry: map.entrySet()){\n            if (entry.getKey() > entry.getValue()) continue;\n            else {\n                if (entry.getKey() > mx_val)\n                    mx_val = entry.getKey();\n            }\n        }\n\n        return mx_val;\n    }\n}"}
{"task_id": "HumanEval_java/70", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrangeSortList {\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n        // Your code here\n\n        // My solution\n        int n = lst.size();\n        if (n == 0) return lst;\n        else{\n            List result = new ArrayList<Integer>();\n            while (!lst.isEmpty()){\n                Integer min = Collections.min(lst);\n                Integer max = Collections.max(lst);\n                result.add(min);\n                lst.remove(min);\n                if (!lst.isEmpty()){\n                    result.add(max);\n                    lst.remove(max);\n                }\n            }\n            return result;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/71", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TriangleArea {\n    /**\n     * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater \n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     */\n    public static double triangleArea(int a, int b, int c) {"}
{"task_id": "HumanEval_java/72", "language": "java", "completion": "import java.util.*;\n\npublic class WillItFly {\n\n    // Complete the function below.\n    static boolean will_it_fly(List<Integer> q, int w) {\n        for (int i = 0; i < Math.ceil(q.size() / 2); i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1)))\n                return false;\n        }\n\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        return (sum <= w);\n    }\n\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        String[] qw = scanner.nextLine().split(\" \");\n\n        int q_count = Integer.parseInt(qw[0]);\n\n        List<Integer> q = new ArrayList<>();\n\n        for (int i = 0; i < q_count; i++) {\n            int qItem = scanner.nextInt();\n            scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n            q.add(qItem);\n        }\n\n        int w = scanner.nextInt();\n        scanner.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");\n\n        boolean result = will_it_fly(q, w);\n\n        System.out.println(result ? \"True\" : \"False\");\n\n        scanner.close();\n    }\n}"}
{"task_id": "HumanEval_java/73", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SmallestChange {\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     */\n    public static int smallestChange(List<Integer> arr) {\n        if (arr.size() == 0 || arr.size() == 1){\n            return 0;\n        } else {\n            Map<Integer, Integer> map = new HashMap<>();\n\n            for(int i : arr) {\n                if(map.containsKey(i)) {\n                    map.put(i, map.get(i)+1);\n                } else {\n                    map.put(i, 1);\n                }\n            }\n\n            int count = 0;\n            int middleValue = -1;\n            for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                if(entry.getValue() % 2 != 0) {\n                    if(middleValue == -1) {\n                        middleValue = entry.getKey();\n                    } else {\n                        count += (entry.getValue() / 2);\n                    }\n                }\n            }\n\n            return count + (middleValue != -1 ? 1 : 0);\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>();\n        arr.add(5);\n        arr.add(4);\n        arr.add(3);\n        arr.add(2);\n        arr.add(1);\n        System.out.println(smallestChange(arr));\n    }\n}"}
{"task_id": "HumanEval_java/74", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TotalMatch {\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has \n     * total number of chars in the all strings of the list less than the other list.\n\n     * if the two lists have the same number of chars, return the first list.\n\n     * Examples\n     * total_match([], []) \u279e []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) :> ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) :> ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) :> ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) :> ['4']\n     *\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {"}
{"task_id": "HumanEval_java/75", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsMultiplyPrime {\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100. \n     * Example:\n     * is_multiply_prime(30) == True\n     * 30 = 2 * 3 * 5\n     *\n     */\n    public static Boolean isMultiplyPrime(int a) {"}
{"task_id": "HumanEval_java/76", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSimplePower {\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * is_simple_power(1, 4) => true\n     * is_simple_power(2, 2) => true\n     * is_simple_power(8, 2) => true\n     * is_simple_power(3, 2) => false\n     * is_simple_power(3, 1) => false\n     * is_simple_power(5, 3) => false\n     */\n    public static Boolean isSimplePower(int x, int n) {\n        double log_n = Math.log(n);\n        double log_x = Math.log(x);\n\n        return Math.abs((log_x / log_n) - ((int)(log_x / log_n))) < 0.001;\n    }\n}"}
{"task_id": "HumanEval_java/77", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Iscube {\n    /**\n     * * Write a function that takes an integer a and returns True \n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     */\n    public static Boolean iscube(int a) {\n        for (int i = -10; i < 10; i++) {\n            if (Math.pow(i,3)==a){\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "HumanEval_java/78", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass HexKey {\n    /**\n     * You have been tasked to write a function that receives \n     * a hexadecimal number as a string and counts the number of hexadecimal \n     * digits that are primes (prime number, or a prime, is a natural number \n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7, \n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string, \n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     */\n    public static int hexKey(String num) {\n        int count = 0;\n\n        String[] hexArray = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n                \"A\",\"B\",\"C\",\"D\",\"E\",\"F\"};\n\n        for (int i=0;i<num.length();i++){\n            if (Arrays.asList(hexArray).contains(String.valueOf(num.charAt(i)))) {\n                int decimal = Integer.parseInt(Integer.toBinaryString\n                        (Integer.parseInt(String.valueOf(num.charAt(i)), 16)), 2);\n                switch (decimal) {\n                    case 2: count++; break;\n                    case 3: count++; break;\n                    case 5: count++; break;\n                    case 7: count++; break;\n                    case 11: count++; break;\n                    case 13: count++; break;\n\n                }\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/79", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DecimalToBinary {\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n\n     * Examples:\n     * decimal_to_binary(15)   # returns \"db1111db\"\n     * decimal_to_binary(32)   # returns \"db100000db\"\n     */\n    public static String decimalToBinary(int decimal) {\n        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}"}
{"task_id": "HumanEval_java/80", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsHappy {\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * is_happy(a) => False\n     * is_happy(aa) => False\n     * is_happy(abcd) => True\n     * is_happy(aabb) => False\n     * is_happy(adb) => True\n     * is_happy(xyy) => False\n     *\n     */\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3)\n            return false;\n\n        for (int i = 0; i < s.length() - 2; i++)\n            if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i+1) == s.charAt(i + 2))\n                return false;\n        return true;\n    }\n\n    public static void main(String[] args) {\n//        System.out.println(isHappy(\"abca\"));\n        System.out.println(isHappy(\"xyy\"));\n    }\n}"}
{"task_id": "HumanEval_java/81", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NumericalLetterGrade {\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write \n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A \n     *         > 3.3                A- \n     *         > 3.0                B+\n     *         > 2.7                B \n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+ \n     *         > 0.7                D \n     *         > 0.0                D-\n     *           0.0                E\n     * \n\n     * Example:\n     * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n\n        String[] letterGrades = new String[grades.size()];\n        for (int i = 0; i < grades.size(); i++) {\n            Number grade = grades.get(i);\n            if (grade.floatValue() >= 4.0) {\n                letterGrades[i] = \"A+\";\n            } else if (grade.floatValue() > 3.7) {\n                letterGrades[i] = \"A\";\n            } else if (grade.floatValue() > 3.3) {\n                letterGrades[i] = \"A-\";\n            } else if (grade.floatValue() > 3.0) {\n                letterGrades[i] = \"B+\";\n            } else if (grade.floatValue() > 2.7) {\n                letterGrades[i] = \"B\";\n            } else if (grade.floatValue() > 2.3) {\n                letterGrades[i] = \"B-\";\n            } else if (grade.floatValue() > 2.0) {\n                letterGrades[i] = \"C+\";\n            } else if (grade.floatValue() > 1.7) {\n                letterGrades[i] = \"C\";\n            } else if (grade.floatValue() > 1.3) {\n                letterGrades[i] = \"C-\";\n            } else if (grade.floatValue() > 1.0) {\n                letterGrades[i] = \"D+\";\n            } else if (grade.floatValue() > 0.7) {\n                letterGrades[i] = \"D\";\n            } else if (grade.floatValue() >= 0.0) {\n                letterGrades[i] = \"D-\";\n            } else {\n                letterGrades[i] = \"E\";\n            }\n        }\n        return Arrays.asList(letterGrades);\n    }\n}"}
{"task_id": "HumanEval_java/82", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PrimeLength {\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * prime_length('Hello') == True\n     * prime_length('abcdcba') == True\n     * prime_length('kittens') == True\n     * prime_length('orange') == False\n     *\n     */\n    public static Boolean primeLength(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n\n        for (int i = 2; i < string.length(); i++) {\n            if (string.length() % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/83", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StartsOneEnds {\n    /**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     */\n    public static int startsOneEnds(int n) {\n        if (n == 0)\n            return 2;\n\n        if (n == 1)\n            return 4;\n\n        long x = powerMod(2, n - 1);\n\n        // start with one\n        long res = x * 9;\n\n        // end with one\n        res += x * 8;\n\n        // both ends one\n        res -= powerMod(2, n - 2);\n\n        return (int)res;\n    }\n\n    public static void main(String args[]) {\n        int x = startsOneEnds(10);\n\n        System.out.println(\"Result: \" + x);\n    }\n\n    /**\n     * Returns a^b mod m\n     */\n    private static long powerMod(long a, int b) {\n        if (a == 0)\n            return 0;\n\n        if (a == 1 || b == 0)\n            return 1 % 1337; // 1337 is prime so no need to check for overflow\n\n        if (b == 1)\n            return a % 1337;\n\n        long res = powerMod(a, b / 2);\n        res *= res;\n        res %= 1337;\n\n        if (b % 2 == 1) {\n            res *= a;\n            res %= 1337;\n        }\n\n        return res;\n    }\n}"}
{"task_id": "HumanEval_java/84", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     * \n     * Example\n     *     For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     *     For N = 150, the sum of digits will be 6 the output should be \"110\".\n     *     For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     * \n     * Variables:\n     *     @N integer\n     *          Constraints: 0 \u2264 N \u2264 10000.\n     * Output:\n     *      a string of binary number\n     *\n     */\n    public static String solve(int n) {\n        // convert decimal to binary and count the total '1' in the binary string\n        int sum = 0;\n        while (n != 0) {\n            if ((n & 1) == 1)\n                sum++;\n            n >>= 1;\n        }\n        return Integer.toString(sum);\n    }\n\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        \n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            String result = solve(n);\n            System.out.println(result);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/85", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Add {\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n     * Examples:\n     *     add([4, 2, 6, 7]) ==> 2 \n     *\n     */\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i).remainder(2) == 0 ) {\n                result += lst.get(i); \n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/86", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AntiShuffle {\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n\n     * For example:\n     * anti_shuffle('Hi') returns 'Hi'\n     * anti_shuffle('hello') returns 'ehllo'\n     * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     *\n     */\n    public static String antiShuffle(String s) {\n        //Break the string into an array of words.\n        String[] words = s.split(\" \");\n        \n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            char[] letters = word.toCharArray();\n            Arrays.sort(letters);\n            String sortedWord = new String(letters);\n            words[i] = sortedWord;\n        }\n\n        // reconstruct the string by joining each word with a space\n        return String.join(\" \", words);\n    }\n\n    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        System.out.println(\"Please enter a sentence\");\n        String s = in.nextLine();\n        System.out.println(antiShuffle(s));\n    }\n}"}
{"task_id": "HumanEval_java/87", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetRow {\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     * \n     * Examples:\n     * get_row([\n     *   [1,2,3,4,5,6],\n     *   [1,2,3,4,1,6],\n     *   [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * get_row([], 1) == []\n     * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {"}
{"task_id": "HumanEval_java/88", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n\n     * Note:\n     * * don't change the given array.\n\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     */\n    public static List<Object> sortArray(List<Object> array) {\n        int sum = array.get(0).getClass() + array.get(array.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(array,Collections.reverseOrder());\n        } else {\n            Collections.sort(array);\n        }\n        return array;\n    }\n}"}
{"task_id": "HumanEval_java/89", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encrypt {\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated. \n     * The alphabet should be rotated in a manner such that the letters \n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     */\n    public static String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n        for (int i=0; i<s.length(); i++) {\n            int index = alphabet.indexOf(s.substring(i, i+1));\n            if (index == -1) continue;\n\n            int newIndex = index + 26*2;\n            if (newIndex > 25) {\n                newIndex -= 26;\n            }\n\n            s = s.substring(0, i) + alphabet.charAt(newIndex) + s.substring(i+1);\n        }\n\n        return s;\n    }\n}"}
{"task_id": "HumanEval_java/90", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass NextSmallest {\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * \n     * next_smallest([1, 2, 3, 4, 5]) == 2\n     * next_smallest([5, 1, 4, 3, 2]) == 2\n     * next_smallest([]) == None\n     * next_smallest([1, 1]) == None\n     *\n     */\n    public static Integer nextSmallest(List<Integer> lst) {"}
{"task_id": "HumanEval_java/91", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsBored {\n    /**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n   \n     * For example:\n     * >>> is_bored(\"Hello world\")\n     * 0\n     * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     */\n    public static int isBored(String s) {\n        int count = 0;\n        int i = 0;\n\n        while (i < s.length()) {\n            if (s.charAt(i++) == 'I') {\n                count++;\n            }\n\n            // We only care about the first word in a sentence.\n            while (i < s.length() && !\".?!\".contains(String.valueOf(s.charAt(i)))) {\n                i++;\n            }\n        }\n\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/92", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AnyInt {\n    /**\n     * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     * \n     * Examples:\n     * any_int(5, 2, 7) -> True\n     * \n     * any_int(3, 2, 2) -> False\n\n     * any_int(3, -2, 1) -> True\n     * \n     * any_int(3.6, -2.2, 2) -> False\n  \n\n     * \n     *\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {"}
{"task_id": "HumanEval_java/93", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Encode {\n    /**\n     * * Write a function that takes a message, and encodes in such a \n     * way that it swaps case of all letters, replaces all vowels in \n     * the message with the letter that appears 2 places ahead of that \n     * vowel in the english alphabet. \n     * Assume only letters. \n     * \n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     */\n    public static String encode(String message) {"}
{"task_id": "HumanEval_java/94", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Skjkasdkd {\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        // Write your code here\n\n        int maxPrimeDigitSum = -1;\n        \n        for (int i : lst) {\n            if (isPrime(i)) {\n                int primeDigitSum = getDigitSum(i);\n                if (primeDigitSum > maxPrimeDigitSum) {\n                    maxPrimeDigitSum = primeDigitSum;\n                }\n            }\n        }\n\n        return maxPrimeDigitSum;\n    }\n    \n    public static boolean isPrime(int n) {\n        // Check if n is divisible by any number from 2 to n-1\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static int getDigitSum(int n) {\n        // Calculate the sum of digits in n\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "HumanEval_java/95", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckDictCase {\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower \n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     */\n    public static Boolean checkDictCase(Map<String, Object> dict) {"}
{"task_id": "HumanEval_java/96", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpTo {\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * count_up_to(5) => [2,3]\n     * count_up_to(11) => [2,3,5,7]\n     * count_up_to(0) => []\n     * count_up_to(20) => [2,3,5,7,11,13,17,19]\n     * count_up_to(1) => []\n     * count_up_to(18) => [2,3,5,7,11,13,17]\n     *\n     */\n    public static List<Integer> countUpTo(int n) {"}
{"task_id": "HumanEval_java/97", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Multiply {\n    /**\n     * Complete the function that takes two integers and returns \n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     */\n    public static int multiply(int a, int b) {\n        int product = a*b;\n        int digitProduct=1;\n        \n        while(product!=0){\n            digitProduct *= (product%10);\n            product = product/10;\n        }\n        return digitProduct;\n    }\n}"}
{"task_id": "HumanEval_java/98", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountUpper {\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     * \n     * For example:\n     * count_upper('aBCdEf') returns 1\n     * count_upper('abcdefg') returns 0\n     * count_upper('dBBE') returns 0\n     *\n     */\n    public static int countUpper(String s) {\n        // Write your solution here"}
{"task_id": "HumanEval_java/99", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ClosestInteger {\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n\n     * Examples\n     * >>> closest_integer(\"10\")\n     * 10\n     * >>> closest_integer(\"15.3\")\n     * 15\n\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     */\n    public static int closestInteger(String value) {\n        float number = Float.parseFloat(value);\n\n        if (number >= 0 && Math.ceil(number) == number) {\n            return (int)Math.floor(number);\n        } else if (number < 0 && Math.ceil(number * -1) == (number * -1)) {\n            return -(int)Math.floor(number * -1);\n        }\n\n        return (int)(Math.round(number));\n    }\n}"}
{"task_id": "HumanEval_java/100", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MakeAPile {\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n\n     * Examples:\n     * >>> make_a_pile(3)\n     * [3, 5, 7]\n     *\n     */\n    public static List<Integer> makeAPile(int n) {\n        int count = 0;\n        boolean isEven = true;\n\n        if (n == 1)\n            return Arrays.asList(1);\n\n        List<Integer> levels = new ArrayList<>();\n        while(count < n) {\n            levels.add(n);\n            // alternate between odd and even\n            isEven = !isEven;\n            count++;\n            n += isEven ? -2 : +2;\n        }\n\n        return levels;\n    }\n}"}
{"task_id": "HumanEval_java/101", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsString {\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     * \n     * For example:\n     * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     */\n    public static List<Object> wordsString(String s) {\n        // String[] words = s.split(\"\\\\s+\"); // split into array by space\n\n        // ArrayList<String> list = new ArrayList<String>();\n        // for (int i=0; i<words.length; i++) {\n        //     if (!words[i].equals(\"\")) {\n        //         list.add(words[i]);\n        //     }\n        // }\n        // return list;\n\n        List<Object> list = new ArrayList<>();\n        String[] words = s.split(\"\\\\s+|,\");\n\n        for (int i=0; i<words.length; i++) {\n            if (!words[i].equals(\"\")) {\n                list.add(words[i]);\n            }\n        }\n        \n        return list;\n    }\n\n    public static void main(String args[]) {\n        String s = \"Hi, my name is John\";\n        System.out.println(wordsString(s));\n\n        s = \"One, two, three, four, five, six\";\n        System.out.println(wordsString(s));\n    }\n}"}
{"task_id": "HumanEval_java/102", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ChooseNum {\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If \n     * there's no such number, then the function should return -1.\n\n     * For example:\n     * choose_num(12, 15) = 14\n     * choose_num(13, 12) = -1\n     *\n     */\n    public static int chooseNum(int x, int y) {\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0)\n                return i;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int t = scanner.nextInt();\n        for (int i = 0; i < t; i++) {\n            String[] xy = scanner.next().split(\" \");\n\n            System.out.println(chooseNum(Integer.parseInt(xy[0]), Integer.parseInt(xy[1])));\n        }\n    }\n}"}
{"task_id": "HumanEval_java/103", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RoundedAvg {\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m). \n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * rounded_avg(1, 5) => \"0b11\"\n     * rounded_avg(7, 5) => -1\n     * rounded_avg(10, 20) => \"0b1111\"\n     * rounded_avg(20, 33) => \"0b11010\"\n     *\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        double sum = 0;\n        for (int i=n; i<=m; i++) sum +=i;\n        int avg = Math.round(sum/(double)(m-n+1));\n        String bin_avg = Integer.toBinaryString(avg);\n        return \"0b\" + bin_avg;\n    }\n}"}
{"task_id": "HumanEval_java/104", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass UniqueDigits {\n    /**\n     * Given a list of positive integers x. return a sorted list of all \n     * elements that hasn't any even digit.\n\n     * Note: Returned list should be sorted in increasing order.\n     * \n     * For example:\n     * >>> unique_digits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> unique_digits([152, 323, 1422, 10])\n     * []\n     *\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {"}
{"task_id": "HumanEval_java/105", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ByLength {\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n     * For example:\n     *   arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n     *         -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n     *         -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     *   return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * \n     *   If the array is empty, return an empty array:\n     *   arr = []\n     *   return []\n     * \n     *   If the array has any strange number ignore it:\n     *   arr = [1, -1 , 55] \n     *         -> sort arr -> [-1, 1, 55]\n     *         -> reverse arr -> [55, 1, -1]\n     *   return = ['One']\n     *\n     */\n    public static List<Object> byLength(List<Object> arr) {\n        // Write your code here\n        \n        if (arr.size() == 0){\n            return new ArrayList();\n        }\n\n        int[] numbers = new int[arr.size()];\n        for (int i=0; i < arr.size(); i++){\n            Object object = arr.get(i);\n\n            if (object instanceof Integer) {\n                Integer number = (Integer) object;\n\n                if (number > 9 || number < 1){\n                    continue;\n                }\n\n                numbers[i] = number;\n            } else {\n                continue;\n            }\n        }\n\n        Arrays.sort(numbers);\n        int[] reverseNumbers = new int[arr.size()];\n        for (int i=0; i< arr.size(); i++){\n            reverseNumbers[i] = numbers[arr.size() - 1 - i];\n        }\n\n        List<Object> reversedArray = new ArrayList();\n        for (Integer number : reverseNumbers){\n            switch(number){\n                case 1:\n                    reversedArray.add(\"One\");\n                    break;\n                case 2:\n                    reversedArray.add(\"Two\");\n                    break;\n                case 3:\n                    reversedArray.add(\"Three\");\n                    break;\n                case 4:\n                    reversedArray.add(\"Four\");\n                    break;\n                case 5:\n                    reversedArray.add(\"Five\");\n                    break;\n                case 6:\n                    reversedArray.add(\"Six\");\n                    break;\n                case 7:\n                    reversedArray.add(\"Seven\");\n                    break;\n                case 8:\n                    reversedArray.add(\"Eight\");\n                    break;\n                case 9:\n                    reversedArray.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return reversedArray;\n    }\n}"}
{"task_id": "HumanEval_java/106", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass F {\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i=1; i<=n; i++) {\n            if (i%2 == 0) {\n                result.add(factorial(i));\n            } else {\n                int sum = 0;\n                for (int j=1; j<=i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n\n        return result;\n    }\n\n    public static int factorial(int n) {\n        if (n==0 || n==1) {\n            return 1;\n        } else {\n            return n * factorial(n-1);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/107", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddPalindrome {\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n\n     * Example 1:\n\n     *     Input: 3\n     *     Output: (1, 2)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n     * Example 2:\n\n     *     Input: 12\n     *     Output: (4, 6)\n     *     Explanation:\n     *     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     */\n    public static List<Integer> evenOddPalindrome(int n) {"}
{"task_id": "HumanEval_java/108", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountNums {\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> count_nums([]) == 0\n     * >>> count_nums([-1, 11, -11]) == 1\n     * >>> count_nums([1, 1, 2]) == 3\n     *\n     */\n    public static int countNums(List<Object> arr) {"}
{"task_id": "HumanEval_java/109", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MoveOneBall {\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing \n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     * \n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index. \n\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n\n     * Note: The given list is guaranteed to have unique elements.\n\n     * For Example:\n     * \n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performin 2 right shift operations, non-decreasing order can\n     *              be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     *             array by performing any number of right shift operations.\n\n     * \n     * \n     */\n    public static Boolean moveOneBall(List<Object> arr) {"}
{"task_id": "HumanEval_java/110", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Exchange {\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // TODO: Implement this function\n        for(int i=0;i<lst1.size();i++){\n            if(lst1.get(i)%2!=0){\n                if(lst2.contains(lst1.get(i))){\n                    lst2.remove((Integer)lst1.get(i));\n                    lst1.set(i,lst1.get(i)+lst2.get(0));\n                    lst2.remove(0);\n                }\n            }\n        }\n        for (int i=0;i<lst1.size();i++){\n            if (lst1.get(i)%2!=0){\n                return \"NO\";\n            }\n\n        }\n        return \"YES\";\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(3, 4);\n        List<Integer> lst2 = Arrays.asList(2, 6);\n        System.out.println(exchange(lst1, lst2)); // \"YES\"\n    }\n}"}
{"task_id": "HumanEval_java/111", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Histogram {\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     * \n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n\n     *\n     */\n    public static Object histogram(String test) {\n        if (test == null || test.length() == 0)\n            return new HashMap();\n\n        String[] words = test.split(\" \");\n        Map<Character, Integer> letterCount = new HashMap<>();\n\n        for (String word : words) {\n            char[] letters = word.toCharArray();\n\n            for (char letter : letters) {\n                if (letterCount.containsKey(letter))\n                    letterCount.put(letter, letterCount.get(letter) + 1);\n                else\n                    letterCount.put(letter, 1);\n            }\n        }\n\n        return letterCount;\n    }\n}"}
{"task_id": "HumanEval_java/112", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ReverseDelete {\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     */\n    public static List<Object> reverseDelete(String s, String c) {"}
{"task_id": "HumanEval_java/113", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OddCount {\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n\n     * >>> odd_count(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> odd_count(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     *  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     */\n    public static List<String> oddCount(List<String> lst) {"}
{"task_id": "HumanEval_java/114", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minsubarraysum {\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     */\n    public static long minsubarraysum(List<Object> nums) {\n        if (nums.size() == 0) return 0;\n\n        long min = nums.get(0);\n        long sum = 0;\n        for (int i=1; i < nums.size(); i++) {\n            int val = (Integer)nums.get(i);\n            if (sum + val > val)\n                sum += val;\n            else\n                sum = val;\n\n            min = Math.min(min, sum);\n        }\n\n        return min;\n    }\n}"}
{"task_id": "HumanEval_java/115", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MaxFill {\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it, \n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n\n     * Example 1:\n     *     Input: \n     *         grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     *         bucket_capacity : 1\n     *     Output: 6\n\n     * Example 2:\n     *     Input: \n     *         grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     *         bucket_capacity : 2\n     *     Output: 5\n     * \n     * Example 3:\n     *     Input: \n     *         grid : [[0,0,0], [0,0,0]]\n     *         bucket_capacity : 5\n     *     Output: 0\n\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        // Write your code here\n\n        return -1;\n    }\n\n    public static void main(String args[]) {\n        List<List<Integer>> arr = new ArrayList<>();\n        arr.add(Arrays.asList(0, 0, 1, 0));\n        arr.add(Arrays.asList(0, 1, 0, 0));\n        arr.add(Arrays.asList(1, 1, 1, 1));\n\n        System.out.println(maxFill(arr, 2));\n    }\n}"}
{"task_id": "HumanEval_java/116", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortArray {\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n\n     * It must be implemented like this:\n     * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n     * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n        // if the array contains only zeros or negative numbers, return it.\n        if (arr.contains(-1))\n            return arr;\n\n        Integer[] temp = new Integer[arr.size()];\n        int j=0;\n        for(int i=0;i<temp.length;i++){\n\n            String binaryString = Integer.toBinaryString(Math.abs((Integer) arr.get(i)));\n            int count = 0;\n            for (char bit : binaryString.toCharArray()) {\n                if (bit == '1')\n                    count++;\n            }\n            temp[j++] = count * Math.signum(arr.get(i));\n        }\n\n        Arrays.sort(temp);\n        arr = new ArrayList<>();\n        for(int i=0;i<temp.length;i++){\n            arr.add(Math.abs(temp[i]));\n        }\n\n        return arr;\n    }\n}"}
{"task_id": "HumanEval_java/117", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SelectWords {\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement \n     * a function that returns a list of all words from string s that contain exactly \n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * select_words(\"simple white space\", 2) ==> []\n     * select_words(\"Hello world\", 4) ==> [\"world\"]\n     * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     */\n    public static List<Object> selectWords(String s, int n) {\n        return null;\n    }\n}"}
{"task_id": "HumanEval_java/118", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetClosestVowel {\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between \n     * two consonants from the right side of the word (case sensitive).\n     * \n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition. \n\n     * You may assume that the given string contains English letter only.\n\n     * Example:\n     * get_closest_vowel(\"yogurt\") ==> \"u\"\n     * get_closest_vowel(\"FULL\") ==> \"U\"\n     * get_closest_vowel(\"quick\") ==> \"\"\n     * get_closest_vowel(\"ab\") ==> \"\"\n     *\n     */\n    public static String getClosestVowel(String word) {"}
{"task_id": "HumanEval_java/119", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass MatchParens {\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n     * Examples:\n     * match_parens(['()(', ')']) == 'Yes'\n     * match_parens([')', ')']) == 'No'\n     *\n     */\n    public static String matchParens(List<String> lst) {\n\n        // create a stack to keep track of open parentheses\n        Stack<Character> stack = new Stack<>();\n        int balance = 0;\n        \n        for (String s:lst) {\n            for (int i=0; i<s.length();i++) {\n                if (stack.empty() || stack.peek() != s.charAt(i)) {\n                    stack.push(s.charAt(i));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        // check if the stack is empty\n        if (stack.empty()) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n        \n    }\n}"}
{"task_id": "HumanEval_java/120", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Maximum {\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list \n     * of length k with the maximum k numbers in arr.\n\n     * Example 1:\n\n     *     Input: arr = [-3, -4, 5], k = 3\n     *     Output: [-4, -3, 5]\n\n     * Example 2:\n\n     *     Input: arr = [4, -4, 4], k = 2\n     *     Output: [4, 4]\n\n     * Example 3:\n\n     *     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     *     Output: [2]\n\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n        for (int i : arr){\n            if (maxHeap.size() == k){\n                if (i > maxHeap.peek()){\n                    maxHeap.poll();\n                    maxHeap.offer(i);\n                }\n            } else {\n                maxHeap.offer(i);\n            }\n        }\n        \n        return new ArrayList<Integer>(maxHeap);\n    }\n}"}
{"task_id": "HumanEval_java/121", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solution {\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     * \n\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     */\n    public static int solution(List<Integer> lst) {"}
{"task_id": "HumanEval_java/122", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass AddElements {\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n\n     * Example:\n\n     *     Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     *     Output: 24 # sum of 21 + 3\n\n     * Constraints:\n     *     1. 1 <= len(arr) <= 100\n     *     2. 1 <= k <= len(arr)\n     *\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        // if the array is empty return\n        if (arr.size() == 0) {\n            return 0;\n        }\n\n        // declare the sum variable and loop over the first k elements in the array\n        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); ++i) {\n\n            // if number is less than 10, add it to the sum\n            if (arr.get(i).toString().length() == 1) {\n                sum += arr.get(i);\n            } else if (arr.get(i).toString().length() == 2) {\n\n                // if number is between 10 and 99, add it to the sum\n                sum += Integer.parseInt(arr.get(i).toString().substring(0,2));\n\n            }\n\n        }\n        return sum;\n    }\n\n    public static void main (String [] args) {\n        List<Integer> arr = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n        int k = 4;\n\n        System.out.println(\"Sum is: \" + addElements(arr, k));\n    }\n}"}
{"task_id": "HumanEval_java/123", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetOddCollatz {\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the \n     * previous term as follows: if the previous term is even, the next term is one half of \n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n     * Note: \n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n\n     * For example:\n     * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     */\n    public static List<Integer> getOddCollatz(int n) {\n        int[] sequence = collatzSequence(n);\n        return findOdd(sequence);\n    }\n\n    public static int[] collatzSequence(int startNum) {\n        if (startNum < 1) throw new IllegalArgumentException(\"Input is less than 1.\");\n\n        List<Integer> list = new ArrayList<>();\n        list.add(startNum);\n\n        while (startNum != 1){\n            if (startNum % 2 == 0) startNum /= 2;\n            else startNum = 3 * startNum + 1;\n            list.add(startNum);\n        }\n        return convertListToArray(list);\n    }\n\n    public static List<Integer> findOdd(int[] sequence){\n        List<Integer> odd = new ArrayList<>();\n\n        for (int i=0; i < sequence.length; i++){\n            if (sequence[i] % 2 != 0) odd.add(sequence[i]);\n        }\n        return odd;\n    }\n\n    public static int[] convertListToArray(List<Integer> list){\n        int[] array = new int[list.size()];\n\n        for (int i=0; i < list.size(); i++) {\n            array[i] = list.get(i);\n        }\n        return array;\n    }\n}"}
{"task_id": "HumanEval_java/124", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ValidDate {\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n\n     * for example: \n     * valid_date('03-11-2000') => True\n\n     * valid_date('15-01-2012') => False\n\n     * valid_date('04-0-2040') => False\n\n     * valid_date('06-04-2020') => True\n\n     * valid_date('06/04/2020') => False\n     *\n     */\n    public static Boolean validDate(String date) {"}
{"task_id": "HumanEval_java/125", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SplitWords {\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n     * split_words(\"Hello,world!\")\ufffd\ufffd [\"Hello\", \"world!\"]\n     * split_words(\"abcdef\") == 3 \n     */\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n\n            for (int i = 0; i < txt.length(); ++i) {\n                char c = txt.charAt(i);\n                if (c >= 'a' && c <= 'z') {\n                    if ((c - 'a') % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/126", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsSorted {\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n\n     * Examples\n     * is_sorted([5])\ufffd True\n     * is_sorted([1, 2, 3, 4, 5])\ufffd True\n     * is_sorted([1, 3, 2, 4, 5])\ufffd False\n     * is_sorted([1, 2, 3, 4, 5, 6])\ufffd True\n     * is_sorted([1, 2, 3, 4, 5, 6, 7])\ufffd True\n     * is_sorted([1, 3, 2, 4, 5, 6, 7])\ufffd False\n     * is_sorted([1, 2, 2, 3, 3, 4])\ufffd True\n     * is_sorted([1, 2, 2, 2, 3, 4])\ufffd False\n     *\n     */\n    public static Boolean isSorted(List<Object> lst) {\n        Integer prev = null;\n\n        for (int i=0; i <lst.size(); i++) {\n            if (prev == null || lst.get(i).equals(prev)) {\n                prev = lst.get(i);\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "HumanEval_java/127", "language": "java", "completion": "import java.util.Arrays;\nimport java.util.stream.IntStream;\n\npublic class Intersection {\n\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int[] intersection = new int[2]; // holds the start and end of the intersection\n        if (!intersects(interval1.get(0), interval1.get(1), interval2.get(0), interval2.get(1),\n                intersection))\n            return \"NO\";\n\n        // check whether length is prime\n        boolean isPrime = IntStream.rangeClosed(2, intersection[1] - intersection[0])\n                .noneMatch(i -> (intersection[1] - intersection[0]) % i == 0);\n        return isPrime ? \"YES\" : \"NO\";\n    }\n\n    private static boolean intersects(int start1, int end1, int start2, int end2, int[] result) {\n        if (end1 < start2 || start1 > end2)\n            return false;\n\n        // find intersection bounds\n        result[0] = Math.max(start1, start2);\n        result[1] = Math.min(end1, end2);\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"NO\");\n        System.out.println(\"YES\");\n        System.out.println(Arrays.toString(intersection(Arrays.asList(-3,-1), Arrays.asList(-5,5))));\n    }\n}"}
{"task_id": "HumanEval_java/128", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass ProdSigns {\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n\n     * Example:\n     * >>> prod_signs([1, 2, 2, -4]) == -9\n     * >>> prod_signs([0, 1]) == 0\n     * >>> prod_signs([]) == None\n     *\n     */\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.size() == 0){\n            return null;\n        }\n\n        int sum = 0;\n        int product = 1;\n        for(int i=0;i<arr.size();i++){\n\n            //sum the absolute value of the numbers in the array\n            sum += Math.abs((Integer) arr.get(i));\n\n            if ((Integer) arr.get(i) > 0)\n                product *= 1;\n            else if ((Integer) arr.get(i) < 0)\n                product *= -1;\n\n        }\n        // Return the result as a Integer, not an int\n        return sum * product;\n    }\n}"}
{"task_id": "HumanEval_java/129", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Minpath {\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n\n     * Examples:\n\n     *     Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     *     Output: [1, 2, 1]\n\n     *     Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     *     Output: [1]\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {"}
{"task_id": "HumanEval_java/130", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Tri {\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8 \n     * You are given a non-negative integer number n, you have to a return a list of the \n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     */\n    public static List<Number> tri(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be greater or equal to zero\");\n        }\n        return tri(n, new ArrayList<>());\n    }\n\n    private static List<Number> tri(int n, List<Number> sequence) {\n        if (sequence.size() > n) {\n            return sequence;\n        }\n\n        int lastIndex = sequence.size() - 1;\n\n        Number last = sequence.get(lastIndex);\n        if (last instanceof Integer && last < Integer.MAX_VALUE) {\n            int lastInt = (int) last;\n            if (lastInt % 2 == 0) {\n                sequence.add(lastInt / 2 + 1);\n            } else {\n                int n2 = sequence.size() - 2;\n                int n1 = sequence.size() - 1;\n                int p1 = sequence.get(n2).intValue();\n                int p2 = sequence.get(n1).intValue();\n\n                sequence.add((p1 + p2 + lastInt) / 2);\n            }\n        } else {\n            double dLast = (double) last;\n\n            if (dLast % 2 == 0) {\n                sequence.add(dLast / 2 + 1);\n            } else {\n                int n2 = sequence.size() - 2;\n                int n1 = sequence.size() - 1;\n                double p1 = (double) sequence.get(n2);\n                double p2 = (double) sequence.get(n1);\n\n                sequence.add((p1 + p2 + dLast) / 2);\n            }\n        }\n\n        return tri(n, sequence);\n    }\n}"}
{"task_id": "HumanEval_java/131", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Digits {\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     */\n    public static int digits(int n) {\n        int product = 1;\n        while (n > 0){\n            if((n % 10 ) % 2 != 0){\n                product *= (n % 10);\n            }\n            n /= 10;\n        }\n\n        return product;\n    }\n}"}
{"task_id": "HumanEval_java/132", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsNested {\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets \n     * where at least one bracket in the subsequence is nested.\n\n     * is_nested('[[]]')\ufffd\ufffd True\n     * is_nested('[]]]]]]][[[[[]')\ufffd\ufffd False\n     * is_nested('[][]')\ufffd\ufffd False\n     * is_nested('[]')\ufffd\ufffd False\n     * is_nested('[[][]]')\ufffd\ufffd True\n     * is_nested('[[]][[[')\ufffd\ufffd True\n     */\n    public static Boolean isNested(String string) {\n        \n        if (string.length()%2!=0){\n            return false;\n        }else{\n            Stack<Character> stack = new Stack<>();\n            for(int i=0;i<string.length();i++){\n                char c = string.charAt(i);\n                if(c=='['||c=='{'||c=='('){\n                    stack.push(c);\n                }else if(stack.empty()){\n                    return false;\n                }else{\n                    char t = stack.pop();\n                    if((t=='['&&c!=']')||(t=='{'&&c!='}')||(t=='('&&c!=')')){\n                        return false;\n                    }\n                }\n            }\n            if(stack.isEmpty())return true;\n            else return false;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/133", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     * \n     * @param lst list of numbers to find sum of squares.\n     * @return int sum of squared numbers.\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n\n        for (Number n : lst) {\n            sum += Math.ceil(n.doubleValue()) * Math.ceil(n.doubleValue());\n        }\n        return sum;\n\n    }\n}"}
{"task_id": "HumanEval_java/134", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CheckIfLastCharIsALetter {\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n\n     * Examples:\n     * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n     * check_if_last_char_is_a_letter(\"apple pi e\")\ufffd\ufffd True\n     * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n     * check_if_last_char_is_a_letter(\"\") \u279e False \n     *\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        //create a regex pattern that matches any non-whitespace character that is not followed by whitespace\n        Pattern pattern = Pattern.compile(\"(?<=\\\\s)\\\\S\");\n        \n        Matcher matcher = pattern.matcher(txt);\n        String last_char = String.valueOf(txt.charAt(txt.length()-1));\n        \n        if (Character.isLetter(last_char.charAt(0)) && !matcher.find()) {\n            return true;\n        } else {\n            return false;\n        }\n        \n    }\n}"}
{"task_id": "HumanEval_java/135", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CanArrange {\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n\n     * Examples:\n     * can_arrange([1,2,4,3,5]) = 3\n     * can_arrange([1,2,3]) = -1\n     *\n     */\n    public static int canArrange(List<Object> arr) {\n        return -1;\n    }\n}"}
{"task_id": "HumanEval_java/136", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass LargestSmallestIntegers {\n    /**\n     * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n\n     * Examples:\n     * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largest_smallest_integers([]) == (None, None)\n     * largest_smallest_integers([0]) == (None, None)\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {"}
{"task_id": "HumanEval_java/137", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CompareOne {\n    /**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n\n     * compare_one(1, 2.5) \u279e 2.5\n     * compare_one(1, \"2,3\") \u279e \"2,3\"\n     * compare_one(\"5,1\", \"6\") \u279e \"6\"\n     * compare_one(\"1\", 1) \u279e None\n     *\n     */\n    public static Object compareOne(Object a, Object b) {"}
{"task_id": "HumanEval_java/138", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IsEqualToSumEven {\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * is_equal_to_sum_even(4) == False\n     * is_equal_to_sum_even(6) == False\n     * is_equal_to_sum_even(8) == True\n     */\n    public static Boolean isEqualToSumEven(int n) {"}
{"task_id": "HumanEval_java/139", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SpecialFactorial {\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n\n     * For example:\n     * >>> special_factorial(4)\n     * 288\n\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     */\n    public static long specialFactorial(int n) {\n        int factor = 1;\n        for (int i=n; i>0; i--)\n            factor *= i;\n\n        long result = factorial(n);\n        for (int i=2; i<=n-1; i++)\n            result *= factorial(i);\n        return result;\n    }\n\n    public static long factorial(int n) {\n        int factor = 1;\n        for (int i=n; i>0; i--)\n            factor *= i;\n        return factor;\n    }\n}"}
{"task_id": "HumanEval_java/140", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FixSpaces {\n    /**\n     * * Given a string text, replace all spaces in it with underscores, \n     * and if a string has more than 2 consecutive spaces, \n     * then replace all consecutive spaces with - \n     * \n     * fix_spaces(\"Example\") == \"Example\"\n     * fix_spaces(\"Example 1\") == \"Example_1\"\n     * fix_spaces(\" Example 2\") == \"_Example_2\"\n     * fix_spaces(\" Example   3\") == \"_Example-3\"\n     *\n     */\n    public static String fixSpaces(String text) {\n        String spaces = \"\\\\s{2,}\";\n        \n        Pattern p = Pattern.compile(spaces);\n        Matcher m = p.matcher(text);\n        String result = m.replaceAll(\"_\");\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/141", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FileNameCheck {\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions \n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from \n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * file_name_check(\"example.txt\") # => 'Yes'\n     * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n     */\n    public static String fileNameCheck(String fileName) {"}
{"task_id": "HumanEval_java/142", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SumSquares {\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n     * \n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     */\n    public static int sumSquares(List<Object> lst) {"}
{"task_id": "HumanEval_java/143", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass WordsInSentence {\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n\n     * Example 1:\n     *     Input: sentence = \"This is a test\"\n     *     Output: \"is\"\n\n     * Example 2:\n     *     Input: sentence = \"lets go for swimming\"\n     *     Output: \"go for\"\n\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\n     */\n    public static String wordsInSentence(String sentence) {\n        // return the string that contains the words from the original sentence,\n        // whose lengths are prime numbers.\n\n        String[] words = sentence.split(\" \");\n        List<String> wordList = Arrays.asList(words);\n        StringBuilder resultBuilder = new StringBuilder();\n        for (String w : wordList) {\n            if (isPrime(w.length())) {\n                resultBuilder.append(w).append(\" \");\n            }\n        }\n\n        return resultBuilder.toString().trim();\n    }\n\n    private static boolean isPrime(int n) {\n        // check if the number is prime or not,\n        // it returns true when the number is prime, false otherwise.\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"lets go for swimming\";\n        System.out.println(\"wordsInSentence: \" + wordsInSentence(sentence));\n    }\n}"}
{"task_id": "HumanEval_java/144", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Simplify {\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     */\n    public static Boolean simplify(String x, String n) {\n        int numeratorX = 1;\n        int denominatorX = 1;\n        int numeratorN = 1;\n        int denominatorN = 1;\n\n        for (int i = 0; i < x.length(); i++) {\n            if (x.charAt(i) == '/') {\n                String[] xArr = new String[2];\n                xArr[0] = x.substring(0, i);\n                xArr[1] = x.substring(i + 1, x.length());\n                numeratorX = Integer.parseInt(xArr[0]);\n                denominatorX = Integer.parseInt(xArr[1]);\n            }\n        }\n\n        for (int i = 0; i < n.length(); i++) {\n            if (n.charAt(i) == '/') {\n                String[] nArr = new String[2];\n                nArr[0] = n.substring(0, i);\n                nArr[1] = n.substring(i + 1, n.length());\n                numeratorN = Integer.parseInt(nArr[0]);\n                denominatorN = Integer.parseInt(nArr[1]);\n            }\n        }\n\n        int resultNumerator = numeratorX * numeratorN;\n        int resultDenominator = denominatorX * denominatorN;\n\n        System.out.println(\"numerator: \" + numeratorX);\n        System.out.println(\"denominator: \" + denominatorX);\n        return ((resultNumerator % resultDenominator) == 0);\n\n    }\n}"}
{"task_id": "HumanEval_java/145", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass OrderByPoints {\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n\n        // Sorts list using Comparator\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(n -> String.valueOf(n).chars().mapToInt(c -> Character.getNumericValue(c)).sum()))\n                   .collect(Collectors.toList());\n    }\n}"}
{"task_id": "HumanEval_java/146", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Specialfilter {\n    /**\n     * Write a function that takes an array of numbers as input and returns \n     * the number of elements in the array that are greater than 10 and both \n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1 \n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     */\n    public static int specialfilter(List<Object> nums) {\n        // Check if the number is greater than 10.\n        // Use modulus to check if the last digit of a number is odd. \n        // If so, then we need to divide the number by 10 and check if the first digit of the number is also odd.\n\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            double num = nums.get(i);\n\n            if (num > 10) {\n                double lastDigit = Math.floor(num % 10);\n                if (lastDigit == 1 || lastDigit == 3 || lastDigit == 5 || lastDigit == 7 || lastDigit == 9) {\n                    double firstDigit = Math.floor(num / 10);\n                    if (firstDigit == 1 || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "HumanEval_java/147", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GetMaxTriples {\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n     * and a[i] + a[j] + a[k] is a multiple of 3.\n\n     * Example :\n     *     Input: n = 5\n     *     Output: 1\n     *     Explanation: \n     *     a = [1, 3, 7, 13, 21]\n     *     The only valid triple is (1, 7, 13).\n     *\n     */\n    public static int getMaxTriples(int n) {\n        if(n <= 2){\n            return 0;\n        }\n        \n        long[] a = new long[n+1];\n        for(int i=1;i<=n;i++){\n            a[i] = (long)i * i - i + 1;\n        }\n\n        int result = 0;\n        Map<Long, Integer> map = new HashMap<>();\n        \n        for(int k=n;k>=1;k--){\n            if(a[k] % 3 == 0 && a[k]/3 in map){\n                result += map.get((long)a[k]/3);\n            }\n            map.put(a[k], map.containsKey(a[k]) ? map.get(a[k])+1 : 1);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/148", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Bf {\n    /**\n     * * There are eight planets in our solar system: the closerst to the Sun \n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2. \n     * The function should return a tuple containing all planets whose orbits are \n     * located between the orbit of planet1 and the orbit of planet2, sorted by \n     * the proximity to the sun. \n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names. \n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n        List<Object> planets = Arrays.asList(\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\n                \"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\");\n\n        if (!planets.contains(planet1)) return new ArrayList<Object>();\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        int min = Math.min(index1,index2);\n        int max = Math.max(index1,index2);\n\n        List<Object> result = new ArrayList<Object>();\n        for (int i=min+1;i<max;i++){\n            String p = planets.get(i);\n            if (!p.equals(\"Saturn\") && !p.equals(\"Uranus\") && !p.equals(\"Neptune\"))\n                result.add(p);\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/149", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass SortedListSum {\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n        List<String> evenSizedStrings = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            if (s.length() % 2 == 0)\n                evenSizedStrings.add(lst.get(i));\n        }\n        Collections.sort(evenSizedStrings, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return Integer.compare(a.length(), b.length());\n            }\n        });\n\n        return evenSizedStrings;\n    }\n}"}
{"task_id": "HumanEval_java/150", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass XOrY {\n    /**\n     * A simple program which should return the value of x if n is \n     * a prime number and should return the value of y otherwise.\n\n     * Examples:\n     * for x_or_y(7, 34, 12) == 34\n     * for x_or_y(15, 8, 5) == 5\n     * \n     * @param n an integer.\n     * @param x an integer.\n     * @param y an integer.\n     * @return the value of x if n is a prime number and should return the value of y otherwise.\n     */\n    public static int xOrY(int n, int x, int y) {"}
{"task_id": "HumanEval_java/151", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoubleTheDifference {\n    /**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     * \n     * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * double_the_difference([-1, -2, 0]) == 0\n     * double_the_difference([9, -2]) == 81\n     * double_the_difference([0]) == 0  \n   \n     * If the input list is empty, return 0.\n     *\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        // Create a List to hold integers only:\n        final ArrayList<Integer> intlst = new ArrayList<>();\n\n        for (final Object obj : lst) {\n            if ((obj instanceof Integer) && (0 <= (int)obj)) {\n                intlst.add((Integer)obj);\n            } else if (obj instanceof Double) {\n                final double dbl = (Double)obj;\n                final int intgr = (int)dbl;\n\n                if (dbl == (double)intgr) {\n                    intlst.add(intgr);\n                }\n            }\n        }\n\n        // Square, sum and return:\n        int ret = 0;\n        \n        for (final Integer num : intlst) {\n            if ((num % 2) != 0) {\n                ret += num * num;\n            }\n        }\n        return ret;\n    }\n}"}
{"task_id": "HumanEval_java/152", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Compare {\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     * \n     * \n     * example:\n\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        \n        if (game.size() != guess.size()) throw new IllegalArgumentException(\"Size mismatch\");\n        \n\n        for (int i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n            int diff = Math.abs(score - guess.get(i));\n            \n            result.add(diff);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/153", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StrongestExtension {\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters \n     * in the extension's name, the strength is given by the fraction CAP - SM. \n     * You should find the strongest extension and return a string in this \n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n     * (its strength is -1).\n     * Example:\n     * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     */\n    public static String strongestExtension(String className, List<String> extensions) {"}
{"task_id": "HumanEval_java/154", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CycpatternCheck {\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpattern_check(\"abcd\",\"abd\") => False\n     * cycpattern_check(\"hello\",\"ell\") => True\n     * cycpattern_check(\"whassup\",\"psus\") => False\n     * cycpattern_check(\"abab\",\"baa\") => True\n     * cycpattern_check(\"efef\",\"eeff\") => False\n     * cycpattern_check(\"himenss\",\"simen\") => True\n\n     *\n     */\n    public static Boolean cycpatternCheck(String a, String b) {"}
{"task_id": "HumanEval_java/155", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass EvenOddCount {\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     *  Example:\n     *     even_odd_count(-12) ==> (1, 1)\n     *     even_odd_count(123) ==> (1, 2)\n     *\n     */\n    public static List<Integer> evenOddCount(int num) {"}
{"task_id": "HumanEval_java/156", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass IntToMiniRoman {\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n\n     * Examples:\n     * >>> int_to_mini_roman(19) == 'xix'\n     * >>> int_to_mini_roman(152) == 'clii'\n     * >>> int_to_mini_roman(426) == 'cdxxvi'\n     *\n     */\n    public static String intToMiniRoman(int number) {\n        HashMap<Integer, String> map = new HashMap<Integer, String>();\n\n        map.put(1000,\"m\");\n        map.put(900,\"cm\");\n        map.put(500,\"d\");\n        map.put(400,\"cd\");\n        map.put(100,\"c\");\n        map.put(90,\"xc\");\n        map.put(50,\"l\");\n        map.put(40,\"xl\");\n        map.put(10,\"x\");\n        map.put(9,\"ix\");\n        map.put(5,\"v\");\n        map.put(4,\"iv\");\n        map.put(1,\"i\");\n\n        String result = \"\";\n\n        for (Integer key : map.keySet()) {\n            while(number >= key) {\n                number -= key;\n                result += map.get(key);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int input = 19;\n        System.out.println(intToMiniRoman(input));\n    }\n}"}
{"task_id": "HumanEval_java/157", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass RightAngleTriangle {\n    /**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or \n     * 90 degree.\n     * Example:\n     * right_angle_triangle(3, 4, 5) == True\n     * right_angle_triangle(1, 2, 3) == False\n     *\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        // Sort the sides in descending order.\n        Integer sides[] = new Integer[]{a,b,c};\n        Arrays.sort(sides, Collections.reverseOrder());\n        \n        // Check if the sum of the two smaller sides is greater than the largest side\n        return (sides[0] + sides[1] > sides[2]);\n    }\n\n    public static void main(String args[]) {\n        System.out.println(rightAngleTriangle(3, 4, 5));\n        System.out.println(rightAngleTriangle(1, 2, 3));\n    }\n}"}
{"task_id": "HumanEval_java/158", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMax {\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n\n     * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n     * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     *\n     */\n    public static String findMax(List<String> words) {\n        int index = 0;\n        int maxCount = -1;\n        for (int i=1; i<words.size(); i++) {\n            int count = getUniqueCount(words.get(i));\n\n            if (count > maxCount) {\n                index = i;\n                maxCount = count;\n            } else if (count == maxCount && words.get(i).compareTo(words.get(index)) < 0) {\n                index = i;\n            }\n        }\n\n        return words.get(index);\n    }\n\n    private static int getUniqueCount(String word) {\n        Set<Character> set = new HashSet<>();\n        for (int i=0; i<word.length(); i++) {\n            set.add(word.charAt(i));\n        }\n\n        return set.size();\n    }\n}"}
{"task_id": "HumanEval_java/159", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Eat {\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     * \n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     * \n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     * \n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n\n     * Have fun :)\n     *\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (need > remaining){\n            result.add(remaining + number);\n            result.add(0);\n        } else{\n            result.add(number + need);\n            result.add(remaining - need);\n        }\n        return result;\n    }\n}"}
{"task_id": "HumanEval_java/160", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass DoAlgebra {\n    /**\n     * * Given two lists operator, and operand. The first list has basic algebra operations, and \n     * the second list is a list of integers. Use the two given lists to build the algebric \n     * expression and return the evaluation of this expression.\n\n     * The basic algebra operations:\n     * Addition ( + ) \n     * Subtraction ( - ) \n     * Multiplication ( * ) \n     * Floor division ( // ) \n     * Exponentiation ( ** ) \n\n     * Example:\n     * operator['+', '*', '-']\n     * array = [2, 3, 4, 5]\n     * result = 2 + 3 * 4 - 5\n     * => result = 9\n\n     * Note:\n     *     The length of operator list is equal to the length of operand list minus one.\n     *     Operand is a list of of non-negative integers.\n     *     Operator list has at least one operator, and operand list has at least two operands.\n\n     *\n     */\n    public static int doAlgebra(List<String> operator, List<Integer> operand) {\n        Stack<Integer> operandStack = new Stack<>();\n        Stack<Character> operatorStack = new Stack<>();\n\n        for (int i = 0; i < operand.size(); i++) {\n            if (operatorStack.isEmpty()) {\n                operandStack.push(operand.get(i));\n            } else {\n                while (!operatorStack.isEmpty() && hasHigherPrecedence(operatorStack.peek(), operator.get(i))) {\n                    int secondOperand = operandStack.pop();\n                    int firstOperand = operandStack.pop();\n                    char currentOperator = operatorStack.pop();\n                    operandStack.push(applyOperation(currentOperator, firstOperand, secondOperand));\n                }\n                operandStack.push(operand.get(i));\n            }\n        }\n\n        while (!operatorStack.isEmpty()) {\n            int rightOperand = operandStack.pop();\n            int leftOperand = operandStack.pop();\n            char currentOperator = operatorStack.pop();\n            operandStack.push(applyOperation(currentOperator, leftOperand, rightOperand));\n        }\n\n        return operandStack.pop();\n    }\n\n    private static boolean hasHigherPrecedence(char operator1, String operator2) {\n        int precedence1;\n        switch (operator1) {\n            case '+':\n                precedence1 = 1;\n                break;\n            case '-':\n                precedence1 = 1;\n                break;\n            case '*':\n                precedence1 = 2;\n                break;\n            case '/':\n                precedence1 = 2;\n                break;\n            case '%':\n                precedence1 = 2;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unknown operator \" + operator1);\n        }\n\n        int precedence2;\n        switch (operator2.charAt(0)) {\n            case '+':\n                precedence2 = 1;\n                break;\n            case '-':\n                precedence2 = 1;\n                break;\n            case '*':\n                precedence2 = 2;\n                break;\n            case '/':\n                precedence2 = 2;\n                break;\n            case '%':\n                precedence2 = 2;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unknown operator \" + operator2);\n        }\n\n        return precedence1 < precedence2;\n    }\n\n    private static int applyOperation(char operator, int operand1, int operand2) {\n        switch (operator) {\n            case '+':\n                return operand1 + operand2;\n            case '-':\n                return operand1 - operand2;\n            case '*':\n                return operand1 * operand2;\n            case '/':\n                return operand1 / operand2;\n            case '%':\n                return operand1 % operand2;\n            default:\n                throw new IllegalArgumentException(\"Unknown operator \" + operator);\n        }\n    }\n}"}
{"task_id": "HumanEval_java/161", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass Solve {\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     */\n    public static String solve(String s) {\n        int count=0;\n        for(int i=0;i<s.length();i++)\n        {\n            if((int)(s.charAt(i))>=97 && (int)(s.charAt(i))<=122)\n            {\n                count++;\n            }\n        }\n        \n        if(count==0)\n        {\n            return reverseString(s);\n        }\n        \n        StringBuilder sb=new StringBuilder();\n        for(int i=0;i<s.length();i++)\n        {\n            if((int)(s.charAt(i))>=97 && (int)(s.charAt(i))<=122)\n            {\n                char c=Character.toUpperCase(s.charAt(i));\n               // System.out.println(\"hello\");\n                sb.append(c);\n            }\n            else if((int)(s.charAt(i))>=65 && (int)(s.charAt(i))<=90)\n            {\n                char c=Character.toLowerCase(s.charAt(i));\n              //  System.out.println(\"hello\");\n                sb.append(c);\n            }\n            else{\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n        \n    }\n    \n    public static String reverseString(String s)\n    {\n        int l=0;\n        int r=s.length()-1;\n        StringBuilder sb=new StringBuilder();\n        \n        while(l<=r)\n        {\n            sb.append(s.charAt(r));\n            sb.append(s.charAt(l));\n            l++;\n            r--;\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "HumanEval_java/162", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass StringToMd5 {\n    /**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n\n     * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     */\n    public static String stringToMd5(String text) {\n        if (text.isEmpty()) {\n            return null;\n        } else {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bi = new BigInteger(1, digest);\n            String hashtext = bi.toString(16);\n            // Now we need to zero pad it if you actually want the full 32 chars.\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            return hashtext;\n        }\n    }\n}"}
{"task_id": "HumanEval_java/163", "language": "java", "completion": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass GenerateIntegers {\n    /**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n\n     * For example:\n     * generate_integers(2, 8) => [2, 4, 6, 8]\n     * generate_integers(8, 2) => [2, 4, 6, 8]\n     * generate_integers(10, 14) => []\n     *\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0)\n                list.add(i);\n        }\n\n        return list;\n    }\n}"}

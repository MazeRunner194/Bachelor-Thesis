{"task_id": "HumanEval_typescript/0", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Check if in given list of numbers, are any two numbers closer to each other than\n * given threshold.\n * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n * False\n * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * True\n * \n */\nconst has_close_elements = function (numbers: Array<number>, threshold: number) : boolean  {\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            const diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};"}
{"task_id": "HumanEval_typescript/1", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n * separate those group into separate strings and return the list of those.\n * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n * Ignore any spaces in the input string.\n * >>> separate_paren_groups('( ) (( )) (( )( ))')\n * ['()', '(())', '(()())']\n * \n */\nconst separate_paren_groups = function (paren_string: string) : Array<string>  {\n  let results = [];\n  let start = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      start++;\n    } else if (paren_string[i] === ')') {\n      start--;\n    }\n\n    if (start === 0) {\n      results.push(paren_string.substring(i + 1).trim());\n    }\n  }\n\n  return results;\n}"}
{"task_id": "HumanEval_typescript/2", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a positive floating point number, it can be decomposed into\n * and integer part (largest integer smaller than given number) and decimals\n * (leftover part always smaller than 1).\n * \n * Return the decimal part of the number.\n * >>> truncate_number(3.5)\n * 0.5\n * \n */\nconst truncate_number = function (number0: number) : number  {\n  let integerPart = Math.floor(number0);\n  return number0 - integerPart;\n}"}
{"task_id": "HumanEval_typescript/3", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You're given a list of deposit and withdrawal operations on a bank account that starts with\n * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n * at that point function should return True. Otherwise it should return False.\n * >>> below_zero([1, 2, 3])\n * False\n * >>> below_zero([1, 2, -4, 5])\n * True\n * \n */\nconst below_zero = function (operations: Array<number>) : boolean  {\n    let balance = 0;\n\n    for(let operation of operations) {\n        if(operation > 0) {\n            balance += operation;\n        } else if(balance < -1*operation) {\n            return true;\n        }\n    }\n    return false;\n}"}
{"task_id": "HumanEval_typescript/4", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * For a given list of input numbers, calculate Mean Absolute Deviation\n * around the mean of this dataset.\n * Mean Absolute Deviation is the average absolute difference between each\n * element and a centerpoint (mean in this case):\n * MAD = average | x - x_mean |\n * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n * 1.0\n */\nconst mean_absolute_deviation = function (numbers: Array<number>) : number {\n    if (numbers.length === 0) {\n        return 0;\n    }\n\n    const x_mean = numbers.reduce((a,b) => a+b)/numbers.length;\n    \n    let absoluteDeviations = numbers.map(x => Math.abs(x - x_mean));\n    return absoluteDeviations.reduce((a,b) => a+b)/absoluteDeviations.length;\n}"}
{"task_id": "HumanEval_typescript/5", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n * >>> intersperse([], 4)\n * []\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4, 3]\n * \n */\nconst intersperse = function (numbers: Array<number>, delimeter: number) : Array<number>  {\n  const output: Array<number> = [];\n  numbers.forEach((item, index) => {\n    if(index === 0){\n      output.push(item);\n    }else{\n      output.push(delimeter);\n      output.push(item);\n    }\n  });\n\n  return output;\n}"}
{"task_id": "HumanEval_typescript/6", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n * For each of the group, output the deepest level of nesting of parentheses.\n * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n * \n * >>> parse_nested_parens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n * \n */\nconst parse_nested_parens = function (paren_string: string) : Array<number>  {\n    let paren_list = paren_string.split(' ');\n    let nesting_levels : Array<number> = [];\n\n    for (let i = 0; i < paren_list.length; i++) {\n        let nested_depth = 1;\n        let current_char = paren_list[i].charAt(0);\n\n        while (current_char == '(') {\n            nested_depth++;\n            current_char = paren_list[i].charAt(nested_depth);\n        }\n\n        nesting_levels.push(nested_depth);\n    }\n\n    return nesting_levels;\n}"}
{"task_id": "HumanEval_typescript/7", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Filter an input list of strings only for ones that contain given substring\n * >>> filter_by_substring([], 'a')\n * []\n * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n * \n */\nconst filter_by_substring = function (strings: Array<string>, substring: string) : Array<string>  {\n    return strings.filter(s => s.includes(substring));\n};"}
{"task_id": "HumanEval_typescript/8", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n * Empty sum should be equal to 0 and empty product should be equal to 1.\n * >>> sum_product([])\n * (0, 1)\n * >>> sum_product([1, 2, 3, 4])\n * (10, 24)\n */\nconst sum_product = function (numbers: Array<number>) : Array<number> {\n    let sum = 0;\n    let product = 1;\n\n    for (let number of numbers) {\n        sum += number;\n        product *= number;\n    }\n    \n    return [sum, product];\n};"}
{"task_id": "HumanEval_typescript/9", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * From a given list of integers, generate a list of rolling maximum element found until given moment\n * in the sequence.\n * >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n * [1, 2, 3, 3, 3, 4, 4]\n * \n */\nconst rolling_max = function (numbers: Array<number>) : Array<number>  {\n  const rolling = [];\n  let max = 0;\n\n  for(let i = 0 ;i < numbers.length; ++i){\n    if(max < numbers[i]){\n      max = numbers[i];\n    }\n\n    rolling.push(max);\n\n  }\n\n\n  return rolling;\n}"}
{"task_id": "HumanEval_typescript/10", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Find the shortest palindrome that begins with a supplied string.\n * Algorithm idea is simple:\n * - Find the longest postfix of supplied string that is a palindrome.\n * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n * >>> make_palindrome('')\n * ''\n * >>> make_palindrome('cat')\n * 'catac'\n * >>> make_palindrome('cata')\n * 'catac'\n * \n */\nconst make_palindrome = function (string0: string) : string  {\n    const reverse = (string1: string) => {\n        return string1.split(\"\").reverse().join(\"\");\n    }\n\n    if (string0 == '') {\n        return '';\n    } else {\n        const reversed = reverse(string0);\n\n        for (let length = string0.length; length > 0; length--) {\n            let prefix = string0.substring(0, string0.length - length);\n\n            if (prefix + reversed.substring(0, length) ==\n                prefix + reverse(prefix)) {\n                return string0 + reversed.substring(length);\n            }\n        }\n    }\n\n    return null;\n}"}
{"task_id": "HumanEval_typescript/11", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Input are two strings a and b consisting only of 1s and 0s.\n * Perform binary XOR on these inputs and return result also as a string.\n * >>> string_xor('010', '110')\n * '100'\n * \n */\nconst string_xor = function (a: string, b: string) : string  {\n    if (a === b) {\n        return '';\n    }\n    const result = a.split('');\n\n    for(let i=0; i<result.length; i++) {\n        if (result[i] !== b[i]) {\n            result[i] = '1';\n        } else {\n            result[i] = '0';\n        }\n    }\n    return result.join('');\n};"}
{"task_id": "HumanEval_typescript/12", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return None in case the input list is empty.\n * >>> longest([])\n * \n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n * \n */\nconst longest = function (strings: Array<string>) : any  {\n    if (strings.length === 0)\n        return undefined;\n\n    let maxLength = strings[0].length,\n        maxString = strings[0];\n    for (let i = 1; i < strings.length; ++i) {\n        const currentLength = strings[i].length;\n\n        if (currentLength > maxLength) {\n            maxLength = currentLength;\n            maxString = strings[i];\n        }\n    }\n\n    return maxString;\n}"}
{"task_id": "HumanEval_typescript/13", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return a greatest common divisor of two integers a and b\n * >>> greatest_common_divisor(3, 5)\n * 1\n * >>> greatest_common_divisor(25, 15)\n * 5\n * \n */\nconst greatest_common_divisor = function (a: number, b: number) : number  {\n  if (b === 0) return a;\n\n  const remainder = a % b;\n  return greatest_common_divisor(b, remainder);\n}"}
{"task_id": "HumanEval_typescript/14", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return list of all prefixes from shortest to longest of the input string\n * >>> all_prefixes('abc')\n * ['a', 'ab', 'abc']\n * \n */\nconst all_prefixes = function (string0: string) : Array<string>  {\n    let output:Array<string> = [];\n    for(let index=1;index<=string0.length;index++) {\n        output.push(string0.substring(0,index));\n    }\n    return output;\n}"}
{"task_id": "HumanEval_typescript/15", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * >>> string_sequence(0)\n * '0'\n * >>> string_sequence(5)\n * '0 1 2 3 4 5'\n */\nconst string_sequence = function (n: number): string {\n    let sequence = \"\"\n\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            sequence += `${i}`\n        } else {\n            sequence += ` ${i}`\n        }\n    }\n\n    return sequence\n}"}
{"task_id": "HumanEval_typescript/16", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n * >>> count_distinct_characters('xyzXYZ')\n * 3\n * >>> count_distinct_characters('Jerry')\n * 4\n * \n */\nconst count_distinct_characters = function (string0: string) : number  {\n    const map0 = new Map<string, boolean>();\n    for(let index=0; index < string0.length; index++) {\n        const character0 = string0[index];\n        map0.set(character0.toLowerCase(), true);\n    }\n\n    return map0.size;\n}"}
{"task_id": "HumanEval_typescript/17", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Input to this function is a string representing musical notes in a special ASCII format.\n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n * \n * Here is a legend:\n * 'o' - whole note, lasts four beats\n * 'o|' - half note, lasts two beats\n * '.|' - quater note, lasts one beat\n * \n * >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n * \n */\nconst parse_music = function (music_string: string) : Array<number> {\n  const noteMap = {o: 4, '.': 1};\n  let beatLength: number;\n  return music_string.split(' ').map((note: string) => {\n    switch (note[0]) {\n      case 'o':\n        beatLength = 2;\n        break;\n      case '.':\n        beatLength = 1;\n        break;\n    }\n\n    if (note[1] === '|') {\n      return noteMap[note[0]] * beatLength;\n    } else {\n      return noteMap[note[0]];\n    }\n  });\n};"}
{"task_id": "HumanEval_typescript/18", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n * >>> how_many_times('', 'a')\n * 0\n * >>> how_many_times('aaa', 'a')\n * 3\n * >>> how_many_times('aaaa', 'aa')\n * 3\n * \n */\nconst how_many_times = function (string0: string, substring: string) : number  {\n    return string0.split(substring).length -1;\n}"}
{"task_id": "HumanEval_typescript/19", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n * Return the string with numbers sorted from smallest to largest\n * >>> sort_numbers('three one five')\n * 'one three five'\n * \n */\nconst sort_numbers = function (numbers: string) : string  {\n    let numberMap = new Map([\n        ['zero', 0],\n        ['one', 1],\n        ['two', 2],\n        ['three', 3],\n        ['four', 4],\n        ['five', 5],\n        ['six', 6],\n        ['seven', 7],\n        ['eight', 8],\n        ['nine', 9]\n    ]);\n\n    let numberArray = numbers.split(' ');\n    //console.log(numberMap);\n    //console.log(numberArray);\n    return numberArray\n        .map((str) => {return numberMap.get(str)})\n        .sort((a, b) => a - b)\n        .map((num) => Object.keys(numberMap).find(key => numberMap.get(key) === num))\n        .join(' ');\n}"}
{"task_id": "HumanEval_typescript/20", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n * other and return them in order (smaller number, larger number).\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n * (2.0, 2.2)\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n * (2.0, 2.0)\n * \n */\nconst find_closest_elements = function (numbers: Array<number>) : Array<number>  {\n    var min_diff = numbers[1] - numbers[0];\n    var closest: Array<number> = [numbers[0], numbers[1]];\n\n    for (let i = 0; i < numbers.length-1; i++) {\n        const n1 = numbers[i];\n\n        for (let j = i + 1; j < numbers.length; j++) {\n            const n2 = numbers[j];\n\n            if (n1 === n2) continue;\n\n            const diff = Math.abs(n1 - n2);\n\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest = [n1, n2]\n            }\n        }\n    }\n\n    return closest;\n};"}
{"task_id": "HumanEval_typescript/21", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n * [0.0, 0.25, 0.5, 0.75, 1.0]\n * \n */\nconst rescale_to_unit = function (numbers: Array<number>) : Array<number>  {\n  var minValue = Math.min(...numbers);\n  var maxValue = Math.max(...numbers);\n\n  return numbers.map((x) => { return (x - minValue)/(maxValue - minValue); });\n}"}
{"task_id": "HumanEval_typescript/22", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Filter given list of any python values only for integers\n * >>> filter_integers(['a', 3.14, 5])\n * [5]\n * >>> filter_integers([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n * \n */\nconst filter_integers = function (values: Array<any>) : Array<number>  {\n  const filteredValues: number[] = [];\n\n  for (let value of values) {\n    if (typeof value === \"number\") {\n      filteredValues.push(value);\n    }\n  }\n\n  return filteredValues;\n}"}
{"task_id": "HumanEval_typescript/23", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n * \n */\nconst strlen = function (string0: string) : number  {\n    return string0.length;\n}"}
{"task_id": "HumanEval_typescript/24", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * For a given number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n * 5\n */\nconst largestDivisor = function (n: number): number {\n  for (let i = n - 1; i > 0; --i) {\n    if (n % i === 0) {\n      return i\n    }\n  }\n\n  throw new Error(`No divisor found`)\n}"}
{"task_id": "HumanEval_typescript/25", "language": "typescript", "completion": "import * as math from 'mathjs'\n\n/**\n * You're an expert TypeScript programmer\n * Return list of prime factors of given integer in the order from smallest to largest.\n * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n * Input number should be equal to the product of all factors\n * >>> factorize(8)\n * [2, 2, 2]\n * >>> factorize(25)\n * [5, 5]\n * >>> factorize(70)\n * [2, 5, 7]\n * \n */\nconst factorize = function (n: number) : Array<number>  {\n    let factors : math.MathArray = math.factorize(n)\n\n    return math.sort(factors.valueOf()) as Array<number>\n}"}
{"task_id": "HumanEval_typescript/26", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * From a list of integers, remove all elements that occur more than once.\n * Keep order of elements left the same as in the input.\n * >>> remove_duplicates([1, 2, 3, 2, 4])\n * [1, 3, 4]\n * \n */\nconst remove_duplicates = function (numbers: Array<number>) : Array<number>  {\n  let seen = {};\n  for(let i of numbers) {\n    if(!seen[i]) seen[i]=0;\n    else return numbers.filter((x)=> x !== i);\n  }\n  \n  return numbers;\n};"}
{"task_id": "HumanEval_typescript/27", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n * >>> flip_case('Hello')\n * 'hELLO'\n * \n */\nconst flip_case = function (string0: string) : string  {\n    return string0.split(\"\").map(function(character) {\n        if (character === character.toUpperCase()) {\n            return character.toLowerCase();\n        } else {\n            return character.toUpperCase();\n        }\n    }).join('');\n};"}
{"task_id": "HumanEval_typescript/28", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Concatenate list of strings into a single string\n * >>> concatenate([])\n * ''\n * >>> concatenate(['a', 'b', 'c'])\n * 'abc'\n * \n */\nconst concatenate = function (strings: Array<string>) : string  {\n  return strings.join('');\n}"}
{"task_id": "HumanEval_typescript/29", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Filter an input list of strings only for ones that start with a given prefix.\n * >>> filter_by_prefix([], 'a')\n * []\n * >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n * ['abc', 'array']\n * \n */\nconst filter_by_prefix = function (strings: Array<string>, prefix: string) : Array<string>  {\n    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n};"}
{"task_id": "HumanEval_typescript/30", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return only positive numbers in the list.\n * >>> get_positive([-1, 2, -4, 5, 6])\n * [2, 5, 6]\n * >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [5, 3, 2, 3, 9, 123, 1]\n * \n */\nconst get_positive = function (l: Array<number>) : Array<number>  {\n  const result: Array<number> = [];\n  l.forEach(function (value) {\n    if (value > 0){\n      result.push(value);\n    }\n  });\n\n  return result;\n}"}
{"task_id": "HumanEval_typescript/31", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return true if a given number is prime, and false otherwise.\n * >>> is_prime(6)\n * False\n * >>> is_prime(101)\n * True\n * >>> is_prime(11)\n * True\n * >>> is_prime(13441)\n * True\n * >>> is_prime(61)\n * True\n * >>> is_prime(4)\n * False\n * >>> is_prime(1)\n * False\n */\nconst is_prime = function (n: number): boolean {"}
{"task_id": "HumanEval_typescript/33", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n * to the values of the corresponding indicies of l, but sorted.\n * >>> sort_third([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n * [2, 6, 3, 4, 8, 9, 5]\n */\nconst sort_third = function (l: Array<number>) : Array<number>  {\n  let l_prime = new Array<number>(l.length);\n  for(let i=0;i<l.length;i++) {\n    if ((i+1)%3 != 0) {\n      l_prime[i] = l[i];\n    } else {\n      l_prime[i] = l.slice((i-2>=0?i-2:0), (i+3>l.length?l.length:(i+3))).sort()[1];\n    }\n  }\n\n  return l_prime;\n}"}
{"task_id": "HumanEval_typescript/34", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n * \n */\nconst unique = function (l: Array<number>) : Array<number>  {\n  let sortedList = l.sort()\n  let lastIndex = -1\n  let result = []\n\n  for (let i = 0; i < sortedList.length; ++i) {\n    if (lastIndex === -1 || sortedList[i] > lastIndex + 1) {\n      result.push(sortedList[i])\n      lastIndex = sortedList[i]\n    }\n  }\n\n  return result\n}"}
{"task_id": "HumanEval_typescript/35", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return maximum element in the list.\n * >>> max_element([1, 2, 3])\n * 3\n * >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * 123\n */\nconst max_element = function (l: Array<number>) : number  {\n  return l.reduce((a, b) => (a > b ? a : b), l[0]);\n};"}
{"task_id": "HumanEval_typescript/36", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n * >>> fizz_buzz(50)\n * 0\n * >>> fizz_buzz(78)\n * 2\n * >>> fizz_buzz(79)\n * 3\n */\nconst fizz_buzz = function (n: number) : number  {\n    let count = 0;\n\n    for (let i = 1; i < n; i++) {\n        if ((i % 11 === 0 || i % 13 === 0)) {\n            const s = String(i);\n            const regex = /7/gim;\n            while (regex.exec(s) !== null) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/37", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n * to the values of the even indicies of l, but sorted.\n * >>> sort_even([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_even([5, 6, 3, 4])\n * [3, 6, 5, 4]\n * \n */\nconst sort_even = function (l: Array<number>) : Array<number>  {\n  const halfLength = l.length / 2;\n\n  for(let i = 0; i < halfLength; i++) {\n    let swap: boolean = false;\n\n    if(l[i * 2] > l[i * 2 + 1]) {\n      //swap them\n      [l[i * 2], l[i * 2 + 1]] = [l[i * 2 + 1], l[i * 2]];\n\n      swap = true;\n    }\n\n    if(!swap) {\n      //check next item\n    }\n  }\n}"}
{"task_id": "HumanEval_typescript/39", "language": "typescript", "completion": "import * as math from 'mathjs'\n\n/**\n * You're an expert TypeScript programmer\n * \n * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n * \n */\nconst fibonacci = math.Fibonacci()\nconst prime_fib = function (n: number) : number  {\n  let i: number = 0;\n  let result: number = -1;\n\n  while (i <= n) {\n    const currentFibNum: number = fibonacci.next().value;\n    if (math.isPrime(currentFibNum)) {\n      if (i === n) {\n        return currentFibNum;\n      } else {\n        i++;\n      }\n    }\n  }\n}"}
{"task_id": "HumanEval_typescript/40", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * triples_sum_to_zero takes a list of integers as an input.\n * it returns True if there are three distinct elements in the list that\n * sum to zero, and False otherwise.\n * \n * >>> triples_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> triples_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> triples_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n * True\n * >>> triples_sum_to_zero([1])\n * False\n * \n */\nconst triples_sum_to_zero = function (l: Array<number>) : boolean {\n    const s = new Set(l);\n\n    for (let x of l) {\n        if (!s.has(-x)) continue;\n\n        for (let y of l) {\n            if (y === -x || !s.has(x + y)) continue;\n\n            return true;\n        }\n    }\n\n    return false;\n}"}
{"task_id": "HumanEval_typescript/41", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Imagine a road that's a perfectly straight infinitely long line.\n * n cars are driving left to right;  simultaneously, a different set of n cars\n * are driving right to left.   The two sets of cars start out being very far from\n * each other.  All cars move in the same speed.  Two cars are said to collide\n * when a car that's moving left to right hits a car that's moving right to left.\n * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n * in their trajectory as if they did not collide.\n * \n * This function outputs the number of such collisions.\n */\nconst car_race_collision = (n: number) : number  => {\n    \n    let count = 0;\n    for(let i = 1 ; i <= n ; ++i){\n        for(let j = 1 ; j <= n ; ++j){\n            if(i === j ) continue;\n            const x = i - j; \n            if(x > 0 && n % x == 0) {\n                count++;    \n            }\n        }\n    }\n    \n    return count;\n}"}
{"task_id": "HumanEval_typescript/42", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return list with elements incremented by 1.\n * >>> incr_list([1, 2, 3])\n * [2, 3, 4]\n * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n * \n */\nconst incr_list = function (l: Array<number>) : Array<number>  {\n    let result: number[] = [];\n\n    l.forEach((e) => {\n        e += 1;\n        result.push(e);\n    })\n\n    return result;\n}"}
{"task_id": "HumanEval_typescript/43", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * pairs_sum_to_zero takes a list of integers as an input.\n * it returns True if there are two distinct elements in the list that\n * sum to zero, and False otherwise.\n * >>> pairs_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> pairs_sum_to_zero([1, 3, -2, 1])\n * False\n * >>> pairs_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n * True\n * >>> pairs_sum_to_zero([1])\n * False\n * \n */\nconst pairs_sum_to_zero = function (l: Array<number>) : boolean  {\n    let s = new Set(l);\n    \n    for (let i=0; i<l.length; ++i)\n        if (s.has(-l[i]))\n            return true;\n            \n    return false;\n}"}
{"task_id": "HumanEval_typescript/44", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Change numerical base of input number x to base.\n * return string representation after the conversion.\n * base numbers are less than 10.\n * >>> change_base(8, 3)\n * '22'\n * >>> change_base(8, 2)\n * '1000'\n * >>> change_base(7, 2)\n * '111'\n */\nconst change_base = function (x: number, base: number): string {\n    let digits = '0123456789';\n    let result = '';\n\n    while (x > 0) {\n        let remainder = x % base;\n        result = digits[remainder] + result;\n        x = Math.floor(x / base);\n    }\n\n    return result || '0';\n}"}
{"task_id": "HumanEval_typescript/45", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given length of a side and high return area for a triangle.\n * >>> triangle_area(5, 3)\n * 7.5\n * \n */\nconst triangle_area = function (a: number, h: number) : number  {\n  return (a*h)/2;\n};"}
{"task_id": "HumanEval_typescript/46", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fib4(0) -> 0\n * fib4(1) -> 0\n * fib4(2) -> 2\n * fib4(3) -> 0\n * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n * >>> fib4(5)\n * 4\n * >>> fib4(6)\n * 8\n * >>> fib4(7)\n * 14\n * \n */\nconst fib4 = function (n: number) : number  {\n  if ( n <= 0 ) return 0;\n  else if ( n === 1 || n === 2 ) return 0;\n  else if ( n === 3 ) return 2;\n\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  for(let i=4;i<=n;i++) {\n    const t = a + b + c;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return c;\n};"}
{"task_id": "HumanEval_typescript/47", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return median of elements in the list l.\n * >>> median([3, 1, 2, 4, 5])\n * 3\n * >>> median([-10, 4, 6, 1000, 10, 20])\n * 15.0\n * \n */\nconst median = function (l: Array<number>) : number  {\n    const n = l.length;\n\n    if(n === 0)\n        throw Error(\"Cannot compute median of empty list\");\n\n    // Sort the input array in place\n    l.sort((a, b) => a - b);\n\n    return n % 2 === 0 ? (l[Math.floor(n / 2)] + l[Math.ceil(n / 2)]) / 2 : l[Math.floor(n / 2)];\n};\n\nexport default median;"}
{"task_id": "HumanEval_typescript/48", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Checks if given string is a palindrome\n * \n */\nconst is_palindrome = function (text: string) : boolean  {\n    const cleanText = text.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n    return cleanText === cleanText.split('').reverse().join('');\n}"}
{"task_id": "HumanEval_typescript/49", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return 2^n modulo p (be aware of numerics).\n * >>> modp(3, 5)\n * 3\n * >>> modp(1101, 101)\n * 2\n * >>> modp(0, 101)\n * 1\n * >>> modp(3, 11)\n * 8\n * >>> modp(100, 101)\n * 1\n * \n */\nconst modp = function (n: number, p: number) : number  {\n    let result = 1;\n    for(let i=0;i<n;i++){\n        result *=2;\n        if(result>=p){\n            result%=p;\n        }\n        \n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_typescript/51", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * remove_vowels is a function that takes string and returns string without vowels.\n * >>> remove_vowels('')\n * ''\n * >>> remove_vowels(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels('abcdef')\n * 'bcdf'\n * >>> remove_vowels('aaaaa')\n * ''\n * >>> remove_vowels('aaBAA')\n * 'B'\n * >>> remove_vowels('zbcd')\n * 'zbcd'\n */\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\nconst removeVowelsHelper: (str: string, index: number) => string;\nremoveVowelsHelper = function(str: string, index: number): string {\n    if (index >= str.length) {\n        return '';\n    }\n\n    const currentChar = str[index];\n\n    if (vowels.includes(currentChar)) {\n        return removeVowelsHelper(str, index + 1);\n    } else {\n        return currentChar + removeVowelsHelper(str, index + 1)\n    }\n}\nconst remove_vowels = function(text: string): string {\n    return removeVowelsHelper(text.toLowerCase(), 0);\n};"}
{"task_id": "HumanEval_typescript/52", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n * \n */\nconst below_threshold = function (l: Array<number>, t: number) : boolean  {\n    for(let i of l){\n        if(i >= t){\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/53", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Add two numbers x and y\n * >>> add(2, 3)\n * 5\n * >>> add(5, 7)\n * 12\n */\nconst add = (x: number, y: number): number => {\n  return x + y;\n};"}
{"task_id": "HumanEval_typescript/54", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Check if two words have the same characters.\n * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * True\n * >>> same_chars('abcd', 'dddddddabc')\n * True\n * >>> same_chars('dddddddabc', 'abcd')\n * True\n * >>> same_chars('eabcd', 'dddddddabc')\n * False\n * >>> same_chars('abcd', 'dddddddabce')\n * False\n * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n * False\n */\n\n const count = function (str: string, character: string) : number {\n    return str.split(character).length - 1;\n };\n \n const same_char_counts = function (s0: string, s1: string): boolean {\n    \n    if(s0.length !== s1.length){\n        return false;\n    }\n\n    let s0Chars = new Set<string>();\n    let s1Chars = new Set<string>();\n    \n    for(let c of s0.split('')) {\n       s0Chars.add(c); \n    }\n  \n    for(let c of s1.split('')) {\n        if (!s0Chars.has(c)) {\n            return false;\n        }\n\n        s0Chars.delete(c);\n    }\n\n    let same = true;\n    for (let character of s0Chars) {\n        if (count(s0, character) !== count(s1, character)) {\n            same = false;\n        }\n    }\n\n    return same;\n };\n\n const same_chars = function (s0: string, s1: string): boolean {\n    let s0Chars = new Set<string>();\n    let s1Chars = new Set<string>();\n    \n    for(let c of s0.split('')) {\n       s0Chars.add(c); \n    }\n  \n    for(let c of s1.split('')) {\n        if (!s0Chars.has(c)) {\n            return false;\n        }\n\n        s0Chars.delete(c);\n    }\n\n    return (s0Chars.size === 0);\n };"}
{"task_id": "HumanEval_typescript/55", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return n-th Fibonacci number.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n * \n */\nconst fib = function (n: number) : number  {\n    let a=1,b=1,temp\n    while(--n>0){\n        temp=a;\n        a=a+b;\n        b=temp;\n    }\n    return a\n}"}
{"task_id": "HumanEval_typescript/56", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * brackets is a string of \"<\" and \">\".\n * return True if every opening bracket has a corresponding closing bracket.\n * \n * >>> correct_bracketing(\"<\")\n * False\n * >>> correct_bracketing(\"<>\")\n * True\n * >>> correct_bracketing(\"<<><>>\")\n * True\n * >>> correct_bracketing(\"><<>\")\n * False\n * \n */\nconst correct_bracketing = function (brackets: string) : boolean  {\n\n    const stack = [];\n    for (let i=0; i < brackets.length; i++) {\n        const char = brackets[i];\n        if (char === \"<\") {\n            stack.push(char);\n        } else if (stack.length > 0 && stack[stack.length-1] === \"<\" ) {\n            stack.pop(); \n        } else {\n            return false;\n        }\n    }\n\n    return stack.length === 0;\n}"}
{"task_id": "HumanEval_typescript/57", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return True is list elements are monotonically increasing or decreasing.\n * >>> monotonic([1, 2, 4, 20])\n * True\n * >>> monotonic([1, 20, 4, 10])\n * False\n * >>> monotonic([4, 1, 0, -10])\n * True\n */\nconst monotonic = function (l: Array<number>) : boolean {\n    let increasing = true;\n    let decreasing = true;\n\n    for(let i = 1; i < l.length; i++){\n        if(l[i] > l[i - 1])\n            decreasing = false;\n        else\n            increasing = false;\n    }\n\n    return increasing || decreasing;\n}"}
{"task_id": "HumanEval_typescript/58", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return sorted unique common elements for two lists.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n * \n */\nconst common = function (l1: Array<number>, l2: Array<number>) : Array<number>  {\n    let l1Map : Map<string, number> = new Map();\n    for(let num of l1) {\n        l1Map.set(num.toString(), num);\n    }\n\n    let commons : Array<number> = [];\n\n    // use the map to determine if the number exists in both arrays and add it to the result array if it does\n    for(let num2 of l2) {\n        if(l1Map.get(num2))\n            commons.push(num2);\n    }\n    return commons;\n}"}
{"task_id": "HumanEval_typescript/59", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n * \n */\nconst largest_prime_factor = function (n: number) : number  {\n    if(n === 2){\n        return n;\n    }\n\n    let d:number = Math.sqrt(n);\n    for(let i = 2; i <= d ;i++){\n\n        while(n%i === 0){\n            n /= i;\n\n            if(i > d && n != 1){\n                d = n;\n                break;\n            }\n        }\n    }\n\n    return d;\n}"}
{"task_id": "HumanEval_typescript/60", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * sum_to_n is a function that sums numbers from 1 to n.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n */\nconst sum_to_n = function (n: number) : number {\n  const halfNPlusOne = Math.floor((n + 1)/2);\n\n  return n * halfNPlusOne;\n}"}
{"task_id": "HumanEval_typescript/61", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * brackets is a string of \"(\" and \")\".\n * return True if every opening bracket has a corresponding closing bracket.\n * \n * >>> correct_bracketing(\"(\")\n * False\n * >>> correct_bracketing(\"()\")\n * True\n * >>> correct_bracketing(\"(()())\")\n * True\n * >>> correct_bracketing(\")(()\")\n * False\n * \n */\nconst correct_bracketing = function (brackets: string) : boolean  {\n    const stack = []\n    for(let i=0;i<brackets.length;i++){\n        if(brackets[i]===\"(\"){\n            stack.push(brackets[i])\n        } else{\n            if(!stack.length){\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return !stack.length\n}"}
{"task_id": "HumanEval_typescript/62", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * xs represent coefficients of a polynomial.\n * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n * Return derivative of this polynomial in the same form.\n * >>> derivative([3, 1, 2, 4, 5])\n * [1, 4, 12, 20]\n * >>> derivative([1, 2, 3])\n * [2, 6]\n * \n */\nconst derivative = function (xs: Array<number>) : Array<number>  {\n  const result:Array<number> = [];\n\n  for(let i=1;i<xs.length;i++) {\n    let currentElement = xs[i]*Math.pow(x,i-1);\n    result.push(currentElement);\n  }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/63", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fibfib(0) == 0\n * fibfib(1) == 0\n * fibfib(2) == 1\n * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n * >>> fibfib(1)\n * 0\n * >>> fibfib(5)\n * 4\n * >>> fibfib(8)\n * 24\n * \n */\nconst fibfib = function (n: number) : number {\n\n    if (n < 3){\n        return n;\n    }\n    let cache = [0, 0, 1];\n    for (let i=3 ;i<=n;i++){\n        cache[i] = cache[i-1]+cache[i-2]+cache[i-3];\n    }\n    return cache[n];\n}"}
{"task_id": "HumanEval_typescript/64", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Write a function vowels_count which takes a string representing\n * a word as input and returns the number of vowels in the string.\n * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n * vowel, but only when it is at the end of the given word.\n * \n * Example:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n * 3\n * \n */\nconst vowels_count = function (s: string) : number  {\n    return s.match(/[aeiouy]/)?.length ?? 0;\n};"}
{"task_id": "HumanEval_typescript/65", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Circular shift the digits of the integer x, shift the digits right by shift\n * and return the result as a string.\n * If shift > number of digits, return digits reversed.\n * >>> circular_shift(12, 1)\n * \"21\"\n * >>> circular_shift(12, 2)\n * \"12\"\n * \n */\nconst circular_shift = function (x: number, shift: number) : string  {\n  let digits: number[] = [];\n  while (x > 0) {\n    const digit: number = x % 10;\n    digits.unshift(digit);\n    x = Math.floor(x / 10);\n  }\n\n  if (shift >= digits.length) {\n    return digits.reverse().join('');\n  } else {\n    const start: number = shift * -1;\n    let end: number = digits.length - start;\n    const subArray: number[] = digits.slice(start, end);\n\n    const result: string = subArray.concat(digits.slice(0, start)).reverse().join('');\n    return result;\n  }\n}"}
{"task_id": "HumanEval_typescript/66", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Task\n * Write a function that takes a string as input and returns the sum of the upper characters only'\n * ASCII codes.\n * \n * Examples:\n * digitSum(\"\") => 0\n * digitSum(\"abAB\") => 131\n * digitSum(\"abcCd\") => 67\n * digitSum(\"helloE\") => 69\n * digitSum(\"woArBld\") => 131\n * digitSum(\"aAaaaXa\") => 153\n * \n */\nconst digitSum = function (s: string) : number  {\n  let sum = 0;\n\n  for (let i=0; i < s.length; i++) {\n    if(s[i] === s[i].toUpperCase()) {\n      // console.log(s[i])\n      sum += s[i].charCodeAt();\n    } \n  }\n  \n  return sum\n};"}
{"task_id": "HumanEval_typescript/67", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * In this task, you will be given a string that represents a number of apples and oranges \n * that are distributed in a basket of fruit this basket contains \n * apples, oranges, and mango fruits. Given the string that represents the total number of \n * the oranges and apples and an integer that represent the total number of the fruits \n * in the basket return the number of the mango fruits in the basket.\n * for examble:\n * fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n * fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n * fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n * fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n * \n */\nconst fruit_distribution = function (s: string, n: number) : number  {\n  let arr = s.split(' ')\n  let apples = Number(arr[0])\n  let oranges = Number(arr[4])\n\n  return n - apples - oranges\n};"}
{"task_id": "HumanEval_typescript/68", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * \"Given an array representing a branch of a tree that has non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest even value.\n * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n * \n * The plucked node should be returned in a list, [ smalest_value, its index ],\n * If there are no even values or the given array is empty, return [].\n * \n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * \n * Example 2:\n * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest even value, and 2 has the smallest index. \n * \n * Example 3:\n * Input: []\n * Output: []\n * \n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n * \n * Constraints:\n * * 1 <= nodes.length <= 10000\n * * 0 <= node.value\n */\nconst pluck = function (arr: Array<number>) : Array<number> {\n\n    let even = [];\n    for (let i=0; i < arr.length; i++)\n        if (arr[i] % 2 == 0)\n            even.push([arr[i], i]);\n    \n    // Sort by smallest value\n    even.sort((a, b) => a[0] - b[0]);\n\n    return even.length > 0 ? [even[0][0], even[0][1]] : [];\n}"}
{"task_id": "HumanEval_typescript/69", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n * zero, and has a frequency greater than or equal to the value of the integer itself. \n * The frequency of an integer is the number of times it appears in the list.\n * If no such a value exist, return -1.\n * Examples:\n * search([4, 1, 2, 2, 3, 1]) == 2\n * search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n * search([5, 5, 4, 4, 4]) == -1\n * \n */\nconst search = function (lst: Array<number>) : number  {\n  const obj = {};\n  let max = -1;\n\n  lst.forEach((item) => {\n    if (obj[item]) {\n      obj[item]++;\n      return;\n    } else {\n      obj[item] = 1;\n    }\n\n    if(max < item && obj[item] >= item) {\n      max = item;\n    }\n  });\n  \n  return max;\n}"}
{"task_id": "HumanEval_typescript/70", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given list of integers, return list in strange order.\n * Strange sorting, is when you start with the minimum value,\n * then maximum of the remaining integers, then minimum and so on.\n * \n * Examples:\n * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n * strange_sort_list([]) == []\n * \n */\nconst strange_sort_list = function (lst: Array<number>) : Array<number>  {\n    let min: number;\n    let max: number;\n\n    if(lst.length === 0) return [];\n\n    for(let i=1;i<lst.length;i++)\n        {\n            if(lst[i] > lst[min])\n                {\n                    max = i;\n                }\n\n        }"}
{"task_id": "HumanEval_typescript/71", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given the lengths of the three sides of a triangle. Return the area of\n * the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n * Otherwise return -1\n * Three sides make a valid triangle when the sum of any two sides is greater \n * than the third side.\n * Example:\n * triangle_area(3, 4, 5) == 6.00\n * triangle_area(1, 2, 10) == -1\n * \n */\nconst triangle_area = function (a: number, b: number, c: number) : number  {\n  if (!isTriangle(a,b,c)) return -1;\n  \n  const p = (a + b + c) / 2;\n\n  // Heron's formula\n  const area = Math.sqrt(p * (p - a) * (p - b) * (p - c)); \n  return Number((area).toFixed(2));\n};\n\nconst isTriangle = function(a: number, b: number, c: number): boolean {\n  // Check if the three sides form a valid triangle\n  const sides = [a, b, c].sort();\n  return (sides[0] + sides[1]) > sides[2];\n}"}
{"task_id": "HumanEval_typescript/72", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function that returns True if the object q will fly, and False otherwise.\n * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n * \n * Example:\n * will_it_fly([1, 2], 5) \u279e False \n * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n * \n * will_it_fly([3, 2, 3], 1) \u279e False\n * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n * \n * will_it_fly([3, 2, 3], 9) \u279e True\n * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n * \n * will_it_fly([3], 5) \u279e True\n * # 3 is less than the maximum possible weight, and it's balanced.\n * \n */\nconst will_it_fly = function (q: Array<number>, w: number) : boolean  {\n  // Write your code here\n};"}
{"task_id": "HumanEval_typescript/73", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given an array arr of integers, find the minimum number of elements that\n * need to be changed to make the array palindromic. A palindromic array is an array that\n * is read the same backwards and forwards. In one change, you can change one element to any other element.\n * \n * For example:\n * smallest_change([1,2,3,5,4,7,9,6]) == 4\n * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n * smallest_change([1, 2, 3, 2, 1]) == 0\n */\nconst smallest_change = function (arr: Array<number>) : number  {\n    let length = arr.length;\n    if(length === 1){\n        return 0;\n    }\n    let index_right = Math.ceil(length / 2) - 1;\n    let index_left = Math.floor(length / 2);\n    let count = 0;\n\n    while(index_right >= 0 && arr[index_right] === arr[index_left]){\n        index_right--;\n        index_left++;\n    }\n\n    if(index_right < 0){\n        return 0;\n    } else {\n        count += Math.abs(arr[index_right] - arr[index_left]);\n        let middle = Math.floor((length + 1) / 2);\n\n        for(let i = index_left + 1; i <= index_right; i++){\n            if(arr[i] === arr[middle]){\n                continue;\n            } else {\n                count += 2 * Math.min(\n                    Math.abs(arr[i] - arr[index_right]), \n                    Math.abs(arr[i] - arr[index_left])\n                );\n            }\n        }\n    }\n\n    return count;\n}"}
{"task_id": "HumanEval_typescript/74", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function that accepts two lists of strings and returns the list that has \n * total number of chars in the all strings of the list less than the other list.\n * \n * if the two lists have the same number of chars, return the first list.\n * \n * Examples\n * total_match([], []) \u279e []\n * total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n * total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n * \n */\nconst total_match = function (lst1: Array<string>, lst2: Array<string>) : Array<string>  {\n    let count1:number=0;\n    let count2:number=0;\n\n    for(let i in lst1){\n        let n1:string=lst1[i].toLowerCase();\n        count1+=n1.length;\n    }\n\n    for(let j in lst2){\n        let n2:string=lst2[j].toLowerCase();\n        count2+=n2.length;\n    }\n    if (count1<count2){\n        return lst1;\n    }else if(count2<count1){\n        return lst2;\n    }else{\n        return lst1;\n    }\n};"}
{"task_id": "HumanEval_typescript/75", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n * and false otherwise.\n * Knowing that (a) is less then 100. \n * Example:\n * is_multiply_prime(30) == True\n * 30 = 2 * 3 * 5\n * \n */\nconst is_multiply_prime = function (a: number) : boolean  {\n  if (typeof a !== 'number') return false; \n  for (let i=2; i<100; i++) {\n    //console.log(i);\n    let divisors_count = 0; \n    while (a % i == 0 ) {\n      a /= i; \n      divisors_count++;\n    }\n    if (divisors_count > 1) return false; \n  }\n  return true; \n}"}
{"task_id": "HumanEval_typescript/76", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Your task is to write a function that returns true if a number x is a simple\n * power of n and false in other cases.\n * x is a simple power of n if n**int=x\n * For example:\n * is_simple_power(1, 4) => true\n * is_simple_power(2, 2) => true\n * is_simple_power(8, 2) => true\n * is_simple_power(3, 2) => false\n * is_simple_power(3, 1) => false\n * is_simple_power(5, 3) => false\n * \n */\nconst is_simple_power = function (x: number, n: number) : boolean  {\n    if (n === 0) {\n        return x == 1; \n    }\n    while (n > 1 && x % n == 0 ) {\n        x /= n;\n    }\n    return x === 1;\n}"}
{"task_id": "HumanEval_typescript/77", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function that takes an integer a and returns True \n * if this ingeger is a cube of some integer number.\n * Note: you may assume the input is always valid.\n * Examples:\n * iscube(1) ==> True\n * iscube(2) ==> False\n * iscube(-1) ==> True\n * iscube(64) ==> True\n * iscube(0) ==> True\n * iscube(180) ==> False\n * \n */\nconst iscube = function (a: number): boolean  {\n  let sqrtA = Math.sqrt(a);\n  return sqrtA % 1 === 0;\n};"}
{"task_id": "HumanEval_typescript/78", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You have been tasked to write a function that receives \n * a hexadecimal number as a string and counts the number of hexadecimal \n * digits that are primes (prime number, or a prime, is a natural number \n * greater than 1 that is not a product of two smaller natural numbers).\n * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n * So you have to determine a number of the following digits: 2, 3, 5, 7, \n * B (=decimal 11), D (=decimal 13).\n * Note: you may assume the input is always correct or empty string, \n * and symbols A,B,C,D,E,F are always uppercase.\n * Examples:\n * For num = \"AB\" the output should be 1.\n * For num = \"1077E\" the output should be 2.\n * For num = \"ABED1A33\" the output should be 4.\n * For num = \"123456789ABCDEF0\" the output should be 6.\n * For num = \"2020\" the output should be 2.\n * \n */\nconst hex_key = function (num: string) : number {\n    let count = 0;\n    for (let i = 0 ; i < num.length ; i++) {\n        const code = num.charCodeAt(i);\n        if (code >= 48 && code <= 57) {\n            if (code === 50 || code === 51 || code === 53 || code === 55) {\n                count++;\n            }\n        } else if ((code >= 65 && code <= 70) || (code >= 97 && code <= 102)) {\n            if (code === 66 || code === 68 ) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\")); // => 0"}
{"task_id": "HumanEval_typescript/79", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You will be given a number in decimal form and your task is to convert it to\n * binary format. The function should return a string, with each character representing a binary\n * number. Each character in the string will be '0' or '1'.\n * \n * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n * The extra characters are there to help with the format.\n * \n * Examples:\n * decimal_to_binary(15)   # returns \"db1111db\"\n * decimal_to_binary(32)   # returns \"db100000db\"\n */\nconst decimalToBinary = function (decimal: number): string {\n  const binary = decimal.toString(2); // convert to binary and return it as a string\n  return `db${binary}db`; // append the extra characters at the beginning and end of the string\n};"}
{"task_id": "HumanEval_typescript/80", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You are given a string s.\n * Your task is to check if the string is happy or not.\n * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n * For example:\n * is_happy(a) => False\n * is_happy(aa) => False\n * is_happy(abcd) => True\n * is_happy(aabb) => False\n * is_happy(adb) => True\n * is_happy(xyy) => False\n * \n */\nconst is_happy = function (s: string): boolean {\n    \n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i <= s.length - 3; i++) {\n        const substring = s.substring(i, i+3);\n\n        const unique = new Set(substring);\n\n        if (unique.size === 3) {\n            return true;\n        }\n    }\n\n    return false;\n};"}
{"task_id": "HumanEval_typescript/81", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * It is the last week of the semester and the teacher has to give the grades\n * to students. The teacher has been making her own algorithm for grading.\n * The only problem is, she has lost the code she used for grading.\n * She has given you a list of GPAs for some students and you have to write \n * a function that can output a list of letter grades using the following table:\n * GPA       |    Letter grade\n * 4.0                A+\n * > 3.7                A \n * > 3.3                A- \n * > 3.0                B+\n * > 2.7                B \n * > 2.3                B-\n * > 2.0                C+\n * > 1.7                C\n * > 1.3                C-\n * > 1.0                D+ \n * > 0.7                D \n * > 0.0                D-\n * 0.0                E\n * \n * \n * Example:\n * grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n */\n\n const numerical_letter_grade = function (grades: Array<number>) : Array<string>  {\n   let letterGrades = [] as Array<string>;\n   \n   // Create a mapping table for GPA and Grade\n   const gpa2grade = new Map<number, string>(\n     [\n       [4.0, 'A+'], \n       [3.7, 'A'], \n       [3.3, 'A-'], \n       [3.0, 'B+'], \n       [2.7, 'B'], \n       [2.3, 'B-'], \n       [2.0, 'C+'],\n       [1.7, 'C'], \n       [1.3, 'C-'], \n       [1.0, 'D+'], \n       [0.7, 'D'], \n       [0.0, 'D-'],\n       [0.0, 'E']\n     ]);\n   \n   for (let i = 0; i < grades.length; i++) {\n      let grade = gpa2grade.get(grades[i]);\n      if (grade == undefined) {\n         throw new Error('Invalid GPA value');\n      } else {\n         letterGrades.push(grade);\n      }\n   }\n   \n   return letterGrades;\n };"}
{"task_id": "HumanEval_typescript/82", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Write a function that takes a string and returns True if the string\n * length is a prime number or False otherwise\n * Examples\n * prime_length('Hello') == True\n * prime_length('abcdcba') == True\n * prime_length('kittens') == True\n * prime_length('orange') == False\n * \n */\nconst isPrime = (num: number): boolean => {\n  if (num <= 1) return false;\n  \n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\nconst prime_length = function (string0: string) : boolean  {\n  return isPrime(string0.length);\n};"}
{"task_id": "HumanEval_typescript/83", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a positive integer n, return the count of the numbers of n-digit\n * positive integers that start or end with 1.\n * \n */\nconst starts_one_ends = function (n: number) : number  {\n    // Base case\n    if (n == 1 || n == 2)\n        return Math.pow(2, n - 1);\n\n    // Recursive case\n    let count = 0;\n    for (let i = 1; i < n; i++)\n    {\n        count += starts_one_ends(i);\n        count += starts_one_ends(n - i - 1);\n    }\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/84", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a positive integer N, return the total sum of its digits in binary.\n * \n * Example\n * For N = 1000, the sum of digits will be 1 the output should be \"1\".\n * For N = 150, the sum of digits will be 6 the output should be \"110\".\n * For N = 147, the sum of digits will be 12 the output should be \"1100\".\n * \n * Variables:\n * @N integer\n * Constraints: 0 \u2264 N \u2264 10000.\n * Output:\n * a string of binary number\n * \n */\nconst solve = function (N: number) : string  {\n  const binarySum = String(N).split('').reduce((acc, val) => acc + Number(val), 0);\n  return Number(binarySum).toString(2);\n}"}
{"task_id": "HumanEval_typescript/85", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n * \n * \n * Examples:\n * add([4, 2, 6, 7]) ==> 2 \n * \n */\nconst add = function (lst: Array<number>) : number  {\n    return lst.filter((el,index) => index%2 !==0 && el%2===0).reduce((acc,cur)=> acc+cur,0);\n  }"}
{"task_id": "HumanEval_typescript/86", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function that takes a string and returns an ordered version of it.\n * Ordered version of string, is a string where all words (separated by space)\n * are replaced by a new word where all the characters arranged in\n * ascending order based on ascii value.\n * Note: You should keep the order of words and blank spaces in the sentence.\n * \n * For example:\n * anti_shuffle('Hi') returns 'Hi'\n * anti_shuffle('hello') returns 'ehllo'\n * anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n * \n */\nconst anti_shuffle = function (s: string) : string  {\n  const splitedString = s.split(\" \");\n\n  for(let i=0;i<splitedString.length;i++){\n    //sort the characters in the word\n    splitedString[i] = splitedString[i].split('').sort().join('');\n  }\n\n  return splitedString.join(\" \")\n};"}
{"task_id": "HumanEval_typescript/87", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a 2 dimensional data, as a nested lists,\n * which is similar to matrix, however, unlike matrices,\n * each row may contain a different number of columns.\n * Given lst, and integer x, find integers x in the list,\n * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n * each tuple is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort coordinates of the row by columns in descending order.\n * \n * Examples:\n * get_row([\n * [1,2,3,4,5,6],\n * [1,2,3,4,1,6],\n * [1,2,3,4,5,1]\n * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n * get_row([], 1) == []\n * get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n * \n */\nconst get_row = function (lst: Array<Array<number>>, x: number) : Array<Array<number>>  {\n  return lst\n    .map((arr, index) => arr.map(item => item === x ? [index, arr.indexOf(item)] : null))\n    .filter(arr => arr !== null)\n    .sort((a, b) => a[0] - b[0])\n    .reduce((acc: Array<Array<number>>, curr) => {\n      acc.push(curr);\n\n      return acc;\n    }, []);\n};"}
{"task_id": "HumanEval_typescript/88", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given an array of non-negative integers, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n * or sort it in descending order if the sum( first index value, last index value) is even.\n * \n * Note:\n * * don't change the given array.\n * \n * Examples:\n * * sort_array([]) => []\n * * sort_array([5]) => [5]\n * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n * \n */\nconst sort_array = function (array: Array<number>) : Array<number>  {\n    let isEven = false;\n    for(let i = 0; i < array.length; i++){\n        if((array[0]+array[array.length-1]) % 2 === 0){\n            isEven = true;\n        }\n    }\n    if(isEven === false){\n        return array.sort();\n    }else{\n        return array.sort().reverse();\n    }\n}"}
{"task_id": "HumanEval_typescript/89", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Create a function encrypt that takes a string as an argument and\n * returns a string encrypted with the alphabet being rotated. \n * The alphabet should be rotated in a manner such that the letters \n * shift down by two multiplied to two places.\n * For example:\n * encrypt('hi') returns 'lm'\n * encrypt('asdfghjkl') returns 'ewhjklnop'\n * encrypt('gf') returns 'kj'\n * encrypt('et') returns 'ix'\n * \n */\nconst encrypt = function (s: string) : string  {\n    let arr: Array<string> = s.split('');\n    for(let i = 0; i <arr.length; i++){\n        let charCode: number = arr[i].charCodeAt();\n        let newCharCode:number = 96 + ((charCode - 97) * 2);\n        if(newCharCode > 122){\n            newCharCode -= 26;\n        }\n        arr[i] = String.fromCharCode(newCharCode);\n    }\n\n    return arr.join('');\n}"}
{"task_id": "HumanEval_typescript/90", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a list of integers.\n * Write a function next_smallest() that returns the 2nd smallest element of the list.\n * Return None if there is no such element.\n * \n * next_smallest([1, 2, 3, 4, 5]) == 2\n * next_smallest([5, 1, 4, 3, 2]) == 2\n * next_smallest([]) == None\n * next_smallest([1, 1]) == None\n * \n */\nconst next_smallest = function (lst: Array<number>) : any  {\n    if(lst.length < 2) return null;\n    \n    let sorted = lst.sort((a, b) => a - b);\n\n    for(let i = 0; i < sorted.length -1 ; i++)\n        if(sorted[i] != sorted[i+1])\n            return sorted[i+1];\n\n    return null;\n}"}
{"task_id": "HumanEval_typescript/91", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You'll be given a string of words, and your task is to count the number\n * of boredoms. A boredom is a sentence that starts with the word \"I\".\n * Sentences are delimited by '.', '?' or '!'.\n * \n * For example:\n * >>> is_bored(\"Hello world\")\n * 0\n * >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n * 1\n * \n */\nconst is_bored = function (S: string) : number  {\n  const boredoms = S.split(/[.?!]/g);\n\n  let boredCount = 0;\n\n  for (let b of boredoms) {\n    if (/^I/gi.test(b)) {\n      boredCount++;\n    }\n  }\n\n  return boredCount;\n}"}
{"task_id": "HumanEval_typescript/92", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Create a function that takes 3 numbers.\n * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n * Returns false in any other cases.\n * \n * Examples\n * any_int(5, 2, 7) \u279e True\n * \n * any_int(3, 2, 2) \u279e False\n * \n * any_int(3, -2, 1) \u279e True\n * \n * any_int(3.6, -2.2, 2) \u279e False\n * \n * \n */\nconst any_int = function (x: number, y: number, z: number) : boolean  {\n  let numbers = [x, y, z];\n  \n  return numbers.some((value, index, array) => {\n    return value === array[0] + array[1] && array.every(item => Number.isInteger(item));\n  })\n}"}
{"task_id": "HumanEval_typescript/93", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function that takes a message, and encodes in such a \n * way that it swaps case of all letters, replaces all vowels in \n * the message with the letter that appears 2 places ahead of that \n * vowel in the english alphabet. \n * Assume only letters. \n * \n * Examples:\n * >>> encode('test')\n * 'TGST'\n * >>> encode('This is a message')\n * 'tHKS KS C MGSSCGG'\n * \n */\nconst encode = function (message: string) : string  {\n  let encodedMessage: string[] = [];\n  for(let i = 0; i < message.length; i++) {\n    if(/[a-z]/i.test(message[i])) {\n      // uppercase or lowercase\n      if(/[A-Z]/.test(message[i])) {\n        let c = message[i].charCodeAt(0);\n        encodedMessage.push(String.fromCharCode(c+32));\n      } else {\n        let c = message[i].charCodeAt(0);\n        encodedMessage.push(String.fromCharCode(c-32));\n      }\n    } else if(/[a-e]/i.test(message[i])) {\n      // vowel\n      // code point + 2\n      let cp: number;\n      switch (message[i]) {\n        case 'a':\n          cp = message[i].charCodeAt(0) + 2;\n          break;\n        case 'e':\n          cp = message[i].charCodeAt(0) + 2;\n          break;\n        case 'i':\n          cp = message[i].charCodeAt(0) + 2;\n          break;\n        case 'o':\n          cp = message[i].charCodeAt(0) + 2;\n          break;\n        case 'u':\n          cp = message[i].charCodeAt(0) + 2;\n          break;\n      }\n      encodedMessage.push(String.fromCharCode(cp));\n    } else {\n      // not a letter\n      encodedMessage.push(message[i]);\n    }\n  }\n  return encodedMessage.join('');\n}"}
{"task_id": "HumanEval_typescript/94", "language": "typescript", "completion": "import getLargestPrime from './getLargestPrime';\n\n/**\n * You're an expert TypeScript programmer\n * You are given a list of integers.\n * You need to find the largest prime value and return the sum of its digits.\n * \n * Examples:\n * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n * For lst = [0,81,12,3,1,21] the output should be 3\n * For lst = [0,8,1,2,1,7] the output should be 7\n * \n */\nconst skjkasdkd = function (lst: Array<number>) : number  {\n    let largestPrime = getLargestPrime(lst);\n    let result = 0;\n\n    while (largestPrime > 0) {\n        result += largestPrime % 10;\n\n        largestPrime = Math.floor(largestPrime / 10);\n    }\n\n    return result;\n}\n\n\nexport default skjkasdkd"}
{"task_id": "HumanEval_typescript/95", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a dictionary, return True if all keys are strings in lower \n * case or all keys are strings in upper case, else return False.\n * The function should return False is the given dictionary is empty.\n * Examples:\n * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n * \n */\nconst check_dict_case = function (dict: Map<any, string>) : boolean  {\n  if(dict == null || dict.size==0){\n    return false;\n  }\n\n  let lowerCase = true;\n  let upperCase = true;\n\n  for (var [key] of dict) {\n     console.log(`key = ${key}`);\n\n    if(!/^[a-z]+$/.test(String(key))){\n      lowerCase = false;\n    }\n    \n    if(!/^[A-Z]+$/.test(String(key))){\n      upperCase = false;\n    }\n  }\n  \n  return lowerCase || upperCase;\n}"}
{"task_id": "HumanEval_typescript/96", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Implement a function that takes an non-negative integer and returns an array of the first n\n * integers that are prime numbers and less than n.\n * for example:\n * count_up_to(5) => [2,3]\n * count_up_to(11) => [2,3,5,7]\n * count_up_to(0) => []\n * count_up_to(20) => [2,3,5,7,11,13,17,19]\n * count_up_to(1) => []\n * count_up_to(18) => [2,3,5,7,11,13,17]\n * \n */\nconst is_prime = (n: number): boolean => {\n    if(n <= 1)\n        return false;\n\n    for(let i = 2; i < n; i++) {\n        if(n % i === 0)\n            return false;\n    }\n    return true;\n}\n\nconst count_up_to = function (n: number): Array<number> {\n    \n    const primes = [];\n    let current = 2;\n    \n    while(primes.length < n && current < n) {\n        if(is_prime(current))\n            primes.push(current);\n        current++;\n    }\n    return primes;\n}"}
{"task_id": "HumanEval_typescript/97", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Complete the function that takes two integers and returns \n * the product of their unit digits.\n * Assume the input is always valid.\n * Examples:\n * multiply(148, 412) should return 16.\n * multiply(19, 28) should return 72.\n * multiply(2020, 1851) should return 0.\n * multiply(14,-15) should return 20.\n * \n */\nconst multiply = function (a: number, b: number) : number  {\n  let aString = a.toString();\n  let bString = b.toString();\n  let product = '';\n\n  // handle negative numbers and convert to positive\n  if (a < 0 && b > 0) {\n    product += '-';\n    a *= -1;\n  } else if (b < 0 && a > 0) {\n    product += '-';\n    b *= -1;\n  }\n  \n  let productArray = [];\n\n  for (let i = 0; i < aString.length; i++) {\n    let currentNum = parseInt(aString[i]);\n    let newProduct = multiplyHelper(currentNum, b);\n\n    if (newProduct[0] === '0') {\n      continue;\n    } else {\n      productArray.push(newProduct[0]);\n\n      // check if we need to carry over\n      if (newProduct[1] > 0) {\n        let nextNum = parseInt(productArray[i + 1]) || 0;\n        nextNum += newProduct[1];\n\n        productArray[i + 1] = nextNum.toString();\n      }\n    }\n  }\n\n  return parseInt(productArray.join(''));\n};\n\nfunction multiplyHelper (num: number, multi: number): [string, number] {\n  \n  let product = num * multi;\n  let remainder = product % 10;\n  let carryOver = Math.floor(product / 10);\n\n  return [remainder.toString(), carryOver];\n}"}
{"task_id": "HumanEval_typescript/98", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a string s, count the number of uppercase vowels in even indices.\n * \n * For example:\n * count_upper('aBCdEf') returns 1\n * count_upper('abcdefg') returns 0\n * count_upper('dBBE') returns 0\n * \n */\nconst count_upper = function (s: string) : number  {\n  let count: number = 0;\n\n  for(let i=0;i<s.length;i+=2) {\n    if ([\"A\",\"E\",\"I\",\"O\",\"U\"].includes(s[i])) {\n      console.log(`found a vowel at index ${i}`);\n      count++;\n    }\n  }\n\n  return count;\n}"}
{"task_id": "HumanEval_typescript/99", "language": "typescript", "completion": "import * as math from 'mathjs'\n\n/**\n * You're an expert TypeScript programmer\n * \n * Create a function that takes a value (string) representing a number\n * and returns the closest integer to it. If the number is equidistant\n * from two integers, round it away from zero.\n * \n * Examples\n * >>> closest_integer(\"10\")\n * 10\n * >>> closest_integer(\"15.3\")\n * 15\n * \n * Note:\n * Rounding away from zero means that if the given number is equidistant\n * from two integers, the one you should return is the one that is the\n * farthest from zero. For example closest_integer(\"14.5\") should\n * return 15 and closest_integer(\"-14.5\") should return -15.\n * \n */\nconst closest_integer = function (value: string) : number  {\n    let n = math.round(math.parse(value)) // Parse the string as a mathematical expression and evaluate it.\n    console.log(`Math value is ${n}`)\n\n    if (Math.abs(n - math.floor(n)) === Math.abs(n - math.ceil(n))) {\n        return n > 0 ? Math.ceil(n) : Math.floor(n);\n    }\n    \n    return n\n}"}
{"task_id": "HumanEval_typescript/100", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a positive integer n, you have to make a pile of n levels of stones.\n * The first level has n stones.\n * The number of stones in the next level is:\n * - the next odd number if n is odd.\n * - the next even number if n is even.\n * Return the number of stones in each level in a list, where element at index\n * i represents the number of stones in the level (i+1).\n * \n * Examples:\n * >>> make_a_pile(3)\n * [3, 5, 7]\n */\nconst make_a_pile = function (n: number): Array<number> {\n  const piles: Array<number> = [];\n\n  for (let i = n; i > 0; i -= 2) {\n    piles.push(i);\n  }\n\n  return piles;\n};"}
{"task_id": "HumanEval_typescript/101", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You will be given a string of words separated by commas or spaces. Your task is\n * to split the string into words and return an array of the words.\n * \n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n * \n */\nconst words_string = function (s: string) : Array<string>  {\n    return s.replace(/[,\\s]+/g, ' ').split(' ');\n};"}
{"task_id": "HumanEval_typescript/102", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * This function takes two positive numbers x and y and returns the\n * biggest even integer number that is in the range [x, y] inclusive. If \n * there's no such number, then the function should return -1.\n * \n * For example:\n * choose_num(12, 15) = 14\n * choose_num(13, 12) = -1\n * \n */\nconst choose_num = function (x: number, y: number) : number  {\n  let min = Math.min(x, y);\n  let max = Math.max(x, y);\n\n  for (let i = max; i >= min; i--) {\n    if (i % 2 === 0)\n      return i;\n  }\n\n  return -1;\n}"}
{"task_id": "HumanEval_typescript/103", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You are given two positive integers n and m, and your task is to compute the\n * average of the integers from n through m (including n and m). \n * Round the answer to the nearest integer and convert that to binary.\n * If n is greater than m, return -1.\n * Example:\n * rounded_avg(1, 5) => \"0b11\"\n * rounded_avg(7, 5) => -1\n * rounded_avg(10, 20) => \"0b1111\"\n * rounded_avg(20, 33) => \"0b11010\"\n * \n */\nconst rounded_avg = function (n: number, m: number): any {\n  if (m < n) return -1;\n\n  let sum = (n + m) / 2;\n  // round to the nearest int, then convert it to binary\n  return `0b${Math.round(sum).toString(2)}`;\n}"}
{"task_id": "HumanEval_typescript/104", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a list of positive integers x. return a sorted list of all \n * elements that hasn't any even digit.\n * \n * Note: Returned list should be sorted in increasing order.\n * \n * For example:\n * >>> unique_digits([15, 33, 1422, 1])\n * [1, 15, 33]\n * >>> unique_digits([152, 323, 1422, 10])\n * []\n * \n */\nconst unique_digits = function (x: Array<number>) : Array<number>  {\n  let output :Array<number>= [];\n\n  for(let i=0;i< x.length;i++) {\n    if(!hasEvenDigit(x[i])) {\n      output.push(x[i]); \n    }\n  }\n  return output\n};\n\nfunction hasEvenDigit(num: number) : boolean{\n  let numStr = num.toString();\n  for(let i=0; i < numStr.length; i++) {\n    if(numStr[i] === \"2\" || numStr[i] === \"4\" || numStr[i] === \"6\" || numStr[i] === \"8\") return true; \n  }\n  return false\n}"}
{"task_id": "HumanEval_typescript/105", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n * \n * For example:\n * arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n * -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n * -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n * return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n * \n * If the array is empty, return an empty array:\n * arr = []\n * return []\n * \n * If the array has any strange number ignore it:\n * arr = [1, -1 , 55] \n * -> sort arr -> [-1, 1, 55]\n * -> reverse arr -> [55, 1, -1]\n * return = ['One']\n * \n */\nconst by_length = function (arr: Array<number>) : Array<string>  {\n  const name_map : { [key: number]: string } = {\n      1: \"One\",\n      2: \"Two\",\n      3: \"Three\",\n      4: \"Four\",\n      5: \"Five\",\n      6: \"Six\",\n      7: \"Seven\",\n      8: \"Eight\",\n      9: \"Nine\"\n  };\n  let str_arr : Array<string> = arr.filter((value) => {\n    return 0 < value && value <= 9;\n  }).sort().reverse();\n  let result : Array<string> = [];\n\n  for (let i = 0; i < str_arr.length; ++i) {\n      if (name_map[str_arr[i]]) {\n          result.push(name_map[str_arr[i]]);\n      }\n  }\n  return result;\n};"}
{"task_id": "HumanEval_typescript/106", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Implement the function f that takes n as a parameter,\n * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n * or the sum of numbers from 1 to i otherwise.\n * i starts from 1.\n * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n * Example:\n * f(5) == [1, 2, 6, 24, 15]\n * \n */\nconst f = function (n: number): Array<number> {\n  let result = []\n\n  for(let i=0;i<n;i++)\n  {\n    if(i%2 === 0)\n      result.push(factorial(i))\n    else\n      result.push(sumOfNumbers(i+1))\n  }\n  return result\n}\nconst factorial = function (num:number): number\n{\n  let result=1;\n  for(let i=num;i>0;i--)\n  {\n    result *= i;\n  }\n  return result\n}\nconst sumOfNumbers = function (num: number): number {\n  let result = 0;\n\n  for(let i=num;i>0;i--)\n  {\n    result += i;\n  }\n  return result\n}"}
{"task_id": "HumanEval_typescript/107", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a positive integer n, return a tuple that has the number of even and odd\n * integer palindromes that fall within the range(1, n), inclusive.\n * \n * Example 1:\n * \n * Input: 3\n * Output: (1, 2)\n * Explanation:\n * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n * \n * Example 2:\n * \n * Input: 12\n * Output: (4, 6)\n * Explanation:\n * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n * \n * Note:\n * 1. 1 <= n <= 10^3\n * 2. returned tuple has the number of even and odd integer palindromes respectively.\n * \n */\nconst even_odd_palindrome = function (n: number) : Array<number>  {\n  let count: [number, number] = [0, 0];\n\n  // Check for single digits\n  if (n < 10) {\n    const start = n % 2 === 0 ? 0 : 1;\n\n    for (let i = start; i < 10; i += 2) {\n      count[i % 2] += 1;\n    }\n\n    return [count[0], count[1]];\n  }\n\n  const first: number = Math.floor(n / 10);\n  const last: number = n % 10;\n\n  for (let i = 1; i <= 9; i++) {\n    if (i === last) {\n      count[i % 2] += first + 1;\n    } else if (i < last) {\n      count[i % 2] += first * 2;\n    }\n  }\n\n  return [count[0], count[1]];\n};"}
{"task_id": "HumanEval_typescript/108", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function count_nums which takes an array of integers and returns\n * the number of elements which has a sum of digits > 0.\n * If a number is negative, then its first signed digit will be negative:\n * e.g. -123 has signed digits -1, 2, and 3.\n * >>> count_nums([]) == 0\n * >>> count_nums([-1, 11, -11]) == 1\n * >>> count_nums([1, 1, 2]) == 3\n * \n */\nconst count_nums = function (arr: Array<number>) : number  {\n    let sum: number;\n\n    arr.forEach(function (element) {\n        if(element > 0){\n            return element;\n        }\n\n        const str_num: string = element.toString();\n\n        for(let i: number = 0; i < str_num.length; i++){\n            if(str_num[i] !== '-'){\n                sum += parseInt(str_num[i]);\n            } else {\n                return;\n            }\n        }\n    });\n\n    return count;\n};"}
{"task_id": "HumanEval_typescript/109", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n * numbers in the array will be randomly ordered. Your task is to determine if\n * it is possible to get an array sorted in non-decreasing order by performing \n * the following operation on the given array:\n * You are allowed to perform right shift operation any number of times.\n * \n * One right shift operation means shifting all elements of the array by one\n * position in the right direction. The last element of the array will be moved to\n * the starting position in the array i.e. 0th index. \n * \n * If it is possible to obtain the sorted array by performing the above operation\n * then return True else return False.\n * If the given array is empty then return True.\n * \n * Note: The given list is guaranteed to have unique elements.\n * \n * For Example:\n * \n * move_one_ball([3, 4, 5, 1, 2])==>True\n * Explanation: By performin 2 right shift operations, non-decreasing order can\n * be achieved for the given array.\n * move_one_ball([3, 5, 4, 1, 2])==>False\n * Explanation:It is not possible to get non-decreasing order for the given\n * array by performing any number of right shift operations.\n * \n * \n */\nconst move_one_ball = function (arr: Array<number>) : boolean  {\n    let firstElement : number;\n    const len : number = arr.length;\n\n    if(len < 2)\n        return true;\n    \n    //First element is the smallest then we need to find all other elements are in non-decreasing order\n    firstElement = Math.min(...arr);\n    for(let i=0;i<len-1;i++)\n    {\n        if(arr[i+1]<firstElement)\n            return false;\n    }\n    return true;\n};"}
{"task_id": "HumanEval_typescript/110", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * In this problem, you will implement a function that takes two lists of numbers,\n * and determines whether it is possible to perform an exchange of elements\n * between them to make lst1 a list of only even numbers.\n * There is no limit on the number of exchanged elements between lst1 and lst2.\n * If it is possible to exchange elements between the lst1 and lst2 to make\n * all the elements of lst1 to be even, return \"YES\".\n * Otherwise, return \"NO\".\n * For example:\n * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n * It is assumed that the input lists will be non-empty.\n * \n */\nconst exchange = function (lst1: Array<number>, lst2: Array<number>) : string {\n    const sum1 = lst1.reduce((sum, num) => sum + num, 0);\n    const sum2 = lst2.reduce((sum, num) => sum + num, 0);\n    if(sum1 % 2 === 0 || sum2 % 2 === 0){\n        return \"YES\";\n    }else{\n        let sum3 = 0;\n        for(let i = 0; i < lst1.length; i++){\n            sum3 += lst1[i];\n            if(sum3 % 2 === 0){\n                return \"YES\";\n            }\n        }\n        for(let i = 0; i < lst2.length; i++){\n            sum3 += lst2[i];\n            if(sum3 % 2 === 0){\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n};"}
{"task_id": "HumanEval_typescript/111", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a string representing a space separated lowercase letters, return a dictionary\n * of the letter with the most repetition and containing the corresponding count.\n * If several letters have the same occurrence, return all of them.\n * \n * Example:\n * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n * histogram('a b b a') == {'a': 2, 'b': 2}\n * histogram('a b c a b') == {'a': 2, 'b': 2}\n * histogram('b b b b a') == {'b': 4}\n * histogram('') == {}\n * \n */\nconst histogram = function (test: string) : Map<string, number>  {\n    let result : Map<string, number> = new Map();\n    if (!test || test.length === 0) return result;\n\n    const words : Array<string> = test.split(\" \");\n    for(let word of words){\n        let count = result.get(word);\n\n        if(!count){\n            result.set(word,1);\n        }else{\n            result.set(word, ++count);\n        }\n\n    }\n\n    return result;\n}"}
{"task_id": "HumanEval_typescript/112", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Task\n * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n * then check if the result string is palindrome.\n * A string is called palindrome if it reads the same backward as forward.\n * You should return a tuple containing the result string and True/False for the check.\n * Example\n * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n * \n */\nconst reverse_delete = function (s: string, c: string) : Array<any>  {\n    // Write your code here\n  let resultString:string;\n  let resultBoolean:boolean;\n  \n  return [resultString,resultBoolean];  \n}"}
{"task_id": "HumanEval_typescript/113", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a list of strings, where each string consists of only digits, return a list.\n * Each element i of the output should be \"the number of odd elements in the\n * string i of the input.\" where all the i's should be replaced by the number\n * of odd digits in the i'th string of the input.\n * \n * >>> odd_count(['1234567'])\n * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n * >>> odd_count(['3',\"11111111\"])\n * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n * \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n * \n */\nconst odd_count = function (lst: Array<string>) : Array<string>  {\n    let output = [];\n\n    for(let i = 0; i < lst.length; i++) {\n        var count = 0;\n        \n        for(let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] % 2 === 1) {\n                count++;\n            }\n        }\n\n        output.push(\"the number of odd elements in the string \" + i + \" of the input.\");\n    }\n\n    return output;\n}"}
{"task_id": "HumanEval_typescript/114", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n * of nums.\n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n * minSubArraySum([-1, -2, -3]) == -6\n * \n */\nconst minSubArraySum = function (nums: Array<number>) : number {\n    let result = nums[0]\n    for (let i = 1; i < nums.length; ++i) {\n        nums[i] = Math.min(nums[i-1] + nums[i], nums[i])\n    }\n\n    return nums.reduce((sum, n) => sum+n, result)\n}"}
{"task_id": "HumanEval_typescript/115", "language": "typescript", "completion": "import * as math from 'mathjs'\n\n/**\n * You're an expert TypeScript programmer\n * \n * You are given a rectangular grid of wells. Each row represents a single well,\n * and each 1 in a row represents a single unit of water.\n * Each well has a corresponding bucket that can be used to extract water from it, \n * and all buckets have the same capacity.\n * Your task is to use the buckets to empty the wells.\n * Output the number of times you need to lower the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * Output: 0\n * \n * Constraints:\n * * all wells have the same length\n * * 1 <= grid.length <= 10^2\n * * 1 <= grid[:,1].length <= 10^2\n * * grid[i][j] -> 0 | 1\n * * 1 <= capacity <= 10\n */\n\n const max_fill = function (grid: Array<Array<number>>, capacity: number) : number  {\n    let fill = 0;\n    for(let row of grid){\n        //find max empty column in row\n        let empty_cols = new Set();\n        let idx= -1;\n        let max_empty = 0;\n        for (let i = 0; i < row.length; i++) {\n            if (!row[i]) {\n                empty_cols.add(i);\n            } else {\n                //update count of empty cols\n                empty_cols.delete(i);\n            }\n            //update max empty cols\n            if (empty_cols.size > max_empty) {\n                max_empty = empty_cols.size;\n                idx= i;\n            }\n        }\n\n        //fill all empty spaces in row w/ bucket\n        let can_fill = Math.min(capacity, max_empty);\n        fill += can_fill;\n    }\n    return fill;\n};"}
{"task_id": "HumanEval_typescript/116", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * In this Kata, you have to sort an array of non-negative integers according to\n * number of ones in their binary representation in ascending order.\n * For similar number of ones, sort based on decimal value.\n * \n * It must be implemented like this:\n * >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n * >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n * >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n * \n */\nconst countBits = (num: number): number => {\n  let count = 0;\n  for(let i=0;i<32;i++){\n    if((num & (1<<i)) !== 0){\n      count++;\n    }\n  }\n\n  return count;\n}\n\n const sort_array = function (arr: Array<number>) : Array<number>  {\n  arr.sort(function(a, b) {\n      let onesA = countBits(a);\n      let onesB = countBits(b);\n\n      if(onesA == onesB){\n        return a - b;\n      }else{\n        return onesA - onesB;\n      }\n    });\n\n  return arr;\n}"}
{"task_id": "HumanEval_typescript/117", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a string s and a natural number n, you have been tasked to implement \n * a function that returns a list of all words from string s that contain exactly \n * n consonants, in order these words appear in the string s.\n * If the string s is empty then the function should return an empty list.\n * Note: you may assume the input string contains only letters and spaces.\n * Examples:\n * select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n * select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n * select_words(\"simple white space\", 2) ==> []\n * select_words(\"Hello world\", 4) ==> [\"world\"]\n * select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n * \n */\nconst select_words = function (s: string, n: number) : Array<string>  {\n    let words = s.split(/\\W+/);\n    return words.filter((word) => \n        word.length === n &&\n        !/^[aeiouyAEIOUY]+$/.test(word));\n};"}
{"task_id": "HumanEval_typescript/118", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You are given a word. Your task is to find the closest vowel that stands between \n * two consonants from the right side of the word (case sensitive).\n * \n * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n * find any vowel met the above condition. \n * \n * You may assume that the given string contains English letter only.\n * \n * Example:\n * get_closest_vowel(\"yogurt\") ==> \"u\"\n * get_closest_vowel(\"FULL\") ==> \"U\"\n * get_closest_vowel(\"quick\") ==> \"\"\n * get_closest_vowel(\"ab\") ==> \"\"\n * \n */\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\nconst get_closest_vowel = function (word: string) : string  {\n  const chararr = word.split('');\n  if(chararr.length <= 2){\n    return \"\";\n  }\n\n  for(let i = chararr.length -1; i >0 ;i--){\n    const current_char = chararr[i];\n\n    if(vowels.includes(current_char)){\n      const second_to_last_char = chararr[i-1];\n\n      // Check if it's a consonant\n      if(!vowels.includes(second_to_last_char)){\n        return current_char; \n      }\n    }\n  }\n\n  return \"\";\n};"}
{"task_id": "HumanEval_typescript/119", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a list of two strings, both strings consist of open\n * parentheses '(' or close parentheses ')' only.\n * Your job is to check if it is possible to concatenate the two strings in\n * some order, that the resulting string will be good.\n * A string S is considered to be good if and only if all parentheses in S\n * are balanced. For example: the string '(())()' is good, while the string\n * '())' is not.\n * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n * \n * Examples:\n * match_parens(['()(', ')']) == 'Yes'\n * match_parens([')', ')']) == 'No'\n * \n */\nconst match_parens = function (lst: Array<string>) : string  {\n    let parens: number = lst.join().split('(').length -1;\n    console.log(lst);\n\n    for(let i=0; i<lst.length; i++){\n        if(!validate_parens(lst[i])){\n            return 'No';\n        }\n    }\n    \n    if (parens === 0){\n        return 'Yes'\n    } else if (parens % 2 === 0) {\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\nconst validate_parens = function(str: string): boolean{\n    let stack: Array<number> = [];\n    for(let i=0; i<str.length; i++){\n        if(str[i] === '('){\n            stack.push(i);\n        } else if (str[i] === ')'){\n            if(stack.length < 1) return false;\n            let index: number = stack.pop();\n            str = str.substring(0, index)+str.substring(index+1);\n            i--;\n        }\n    }\n    if(stack.length > 0){\n        return false;\n    } else {\n        console.log('yes');\n    }\n}"}
{"task_id": "HumanEval_typescript/120", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given an array arr of integers and a positive integer k, return a sorted list \n * of length k with the maximum k numbers in arr.\n * \n * Example 1:\n * \n * Input: arr = [-3, -4, 5], k = 3\n * Output: [-4, -3, 5]\n * \n * Example 2:\n * \n * Input: arr = [4, -4, 4], k = 2\n * Output: [4, 4]\n * \n * Example 3:\n * \n * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n * Output: [2]\n * \n * Note:\n * 1. The length of the array will be in the range of [1, 1000].\n * 2. The elements in the array will be in the range of [-1000, 1000].\n * 3. 0 <= k <= len(arr)\n * \n */\nconst maximum = function (arr: Array<number>, k: number) : Array<number>  {\n  if (k == 0 || arr == null) return [];\n\n  const maxHeap = new MaxHeap<number>();\n  for (let i=0; i < Math.min(k, arr.length); i++) {\n    maxHeap.insert(arr[i]);\n  }\n\n  let i = k;\n  while (i < arr.length && maxHeap.peek() < arr[i]) {\n    maxHeap.poll();\n    maxHeap.insert(arr[i]);\n    i++;\n  }\n  const result: Array<number> = [];\n  while (!maxHeap.isEmpty()) {\n    result.push(maxHeap.poll());\n  }\n\n  return result;\n}\n\nclass MaxHeap<T extends number>  {\n  private heap: T[];\n  constructor() {\n    this.heap = new Array();\n  }\n  public poll(): T | null  {\n    if (this.heap.length == 0) return null;\n    let max = this.heap[0];\n\n    let last = this.heap.pop()!;\n    if (this.heap.length > 0) {\n      let root = this.heap[0];\n      if (last < root) {\n        this.swap(0, this.heap.length-1);\n        this.siftDown(0);\n      } \n    }\n    \n    return max;\n  }\n\n  private swap(i: number, j: number) : void  {\n    let temp = this.heap[i];\n    this.heap[i] = this.heap[j];\n    this.heap[j] = temp;\n  }\n\n  public isEmpty(): boolean {\n    return this.heap.length == 0;\n  }\n\n  public insert(value: T) : void  {\n    this.heap.push(value);\n    this.siftUp(this.heap.length-1);\n  }\n\n  private siftDown(i: number) : void  {\n    let left = i * 2 + 1;\n    let right = i * 2 + 2;\n    let largest: number = i;\n\n    if (left < this.heap.length && this.heap[left] > this.heap[largest]) {\n      largest = left;\n    }\n    \n    if (right < this.heap.length && this.heap[right] > this.heap[largest]) {\n      largest = right;\n    }\n    if (largest != i) {\n      this.swap(i, largest);\n      this.siftDown(largest);\n    }\n  }\n\n  private siftUp(i: number) : void  {\n    let parent = Math.floor((i-1)/2);\n\n    while (i > 0 && this.heap[parent] < this.heap[i]) {\n      this.swap(i, parent);\n      i = parent;\n      parent = Math.floor((i-1)/2);\n    }\n  }\n\n  public peek(): T | null {\n    if (this.heap.length == 0) return null;\n    else return this.heap[0];\n  }\n}"}
{"task_id": "HumanEval_typescript/121", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n * \n * \n * Examples\n * solution([5, 8, 7, 1]) ==> 12\n * solution([3, 3, 3, 3, 3]) ==> 9\n * solution([30, 13, 24, 321]) ==>0\n * \n */\nconst solution = function (lst: Array<number>) : number  {\n  let sum = 0;\n\n  for (let index = 0; index < lst.length; index++) {\n    if ((index % 2 === 0) && (lst[index] % 2 !== 0)) {\n      sum += lst[index];\n    } \n  }\n  \n  return sum;\n}"}
{"task_id": "HumanEval_typescript/122", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a non-empty array of integers arr and an integer k, return\n * the sum of the elements with at most two digits from the first k elements of arr.\n * \n * Example:\n * \n * Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n * Output: 24 # sum of 21 + 3\n * \n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n * \n */\nconst add_elements = function (arr: Array<number>, k: number) : number  {\n  let sum = 0;\n  for(let i=0;i<k;i++){\n    if('' + arr[i] <= '99'){\n      sum+=arr[i];\n    }\n  }\n\n  return sum;\n};"}
{"task_id": "HumanEval_typescript/123", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n * \n * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n * as follows: start with any positive integer n. Then each term is obtained from the \n * previous term as follows: if the previous term is even, the next term is one half of \n * the previous term. If the previous term is odd, the next term is 3 times the previous\n * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n * \n * Note: \n * 1. Collatz(1) is [1].\n * 2. returned list sorted in increasing order.\n * \n * For example:\n * get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n * \n */\nconst get_odd_collatz = function (n: number) : Array<number>  {\n  const collatz: Map<number, number[]> = new Map([[1,[1]]]])\n\n  return findOdd(n);\n\n\n  //helper functions \n  /**\n   * Recursively generates the Collatz sequence for the given integer.\n   */\n  function generateCollatzSequence(num: number): number[] {\n    if (collatz.has(num)) return collatz.get(num)\n\n    let result = []\n    let currentNum = num\n    while (currentNum != 1) {\n      if (currentNum % 2 === 0) {\n        currentNum = currentNum / 2\n      } else {\n        currentNum = 3 * currentNum + 1\n      }\n      result.push(currentNum)\n    }\n\n    collatz.set(num, result)\n    return result\n  }\n\n  /**\n   * Iterates through the Collatz sequence for n and returns all odd numbers that occur in the sequence.\n   */\n  function findOdd(n: number): number[] {\n    let result = []\n    let sequence = generateCollatzSequence(n)\n\n    sequence.forEach((num) => {\n      if (num % 2 === 1) {\n        result.push(num)\n      }\n    })\n    return result\n  }\n}"}
{"task_id": "HumanEval_typescript/124", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You have to write a function which validates a given date string and\n * returns True if the date is valid otherwise False.\n * The date is valid if all of the following rules are satisfied:\n * 1. The date string is not empty.\n * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n * 3. The months should not be less than 1 or higher than 12.\n * 4. The date should be in the format: mm-dd-yyyy\n * \n * for example: \n * valid_date('03-11-2000') => True\n * \n * valid_date('15-01-2012') => False\n * \n * valid_date('04-0-2040') => False\n * \n * valid_date('06-04-2020') => True\n * \n * valid_date('06/04/2020') => False\n * \n */\nconst valid_date = function (date: string) : boolean  {\n  const date_parts = date.split('-');\n\n  if(date === '' || date.length !== 10 || date[2] !== '-' || date[5] !== '-'){\n    return false;\n  }\n  // validation for day\n  let days_in_month: number;\n  switch (parseInt(date_parts[0])) {\n    case 2:\n      if(parseInt(date_parts[1]) % 4 === 0){\n        days_in_month = 29;\n      } else {\n        days_in_month = 28;\n      }\n      break;\n    case 4: \n    case 6: \n    case 9: \n    case 11: \n      days_in_month = 30;\n      break;\n    default:\n      days_in_month = 31;\n  }\n\n  if(parseInt(date_parts[1]) > 12 || parseInt(date_parts[1]) < 1){\n    return false;\n  } else if( parseInt(date_parts[2]) > days_in_month || parseInt(date_parts[2]) < 1) {\n    return false; \n  }\n\n  return true;\n}"}
{"task_id": "HumanEval_typescript/125", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n * Examples\n * split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n * split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n * split_words(\"abcdef\") == 3 \n */\nconst split_words = function (txt: string) : any  {\n    \n    if( txt.includes(' ') ) return txt.split(/\\s+/);\n    else if( txt.includes(',') ) return txt.split(',');\n    const oddCount = (txt) => txt\n        .split('')\n        .filter((el, idx)=> el === String.fromCharCode(97 + ((idx%2 !== 0)?1:0)))\n        .length;\n        return oddCount(txt);\n};"}
{"task_id": "HumanEval_typescript/126", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a list of numbers, return whether or not they are sorted\n * in ascending order. If list has more than 1 duplicate of the same\n * number, return False. Assume no negative numbers and only integers.\n * \n * Examples\n * is_sorted([5])\ufffd\ufffd True\n * is_sorted([1, 2, 3, 4, 5])\ufffd\ufffd True\n * is_sorted([1, 3, 2, 4, 5])\ufffd\ufffd False\n * is_sorted([1, 2, 3, 4, 5, 6])\ufffd\ufffd True\n * is_sorted([1, 2, 3, 4, 5, 6, 7])\ufffd\ufffd True\n * is_sorted([1, 3, 2, 4, 5, 6, 7])\ufffd\ufffd False\n * is_sorted([1, 2, 2, 3, 3, 4])\ufffd\ufffd True\n * is_sorted([1, 2, 2, 2, 3, 4])\ufffd\ufffd False\n * \n */\nconst is_sorted = function (lst: Array<number>) : boolean {\n    for(let i=0;i<lst.length-1;i++){\n        if(lst[i]>lst[i+1]){\n            return false;\n        }\n        if(lst[i]===lst[i+1]) continue;\n\n        let duplicates=1;\n        while(lst[i]===lst[i+1] && i<lst.length-1){\n            duplicates++;\n            i++\n        }\n        if(duplicates>1) return false;\n\n    }\n    return true;\n}"}
{"task_id": "HumanEval_typescript/127", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You are given two intervals,\n * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n * The given intervals are closed which means that the interval (start, end)\n * includes both start and end.\n * For each given interval, it is assumed that its start is less or equal its end.\n * Your task is to determine whether the length of intersection of these two \n * intervals is a prime number.\n * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n * which its length is 1, which not a prime number.\n * If the length of the intersection is a prime number, return \"YES\",\n * otherwise, return \"NO\".\n * If the two intervals don't intersect, return \"NO\".\n * \n * \n * [input/output] samples:\n * intersection((1, 2), (2, 3)) ==> \"NO\"\n * intersection((-1, 1), (0, 4)) ==> \"NO\"\n * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n * \n */\nconst isPrime = (n: number) => {\n    if (n <= 1) return false;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconst intersection = function (interval1: Array<number>, interval2: Array<number>) : string  {\n    const [start1, end1] = interval1.sort();\n    const [start2, end2] = interval2.sort();\n    if (end1 < start2 || end2 < start1) {\n        return \"NO\";\n    }\n    const length = Math.abs(start2 - end1);\n\n    return isPrime(length) ? \"YES\" : \"NO\";\n}"}
{"task_id": "HumanEval_typescript/128", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given an array arr of integers and you need to return\n * sum of magnitudes of integers multiplied by product of all signs\n * of each number in the array, represented by 1, -1 or 0.\n * Note: return None for empty arr.\n * \n * Example:\n * >>> prod_signs([1, 2, 2, -4]) == -9\n * >>> prod_signs([0, 1]) == 0\n * >>> prod_signs([]) == None\n * \n */\nconst prod_signs = function (arr: Array<number>) : any {\n  if (!arr || arr.length === 0) return null;\n  \n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n\n    if (num > 0) {\n      sum += num;\n      product *= 1;\n    } else if (num < 0) {\n      sum += num * -1;\n      product *= -1;\n    }\n  }\n\n  return product === 1 ? sum : -sum;\n}"}
{"task_id": "HumanEval_typescript/129", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n * \n * You have to find the minimum path of length k in the grid. You can start\n * from any cell, and in each step you can move to any of the neighbor cells,\n * in other words, you can go to cells which share an edge with you current\n * cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n * \n * Examples:\n * \n * Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n * Output: [1, 2, 1]\n * \n * Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n * Output: [1]\n * \n */\nconst minPath = function (grid: Array<Array<number>>, k: number) : Array<number>  {\n    \n    let ans:Array<number> = []\n\n    return ans;\n};"}
{"task_id": "HumanEval_typescript/130", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n * the last couple centuries. However, what people don't know is Tribonacci sequence.\n * Tribonacci sequence is defined by the recurrence:\n * tri(1) = 3\n * tri(n) = 1 + n / 2, if n is even.\n * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n * For example:\n * tri(2) = 1 + (2 / 2) = 2\n * tri(4) = 3\n * tri(3) = tri(2) + tri(1) + tri(4)\n * = 2 + 3 + 3 = 8 \n * You are given a non-negative integer number n, you have to a return a list of the \n * first n + 1 numbers of the Tribonacci sequence.\n * Examples:\n * tri(3) = [1, 3, 2, 8]\n * \n */\nconst tri = function (n: number) : Array<number> {\n  const result = [1, 3];\n\n  if (result.length > n) return result.slice(0, n + 1);\n\n  for (let i = 2; i <= n; i++) {\n    let index = 0;\n\n    if (i % 2 === 0)\n      result[index] = 1 + i / 2;\n    else {\n      const triNminusOne = result[index - 1];\n      const triNminusTwo = result[index - 2];\n      const triNplusOne   = result[index + 1];\n\n      index = 0;\n      while (result.length <= n) result.push(triNminusOne + triNminusTwo + triNplusOne);\n    }\n  }\n\n  return result.slice(0, n + 1);\n};"}
{"task_id": "HumanEval_typescript/131", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given a positive integer n, return the product of the odd digits.\n * Return 0 if all digits are even.\n * For example:\n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n */\nconst digits = function (n: number) : number {\n    let result = 1;\n    while (n > 0){\n        const remainder = n % 10;\n        if (remainder % 2 !== 0)\n            result *= remainder;\n\n        n = Math.floor(n/10);\n    }\n\n    return result === 1 ? 0 : result;\n}"}
{"task_id": "HumanEval_typescript/132", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Create a function that takes a string as input which contains only square brackets.\n * The function should return True if and only if there is a valid subsequence of brackets \n * where at least one bracket in the subsequence is nested.\n * \n * is_nested('[[]]')\ufffd\ufffd True\n * is_nested('[]]]]]]][[[[[]')\ufffd\ufffd False\n * is_nested('[][]')\ufffd\ufffd False\n * is_nested('[]')\ufffd\ufffd False\n * is_nested('[[][]]')\ufffd\ufffd True\n * is_nested('[[]][[')\ufffd\ufffd True\n * \n */\nconst is_nested = function (string0: string) : boolean  {\n\n  let stack = [];\n  for(let i = 0; i < string0.length; i++)\n  {\n    if(string0[i] === \"[\")\n      stack.push(\"[\");\n\n    else if(stack.length && string0[i] === \"]\") {\n      stack.pop();\n    } \n  }\n\n  return stack.length > 0 ? true: false;\n}"}
{"task_id": "HumanEval_typescript/133", "language": "typescript", "completion": "import * as math from 'mathjs'\n\n/**\n * You're an expert TypeScript programmer\n * You are given a list of numbers.\n * You need to return the sum of squared numbers in the given list,\n * round each element in the list to the upper int(Ceiling) first.\n * Examples:\n * For lst = [1,2,3] the output should be 14\n * For lst = [1,4,9] the output should be 98\n * For lst = [1,3,5,7] the output should be 84\n * For lst = [1.4,4.2,0] the output should be 29\n * For lst = [-2.4,1,1] the output should be 6\n */\nconst sum_squares = function (lst: Array<number>) : number  {\n\n  const int_ceil_list : Array<number> = []\n  for(let i=0;i<lst.length;i++){\n    int_ceil_list.push(math.ceil(lst[i]))\n  }\n\n  let sum: number = 0;\n  for(let j=0;j<int_ceil_list.length;j++){\n    sum += math.pow(int_ceil_list[j],2)\n  }\n\n  return sum\n}"}
{"task_id": "HumanEval_typescript/134", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Create a function that returns True if the last character\n * of a given string is an alphabetical character and is not\n * a part of a word, and False otherwise.\n * Note: \"word\" is a group of characters separated by space.\n * \n * Examples:\n * check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n * check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n * check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n * check_if_last_char_is_a_letter(\"\") \u279e False \n * \n */\n\n const check_if_last_char_is_a_letter = function (txt: string) : boolean  {\n\n    if (!txt){\n        return false;\n    }\n    \n    txt = txt.trim();\n    \n    let lastChar = txt[txt.length -1];\n    if (isNaN(lastChar as any)){\n        return true;\n    } else {\n        return false;\n    }\n}"}
{"task_id": "HumanEval_typescript/135", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Create a function which returns the largest index of an element which\n * is not greater than or equal to the element immediately preceding it. If\n * no such element exists then return -1. The given array will not contain\n * duplicate values.\n * \n * Examples:\n * can_arrange([1,2,4,3,5]) = 3\n * can_arrange([1,2,3]) = -1\n * \n */\nconst can_arrange = function (arr: Array<number>) : number  {\n  for(let i = arr.length-1; i>=0; i--){\n    if(arr[i] < arr[i-1]){\n      return i;\n    }\n  }\n  return -1;\n};"}
{"task_id": "HumanEval_typescript/136", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Create a function that returns a tuple (a, b), where 'a' is\n * the largest of negative integers, and 'b' is the smallest\n * of positive integers in a list.\n * If there is no negative or positive integers, return them as None.\n * \n * Examples:\n * largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n * largest_smallest_integers([]) == (None, None)\n * largest_smallest_integers([0]) == (None, None)\n * \n */\nconst largest_smallest_integers = function (lst: Array<number>) : Array<any>  {\n\n  let smallestPositiveNumber : number | null = null;\n  let largestNegativeNumber : number | null = null;\n\n  for(let i=0 ; i < lst.length ; i++) {\n    if( lst[i] > 0 ) {\n      if( (smallestPositiveNumber === null) || (lst[i] < smallestPositiveNumber)) {\n        smallestPositiveNumber = lst[i];\n      }\n    }\n    else if( lst[i] < 0) {\n      if( (largestNegativeNumber === null) || (lst[i] > largestNegativeNumber) ) {\n        largestNegativeNumber = lst[i];\n      }\n    }\n  }\n\n  return [ largestNegativeNumber, smallestPositiveNumber ];\n}"}
{"task_id": "HumanEval_typescript/137", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Create a function that takes integers, floats, or strings representing\n * real numbers, and returns the larger variable in its given variable type.\n * Return None if the values are equal.\n * Note: If a real number is represented as a string, the floating point might be . or ,\n * \n * compare_one(1, 2.5)\ufffd\ufffd 2.5\n * compare_one(1, \"2,3\") \u279e \"2,3\"\n * compare_one(\"5,1\", \"6\") \u279e \"6\"\n * compare_one(\"1\", 1) \u279e None\n * \n */\n\n const compare_one = function (a: any, b: any) : any  {\n    if (Number.isInteger(a) && Number.isInteger(b)) {\n      return a > b ? a : b; \n    } else if (!Number.isNaN(Number(a)) && !Number.isNaN(Number(b))) {\n      let floatA = Number(a);\n      let floatB = Number(b);\n      if (floatA === floatB) {\n        return null;\n      } \n      return  floatA > floatB ? a : b;\n    } else if (typeof a === 'string' && typeof b === 'string') {\n      return a > b ? a : b;\n    } \n    return undefined;\n}"}
{"task_id": "HumanEval_typescript/138", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n * Example\n * is_equal_to_sum_even(4) == False\n * is_equal_to_sum_even(6) == False\n * is_equal_to_sum_even(8) == True\n * \n */\nconst is_equal_to_sum_even = function (n: number) : boolean  {\n    return n % 2 === 0;\n}"}
{"task_id": "HumanEval_typescript/139", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * The Brazilian factorial is defined as:\n * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n * where n > 0\n * \n * For example:\n * >>> special_factorial(4)\n * 288\n * \n * The function will receive an integer as input and should return the special\n * factorial of this integer.\n */\nconst special_factorial = function (n: number): number {\n  if (n === 1 || n === 0) {\n    return 1;\n  } else if (n > 1) {\n    let result: number = 1;\n    for (let i:number = n; i >= 1; i--) {\n      result *= i;\n    }\n    return result;\n  }\n};"}
{"task_id": "HumanEval_typescript/140", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a string text, replace all spaces in it with underscores, \n * and if a string has more than 2 consecutive spaces, \n * then replace all consecutive spaces with - \n * \n * fix_spaces(\"Example\") == \"Example\"\n * fix_spaces(\"Example 1\") == \"Example_1\"\n * fix_spaces(\" Example 2\") == \"_Example_2\"\n * fix_spaces(\" Example   3\") == \"_Example-3\"\n * \n */\nconst fix_spaces = function (text: string) : string  {\n    return text.replace(/\\s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n};"}
{"task_id": "HumanEval_typescript/141", "language": "typescript", "completion": "import { RegEx } from '../utils/RegEx';\n/**\n * You're an expert TypeScript programmer\n * Create a function which takes a string representing a file's name, and returns\n * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n * A file's name is considered to be valid if and only if all the following conditions \n * are met:\n * - There should not be more than three digits ('0'-'9') in the file's name.\n * - The file's name contains exactly one dot '.'\n * - The substring before the dot should not be empty, and it starts with a letter from \n * the latin alphapet ('a'-'z' and 'A'-'Z').\n * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n * Examples:\n * file_name_check(\"example.txt\") # => 'Yes'\n * file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n * \n */\nconst file_name_check = function (file_name: string) : string  {\n  let result = \"No\";\n\n  const regEx = new RegEx();\n  if (regEx.testFile(file_name)) {\n    result = \"Yes\"\n  }\n  \n  return result;\n}"}
{"task_id": "HumanEval_typescript/142", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n */\nconst sum_squares = function (lst: number[]) : number  {"}
{"task_id": "HumanEval_typescript/143", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a string representing a sentence,\n * the sentence contains some words separated by a space,\n * and you have to return a string that contains the words from the original sentence,\n * whose lengths are prime numbers,\n * the order of the words in the new string should be the same as the original one.\n * \n * Example 1:\n * Input: sentence = \"This is a test\"\n * Output: \"is\"\n * \n * Example 2:\n * Input: sentence = \"lets go for swimming\"\n * Output: \"go for\"\n * \n * Constraints:\n * * 1 <= len(sentence) <= 100\n * * sentence contains only letters\n * \n */\nconst words_in_sentence = function (sentence: string) : string  {\n    let newString = \"\";\n    const primes = [2, 3, 5, 7];\n    for (let i = 0; i < sentence.split(' ').length; i++) {\n        if (primes.includes(sentence.split(\" \")[i].length)) {\n            newString += `${sentence.split(\" \")[i]} `;\n        }\n    }\n    return newString.trim();\n};"}
{"task_id": "HumanEval_typescript/144", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Your task is to implement a function that will simplify the expression\n * x * n. The function returns True if x * n evaluates to a whole number and False\n * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n * \n * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n * \n * simplify(\"1/5\", \"5/1\") = True\n * simplify(\"1/6\", \"2/1\") = False\n * simplify(\"7/10\", \"10/2\") = False\n * \n */\nconst simplify = function (x: string, n: string) : boolean  {\n    const [numeratorX, denominatorX] = x.split('/').map(Number);\n    const [numeratorN, denominatorN] = n.split('/').map(Number);\n    return numeratorX * numeratorN % denominatorX === 0;\n};"}
{"task_id": "HumanEval_typescript/145", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Write a function which sorts the given list of integers\n * in ascending order according to the sum of their digits.\n * Note: if there are several items with similar sum of their digits,\n * order them based on their index in original list.\n * \n * For example:\n * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n * >>> order_by_points([]) == []\n * \n */\nconst order_by_points = function (nums: Array<number>) : Array<number>  {\n  // Write your code here!\n  const getPoints = (num) => String(num).split('').reduce((sum, digit) => sum + Number(digit), 0);\n\n  nums.sort((a, b) => {\n    let aPoints = getPoints(a);\n    let bPoints = getPoints(b);\n\n    if(aPoints < bPoints){\n      return -1;\n    } else if (aPoints > bPoints){\n      return 1;\n    } else {\n      // If points are equal sort by index\n      if(nums.indexOf(a) < nums.indexOf(b)){\n        return -1;\n      } else if (nums.indexOf(a) > nums.indexOf(b)){\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n\n  return nums;\n};"}
{"task_id": "HumanEval_typescript/146", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Write a function that takes an array of numbers as input and returns \n * the number of elements in the array that are greater than 10 and both \n * first and last digits of a number are odd (1, 3, 5, 7, 9).\n * For example:\n * specialFilter([15, -73, 14, -15]) => 1 \n * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n * \n */\nconst specialFilter = function (nums: Array<number>) : number  {\n    const firstLastOdd = (num) => {\n        return num > 10 && /[13579]/.test(String(num)[0]) && /[13579]/.test(String(num).slice(-1));\n    }\n\n    // reduce the array to a count of elements that meet the criteria.\n    return nums.reduce((count, num) => firstLastOdd(num) ? count + 1 : count , 0);\n}"}
{"task_id": "HumanEval_typescript/147", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You are given a positive integer n. You have to create an integer array a of length n.\n * For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n * and a[i] + a[j] + a[k] is a multiple of 3.\n * \n * Example :\n * Input: n = 5\n * Output: 1\n * Explanation: \n * a = [1, 3, 7, 13, 21]\n * The only valid triple is (1, 7, 13).\n * \n */\nconst get_max_triples = function (n: number) : number  {\n    // Create an array with all values of a[i] \n    let a_values = [];\n\n    for(let i=0; i<n; i++) {\n        a_values.push(i*i -i +1);\n    }\n    \n    // For each value in a, check if (a[i], a[j], a[k]) is a multiple of 3 and \n    //  a[i] + a[j] + a[k] is a valid triple.\n\n    let counter = 0;\n\n    for(let i=0; i<n-2; i++) {\n        for(let j=i+1; j<n-1; j++) {\n            for(let k=j+1; k<n; k++) {\n                if((a_values[i] + a_values[j] + a_values[k])%3===0) {\n                    counter++;\n                }\n            }\n        }\n    }\n\n    return counter;\n};"}
{"task_id": "HumanEval_typescript/148", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * There are eight planets in our solar system: the closerst to the Sun \n * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n * Uranus, Neptune.\n * Write a function that takes two planet names as strings planet1 and planet2. \n * The function should return a tuple containing all planets whose orbits are \n * located between the orbit of planet1 and the orbit of planet2, sorted by \n * the proximity to the sun. \n * The function should return an empty tuple if planet1 or planet2\n * are not correct planet names. \n * Examples\n * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n * \n */\nconst bf = function (planet1: string, planet2: string) : Array<string>  {\n  const orbits: any = {\n    Mercury: 1,\n    Venus: 2,\n    Earth: 3,\n    Mars: 4,\n    Jupiter: 5,\n    Saturn: 6,\n    Uranus: 7,\n    Neptune: 8\n  };\n\n  let planet1Index = orbits[planet1];\n  let planet2Index = orbits[planet2];\n\n  if (planet1Index === undefined || planet2Index === undefined) {\n    return [];\n  }\n\n  return Object.keys(orbits).filter((key: any) => { \n    const index = orbits[key];\n    return (index > planet1Index && index < planet2Index);\n  });\n};"}
{"task_id": "HumanEval_typescript/149", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Write a function that accepts a list of strings as a parameter,\n * deletes the strings that have odd lengths from it,\n * and returns the resulted list with a sorted order,\n * The list is always a list of strings and never an array of numbers,\n * and it may contain duplicates.\n * The order of the list should be ascending by length of each word, and you\n * should return the list sorted by that rule.\n * If two words have the same length, sort the list alphabetically.\n * The function should return a list of strings in sorted order.\n * You may assume that all words will have the same length.\n * For example:\n * assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n * assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n */\nconst sorted_list_sum = function (lst: Array<string>) : number  {\n  lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n  const lengths = {}\n\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n\n    if (word.length % 2 !== 0) {\n      continue;\n    }\n\n    if (lengths[word.length] === undefined) {\n      lengths[word.length] = [word];\n    } else {\n      lengths[word.length].push(word);\n    }\n  }\n\n  let sum = 0;\n  for (const length in lengths) {\n    const words = lengths[length];\n\n    if (words.length % 2 !== 0) {\n      continue;\n    }\n\n    for (let i = 0; i < words.length / 2; i++) {\n      sum += Number(words[i]) + Number(words[i + words.length / 2]);\n    }\n  }\n\n  return sum;\n}"}
{"task_id": "HumanEval_typescript/150", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * A simple program which should return the value of x if n is \n * a prime number and should return the value of y otherwise.\n * \n * Examples:\n * for x_or_y(7, 34, 12) == 34\n * for x_or_y(15, 8, 5) == 5\n * \n */\nconst x_or_y = function (n: number, x: number, y: number) : number  {\n  if(isPrime(n)){\n    return x;\n  } else{\n    return y;\n  }\n};\n\nfunction isPrime(num:number){\n    var i, isPrime=true;\n    for(i=2;i<num;i++){\n        if(num%i==0){\n            isPrime=false;\n        }\n    }\n    return isPrime;\n}"}
{"task_id": "HumanEval_typescript/151", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a list of numbers, return the sum of squares of the numbers\n * in the list that are odd. Ignore numbers that are negative or not integers.\n * \n * double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n * double_the_difference([-1, -2, 0]) == 0\n * double_the_difference([9, -2]) == 81\n * double_the_difference([0]) == 0  \n * \n * If the input list is empty, return 0.\n * \n */\nconst double_the_difference = function (lst: Array<number>) : number  {\n  if (!lst || lst.length === 0) return 0;\n  \n  let sum = 0;\n  lst.forEach(function(element) {\n      if ((element | 0) !== element) return; // isNaN, non-integer\n      if (element % 2 === 1) sum += element * element; \n  });\n  \n  return sum;\n}"}
{"task_id": "HumanEval_typescript/152", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * I think we all remember that feeling when the result of some long-awaited\n * event is finally known. The feelings and thoughts you have at that moment are\n * definitely worth noting down and comparing.\n * Your task is to determine if a person correctly guessed the results of a number of matches.\n * You are given two arrays of scores and guesses of equal length, where each index shows a match. \n * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n * \n * example:\n * \n * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n * \n */\nconst compare = function (game: Array<number>, guess: Array<number>) : Array<number>  {\n\n    let results:Array<number> = []\n    for(let i=0;i<game.length;i++){\n        if(guess[i] == game[i]){\n            results.push(0)\n        } else {\n            results.push(Math.abs(game[i]-guess[i]))\n        }\n    }\n\n    return results;\n}"}
{"task_id": "HumanEval_typescript/153", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You will be given the name of a class (a string) and a list of extensions.\n * The extensions are to be used to load additional classes to the class. The\n * strength of the extension is as follows: Let CAP be the number of the uppercase\n * letters in the extension's name, and let SM be the number of lowercase letters \n * in the extension's name, the strength is given by the fraction CAP - SM. \n * You should find the strongest extension and return a string in this \n * format: ClassName.StrongestExtensionName.\n * If there are two or more extensions with the same strength, you should\n * choose the one that comes first in the list.\n * For example, if you are given \"Slices\" as the class and a list of the\n * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n * (its strength is -1).\n * Example:\n * for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n * \n */\nconst Strongest_Extension = function (class_name: string, extensions: Array<string>) : string  {\n    let strongestExtension = '';\n\n    // Calculate strength of each extension and compare to current strongest\n    for(let i=0;i < extensions.length;i++) {\n        let CAP = 0;\n        let SM = 0;\n\n        for(let j = 0;j < extensions[i].length;j++) {\n            if(extensions[i][j] == extensions[i][j].toUpperCase()) {\n                CAP++;\n            } else {\n                SM++;\n            } \n        }\n        \n        // Update strongest extension\n        let strength = (CAP - SM);\n        console.log(`Extension: ${extensions[i]} Strength: ${strength}`);\n\n        if(strongestExtension == '' || strength > 0) {\n            strongestExtension = extensions[i];\n        }\n    }\n\n    return `${class_name}.${strongestExtension}`;\n}"}
{"task_id": "HumanEval_typescript/154", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n * cycpattern_check(\"abcd\",\"abd\") => False\n * cycpattern_check(\"hello\",\"ell\") => True\n * cycpattern_check(\"whassup\",\"psus\") => False\n * cycpattern_check(\"abab\",\"baa\") => True\n * cycpattern_check(\"efef\",\"eeff\") => False\n * cycpattern_check(\"himenss\",\"simen\") => True\n */\nconst cycpattern_check = function (a: string, b: string): boolean  {\n  // check if any rotation of b is substring of a \n  for(let i=0;i<b.length;i++){\n    let j=0;\n    while(j<a.length && b[(i+j)%b.length] === a[j]){\n      j++;\n    }\n    if(j===a.length){\n      return true;\n    }\n  }\n  return false;\n};"}
{"task_id": "HumanEval_typescript/155", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Given an integer. return a tuple that has the number of even and odd digits respectively.\n * \n * Example:\n * even_odd_count(-12) ==> (1, 1)\n * even_odd_count(123) ==> (1, 2)\n * \n */\nconst even_odd_count = function (num: number) : Array<number>  {\n\n  let count = [0, 0];\n  const numString = String(Math.abs(num));\n  \n  numString.split('').forEach((x, i) => {\n\n    if (Number(x) % 2 === 0) {\n\n      count[0]++;\n    } else {\n      \n      count[1]++;\n    }\n  });\n\n  return count;\n}"}
{"task_id": "HumanEval_typescript/156", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a positive integer, obtain its roman numeral equivalent as a string,\n * and return it in lowercase.\n * Restrictions: 1 <= num <= 1000\n * \n * Examples:\n * >>> int_to_mini_roman(19) == 'xix'\n * >>> int_to_mini_roman(152) == 'clii'\n * >>> int_to_mini_roman(426) == 'cdxxvi'\n * \n */\nconst int_to_mini_roman = function (number0: number) : string  {\n  const digits_list = [\n    ['m',1000],['cm',900],['d',500],['cd',400],\n    ['c',100],['xc',90],['l',50],['xl',40],\n    ['x',10],['ix',9],['v',5],['iv',4],\n    ['i',1]\n  ]\n\n  const number = Math.abs(number0)\n\n  let result_string = ''\n  for (let i = 0; i < digits_list.length; ++i) {\n    while (number >= digits_list[i][1]) {\n      result_string += digits_list[i][0]\n      number -= digits_list[i][1]\n    }\n  }\n\n  return result_string\n}"}
{"task_id": "HumanEval_typescript/157", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given the lengths of the three sides of a triangle. Return True if the three\n * sides form a right-angled triangle, False otherwise.\n * A right-angled triangle is a triangle in which one angle is right angle or \n * 90 degree.\n * Example:\n * right_angle_triangle(3, 4, 5) == True\n * right_angle_triangle(1, 2, 3) == False\n * \n */\nconst right_angle_triangle = function (a: number, b: number, c: number) : boolean  {\n    let triangleSidesArray = [a, b, c];\n    triangleSidesArray.sort((a,b) => a-b);\n\n    if(triangleSidesArray[0] + triangleSidesArray[1] === triangleSidesArray[2])\n        return true;\n    else \n        return false;\n};"}
{"task_id": "HumanEval_typescript/158", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * Write a function that accepts a list of strings.\n * The list contains different words. Return the word with maximum number\n * of unique characters. If multiple strings have maximum number of unique\n * characters, return the one which comes first in lexicographical order.\n * \n * find_max([\"name\", \"of\", \"string\"]) == \"string\"\n * find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n * find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n * \n */\nconst find_max = function (words: Array<string>) : string  {\n  let max = \"\";\n  for(let word of words) {\n    if(getUniqueCount(word) > getUniqueCount(max)) {\n      max = word;\n    } else if (getUniqueCount(word) == getUniqueCount(max)) {\n      if (word < max) {\n        max = word;\n      }\n    }\n  }\n\n  return max;\n}\n\nconst getUniqueCount = function (str: string): number  {\n  const uniqueChars = new Set(str);\n  return uniqueChars.size;\n}"}
{"task_id": "HumanEval_typescript/159", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n * but now you need to eat more carrots to complete the day's meals.\n * you should return an array of [ total number of eaten carrots after your meals,\n * the number of carrots left after your meals ]\n * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n * \n * Example:\n * * eat(5, 6, 10) -> [11, 4]\n * * eat(4, 8, 9) -> [12, 1]\n * * eat(1, 10, 10) -> [11, 0]\n * * eat(2, 11, 5) -> [7, 0]\n * \n * Variables:\n * @number : integer\n * the number of carrots that you have eaten.\n * @need : integer\n * the number of carrots that you need to eat.\n * @remaining : integer\n * the number of remaining carrots thet exist in stock\n * \n * Constrain:\n * * 0 <= number <= 1000\n * * 0 <= need <= 1000\n * * 0 <= remaining <= 1000\n * \n * Have fun :)\n * \n */\nconst eat = function (number: number, need: number, remaining: number) : Array<number>  {\n\n  if (need > remaining + number ) {\n    return [ remaining + number, 0 ]\n  } else {\n    return [ number + need, remaining - (need - number)]\n  }\n}"}
{"task_id": "HumanEval_typescript/160", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given two lists operator, and operand. The first list has basic algebra operations, and \n * the second list is a list of integers. Use the two given lists to build the algebric \n * expression and return the evaluation of this expression.\n * \n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multiplication ( * ) \n * Floor division ( // ) \n * Exponentiation ( ** ) \n * \n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n * \n * Note:\n * The length of operator list is equal to the length of operand list minus one.\n * Operand is a list of of non-negative integers.\n * Operator list has at least one operator, and operand list has at least two operands.\n */\n\n const do_algebra = function (operator: Array<string>, operand: Array<number>) : number  {\n  let result = null;\n  for (let i=0; i<operator.length; i++) {\n    if (i === 0)\n      result = operand[0];\n    else {\n      const operator_char = operator[i];\n      const op1 = operand[i - 1];\n      const op2 = operand[i];\n\n      switch(operator_char){\n        case '+':\n          result += op2;\n          break;\n        case '-':\n          result -= op2;\n          break;\n        case '*':\n          result *= op2;\n          break;\n        case '/':\n          result /= op2;\n          break;\n        case '//':\n          result = Math.floor(result / op2);\n          break;\n        case '**':\n          result **= op2;\n          break;\n      }\n    }\n  }\n\n  return result;\n};"}
{"task_id": "HumanEval_typescript/161", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * You are given a string s.\n * if s[i] is a letter, reverse its case from lower to upper or vise versa, \n * otherwise keep it as it is.\n * If the string contains no letters, reverse the string.\n * The function should return the resulted string.\n * Examples\n * solve(\"1234\") = \"4321\"\n * solve(\"ab\") = \"AB\"\n * solve(\"#a@C\") = \"#A@c\"\n * \n */\nconst solve = function (s: string) : string  {\n  let arr = s.split(\"\");\n\n  for(let i=0;i<arr.length;i++) {\n    if(/[a-z]/.test(arr[i])) {\n      if(/[A-Z]/.test(arr[i])){\n        arr[i]=arr[i].toLowerCase();\n      } else {\n        arr[i]=arr[i].toUpperCase();\n      }\n    }\n  }\n\n  return arr.join(\"\");\n};"}
{"task_id": "HumanEval_typescript/162", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return None.\n * \n * >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n * \n */\nconst crypto = require('crypto');\nconst string_to_md5 = function (text: string) : any  {\n    if (text.length === 0) {\n        return null;\n    } else {\n        var md5sum = crypto.createHash('md5');\n        md5sum.update(text);\n        var hash = md5sum.digest('hex');\n        return hash;\n    }\n}"}
{"task_id": "HumanEval_typescript/163", "language": "typescript", "completion": "/**\n * You're an expert TypeScript programmer\n * \n * Given two positive integers a and b, return the even digits between a\n * and b, in ascending order.\n * \n * For example:\n * generate_integers(2, 8) => [2, 4, 6, 8]\n * generate_integers(8, 2) => [2, 4, 6, 8]\n * generate_integers(10, 14) => []\n * \n */\nconst generate_integers = function (a: number, b: number) : Array<number>  {\n  const output = []\n\n  if (a > b) {\n    return output\n  }\n\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      output.push(i);\n    }\n  }\n  \n  return output\n}"}
